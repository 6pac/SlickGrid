{
  "version": 3,
  "sources": ["../../src/slick.core.ts", "../../src/controls/slick.columnmenu.ts", "../../src/controls/slick.columnpicker.ts", "../../src/controls/slick.gridmenu.ts", "../../src/controls/slick.pager.ts", "../../src/models/fieldType.enum.ts", "../../src/models/sortDirectionNumber.enum.ts", "../../src/plugins/slick.autotooltips.ts", "../../src/plugins/slick.cellcopymanager.ts", "../../src/plugins/slick.cellexternalcopymanager.ts", "../../src/plugins/slick.cellmenu.ts", "../../src/plugins/slick.cellrangedecorator.ts", "../../src/slick.interactions.ts", "../../src/plugins/slick.cellrangeselector.ts", "../../src/plugins/slick.cellselectionmodel.ts", "../../src/plugins/slick.checkboxselectcolumn.ts", "../../src/plugins/slick.contextmenu.ts", "../../src/plugins/slick.crossgridrowmovemanager.ts", "../../src/plugins/slick.customtooltip.ts", "../../src/plugins/slick.draggablegrouping.ts", "../../src/plugins/slick.headerbuttons.ts", "../../src/plugins/slick.headermenu.ts", "../../src/plugins/slick.resizer.ts", "../../src/plugins/slick.rowdetailview.ts", "../../src/plugins/slick.rowmovemanager.ts", "../../src/plugins/slick.rowselectionmodel.ts", "../../src/plugins/slick.state.ts", "../../src/slick.compositeeditor.ts", "../../src/slick.groupitemmetadataprovider.ts", "../../src/slick.dataview.ts", "../../src/slick.editors.ts", "../../src/slick.formatters.ts", "../../src/slick.grid.ts", "../../src/slick.remotemodel-yahoo.ts", "../../src/slick.remotemodel.ts"],
  "sourcesContent": ["/**\r\n * Contains core SlickGrid classes.\r\n * @module Core\r\n * @namespace Slick\r\n */\r\n\r\nimport type {\r\n  AnyFunction,\r\n  CSSStyleDeclarationWritable,\r\n  EditController,\r\n  ElementEventListener,\r\n  Handler,\r\n  InferDOMType,\r\n  MergeTypes\r\n} from './models/index.js';\r\n\r\nexport interface BasePubSub {\r\n  publish<ArgType = any>(_eventName: string | any, _data?: ArgType): any;\r\n  subscribe<ArgType = any>(_eventName: string | Function, _callback: (data: ArgType) => void): any;\r\n}\r\n\r\n/**\r\n * An event object for passing data to event handlers and letting them control propagation.\r\n * <p>This is pretty much identical to how W3C and jQuery implement events.</p>\r\n * @class EventData\r\n * @constructor\r\n */\r\nexport class SlickEventData<ArgType = any> {\r\n  protected _isPropagationStopped = false;\r\n  protected _isImmediatePropagationStopped = false;\r\n  protected _isDefaultPrevented = false;\r\n  protected returnValues: string[] = [];\r\n  protected returnValue: any = undefined;\r\n  protected _eventTarget?: EventTarget | null;\r\n  protected nativeEvent?: Event | null;\r\n  protected arguments_?: ArgType;\r\n\r\n  // public props that can be optionally pulled from the provided Event in constructor\r\n  // they are all optional props because it really depends on the type of Event provided (KeyboardEvent, MouseEvent, ...)\r\n  readonly altKey?: boolean;\r\n  readonly ctrlKey?: boolean;\r\n  readonly metaKey?: boolean;\r\n  readonly shiftKey?: boolean;\r\n  readonly key?: string;\r\n  readonly keyCode?: number;\r\n  readonly clientX?: number;\r\n  readonly clientY?: number;\r\n  readonly offsetX?: number;\r\n  readonly offsetY?: number;\r\n  readonly pageX?: number;\r\n  readonly pageY?: number;\r\n  readonly bubbles?: boolean;\r\n  readonly target?: HTMLElement;\r\n  readonly type?: string;\r\n  readonly which?: number;\r\n  readonly x?: number;\r\n  readonly y?: number;\r\n\r\n  get defaultPrevented() {\r\n    return this._isDefaultPrevented;\r\n  }\r\n\r\n  constructor(protected event?: Event | null, protected args?: ArgType) {\r\n    this.nativeEvent = event;\r\n    this.arguments_ = args;\r\n\r\n    // when we already have an event, we want to keep some of the event properties\r\n    // looping through some props is the only way to keep and sync these properties to the returned EventData\r\n    if (event) {\r\n      [\r\n        'altKey', 'ctrlKey', 'metaKey', 'shiftKey', 'key', 'keyCode',\r\n        'clientX', 'clientY', 'offsetX', 'offsetY', 'pageX', 'pageY',\r\n        'bubbles', 'target', 'type', 'which', 'x', 'y'\r\n      ].forEach(key => (this as any)[key] = event[key as keyof Event]);\r\n    }\r\n    this._eventTarget = this.nativeEvent ? this.nativeEvent.target : undefined;\r\n  }\r\n\r\n  /**\r\n   * Stops event from propagating up the DOM tree.\r\n   * @method stopPropagation\r\n   */\r\n  stopPropagation() {\r\n    this._isPropagationStopped = true;\r\n    this.nativeEvent?.stopPropagation();\r\n  }\r\n\r\n  /**\r\n   * Returns whether stopPropagation was called on this event object.\r\n   * @method isPropagationStopped\r\n   * @return {Boolean}\r\n   */\r\n  isPropagationStopped() {\r\n    return this._isPropagationStopped;\r\n  }\r\n\r\n  /**\r\n   * Prevents the rest of the handlers from being executed.\r\n   * @method stopImmediatePropagation\r\n   */\r\n  stopImmediatePropagation() {\r\n    this._isImmediatePropagationStopped = true;\r\n    if (this.nativeEvent) {\r\n      this.nativeEvent.stopImmediatePropagation();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Returns whether stopImmediatePropagation was called on this event object.\\\r\n   * @method isImmediatePropagationStopped\r\n   * @return {Boolean}\r\n   */\r\n  isImmediatePropagationStopped() {\r\n    return this._isImmediatePropagationStopped;\r\n  };\r\n\r\n  getNativeEvent<E extends Event>() {\r\n    return this.nativeEvent as E;\r\n  }\r\n\r\n  preventDefault() {\r\n    if (this.nativeEvent) {\r\n      this.nativeEvent.preventDefault();\r\n    }\r\n    this._isDefaultPrevented = true;\r\n  }\r\n\r\n  isDefaultPrevented() {\r\n    if (this.nativeEvent) {\r\n      return this.nativeEvent.defaultPrevented;\r\n    }\r\n    return this._isDefaultPrevented;\r\n  }\r\n\r\n  addReturnValue(value: any) {\r\n    this.returnValues.push(value);\r\n    if (this.returnValue === undefined && value !== undefined) {\r\n      this.returnValue = value;\r\n    }\r\n  }\r\n\r\n  getReturnValue() {\r\n    return this.returnValue;\r\n  }\r\n\r\n  getArguments() {\r\n    return this.arguments_;\r\n  }\r\n}\r\n\r\n/**\r\n * A simple publisher-subscriber implementation.\r\n * @class Event\r\n * @constructor\r\n */\r\nexport class SlickEvent<ArgType = any> {\r\n  protected _handlers: Handler<ArgType>[] = [];\r\n  protected _pubSubService?: BasePubSub;\r\n\r\n  get subscriberCount() {\r\n    return this._handlers.length;\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   * @param {String} [eventName] - event name that could be used for dispatching CustomEvent (when enabled)\r\n   * @param {BasePubSub} [pubSubService] - event name that could be used for dispatching CustomEvent (when enabled)\r\n   */\r\n  constructor(protected readonly eventName?: string, protected readonly pubSub?: BasePubSub) {\r\n    this._pubSubService = pubSub;\r\n  }\r\n\r\n  /**\r\n   * Adds an event handler to be called when the event is fired.\r\n   * <p>Event handler will receive two arguments - an <code>EventData</code> and the <code>data</code>\r\n   * object the event was fired with.<p>\r\n   * @method subscribe\r\n   * @param {Function} fn - Event handler.\r\n   */\r\n  subscribe(fn: Handler<ArgType>) {\r\n    this._handlers.push(fn);\r\n  }\r\n\r\n  /**\r\n   * Removes an event handler added with <code>subscribe(fn)</code>.\r\n   * @method unsubscribe\r\n   * @param {Function} [fn] - Event handler to be removed.\r\n   */\r\n  unsubscribe(fn?: Handler<ArgType>) {\r\n    for (let i = this._handlers.length - 1; i >= 0; i--) {\r\n      if (this._handlers[i] === fn) {\r\n        this._handlers.splice(i, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fires an event notifying all subscribers.\r\n   * @method notify\r\n   * @param {Object} args Additional data object to be passed to all handlers.\r\n   * @param {EventData} [event] - An <code>EventData</code> object to be passed to all handlers.\r\n   *      For DOM events, an existing W3C event object can be passed in.\r\n   * @param {Object} [scope] - The scope (\"this\") within which the handler will be executed.\r\n   *      If not specified, the scope will be set to the <code>Event</code> instance.\r\n   */\r\n  notify(args: ArgType, evt?: SlickEventData<ArgType> | Event | MergeTypes<SlickEventData<ArgType>, Event> | null, scope?: any) {\r\n    const sed: SlickEventData = evt instanceof SlickEventData\r\n      ? evt\r\n      : new SlickEventData(evt, args);\r\n    scope = scope || this;\r\n\r\n    for (let i = 0; i < this._handlers.length && !(sed.isPropagationStopped() || sed.isImmediatePropagationStopped()); i++) {\r\n      const returnValue = this._handlers[i].call(scope, sed, args);\r\n      sed.addReturnValue(returnValue);\r\n    }\r\n\r\n    // user can optionally add a global PubSub Service which makes it easy to publish/subscribe to events\r\n    if (typeof this._pubSubService?.publish === 'function' && this.eventName) {\r\n      const ret = this._pubSubService.publish<{ args: ArgType; eventData?: SlickEventData<ArgType>; nativeEvent?: Event; }>(this.eventName, { args, eventData: sed });\r\n      sed.addReturnValue(ret);\r\n    }\r\n    return sed;\r\n  }\r\n\r\n  setPubSubService(pubSub: BasePubSub) {\r\n    this._pubSubService = pubSub;\r\n  }\r\n}\r\n\r\nexport class SlickEventHandler {\r\n  protected handlers: Array<{ event: SlickEvent; handler: Handler<any>; }> = [];\r\n\r\n  subscribe<T = any>(event: SlickEvent<T>, handler: Handler<T>) {\r\n    this.handlers.push({ event, handler });\r\n    event.subscribe(handler);\r\n\r\n    return this as SlickEventHandler;  // allow chaining\r\n  }\r\n\r\n  unsubscribe<T = any>(event: SlickEvent<T>, handler: Handler<T>) {\r\n    let i = this.handlers.length;\r\n    while (i--) {\r\n      if (this.handlers[i].event === event &&\r\n        this.handlers[i].handler === handler) {\r\n        this.handlers.splice(i, 1);\r\n        event.unsubscribe(handler);\r\n        return;\r\n      }\r\n    }\r\n\r\n    return this as SlickEventHandler;  // allow chaining\r\n  }\r\n\r\n  unsubscribeAll() {\r\n    let i = this.handlers.length;\r\n    while (i--) {\r\n      this.handlers[i].event.unsubscribe(this.handlers[i].handler);\r\n    }\r\n    this.handlers = [];\r\n\r\n    return this as SlickEventHandler;  // allow chaining\r\n  }\r\n}\r\n\r\n/**\r\n * A structure containing a range of cells.\r\n * @class Range\r\n * @constructor\r\n * @param fromRow {Integer} Starting row.\r\n * @param fromCell {Integer} Starting cell.\r\n * @param toRow {Integer} Optional. Ending row. Defaults to <code>fromRow</code>.\r\n * @param toCell {Integer} Optional. Ending cell. Defaults to <code>fromCell</code>.\r\n */\r\nexport class SlickRange {\r\n  fromRow: number;\r\n  fromCell: number;\r\n  toCell: number;\r\n  toRow: number;\r\n\r\n  constructor(fromRow: number, fromCell: number, toRow?: number, toCell?: number) {\r\n    if (toRow === undefined && toCell === undefined) {\r\n      toRow = fromRow;\r\n      toCell = fromCell;\r\n    }\r\n\r\n    /**\r\n     * @property fromRow\r\n     * @type {Integer}\r\n     */\r\n    this.fromRow = Math.min(fromRow, toRow as number);\r\n\r\n    /**\r\n     * @property fromCell\r\n     * @type {Integer}\r\n     */\r\n    this.fromCell = Math.min(fromCell, toCell as number);\r\n\r\n    /**\r\n     * @property toCell\r\n     * @type {Integer}\r\n     */\r\n    this.toCell = Math.max(fromCell, toCell as number);\r\n\r\n    /**\r\n     * @property toRow\r\n     * @type {Integer}\r\n     */\r\n    this.toRow = Math.max(fromRow, toRow as number);\r\n  }\r\n\r\n\r\n  /**\r\n   * Returns whether a range represents a single row.\r\n   * @method isSingleRow\r\n   * @return {Boolean}\r\n   */\r\n  isSingleRow() {\r\n    return this.fromRow === this.toRow;\r\n  }\r\n\r\n  /**\r\n   * Returns whether a range represents a single cell.\r\n   * @method isSingleCell\r\n   * @return {Boolean}\r\n   */\r\n  isSingleCell() {\r\n    return this.fromRow === this.toRow && this.fromCell === this.toCell;\r\n  }\r\n\r\n  /**\r\n   * Returns whether a range contains a given cell.\r\n   * @method contains\r\n   * @param row {Integer}\r\n   * @param cell {Integer}\r\n   * @return {Boolean}\r\n   */\r\n  contains(row: number, cell: number) {\r\n    return row >= this.fromRow && row <= this.toRow &&\r\n      cell >= this.fromCell && cell <= this.toCell;\r\n  }\r\n\r\n  /**\r\n   * Returns a readable representation of a range.\r\n   * @method toString\r\n   * @return {String}\r\n   */\r\n  toString() {\r\n    if (this.isSingleCell()) {\r\n      return `(${this.fromRow}:${this.fromCell})`;\r\n    }\r\n    else {\r\n      return `(${this.fromRow}:${this.fromCell} - ${this.toRow}:${this.toCell})`;\r\n    }\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * A base class that all special / non-data rows (like Group and GroupTotals) derive from.\r\n * @class NonDataItem\r\n * @constructor\r\n */\r\nexport class SlickNonDataItem {\r\n  __nonDataRow = true;\r\n}\r\n\r\n\r\n/**\r\n * Information about a group of rows.\r\n * @class Group\r\n * @extends Slick.NonDataItem\r\n * @constructor\r\n */\r\nexport class SlickGroup extends SlickNonDataItem {\r\n  __group = true;\r\n\r\n  /**\r\n   * Grouping level, starting with 0.\r\n   * @property level\r\n   * @type {Number}\r\n   */\r\n  level = 0;\r\n\r\n  /**\r\n   * Number of rows in the group.\r\n   * @property count\r\n   * @type {Integer}\r\n   */\r\n  count = 0;\r\n\r\n  /**\r\n   * Grouping value.\r\n   * @property value\r\n   * @type {Object}\r\n   */\r\n  value = null;\r\n\r\n  /**\r\n   * Formatted display value of the group.\r\n   * @property title\r\n   * @type {String}\r\n   */\r\n  title: string | null = null;\r\n\r\n  /**\r\n   * Whether a group is collapsed.\r\n   * @property collapsed\r\n   * @type {Boolean}\r\n   */\r\n  collapsed: boolean | number = false;\r\n\r\n  /**\r\n   * Whether a group selection checkbox is checked.\r\n   * @property selectChecked\r\n   * @type {Boolean}\r\n   */\r\n  selectChecked = false;\r\n\r\n  /**\r\n   * GroupTotals, if any.\r\n   * @property totals\r\n   * @type {GroupTotals}\r\n   */\r\n  totals: SlickGroupTotals = null as any;\r\n\r\n  /**\r\n   * Rows that are part of the group.\r\n   * @property rows\r\n   * @type {Array}\r\n   */\r\n  rows: number[] = [];\r\n\r\n  /**\r\n   * Sub-groups that are part of the group.\r\n   * @property groups\r\n   * @type {Array}\r\n   */\r\n  groups: any[] = null as any;\r\n\r\n  /**\r\n   * A unique key used to identify the group.  This key can be used in calls to DataView\r\n   * collapseGroup() or expandGroup().\r\n   * @property groupingKey\r\n   * @type {Object}\r\n   */\r\n  groupingKey: any = null;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n  /**\r\n   * Compares two Group instances.\r\n   * @method equals\r\n   * @return {Boolean}\r\n   * @param group {Group} Group instance to compare to.\r\n   */\r\n  equals(group: SlickGroup): boolean {\r\n    return this.value === group.value &&\r\n      this.count === group.count &&\r\n      this.collapsed === group.collapsed &&\r\n      this.title === group.title;\r\n  };\r\n}\r\n\r\n/**\r\n * Information about group totals.\r\n * An instance of GroupTotals will be created for each totals row and passed to the aggregators\r\n * so that they can store arbitrary data in it.  That data can later be accessed by group totals\r\n * formatters during the display.\r\n * @class GroupTotals\r\n * @extends Slick.NonDataItem\r\n * @constructor\r\n */\r\nexport class SlickGroupTotals extends SlickNonDataItem {\r\n  __groupTotals = true;\r\n\r\n  /**\r\n   * Parent Group.\r\n   * @param group\r\n   * @type {Group}\r\n   */\r\n  group: SlickGroup = null as any;\r\n\r\n  /**\r\n   * Whether the totals have been fully initialized / calculated.\r\n   * Will be set to false for lazy-calculated group totals.\r\n   * @param initialized\r\n   * @type {Boolean}\r\n   */\r\n  initialized = false;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n\r\n/**\r\n * A locking helper to track the active edit controller and ensure that only a single controller\r\n * can be active at a time.  This prevents a whole class of state and validation synchronization\r\n * issues.  An edit controller (such as SlickGrid) can query if an active edit is in progress\r\n * and attempt a commit or cancel before proceeding.\r\n * @class EditorLock\r\n * @constructor\r\n */\r\nexport class SlickEditorLock {\r\n  activeEditController: any = null;\r\n\r\n  /**\r\n   * Returns true if a specified edit controller is active (has the edit lock).\r\n   * If the parameter is not specified, returns true if any edit controller is active.\r\n   * @method isActive\r\n   * @param editController {EditController}\r\n   * @return {Boolean}\r\n   */\r\n  isActive(editController?: EditController): boolean {\r\n    return (editController ? this.activeEditController === editController : this.activeEditController !== null);\r\n  };\r\n\r\n  /**\r\n   * Sets the specified edit controller as the active edit controller (acquire edit lock).\r\n   * If another edit controller is already active, and exception will be throw new Error(.\r\n   * @method activate\r\n   * @param editController {EditController} edit controller acquiring the lock\r\n   */\r\n  activate(editController: EditController) {\r\n    if (editController === this.activeEditController) { // already activated?\r\n      return;\r\n    }\r\n    if (this.activeEditController !== null) {\r\n      throw new Error(`Slick.EditorLock.activate: an editController is still active, can't activate another editController`);\r\n    }\r\n    if (!editController.commitCurrentEdit) {\r\n      throw new Error('Slick.EditorLock.activate: editController must implement .commitCurrentEdit()');\r\n    }\r\n    if (!editController.cancelCurrentEdit) {\r\n      throw new Error('Slick.EditorLock.activate: editController must implement .cancelCurrentEdit()');\r\n    }\r\n    this.activeEditController = editController;\r\n  };\r\n\r\n  /**\r\n   * Unsets the specified edit controller as the active edit controller (release edit lock).\r\n   * If the specified edit controller is not the active one, an exception will be throw new Error(.\r\n   * @method deactivate\r\n   * @param editController {EditController} edit controller releasing the lock\r\n   */\r\n  deactivate(editController: EditController) {\r\n    if (!this.activeEditController) {\r\n      return;\r\n    }\r\n    if (this.activeEditController !== editController) {\r\n      throw new Error('Slick.EditorLock.deactivate: specified editController is not the currently active one');\r\n    }\r\n    this.activeEditController = null;\r\n  };\r\n\r\n  /**\r\n   * Attempts to commit the current edit by calling \"commitCurrentEdit\" method on the active edit\r\n   * controller and returns whether the commit attempt was successful (commit may fail due to validation\r\n   * errors, etc.).  Edit controller's \"commitCurrentEdit\" must return true if the commit has succeeded\r\n   * and false otherwise.  If no edit controller is active, returns true.\r\n   * @method commitCurrentEdit\r\n   * @return {Boolean}\r\n   */\r\n  commitCurrentEdit(): boolean {\r\n    return (this.activeEditController ? this.activeEditController.commitCurrentEdit() : true);\r\n  };\r\n\r\n  /**\r\n   * Attempts to cancel the current edit by calling \"cancelCurrentEdit\" method on the active edit\r\n   * controller and returns whether the edit was successfully cancelled.  If no edit controller is\r\n   * active, returns true.\r\n   * @method cancelCurrentEdit\r\n   * @return {Boolean}\r\n   */\r\n  cancelCurrentEdit(): boolean {\r\n    return (this.activeEditController ? this.activeEditController.cancelCurrentEdit() : true);\r\n  };\r\n}\r\n\r\nfunction regexSanitizer(dirtyHtml: string) {\r\n  return dirtyHtml.replace(/(\\b)(on[a-z]+)(\\s*)=|javascript:([^>]*)[^>]*|(<\\s*)(\\/*)script([<>]*).*(<\\s*)(\\/*)script(>*)|(&lt;)(\\/*)(script|script defer)(.*)(&gt;|&gt;\">)/gi, '');\r\n}\r\n\r\n/**\r\n * A simple binding event service to keep track of all JavaScript events with callback listeners,\r\n * it allows us to unbind event(s) and their listener(s) by calling a simple unbind method call.\r\n * Unbinding is a necessary step to make sure that all event listeners are removed to avoid memory leaks when destroing the grid\r\n */\r\nexport class BindingEventService {\r\n  protected _boundedEvents: ElementEventListener[] = [];\r\n\r\n  getBoundedEvents() {\r\n    return this._boundedEvents;\r\n  }\r\n\r\n  destroy() {\r\n    this.unbindAll();\r\n  }\r\n\r\n  /** Bind an event listener to any element */\r\n  bind(element: Element | Window, eventName: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions, groupName = '') {\r\n    if (element) {\r\n      element.addEventListener(eventName, listener, options);\r\n      this._boundedEvents.push({ element, eventName, listener, groupName });\r\n    }\r\n  }\r\n\r\n  /** Unbind all will remove every every event handlers that were bounded earlier */\r\n  unbind(element: Element | Window, eventName: string, listener: EventListenerOrEventListenerObject) {\r\n    if (element?.removeEventListener) {\r\n      element.removeEventListener(eventName, listener);\r\n    }\r\n  }\r\n\r\n  unbindByEventName(element: Element | Window, eventName: string) {\r\n    const boundedEvent = this._boundedEvents.find(e => e.element === element && e.eventName === eventName);\r\n    if (boundedEvent) {\r\n      this.unbind(boundedEvent.element, boundedEvent.eventName, boundedEvent.listener);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unbind all event listeners that were bounded, optionally provide a group name to unbind all listeners assigned to that specific group only.\r\n   */\r\n  unbindAll(groupName?: string | string[]) {\r\n    if (groupName) {\r\n      const groupNames = Array.isArray(groupName) ? groupName : [groupName];\r\n\r\n      // unbind only the bounded event with a specific group\r\n      // Note: we need to loop in reverse order to avoid array reindexing (causing index offset) after a splice is called\r\n      for (let i = this._boundedEvents.length - 1; i >= 0; --i) {\r\n        const boundedEvent = this._boundedEvents[i];\r\n        if (groupNames.some(g => g === boundedEvent.groupName)) {\r\n          const { element, eventName, listener } = boundedEvent;\r\n          this.unbind(element, eventName, listener);\r\n          this._boundedEvents.splice(i, 1);\r\n        }\r\n      }\r\n    } else {\r\n      // unbind everything\r\n      while (this._boundedEvents.length > 0) {\r\n        const boundedEvent = this._boundedEvents.pop() as ElementEventListener;\r\n        const { element, eventName, listener } = boundedEvent;\r\n        this.unbind(element, eventName, listener);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport class Utils {\r\n  // jQuery's extend\r\n  private static getProto = Object.getPrototypeOf;\r\n  private static class2type: any = {};\r\n  private static toString = Utils.class2type.toString;\r\n  private static hasOwn = Utils.class2type.hasOwnProperty;\r\n  private static fnToString = Utils.hasOwn.toString;\r\n  private static ObjectFunctionString = Utils.fnToString.call(Object);\r\n  public static storage = {\r\n    // https://stackoverflow.com/questions/29222027/vanilla-alternative-to-jquery-data-function-any-native-javascript-alternati\r\n    _storage: new WeakMap(),\r\n    // eslint-disable-next-line object-shorthand\r\n    put: function (element: any, key: string, obj: any) {\r\n      if (!this._storage.has(element)) {\r\n        this._storage.set(element, new Map());\r\n      }\r\n      this._storage.get(element).set(key, obj);\r\n    },\r\n    // eslint-disable-next-line object-shorthand\r\n    get: function (element: any, key: string) {\r\n      const el = this._storage.get(element);\r\n      if (el) {\r\n        return el.get(key);\r\n      }\r\n      return null;\r\n    },\r\n    // eslint-disable-next-line object-shorthand\r\n    remove: function (element: any, key: string) {\r\n      const ret = this._storage.get(element).delete(key);\r\n      if (!(this._storage.get(element).size === 0)) {\r\n        this._storage.delete(element);\r\n      }\r\n      return ret;\r\n    }\r\n  };\r\n\r\n  public static isFunction(obj: any) {\r\n    return typeof obj === 'function' && typeof obj.nodeType !== 'number' && typeof obj.item !== 'function';\r\n  }\r\n\r\n  public static isPlainObject(obj: any) {\r\n    if (!obj || Utils.toString.call(obj) !== '[object Object]') {\r\n      return false;\r\n    }\r\n\r\n    const proto = Utils.getProto(obj);\r\n    if (!proto) {\r\n      return true;\r\n    }\r\n    const Ctor = Utils.hasOwn.call(proto, 'constructor') && proto.constructor;\r\n    return typeof Ctor === 'function' && Utils.fnToString.call(Ctor) === Utils.ObjectFunctionString;\r\n  }\r\n\r\n  public static calculateAvailableSpace(element: HTMLElement) {\r\n    let bottom = 0, top = 0, left = 0, right = 0;\r\n\r\n    const windowHeight = window.innerHeight || 0;\r\n    const windowWidth = window.innerWidth || 0;\r\n    const scrollPosition = Utils.windowScrollPosition();\r\n    const pageScrollTop = scrollPosition.top;\r\n    const pageScrollLeft = scrollPosition.left;\r\n    const elmOffset = Utils.offset(element);\r\n\r\n    if (elmOffset) {\r\n      const elementOffsetTop = elmOffset.top || 0;\r\n      const elementOffsetLeft = elmOffset.left || 0;\r\n      top = elementOffsetTop - pageScrollTop;\r\n      bottom = windowHeight - (elementOffsetTop - pageScrollTop);\r\n      left = elementOffsetLeft - pageScrollLeft;\r\n      right = windowWidth - (elementOffsetLeft - pageScrollLeft);\r\n    }\r\n\r\n    return { top, bottom, left, right };\r\n  }\r\n\r\n  public static extend<T = any>(...args: any[]): T {\r\n    let options, name, src, copy, copyIsArray, clone,\r\n      target = args[0],\r\n      i = 1,\r\n      deep = false;\r\n    const length = args.length;\r\n\r\n    if (typeof target === 'boolean') {\r\n      deep = target;\r\n      target = args[i] || {};\r\n      i++;\r\n    } else {\r\n      target = target || {};\r\n    }\r\n    if (typeof target !== 'object' && !Utils.isFunction(target)) {\r\n      target = {};\r\n    }\r\n    if (i === length) {\r\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n      target = this;\r\n      i--;\r\n    }\r\n    for (; i < length; i++) {\r\n      if (Utils.isDefined(options = args[i])) {\r\n        for (name in options) {\r\n          copy = options[name];\r\n          if (name === '__proto__' || target === copy) {\r\n            continue;\r\n          }\r\n          if (deep && copy && (Utils.isPlainObject(copy) ||\r\n            (copyIsArray = Array.isArray(copy)))) {\r\n            src = target[name];\r\n            if (copyIsArray && !Array.isArray(src)) {\r\n              clone = [];\r\n            } else if (!copyIsArray && !Utils.isPlainObject(src)) {\r\n              clone = {};\r\n            } else {\r\n              clone = src;\r\n            }\r\n            copyIsArray = false;\r\n            target[name] = Utils.extend(deep, clone, copy);\r\n          } else if (copy !== undefined) {\r\n            target[name] = copy;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return target as T;\r\n  }\r\n\r\n  /**\r\n   * Create a DOM Element with any optional attributes or properties.\r\n   * It will only accept valid DOM element properties that `createElement` would accept.\r\n   * For example: `createDomElement('div', { className: 'my-css-class' })`,\r\n   * for style or dataset you need to use nested object `{ style: { display: 'none' }}\r\n   * The last argument is to optionally append the created element to a parent container element.\r\n   * @param {String} tagName - html tag\r\n   * @param {Object} options - element properties\r\n   * @param {[HTMLElement]} appendToParent - parent element to append to\r\n   */\r\n  public static createDomElement<T extends keyof HTMLElementTagNameMap, K extends keyof HTMLElementTagNameMap[T]>(\r\n    tagName: T,\r\n    elementOptions?: null | { [P in K]: InferDOMType<HTMLElementTagNameMap[T][P]> },\r\n    appendToParent?: Element\r\n  ): HTMLElementTagNameMap[T] {\r\n    const elm = document.createElement<T>(tagName);\r\n\r\n    if (elementOptions) {\r\n      Object.keys(elementOptions).forEach((elmOptionKey) => {\r\n        if (elmOptionKey === 'innerHTML') {\r\n          console.warn(`[SlickGrid] For better CSP (Content Security Policy) support, do not use \"innerHTML\" directly in \"createDomElement('${tagName}', { innerHTML: 'some html'})\"` +\r\n            `, it is better as separate assignment: \"const elm = createDomElement('span'); elm.innerHTML = 'some html';\"`);\r\n        }\r\n\r\n        const elmValue = elementOptions[elmOptionKey as keyof typeof elementOptions];\r\n        if (typeof elmValue === 'object') {\r\n          Object.assign(elm[elmOptionKey as K] as object, elmValue);\r\n        } else {\r\n          elm[elmOptionKey as K] = (elementOptions as any)[elmOptionKey as keyof typeof elementOptions];\r\n        }\r\n      });\r\n    }\r\n    if (appendToParent?.appendChild) {\r\n      appendToParent.appendChild(elm);\r\n    }\r\n    return elm;\r\n  }\r\n\r\n  /**\r\n   * From any input provided, return the HTML string (when a string is provided, it will be returned \"as is\" but when it's a number it will be converted to string)\r\n   * When detecting HTMLElement/DocumentFragment, we can also specify which HTML type to retrieve innerHTML or outerHTML.\r\n   * We can get the HTML by looping through all fragment `childNodes`\r\n   * @param {DocumentFragment | HTMLElement | string | number} input\r\n   * @param {'innerHTML' | 'outerHTML'} [type] - when the input is a DocumentFragment or HTMLElement, which type of HTML do you want to return? 'innerHTML' or 'outerHTML'\r\n   * @returns {String}\r\n   */\r\n  public static getHtmlStringOutput(input: DocumentFragment | HTMLElement | string | number, type: 'innerHTML' | 'outerHTML' = 'innerHTML'): string {\r\n    if (input instanceof DocumentFragment) {\r\n      // a DocumentFragment doesn't have innerHTML/outerHTML, but we can loop through all children and concatenate them all to an HTML string\r\n      return [].map.call(input.childNodes, (x: HTMLElement) => x[type]).join('') || input.textContent || '';\r\n    } else if (input instanceof HTMLElement) {\r\n      return input[type];\r\n    }\r\n    return String(input); // reaching this line means it's already a string (or number) so just return it as string\r\n  }\r\n\r\n  public static emptyElement<T extends Element = Element>(element?: T | null): T | undefined | null {\r\n    while (element?.firstChild) {\r\n      element.removeChild(element.firstChild);\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /**\r\n   * Accepts string containing the class or space-separated list of classes, and\r\n   * returns list of individual classes.\r\n   * Method properly takes into account extra whitespaces in the `className`\r\n   * e.g.: \" class1    class2   \" => will result in `['class1', 'class2']`.\r\n   * @param {String} className - space separated list of class names\r\n   */\r\n  public static classNameToList(className = ''): string[] {\r\n    return className.split(' ').filter(cls => cls);\r\n  }\r\n\r\n  public static innerSize(elm: HTMLElement, type: 'height' | 'width') {\r\n    let size = 0;\r\n\r\n    if (elm) {\r\n      const clientSize = type === 'height' ? 'clientHeight' : 'clientWidth';\r\n      const sides = type === 'height' ? ['top', 'bottom'] : ['left', 'right'];\r\n      size = elm[clientSize];\r\n      for (const side of sides) {\r\n        const sideSize = (parseFloat(Utils.getElementProp(elm, `padding-${side}`) || '') || 0);\r\n        size -= sideSize;\r\n      }\r\n    }\r\n    return size;\r\n  }\r\n\r\n  public static isDefined<T>(value: T | undefined | null): value is T {\r\n    return <T>value !== undefined && <T>value !== null && <T>value !== '';\r\n  }\r\n\r\n  public static getElementProp(elm: HTMLElement & { getComputedStyle?: () => CSSStyleDeclaration }, property: string) {\r\n    if (elm?.getComputedStyle) {\r\n      return window.getComputedStyle(elm, null).getPropertyValue(property);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get the function details (param & body) of a function.\r\n   * It supports regular function and also ES6 arrow functions\r\n   * @param {Function} fn - function to analyze\r\n   * @param {Boolean} [addReturn] - when using ES6 function as single liner, we could add the missing `return ...`\r\n   * @returns\r\n   */\r\n  public static getFunctionDetails(fn: AnyFunction, addReturn = true) {\r\n    let isAsyncFn = false;\r\n\r\n    const getFunctionBody = (func: AnyFunction) => {\r\n      const fnStr = func.toString();\r\n      isAsyncFn = fnStr.includes('async ');\r\n\r\n      // when fn is one liner arrow fn returning an object in brackets e.g. `() => ({ hello: 'world' })`\r\n      if ((fnStr.replaceAll(' ', '').includes('=>({'))) {\r\n        const matches = fnStr.match(/(({.*}))/g) || [];\r\n        return matches.length >= 1 ? `return ${matches[0]!.trimStart()}` : fnStr;\r\n      }\r\n      const isOneLinerArrowFn = (!fnStr.includes('{') && fnStr.includes('=>'));\r\n      const body = fnStr.substring(\r\n        (fnStr.indexOf('{') + 1) || (fnStr.indexOf('=>') + 2),\r\n        fnStr.includes('}') ? fnStr.lastIndexOf('}') : fnStr.length\r\n      );\r\n      if (addReturn && isOneLinerArrowFn && !body.startsWith('return')) {\r\n        return 'return ' + body.trimStart(); // add the `return ...` to the body for ES6 arrow fn\r\n      }\r\n      return body;\r\n    };\r\n\r\n    const getFunctionParams = (func: AnyFunction): string[] => {\r\n      const STRIP_COMMENTS = /(\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/)|(\\s*=[^,)]*(('(?:\\\\'|[^'\\r\\n])*')|(\"(?:\\\\\"|[^\"\\r\\n])*\"))|(\\s*=[^,)]*))/mg;\r\n      const ARG_NAMES = /([^\\s,]+)/g;\r\n      const fnStr = func.toString().replace(STRIP_COMMENTS, '');\r\n      return fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARG_NAMES) ?? [];\r\n    };\r\n\r\n    return {\r\n      params: getFunctionParams(fn),\r\n      body: getFunctionBody(fn),\r\n      isAsync: isAsyncFn,\r\n    };\r\n  }\r\n\r\n  public static insertAfterElement(referenceNode: HTMLElement, newNode: HTMLElement) {\r\n    referenceNode.parentNode?.insertBefore(newNode, referenceNode.nextSibling);\r\n  }\r\n\r\n  public static isEmptyObject(obj: any) {\r\n    if (obj === null || obj === undefined) {\r\n      return true;\r\n    }\r\n    return Object.entries(obj).length === 0;\r\n  }\r\n\r\n  public static noop() { }\r\n\r\n  public static offset(el: HTMLElement | null) {\r\n    if (!el || !el.getBoundingClientRect) {\r\n      return undefined;\r\n    }\r\n    const box = el.getBoundingClientRect();\r\n    const docElem = document.documentElement;\r\n\r\n    return {\r\n      top: box.top + window.pageYOffset - docElem.clientTop,\r\n      left: box.left + window.pageXOffset - docElem.clientLeft\r\n    };\r\n  }\r\n\r\n  public static windowScrollPosition() {\r\n    return {\r\n      left: window.pageXOffset || document.documentElement.scrollLeft || 0,\r\n      top: window.pageYOffset || document.documentElement.scrollTop || 0,\r\n    };\r\n  }\r\n\r\n  public static width(el: HTMLElement, value?: number | string): number | void {\r\n    if (!el || !el.getBoundingClientRect) { return; }\r\n    if (value === undefined) {\r\n      return el.getBoundingClientRect().width;\r\n    }\r\n    Utils.setStyleSize(el, 'width', value);\r\n  }\r\n\r\n  public static height(el: HTMLElement, value?: number | string): number | void {\r\n    if (!el) { return; }\r\n    if (value === undefined) {\r\n      return el.getBoundingClientRect().height;\r\n    }\r\n    Utils.setStyleSize(el, 'height', value);\r\n  }\r\n\r\n  public static setStyleSize(el: HTMLElement, style: string, val?: number | string | Function) {\r\n    if (typeof val === 'function') {\r\n      val = val();\r\n    } else if (typeof val === 'string') {\r\n      el.style[style as CSSStyleDeclarationWritable] = val;\r\n    } else {\r\n      el.style[style as CSSStyleDeclarationWritable] = val + 'px';\r\n    }\r\n  }\r\n\r\n  public static contains(parent: HTMLElement, child: HTMLElement) {\r\n    if (!parent || !child) {\r\n      return false;\r\n    }\r\n\r\n    const parentList = Utils.parents(child);\r\n    return !parentList.every((p) => {\r\n      if (parent === p) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n  }\r\n\r\n  public static isHidden(el: HTMLElement) {\r\n    return el.offsetWidth === 0 && el.offsetHeight === 0;\r\n  }\r\n\r\n  public static parents(el: HTMLElement | ParentNode, selector?: string) {\r\n    const parents: Array<HTMLElement | ParentNode> = [];\r\n    const visible = selector === ':visible';\r\n    const hidden = selector === ':hidden';\r\n\r\n    while ((el = el.parentNode as ParentNode) && el !== document) {\r\n      if (!el || !el.parentNode) {\r\n        break;\r\n      }\r\n      if (hidden) {\r\n        if (Utils.isHidden(el as HTMLElement)) {\r\n          parents.push(el);\r\n        }\r\n      } else if (visible) {\r\n        if (!Utils.isHidden(el as HTMLElement)) {\r\n          parents.push(el);\r\n        }\r\n      } else if (!selector || (el as any).matches(selector)) {\r\n        parents.push(el);\r\n      }\r\n    }\r\n    return parents;\r\n  }\r\n\r\n  public static toFloat(value: string | number) {\r\n    const x = parseFloat(value as string);\r\n    if (isNaN(x)) {\r\n      return 0;\r\n    }\r\n    return x;\r\n  }\r\n\r\n  public static show(el: HTMLElement | HTMLElement[], type = '') {\r\n    if (Array.isArray(el)) {\r\n      el.forEach((e) => e.style.display = type);\r\n    } else {\r\n      el.style.display = type;\r\n    }\r\n  }\r\n\r\n  public static hide(el: HTMLElement | HTMLElement[]) {\r\n    if (Array.isArray(el)) {\r\n      el.forEach((e) => e.style.display = 'none');\r\n    } else {\r\n      el.style.display = 'none';\r\n    }\r\n  }\r\n\r\n  public static slideUp(el: HTMLElement | HTMLElement[], callback: Function) {\r\n    return Utils.slideAnimation(el, 'slideUp', callback);\r\n  }\r\n\r\n  public static slideDown(el: HTMLElement | HTMLElement[], callback: Function) {\r\n    return Utils.slideAnimation(el, 'slideDown', callback);\r\n  }\r\n\r\n  public static slideAnimation(el: HTMLElement | HTMLElement[], slideDirection: 'slideDown' | 'slideUp', callback: Function) {\r\n    if ((window as any).jQuery !== undefined) {\r\n      (window as any).jQuery(el)[slideDirection]('fast', callback);\r\n      return;\r\n    }\r\n    (slideDirection === 'slideUp') ? Utils.hide(el) : Utils.show(el);\r\n    callback();\r\n  }\r\n\r\n  public static applyDefaults(targetObj: any, srcObj: any) {\r\n    if (typeof srcObj === 'object') {\r\n      Object.keys(srcObj).forEach(key => {\r\n        if (srcObj.hasOwnProperty(key) && !targetObj.hasOwnProperty(key)) {\r\n          targetObj[key] = srcObj[key];\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * User could optionally add PubSub Service to SlickEvent\r\n   * When it is defined then a SlickEvent `notify()` call will also dispatch it by using the PubSub publish() method\r\n   * @param {BasePubSub} [pubSubService]\r\n   * @param {*} scope\r\n   */\r\n  public static addSlickEventPubSubWhenDefined<T = any>(pubSub?: BasePubSub, scope?: T) {\r\n    if (pubSub) {\r\n      for (const prop in scope) {\r\n        if (scope[prop] instanceof SlickEvent && typeof (scope[prop] as SlickEvent).setPubSubService === 'function') {\r\n          (scope[prop] as SlickEvent).setPubSubService(pubSub);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const SlickGlobalEditorLock = new SlickEditorLock();\r\n\r\n// export Slick namespace on both global & window objects\r\nconst SlickCore = {\r\n  Event: SlickEvent,\r\n  EventData: SlickEventData,\r\n  EventHandler: SlickEventHandler,\r\n  Range: SlickRange,\r\n  NonDataRow: SlickNonDataItem,\r\n  Group: SlickGroup,\r\n  GroupTotals: SlickGroupTotals,\r\n  EditorLock: SlickEditorLock,\r\n  RegexSanitizer: regexSanitizer,\r\n\r\n  /**\r\n   * A global singleton editor lock.\r\n   * @class GlobalEditorLock\r\n   * @static\r\n   * @constructor\r\n   */\r\n  GlobalEditorLock: SlickGlobalEditorLock,\r\n\r\n  keyCode: {\r\n    SPACE: 8,\r\n    BACKSPACE: 8,\r\n    DELETE: 46,\r\n    DOWN: 40,\r\n    END: 35,\r\n    ENTER: 13,\r\n    ESCAPE: 27,\r\n    HOME: 36,\r\n    INSERT: 45,\r\n    LEFT: 37,\r\n    PAGE_DOWN: 34,\r\n    PAGE_UP: 33,\r\n    RIGHT: 39,\r\n    TAB: 9,\r\n    UP: 38,\r\n    A: 65\r\n  },\r\n  preClickClassName: 'slick-edit-preclick',\r\n\r\n  GridAutosizeColsMode: {\r\n    None: 'NOA',\r\n    LegacyOff: 'LOF',\r\n    LegacyForceFit: 'LFF',\r\n    IgnoreViewport: 'IGV',\r\n    FitColsToViewport: 'FCV',\r\n    FitViewportToCols: 'FVC'\r\n  },\r\n\r\n  'ColAutosizeMode': {\r\n    Locked: 'LCK',\r\n    Guide: 'GUI',\r\n    Content: 'CON',\r\n    ContentExpandOnly: 'CXO',\r\n    ContentIntelligent: 'CTI'\r\n  },\r\n\r\n  'RowSelectionMode': {\r\n    FirstRow: 'FS1',\r\n    FirstNRows: 'FSN',\r\n    AllRows: 'ALL',\r\n    LastRow: 'LS1'\r\n  },\r\n\r\n  'ValueFilterMode': {\r\n    None: 'NONE',\r\n    DeDuplicate: 'DEDP',\r\n    GetGreatestAndSub: 'GR8T',\r\n    GetLongestTextAndSub: 'LNSB',\r\n    GetLongestText: 'LNSC'\r\n  },\r\n\r\n  WidthEvalMode: {\r\n    Auto: 'AUTO',\r\n    TextOnly: 'CANV',\r\n    HTML: 'HTML'\r\n  }\r\n};\r\n\r\nexport const {\r\n  EditorLock, Event, EventData, EventHandler, Group, GroupTotals, NonDataRow, Range,\r\n  RegexSanitizer, GlobalEditorLock, keyCode, preClickClassName, GridAutosizeColsMode, ColAutosizeMode,\r\n  RowSelectionMode, ValueFilterMode, WidthEvalMode\r\n} = SlickCore;\r\n\r\n// also add to global object when exist\r\nif (IIFE_ONLY && typeof global !== 'undefined' && window.Slick) {\r\n  global.Slick = window.Slick;\r\n}\r\n", "import { BindingEventService as BindingEventService_, Event as SlickEvent_, type SlickEventData, Utils as Utils_ } from '../slick.core.js';\r\nimport type { Column, ColumnPickerOption, DOMMouseOrTouchEvent, GridOption, OnColumnsChangedArgs } from '../models/index.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/***\r\n * A control to add a Column Picker (right+click on any column header to reveal the column picker)\r\n * NOTE: this a simplified and updated version of slick.columnpicker.js\r\n *\r\n * USAGE:\r\n *\r\n * Add the slick.columnpicker.(js|css) files and register it with the grid.\r\n *\r\n * Available options, by defining a columnPicker object:\r\n *\r\n *  let options = {\r\n *    enableCellNavigation: true,\r\n *    columnPicker: {\r\n *      columnTitle: \"Columns\",                 // default to empty string\r\n *\r\n *      // the last 2 checkboxes titles\r\n *      hideForceFitButton: false,              // show/hide checkbox near the end \"Force Fit Columns\" (default:false)\r\n *      hideSyncResizeButton: false,            // show/hide checkbox near the end \"Synchronous Resize\" (default:false)\r\n *      forceFitTitle: \"Force fit columns\",     // default to \"Force fit columns\"\r\n *      headerColumnValueExtractor: \"Extract the column label\" // default to column.name\r\n *      syncResizeTitle: \"Synchronous resize\",  // default to \"Synchronous resize\"\r\n *    }\r\n *  };\r\n */\r\n\r\nexport class SlickColumnMenu {\r\n  // --\r\n  // public API\r\n  onColumnsChanged = new SlickEvent<OnColumnsChangedArgs>('onColumnsChanged');\r\n\r\n  // --\r\n  // protected props\r\n  protected _gridUid: string;\r\n  protected _columnTitleElm!: HTMLElement;\r\n  protected _listElm!: HTMLElement;\r\n  protected _menuElm!: HTMLElement;\r\n  protected _columnCheckboxes: HTMLInputElement[] = [];\r\n  protected _bindingEventService = new BindingEventService();\r\n  protected _options: GridOption;\r\n  protected _defaults: ColumnPickerOption = {\r\n    fadeSpeed: 250,\r\n\r\n    // the last 2 checkboxes titles\r\n    hideForceFitButton: false,\r\n    hideSyncResizeButton: false,\r\n    forceFitTitle: 'Force fit columns',\r\n    syncResizeTitle: 'Synchronous resize',\r\n    headerColumnValueExtractor: (columnDef: Column) => Utils.getHtmlStringOutput(columnDef.name || '', 'innerHTML'),\r\n  };\r\n\r\n  constructor(protected columns: Column[], protected readonly grid: SlickGrid, options: GridOption) {\r\n    this._gridUid = grid.getUID();\r\n    this._options = Utils.extend({}, this._defaults, options);\r\n    this.init(this.grid);\r\n  }\r\n\r\n  init(grid: SlickGrid) {\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n    grid.onHeaderContextMenu.subscribe(this.handleHeaderContextMenu.bind(this));\r\n    grid.onColumnsReordered.subscribe(this.updateColumnOrder.bind(this));\r\n\r\n    this._menuElm = document.createElement('div');\r\n    this._menuElm.className = `slick-columnpicker ${this._gridUid}`;\r\n    this._menuElm.style.display = 'none';\r\n    document.body.appendChild(this._menuElm);\r\n\r\n    const buttonElm = document.createElement('button');\r\n    buttonElm.type = 'button';\r\n    buttonElm.className = 'close';\r\n    buttonElm.dataset.dismiss = 'slick-columnpicker';\r\n    buttonElm.ariaLabel = 'Close';\r\n\r\n    const spanCloseElm = document.createElement('span');\r\n    spanCloseElm.className = 'close';\r\n    spanCloseElm.ariaHidden = 'true';\r\n    spanCloseElm.textContent = '\u00D7';\r\n    buttonElm.appendChild(spanCloseElm);\r\n    this._menuElm.appendChild(buttonElm);\r\n\r\n    // user could pass a title on top of the columns list\r\n    if (this._options.columnPickerTitle || (this._options.columnPicker?.columnTitle)) {\r\n      const columnTitle = this._options.columnPickerTitle || this._options.columnPicker?.columnTitle;\r\n      this._columnTitleElm = document.createElement('div');\r\n      this._columnTitleElm.className = 'slick-gridmenu-custom';\r\n      this._columnTitleElm.textContent = columnTitle || '';\r\n      this._menuElm.appendChild(this._columnTitleElm);\r\n    }\r\n\r\n    this._bindingEventService.bind(this._menuElm, 'click', this.updateColumn.bind(this) as EventListener);\r\n\r\n    this._listElm = document.createElement('span');\r\n    this._listElm.className = 'slick-columnpicker-list';\r\n\r\n    // Hide the menu on outside click.\r\n    this._bindingEventService.bind(document.body, 'mousedown', this.handleBodyMouseDown.bind(this) as EventListener);\r\n\r\n    // destroy the picker if user leaves the page\r\n    this._bindingEventService.bind(document.body, 'beforeunload', this.destroy.bind(this));\r\n  }\r\n\r\n  destroy() {\r\n    this.grid.onHeaderContextMenu.unsubscribe(this.handleHeaderContextMenu.bind(this));\r\n    this.grid.onColumnsReordered.unsubscribe(this.updateColumnOrder.bind(this));\r\n    this._bindingEventService.unbindAll();\r\n    this._listElm?.remove();\r\n    this._menuElm?.remove();\r\n  }\r\n\r\n  handleBodyMouseDown(e: DOMMouseOrTouchEvent<HTMLDivElement>) {\r\n    if ((this._menuElm !== e.target && !(this._menuElm && this._menuElm.contains(e.target))) || e.target.className === 'close') {\r\n      this._menuElm.setAttribute('aria-expanded', 'false');\r\n      this._menuElm.style.display = 'none';\r\n    }\r\n  }\r\n\r\n  handleHeaderContextMenu(e: SlickEventData) {\r\n    e.preventDefault();\r\n    Utils.emptyElement(this._listElm);\r\n    this.updateColumnOrder();\r\n    this._columnCheckboxes = [];\r\n\r\n    let columnId, columnLabel, excludeCssClass;\r\n    for (let i = 0; i < this.columns.length; i++) {\r\n      columnId = this.columns[i].id;\r\n      const colName: string = this.columns[i].name instanceof HTMLElement\r\n        ? (this.columns[i].name as HTMLElement).innerHTML\r\n        : (this.columns[i].name || '') as string;\r\n      excludeCssClass = this.columns[i].excludeFromColumnPicker ? 'hidden' : '';\r\n\r\n      const liElm = document.createElement('li');\r\n      liElm.className = excludeCssClass;\r\n      liElm.ariaLabel = colName;\r\n\r\n      const checkboxElm = document.createElement('input');\r\n      checkboxElm.type = 'checkbox';\r\n      checkboxElm.id = `${this._gridUid}colpicker-${columnId}`;\r\n      checkboxElm.dataset.columnid = String(this.columns[i].id);\r\n      liElm.appendChild(checkboxElm);\r\n\r\n      this._columnCheckboxes.push(checkboxElm);\r\n\r\n      if (Utils.isDefined(this.grid.getColumnIndex(columnId)) && !this.columns[i].hidden) {\r\n        checkboxElm.checked = true;\r\n      }\r\n\r\n      columnLabel = (this._options?.columnPicker?.headerColumnValueExtractor)\r\n        ? this._options.columnPicker.headerColumnValueExtractor(this.columns[i], this._options)\r\n        : this._defaults.headerColumnValueExtractor!(this.columns[i], this._options);\r\n\r\n      const labelElm = document.createElement('label');\r\n      labelElm.htmlFor = `${this._gridUid}colpicker-${columnId}`;\r\n      this.grid.applyHtmlCode(labelElm, columnLabel);\r\n      liElm.appendChild(labelElm);\r\n      this._listElm.appendChild(liElm);\r\n    }\r\n\r\n    if (this._options.columnPicker && (!this._options.columnPicker.hideForceFitButton || !this._options.columnPicker.hideSyncResizeButton)) {\r\n      this._listElm.appendChild(document.createElement('hr'));\r\n    }\r\n\r\n    if (!this._options.columnPicker?.hideForceFitButton) {\r\n      const forceFitTitle = this._options.columnPicker?.forceFitTitle || this._options.forceFitTitle;\r\n\r\n      const liElm = document.createElement('li');\r\n      liElm.ariaLabel = forceFitTitle || '';\r\n      this._listElm.appendChild(liElm);\r\n\r\n      const forceFitCheckboxElm = document.createElement('input');\r\n      forceFitCheckboxElm.type = 'checkbox';\r\n      forceFitCheckboxElm.id = `${this._gridUid}colpicker-forcefit`;\r\n      forceFitCheckboxElm.dataset.option = 'autoresize';\r\n      liElm.appendChild(forceFitCheckboxElm);\r\n\r\n      const labelElm = document.createElement('label');\r\n      labelElm.htmlFor = `${this._gridUid}colpicker-forcefit`;\r\n      labelElm.textContent = forceFitTitle || '';\r\n      liElm.appendChild(labelElm);\r\n\r\n      if (this.grid.getOptions().forceFitColumns) {\r\n        forceFitCheckboxElm.checked = true;\r\n      }\r\n    }\r\n\r\n    if (!this._options.columnPicker?.hideSyncResizeButton) {\r\n      const syncResizeTitle = this._options.columnPicker?.syncResizeTitle || this._options.syncResizeTitle;\r\n\r\n      const liElm = document.createElement('li');\r\n      liElm.ariaLabel = syncResizeTitle || '';\r\n      this._listElm.appendChild(liElm);\r\n\r\n      const syncResizeCheckboxElm = document.createElement('input');\r\n      syncResizeCheckboxElm.type = 'checkbox';\r\n      syncResizeCheckboxElm.id = `${this._gridUid}colpicker-syncresize`;\r\n      syncResizeCheckboxElm.dataset.option = 'syncresize';\r\n      liElm.appendChild(syncResizeCheckboxElm);\r\n\r\n      const labelElm = document.createElement('label');\r\n      labelElm.htmlFor = `${this._gridUid}colpicker-syncresize`;\r\n      labelElm.textContent = syncResizeTitle || '';\r\n      liElm.appendChild(labelElm);\r\n\r\n      if (this.grid.getOptions().syncColumnCellResize) {\r\n        syncResizeCheckboxElm.checked = true;\r\n      }\r\n    }\r\n\r\n    this.repositionMenu(e);\r\n  }\r\n\r\n  repositionMenu(event: DOMMouseOrTouchEvent<HTMLDivElement> | SlickEventData) {\r\n    const targetEvent = (event as TouchEvent)?.touches?.[0] || event;\r\n    this._menuElm.style.top = `${targetEvent.pageY - 10}px`;\r\n    this._menuElm.style.left = `${targetEvent.pageX - 10}px`;\r\n    this._menuElm.style.maxHeight = `${window.innerHeight - targetEvent.clientY}px`;\r\n    this._menuElm.style.display = 'block';\r\n    this._menuElm.setAttribute('aria-expanded', 'true');\r\n    this._menuElm.appendChild(this._listElm);\r\n  }\r\n\r\n  updateColumnOrder() {\r\n    // Because columns can be reordered, we have to update the `columns`\r\n    // to reflect the new order, however we can't just take `grid.getColumns()`,\r\n    // as it does not include columns currently hidden by the picker.\r\n    // We create a new `columns` structure by leaving currently-hidden\r\n    // columns in their original ordinal position and interleaving the results\r\n    // of the current column sort.\r\n    const current = this.grid.getColumns().slice(0);\r\n    const ordered = new Array(this.columns.length);\r\n    for (let i = 0; i < ordered.length; i++) {\r\n      if (this.grid.getColumnIndex(this.columns[i].id) === undefined) {\r\n        // If the column doesn't return a value from getColumnIndex,\r\n        // it is hidden. Leave it in this position.\r\n        ordered[i] = this.columns[i];\r\n      } else {\r\n        // Otherwise, grab the next visible column.\r\n        ordered[i] = current.shift();\r\n      }\r\n    }\r\n    this.columns = ordered;\r\n  }\r\n\r\n  /** Update the Titles of each sections (command, customTitle, ...) */\r\n  updateAllTitles(pickerOptions: { columnTitle: string; }) {\r\n    this.grid.applyHtmlCode(this._columnTitleElm, pickerOptions.columnTitle);\r\n  }\r\n\r\n  updateColumn(e: DOMMouseOrTouchEvent<HTMLInputElement>) {\r\n    if (e.target.dataset.option === 'autoresize') {\r\n      // when calling setOptions, it will resize with ALL Columns (even the hidden ones)\r\n      // we can avoid this problem by keeping a reference to the visibleColumns before setOptions and then setColumns after\r\n      const previousVisibleColumns = this.getVisibleColumns();\r\n      const isChecked = e.target.checked;\r\n      this.grid.setOptions({ forceFitColumns: isChecked });\r\n      this.grid.setColumns(previousVisibleColumns);\r\n      return;\r\n    }\r\n\r\n    if (e.target.dataset.option === 'syncresize') {\r\n      if (e.target.checked) {\r\n        this.grid.setOptions({ syncColumnCellResize: true });\r\n      } else {\r\n        this.grid.setOptions({ syncColumnCellResize: false });\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (e.target.type === 'checkbox') {\r\n      const isChecked = e.target.checked;\r\n      const columnId = e.target.dataset.columnid || '';\r\n      const visibleColumns: Column[] = [];\r\n      this._columnCheckboxes.forEach((columnCheckbox, idx) => {\r\n        if (this.columns[idx].hidden !== undefined) { this.columns[idx].hidden = !columnCheckbox.checked; }\r\n        if (columnCheckbox.checked) {\r\n          visibleColumns.push(this.columns[idx]);\r\n        }\r\n      });\r\n\r\n      if (!visibleColumns.length) {\r\n        e.target.checked = true;\r\n        return;\r\n      }\r\n\r\n      this.grid.setColumns(visibleColumns);\r\n      this.onColumnsChanged.notify({ columnId, showing: isChecked, allColumns: this.columns, columns: this.columns, visibleColumns, grid: this.grid });\r\n    }\r\n  }\r\n\r\n  /** @deprecated because of a typo @use `setColumnVisibility()` instead */\r\n  setColumnVisibiliy(idxOrId: number | string, show: boolean) {\r\n    this.setColumnVisibility(idxOrId, show);\r\n  }\r\n\r\n  setColumnVisibility(idxOrId: number | string, show: boolean) {\r\n    const idx = typeof idxOrId === 'number' ? idxOrId : this.getColumnIndexbyId(idxOrId);\r\n    let visibleColumns: Column[] = this.getVisibleColumns();\r\n    const col = this.columns[idx];\r\n    if (show) {\r\n      col.hidden = false;\r\n      visibleColumns.splice(idx, 0, col);\r\n    } else {\r\n      const newVisibleColumns: Column[] = [];\r\n      for (let i = 0; i < visibleColumns.length; i++) {\r\n        if (visibleColumns[i].id !== col.id) { newVisibleColumns.push(visibleColumns[i]); }\r\n      }\r\n      visibleColumns = newVisibleColumns;\r\n    }\r\n\r\n    this.grid.setColumns(visibleColumns);\r\n    this.onColumnsChanged.notify({ columnId: col.id, showing: show, allColumns: this.columns, columns: this.columns, visibleColumns, grid: this.grid });\r\n  }\r\n\r\n  getAllColumns() {\r\n    return this.columns;\r\n  }\r\n\r\n  getColumnbyId(id: number | string) {\r\n    for (let i = 0; i < this.columns.length; i++) {\r\n      if (this.columns[i].id === id) { return this.columns[i]; }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getColumnIndexbyId(id: number | string) {\r\n    for (let i = 0; i < this.columns.length; i++) {\r\n      if (this.columns[i].id === id) { return i; }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /** visible columns, we can simply get them directly from the grid */\r\n  getVisibleColumns() {\r\n    return this.grid.getColumns();\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  window.Slick.Controls = window.Slick.Controls || {};\r\n  window.Slick.Controls.ColumnPicker = SlickColumnMenu;\r\n}\r\n", "import { BindingEventService as BindingEventService_, Event as SlickEvent_, type SlickEventData, Utils as Utils_ } from '../slick.core.js';\r\nimport type { Column, ColumnPickerOption, DOMMouseOrTouchEvent, GridOption, OnColumnsChangedArgs } from '../models/index.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/***\r\n * A control to add a Column Picker (right+click on any column header to reveal the column picker)\r\n * NOTE: this is the old 'complex' column pciker that hides columns by removing them from the grid\r\n *        for a more modern version that uses the column.hidden property and is a lot simpler, use slick.columnmenu.js\r\n *\r\n * USAGE:\r\n *\r\n * Add the slick.columnpicker.(js|css) files and register it with the grid.\r\n *\r\n * Available options, by defining a columnPicker object:\r\n *\r\n *  let options = {\r\n *    enableCellNavigation: true,\r\n *    columnPicker: {\r\n *      columnTitle: \"Columns\",                 // default to empty string\r\n *\r\n *      // the last 2 checkboxes titles\r\n *      hideForceFitButton: false,              // show/hide checkbox near the end \"Force Fit Columns\" (default:false)\r\n *      hideSyncResizeButton: false,            // show/hide checkbox near the end \"Synchronous Resize\" (default:false)\r\n *      forceFitTitle: \"Force fit columns\",     // default to \"Force fit columns\"\r\n *      headerColumnValueExtractor: \"Extract the column label\" // default to column.name\r\n *      syncResizeTitle: \"Synchronous resize\",  // default to \"Synchronous resize\"\r\n *    }\r\n *  };\r\n */\r\n\r\nexport class SlickColumnPicker {\r\n  // --\r\n  // public API\r\n  onColumnsChanged = new SlickEvent<OnColumnsChangedArgs>('onColumnsChanged');\r\n\r\n  // --\r\n  // protected props\r\n  protected _gridUid: string;\r\n  protected _columnTitleElm!: HTMLElement;\r\n  protected _listElm!: HTMLElement;\r\n  protected _menuElm!: HTMLElement;\r\n  protected _columnCheckboxes: HTMLInputElement[] = [];\r\n  protected _bindingEventService = new BindingEventService();\r\n  protected _gridOptions: GridOption;\r\n  protected _defaults: ColumnPickerOption = {\r\n    fadeSpeed: 250,\r\n\r\n    // the last 2 checkboxes titles\r\n    hideForceFitButton: false,\r\n    hideSyncResizeButton: false,\r\n    forceFitTitle: 'Force fit columns',\r\n    syncResizeTitle: 'Synchronous resize',\r\n    headerColumnValueExtractor: (columnDef: Column) => Utils.getHtmlStringOutput(columnDef.name || '', 'innerHTML'),\r\n  };\r\n\r\n  constructor(protected columns: Column[], protected readonly grid: SlickGrid, gridOptions: GridOption) {\r\n    this._gridUid = grid.getUID();\r\n    this._gridOptions = Utils.extend({}, this._defaults, gridOptions);\r\n    this.init(this.grid);\r\n  }\r\n\r\n  init(grid: SlickGrid) {\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n    grid.onColumnsReordered.subscribe(this.updateColumnOrder.bind(this));\r\n    grid.onHeaderContextMenu.subscribe(this.handleHeaderContextMenu.bind(this));\r\n    grid.onPreHeaderContextMenu.subscribe((e) => {\r\n      if (['slick-column-name', 'slick-header-column'].some(className => e.target?.classList.contains(className))) {\r\n        this.handleHeaderContextMenu(e); // open picker only when preheader has column groups\r\n      }\r\n    });\r\n\r\n    this._menuElm = document.createElement('div');\r\n    this._menuElm.className = `slick-columnpicker ${this._gridUid}`;\r\n    this._menuElm.style.display = 'none';\r\n    document.body.appendChild(this._menuElm);\r\n\r\n    const buttonElm = document.createElement('button');\r\n    buttonElm.type = 'button';\r\n    buttonElm.className = 'close';\r\n    buttonElm.dataset.dismiss = 'slick-columnpicker';\r\n    buttonElm.ariaLabel = 'Close';\r\n\r\n    const spanCloseElm = document.createElement('span');\r\n    spanCloseElm.className = 'close';\r\n    spanCloseElm.ariaHidden = 'true';\r\n    spanCloseElm.textContent = '\u00D7';\r\n    buttonElm.appendChild(spanCloseElm);\r\n    this._menuElm.appendChild(buttonElm);\r\n\r\n    // user could pass a title on top of the columns list\r\n    if (this._gridOptions.columnPickerTitle || (this._gridOptions.columnPicker?.columnTitle)) {\r\n      const columnTitle = this._gridOptions.columnPickerTitle || this._gridOptions.columnPicker?.columnTitle;\r\n      this._columnTitleElm = document.createElement('div');\r\n      this._columnTitleElm.className = 'slick-gridmenu-custom';\r\n      this._columnTitleElm.textContent = columnTitle || '';\r\n      this._menuElm.appendChild(this._columnTitleElm);\r\n    }\r\n\r\n    this._bindingEventService.bind(this._menuElm, 'click', this.updateColumn.bind(this) as EventListener);\r\n\r\n    this._listElm = document.createElement('span');\r\n    this._listElm.className = 'slick-columnpicker-list';\r\n\r\n    // Hide the menu on outside click.\r\n    this._bindingEventService.bind(document.body, 'mousedown', this.handleBodyMouseDown.bind(this) as EventListener);\r\n\r\n    // destroy the picker if user leaves the page\r\n    this._bindingEventService.bind(document.body, 'beforeunload', this.destroy.bind(this));\r\n  }\r\n\r\n  destroy() {\r\n    this.grid.onPreHeaderContextMenu.unsubscribe(this.handleHeaderContextMenu.bind(this));\r\n    this.grid.onHeaderContextMenu.unsubscribe(this.handleHeaderContextMenu.bind(this));\r\n    this.grid.onColumnsReordered.unsubscribe(this.updateColumnOrder.bind(this));\r\n    this._bindingEventService.unbindAll();\r\n    this._listElm?.remove();\r\n    this._menuElm?.remove();\r\n  }\r\n\r\n  protected handleBodyMouseDown(e: DOMMouseOrTouchEvent<HTMLElement>) {\r\n    if ((this._menuElm !== e.target && !this._menuElm?.contains(e.target)) || e.target.className === 'close') {\r\n      this._menuElm.setAttribute('aria-expanded', 'false');\r\n      this._menuElm.style.display = 'none';\r\n    }\r\n  }\r\n\r\n  protected handleHeaderContextMenu(e: SlickEventData) {\r\n    e.preventDefault();\r\n    Utils.emptyElement(this._listElm);\r\n    this.updateColumnOrder();\r\n    this._columnCheckboxes = [];\r\n\r\n    let columnId, columnLabel, excludeCssClass;\r\n    for (let i = 0; i < this.columns.length; i++) {\r\n      columnId = this.columns[i].id;\r\n      const colName: string = this.columns[i].name instanceof HTMLElement\r\n        ? (this.columns[i].name as HTMLElement).innerHTML\r\n        : (this.columns[i].name || '') as string;\r\n      excludeCssClass = this.columns[i].excludeFromColumnPicker ? 'hidden' : '';\r\n\r\n      const liElm = document.createElement('li');\r\n      liElm.className = excludeCssClass;\r\n      liElm.ariaLabel = colName;\r\n\r\n      const checkboxElm = document.createElement('input');\r\n      checkboxElm.type = 'checkbox';\r\n      checkboxElm.id = `${this._gridUid}colpicker-${columnId}`;\r\n      checkboxElm.dataset.columnid = String(this.columns[i].id);\r\n      liElm.appendChild(checkboxElm);\r\n\r\n      this._columnCheckboxes.push(checkboxElm);\r\n\r\n      if (Utils.isDefined(this.grid.getColumnIndex(columnId)) && !this.columns[i].hidden) {\r\n        checkboxElm.checked = true;\r\n      }\r\n\r\n      columnLabel = (this._gridOptions?.columnPicker?.headerColumnValueExtractor)\r\n        ? this._gridOptions.columnPicker.headerColumnValueExtractor(this.columns[i], this._gridOptions)\r\n        : this._defaults.headerColumnValueExtractor!(this.columns[i], this._gridOptions);\r\n\r\n      const labelElm = document.createElement('label');\r\n      labelElm.htmlFor = `${this._gridUid}colpicker-${columnId}`;\r\n      this.grid.applyHtmlCode(labelElm, columnLabel);\r\n      liElm.appendChild(labelElm);\r\n      this._listElm.appendChild(liElm);\r\n    }\r\n\r\n    if (this._gridOptions.columnPicker && (!this._gridOptions.columnPicker.hideForceFitButton || !this._gridOptions.columnPicker.hideSyncResizeButton)) {\r\n      this._listElm.appendChild(document.createElement('hr'));\r\n    }\r\n\r\n    if (!(this._gridOptions.columnPicker?.hideForceFitButton)) {\r\n      const forceFitTitle = this._gridOptions.columnPicker?.forceFitTitle || this._gridOptions.forceFitTitle;\r\n\r\n      const liElm = document.createElement('li');\r\n      liElm.ariaLabel = forceFitTitle || '';\r\n      this._listElm.appendChild(liElm);\r\n\r\n      const forceFitCheckboxElm = document.createElement('input');\r\n      forceFitCheckboxElm.type = 'checkbox';\r\n      forceFitCheckboxElm.id = `${this._gridUid}colpicker-forcefit`;\r\n      forceFitCheckboxElm.dataset.option = 'autoresize';\r\n      liElm.appendChild(forceFitCheckboxElm);\r\n\r\n      const labelElm = document.createElement('label');\r\n      labelElm.htmlFor = `${this._gridUid}colpicker-forcefit`;\r\n      labelElm.textContent = forceFitTitle || '';\r\n      liElm.appendChild(labelElm);\r\n\r\n      if (this.grid.getOptions().forceFitColumns) {\r\n        forceFitCheckboxElm.checked = true;\r\n      }\r\n    }\r\n\r\n    if (!(this._gridOptions.columnPicker?.hideSyncResizeButton)) {\r\n      const syncResizeTitle = (this._gridOptions.columnPicker?.syncResizeTitle) || this._gridOptions.syncResizeTitle;\r\n\r\n      const liElm = document.createElement('li');\r\n      liElm.ariaLabel = syncResizeTitle || '';\r\n      this._listElm.appendChild(liElm);\r\n\r\n      const syncResizeCheckboxElm = document.createElement('input');\r\n      syncResizeCheckboxElm.type = 'checkbox';\r\n      syncResizeCheckboxElm.id = `${this._gridUid}colpicker-syncresize`;\r\n      syncResizeCheckboxElm.dataset.option = 'syncresize';\r\n      liElm.appendChild(syncResizeCheckboxElm);\r\n\r\n      const labelElm = document.createElement('label');\r\n      labelElm.htmlFor = `${this._gridUid}colpicker-syncresize`;\r\n      labelElm.textContent = syncResizeTitle || '';\r\n      liElm.appendChild(labelElm);\r\n\r\n      if (this.grid.getOptions().syncColumnCellResize) {\r\n        syncResizeCheckboxElm.checked = true;\r\n      }\r\n    }\r\n\r\n    this.repositionMenu(e);\r\n  }\r\n\r\n  protected repositionMenu(event: DOMMouseOrTouchEvent<HTMLDivElement> | SlickEventData) {\r\n    const targetEvent: MouseEvent | Touch = (event as TouchEvent)?.touches?.[0] ?? event;\r\n    if (this._menuElm) {\r\n      this._menuElm.style.display = 'block';\r\n\r\n      // auto-positioned menu left/right by available position\r\n      const gridPos = this.grid.getGridPosition();\r\n      const menuWidth = this._menuElm.clientWidth || 0;\r\n      let menuOffsetLeft = targetEvent.pageX || 0;\r\n      if (gridPos?.width && (menuOffsetLeft + menuWidth >= gridPos.width)) {\r\n        menuOffsetLeft = menuOffsetLeft - menuWidth;\r\n      }\r\n\r\n      this._menuElm.style.top = `${targetEvent.pageY - 10}px`;\r\n      this._menuElm.style.left = `${menuOffsetLeft}px`;\r\n      this._menuElm.style.maxHeight = `${window.innerHeight - targetEvent.clientY}px`;\r\n      this._menuElm.setAttribute('aria-expanded', 'true');\r\n      this._menuElm.appendChild(this._listElm);\r\n    }\r\n  }\r\n\r\n  protected updateColumnOrder() {\r\n    // Because columns can be reordered, we have to update the `columns`\r\n    // to reflect the new order, however we can't just take `grid.getColumns()`,\r\n    // as it does not include columns currently hidden by the picker.\r\n    // We create a new `columns` structure by leaving currently-hidden\r\n    // columns in their original ordinal position and interleaving the results\r\n    // of the current column sort.\r\n    const current = this.grid.getColumns().slice(0);\r\n    const ordered = new Array(this.columns.length);\r\n    for (let i = 0; i < ordered.length; i++) {\r\n      if (this.grid.getColumnIndex(this.columns[i].id) === undefined) {\r\n        // If the column doesn't return a value from getColumnIndex,\r\n        // it is hidden. Leave it in this position.\r\n        ordered[i] = this.columns[i];\r\n      } else {\r\n        // Otherwise, grab the next visible column.\r\n        ordered[i] = current.shift();\r\n      }\r\n    }\r\n    this.columns = ordered;\r\n  }\r\n\r\n  /** Update the Titles of each sections (command, customTitle, ...) */\r\n  updateAllTitles(pickerOptions: { columnTitle: string; }) {\r\n    this.grid.applyHtmlCode(this._columnTitleElm, pickerOptions.columnTitle);\r\n  }\r\n\r\n  protected updateColumn(e: DOMMouseOrTouchEvent<HTMLInputElement>) {\r\n    if (e.target.dataset.option === 'autoresize') {\r\n      // when calling setOptions, it will resize with ALL Columns (even the hidden ones)\r\n      // we can avoid this problem by keeping a reference to the visibleColumns before setOptions and then setColumns after\r\n      const previousVisibleColumns = this.getVisibleColumns();\r\n      const isChecked: boolean = e.target.checked || false;\r\n      this.grid.setOptions({ forceFitColumns: isChecked });\r\n      this.grid.setColumns(previousVisibleColumns);\r\n      return;\r\n    }\r\n\r\n    if (e.target.dataset.option === 'syncresize') {\r\n      if (e.target.checked) {\r\n        this.grid.setOptions({ syncColumnCellResize: true });\r\n      } else {\r\n        this.grid.setOptions({ syncColumnCellResize: false });\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (e.target.type === 'checkbox') {\r\n      const isChecked = e.target.checked;\r\n      const columnId = e.target.dataset.columnid || '';\r\n      const visibleColumns: Column[] = [];\r\n      this._columnCheckboxes.forEach((columnCheckbox, idx) => {\r\n        if (this.columns[idx].hidden !== undefined) { this.columns[idx].hidden = !columnCheckbox.checked; }\r\n        if (columnCheckbox.checked) {\r\n          visibleColumns.push(this.columns[idx]);\r\n        }\r\n      });\r\n\r\n      if (!visibleColumns.length) {\r\n        e.target.checked = true;\r\n        return;\r\n      }\r\n\r\n      this.grid.setColumns(visibleColumns);\r\n      this.onColumnsChanged.notify({ columnId, showing: isChecked, allColumns: this.columns, columns: this.columns, visibleColumns, grid: this.grid });\r\n    }\r\n  }\r\n\r\n  /** @deprecated because of a typo @use `setColumnVisibility()` instead */\r\n  setColumnVisibiliy(idxOrId: number | string, show: boolean) {\r\n    this.setColumnVisibility(idxOrId, show);\r\n  }\r\n\r\n  setColumnVisibility(idxOrId: number | string, show: boolean) {\r\n    const idx = typeof idxOrId === 'number' ? idxOrId : this.getColumnIndexbyId(idxOrId);\r\n    let visibleColumns = this.getVisibleColumns();\r\n    const col = this.columns[idx];\r\n    if (show) {\r\n      col.hidden = false;\r\n      visibleColumns.splice(idx, 0, col);\r\n    } else {\r\n      const newVisibleColumns: Column[] = [];\r\n      for (let i = 0; i < visibleColumns.length; i++) {\r\n        if (visibleColumns[i].id !== col.id) { newVisibleColumns.push(visibleColumns[i]); }\r\n      }\r\n      visibleColumns = newVisibleColumns;\r\n    }\r\n\r\n    this.grid.setColumns(visibleColumns);\r\n    this.onColumnsChanged.notify({ columnId: col.id, showing: show, allColumns: this.columns, columns: this.columns, visibleColumns, grid: this.grid });\r\n  }\r\n\r\n  getAllColumns() {\r\n    return this.columns;\r\n  }\r\n\r\n  getColumnbyId(id: number | string) {\r\n    for (let i = 0; i < this.columns.length; i++) {\r\n      if (this.columns[i].id === id) { return this.columns[i]; }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getColumnIndexbyId(id: number | string) {\r\n    for (let i = 0; i < this.columns.length; i++) {\r\n      if (this.columns[i].id === id) { return i; }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /** visible columns, we can simply get them directly from the grid */\r\n  getVisibleColumns() {\r\n    return this.grid.getColumns();\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  window.Slick.Controls = window.Slick.Controls || {};\r\n  window.Slick.Controls.ColumnPicker = SlickColumnPicker;\r\n}\r\n", "import type {\r\n  Column,\r\n  DOMMouseOrTouchEvent,\r\n  GridMenuCommandItemCallbackArgs,\r\n  GridMenuEventWithElementCallbackArgs,\r\n  GridMenuItem,\r\n  GridMenuOption,\r\n  GridOption,\r\n  MenuCommandItem,\r\n  onGridMenuColumnsChangedCallbackArgs\r\n} from '../models/index.js';\r\nimport { BindingEventService as BindingEventService_, SlickEvent as SlickEvent_, Utils as Utils_ } from '../slick.core.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/**\r\n * A control to add a Grid Menu (hambuger menu on top-right of the grid)\r\n *\r\n * USAGE:\r\n *\r\n * Add the slick.gridmenu.(js|css) files and register it with the grid.\r\n *\r\n * To specify a menu in a column header, extend the column definition like so:\r\n * let gridMenuControl = new Slick.Controls.GridMenu(columns, grid, options);\r\n *\r\n * Available grid options, by defining a gridMenu object:\r\n *\r\n *  let options = {\r\n *    enableCellNavigation: true,\r\n *    gridMenu: {\r\n *      commandTitle: \"Command List\",                // default to empty string\r\n *      columnTitle: \"Columns\",                     // default to empty string\r\n *      iconImage: \"some-image.png\",                // this is the Grid Menu icon (hamburger icon)\r\n *      iconCssClass: \"fa fa-bars\",                 // you can provide iconImage OR iconCssClass\r\n *      leaveOpen: false,                           // do we want to leave the Grid Menu open after a command execution? (false by default)\r\n *      menuWidth: 18,                              // width (icon) that will be use to resize the column header container (18 by default)\r\n *      contentMinWidth: 0,\t\t\t\t\t\t\t            // defaults to 0 (auto), minimum width of grid menu content (command, column list)\r\n *      marginBottom: 15,                           // defaults to 15, margin to use at the bottom of the grid when using max-height (default)\r\n *      resizeOnShowHeaderRow: false,               // false by default\r\n *      showButton: true,                           // true by default - it allows the user to control if the\r\n *                                                          // default gridMenu button (located on the top right corner by default CSS)\r\n *                                                          // should be created or omitted\r\n *      useClickToRepositionMenu: true,             // true by default\r\n *\r\n *      // the last 2 checkboxes titles\r\n *      hideForceFitButton: false,                  // show/hide checkbox near the end \"Force Fit Columns\"\r\n *      hideSyncResizeButton: false,                // show/hide checkbox near the end \"Synchronous Resize\"\r\n *      forceFitTitle: \"Force fit columns\",         // default to \"Force fit columns\"\r\n *      syncResizeTitle: \"Synchronous resize\",      // default to \"Synchronous resize\"\r\n *\r\n *      commandItems: [\r\n *        {\r\n *          // command menu item options\r\n *        },\r\n *        {\r\n *          // command menu item options\r\n *        }\r\n *      ]\r\n *    }\r\n *  };\r\n *\r\n *\r\n * Available menu options:\r\n *    hideForceFitButton:         Hide the \"Force fit columns\" button (defaults to false)\r\n *    hideSyncResizeButton:       Hide the \"Synchronous resize\" button (defaults to false)\r\n *    forceFitTitle:              Text of the title \"Force fit columns\"\r\n *    contentMinWidth:\t\t\t\t\t\tminimum width of grid menu content (command, column list), defaults to 0 (auto)\r\n *    height:                     Height of the Grid Menu content, when provided it will be used instead of the max-height (defaults to undefined)\r\n *    menuWidth:                  Grid menu button width (defaults to 18)\r\n *    resizeOnShowHeaderRow:      Do we want to resize on the show header row event\r\n *    syncResizeTitle:            Text of the title \"Synchronous resize\"\r\n *    useClickToRepositionMenu:   Use the Click offset to reposition the Grid Menu (defaults to true), when set to False it will use the icon offset to reposition the grid menu\r\n *    menuUsabilityOverride:      Callback method that user can override the default behavior of enabling/disabling the menu from being usable (must be combined with a custom formatter)\r\n *    marginBottom:               Margin to use at the bottom of the grid menu, only in effect when height is undefined (defaults to 15)\r\n *    subItemChevronClass:        CSS class that can be added on the right side of a sub-item parent (typically a chevron-right icon)\r\n *    subMenuOpenByEvent:         defaults to \"mouseover\", what event type shoud we use to open sub-menu(s), 2 options are available: \"mouseover\" or \"click\"\r\n *\r\n * Available command menu item options:\r\n *    action:                     Optionally define a callback function that gets executed when item is chosen (and/or use the onCommand event)\r\n *    title:                      Menu item text.\r\n *    divider:                    Whether the current item is a divider, not an actual command.\r\n *    disabled:                   Whether the item/command is disabled.\r\n *    hidden:                     Whether the item/command is hidden.\r\n *    tooltip:                    Item tooltip.\r\n *    command:                    A command identifier to be passed to the onCommand event handlers.\r\n *    cssClass:                   A CSS class to be added to the menu item container.\r\n *    iconCssClass:               A CSS class to be added to the menu item icon.\r\n *    iconImage:                  A url to the icon image.\r\n *    textCssClass:               A CSS class to be added to the menu item text.\r\n *    subMenuTitle:               Optional sub-menu title that will shows up when sub-menu commmands/options list is opened\r\n *    subMenuTitleCssClass:       Optional sub-menu title CSS class to use with `subMenuTitle`\r\n *    itemVisibilityOverride:     Callback method that user can override the default behavior of showing/hiding an item from the list\r\n *    itemUsabilityOverride:      Callback method that user can override the default behavior of enabling/disabling an item from the list\r\n *\r\n *\r\n * The plugin exposes the following events:\r\n *\r\n *    onAfterMenuShow:   Fired after the menu is shown.  You can customize the menu or dismiss it by returning false.\r\n *      * ONLY works with a JS event (as per slick.core code), so we cannot notify when it's a button event (when grid menu is attached to an external button, not the hamburger menu)\r\n *        Event args:\r\n *            grid:     Reference to the grid.\r\n *            column:   Column definition.\r\n *            menu:     Menu options.  Note that you can change the menu items here.\r\n *\r\n *    onBeforeMenuShow:   Fired before the menu is shown.  You can customize the menu or dismiss it by returning false.\r\n *      * ONLY works with a JS event (as per slick.core code), so we cannot notify when it's a button event (when grid menu is attached to an external button, not the hamburger menu)\r\n *        Event args:\r\n *            grid:     Reference to the grid.\r\n *            column:   Column definition.\r\n *            menu:     Menu options.  Note that you can change the menu items here.\r\n *\r\n *    onMenuClose:      Fired when the menu is closing.\r\n *        Event args:\r\n *            grid:     Reference to the grid.\r\n *            column:   Column definition.\r\n *            menu:     Menu options.  Note that you can change the menu items here.\r\n *\r\n *    onCommand:    Fired on menu item click for buttons with 'command' specified.\r\n *        Event args:\r\n *            grid:     Reference to the grid.\r\n *            column:   Column definition.\r\n *            command:  Button command identified.\r\n *            button:   Button options.  Note that you can change the button options in your\r\n *                      event handler, and the column header will be automatically updated to\r\n *                      reflect them.  This is useful if you want to implement something like a\r\n *                      toggle button.\r\n */\r\n\r\nexport class SlickGridMenu {\r\n  // --\r\n  // public API\r\n  onAfterMenuShow = new SlickEvent<GridMenuEventWithElementCallbackArgs>('onAfterMenuShow');\r\n  onBeforeMenuShow = new SlickEvent<GridMenuEventWithElementCallbackArgs>('onBeforeMenuShow');\r\n  onMenuClose = new SlickEvent<GridMenuEventWithElementCallbackArgs>('onMenuClose');\r\n  onCommand = new SlickEvent<GridMenuCommandItemCallbackArgs>('onCommand');\r\n  onColumnsChanged = new SlickEvent<onGridMenuColumnsChangedCallbackArgs>('onColumnsChanged');\r\n\r\n  // --\r\n  // protected props\r\n  protected _bindingEventService: BindingEventService_;\r\n  protected _gridOptions: GridOption;\r\n  protected _gridUid: string;\r\n  protected _isMenuOpen = false;\r\n  protected _columnCheckboxes: HTMLInputElement[] = [];\r\n  protected _columnTitleElm!: HTMLElement;\r\n  protected _commandTitleElm!: HTMLElement;\r\n  protected _commandListElm!: HTMLDivElement;\r\n  protected _headerElm: HTMLDivElement | null = null;\r\n  protected _listElm!: HTMLElement;\r\n  protected _buttonElm!: HTMLElement;\r\n  protected _menuElm!: HTMLElement;\r\n  protected _subMenuParentId = '';\r\n  protected _gridMenuOptions: GridMenuOption | null = null;\r\n  protected _defaults: GridMenuOption = {\r\n    showButton: true,\r\n    hideForceFitButton: false,\r\n    hideSyncResizeButton: false,\r\n    forceFitTitle: 'Force fit columns',\r\n    marginBottom: 15,\r\n    menuWidth: 18,\r\n    contentMinWidth: 0,\r\n    resizeOnShowHeaderRow: false,\r\n    subMenuOpenByEvent: 'mouseover',\r\n    syncResizeTitle: 'Synchronous resize',\r\n    useClickToRepositionMenu: true,\r\n    headerColumnValueExtractor: (columnDef: Column) => Utils.getHtmlStringOutput(columnDef.name || '', 'innerHTML'),\r\n  };\r\n\r\n  constructor(protected columns: Column[], protected readonly grid: SlickGrid, gridOptions: GridOption) {\r\n    this._gridUid = grid.getUID();\r\n    this._gridOptions = gridOptions;\r\n    this._gridMenuOptions = Utils.extend({}, this._defaults, gridOptions.gridMenu);\r\n    this._bindingEventService = new BindingEventService();\r\n\r\n    // when a grid optionally changes from a regular grid to a frozen grid, we need to destroy & recreate the grid menu\r\n    // we do this change because the Grid Menu is on the left container for a regular grid, it is however on the right container for a frozen grid\r\n    grid.onSetOptions.subscribe((_e, args) => {\r\n      if (args && args.optionsBefore && args.optionsAfter) {\r\n        const switchedFromRegularToFrozen = args.optionsBefore.frozenColumn! >= 0 && args.optionsAfter.frozenColumn === -1;\r\n        const switchedFromFrozenToRegular = args.optionsBefore.frozenColumn === -1 && args.optionsAfter.frozenColumn! >= 0;\r\n        if (switchedFromRegularToFrozen || switchedFromFrozenToRegular) {\r\n          this.recreateGridMenu();\r\n        }\r\n      }\r\n    });\r\n    this.init(this.grid);\r\n  }\r\n\r\n  init(grid: SlickGrid) {\r\n    this._gridOptions = grid.getOptions();\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n    this.createGridMenu();\r\n\r\n    if (this._gridMenuOptions?.customItems || this._gridMenuOptions?.customTitle) {\r\n      console.warn('[SlickGrid] Grid Menu \"customItems\" and \"customTitle\" were deprecated to align with other Menu plugins, please use \"commandItems\" and \"commandTitle\" instead.');\r\n    }\r\n\r\n    // subscribe to the grid, when it's destroyed, we should also destroy the Grid Menu\r\n    grid.onBeforeDestroy.subscribe(this.destroy.bind(this));\r\n  }\r\n\r\n  setOptions(newOptions: GridMenuOption) {\r\n    this._gridMenuOptions = Utils.extend({}, this._gridMenuOptions, newOptions);\r\n  }\r\n\r\n  protected createGridMenu() {\r\n    const gridMenuWidth = (this._gridMenuOptions?.menuWidth) || this._defaults.menuWidth;\r\n    if (this._gridOptions && this._gridOptions.hasOwnProperty('frozenColumn') && this._gridOptions.frozenColumn! >= 0) {\r\n      this._headerElm = document.querySelector(`.${this._gridUid} .slick-header-right`);\r\n    } else {\r\n      this._headerElm = document.querySelector(`.${this._gridUid} .slick-header-left`);\r\n    }\r\n    this._headerElm!.style.width = `calc(100% - ${gridMenuWidth}px)`;\r\n\r\n    // if header row is enabled, we need to resize its width also\r\n    const enableResizeHeaderRow = (Utils.isDefined(this._gridMenuOptions?.resizeOnShowHeaderRow)) ? this._gridMenuOptions!.resizeOnShowHeaderRow : this._defaults.resizeOnShowHeaderRow;\r\n    if (enableResizeHeaderRow && this._gridOptions.showHeaderRow) {\r\n      const headerRow = document.querySelector<HTMLDivElement>(`.${this._gridUid}.slick-headerrow`);\r\n      if (headerRow) {\r\n        headerRow.style.width = `calc(100% - ${gridMenuWidth}px)`;\r\n      }\r\n    }\r\n\r\n    const showButton = (this._gridMenuOptions?.showButton !== undefined) ? this._gridMenuOptions.showButton : this._defaults.showButton;\r\n    if (showButton) {\r\n      this._buttonElm = document.createElement('button');\r\n      this._buttonElm.className = 'slick-gridmenu-button';\r\n      this._buttonElm.ariaLabel = 'Grid Menu';\r\n\r\n      if (this._gridMenuOptions?.iconCssClass) {\r\n        this._buttonElm.classList.add(...Utils.classNameToList(this._gridMenuOptions.iconCssClass));\r\n      } else {\r\n        const iconImageElm = document.createElement('img');\r\n        iconImageElm.src = (this._gridMenuOptions?.iconImage) ? this._gridMenuOptions.iconImage : '../images/drag-handle.png';\r\n        this._buttonElm.appendChild(iconImageElm);\r\n      }\r\n\r\n      // add the grid menu button in the preheader (when exists) or always in the column header (default)\r\n      const buttonContainerTarget = this._gridMenuOptions?.iconButtonContainer === 'preheader' ? 'firstChild' : 'lastChild';\r\n      this._headerElm!.parentElement!.insertBefore(this._buttonElm, this._headerElm!.parentElement![buttonContainerTarget]);\r\n\r\n      // add on click handler for the Grid Menu itself\r\n      this._bindingEventService.bind(this._buttonElm, 'click', this.showGridMenu.bind(this) as EventListener);\r\n    }\r\n\r\n    this._menuElm = this.createMenu(0);\r\n    this.populateColumnPicker();\r\n    document.body.appendChild(this._menuElm);\r\n\r\n    // Hide the menu on outside click.\r\n    this._bindingEventService.bind(document.body, 'mousedown', this.handleBodyMouseDown.bind(this) as EventListener);\r\n\r\n    // destroy the picker if user leaves the page\r\n    this._bindingEventService.bind(document.body, 'beforeunload', this.destroy.bind(this));\r\n  }\r\n\r\n  /** Create the menu or sub-menu(s) but without the column picker which is a separate single process */\r\n  createMenu(level = 0, item?: GridMenuItem | MenuCommandItem | 'divider') {\r\n    // create a new cell menu\r\n    const maxHeight = isNaN(this._gridMenuOptions?.maxHeight as number) ? this._gridMenuOptions?.maxHeight : `${this._gridMenuOptions?.maxHeight ?? 0}px`;\r\n    const width = isNaN(this._gridMenuOptions?.width as number) ? this._gridMenuOptions?.width : `${this._gridMenuOptions?.maxWidth ?? 0}px`;\r\n\r\n    // to avoid having multiple sub-menu trees opened,\r\n    // we need to somehow keep trace of which parent menu the tree belongs to\r\n    // and we should keep ref of only the first sub-menu parent, we can use the command name (remove any whitespaces though)\r\n    const subMenuCommand = (item as GridMenuItem)?.command;\r\n    let subMenuId = (level === 1 && subMenuCommand) ? subMenuCommand.replaceAll(' ', '') : '';\r\n    if (subMenuId) {\r\n      this._subMenuParentId = subMenuId;\r\n    }\r\n    if (level > 1) {\r\n      subMenuId = this._subMenuParentId;\r\n    }\r\n\r\n    const menuClasses = `slick-gridmenu slick-menu-level-${level} ${this._gridUid}`;\r\n    const bodyMenuElm = document.body.querySelector<HTMLDivElement>(`.slick-gridmenu.slick-menu-level-${level}${this.getGridUidSelector()}`);\r\n\r\n    // return menu/sub-menu if it's already opened unless we are on different sub-menu tree if so close them all\r\n    if (bodyMenuElm) {\r\n      if (bodyMenuElm.dataset.subMenuParent === subMenuId) {\r\n        return bodyMenuElm;\r\n      }\r\n      this.destroySubMenus();\r\n    }\r\n\r\n    const menuElm = document.createElement('div');\r\n    menuElm.role = 'menu';\r\n    menuElm.className = menuClasses;\r\n    if (level > 0) {\r\n      menuElm.classList.add('slick-submenu');\r\n      if (subMenuId) {\r\n        menuElm.dataset.subMenuParent = subMenuId;\r\n      }\r\n    }\r\n    menuElm.ariaLabel = level > 1 ? 'SubMenu' : 'Grid Menu';\r\n\r\n    if (width) {\r\n      menuElm.style.width = width as string;\r\n    }\r\n    if (maxHeight) {\r\n      menuElm.style.maxHeight = maxHeight as string;\r\n    }\r\n\r\n    menuElm.style.display = 'none';\r\n\r\n    let closeButtonElm: HTMLButtonElement | null = null;\r\n    if (level === 0) {\r\n      closeButtonElm = document.createElement('button');\r\n      closeButtonElm.type = 'button';\r\n      closeButtonElm.className = 'close';\r\n      closeButtonElm.dataset.dismiss = 'slick-gridmenu';\r\n      closeButtonElm.ariaLabel = 'Close';\r\n\r\n      const spanCloseElm = document.createElement('span');\r\n      spanCloseElm.className = 'close';\r\n      spanCloseElm.ariaHidden = 'true';\r\n      spanCloseElm.textContent = '\u00D7';\r\n      closeButtonElm.appendChild(spanCloseElm);\r\n      menuElm.appendChild(closeButtonElm);\r\n    }\r\n\r\n    // -- Command List section\r\n    this._commandListElm = document.createElement('div');\r\n    this._commandListElm.className = `slick-gridmenu-custom slick-gridmenu-command-list slick-menu-level-${level}`;\r\n    this._commandListElm.role = 'menu';\r\n    menuElm.appendChild(this._commandListElm);\r\n\r\n    const commandItems =\r\n      (item as GridMenuItem)?.commandItems\r\n      ?? (item as GridMenuItem)?.customItems\r\n      ?? this._gridMenuOptions?.commandItems\r\n      ?? this._gridMenuOptions?.customItems\r\n      ?? [];\r\n\r\n    if (commandItems.length > 0) {\r\n\r\n      // when creating sub-menu add its sub-menu title when exists\r\n      if (item && level > 0) {\r\n        this.addSubMenuTitleWhenExists(item, this._commandListElm); // add sub-menu title when exists\r\n      }\r\n    }\r\n    this.populateCommandsMenu(commandItems, this._commandListElm, { grid: this.grid, level });\r\n\r\n    // increment level for possible next sub-menus if exists\r\n    level++;\r\n\r\n    return menuElm;\r\n  }\r\n\r\n  /** Destroy the plugin by unsubscribing every events & also delete the menu DOM elements */\r\n  destroy() {\r\n    this.onAfterMenuShow.unsubscribe();\r\n    this.onBeforeMenuShow.unsubscribe();\r\n    this.onMenuClose.unsubscribe();\r\n    this.onCommand.unsubscribe();\r\n    this.onColumnsChanged.unsubscribe();\r\n    this.grid.onColumnsReordered.unsubscribe(this.updateColumnOrder.bind(this));\r\n    this.grid.onBeforeDestroy.unsubscribe();\r\n    this.grid.onSetOptions.unsubscribe();\r\n    this._bindingEventService.unbindAll();\r\n    this._menuElm?.remove();\r\n    this.deleteMenu();\r\n  }\r\n\r\n  /** Delete the menu DOM element but without unsubscribing any events */\r\n  deleteMenu() {\r\n    this._bindingEventService.unbindAll();\r\n    const gridMenuElm = document.querySelector<HTMLDivElement>(`div.slick-gridmenu.${this._gridUid}`);\r\n    if (gridMenuElm) {\r\n      gridMenuElm.style.display = 'none';\r\n    }\r\n    if (this._headerElm) {\r\n      // put back original width (fixes width and frozen+gridMenu on left header)\r\n      this._headerElm.style.width = '100%';\r\n    }\r\n    this._buttonElm?.remove();\r\n    this._menuElm?.remove();\r\n  }\r\n\r\n  /** Close and destroy all previously opened sub-menus */\r\n  destroySubMenus() {\r\n    this._bindingEventService.unbindAll('sub-menu');\r\n    document.querySelectorAll(`.slick-gridmenu.slick-submenu${this.getGridUidSelector()}`)\r\n      .forEach(subElm => subElm.remove());\r\n  }\r\n\r\n  /** Construct the custom command menu items. */\r\n  protected populateCommandsMenu(commandItems: Array<GridMenuItem | MenuCommandItem | 'divider'>, commandListElm: HTMLElement, args: { grid: SlickGrid, level: number }) {\r\n    // user could pass a title on top of the custom section\r\n    const level = args?.level || 0;\r\n    const isSubMenu = level > 0;\r\n    if (!isSubMenu && (this._gridMenuOptions?.commandTitle || this._gridMenuOptions?.customTitle)) {\r\n      this._commandTitleElm = document.createElement('div');\r\n      this._commandTitleElm.className = 'title';\r\n      this.grid.applyHtmlCode(this._commandTitleElm, this.grid.sanitizeHtmlString((this._gridMenuOptions.commandTitle || this._gridMenuOptions.customTitle) as string));\r\n      commandListElm.appendChild(this._commandTitleElm);\r\n    }\r\n\r\n    for (let i = 0, ln = commandItems.length; i < ln; i++) {\r\n      let addClickListener = true;\r\n      const item = commandItems[i];\r\n      const callbackArgs = {\r\n        grid: this.grid,\r\n        menu: this._menuElm,\r\n        columns: this.columns,\r\n        visibleColumns: this.getVisibleColumns()\r\n      };\r\n\r\n      // run each override functions to know if the item is visible and usable\r\n      const isItemVisible = this.runOverrideFunctionWhenExists<typeof callbackArgs>((item as GridMenuItem).itemVisibilityOverride, callbackArgs);\r\n      const isItemUsable = this.runOverrideFunctionWhenExists<typeof callbackArgs>((item as GridMenuItem).itemUsabilityOverride, callbackArgs);\r\n\r\n      // if the result is not visible then there's no need to go further\r\n      if (!isItemVisible) {\r\n        continue;\r\n      }\r\n\r\n      // when the override is defined, we need to use its result to update the disabled property\r\n      // so that \"handleMenuItemClick\" has the correct flag and won't trigger a command clicked event\r\n      if (Object.prototype.hasOwnProperty.call(item, 'itemUsabilityOverride')) {\r\n        (item as GridMenuItem).disabled = isItemUsable ? false : true;\r\n      }\r\n\r\n      const liElm = document.createElement('div');\r\n      liElm.className = 'slick-gridmenu-item';\r\n      liElm.role = 'menuitem';\r\n\r\n      if ((item as GridMenuItem).divider || item === 'divider') {\r\n        liElm.classList.add('slick-gridmenu-item-divider');\r\n        addClickListener = false;\r\n      }\r\n      if ((item as GridMenuItem).disabled) {\r\n        liElm.classList.add('slick-gridmenu-item-disabled');\r\n      }\r\n\r\n      if ((item as GridMenuItem).hidden) {\r\n        liElm.classList.add('slick-gridmenu-item-hidden');\r\n      }\r\n\r\n      if ((item as GridMenuItem).cssClass) {\r\n        liElm.classList.add(...Utils.classNameToList((item as GridMenuItem).cssClass));\r\n      }\r\n\r\n      if ((item as GridMenuItem).tooltip) {\r\n        liElm.title = (item as GridMenuItem).tooltip || '';\r\n      }\r\n\r\n      const iconElm = document.createElement('div');\r\n      iconElm.className = 'slick-gridmenu-icon';\r\n\r\n      liElm.appendChild(iconElm);\r\n\r\n      if ((item as GridMenuItem).iconCssClass) {\r\n        iconElm.classList.add(...Utils.classNameToList((item as GridMenuItem).iconCssClass));\r\n      }\r\n\r\n      if ((item as GridMenuItem).iconImage) {\r\n        iconElm.style.backgroundImage = `url(${(item as GridMenuItem).iconImage})`;\r\n      }\r\n\r\n      const textElm = document.createElement('span');\r\n      textElm.className = 'slick-gridmenu-content';\r\n      this.grid.applyHtmlCode(textElm, this.grid.sanitizeHtmlString((item as GridMenuItem).title || ''));\r\n\r\n      liElm.appendChild(textElm);\r\n\r\n      if ((item as GridMenuItem).textCssClass) {\r\n        textElm.classList.add(...Utils.classNameToList((item as GridMenuItem).textCssClass));\r\n      }\r\n\r\n      commandListElm.appendChild(liElm);\r\n\r\n      if (addClickListener) {\r\n        const eventGroup = isSubMenu ? 'sub-menu' : 'parent-menu';\r\n        this._bindingEventService.bind(liElm, 'click', this.handleMenuItemClick.bind(this, item, level) as EventListener, undefined, eventGroup);\r\n      }\r\n\r\n      // optionally open sub-menu(s) by mouseover\r\n      if (this._gridMenuOptions?.subMenuOpenByEvent === 'mouseover') {\r\n        this._bindingEventService.bind(liElm, 'mouseover', ((e: DOMMouseOrTouchEvent<HTMLDivElement>) => {\r\n          if ((item as GridMenuItem).commandItems || (item as GridMenuItem).customItems) {\r\n            this.repositionSubMenu(item, level, e);\r\n          } else if (!isSubMenu) {\r\n            this.destroySubMenus();\r\n          }\r\n        }) as EventListener);\r\n      }\r\n\r\n      // the option/command item could be a sub-menu if it has another list of commands/options\r\n      if ((item as GridMenuItem).commandItems || (item as GridMenuItem).customItems) {\r\n        const chevronElm = document.createElement('span');\r\n        chevronElm.className = 'sub-item-chevron';\r\n        if (this._gridMenuOptions?.subItemChevronClass) {\r\n          chevronElm.classList.add(...Utils.classNameToList(this._gridMenuOptions.subItemChevronClass));\r\n        } else {\r\n          chevronElm.textContent = '\u2B9E'; // \u2B9E or \u25B8\r\n        }\r\n\r\n        liElm.classList.add('slick-submenu-item');\r\n        liElm.appendChild(chevronElm);\r\n        continue;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Build the column picker, the code comes almost untouched from the file \"slick.columnpicker.js\" */\r\n  protected populateColumnPicker() {\r\n    this.grid.onColumnsReordered.subscribe(this.updateColumnOrder.bind(this));\r\n\r\n    // user could pass a title on top of the columns list\r\n    if (this._gridMenuOptions?.columnTitle) {\r\n      this._columnTitleElm = document.createElement('div');\r\n      this._columnTitleElm.className = 'title';\r\n      this.grid.applyHtmlCode(this._columnTitleElm, this.grid.sanitizeHtmlString(this._gridMenuOptions.columnTitle));\r\n      this._menuElm.appendChild(this._columnTitleElm);\r\n    }\r\n\r\n    this._bindingEventService.bind(this._menuElm, 'click', this.updateColumn.bind(this) as EventListener);\r\n    this._listElm = document.createElement('span');\r\n    this._listElm.className = 'slick-gridmenu-list';\r\n    this._listElm.role = 'menu';\r\n  }\r\n\r\n  /** Delete and then Recreate the Grid Menu (for example when we switch from regular to a frozen grid) */\r\n  recreateGridMenu() {\r\n    this.deleteMenu();\r\n    this.init(this.grid);\r\n  }\r\n\r\n  showGridMenu(e: DOMMouseOrTouchEvent<HTMLButtonElement>) {\r\n    const targetEvent = e.touches ? e.touches[0] : e;\r\n    e.preventDefault();\r\n\r\n    // empty both the picker list & the command list\r\n    Utils.emptyElement(this._listElm);\r\n    Utils.emptyElement(this._commandListElm);\r\n\r\n    const commandItems = this._gridMenuOptions?.commandItems ?? this._gridMenuOptions?.customItems ?? [];\r\n    this.populateCommandsMenu(commandItems, this._commandListElm, { grid: this.grid, level: 0 });\r\n    this.updateColumnOrder();\r\n    this._columnCheckboxes = [];\r\n\r\n    const callbackArgs = {\r\n      grid: this.grid,\r\n      menu: this._menuElm,\r\n      allColumns: this.columns,\r\n      visibleColumns: this.getVisibleColumns()\r\n    };\r\n\r\n    // run the override function (when defined), if the result is false it won't go further\r\n    if (this._gridMenuOptions && !this.runOverrideFunctionWhenExists<typeof callbackArgs>(this._gridMenuOptions.menuUsabilityOverride, callbackArgs)) {\r\n      return;\r\n    }\r\n\r\n    // notify of the onBeforeMenuShow only works when\r\n    // this mean that we cannot notify when the grid menu is attach to a button event\r\n    if (typeof e.stopPropagation === 'function') {\r\n      if (this.onBeforeMenuShow.notify(callbackArgs, e, this).getReturnValue() === false) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    let columnId, columnLabel, excludeCssClass;\r\n    for (let i = 0; i < this.columns.length; i++) {\r\n      columnId = this.columns[i].id;\r\n      excludeCssClass = this.columns[i].excludeFromGridMenu ? 'hidden' : '';\r\n      const colName: string = this.columns[i].name instanceof HTMLElement\r\n        ? (this.columns[i].name as HTMLElement).innerHTML\r\n        : (this.columns[i].name || '') as string;\r\n\r\n      const liElm = document.createElement('li');\r\n      liElm.className = excludeCssClass;\r\n      liElm.ariaLabel = colName;\r\n\r\n      const checkboxElm = document.createElement('input');\r\n      checkboxElm.type = 'checkbox';\r\n      checkboxElm.id = `${this._gridUid}-gridmenu-colpicker-${columnId}`;\r\n      checkboxElm.dataset.columnid = String(this.columns[i].id);\r\n      liElm.appendChild(checkboxElm);\r\n\r\n      if (Utils.isDefined(this.grid.getColumnIndex(this.columns[i].id)) && !this.columns[i].hidden) {\r\n        checkboxElm.checked = true;\r\n      }\r\n\r\n      this._columnCheckboxes.push(checkboxElm);\r\n\r\n      // get the column label from the picker value extractor (user can optionally provide a custom extractor)\r\n      columnLabel = (this._gridMenuOptions?.headerColumnValueExtractor)\r\n        ? this._gridMenuOptions.headerColumnValueExtractor(this.columns[i], this._gridOptions)\r\n        : this._defaults.headerColumnValueExtractor!(this.columns[i]);\r\n\r\n      const labelElm = document.createElement('label');\r\n      labelElm.htmlFor = `${this._gridUid}-gridmenu-colpicker-${columnId}`;\r\n      this.grid.applyHtmlCode(labelElm, this.grid.sanitizeHtmlString(Utils.getHtmlStringOutput(columnLabel || '')));\r\n      liElm.appendChild(labelElm);\r\n      this._listElm.appendChild(liElm);\r\n    }\r\n\r\n    if (this._gridMenuOptions && (!this._gridMenuOptions.hideForceFitButton || !this._gridMenuOptions.hideSyncResizeButton)) {\r\n      this._listElm.appendChild(document.createElement('hr'));\r\n    }\r\n\r\n    if (!(this._gridMenuOptions?.hideForceFitButton)) {\r\n      const forceFitTitle = (this._gridMenuOptions?.forceFitTitle) || this._defaults.forceFitTitle as string;\r\n\r\n      const liElm = document.createElement('li');\r\n      liElm.ariaLabel = forceFitTitle;\r\n      liElm.role = 'menuitem';\r\n      this._listElm.appendChild(liElm);\r\n\r\n      const forceFitCheckboxElm = document.createElement('input');\r\n      forceFitCheckboxElm.type = 'checkbox';\r\n      forceFitCheckboxElm.id = `${this._gridUid}-gridmenu-colpicker-forcefit`;\r\n      forceFitCheckboxElm.dataset.option = 'autoresize';\r\n      liElm.appendChild(forceFitCheckboxElm);\r\n\r\n      const labelElm = document.createElement('label');\r\n      labelElm.htmlFor = `${this._gridUid}-gridmenu-colpicker-forcefit`;\r\n      labelElm.textContent = forceFitTitle;\r\n      liElm.appendChild(labelElm);\r\n\r\n      if (this.grid.getOptions().forceFitColumns) {\r\n        forceFitCheckboxElm.checked = true;\r\n      }\r\n    }\r\n\r\n    if (!(this._gridMenuOptions?.hideSyncResizeButton)) {\r\n      const syncResizeTitle = (this._gridMenuOptions?.syncResizeTitle) || this._defaults.syncResizeTitle as string;\r\n\r\n      const liElm = document.createElement('li');\r\n      liElm.ariaLabel = syncResizeTitle;\r\n      this._listElm.appendChild(liElm);\r\n\r\n      const syncResizeCheckboxElm = document.createElement('input');\r\n      syncResizeCheckboxElm.type = 'checkbox';\r\n      syncResizeCheckboxElm.id = `${this._gridUid}-gridmenu-colpicker-syncresize`;\r\n      syncResizeCheckboxElm.dataset.option = 'syncresize';\r\n      liElm.appendChild(syncResizeCheckboxElm);\r\n\r\n      const labelElm = document.createElement('label');\r\n      labelElm.htmlFor = `${this._gridUid}-gridmenu-colpicker-syncresize`;\r\n      labelElm.textContent = syncResizeTitle;\r\n      liElm.appendChild(labelElm);\r\n\r\n      if (this.grid.getOptions().syncColumnCellResize) {\r\n        syncResizeCheckboxElm.checked = true;\r\n      }\r\n    }\r\n\r\n    let buttonElm = (e.target.nodeName === 'BUTTON' ? e.target : e.target.querySelector('button')) as HTMLButtonElement; // get button element\r\n    if (!buttonElm) {\r\n      buttonElm = e.target.parentElement as HTMLButtonElement; // external grid menu might fall in this last case if wrapped in a span/div\r\n    }\r\n\r\n    // we need to display the menu to properly calculate its width but we can however make it invisible\r\n    this._menuElm.style.display = 'block';\r\n    this._menuElm.style.opacity = '0';\r\n\r\n    this.repositionMenu(e, this._menuElm, buttonElm);\r\n\r\n    // set \"height\" when defined OR ELSE use the \"max-height\" with available window size and optional margin bottom\r\n    const menuMarginBottom = (this._gridMenuOptions?.marginBottom !== undefined) ? this._gridMenuOptions.marginBottom : this._defaults.marginBottom as number;\r\n    if (this._gridMenuOptions?.height !== undefined) {\r\n      this._menuElm.style.height = `${this._gridMenuOptions.height}px`;\r\n    } else {\r\n      this._menuElm.style.maxHeight = `${window.innerHeight - targetEvent.clientY - menuMarginBottom}px`;\r\n    }\r\n\r\n    this._menuElm.style.display = 'block';\r\n    this._menuElm.style.opacity = '1'; // restore menu visibility\r\n    this._menuElm.appendChild(this._listElm);\r\n    this._isMenuOpen = true;\r\n\r\n    if (typeof e.stopPropagation === 'function') {\r\n      if (this.onAfterMenuShow.notify(callbackArgs, e, this).getReturnValue() === false) {\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  protected getGridUidSelector() {\r\n    const gridUid = this.grid.getUID() || '';\r\n    return gridUid ? `.${gridUid}` : '';\r\n  }\r\n\r\n  protected handleBodyMouseDown(e: DOMMouseOrTouchEvent<HTMLElement>) {\r\n    // did we click inside the menu or any of its sub-menu(s)\r\n    let isMenuClicked = false;\r\n    if (this._menuElm?.contains(e.target)) {\r\n      isMenuClicked = true;\r\n    }\r\n    if (!isMenuClicked) {\r\n      document\r\n        .querySelectorAll(`.slick-gridmenu.slick-submenu${this.getGridUidSelector()}`)\r\n        .forEach(subElm => {\r\n          if (subElm.contains(e.target)) {\r\n            isMenuClicked = true;\r\n          }\r\n        });\r\n    }\r\n\r\n    if ((this._menuElm !== e.target && !isMenuClicked && !e.defaultPrevented && this._isMenuOpen) || e.target.className === 'close') {\r\n      this.hideMenu(e);\r\n    }\r\n  }\r\n\r\n  protected handleMenuItemClick(item: GridMenuItem | MenuCommandItem | 'divider', level = 0, e: DOMMouseOrTouchEvent<HTMLButtonElement | HTMLDivElement>) {\r\n    if (item !== 'divider' && !item.disabled && !item.divider) {\r\n      const command = item.command || '';\r\n\r\n      if (Utils.isDefined(command) && !item.commandItems && !(item as GridMenuItem).customItems) {\r\n        const callbackArgs: GridMenuCommandItemCallbackArgs = {\r\n          grid: this.grid,\r\n          command,\r\n          item,\r\n          allColumns: this.columns,\r\n          visibleColumns: this.getVisibleColumns()\r\n        };\r\n        this.onCommand.notify(callbackArgs, e, this);\r\n\r\n        // execute action callback when defined\r\n        if (typeof item.action === 'function') {\r\n          (item as MenuCommandItem).action!.call(this, e, callbackArgs);\r\n        }\r\n\r\n        // does the user want to leave open the Grid Menu after executing a command?\r\n        const leaveOpen = !!(this._gridMenuOptions?.leaveOpen);\r\n        if (!leaveOpen && !e.defaultPrevented) {\r\n          this.hideMenu(e);\r\n        }\r\n\r\n        // Stop propagation so that it doesn't register as a header click event.\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n      } else if (item.commandItems || (item as GridMenuItem).customItems) {\r\n        this.repositionSubMenu(item, level, e);\r\n      } else {\r\n        this.destroySubMenus();\r\n      }\r\n    }\r\n  }\r\n\r\n  hideMenu(e: DOMMouseOrTouchEvent<HTMLElement>) {\r\n    if (this._menuElm) {\r\n      const callbackArgs = {\r\n        grid: this.grid,\r\n        menu: this._menuElm,\r\n        allColumns: this.columns,\r\n        visibleColumns: this.getVisibleColumns()\r\n      };\r\n      if (this._isMenuOpen && this.onMenuClose.notify(callbackArgs, e, this).getReturnValue() === false) {\r\n        return;\r\n      }\r\n      this._isMenuOpen = false;\r\n      Utils.hide(this._menuElm);\r\n    }\r\n    this.destroySubMenus();\r\n  }\r\n\r\n  /** Update the Titles of each sections (command, commandTitle, ...) */\r\n  updateAllTitles(gridMenuOptions: GridMenuOption) {\r\n    if (this._commandTitleElm) {\r\n      this.grid.applyHtmlCode(this._commandTitleElm, this.grid.sanitizeHtmlString(gridMenuOptions.commandTitle || gridMenuOptions.customTitle || ''));\r\n    }\r\n    if (this._columnTitleElm) {\r\n      this.grid.applyHtmlCode(this._columnTitleElm, this.grid.sanitizeHtmlString(gridMenuOptions.columnTitle || ''));\r\n    }\r\n  }\r\n\r\n  protected addSubMenuTitleWhenExists(item: GridMenuItem | MenuCommandItem | 'divider', commandOrOptionMenu: HTMLDivElement) {\r\n    if (item !== 'divider' && item?.subMenuTitle) {\r\n      const subMenuTitleElm = document.createElement('div');\r\n      subMenuTitleElm.className = 'slick-menu-title';\r\n      subMenuTitleElm.textContent = item.subMenuTitle as string;\r\n      const subMenuTitleClass = item.subMenuTitleCssClass as string;\r\n      if (subMenuTitleClass) {\r\n        subMenuTitleElm.classList.add(...Utils.classNameToList(subMenuTitleClass));\r\n      }\r\n\r\n      commandOrOptionMenu.appendChild(subMenuTitleElm);\r\n    }\r\n  }\r\n\r\n  protected repositionSubMenu(item: GridMenuItem | MenuCommandItem | 'divider', level: number, e: DOMMouseOrTouchEvent<HTMLButtonElement | HTMLDivElement>) {\r\n    // when we're clicking a grid cell OR our last menu type (command/option) differs then we know that we need to start fresh and close any sub-menus that might still be open\r\n    if (e.target.classList.contains('slick-cell')) {\r\n      this.destroySubMenus();\r\n    }\r\n\r\n    // creating sub-menu, we'll also pass level & the item object since we might have \"subMenuTitle\" to show\r\n    const subMenuElm = this.createMenu(level + 1, item);\r\n    subMenuElm.style.display = 'block';\r\n    document.body.appendChild(subMenuElm);\r\n    this.repositionMenu(e, subMenuElm);\r\n  }\r\n\r\n  /**\r\n   * Reposition the menu drop (up/down) and the side (left/right)\r\n   * @param {*} event\r\n   */\r\n  protected repositionMenu(e: DOMMouseOrTouchEvent<HTMLButtonElement | HTMLDivElement>, menuElm: HTMLElement, buttonElm?: HTMLButtonElement) {\r\n    const targetEvent = e.touches ? e.touches[0] : e;\r\n    const isSubMenu = menuElm.classList.contains('slick-submenu');\r\n    const parentElm = isSubMenu\r\n      ? e.target.closest('.slick-gridmenu-item') as HTMLDivElement\r\n      : targetEvent.target as HTMLElement;\r\n\r\n    const menuIconOffset = Utils.offset(buttonElm || this._buttonElm); // get button offset position\r\n    const menuWidth = menuElm.offsetWidth;\r\n    const useClickToRepositionMenu = (this._gridMenuOptions?.useClickToRepositionMenu !== undefined) ? this._gridMenuOptions.useClickToRepositionMenu : this._defaults.useClickToRepositionMenu;\r\n    const contentMinWidth = (this._gridMenuOptions?.contentMinWidth) ? this._gridMenuOptions.contentMinWidth : this._defaults.contentMinWidth as number;\r\n    const currentMenuWidth = (contentMinWidth > menuWidth) ? contentMinWidth : menuWidth + 5;\r\n    let menuOffsetTop = (useClickToRepositionMenu && targetEvent.pageY > 0) ? targetEvent.pageY : menuIconOffset!.top + 10;\r\n    let menuOffsetLeft = (useClickToRepositionMenu && targetEvent.pageX > 0) ? targetEvent.pageX : menuIconOffset!.left + 10;\r\n\r\n    if (isSubMenu && parentElm) {\r\n      const parentOffset = Utils.offset(parentElm);\r\n      menuOffsetLeft = parentOffset?.left ?? 0;\r\n      menuOffsetTop = parentOffset?.top ?? 0;\r\n      const gridPos = this.grid.getGridPosition();\r\n      let subMenuPosCalc = menuOffsetLeft + Number(menuWidth); // calculate coordinate at caller element far right\r\n      if (isSubMenu) {\r\n        subMenuPosCalc += parentElm.clientWidth;\r\n      }\r\n      const browserWidth = document.documentElement.clientWidth;\r\n      const dropSide = (subMenuPosCalc >= gridPos.width || subMenuPosCalc >= browserWidth) ? 'left' : 'right';\r\n      if (dropSide === 'left') {\r\n        menuElm.classList.remove('dropright');\r\n        menuElm.classList.add('dropleft');\r\n        menuOffsetLeft -= menuWidth;\r\n      } else {\r\n        menuElm.classList.remove('dropleft');\r\n        menuElm.classList.add('dropright');\r\n        if (isSubMenu) {\r\n          menuOffsetLeft += parentElm.offsetWidth;\r\n        }\r\n      }\r\n    } else {\r\n      menuOffsetTop += 10;\r\n      menuOffsetLeft = menuOffsetLeft - currentMenuWidth + 10;\r\n    }\r\n\r\n    menuElm.style.top = `${menuOffsetTop}px`;\r\n    menuElm.style.left = `${menuOffsetLeft}px`;\r\n\r\n    if (contentMinWidth > 0) {\r\n      this._menuElm.style.minWidth = `${contentMinWidth}px`;\r\n    }\r\n  }\r\n\r\n  protected updateColumnOrder() {\r\n    // Because columns can be reordered, we have to update the `columns`\r\n    // to reflect the new order, however we can't just take `grid.getColumns()`,\r\n    // as it does not include columns currently hidden by the picker.\r\n    // We create a new `columns` structure by leaving currently-hidden\r\n    // columns in their original ordinal position and interleaving the results\r\n    // of the current column sort.\r\n    const current = this.grid.getColumns().slice(0);\r\n    const ordered = new Array(this.columns.length);\r\n    for (let i = 0; i < ordered.length; i++) {\r\n      if (this.grid.getColumnIndex(this.columns[i].id) === undefined) {\r\n        // If the column doesn't return a value from getColumnIndex,\r\n        // it is hidden. Leave it in this position.\r\n        ordered[i] = this.columns[i];\r\n      } else {\r\n        // Otherwise, grab the next visible column.\r\n        ordered[i] = current.shift();\r\n      }\r\n    }\r\n    this.columns = ordered;\r\n  }\r\n\r\n  protected updateColumn(e: DOMMouseOrTouchEvent<HTMLInputElement>) {\r\n    if (e.target.dataset.option === 'autoresize') {\r\n      // when calling setOptions, it will resize with ALL Columns (even the hidden ones)\r\n      // we can avoid this problem by keeping a reference to the visibleColumns before setOptions and then setColumns after\r\n      const previousVisibleColumns = this.getVisibleColumns();\r\n      const isChecked = e.target.checked;\r\n      this.grid.setOptions({ forceFitColumns: isChecked });\r\n      this.grid.setColumns(previousVisibleColumns);\r\n      return;\r\n    }\r\n\r\n    if (e.target.dataset.option === 'syncresize') {\r\n      this.grid.setOptions({ syncColumnCellResize: !!(e.target.checked) });\r\n      return;\r\n    }\r\n\r\n    if (e.target.type === 'checkbox') {\r\n      const isChecked = e.target.checked;\r\n      const columnId = e.target.dataset.columnid || '';\r\n      const visibleColumns: Column[] = [];\r\n      this._columnCheckboxes.forEach((columnCheckbox, idx) => {\r\n        if (columnCheckbox.checked) {\r\n          if (this.columns[idx].hidden) { this.columns[idx].hidden = false; }\r\n          visibleColumns.push(this.columns[idx]);\r\n        }\r\n      });\r\n\r\n      if (!visibleColumns.length) {\r\n        e.target.checked = true;\r\n        return;\r\n      }\r\n\r\n      const callbackArgs = {\r\n        columnId,\r\n        showing: isChecked,\r\n        grid: this.grid,\r\n        allColumns: this.columns,\r\n        columns: visibleColumns,\r\n        visibleColumns: this.getVisibleColumns()\r\n      };\r\n      this.grid.setColumns(visibleColumns);\r\n      this.onColumnsChanged.notify(callbackArgs, e, this);\r\n    }\r\n  }\r\n\r\n  getAllColumns() {\r\n    return this.columns;\r\n  }\r\n\r\n  /** visible columns, we can simply get them directly from the grid */\r\n  getVisibleColumns() {\r\n    return this.grid.getColumns();\r\n  }\r\n\r\n  /**\r\n   * Method that user can pass to override the default behavior.\r\n   * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\r\n   * @param overrideFn: override function callback\r\n   * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\r\n   */\r\n  protected runOverrideFunctionWhenExists<T = any>(overrideFn: ((args: any) => boolean) | undefined, args: T): boolean {\r\n    if (typeof overrideFn === 'function') {\r\n      return overrideFn.call(this, args);\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  window.Slick.Controls = window.Slick.Controls || {};\r\n  window.Slick.Controls.GridMenu = SlickGridMenu;\r\n}\r\n", "import type { PagingInfo } from '../models/index.js';\r\nimport { BindingEventService as BindingEventService_, SlickGlobalEditorLock as SlickGlobalEditorLock_, Utils as Utils_ } from '../slick.core.js';\r\nimport type { SlickDataView } from '../slick.dataview.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\r\nconst SlickGlobalEditorLock = IIFE_ONLY ? Slick.GlobalEditorLock : SlickGlobalEditorLock_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\nexport interface GridPagerOption {\r\n  showAllText: string;\r\n  showPageText: string;\r\n  showCountText: string;\r\n  showCount: boolean;\r\n  pagingOptions: Array<{ data: number; name: string; ariaLabel: string; }>;\r\n  showPageSizes: boolean;\r\n}\r\n\r\nexport class SlickGridPager {\r\n  // --\r\n  // public API\r\n\r\n  // --\r\n  // protected props\r\n  protected _container: HTMLElement; // the container might be a string, a jQuery object or a native element\r\n  protected _statusElm!: HTMLElement;\r\n  protected _bindingEventService: BindingEventService_;\r\n  protected _options: GridPagerOption;\r\n  protected _defaults: GridPagerOption = {\r\n    showAllText: 'Showing all {rowCount} rows',\r\n    showPageText: 'Showing page {pageNum} of {pageCount}',\r\n    showCountText: 'From {countBegin} to {countEnd} of {rowCount} rows',\r\n    showCount: false,\r\n    pagingOptions: [\r\n      { data: 0, name: 'All', ariaLabel: 'Show All Pages' },\r\n      { data: -1, name: 'Auto', ariaLabel: 'Auto Page Size' },\r\n      { data: 25, name: '25', ariaLabel: 'Show 25 rows per page' },\r\n      { data: 50, name: '50', ariaLabel: 'Show 50 rows per page' },\r\n      { data: 100, name: '100', ariaLabel: 'Show 100 rows per page' },\r\n    ],\r\n    showPageSizes: false\r\n  };\r\n\r\n  constructor(protected readonly dataView: SlickDataView, protected readonly grid: SlickGrid, selectorOrElm: HTMLElement | string, options?: Partial<GridPagerOption>) {\r\n    this._container = this.getContainerElement(selectorOrElm) as HTMLElement;\r\n    this._options = Utils.extend(true, {}, this._defaults, options);\r\n    this._bindingEventService = new BindingEventService();\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.constructPagerUI();\r\n    this.updatePager(this.dataView.getPagingInfo());\r\n    this.dataView.onPagingInfoChanged.subscribe((_e, pagingInfo) => {\r\n      this.updatePager(pagingInfo);\r\n    });\r\n  }\r\n\r\n  /** Destroy function when element is destroyed */\r\n  destroy() {\r\n    this.setPageSize(0);\r\n    this._bindingEventService.unbindAll();\r\n    Utils.emptyElement(this._container);\r\n  }\r\n\r\n  protected getNavState() {\r\n    const cannotLeaveEditMode = !SlickGlobalEditorLock.commitCurrentEdit();\r\n    const pagingInfo = this.dataView.getPagingInfo();\r\n    const lastPage = pagingInfo.totalPages - 1;\r\n\r\n    return {\r\n      canGotoFirst: !cannotLeaveEditMode && pagingInfo.pageSize !== 0 && pagingInfo.pageNum > 0,\r\n      canGotoLast: !cannotLeaveEditMode && pagingInfo.pageSize !== 0 && pagingInfo.pageNum !== lastPage,\r\n      canGotoPrev: !cannotLeaveEditMode && pagingInfo.pageSize !== 0 && pagingInfo.pageNum > 0,\r\n      canGotoNext: !cannotLeaveEditMode && pagingInfo.pageSize !== 0 && pagingInfo.pageNum < lastPage,\r\n      pagingInfo\r\n    };\r\n  }\r\n\r\n  protected setPageSize(n: number) {\r\n    this.dataView.setRefreshHints({\r\n      isFilterUnchanged: true\r\n    });\r\n    this.dataView.setPagingOptions({ pageSize: n });\r\n  }\r\n\r\n  protected gotoFirst() {\r\n    if (this.getNavState().canGotoFirst) {\r\n      this.dataView.setPagingOptions({ pageNum: 0 });\r\n    }\r\n  }\r\n\r\n  protected gotoLast() {\r\n    const state = this.getNavState();\r\n    if (state.canGotoLast) {\r\n      this.dataView.setPagingOptions({ pageNum: state.pagingInfo.totalPages - 1 });\r\n    }\r\n  }\r\n\r\n  protected gotoPrev() {\r\n    const state = this.getNavState();\r\n    if (state.canGotoPrev) {\r\n      this.dataView.setPagingOptions({ pageNum: state.pagingInfo.pageNum - 1 });\r\n    }\r\n  }\r\n\r\n  protected gotoNext() {\r\n    const state = this.getNavState();\r\n    if (state.canGotoNext) {\r\n      this.dataView.setPagingOptions({ pageNum: state.pagingInfo.pageNum + 1 });\r\n    }\r\n  }\r\n\r\n  protected getContainerElement(selectorOrElm: object | HTMLElement | string) {\r\n    // the container might be a string, a jQuery object or a native element\r\n    return typeof selectorOrElm === 'string'\r\n      ? document.querySelector(selectorOrElm)\r\n      : typeof selectorOrElm === 'object' && (selectorOrElm as any)[0]\r\n        ? (selectorOrElm as any)[0] as HTMLElement\r\n        : selectorOrElm;\r\n  }\r\n\r\n  protected constructPagerUI() {\r\n    // the container might be a string, a jQuery object or a native element\r\n    const container = this.getContainerElement(this._container) as HTMLElement | HTMLElement[];\r\n    if (!container || ((container as any).jquery && !(container as HTMLElement[])[0])) { return; }\r\n\r\n    const navElm = document.createElement('span');\r\n    navElm.className = 'slick-pager-nav';\r\n\r\n    const settingsElm = document.createElement('span');\r\n    settingsElm.className = 'slick-pager-settings';\r\n\r\n    this._statusElm = document.createElement('span');\r\n    this._statusElm.className = 'slick-pager-status';\r\n\r\n    const pagerSettingsElm = document.createElement('span');\r\n    pagerSettingsElm.className = 'slick-pager-settings-expanded';\r\n    pagerSettingsElm.textContent = 'Show: ';\r\n\r\n    for (let o = 0; o < this._options.pagingOptions.length; o++) {\r\n      const p = this._options.pagingOptions[o];\r\n\r\n      const anchorElm = document.createElement('a');\r\n      anchorElm.textContent = p.name;\r\n      anchorElm.ariaLabel = p.ariaLabel;\r\n      anchorElm.dataset.val = String(p.data);\r\n      pagerSettingsElm.appendChild(anchorElm);\r\n\r\n      this._bindingEventService.bind(anchorElm, 'click', ((e: any) => {\r\n        const pagesize = e.target.dataset.val;\r\n        if (pagesize !== undefined) {\r\n          if (Number(pagesize) === -1) {\r\n            const vp = this.grid.getViewport();\r\n            this.setPageSize(vp.bottom - vp.top);\r\n          } else {\r\n            this.setPageSize(parseInt(pagesize));\r\n          }\r\n        }\r\n      }));\r\n    }\r\n\r\n    pagerSettingsElm.style.display = this._options.showPageSizes ? 'block' : 'none';\r\n\r\n    settingsElm.appendChild(pagerSettingsElm);\r\n\r\n    // light bulb icon\r\n    const displayPaginationContainer = document.createElement('span');\r\n    const displayIconElm = document.createElement('span');\r\n    displayPaginationContainer.className = 'sgi-container';\r\n    displayIconElm.ariaLabel = 'Show Pagination Options';\r\n    displayIconElm.role = 'button';\r\n    displayIconElm.className = 'sgi sgi-lightbulb';\r\n    displayPaginationContainer.appendChild(displayIconElm);\r\n\r\n    this._bindingEventService.bind(displayIconElm, 'click', () => {\r\n      const styleDisplay = pagerSettingsElm.style.display;\r\n      pagerSettingsElm.style.display = styleDisplay === 'none' ? 'inline-flex' : 'none';\r\n    });\r\n    settingsElm.appendChild(displayPaginationContainer);\r\n\r\n    const pageButtons = [\r\n      { key: 'start', ariaLabel: 'First Page', callback: this.gotoFirst },\r\n      { key: 'left', ariaLabel: 'Previous Page', callback: this.gotoPrev },\r\n      { key: 'right', ariaLabel: 'Next Page', callback: this.gotoNext },\r\n      { key: 'end', ariaLabel: 'Last Page', callback: this.gotoLast },\r\n    ];\r\n\r\n    pageButtons.forEach(pageBtn => {\r\n      const iconElm = document.createElement('span');\r\n      iconElm.className = 'sgi-container';\r\n\r\n      const innerIconElm = document.createElement('span');\r\n      innerIconElm.role = 'button';\r\n      innerIconElm.ariaLabel = pageBtn.ariaLabel;\r\n      innerIconElm.className = `sgi sgi-chevron-${pageBtn.key}`;\r\n      this._bindingEventService.bind(innerIconElm, 'click', pageBtn.callback.bind(this));\r\n\r\n      iconElm.appendChild(innerIconElm);\r\n      navElm.appendChild(iconElm);\r\n    });\r\n\r\n    const slickPagerElm = document.createElement('div');\r\n    slickPagerElm.className = 'slick-pager';\r\n\r\n    slickPagerElm.appendChild(navElm);\r\n    slickPagerElm.appendChild(this._statusElm);\r\n    slickPagerElm.appendChild(settingsElm);\r\n\r\n    (container as HTMLElement).appendChild(slickPagerElm);\r\n  }\r\n\r\n  protected updatePager(pagingInfo: PagingInfo) {\r\n    if (!this._container || ((this._container as any).jquery && !(this._container as any)[0])) { return; }\r\n    const state = this.getNavState();\r\n\r\n    // remove disabled class on all icons\r\n    this._container.querySelectorAll('.slick-pager-nav span')\r\n      .forEach(pagerIcon => pagerIcon.classList.remove('sgi-state-disabled'));\r\n\r\n    // add back disabled class to only necessary icons\r\n    if (!state.canGotoFirst) {\r\n      this._container!.querySelector('.sgi-chevron-start')?.classList.add('sgi-state-disabled');\r\n    }\r\n    if (!state.canGotoLast) {\r\n      this._container!.querySelector('.sgi-chevron-end')?.classList.add('sgi-state-disabled');\r\n    }\r\n    if (!state.canGotoNext) {\r\n      this._container!.querySelector('.sgi-chevron-right')?.classList.add('sgi-state-disabled');\r\n    }\r\n    if (!state.canGotoPrev) {\r\n      this._container!.querySelector('.sgi-chevron-left')?.classList.add('sgi-state-disabled');\r\n    }\r\n\r\n    if (pagingInfo.pageSize === 0) {\r\n      this._statusElm.textContent = (this._options.showAllText.replace('{rowCount}', pagingInfo.totalRows + '').replace('{pageCount}', pagingInfo.totalPages + ''));\r\n    } else {\r\n      this._statusElm.textContent = (this._options.showPageText.replace('{pageNum}', pagingInfo.pageNum + 1 + '').replace('{pageCount}', pagingInfo.totalPages + ''));\r\n    }\r\n\r\n    if (this._options.showCount && pagingInfo.pageSize !== 0) {\r\n      const pageBegin = pagingInfo.pageNum * pagingInfo.pageSize;\r\n      let currentText = this._statusElm.textContent;\r\n\r\n      if (currentText) {\r\n        currentText += ' - ';\r\n      }\r\n\r\n      this._statusElm.textContent =\r\n        currentText +\r\n        this._options.showCountText\r\n          .replace('{rowCount}', String(pagingInfo.totalRows))\r\n          .replace('{countBegin}', String(pageBegin + 1))\r\n          .replace('{countEnd}', String(Math.min(pageBegin + pagingInfo.pageSize, pagingInfo.totalRows)));\r\n    }\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  window.Slick.Controls = window.Slick.Controls || {};\r\n  window.Slick.Controls.Pager = SlickGridPager;\r\n}\r\n\r\n", "export const FieldType = {\n  /** unknown type */\n  unknown: 'unknown',\n\n  /** string type */\n  string: 'string',\n\n  /** boolean type (true/false) */\n  boolean: 'boolean',\n\n  /** integer number type (1,2,99) */\n  integer: 'integer',\n\n  /** float number (with decimal) type */\n  float: 'float',\n\n  /** number includes Integer and Float */\n  number: 'number',\n\n  /** new Date(), javascript Date object */\n  date: 'date',\n\n  /** Format: 'YYYY-MM-DD' <=> 2001-02-28 */\n  dateIso: 'dateIso',\n\n  /** Format: 'YYYY-MM-DDTHH:mm:ss.SSSZ' <=> 2001-02-28T14:00:00.123Z */\n  dateUtc: 'dateUtc',\n\n  /** new Date(), javacript Date Object with Time */\n  dateTime: 'dateTime',\n\n  /** Format: 'YYYY-MM-DD HH:mm:ss' <=> 2001-02-28 14:01:01 */\n  dateTimeIso: 'dateTimeIso',\n\n  /** Format: 'YYYY-MM-DD hh:mm:ss a' <=> 2001-02-28 11:01:01 pm */\n  dateTimeIsoAmPm: 'dateTimeIsoAmPm',\n\n  /** Format: 'YYYY-MM-DD hh:mm:ss A' <=> 2001-02-28 11:01:01 PM */\n  dateTimeIsoAM_PM: 'dateTimeIsoAM_PM',\n\n  /** Format: 'YYYY-MM-DD HH:mm' <=> 2001-02-28 14:01 */\n  dateTimeShortIso: 'dateTimeShortIso',\n\n  /** Format (Euro): 'DD/MM/YYYY' <=> 28/02/2001 */\n  dateEuro: 'dateEuro',\n\n  /** Format (Euro): 'D/M/YY' <=> 28/2/12 */\n  dateEuroShort: 'dateEuroShort',\n\n  /** Format (Euro): 'DD/MM/YYYY HH:mm' <=> 28/02/2001 13:01 */\n  dateTimeShortEuro: 'dateTimeShortEuro',\n\n  /** Format (Euro): 'DD/MM/YYYY HH:mm:ss' <=> 02/28/2001 13:01:01 */\n  dateTimeEuro: 'dateTimeEuro',\n\n  /** Format (Euro): 'DD/MM/YYYY hh:mm:ss a' <=> 28/02/2001 11:01:01 pm */\n  dateTimeEuroAmPm: 'dateTimeEuroAmPm',\n\n  /** Format (Euro): 'DD/MM/YYYY hh:mm:ss A' <=> 28/02/2001 11:01:01 PM */\n  dateTimeEuroAM_PM: 'dateTimeEuroAM_PM',\n\n  /** Format (Euro): 'D/M/YY H:m:s' <=> 28/2/14 14:1:2 */\n  dateTimeEuroShort: 'dateTimeEuroShort',\n\n  /** Format (Euro): 'D/M/YY h:m:s a' <=> 28/2/14 1:2:10 pm */\n  dateTimeEuroShortAmPm: 'dateTimeEuroShortAmPm',\n\n  /** Format (Euro): 'D/M/YY h:m:s A' <=> 28/2/14 14:1:1 PM */\n  dateTimeEuroShortAM_PM: 'dateTimeEuroShortAM_PM',\n\n  /** Format: 'MM/DD/YYYY' <=> 02/28/2001 */\n  dateUs: 'dateUs',\n\n  /** Format: 'M/D/YY' <=> 2/28/12 */\n  dateUsShort: 'dateUsShort',\n\n  /** Format: 'MM/DD/YYYY HH:mm' <=> 02/28/2001 13:01 */\n  dateTimeShortUs: 'dateTimeShortUs',\n\n  /** Format: 'MM/DD/YYYY HH:mm:ss' <=> 02/28/2001 13:01:01 */\n  dateTimeUs: 'dateTimeUs',\n\n  /** Format: 'MM/DD/YYYY hh:mm:ss a' <=> 02/28/2001 11:01:01 pm */\n  dateTimeUsAmPm: 'dateTimeUsAmPm',\n\n  /** Format: 'MM/DD/YYYY hh:mm:ss A' <=> 02/28/2001 11:01:01 PM */\n  dateTimeUsAM_PM: 'dateTimeUsAM_PM',\n\n  /** Format: 'M/D/YY H:m:s' <=> 2/28/14 14:1:2 */\n  dateTimeUsShort: 'dateTimeUsShort',\n\n  /** Format: 'M/D/YY h:m:s a' <=> 2/28/14 1:2:10 pm */\n  dateTimeUsShortAmPm: 'dateTimeUsShortAmPm',\n\n  /** Format: 'M/D/YY h:m:s A' <=> 2/28/14 14:1:1 PM */\n  dateTimeUsShortAM_PM: 'dateTimeUsShortAM_PM',\n\n  /** complex object with various properties */\n  object: 'object',\n\n  /** password text string */\n  password: 'password',\n\n  /** alias to string */\n  text: 'text',\n\n  /** readonly text string */\n  readonly: 'readonly',\n} as const;\n", "export enum SortDirectionNumber {\n  asc = 1,\n  desc = -1,\n  neutral = 0,\n}\n", "import type { AutoTooltipOption, Column, SlickPlugin } from '../models/index.js';\r\nimport { type SlickEventData, Utils as Utils_ } from '../slick.core.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/**\r\n * AutoTooltips plugin to show/hide tooltips when columns are too narrow to fit content.\r\n */\r\nexport class SlickAutoTooltips implements SlickPlugin {\r\n  // --\r\n  // public API\r\n  pluginName = 'AutoTooltips' as const;\r\n\r\n  // --\r\n  // protected props\r\n  protected _grid!: SlickGrid;\r\n  protected _options?: AutoTooltipOption;\r\n  protected _defaults: AutoTooltipOption = {\r\n    enableForCells: true,\r\n    enableForHeaderCells: false,\r\n    maxToolTipLength: undefined,\r\n    replaceExisting: true\r\n  };\r\n\r\n  /**\r\n   * Constructor of the SlickGrid 3rd party plugin, it can optionally receive options\r\n   * @param {boolean} [options.enableForCells=true]        - Enable tooltip for grid cells\r\n   * @param {boolean} [options.enableForHeaderCells=false] - Enable tooltip for header cells\r\n   * @param {number}  [options.maxToolTipLength=null]      - The maximum length for a tooltip\r\n   * @param {boolean} [options.replaceExisting=null]       - Allow preventing custom tooltips from being overwritten by auto tooltips\r\n   */\r\n  constructor(options?: AutoTooltipOption) {\r\n    this._options = Utils.extend(true, {}, this._defaults, options);\r\n  }\r\n\r\n  /**\r\n   * Initialize plugin.\r\n   */\r\n  init(grid: SlickGrid) {\r\n    this._grid = grid;\r\n    if (this._options?.enableForCells) {\r\n      this._grid.onMouseEnter.subscribe(this.handleMouseEnter.bind(this));\r\n    }\r\n    if (this._options?.enableForHeaderCells) {\r\n      this._grid.onHeaderMouseEnter.subscribe(this.handleHeaderMouseEnter.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy plugin.\r\n   */\r\n  destroy() {\r\n    if (this._options?.enableForCells) {\r\n      this._grid.onMouseEnter.unsubscribe(this.handleMouseEnter.bind(this));\r\n    }\r\n    if (this._options?.enableForHeaderCells) {\r\n      this._grid.onHeaderMouseEnter.unsubscribe(this.handleHeaderMouseEnter.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle mouse entering grid cell to add/remove tooltip.\r\n   * @param {SlickEventData} event - The event\r\n   */\r\n  protected handleMouseEnter(event: SlickEventData) {\r\n    const cell = this._grid.getCellFromEvent(event);\r\n    if (cell) {\r\n      let node: HTMLElement | null = this._grid.getCellNode(cell.row, cell.cell);\r\n      let text;\r\n      if (this._options && node && (!node.title || this._options?.replaceExisting)) {\r\n        if (node.clientWidth < node.scrollWidth) {\r\n          text = node.textContent?.trim() ?? '';\r\n          if (this._options?.maxToolTipLength && text.length > this._options?.maxToolTipLength) {\r\n            text = text.substring(0, this._options.maxToolTipLength - 3) + '...';\r\n          }\r\n        } else {\r\n          text = '';\r\n        }\r\n        node.title = text;\r\n      }\r\n      node = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle mouse entering header cell to add/remove tooltip.\r\n   * @param {SlickEventData} event   - The event\r\n   * @param {object} args.column - The column definition\r\n   */\r\n  protected handleHeaderMouseEnter(event: SlickEventData, args: { column: Column; }) {\r\n    const column = args.column;\r\n    let node: HTMLDivElement | null;\r\n    const targetElm = (event.target as HTMLDivElement);\r\n\r\n    if (targetElm) {\r\n      node = targetElm.closest<HTMLDivElement>('.slick-header-column');\r\n      if (node && !(column?.toolTip)) {\r\n        const titleVal = (targetElm.clientWidth < node.clientWidth) ? column?.name ?? '' : '';\r\n        node.title = Utils.getHtmlStringOutput(titleVal, 'innerHTML');\r\n      }\r\n    }\r\n    node = null;\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      AutoTooltips: SlickAutoTooltips\r\n    }\r\n  });\r\n}\r\n", "import type { CssStyleHash, SlickPlugin } from '../models/index.js';\r\nimport { keyCode as keyCode_, SlickEvent as SlickEvent_, type SlickEventData, Utils as Utils_, type SlickRange } from '../slick.core.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst keyCode = IIFE_ONLY ? Slick.keyCode : keyCode_;\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/**\r\n * This manager enables users to copy/paste cell data\r\n */\r\nexport class SlickCellCopyManager implements SlickPlugin {\r\n  // --\r\n  // public API\r\n  pluginName = 'CellCopyManager' as const;\r\n  onCopyCells = new SlickEvent<{ ranges: SlickRange[] | null; }>('onCopyCells');\r\n  onCopyCancelled = new SlickEvent<{ ranges: SlickRange[] | null; }>('onCopyCancelled');\r\n  onPasteCells = new SlickEvent<{ from: SlickRange[] | undefined; to: SlickRange[] | undefined; }>('onPasteCells');\r\n\r\n  // --\r\n  // protected props\r\n  protected _grid!: SlickGrid;\r\n  protected _copiedRanges?: SlickRange[] | null = null;\r\n\r\n  init(grid: SlickGrid) {\r\n    this._grid = grid;\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n    this._grid.onKeyDown.subscribe(this.handleKeyDown.bind(this));\r\n  }\r\n\r\n  destroy() {\r\n    this._grid.onKeyDown.unsubscribe(this.handleKeyDown.bind(this));\r\n  }\r\n\r\n  protected handleKeyDown(e: SlickEventData) {\r\n    let ranges: SlickRange[] | undefined;\r\n    if (!this._grid.getEditorLock().isActive()) {\r\n      if (e.which === keyCode.ESCAPE) {\r\n        if (this._copiedRanges) {\r\n          e.preventDefault();\r\n          this.clearCopySelection();\r\n          this.onCopyCancelled.notify({ ranges: this._copiedRanges });\r\n          this._copiedRanges = null;\r\n        }\r\n      }\r\n\r\n      if (e.which === 67 && (e.ctrlKey || e.metaKey)) {\r\n        ranges = this._grid.getSelectionModel()?.getSelectedRanges() ?? [];\r\n        if (ranges.length !== 0) {\r\n          e.preventDefault();\r\n          this._copiedRanges = ranges;\r\n          this.markCopySelection(ranges);\r\n          this.onCopyCells.notify({ ranges });\r\n        }\r\n      }\r\n\r\n      if (e.which === 86 && (e.ctrlKey || e.metaKey)) {\r\n        if (this._copiedRanges) {\r\n          e.preventDefault();\r\n          ranges = this._grid.getSelectionModel()?.getSelectedRanges();\r\n          this.onPasteCells.notify({ from: this._copiedRanges, to: ranges });\r\n          if (!this._grid.getOptions().preserveCopiedSelectionOnPaste) {\r\n            this.clearCopySelection();\r\n            this._copiedRanges = null;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  protected markCopySelection(ranges: SlickRange[]) {\r\n    const columns = this._grid.getColumns();\r\n    const hash: CssStyleHash = {};\r\n    for (let i = 0; i < ranges.length; i++) {\r\n      for (let j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {\r\n        hash[j] = {};\r\n        for (let k = ranges[i].fromCell; k <= ranges[i].toCell; k++) {\r\n          hash[j][columns[k].id] = 'copied';\r\n        }\r\n      }\r\n    }\r\n    this._grid.setCellCssStyles('copy-manager', hash);\r\n  }\r\n\r\n  protected clearCopySelection() {\r\n    this._grid.removeCellCssStyles('copy-manager');\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      CellCopyManager: SlickCellCopyManager\r\n    }\r\n  });\r\n}\r\n", "import type { Column, CssStyleHash, ExcelCopyBufferOption, ExternalCopyClipCommand, SlickPlugin } from '../models/index.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\nimport { SlickEvent as SlickEvent_, type SlickEventData, SlickRange as SlickRange_, Utils as Utils_ } from '../slick.core.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst SlickRange = IIFE_ONLY ? Slick.Range : SlickRange_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\nconst CLEAR_COPY_SELECTION_DELAY = 2000;\r\nconst CLIPBOARD_PASTE_DELAY = 100;\r\n\r\n/***\r\n  This manager enables users to copy/paste data from/to an external Spreadsheet application\r\n  such as MS-Excel\u00AE or OpenOffice-Spreadsheet.\r\n\r\n  Since it is not possible to access directly the clipboard in javascript, the plugin uses\r\n  a trick to do it's job. After detecting the keystroke, we dynamically create a textarea\r\n  where the browser copies/pastes the serialized data.\r\n\r\n  options:\r\n    copiedCellStyle : sets the css className used for copied cells. default : \"copied\"\r\n    copiedCellStyleLayerKey : sets the layer key for setting css values of copied cells. default : \"copy-manager\"\r\n    dataItemColumnValueExtractor : option to specify a custom column value extractor function\r\n    dataItemColumnValueSetter : option to specify a custom column value setter function\r\n    clipboardCommandHandler : option to specify a custom handler for paste actions\r\n    includeHeaderWhenCopying : set to true and the plugin will take the name property from each column (which is usually what appears in your header) and put that as the first row of the text that's copied to the clipboard\r\n    bodyElement: option to specify a custom DOM element which to will be added the hidden textbox. It's useful if the grid is inside a modal dialog.\r\n    onCopyInit: optional handler to run when copy action initializes\r\n    onCopySuccess: optional handler to run when copy action is complete\r\n    newRowCreator: function to add rows to table if paste overflows bottom of table, if this function is not provided new rows will be ignored.\r\n    readOnlyMode: suppresses paste\r\n    headerColumnValueExtractor : option to specify a custom column header value extractor function\r\n*/\r\nexport class SlickCellExternalCopyManager implements SlickPlugin {\r\n  // --\r\n  // public API\r\n  pluginName = 'CellExternalCopyManager' as const;\r\n  onCopyCells = new SlickEvent<{ ranges: SlickRange_[]; }>('onCopyCells');\r\n  onCopyCancelled = new SlickEvent<{ ranges: SlickRange_[]; }>('onCopyCancelled');\r\n  onPasteCells = new SlickEvent<{ ranges: SlickRange_[]; }>('onPasteCells');\r\n\r\n  // --\r\n  // protected props\r\n  protected _grid!: SlickGrid;\r\n  protected _bodyElement: HTMLElement;\r\n  protected _copiedRanges: SlickRange_[] | null = null;\r\n  protected _clearCopyTI?: number;\r\n  protected _copiedCellStyle: string;\r\n  protected _copiedCellStyleLayerKey: string;\r\n  protected _onCopyInit?: () => void;\r\n  protected _onCopySuccess?: (rowCount: number) => void;\r\n  protected _options: ExcelCopyBufferOption;\r\n\r\n  protected keyCodes = {\r\n    'C': 67,\r\n    'V': 86,\r\n    'ESC': 27,\r\n    'INSERT': 45\r\n  };\r\n\r\n  constructor(options: ExcelCopyBufferOption) {\r\n    this._options = options || {};\r\n    this._copiedCellStyleLayerKey = this._options.copiedCellStyleLayerKey || 'copy-manager';\r\n    this._copiedCellStyle = this._options.copiedCellStyle || 'copied';\r\n    this._bodyElement = this._options.bodyElement || document.body;\r\n    this._onCopyInit = this._options.onCopyInit || undefined;\r\n    this._onCopySuccess = this._options.onCopySuccess || undefined;\r\n  }\r\n\r\n  init(grid: SlickGrid) {\r\n    this._grid = grid;\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n    this._grid.onKeyDown.subscribe(this.handleKeyDown.bind(this));\r\n\r\n    // we need a cell selection model\r\n    const cellSelectionModel = grid.getSelectionModel();\r\n    if (!cellSelectionModel) {\r\n      throw new Error('Selection model is mandatory for this plugin. Please set a selection model on the grid before adding this plugin: grid.setSelectionModel(new Slick.CellSelectionModel())');\r\n    }\r\n    // we give focus on the grid when a selection is done on it.\r\n    // without this, if the user selects a range of cell without giving focus on a particular cell, the grid doesn't get the focus and key stroke handles (ctrl+c) don't work\r\n    cellSelectionModel.onSelectedRangesChanged.subscribe(() => {\r\n      if (!this._grid.getEditorLock().isActive()) {\r\n        this._grid.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  destroy() {\r\n    this._grid.onKeyDown.unsubscribe(this.handleKeyDown.bind(this));\r\n  }\r\n\r\n  protected getHeaderValueForColumn(columnDef: Column): string {\r\n    if (this._options.headerColumnValueExtractor) {\r\n      const val = Utils.getHtmlStringOutput(this._options.headerColumnValueExtractor(columnDef));\r\n      if (val) {\r\n        return val;\r\n      }\r\n    }\r\n\r\n    return Utils.getHtmlStringOutput(columnDef.name || '');\r\n  }\r\n\r\n  protected getDataItemValueForColumn(item: any, columnDef: Column, event: SlickEventData): string {\r\n    if (typeof this._options.dataItemColumnValueExtractor === 'function') {\r\n      const val = this._options.dataItemColumnValueExtractor(item, columnDef) as string | null;\r\n      if (val) {\r\n        return val;\r\n      }\r\n    }\r\n\r\n    let retVal = '';\r\n\r\n    // if a custom getter is not defined, we call serializeValue of the editor to serialize\r\n    if (columnDef?.editor) {\r\n      const tmpP = document.createElement('p');\r\n      const editor = new (columnDef.editor as any)({\r\n        container: tmpP,  // a dummy container\r\n        column: columnDef,\r\n        event,\r\n        position: { top: 0, left: 0 },  // a dummy position required by some editors\r\n        grid: this._grid,\r\n      });\r\n      editor.loadValue(item);\r\n      retVal = editor.serializeValue();\r\n      editor.destroy();\r\n      tmpP.remove();\r\n    } else {\r\n      retVal = item[columnDef.field || ''];\r\n    }\r\n\r\n    return retVal;\r\n  }\r\n\r\n  protected setDataItemValueForColumn(item: any, columnDef: Column, value: string): null | string | void {\r\n    if (columnDef.denyPaste) {\r\n      return null;\r\n    }\r\n\r\n    if (this._options.dataItemColumnValueSetter) {\r\n      return this._options.dataItemColumnValueSetter(item, columnDef, value) as string;\r\n    }\r\n\r\n    // if a custom setter is not defined, we call applyValue of the editor to unserialize\r\n    if (columnDef.editor) {\r\n      const tmpDiv = document.createElement('div');\r\n      const editor = new (columnDef.editor as any)({\r\n        container: tmpDiv, // a dummy container\r\n        column: columnDef,\r\n        position: { top: 0, left: 0 },  // a dummy position required by some editors\r\n        grid: this._grid\r\n      });\r\n      editor.loadValue(item);\r\n      editor.applyValue(item, value);\r\n      editor.destroy();\r\n      tmpDiv.remove();\r\n    } else {\r\n      item[columnDef.field] = value;\r\n    }\r\n  }\r\n\r\n\r\n  protected _createTextBox(innerText: string) {\r\n    const scrollPos = document.documentElement.scrollTop || document.body.scrollTop;\r\n    const ta = document.createElement('textarea');\r\n    ta.style.position = 'absolute';\r\n    ta.style.opacity = '0';\r\n    ta.value = innerText;\r\n    ta.style.top = `${scrollPos}px`;\r\n    this._bodyElement.appendChild(ta);\r\n    ta.select();\r\n\r\n    return ta;\r\n  }\r\n\r\n  protected _decodeTabularData(grid: SlickGrid, ta: HTMLTextAreaElement) {\r\n    const columns = grid.getColumns();\r\n    const clipText = ta.value;\r\n    const clipRows = clipText.split(/[\\n\\f\\r]/);\r\n    // trim trailing CR if present\r\n    if (clipRows[clipRows.length - 1] === '') {\r\n      clipRows.pop();\r\n    }\r\n\r\n    let j = 0;\r\n    const clippedRange: any[] = [];\r\n\r\n    this._bodyElement.removeChild(ta);\r\n    for (let i = 0; i < clipRows.length; i++) {\r\n      if (clipRows[i] !== '') {\r\n        clippedRange[j++] = clipRows[i].split('\\t');\r\n      } else {\r\n        clippedRange[j++] = [''];\r\n      }\r\n    }\r\n    const selectedCell = grid.getActiveCell();\r\n    const ranges = grid.getSelectionModel()?.getSelectedRanges();\r\n    const selectedRange = ranges && ranges.length ? ranges[0] : null;   // pick only one selection\r\n    let activeRow: number;\r\n    let activeCell: number;\r\n\r\n    if (selectedRange) {\r\n      activeRow = selectedRange.fromRow;\r\n      activeCell = selectedRange.fromCell;\r\n    } else if (selectedCell) {\r\n      activeRow = selectedCell.row;\r\n      activeCell = selectedCell.cell;\r\n    } else {\r\n      // we don't know where to paste\r\n      return;\r\n    }\r\n\r\n    let oneCellToMultiple = false;\r\n    let destH = clippedRange.length;\r\n    let destW = clippedRange.length ? clippedRange[0].length : 0;\r\n    if (clippedRange.length === 1 && clippedRange[0].length === 1 && selectedRange) {\r\n      oneCellToMultiple = true;\r\n      destH = selectedRange.toRow - selectedRange.fromRow + 1;\r\n      destW = selectedRange.toCell - selectedRange.fromCell + 1;\r\n    }\r\n    const availableRows = (grid.getData() as any[]).length - (activeRow || 0);\r\n    let addRows = 0;\r\n\r\n    // ignore new rows if we don't have a \"newRowCreator\"\r\n    if (availableRows < destH && typeof this._options.newRowCreator === 'function') {\r\n      const d = grid.getData<any[]>();\r\n      for (addRows = 1; addRows <= destH - availableRows; addRows++) {\r\n        d.push({});\r\n      }\r\n      grid.setData(d);\r\n      grid.render();\r\n    }\r\n\r\n    const overflowsBottomOfGrid = (activeRow || 0) + destH > grid.getDataLength();\r\n    if (this._options.newRowCreator && overflowsBottomOfGrid) {\r\n      const newRowsNeeded = (activeRow || 0) + destH - grid.getDataLength();\r\n      this._options.newRowCreator(newRowsNeeded);\r\n    }\r\n\r\n    const clipCommand: ExternalCopyClipCommand = {\r\n      isClipboardCommand: true,\r\n      clippedRange,\r\n      oldValues: [],\r\n      cellExternalCopyManager: this,\r\n      _options: this._options,\r\n      setDataItemValueForColumn: this.setDataItemValueForColumn.bind(this),\r\n      markCopySelection: this.markCopySelection.bind(this),\r\n      oneCellToMultiple,\r\n      activeRow,\r\n      activeCell,\r\n      destH,\r\n      destW,\r\n      maxDestY: grid.getDataLength(),\r\n      maxDestX: grid.getColumns().length,\r\n      h: 0,\r\n      w: 0,\r\n      execute: () => {\r\n        clipCommand.h = 0;\r\n        for (let y = 0; y < clipCommand.destH; y++) {\r\n          clipCommand.oldValues[y] = [];\r\n          clipCommand.w = 0;\r\n          clipCommand.h++;\r\n          let xOffset = 0; // the x offset for hidden col\r\n\r\n          for (let x = 0; x < clipCommand.destW; x++) {\r\n            const desty = activeRow + y;\r\n            const destx = activeCell + x;\r\n            const column = columns[destx];\r\n\r\n            // paste on hidden column will be skipped, but we need to paste 1 cell further on X axis\r\n            // we'll increase our X and increase the offset`\r\n            if (column.hidden) {\r\n              clipCommand.destW++;\r\n              xOffset++;\r\n              continue;\r\n            }\r\n            clipCommand.w++;\r\n\r\n            if (desty < clipCommand.maxDestY && destx < clipCommand.maxDestX) {\r\n              const dt = grid.getDataItem(desty);\r\n\r\n              clipCommand.oldValues[y][x - xOffset] = dt[column['field']];\r\n              if (oneCellToMultiple) {\r\n                clipCommand.setDataItemValueForColumn(dt, column, clippedRange[0][0]);\r\n              } else {\r\n                clipCommand.setDataItemValueForColumn(dt, column, clippedRange[y] ? clippedRange[y][x - xOffset] : '');\r\n              }\r\n              grid.updateCell(desty, destx);\r\n              grid.onCellChange.notify({\r\n                row: desty,\r\n                cell: destx,\r\n                item: dt,\r\n                grid,\r\n                column: {} as Column\r\n              });\r\n            }\r\n          }\r\n        }\r\n\r\n        const bRange = new SlickRange(\r\n          activeRow,\r\n          activeCell,\r\n          activeRow + clipCommand.h - 1,\r\n          activeCell + clipCommand.w - 1\r\n        );\r\n\r\n        this.markCopySelection([bRange]);\r\n        grid.getSelectionModel()?.setSelectedRanges([bRange]);\r\n        this.onPasteCells.notify({ ranges: [bRange] });\r\n      },\r\n      undo: () => {\r\n        for (let y = 0; y < clipCommand.destH; y++) {\r\n          for (let x = 0; x < clipCommand.destW; x++) {\r\n            const desty = activeRow + y;\r\n            const destx = activeCell + x;\r\n\r\n            if (desty < clipCommand.maxDestY && destx < clipCommand.maxDestX) {\r\n              const dt = grid.getDataItem(desty);\r\n              if (oneCellToMultiple) {\r\n                clipCommand.setDataItemValueForColumn(dt, columns[destx], clipCommand.oldValues[0][0]);\r\n              } else {\r\n                clipCommand.setDataItemValueForColumn(dt, columns[destx], clipCommand.oldValues[y][x]);\r\n              }\r\n              grid.updateCell(desty, destx);\r\n              grid.onCellChange.notify({\r\n                row: desty,\r\n                cell: destx,\r\n                item: dt,\r\n                grid,\r\n                column: {} as Column\r\n              });\r\n            }\r\n          }\r\n        }\r\n\r\n        const bRange = new SlickRange(\r\n          activeRow,\r\n          activeCell,\r\n          activeRow + clipCommand.h - 1,\r\n          activeCell + clipCommand.w - 1\r\n        );\r\n\r\n        this.markCopySelection([bRange]);\r\n        grid.getSelectionModel()?.setSelectedRanges([bRange]);\r\n        if (typeof this._options.onPasteCells === 'function') {\r\n          this.onPasteCells.notify({ ranges: [bRange] });\r\n        }\r\n\r\n        if (addRows > 1) {\r\n          const d = grid.getData<any[]>();\r\n          for (; addRows > 1; addRows--) {\r\n            d.splice(d.length - 1, 1);\r\n          }\r\n          grid.setData(d);\r\n          grid.render();\r\n        }\r\n      }\r\n    };\r\n\r\n    if (typeof this._options.clipboardCommandHandler === 'function') {\r\n      this._options.clipboardCommandHandler(clipCommand);\r\n    } else {\r\n      clipCommand.execute();\r\n    }\r\n  }\r\n\r\n  protected handleKeyDown(e: SlickEventData): boolean | void {\r\n    let ranges: SlickRange_[];\r\n    if (!this._grid.getEditorLock().isActive() || this._grid.getOptions().autoEdit) {\r\n      if (e.which === this.keyCodes.ESC) {\r\n        if (this._copiedRanges) {\r\n          e.preventDefault();\r\n          this.clearCopySelection();\r\n          this.onCopyCancelled.notify({ ranges: this._copiedRanges });\r\n          this._copiedRanges = null;\r\n        }\r\n      }\r\n\r\n      if ((e.which === this.keyCodes.C || e.which === this.keyCodes.INSERT) && (e.ctrlKey || e.metaKey) && !e.shiftKey) {    // CTRL+C or CTRL+INS\r\n        if (typeof this._onCopyInit === 'function') {\r\n          this._onCopyInit.call(this);\r\n        }\r\n        ranges = this._grid.getSelectionModel()?.getSelectedRanges() ?? [];\r\n        if (ranges.length !== 0) {\r\n          this._copiedRanges = ranges;\r\n          this.markCopySelection(ranges);\r\n          this.onCopyCells.notify({ ranges });\r\n\r\n          const columns = this._grid.getColumns();\r\n          let clipText = '';\r\n\r\n          for (let rg = 0; rg < ranges.length; rg++) {\r\n            const range = ranges[rg];\r\n            const clipTextRows: string[] = [];\r\n            for (let i = range.fromRow; i < range.toRow + 1; i++) {\r\n              const clipTextCells: string[] = [];\r\n              const dt = this._grid.getDataItem(i);\r\n\r\n              if (clipTextRows.length === 0 && this._options.includeHeaderWhenCopying) {\r\n                const clipTextHeaders: string[] = [];\r\n                for (let j = range.fromCell; j < range.toCell + 1; j++) {\r\n                  const colName: string = columns[j].name instanceof HTMLElement\r\n                    ? (columns[j].name as HTMLElement).innerHTML\r\n                    : columns[j].name as string;\r\n                  if (colName.length > 0 && !columns[j].hidden) {\r\n                    clipTextHeaders.push(this.getHeaderValueForColumn(columns[j]) || '');\r\n                  }\r\n                }\r\n                clipTextRows.push(clipTextHeaders.join('\\t'));\r\n              }\r\n\r\n              for (let j = range.fromCell; j < range.toCell + 1; j++) {\r\n                const colName: string = columns[j].name instanceof HTMLElement\r\n                  ? (columns[j].name as HTMLElement).innerHTML\r\n                  : columns[j].name as string;\r\n                if (colName.length > 0 && !columns[j].hidden) {\r\n                  clipTextCells.push(this.getDataItemValueForColumn(dt, columns[j], e));\r\n                }\r\n              }\r\n              clipTextRows.push(clipTextCells.join('\\t'));\r\n            }\r\n            clipText += clipTextRows.join('\\r\\n') + '\\r\\n';\r\n          }\r\n\r\n          if ((window as any).clipboardData) {\r\n            (window as any).clipboardData.setData('Text', clipText);\r\n            return true;\r\n          }\r\n          else {\r\n            const focusEl = document.activeElement as HTMLElement;\r\n            const ta = this._createTextBox(clipText);\r\n            ta.focus();\r\n\r\n            window.setTimeout(() => {\r\n              this._bodyElement.removeChild(ta);\r\n              // restore focus when possible\r\n              focusEl\r\n                ? focusEl.focus()\r\n                : console.log('No element to restore focus to after copy?');\r\n            }, this._options?.clipboardPasteDelay ?? CLIPBOARD_PASTE_DELAY);\r\n\r\n            if (typeof this._onCopySuccess === 'function') {\r\n              let rowCount = 0;\r\n              // If it's cell selection, use the toRow/fromRow fields\r\n              if (ranges.length === 1) {\r\n                rowCount = (ranges[0].toRow + 1) - ranges[0].fromRow;\r\n              } else {\r\n                rowCount = ranges.length;\r\n              }\r\n              this._onCopySuccess(rowCount);\r\n            }\r\n\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!this._options.readOnlyMode && (\r\n        (e.which === this.keyCodes.V && (e.ctrlKey || e.metaKey) && !e.shiftKey)\r\n        || (e.which === this.keyCodes.INSERT && e.shiftKey && !e.ctrlKey)\r\n      )) {    // CTRL+V or Shift+INS\r\n        const focusEl = document.activeElement as HTMLElement;\r\n        const ta = this._createTextBox('');\r\n        window.setTimeout(() => {\r\n          this._decodeTabularData(this._grid, ta);\r\n          // restore focus when possible\r\n          focusEl?.focus();\r\n        }, this._options?.clipboardPasteDelay ?? CLIPBOARD_PASTE_DELAY);\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  protected markCopySelection(ranges: SlickRange_[]) {\r\n    this.clearCopySelection();\r\n\r\n    const columns = this._grid.getColumns();\r\n    const hash: CssStyleHash = {};\r\n    for (let i = 0; i < ranges.length; i++) {\r\n      for (let j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {\r\n        hash[j] = {};\r\n        for (let k = ranges[i].fromCell; k <= ranges[i].toCell && k < columns.length; k++) {\r\n          hash[j][columns[k].id] = this._copiedCellStyle;\r\n        }\r\n      }\r\n    }\r\n    this._grid.setCellCssStyles(this._copiedCellStyleLayerKey, hash);\r\n    window.clearTimeout(this._clearCopyTI);\r\n    this._clearCopyTI = window.setTimeout(() => {\r\n      this.clearCopySelection();\r\n    }, this._options?.clearCopySelectionDelay || CLEAR_COPY_SELECTION_DELAY);\r\n  }\r\n\r\n  clearCopySelection() {\r\n    this._grid.removeCellCssStyles(this._copiedCellStyleLayerKey);\r\n  }\r\n\r\n  setIncludeHeaderWhenCopying(includeHeaderWhenCopying: boolean) {\r\n    this._options.includeHeaderWhenCopying = includeHeaderWhenCopying;\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      CellExternalCopyManager: SlickCellExternalCopyManager\r\n    }\r\n  });\r\n}\r\n", "import {\r\n  BindingEventService as BindingEventService_,\r\n  SlickEvent as SlickEvent_,\r\n  SlickEventData as SlickEventData_,\r\n  SlickEventHandler as SlickEventHandler_,\r\n  Utils as Utils_\r\n} from '../slick.core.js';\r\nimport type {\r\n  CellMenuOption,\r\n  Column,\r\n  DOMMouseOrTouchEvent,\r\n  GridOption,\r\n  MenuCommandItem,\r\n  MenuCommandItemCallbackArgs,\r\n  MenuFromCellCallbackArgs,\r\n  MenuOptionItem,\r\n  MenuOptionItemCallbackArgs,\r\n  MenuType,\r\n  SlickPlugin\r\n} from '../models/index.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst SlickEventData = IIFE_ONLY ? Slick.EventData : SlickEventData_;\r\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : SlickEventHandler_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/**\r\n * A plugin to add Menu on a Cell click (click on the cell that has the cellMenu object defined)\r\n * The \"cellMenu\" is defined in a Column Definition object\r\n * Similar to the ContextMenu plugin (could be used in combo),\r\n * except that it subscribes to the cell \"onClick\" event (regular mouse click or touch).\r\n *\r\n * A general use of this plugin is for an Action Dropdown Menu to do certain things on the row that was clicked\r\n * You can use it to change the cell data property through a list of Options AND/OR through a list of Commands.\r\n *\r\n * USAGE:\r\n *\r\n * Add the slick.cellMenu.(js|css) files and register it with the grid.\r\n *\r\n * To specify a menu in a column header, extend the column definition like so:\r\n * var cellMenuPlugin = new Slick.Plugins.CellMenu(columns, grid, options);\r\n *\r\n * Available cellMenu options, by defining a cellMenu object:\r\n *\r\n *  var columns = [\r\n *    {\r\n *      id: \"action\", name: \"Action\", field: \"action\", formatter: fakeButtonFormatter,\r\n *      cellMenu: {\r\n *        optionTitle: \"Change Effort Driven\",\r\n *        optionItems: [\r\n *          { option: true, title: \"True\", iconCssClass: 'checkmark' },\r\n *          { option: false, title: \"False\" }\r\n *        ],\r\n *        commandTitle: \"Commands\",\r\n *        commandItems: [\r\n *          { command: \"delete-row\", title: \"Delete Row\", iconCssClass: \"sgi sgi-close\", cssClass: 'bold', textCssClass: \"red\" },\r\n *          { divider: true },\r\n *          \"divider\" // you can pass \"divider\" as a string or an object\r\n *          { command: \"help\", title: \"Help\", iconCssClass: \"icon-help\" },\r\n *          { command: \"help\", title: \"Disabled Command\", disabled: true },\r\n *        ],\r\n *      }\r\n *    }\r\n *  ];\r\n *\r\n *\r\n * Available cellMenu properties:\r\n *    commandTitle:               Title of the Command section (optional)\r\n *    commandItems:               Array of Command item objects (command/title pair)\r\n *    optionTitle:                Title of the Option section (optional)\r\n *    optionItems:                Array of Options item objects (option/title pair)\r\n *    hideCloseButton:            Hide the Close button on top right (defaults to false)\r\n *    hideCommandSection:         Hide the Commands section even when the commandItems array is filled (defaults to false)\r\n *    hideMenuOnScroll:           Do we want to hide the Cell Menu when a scrolling event occurs (defaults to true)?\r\n *    hideOptionSection:          Hide the Options section even when the optionItems array is filled (defaults to false)\r\n *    maxHeight:                  Maximum height that the drop menu will have, can be a number (250) or text (\"none\")\r\n *    width:                      Width that the drop menu will have, can be a number (250) or text (defaults to \"auto\")\r\n *    autoAdjustDrop:             Auto-align dropup or dropdown menu to the left or right depending on grid viewport available space (defaults to true)\r\n *    autoAdjustDropOffset:       Optionally add an offset to the auto-align of the drop menu (defaults to 0)\r\n *    autoAlignSide:              Auto-align drop menu to the left or right depending on grid viewport available space (defaults to true)\r\n *    autoAlignSideOffset:        Optionally add an offset to the left/right side auto-align (defaults to 0)\r\n *    menuUsabilityOverride:      Callback method that user can override the default behavior of enabling/disabling the menu from being usable (must be combined with a custom formatter)\r\n *    subItemChevronClass:        CSS class that can be added on the right side of a sub-item parent (typically a chevron-right icon)\r\n *    subMenuOpenByEvent:         defaults to \"mouseover\", what event type shoud we use to open sub-menu(s), 2 options are available: \"mouseover\" or \"click\"\r\n *\r\n *\r\n * Available menu Command/Option item properties:\r\n *    action:                     Optionally define a callback function that gets executed when item is chosen (and/or use the onCommand event)\r\n *    command:                    A command identifier to be passed to the onCommand event handlers (when using \"commandItems\").\r\n *    option:                     An option to be passed to the onOptionSelected event handlers (when using \"optionItems\").\r\n *    title:                      Menu item text label.\r\n *    divider:                    Boolean which tells if the current item is a divider, not an actual command. You could also pass \"divider\" instead of an object\r\n *    disabled:                   Whether the item/command is disabled.\r\n *    hidden:                     Whether the item/command is hidden.\r\n *    subMenuTitle:               Optional sub-menu title that will shows up when sub-menu commmands/options list is opened\r\n *    subMenuTitleCssClass:       Optional sub-menu title CSS class to use with `subMenuTitle`\r\n *    tooltip:                    Item tooltip.\r\n *    cssClass:                   A CSS class to be added to the menu item container.\r\n *    iconCssClass:               A CSS class to be added to the menu item icon.\r\n *    textCssClass:               A CSS class to be added to the menu item text.\r\n *    iconImage:                  A url to the icon image.\r\n *    itemVisibilityOverride:     Callback method that user can override the default behavior of showing/hiding an item from the list\r\n *    itemUsabilityOverride:      Callback method that user can override the default behavior of enabling/disabling an item from the list\r\n *\r\n *\r\n * The plugin exposes the following events:\r\n *\r\n *    onAfterMenuShow: Fired after the menu is shown.  You can customize the menu or dismiss it by returning false.\r\n *        Event args:\r\n *            cell:         Cell or column index\r\n *            row:          Row index\r\n *            grid:         Reference to the grid.\r\n *\r\n *    onBeforeMenuShow: Fired before the menu is shown.  You can customize the menu or dismiss it by returning false.\r\n *        Event args:\r\n *            cell:         Cell or column index\r\n *            row:          Row index\r\n *            grid:         Reference to the grid.\r\n *\r\n *    onBeforeMenuClose: Fired when the menu is closing.\r\n *        Event args:\r\n *            cell:         Cell or column index\r\n *            row:          Row index\r\n *            grid:         Reference to the grid.\r\n *            menu:         Menu DOM element\r\n *\r\n *    onCommand: Fired on menu option clicked from the Command items list\r\n *        Event args:\r\n *            cell:         Cell or column index\r\n *            row:          Row index\r\n *            grid:         Reference to the grid.\r\n *            command:      Menu command identified.\r\n *            item:         Menu item selected\r\n *            column:    Cell Column definition\r\n *            dataContext:  Cell Data Context (data object)\r\n *\r\n *    onOptionSelected: Fired on menu option clicked from the Option items list\r\n *        Event args:\r\n *            cell:         Cell or column index\r\n *            row:          Row index\r\n *            grid:         Reference to the grid.\r\n *            option:       Menu option selected.\r\n *            item:         Menu item selected\r\n *            column:    Cell Column definition\r\n *            dataContext:  Cell Data Context (data object)\r\n *\r\n *\r\n * @param options {Object} Cell Menu Options\r\n * @class Slick.Plugins.CellMenu\r\n */\r\nexport class SlickCellMenu implements SlickPlugin {\r\n  // --\r\n  // public API\r\n  pluginName = 'CellMenu' as const;\r\n  onAfterMenuShow = new SlickEvent<MenuFromCellCallbackArgs>('onAfterMenuShow');\r\n  onBeforeMenuShow = new SlickEvent<MenuFromCellCallbackArgs>('onBeforeMenuShow');\r\n  onBeforeMenuClose = new SlickEvent<MenuFromCellCallbackArgs>('onBeforeMenuClose');\r\n  onCommand = new SlickEvent<MenuCommandItemCallbackArgs>('onCommand');\r\n  onOptionSelected = new SlickEvent<MenuOptionItemCallbackArgs>('onOptionSelected');\r\n\r\n  // --\r\n  // protected props\r\n  protected _bindingEventService = new BindingEventService();\r\n  protected _cellMenuProperties: CellMenuOption;\r\n  protected _currentCell = -1;\r\n  protected _currentRow = -1;\r\n  protected _grid!: SlickGrid;\r\n  protected _gridOptions!: GridOption;\r\n  protected _gridUid = '';\r\n  protected _handler = new EventHandler();\r\n  protected _commandTitleElm?: HTMLSpanElement;\r\n  protected _optionTitleElm?: HTMLSpanElement;\r\n  protected _lastMenuTypeClicked = '';\r\n  protected _menuElm?: HTMLDivElement | null;\r\n  protected _subMenuParentId = '';\r\n  protected _defaults: CellMenuOption = {\r\n    autoAdjustDrop: true,     // dropup/dropdown\r\n    autoAlignSide: true,      // left/right\r\n    autoAdjustDropOffset: 0,\r\n    autoAlignSideOffset: 0,\r\n    hideMenuOnScroll: true,\r\n    maxHeight: 'none',\r\n    width: 'auto',\r\n    subMenuOpenByEvent: 'mouseover',\r\n  };\r\n\r\n  constructor(optionProperties: Partial<CellMenuOption>) {\r\n    this._cellMenuProperties = Utils.extend({}, this._defaults, optionProperties);\r\n  }\r\n\r\n  init(grid: SlickGrid) {\r\n    this._grid = grid;\r\n    this._gridOptions = grid.getOptions();\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n    this._gridUid = grid?.getUID() || '';\r\n    this._handler.subscribe(this._grid.onClick as any, this.handleCellClick.bind(this));\r\n    if (this._cellMenuProperties.hideMenuOnScroll) {\r\n      this._handler.subscribe(this._grid.onScroll, this.closeMenu.bind(this));\r\n    }\r\n  }\r\n\r\n  setOptions(newOptions: Partial<CellMenuOption>) {\r\n    this._cellMenuProperties = Utils.extend({}, this._cellMenuProperties, newOptions);\r\n  }\r\n\r\n  destroy() {\r\n    this.onAfterMenuShow.unsubscribe();\r\n    this.onBeforeMenuShow.unsubscribe();\r\n    this.onBeforeMenuClose.unsubscribe();\r\n    this.onCommand.unsubscribe();\r\n    this.onOptionSelected.unsubscribe();\r\n    this._handler.unsubscribeAll();\r\n    this._bindingEventService.unbindAll();\r\n    this._menuElm?.remove();\r\n    this._commandTitleElm = null as any;\r\n    this._optionTitleElm = null as any;\r\n    this._menuElm = null as any;\r\n  }\r\n\r\n  protected createParentMenu(e: DOMMouseOrTouchEvent<HTMLDivElement>) {\r\n    const cell = this._grid.getCellFromEvent(e);\r\n    this._currentCell = cell?.cell ?? 0;\r\n    this._currentRow = cell?.row ?? 0;\r\n    const columnDef = this._grid.getColumns()[this._currentCell];\r\n\r\n    const commandItems = this._cellMenuProperties.commandItems || [];\r\n    const optionItems = this._cellMenuProperties.optionItems || [];\r\n\r\n    // make sure there's at least something to show before creating the Cell Menu\r\n    if (!columnDef || !columnDef.cellMenu || (!commandItems.length && !optionItems.length)) {\r\n      return;\r\n    }\r\n\r\n    // delete any prior Cell Menu\r\n    this.closeMenu();\r\n\r\n    // Let the user modify the menu or cancel altogether,\r\n    // or provide alternative menu implementation.\r\n    if (this.onBeforeMenuShow.notify({\r\n      cell: this._currentCell,\r\n      row: this._currentRow,\r\n      grid: this._grid\r\n    }, e, this).getReturnValue() === false) {\r\n      return;\r\n    }\r\n\r\n    // create 1st parent menu container & reposition it\r\n    this._menuElm = this.createMenu(commandItems, optionItems);\r\n    this._menuElm.style.top = `${e.pageY + 5}px`;\r\n    this._menuElm.style.left = `${e.pageX}px`;\r\n    this._menuElm.style.display = 'block';\r\n    document.body.appendChild(this._menuElm);\r\n\r\n    if (this.onAfterMenuShow.notify({\r\n      cell: this._currentCell,\r\n      row: this._currentRow,\r\n      grid: this._grid\r\n    }, e, this).getReturnValue() === false) {\r\n      return;\r\n    }\r\n\r\n    return this._menuElm;\r\n  }\r\n\r\n  /**\r\n   * Create parent menu or sub-menu(s), a parent menu will start at level 0 while sub-menu(s) will be incremented\r\n   * @param commandItems - array of optional commands or dividers\r\n   * @param optionItems - array of optional options or dividers\r\n   * @param level - menu level\r\n   * @param item - command, option or divider\r\n   * @returns menu DOM element\r\n   */\r\n  protected createMenu(commandItems: Array<MenuCommandItem | 'divider'>, optionItems: Array<MenuOptionItem | 'divider'>, level = 0, item?: MenuCommandItem | MenuOptionItem | 'divider') {\r\n    const columnDef = this._grid.getColumns()[this._currentCell];\r\n    const dataContext = this._grid.getDataItem(this._currentRow);\r\n\r\n    // create a new cell menu\r\n    const maxHeight = isNaN(this._cellMenuProperties.maxHeight as number) ? this._cellMenuProperties.maxHeight : `${this._cellMenuProperties.maxHeight ?? 0}px`;\r\n    const width = isNaN(this._cellMenuProperties.width as number) ? this._cellMenuProperties.width : `${this._cellMenuProperties.maxWidth ?? 0}px`;\r\n\r\n    // to avoid having multiple sub-menu trees opened,\r\n    // we need to somehow keep trace of which parent menu the tree belongs to\r\n    // and we should keep ref of only the first sub-menu parent, we can use the command name (remove any whitespaces though)\r\n    const subMenuCommand = (item as MenuCommandItem)?.command;\r\n    let subMenuId = (level === 1 && subMenuCommand) ? subMenuCommand.replaceAll(' ', '') : '';\r\n    if (subMenuId) {\r\n      this._subMenuParentId = subMenuId;\r\n    }\r\n    if (level > 1) {\r\n      subMenuId = this._subMenuParentId;\r\n    }\r\n\r\n    const menuClasses = `slick-cell-menu slick-menu-level-${level} ${this._gridUid}`;\r\n    const bodyMenuElm = document.body.querySelector<HTMLDivElement>(`.slick-cell-menu.slick-menu-level-${level}${this.getGridUidSelector()}`);\r\n\r\n    // return menu/sub-menu if it's already opened unless we are on different sub-menu tree if so close them all\r\n    if (bodyMenuElm) {\r\n      if (bodyMenuElm.dataset.subMenuParent === subMenuId) {\r\n        return bodyMenuElm;\r\n      }\r\n      this.destroySubMenus();\r\n    }\r\n\r\n    const menuElm = document.createElement('div');\r\n    menuElm.className = menuClasses;\r\n    if (level > 0) {\r\n      menuElm.classList.add('slick-submenu');\r\n      if (subMenuId) {\r\n        menuElm.dataset.subMenuParent = subMenuId;\r\n      }\r\n    }\r\n    menuElm.ariaLabel = level > 1 ? 'SubMenu' : 'Cell Menu';\r\n    menuElm.role = 'menu';\r\n    if (width) {\r\n      menuElm.style.width = width as string;\r\n    }\r\n    if (maxHeight) {\r\n      menuElm.style.maxHeight = maxHeight as string;\r\n    }\r\n\r\n    menuElm.style.display = 'none';\r\n\r\n    let closeButtonElm: HTMLButtonElement | null = null;\r\n    if (level === 0) {\r\n      closeButtonElm = document.createElement('button');\r\n      closeButtonElm.type = 'button';\r\n      closeButtonElm.className = 'close';\r\n      closeButtonElm.dataset.dismiss = 'slick-cell-menu';\r\n      closeButtonElm.ariaLabel = 'Close';\r\n\r\n      const spanCloseElm = document.createElement('span');\r\n      spanCloseElm.className = 'close';\r\n      spanCloseElm.ariaHidden = 'true';\r\n      spanCloseElm.textContent = '\u00D7';\r\n      closeButtonElm.appendChild(spanCloseElm);\r\n    }\r\n\r\n    // -- Option List section\r\n    if (!this._cellMenuProperties.hideOptionSection && optionItems.length > 0) {\r\n      const optionMenuElm = document.createElement('div');\r\n      optionMenuElm.className = 'slick-cell-menu-option-list';\r\n      optionMenuElm.role = 'menu';\r\n\r\n      // when creating sub-menu add its sub-menu title when exists\r\n      if (item && level > 0) {\r\n        this.addSubMenuTitleWhenExists(item, optionMenuElm); // add sub-menu title when exists\r\n      }\r\n\r\n      if (closeButtonElm && !this._cellMenuProperties.hideCloseButton) {\r\n        this._bindingEventService.bind(closeButtonElm, 'click', this.handleCloseButtonClicked.bind(this) as EventListener);\r\n        menuElm.appendChild(closeButtonElm);\r\n      }\r\n      menuElm.appendChild(optionMenuElm);\r\n\r\n      this.populateCommandOrOptionItems(\r\n        'option',\r\n        this._cellMenuProperties,\r\n        optionMenuElm,\r\n        optionItems,\r\n        { cell: this._currentCell, row: this._currentRow, column: columnDef, dataContext, grid: this._grid, level }\r\n      );\r\n    }\r\n\r\n    // -- Command List section\r\n    if (!this._cellMenuProperties.hideCommandSection && commandItems.length > 0) {\r\n      const commandMenuElm = document.createElement('div');\r\n      commandMenuElm.className = 'slick-cell-menu-command-list';\r\n      commandMenuElm.role = 'menu';\r\n\r\n      // when creating sub-menu add its sub-menu title when exists\r\n      if (item && level > 0) {\r\n        this.addSubMenuTitleWhenExists(item, commandMenuElm); // add sub-menu title when exists\r\n      }\r\n\r\n      if (closeButtonElm && !this._cellMenuProperties.hideCloseButton && (optionItems.length === 0 || this._cellMenuProperties.hideOptionSection)) {\r\n        this._bindingEventService.bind(closeButtonElm, 'click', this.handleCloseButtonClicked.bind(this) as EventListener);\r\n        menuElm.appendChild(closeButtonElm);\r\n      }\r\n      menuElm.appendChild(commandMenuElm);\r\n\r\n      this.populateCommandOrOptionItems(\r\n        'command',\r\n        this._cellMenuProperties,\r\n        commandMenuElm,\r\n        commandItems,\r\n        { cell: this._currentCell, row: this._currentRow, column: columnDef, dataContext, grid: this._grid, level }\r\n      );\r\n    }\r\n\r\n    // increment level for possible next sub-menus if exists\r\n    level++;\r\n\r\n    return menuElm;\r\n  }\r\n\r\n  protected addSubMenuTitleWhenExists(item: MenuCommandItem | MenuOptionItem | 'divider', commandOrOptionMenu: HTMLDivElement) {\r\n    if (item !== 'divider' && item?.subMenuTitle) {\r\n      const subMenuTitleElm = document.createElement('div');\r\n      subMenuTitleElm.className = 'slick-menu-title';\r\n      subMenuTitleElm.textContent = item.subMenuTitle as string;\r\n      const subMenuTitleClass = item.subMenuTitleCssClass as string;\r\n      if (subMenuTitleClass) {\r\n        subMenuTitleElm.classList.add(...Utils.classNameToList(subMenuTitleClass));\r\n      }\r\n\r\n      commandOrOptionMenu.appendChild(subMenuTitleElm);\r\n    }\r\n  }\r\n\r\n  protected handleCloseButtonClicked(e: DOMMouseOrTouchEvent<HTMLButtonElement>) {\r\n    if (!e.defaultPrevented) {\r\n      this.closeMenu(e);\r\n    }\r\n  }\r\n\r\n  /** Close and destroy Cell Menu */\r\n  closeMenu(e?: DOMMouseOrTouchEvent<HTMLButtonElement | HTMLDivElement> | SlickEventData_, args?: MenuFromCellCallbackArgs) {\r\n    if (this._menuElm) {\r\n      if (this.onBeforeMenuClose.notify({\r\n        cell: args?.cell ?? 0,\r\n        row: args?.row ?? 0,\r\n        grid: this._grid,\r\n      }, e, this).getReturnValue() === false) {\r\n        return;\r\n      }\r\n      this._menuElm.remove();\r\n      this._menuElm = null;\r\n    }\r\n    this.destroySubMenus();\r\n  }\r\n\r\n  /** Destroy all parent menus and any sub-menus */\r\n  destroyAllMenus() {\r\n    this.destroySubMenus();\r\n\r\n    // remove all parent menu listeners before removing them from the DOM\r\n    this._bindingEventService.unbindAll('parent-menu');\r\n    document.querySelectorAll(`.slick-cell-menu${this.getGridUidSelector()}`)\r\n      .forEach(subElm => subElm.remove());\r\n  }\r\n\r\n  /** Close and destroy all previously opened sub-menus */\r\n  destroySubMenus() {\r\n    this._bindingEventService.unbindAll('sub-menu');\r\n    document.querySelectorAll(`.slick-cell-menu.slick-submenu${this.getGridUidSelector()}`)\r\n      .forEach(subElm => subElm.remove());\r\n  }\r\n\r\n  protected repositionSubMenu(item: MenuCommandItem | MenuOptionItem | 'divider', type: MenuType, level: number, e: DOMMouseOrTouchEvent<HTMLDivElement>) {\r\n    // when we're clicking a grid cell OR our last menu type (command/option) differs then we know that we need to start fresh and close any sub-menus that might still be open\r\n    if (e.target.classList.contains('slick-cell') || this._lastMenuTypeClicked !== type) {\r\n      this.destroySubMenus();\r\n    }\r\n\r\n    // creating sub-menu, we'll also pass level & the item object since we might have \"subMenuTitle\" to show\r\n    const subMenuElm = this.createMenu((item as MenuCommandItem)?.commandItems || [], (item as MenuOptionItem)?.optionItems || [], level + 1, item);\r\n    subMenuElm.style.display = 'block';\r\n    document.body.appendChild(subMenuElm);\r\n    this.repositionMenu(e, subMenuElm);\r\n  }\r\n\r\n  /**\r\n   * Reposition the menu drop (up/down) and the side (left/right)\r\n   * @param {*} event\r\n   */\r\n  repositionMenu(e: DOMMouseOrTouchEvent<HTMLDivElement>, menuElm: HTMLElement) {\r\n    const isSubMenu = menuElm.classList.contains('slick-submenu');\r\n    const parentElm = isSubMenu\r\n      ? e.target.closest('.slick-cell-menu-item') as HTMLDivElement\r\n      : e.target.closest('.slick-cell') as HTMLDivElement;\r\n\r\n    if (menuElm && parentElm) {\r\n      const parentOffset = Utils.offset(parentElm);\r\n      let menuOffsetLeft = parentElm ? parentOffset?.left ?? 0 : e?.pageX ?? 0;\r\n      let menuOffsetTop = parentElm ? parentOffset?.top ?? 0 : e?.pageY ?? 0;\r\n      const parentCellWidth = parentElm?.offsetWidth || 0;\r\n      const menuHeight = menuElm?.offsetHeight ?? 0;\r\n      const menuWidth = Number(menuElm?.offsetWidth ?? this._cellMenuProperties.width ?? 0);\r\n      const rowHeight = this._gridOptions.rowHeight;\r\n      const dropOffset = Number(this._cellMenuProperties.autoAdjustDropOffset || 0);\r\n      const sideOffset = Number(this._cellMenuProperties.autoAlignSideOffset || 0);\r\n\r\n      // if autoAdjustDrop is enable, we first need to see what position the drop will be located (defaults to bottom)\r\n      // without necessary toggling it's position just yet, we just want to know the future position for calculation\r\n      if (this._cellMenuProperties.autoAdjustDrop) {\r\n        // since we reposition menu below slick cell, we need to take it in consideration and do our calculation from that element\r\n        const spaceBottom = Utils.calculateAvailableSpace(parentElm).bottom;\r\n        const spaceTop = Utils.calculateAvailableSpace(parentElm).top;\r\n        const spaceBottomRemaining = spaceBottom + dropOffset - rowHeight!;\r\n        const spaceTopRemaining = spaceTop - dropOffset + rowHeight!;\r\n        const dropPosition = (spaceBottomRemaining < menuHeight && spaceTopRemaining > spaceBottomRemaining) ? 'top' : 'bottom';\r\n        if (dropPosition === 'top') {\r\n          menuElm.classList.remove('dropdown');\r\n          menuElm.classList.add('dropup');\r\n          if (isSubMenu) {\r\n            menuOffsetTop -= (menuHeight - dropOffset - parentElm.clientHeight);\r\n          } else {\r\n            menuOffsetTop -= menuHeight - dropOffset;\r\n          }\r\n        } else {\r\n          menuElm.classList.remove('dropup');\r\n          menuElm.classList.add('dropdown');\r\n          if (isSubMenu) {\r\n            menuOffsetTop += dropOffset;\r\n          } else {\r\n            menuOffsetTop += rowHeight! + dropOffset;\r\n          }\r\n        }\r\n      }\r\n\r\n      // when auto-align is set, it will calculate whether it has enough space in the viewport to show the drop menu on the right (default)\r\n      // if there isn't enough space on the right, it will automatically align the drop menu to the left (defaults to the right)\r\n      // to simulate an align left, we actually need to know the width of the drop menu\r\n      if (this._cellMenuProperties.autoAlignSide) {\r\n        const gridPos = this._grid.getGridPosition();\r\n        let subMenuPosCalc = menuOffsetLeft + Number(menuWidth); // calculate coordinate at caller element far right\r\n        if (isSubMenu) {\r\n          subMenuPosCalc += parentElm.clientWidth;\r\n        }\r\n        const browserWidth = document.documentElement.clientWidth;\r\n        const dropSide = (subMenuPosCalc >= gridPos.width || subMenuPosCalc >= browserWidth) ? 'left' : 'right';\r\n        if (dropSide === 'left') {\r\n          menuElm.classList.remove('dropright');\r\n          menuElm.classList.add('dropleft');\r\n          if (isSubMenu) {\r\n            menuOffsetLeft -= menuWidth - sideOffset;\r\n          } else {\r\n            menuOffsetLeft -= menuWidth - parentCellWidth - sideOffset;\r\n          }\r\n        } else {\r\n          menuElm.classList.remove('dropleft');\r\n          menuElm.classList.add('dropright');\r\n          if (isSubMenu) {\r\n            menuOffsetLeft += sideOffset + parentElm.offsetWidth;\r\n          } else {\r\n            menuOffsetLeft += sideOffset;\r\n          }\r\n        }\r\n      }\r\n\r\n      // ready to reposition the menu\r\n      menuElm.style.top = `${menuOffsetTop}px`;\r\n      menuElm.style.left = `${menuOffsetLeft}px`;\r\n    }\r\n  }\r\n\r\n  protected getGridUidSelector() {\r\n    const gridUid = this._grid.getUID() || '';\r\n    return gridUid ? `.${gridUid}` : '';\r\n  }\r\n\r\n  protected handleCellClick(evt: SlickEventData_ | DOMMouseOrTouchEvent<HTMLDivElement>, args: MenuCommandItemCallbackArgs) {\r\n    this.destroyAllMenus(); // make there's only 1 parent menu opened at a time\r\n    const e = (evt instanceof SlickEventData) ? evt.getNativeEvent<DOMMouseOrTouchEvent<HTMLDivElement>>() : evt;\r\n    const cell = this._grid.getCellFromEvent(e);\r\n\r\n    if (cell) {\r\n      const dataContext = this._grid.getDataItem(cell.row);\r\n      const columnDef = this._grid.getColumns()[cell.cell];\r\n\r\n      // prevent event from bubbling but only on column that has a cell menu defined\r\n      if (columnDef?.cellMenu) {\r\n        e.preventDefault();\r\n      }\r\n\r\n      // merge the cellMenu of the column definition with the default properties\r\n      this._cellMenuProperties = Utils.extend({}, this._cellMenuProperties, columnDef.cellMenu);\r\n\r\n      // run the override function (when defined), if the result is false it won't go further\r\n      args = args || {};\r\n      args.column = columnDef;\r\n      args.dataContext = dataContext;\r\n      args.grid = this._grid;\r\n      if (!this.runOverrideFunctionWhenExists<typeof args>(this._cellMenuProperties.menuUsabilityOverride, args)) {\r\n        return;\r\n      }\r\n\r\n      // create the DOM element\r\n      this._menuElm = this.createParentMenu(e);\r\n\r\n      // reposition the menu to where the user clicked\r\n      if (this._menuElm) {\r\n        this.repositionMenu(e, this._menuElm);\r\n        this._menuElm.setAttribute('aria-expanded', 'true');\r\n        this._menuElm.style.display = 'block';\r\n      }\r\n\r\n      // Hide the menu on outside click.\r\n      this._bindingEventService.bind(document.body, 'mousedown', this.handleBodyMouseDown.bind(this) as EventListener);\r\n    }\r\n  }\r\n\r\n  /** When users click outside the Cell Menu, we will typically close the Cell Menu (and any sub-menus) */\r\n  protected handleBodyMouseDown(e: DOMMouseOrTouchEvent<HTMLDivElement>) {\r\n    // did we click inside the menu or any of its sub-menu(s)\r\n    let isMenuClicked = false;\r\n    if (this._menuElm?.contains(e.target)) {\r\n      isMenuClicked = true;\r\n    }\r\n    if (!isMenuClicked) {\r\n      document\r\n        .querySelectorAll(`.slick-cell-menu.slick-submenu${this.getGridUidSelector()}`)\r\n        .forEach(subElm => {\r\n          if (subElm.contains(e.target)) {\r\n            isMenuClicked = true;\r\n          }\r\n        });\r\n    }\r\n\r\n    if (this._menuElm !== e.target && !isMenuClicked && !e.defaultPrevented) {\r\n      this.closeMenu(e, { cell: this._currentCell, row: this._currentRow, grid: this._grid });\r\n    }\r\n  }\r\n\r\n  /** Build the Command Items section. */\r\n  protected populateCommandOrOptionItems(\r\n    itemType: MenuType,\r\n    cellMenu: CellMenuOption,\r\n    commandOrOptionMenuElm: HTMLElement,\r\n    commandOrOptionItems: Array<MenuCommandItem | 'divider'> | Array<MenuOptionItem | 'divider'>,\r\n    args: { cell: number, row: number, column: Column, dataContext: any, grid: SlickGrid, level: number }\r\n  ) {\r\n    if (!args || !commandOrOptionItems || !cellMenu) {\r\n      return;\r\n    }\r\n\r\n    // user could pass a title on top of the Commands/Options section\r\n    const level = args?.level || 0;\r\n    const isSubMenu = level > 0;\r\n    if (cellMenu?.[`${itemType}Title`] && !isSubMenu) {\r\n      this[`_${itemType}TitleElm`] = document.createElement('div');\r\n      this[`_${itemType}TitleElm`]!.className = 'slick-menu-title';\r\n      this[`_${itemType}TitleElm`]!.textContent = cellMenu[`${itemType}Title`] as string;\r\n      commandOrOptionMenuElm.appendChild(this[`_${itemType}TitleElm`]!);\r\n    }\r\n\r\n    for (let i = 0, ln = commandOrOptionItems.length; i < ln; i++) {\r\n      let addClickListener = true;\r\n      const item = commandOrOptionItems[i];\r\n\r\n      // run each override functions to know if the item is visible and usable\r\n      const isItemVisible = this.runOverrideFunctionWhenExists<typeof args>((item as MenuCommandItem | MenuOptionItem).itemVisibilityOverride, args);\r\n      const isItemUsable = this.runOverrideFunctionWhenExists<typeof args>((item as MenuCommandItem | MenuOptionItem).itemUsabilityOverride, args);\r\n\r\n      // if the result is not visible then there's no need to go further\r\n      if (!isItemVisible) {\r\n        continue;\r\n      }\r\n\r\n      // when the override is defined, we need to use its result to update the disabled property\r\n      // so that \"handleMenuItemClick\" has the correct flag and won't trigger a command/option clicked event\r\n      if (Object.prototype.hasOwnProperty.call(item, 'itemUsabilityOverride')) {\r\n        (item as MenuCommandItem | MenuOptionItem).disabled = isItemUsable ? false : true;\r\n      }\r\n\r\n      const liElm = document.createElement('div');\r\n      liElm.className = 'slick-cell-menu-item';\r\n      liElm.role = 'menuitem';\r\n\r\n      if ((item as MenuCommandItem | MenuOptionItem).divider || item === 'divider') {\r\n        liElm.classList.add('slick-cell-menu-item-divider');\r\n        addClickListener = false;\r\n      }\r\n\r\n      // if the item is disabled then add the disabled css class\r\n      if ((item as MenuCommandItem | MenuOptionItem).disabled || !isItemUsable) {\r\n        liElm.classList.add('slick-cell-menu-item-disabled');\r\n      }\r\n\r\n      // if the item is hidden then add the hidden css class\r\n      if ((item as MenuCommandItem | MenuOptionItem).hidden) {\r\n        liElm.classList.add('slick-cell-menu-item-hidden');\r\n      }\r\n\r\n      if ((item as MenuCommandItem | MenuOptionItem).cssClass) {\r\n        liElm.classList.add(...Utils.classNameToList((item as MenuCommandItem | MenuOptionItem).cssClass));\r\n      }\r\n\r\n      if ((item as MenuCommandItem | MenuOptionItem).tooltip) {\r\n        liElm.title = (item as MenuCommandItem | MenuOptionItem).tooltip || '';\r\n      }\r\n\r\n      const iconElm = document.createElement('div');\r\n      iconElm.className = 'slick-cell-menu-icon';\r\n\r\n      liElm.appendChild(iconElm);\r\n\r\n      if ((item as MenuCommandItem | MenuOptionItem).iconCssClass) {\r\n        iconElm.classList.add(...Utils.classNameToList((item as MenuCommandItem | MenuOptionItem).iconCssClass));\r\n      }\r\n\r\n      if ((item as MenuCommandItem | MenuOptionItem).iconImage) {\r\n        iconElm.style.backgroundImage = `url(${(item as MenuCommandItem | MenuOptionItem).iconImage})`;\r\n      }\r\n\r\n      const textElm = document.createElement('span');\r\n      textElm.className = 'slick-cell-menu-content';\r\n      textElm.textContent = (item as MenuCommandItem | MenuOptionItem).title || '';\r\n\r\n      liElm.appendChild(textElm);\r\n\r\n      if ((item as MenuCommandItem | MenuOptionItem).textCssClass) {\r\n        textElm.classList.add(...Utils.classNameToList((item as MenuCommandItem | MenuOptionItem).textCssClass));\r\n      }\r\n\r\n      commandOrOptionMenuElm.appendChild(liElm);\r\n\r\n      if (addClickListener) {\r\n        const eventGroup = isSubMenu ? 'sub-menu' : 'parent-menu';\r\n        this._bindingEventService.bind(liElm, 'click', this.handleMenuItemClick.bind(this, item, itemType, level) as EventListener, undefined, eventGroup);\r\n      }\r\n\r\n      // optionally open sub-menu(s) by mouseover\r\n      if (this._cellMenuProperties.subMenuOpenByEvent === 'mouseover') {\r\n        this._bindingEventService.bind(liElm, 'mouseover', ((e: DOMMouseOrTouchEvent<HTMLDivElement>) => {\r\n          if ((item as MenuCommandItem).commandItems || (item as MenuOptionItem).optionItems) {\r\n            this.repositionSubMenu(item, itemType, level, e);\r\n            this._lastMenuTypeClicked = itemType;\r\n          } else if (!isSubMenu) {\r\n            this.destroySubMenus();\r\n          }\r\n        }) as EventListener);\r\n      }\r\n\r\n      // the option/command item could be a sub-menu if it has another list of commands/options\r\n      if ((item as MenuCommandItem).commandItems || (item as MenuOptionItem).optionItems) {\r\n        const chevronElm = document.createElement('span');\r\n        chevronElm.className = 'sub-item-chevron';\r\n        if (this._cellMenuProperties.subItemChevronClass) {\r\n          chevronElm.classList.add(...Utils.classNameToList(this._cellMenuProperties.subItemChevronClass));\r\n        } else {\r\n          chevronElm.textContent = '\u2B9E'; // \u2B9E or \u25B8\r\n        }\r\n\r\n        liElm.classList.add('slick-submenu-item');\r\n        liElm.appendChild(chevronElm);\r\n        continue;\r\n      }\r\n    }\r\n  }\r\n\r\n  protected handleMenuItemClick(item: MenuCommandItem | MenuOptionItem | 'divider', type: MenuType, level = 0, e: DOMMouseOrTouchEvent<HTMLDivElement>) {\r\n    if ((item as never)?.[type] !== undefined && item !== 'divider' && !item.disabled && !(item as MenuCommandItem | MenuOptionItem).divider && this._currentCell !== undefined && this._currentRow !== undefined) {\r\n      if (type === 'option' && !this._grid.getEditorLock().commitCurrentEdit()) {\r\n        return;\r\n      }\r\n      const optionOrCommand = (item as any)[type] !== undefined ? (item as any)[type] : '';\r\n      const row = this._currentRow;\r\n      const cell = this._currentCell;\r\n      const columnDef = this._grid.getColumns()[cell];\r\n      const dataContext = this._grid.getDataItem(row);\r\n\r\n      if (optionOrCommand !== undefined && !(item as any)[`${type}Items`]) {\r\n        // user could execute a callback through 2 ways\r\n        // via the onCommand/onOptionSelected event and/or an action callback\r\n        const callbackArgs = {\r\n          cell,\r\n          row,\r\n          grid: this._grid,\r\n          [type]: optionOrCommand,\r\n          item,\r\n          column: columnDef,\r\n          dataContext,\r\n        };\r\n        const eventType = type === 'command' ? 'onCommand' : 'onOptionSelected';\r\n        this[eventType].notify(callbackArgs as any, e, this);\r\n\r\n        // execute action callback when defined\r\n        if (typeof item.action === 'function') {\r\n          (item as any).action.call(this, e, callbackArgs);\r\n        }\r\n\r\n        // unless prevented, close the menu\r\n        if (!e.defaultPrevented) {\r\n          this.closeMenu(e, { cell, row, grid: this._grid });\r\n        }\r\n      } else if ((item as MenuCommandItem).commandItems || (item as MenuOptionItem).optionItems) {\r\n        this.repositionSubMenu(item, type, level, e);\r\n      } else {\r\n        this.destroySubMenus();\r\n      }\r\n      this._lastMenuTypeClicked = type;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method that user can pass to override the default behavior.\r\n   * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\r\n   * @param overrideFn: override function callback\r\n   * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\r\n   */\r\n  protected runOverrideFunctionWhenExists<T = any>(overrideFn: ((args: any) => boolean) | undefined, args: T): boolean {\r\n    if (typeof overrideFn === 'function') {\r\n      return overrideFn.call(this, args);\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      Plugins: {\r\n        CellMenu: SlickCellMenu\r\n      }\r\n    }\r\n  });\r\n}\r\n", "import type { CSSStyleDeclarationWritable, CellRangeDecoratorOption, SlickPlugin } from '../models/index.js';\r\nimport { Utils as Utils_, type SlickRange } from '../slick.core.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/***\r\n   * Displays an overlay on top of a given cell range.\r\n   *\r\n   * TODO:\r\n   * Currently, it blocks mouse events to DOM nodes behind it.\r\n   * Use FF and WebKit-specific \"pointer-events\" CSS style, or some kind of event forwarding.\r\n   * Could also construct the borders separately using 4 individual DIVs.\r\n   *\r\n   * @param {Grid} grid\r\n   * @param {Object} options\r\n   */\r\nexport class SlickCellRangeDecorator implements SlickPlugin {\r\n  // --\r\n  // public API\r\n  pluginName = 'CellRangeDecorator' as const;\r\n\r\n  // --\r\n  // protected props\r\n  protected _options: CellRangeDecoratorOption;\r\n  protected _elem?: HTMLDivElement | null;\r\n  protected _defaults = {\r\n    selectionCssClass: 'slick-range-decorator',\r\n    selectionCss: {\r\n      zIndex: '9999',\r\n      border: '2px dashed red'\r\n    },\r\n    offset: { top: -1, left: -1, height: -2, width: -2 }\r\n  } as CellRangeDecoratorOption;\r\n\r\n  constructor(protected readonly grid: SlickGrid, options?: Partial<CellRangeDecoratorOption>) {\r\n    this._options = Utils.extend(true, {}, this._defaults, options);\r\n  }\r\n\r\n  destroy() {\r\n    this.hide();\r\n  }\r\n\r\n  init() { }\r\n\r\n  hide() {\r\n    this._elem?.remove();\r\n    this._elem = null;\r\n  }\r\n\r\n  show(range: SlickRange) {\r\n    if (!this._elem) {\r\n      this._elem = document.createElement('div');\r\n      this._elem.className = this._options.selectionCssClass;\r\n      Object.keys(this._options.selectionCss as CSSStyleDeclaration).forEach((cssStyleKey) => {\r\n        this._elem!.style[cssStyleKey as CSSStyleDeclarationWritable] = this._options.selectionCss[cssStyleKey as CSSStyleDeclarationWritable];\r\n      });\r\n      this._elem.style.position = 'absolute';\r\n      const canvasNode = this.grid.getActiveCanvasNode();\r\n      if (canvasNode) {\r\n        canvasNode.appendChild(this._elem);\r\n      }\r\n    }\r\n\r\n    const from = this.grid.getCellNodeBox(range.fromRow, range.fromCell);\r\n    const to = this.grid.getCellNodeBox(range.toRow, range.toCell);\r\n\r\n    if (from && to && this._options?.offset) {\r\n      this._elem.style.top = `${from.top + this._options.offset.top}px`;\r\n      this._elem.style.left = `${from.left + this._options.offset.left}px`;\r\n      this._elem.style.height = `${to.bottom - from.top + this._options.offset.height}px`;\r\n      this._elem.style.width = `${to.right - from.left + this._options.offset.width}px`;\r\n    }\r\n\r\n    return this._elem;\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      CellRangeDecorator: SlickCellRangeDecorator\r\n    }\r\n  });\r\n}\r\n", "import type { DragItem, DragPosition, DraggableOption, MouseWheelOption, ResizableOption } from './models/index.js';\r\nimport { Utils as Utils_ } from './slick.core.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/***\r\n * Interactions, add basic behaviors to any element.\r\n * All the packages are written in pure vanilla JS and supports both mouse & touch events.\r\n * @module Interactions\r\n * @namespace Slick\r\n */\r\n\r\n/**\r\n * Draggable Class, enables dragging functionality for any element for example cell & row selections.\r\n * Note that mouse/touch start is on the specified container element but all other events are on the document body.\r\n * code refs:\r\n *   https://betterprogramming.pub/perfecting-drag-and-drop-in-pure-vanilla-javascript-a761184b797a\r\n * available optional options:\r\n *   - containerElement: container DOM element, defaults to \"document\"\r\n *   - allowDragFrom: when defined, only allow dragging from an element that matches a specific query selector\r\n *   - allowDragFromClosest: when defined, only allow dragging from an element or its parent matching a specific .closest() query selector\r\n *   - onDragInit: drag initialized callback\r\n *   - onDragStart: drag started callback\r\n *   - onDrag: drag callback\r\n *   - onDragEnd: drag ended callback\r\n * @param {Object} options\r\n * @returns - Draggable instance which includes destroy method\r\n * @class Draggable\r\n */\r\nexport function Draggable(options: DraggableOption) {\r\n  let { containerElement } = options;\r\n  const { onDragInit, onDragStart, onDrag, onDragEnd, preventDragFromKeys } = options;\r\n  let element: HTMLElement | null;\r\n  let startX: number;\r\n  let startY: number;\r\n  let deltaX: number;\r\n  let deltaY: number;\r\n  let dragStarted: boolean;\r\n\r\n  if (!containerElement) {\r\n    containerElement = document.body;\r\n  }\r\n\r\n  let originaldd: Partial<DragItem> = {\r\n    dragSource: containerElement,\r\n    dragHandle: null,\r\n  };\r\n\r\n  function init() {\r\n    if (containerElement) {\r\n      containerElement.addEventListener('mousedown', userPressed as EventListener);\r\n      containerElement.addEventListener('touchstart', userPressed as EventListener);\r\n    }\r\n  }\r\n\r\n  function executeDragCallbackWhenDefined(callback?: (e: DragEvent, dd: DragItem) => boolean | void, evt?: MouseEvent | Touch | TouchEvent | KeyboardEvent, dd?: DragItem) {\r\n    if (typeof callback === 'function') {\r\n      return callback(evt as DragEvent, dd as DragItem);\r\n    }\r\n  }\r\n\r\n  function destroy() {\r\n    if (containerElement) {\r\n      containerElement.removeEventListener('mousedown', userPressed as EventListener);\r\n      containerElement.removeEventListener('touchstart', userPressed as EventListener);\r\n    }\r\n  }\r\n\r\n  /** Do we want to prevent Drag events from happening (for example prevent onDrag when Ctrl key is pressed while dragging) */\r\n  function preventDrag(event: MouseEvent | TouchEvent | KeyboardEvent) {\r\n    let eventPrevented = false;\r\n    if (preventDragFromKeys) {\r\n      preventDragFromKeys.forEach(key => {\r\n        if ((event as KeyboardEvent)[key]) {\r\n          eventPrevented = true;\r\n        }\r\n      });\r\n    }\r\n    return eventPrevented;\r\n  }\r\n\r\n  function userPressed(event: MouseEvent | TouchEvent | KeyboardEvent) {\r\n    if (!preventDrag(event)) {\r\n      element = event.target as HTMLElement;\r\n      const targetEvent: MouseEvent | Touch = (event as TouchEvent)?.touches?.[0] ?? event;\r\n      const { target } = targetEvent;\r\n\r\n      if (!options.allowDragFrom || (options.allowDragFrom && (element.matches(options.allowDragFrom)) || (options.allowDragFromClosest && element.closest(options.allowDragFromClosest)))) {\r\n        originaldd.dragHandle = element as HTMLElement;\r\n        const winScrollPos = Utils.windowScrollPosition();\r\n        startX = winScrollPos.left + targetEvent.clientX;\r\n        startY = winScrollPos.top + targetEvent.clientY;\r\n        deltaX = targetEvent.clientX - targetEvent.clientX;\r\n        deltaY = targetEvent.clientY - targetEvent.clientY;\r\n        originaldd = Object.assign(originaldd, { deltaX, deltaY, startX, startY, target });\r\n        const result = executeDragCallbackWhenDefined(onDragInit as (e: DragEvent, dd: DragPosition) => boolean | void, event, originaldd as DragItem);\r\n\r\n        if (result !== false) {\r\n          document.body.addEventListener('mousemove', userMoved);\r\n          document.body.addEventListener('touchmove', userMoved);\r\n          document.body.addEventListener('mouseup', userReleased);\r\n          document.body.addEventListener('touchend', userReleased);\r\n          document.body.addEventListener('touchcancel', userReleased);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function userMoved(event: MouseEvent | TouchEvent | KeyboardEvent) {\r\n    if (!preventDrag(event)) {\r\n      const targetEvent: MouseEvent | Touch = (event as TouchEvent)?.touches?.[0] ?? event;\r\n      deltaX = targetEvent.clientX - startX;\r\n      deltaY = targetEvent.clientY - startY;\r\n      const { target } = targetEvent;\r\n\r\n      if (!dragStarted) {\r\n        originaldd = Object.assign(originaldd, { deltaX, deltaY, startX, startY, target });\r\n        executeDragCallbackWhenDefined(onDragStart, event, originaldd as DragItem);\r\n        dragStarted = true;\r\n      }\r\n\r\n      originaldd = Object.assign(originaldd, { deltaX, deltaY, startX, startY, target });\r\n      executeDragCallbackWhenDefined(onDrag, event, originaldd as DragItem);\r\n    }\r\n  }\r\n\r\n  function userReleased(event: MouseEvent | TouchEvent) {\r\n    document.body.removeEventListener('mousemove', userMoved);\r\n    document.body.removeEventListener('touchmove', userMoved);\r\n    document.body.removeEventListener('mouseup', userReleased);\r\n    document.body.removeEventListener('touchend', userReleased);\r\n    document.body.removeEventListener('touchcancel', userReleased);\r\n\r\n    // trigger a dragEnd event only after dragging started and stopped\r\n    if (dragStarted) {\r\n      const { target } = event;\r\n      originaldd = Object.assign(originaldd, { target });\r\n      executeDragCallbackWhenDefined(onDragEnd, event, originaldd as DragItem);\r\n      dragStarted = false;\r\n    }\r\n  }\r\n\r\n  // initialize Slick.MouseWheel by attaching mousewheel event\r\n  init();\r\n\r\n  // public API\r\n  return { destroy };\r\n}\r\n\r\n/**\r\n * MouseWheel Class, add mousewheel listeners and calculate delta values and return them in the callback function.\r\n * available optional options:\r\n *   - element: optional DOM element to attach mousewheel values, if undefined we'll attach it to the \"window\" object\r\n *   - onMouseWheel: mousewheel callback\r\n * @param {Object} options\r\n * @returns - MouseWheel instance which includes destroy method\r\n * @class MouseWheel\r\n */\r\nexport function MouseWheel(options: MouseWheelOption) {\r\n  const { element, onMouseWheel } = options;\r\n\r\n  function destroy() {\r\n    element.removeEventListener('wheel', wheelHandler as EventListener);\r\n    element.removeEventListener('mousewheel', wheelHandler as EventListener);\r\n  }\r\n\r\n  function init() {\r\n    element.addEventListener('wheel', wheelHandler as EventListener);\r\n    element.addEventListener('mousewheel', wheelHandler as EventListener);\r\n  }\r\n\r\n  // copy over the same event handler code used in jquery.mousewheel\r\n  function wheelHandler(event: WheelEvent & { axis: number; wheelDelta: number; wheelDeltaX: number; wheelDeltaY: number; HORIZONTAL_AXIS: number; }) {\r\n    const orgEvent = event || window.event;\r\n    let delta = 0;\r\n    let deltaX = 0;\r\n    let deltaY = 0;\r\n\r\n    // Old school scrollwheel delta\r\n    if (orgEvent.wheelDelta) {\r\n      delta = orgEvent.wheelDelta / 120;\r\n    }\r\n    if (orgEvent.detail) {\r\n      delta = -orgEvent.detail / 3;\r\n    }\r\n\r\n    // New school multidimensional scroll (touchpads) deltas\r\n    deltaY = delta;\r\n\r\n    // Gecko\r\n    if (orgEvent.axis !== undefined && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {\r\n      deltaY = 0;\r\n      deltaX = -1 * delta;\r\n    }\r\n\r\n    // WebKit\r\n    if (orgEvent.wheelDeltaY !== undefined) {\r\n      deltaY = orgEvent.wheelDeltaY / 120;\r\n    }\r\n    if (orgEvent.wheelDeltaX !== undefined) {\r\n      deltaX = -1 * orgEvent.wheelDeltaX / 120;\r\n    }\r\n\r\n    if (typeof onMouseWheel === 'function') {\r\n      onMouseWheel(event, delta, deltaX, deltaY);\r\n    }\r\n  }\r\n\r\n  // initialize Slick.MouseWheel by attaching mousewheel event\r\n  init();\r\n\r\n  // public API\r\n  return { destroy };\r\n}\r\n\r\n/**\r\n * Resizable Class, enables resize functionality for any element\r\n * Code mostly comes from these 2 resources:\r\n *   https://spin.atomicobject.com/2019/11/21/creating-a-resizable-html-element/\r\n *   https://htmldom.dev/make-a-resizable-element/\r\n * available optional options:\r\n *   - resizeableElement: resizable DOM element\r\n *   - resizeableHandleElement: resizable DOM element\r\n *   - onResizeStart: resize start callback\r\n *   - onResize: resizing callback\r\n *   - onResizeEnd: resize ended callback\r\n * @param {Object} options\r\n * @returns - Resizable instance which includes destroy method\r\n * @class Resizable\r\n */\r\nexport function Resizable(options: ResizableOption) {\r\n  const { resizeableElement, resizeableHandleElement, onResizeStart, onResize, onResizeEnd } = options;\r\n  if (!resizeableHandleElement || typeof resizeableHandleElement.addEventListener !== 'function') {\r\n    throw new Error('[Slick.Resizable] You did not provide a valid html element that will be used for the handle to resize.');\r\n  }\r\n\r\n  function init() {\r\n    // add event listeners on the draggable element\r\n    resizeableHandleElement.addEventListener('mousedown', resizeStartHandler);\r\n    resizeableHandleElement.addEventListener('touchstart', resizeStartHandler);\r\n  }\r\n\r\n  function destroy() {\r\n    if (typeof resizeableHandleElement?.removeEventListener === 'function') {\r\n      resizeableHandleElement.removeEventListener('mousedown', resizeStartHandler);\r\n      resizeableHandleElement.removeEventListener('touchstart', resizeStartHandler);\r\n    }\r\n  }\r\n\r\n  function executeResizeCallbackWhenDefined(callback?: Function, e?: MouseEvent | TouchEvent | Touch) {\r\n    if (typeof callback === 'function') {\r\n      return callback(e, { resizeableElement, resizeableHandleElement });\r\n    }\r\n  }\r\n\r\n  function resizeStartHandler(e: MouseEvent | TouchEvent) {\r\n    e.preventDefault();\r\n    const event = (e as TouchEvent).touches ? (e as TouchEvent).changedTouches[0] : e;\r\n    const result = executeResizeCallbackWhenDefined(onResizeStart, event);\r\n    if (result !== false) {\r\n      document.body.addEventListener('mousemove', resizingHandler);\r\n      document.body.addEventListener('mouseup', resizeEndHandler);\r\n      document.body.addEventListener('touchmove', resizingHandler);\r\n      document.body.addEventListener('touchend', resizeEndHandler);\r\n    }\r\n  }\r\n\r\n  function resizingHandler(e: MouseEvent | TouchEvent) {\r\n    if (e.preventDefault && e.type !== 'touchmove') {\r\n      e.preventDefault();\r\n    }\r\n    const event = (e as TouchEvent).touches ? (e as TouchEvent).changedTouches[0] : e;\r\n    if (typeof onResize === 'function') {\r\n      onResize(event, { resizeableElement, resizeableHandleElement });\r\n    }\r\n  }\r\n\r\n  /** Remove all mouse/touch handlers */\r\n  function resizeEndHandler(e: MouseEvent | TouchEvent) {\r\n    const event = (e as TouchEvent).touches ? (e as TouchEvent).changedTouches[0] : e;\r\n    executeResizeCallbackWhenDefined(onResizeEnd, event);\r\n    document.body.removeEventListener('mousemove', resizingHandler);\r\n    document.body.removeEventListener('mouseup', resizeEndHandler);\r\n    document.body.removeEventListener('touchmove', resizingHandler);\r\n    document.body.removeEventListener('touchend', resizeEndHandler);\r\n  }\r\n\r\n  init();\r\n\r\n  // public API\r\n  return { destroy };\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(Slick, {\r\n    Draggable,\r\n    MouseWheel,\r\n    Resizable,\r\n  });\r\n}\r\n", "import { SlickEvent as SlickEvent_, type SlickEventData, SlickEventHandler as SlickEventHandler_, SlickRange as SlickRange_, Utils as Utils_ } from '../slick.core.js';\r\nimport { Draggable as Draggable_ } from '../slick.interactions.js';\r\nimport { SlickCellRangeDecorator as SlickCellRangeDecorator_ } from './slick.cellrangedecorator.js';\r\nimport type { CellRangeSelectorOption, DragPosition, DragRange, DragRowMove, GridOption, MouseOffsetViewport, OnScrollEventArgs, SlickPlugin } from '../models/index.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst SlickEventHandler = IIFE_ONLY ? Slick.EventHandler : SlickEventHandler_;\r\nconst SlickRange = IIFE_ONLY ? Slick.Range : SlickRange_;\r\nconst Draggable = IIFE_ONLY ? Slick.Draggable : Draggable_;\r\nconst SlickCellRangeDecorator = IIFE_ONLY ? Slick.CellRangeDecorator : SlickCellRangeDecorator_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\nexport class SlickCellRangeSelector implements SlickPlugin {\r\n  // --\r\n  // public API\r\n  pluginName = 'CellRangeSelector' as const;\r\n  onBeforeCellRangeSelected = new SlickEvent<{ row: number; cell: number; }>('onBeforeCellRangeSelected');\r\n  onCellRangeSelected = new SlickEvent<{ range: SlickRange_; }>('onCellRangeSelected');\r\n  onCellRangeSelecting = new SlickEvent<{ range: SlickRange_; }>('onCellRangeSelecting');\r\n\r\n  // --\r\n  // protected props\r\n  protected _grid!: SlickGrid;\r\n  protected _currentlySelectedRange: DragRange | null = null;\r\n  protected _canvas: HTMLElement | null = null;\r\n  protected _decorator!: SlickCellRangeDecorator_;\r\n  protected _gridOptions!: GridOption;\r\n  protected _activeCanvas!: HTMLElement;\r\n  protected _dragging = false;\r\n  protected _handler = new SlickEventHandler();\r\n  protected _options: CellRangeSelectorOption;\r\n  protected _defaults = {\r\n    autoScroll: true,\r\n    minIntervalToShowNextCell: 30,\r\n    maxIntervalToShowNextCell: 600, // better to a multiple of minIntervalToShowNextCell\r\n    accelerateInterval: 5,          // increase 5ms when cursor 1px outside the viewport.\r\n    selectionCss: {\r\n      border: '2px dashed blue'\r\n    }\r\n  } as CellRangeSelectorOption;\r\n\r\n  // Frozen row & column variables\r\n  protected _rowOffset = 0;\r\n  protected _columnOffset = 0;\r\n  protected _isRightCanvas = false;\r\n  protected _isBottomCanvas = false;\r\n\r\n  // autoScroll related constiables\r\n  protected _activeViewport!: HTMLElement;\r\n  protected _autoScrollTimerId?: number;\r\n  protected _draggingMouseOffset!: MouseOffsetViewport;\r\n  protected _moveDistanceForOneCell!: { x: number; y: number; };\r\n  protected _xDelayForNextCell = 0;\r\n  protected _yDelayForNextCell = 0;\r\n  protected _viewportHeight = 0;\r\n  protected _viewportWidth = 0;\r\n  protected _isRowMoveRegistered = false;\r\n\r\n  // Scrollings\r\n  protected _scrollLeft = 0;\r\n  protected _scrollTop = 0;\r\n\r\n  constructor(options?: Partial<CellRangeSelectorOption>) {\r\n    this._options = Utils.extend(true, {}, this._defaults, options);\r\n  }\r\n\r\n  init(grid: SlickGrid) {\r\n    if (Draggable === undefined) {\r\n      throw new Error('Slick.Draggable is undefined, make sure to import \"slick.interactions.js\"');\r\n    }\r\n\r\n    this._decorator = this._options.cellDecorator || new SlickCellRangeDecorator(grid, this._options);\r\n    this._grid = grid;\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n    this._canvas = this._grid.getCanvasNode();\r\n    this._gridOptions = this._grid.getOptions();\r\n    this._handler\r\n      .subscribe(this._grid.onScroll, this.handleScroll.bind(this))\r\n      .subscribe(this._grid.onDragInit, this.handleDragInit.bind(this))\r\n      .subscribe(this._grid.onDragStart, this.handleDragStart.bind(this))\r\n      .subscribe(this._grid.onDrag, this.handleDrag.bind(this))\r\n      .subscribe(this._grid.onDragEnd, this.handleDragEnd.bind(this));\r\n  }\r\n\r\n  destroy() {\r\n    this._handler.unsubscribeAll();\r\n    this._activeCanvas = null as any;\r\n    this._activeViewport = null as any;\r\n    this._canvas = null;\r\n    this._decorator?.destroy();\r\n  }\r\n\r\n  getCellDecorator() {\r\n    return this._decorator;\r\n  }\r\n\r\n  protected handleScroll(_e: SlickEventData, args: OnScrollEventArgs) {\r\n    this._scrollTop = args.scrollTop;\r\n    this._scrollLeft = args.scrollLeft;\r\n  }\r\n\r\n  protected handleDragInit(e: SlickEventData) {\r\n    // Set the active canvas node because the decorator needs to append its\r\n    // box to the correct canvas\r\n    this._activeCanvas = this._grid.getActiveCanvasNode(e);\r\n    this._activeViewport = this._grid.getActiveViewportNode(e);\r\n\r\n    const scrollbarDimensions = this._grid.getDisplayedScrollbarDimensions();\r\n    this._viewportWidth = this._activeViewport.offsetWidth - scrollbarDimensions.width;\r\n    this._viewportHeight = this._activeViewport.offsetHeight - scrollbarDimensions.height;\r\n\r\n    this._moveDistanceForOneCell = {\r\n      x: this._grid.getAbsoluteColumnMinWidth() / 2,\r\n      y: this._grid.getOptions().rowHeight! / 2\r\n    };\r\n    this._isRowMoveRegistered = this.hasRowMoveManager();\r\n\r\n    this._rowOffset = 0;\r\n    this._columnOffset = 0;\r\n    this._isBottomCanvas = this._activeCanvas.classList.contains('grid-canvas-bottom');\r\n\r\n    if (this._gridOptions.frozenRow! > -1 && this._isBottomCanvas) {\r\n      const canvasSelector = `.${this._grid.getUID()} .grid-canvas-${this._gridOptions.frozenBottom ? 'bottom' : 'top'}`;\r\n      const canvasElm = document.querySelector(canvasSelector);\r\n      if (canvasElm) {\r\n        this._rowOffset = canvasElm.clientHeight || 0;\r\n      }\r\n    }\r\n\r\n    this._isRightCanvas = this._activeCanvas.classList.contains('grid-canvas-right');\r\n\r\n    if (this._gridOptions.frozenColumn! > -1 && this._isRightCanvas) {\r\n      const canvasLeftElm = document.querySelector(`.${this._grid.getUID()} .grid-canvas-left`);\r\n      if (canvasLeftElm) {\r\n        this._columnOffset = canvasLeftElm.clientWidth || 0;\r\n      }\r\n    }\r\n\r\n    // prevent the grid from cancelling drag'n'drop by default\r\n    e.stopImmediatePropagation();\r\n    e.preventDefault();\r\n  }\r\n\r\n  protected handleDragStart(e: SlickEventData, dd: DragRowMove) {\r\n    const cell = this._grid.getCellFromEvent(e);\r\n    if (cell && this.onBeforeCellRangeSelected.notify(cell).getReturnValue() !== false && this._grid.canCellBeSelected(cell.row, cell.cell)) {\r\n      this._dragging = true;\r\n      e.stopImmediatePropagation();\r\n    }\r\n    if (!this._dragging) {\r\n      return;\r\n    }\r\n\r\n    this._grid.focus();\r\n\r\n    const canvasOffset = Utils.offset(this._canvas);\r\n\r\n    let startX = dd.startX - (canvasOffset?.left ?? 0);\r\n    if (this._gridOptions.frozenColumn! >= 0 && this._isRightCanvas) {\r\n      startX += this._scrollLeft;\r\n    }\r\n\r\n    let startY = dd.startY - (canvasOffset?.top ?? 0);\r\n    if (this._gridOptions.frozenRow! >= 0 && this._isBottomCanvas) {\r\n      startY += this._scrollTop;\r\n    }\r\n\r\n    const start = this._grid.getCellFromPoint(startX, startY);\r\n\r\n    dd.range = { start, end: {} };\r\n    this._currentlySelectedRange = dd.range;\r\n    return this._decorator.show(new SlickRange(start.row, start.cell));\r\n  }\r\n\r\n  protected handleDrag(evt: SlickEventData, dd: DragRowMove) {\r\n    if (!this._dragging && !this._isRowMoveRegistered) {\r\n      return;\r\n    }\r\n    if (!this._isRowMoveRegistered) {\r\n      evt.stopImmediatePropagation();\r\n    }\r\n\r\n    const e = evt.getNativeEvent<MouseEvent>();\r\n    if (this._options.autoScroll) {\r\n      this._draggingMouseOffset = this.getMouseOffsetViewport(e, dd);\r\n      if (this._draggingMouseOffset.isOutsideViewport) {\r\n        return this.handleDragOutsideViewport();\r\n      }\r\n    }\r\n    this.stopIntervalTimer();\r\n    this.handleDragTo(e, dd);\r\n  }\r\n\r\n  protected getMouseOffsetViewport(e: MouseEvent | TouchEvent, dd: DragRowMove): MouseOffsetViewport {\r\n    const targetEvent: MouseEvent | Touch = (e as TouchEvent)?.touches?.[0] ?? e;\r\n    const viewportLeft = this._activeViewport.scrollLeft;\r\n    const viewportTop = this._activeViewport.scrollTop;\r\n    const viewportRight = viewportLeft + this._viewportWidth;\r\n    const viewportBottom = viewportTop + this._viewportHeight;\r\n\r\n    const viewportOffset = Utils.offset(this._activeViewport);\r\n    const viewportOffsetLeft = viewportOffset?.left ?? 0;\r\n    const viewportOffsetTop = viewportOffset?.top ?? 0;\r\n    const viewportOffsetRight = viewportOffsetLeft + this._viewportWidth;\r\n    const viewportOffsetBottom = viewportOffsetTop + this._viewportHeight;\r\n\r\n    const result = {\r\n      e,\r\n      dd,\r\n      viewport: {\r\n        left: viewportLeft,\r\n        top: viewportTop,\r\n        right: viewportRight,\r\n        bottom: viewportBottom,\r\n        offset: {\r\n          left: viewportOffsetLeft,\r\n          top: viewportOffsetTop,\r\n          right: viewportOffsetRight,\r\n          bottom: viewportOffsetBottom\r\n        }\r\n      },\r\n      // Consider the viewport as the origin, the `offset` is based on the coordinate system:\r\n      // the cursor is on the viewport's left/bottom when it is less than 0, and on the right/top when greater than 0.\r\n      offset: {\r\n        x: 0,\r\n        y: 0\r\n      },\r\n      isOutsideViewport: false\r\n    };\r\n    // ... horizontal\r\n    if (targetEvent.pageX < viewportOffsetLeft) {\r\n      result.offset.x = targetEvent.pageX - viewportOffsetLeft;\r\n    } else if (targetEvent.pageX > viewportOffsetRight) {\r\n      result.offset.x = targetEvent.pageX - viewportOffsetRight;\r\n    }\r\n    // ... vertical\r\n    if (targetEvent.pageY < viewportOffsetTop) {\r\n      result.offset.y = viewportOffsetTop - targetEvent.pageY;\r\n    } else if (targetEvent.pageY > viewportOffsetBottom) {\r\n      result.offset.y = viewportOffsetBottom - targetEvent.pageY;\r\n    }\r\n    result.isOutsideViewport = !!result.offset.x || !!result.offset.y;\r\n    return result;\r\n  }\r\n\r\n  protected handleDragOutsideViewport() {\r\n    this._xDelayForNextCell = this._options.maxIntervalToShowNextCell - Math.abs(this._draggingMouseOffset.offset.x) * this._options.accelerateInterval;\r\n    this._yDelayForNextCell = this._options.maxIntervalToShowNextCell - Math.abs(this._draggingMouseOffset.offset.y) * this._options.accelerateInterval;\r\n    // only one timer is created to handle the case that cursor outside the viewport\r\n    if (!this._autoScrollTimerId) {\r\n      let xTotalDelay = 0;\r\n      let yTotalDelay = 0;\r\n      this._autoScrollTimerId = window.setInterval(() => {\r\n        let xNeedUpdate = false;\r\n        let yNeedUpdate = false;\r\n        // ... horizontal\r\n        if (this._draggingMouseOffset.offset.x) {\r\n          xTotalDelay += this._options.minIntervalToShowNextCell;\r\n          xNeedUpdate = xTotalDelay >= this._xDelayForNextCell;\r\n        } else {\r\n          xTotalDelay = 0;\r\n        }\r\n        // ... vertical\r\n        if (this._draggingMouseOffset.offset.y) {\r\n          yTotalDelay += this._options.minIntervalToShowNextCell;\r\n          yNeedUpdate = yTotalDelay >= this._yDelayForNextCell;\r\n        } else {\r\n          yTotalDelay = 0;\r\n        }\r\n        if (xNeedUpdate || yNeedUpdate) {\r\n          if (xNeedUpdate) {\r\n            xTotalDelay = 0;\r\n          }\r\n          if (yNeedUpdate) {\r\n            yTotalDelay = 0;\r\n          }\r\n          this.handleDragToNewPosition(xNeedUpdate, yNeedUpdate);\r\n        }\r\n      }, this._options.minIntervalToShowNextCell);\r\n    }\r\n  }\r\n\r\n  protected handleDragToNewPosition(xNeedUpdate: boolean, yNeedUpdate: boolean) {\r\n    let pageX = this._draggingMouseOffset.e.pageX;\r\n    let pageY = this._draggingMouseOffset.e.pageY;\r\n    const mouseOffsetX = this._draggingMouseOffset.offset.x;\r\n    const mouseOffsetY = this._draggingMouseOffset.offset.y;\r\n    const viewportOffset = this._draggingMouseOffset.viewport.offset;\r\n    // ... horizontal\r\n    if (xNeedUpdate && mouseOffsetX) {\r\n      if (mouseOffsetX > 0) {\r\n        pageX = viewportOffset.right + this._moveDistanceForOneCell.x;\r\n      } else {\r\n        pageX = viewportOffset.left - this._moveDistanceForOneCell.x;\r\n      }\r\n    }\r\n    // ... vertical\r\n    if (yNeedUpdate && mouseOffsetY) {\r\n      if (mouseOffsetY > 0) {\r\n        pageY = viewportOffset.top - this._moveDistanceForOneCell.y;\r\n      } else {\r\n        pageY = viewportOffset.bottom + this._moveDistanceForOneCell.y;\r\n      }\r\n    }\r\n    this.handleDragTo({ pageX, pageY }, this._draggingMouseOffset.dd);\r\n  }\r\n\r\n  protected stopIntervalTimer() {\r\n    if (this._autoScrollTimerId) {\r\n      window.clearInterval(this._autoScrollTimerId);\r\n      this._autoScrollTimerId = undefined;\r\n    }\r\n  }\r\n\r\n  protected handleDragTo(e: { pageX: number; pageY: number; }, dd: DragPosition) {\r\n    const targetEvent: MouseEvent | Touch = (e as unknown as TouchEvent)?.touches?.[0] ?? e;\r\n    const canvasOffset = Utils.offset(this._activeCanvas);\r\n    const end = this._grid.getCellFromPoint(\r\n      targetEvent.pageX - (canvasOffset?.left ?? 0) + this._columnOffset,\r\n      targetEvent.pageY - (canvasOffset?.top ?? 0) + this._rowOffset\r\n    );\r\n\r\n    // ... frozen column(s),\r\n    if (this._gridOptions.frozenColumn! >= 0 && (!this._isRightCanvas && (end.cell > this._gridOptions.frozenColumn!)) || (this._isRightCanvas && (end.cell <= this._gridOptions.frozenColumn!))) {\r\n      return;\r\n    }\r\n\r\n    // ... or frozen row(s)\r\n    if (this._gridOptions.frozenRow! >= 0 && (!this._isBottomCanvas && (end.row >= this._gridOptions.frozenRow!)) || (this._isBottomCanvas && (end.row < this._gridOptions.frozenRow!))) {\r\n      return;\r\n    }\r\n\r\n    // scrolling the viewport to display the target `end` cell if it is not fully displayed\r\n    if (this._options.autoScroll && this._draggingMouseOffset) {\r\n      const endCellBox = this._grid.getCellNodeBox(end.row, end.cell);\r\n      if (!endCellBox) {\r\n        return;\r\n      }\r\n      const viewport = this._draggingMouseOffset.viewport;\r\n      if (endCellBox.left < viewport.left || endCellBox.right > viewport.right\r\n        || endCellBox.top < viewport.top || endCellBox.bottom > viewport.bottom) {\r\n        this._grid.scrollCellIntoView(end.row, end.cell);\r\n      }\r\n    }\r\n\r\n    // ... or regular grid (without any frozen options)\r\n    if (!this._grid.canCellBeSelected(end.row, end.cell)) {\r\n      return;\r\n    }\r\n\r\n    if (dd?.range) {\r\n      dd.range.end = end;\r\n\r\n      const range = new SlickRange(dd.range.start.row ?? 0, dd.range.start.cell ?? 0, end.row, end.cell);\r\n      this._decorator.show(range);\r\n      this.onCellRangeSelecting.notify({\r\n        range\r\n      });\r\n    }\r\n  }\r\n\r\n  protected hasRowMoveManager() {\r\n    return !!(this._grid.getPluginByName('RowMoveManager') || this._grid.getPluginByName('CrossGridRowMoveManager'));\r\n  }\r\n\r\n  protected handleDragEnd(e: SlickEventData, dd: DragPosition) {\r\n    this._decorator.hide();\r\n    if (!this._dragging) {\r\n      return;\r\n    }\r\n\r\n    this._dragging = false;\r\n    e.stopImmediatePropagation();\r\n\r\n    this.stopIntervalTimer();\r\n    this.onCellRangeSelected.notify({\r\n      range: new SlickRange(\r\n        dd.range.start.row ?? 0,\r\n        dd.range.start.cell ?? 0,\r\n        dd.range.end.row,\r\n        dd.range.end.cell\r\n      )\r\n    });\r\n  }\r\n\r\n  getCurrentRange() {\r\n    return this._currentlySelectedRange;\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(Slick, {\r\n    CellRangeSelector: SlickCellRangeSelector\r\n  });\r\n}\r\n", "import { SlickEvent as SlickEvent_, SlickEventData as SlickEventData_, SlickRange as SlickRange_, Utils as Utils_ } from '../slick.core.js';\r\nimport { SlickCellRangeSelector as SlickCellRangeSelector_ } from './slick.cellrangeselector.js';\r\nimport type { CustomDataView, OnActiveCellChangedEventArgs } from '../models/index.js';\r\nimport type { SlickDataView } from '../slick.dataview.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst SlickEventData = IIFE_ONLY ? Slick.EventData : SlickEventData_;\r\nconst SlickRange = IIFE_ONLY ? Slick.Range : SlickRange_;\r\nconst SlickCellRangeSelector = IIFE_ONLY ? Slick.CellRangeSelector : SlickCellRangeSelector_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\nexport interface CellSelectionModelOption {\r\n  selectActiveCell: boolean;\r\n  cellRangeSelector?: SlickCellRangeSelector_;\r\n}\r\n\r\nexport class SlickCellSelectionModel {\r\n  // --\r\n  // public API\r\n  pluginName = 'CellSelectionModel' as const;\r\n  onSelectedRangesChanged = new SlickEvent<SlickRange_[]>('onSelectedRangesChanged');\r\n\r\n  // --\r\n  // protected props\r\n  protected _cachedPageRowCount = 0;\r\n  protected _dataView?: CustomDataView | SlickDataView;\r\n  protected _grid!: SlickGrid;\r\n  protected _prevSelectedRow?: number;\r\n  protected _prevKeyDown = '';\r\n  protected _ranges: SlickRange_[] = [];\r\n  protected _selector: SlickCellRangeSelector_;\r\n  protected _options?: CellSelectionModelOption;\r\n  protected _defaults: CellSelectionModelOption = {\r\n    selectActiveCell: true\r\n  };\r\n\r\n  constructor(options?: { selectActiveCell: boolean; cellRangeSelector: SlickCellRangeSelector_; }) {\r\n    if (options === undefined || options.cellRangeSelector === undefined) {\r\n      this._selector = new SlickCellRangeSelector({ selectionCss: { border: '2px solid black' } as CSSStyleDeclaration });\r\n    } else {\r\n      this._selector = options.cellRangeSelector;\r\n    }\r\n  }\r\n\r\n  init(grid: SlickGrid) {\r\n    this._options = Utils.extend(true, {}, this._defaults, this._options);\r\n    this._grid = grid;\r\n    if (grid.hasDataView()) {\r\n      this._dataView = grid.getData<CustomDataView | SlickDataView>();\r\n    }\r\n    this._grid.onActiveCellChanged.subscribe(this.handleActiveCellChange.bind(this));\r\n    this._grid.onKeyDown.subscribe(this.handleKeyDown.bind(this));\r\n    grid.registerPlugin(this._selector);\r\n    this._selector.onCellRangeSelected.subscribe(this.handleCellRangeSelected.bind(this));\r\n    this._selector.onBeforeCellRangeSelected.subscribe(this.handleBeforeCellRangeSelected.bind(this));\r\n  }\r\n\r\n  destroy() {\r\n    this._grid.onActiveCellChanged.unsubscribe(this.handleActiveCellChange.bind(this));\r\n    this._grid.onKeyDown.unsubscribe(this.handleKeyDown.bind(this));\r\n    this._selector.onCellRangeSelected.unsubscribe(this.handleCellRangeSelected.bind(this));\r\n    this._selector.onBeforeCellRangeSelected.unsubscribe(this.handleBeforeCellRangeSelected.bind(this));\r\n    this._grid.unregisterPlugin(this._selector);\r\n    this._selector?.destroy();\r\n  }\r\n\r\n  protected removeInvalidRanges(ranges: SlickRange_[]) {\r\n    const result: SlickRange_[] = [];\r\n\r\n    for (let i = 0; i < ranges.length; i++) {\r\n      const r = ranges[i];\r\n      if (this._grid.canCellBeSelected(r.fromRow, r.fromCell) && this._grid.canCellBeSelected(r.toRow, r.toCell)) {\r\n        result.push(r);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  protected rangesAreEqual(range1: SlickRange_[], range2: SlickRange_[]) {\r\n    let areDifferent = (range1.length !== range2.length);\r\n    if (!areDifferent) {\r\n      for (let i = 0; i < range1.length; i++) {\r\n        if (\r\n          range1[i].fromCell !== range2[i].fromCell\r\n          || range1[i].fromRow !== range2[i].fromRow\r\n          || range1[i].toCell !== range2[i].toCell\r\n          || range1[i].toRow !== range2[i].toRow\r\n        ) {\r\n          areDifferent = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return !areDifferent;\r\n  }\r\n\r\n  /** Provide a way to force a recalculation of page row count (for example on grid resize) */\r\n  resetPageRowCount() {\r\n    this._cachedPageRowCount = 0;\r\n  }\r\n\r\n  setSelectedRanges(ranges: SlickRange_[], caller = 'SlickCellSelectionModel.setSelectedRanges') {\r\n    // simple check for: empty selection didn't change, prevent firing onSelectedRangesChanged\r\n    if ((!this._ranges || this._ranges.length === 0) && (!ranges || ranges.length === 0)) { return; }\r\n\r\n    // if range has not changed, don't fire onSelectedRangesChanged\r\n    const rangeHasChanged = !this.rangesAreEqual(this._ranges, ranges);\r\n\r\n    this._ranges = this.removeInvalidRanges(ranges);\r\n    if (rangeHasChanged) {\r\n      // provide extra \"caller\" argument through SlickEventData event to avoid breaking the previous pubsub event structure\r\n      // that only accepts an array of selected range `SlickRange[]`, the SlickEventData args will be merged and used later by `onSelectedRowsChanged`\r\n      const eventData = new SlickEventData(new CustomEvent('click', { detail: { caller } }), this._ranges);\r\n      this.onSelectedRangesChanged.notify(this._ranges, eventData);\r\n    }\r\n  }\r\n\r\n  getSelectedRanges() {\r\n    return this._ranges;\r\n  }\r\n\r\n  refreshSelections() {\r\n    this.setSelectedRanges(this.getSelectedRanges());\r\n  }\r\n\r\n  protected handleBeforeCellRangeSelected(e: SlickEventData_): boolean | void {\r\n    if (this._grid.getEditorLock().isActive()) {\r\n      e.stopPropagation();\r\n      return false;\r\n    }\r\n  }\r\n\r\n  protected handleCellRangeSelected(_e: SlickEventData_, args: { range: SlickRange_; }) {\r\n    this._grid.setActiveCell(args.range.fromRow, args.range.fromCell, false, false, true);\r\n    this.setSelectedRanges([args.range]);\r\n  }\r\n\r\n  protected handleActiveCellChange(_e: SlickEventData_, args: OnActiveCellChangedEventArgs) {\r\n    this._prevSelectedRow = undefined;\r\n    const isCellDefined = Utils.isDefined(args.cell);\r\n    const isRowDefined = Utils.isDefined(args.row);\r\n\r\n    if (this._options?.selectActiveCell && isRowDefined && isCellDefined) {\r\n      this.setSelectedRanges([new SlickRange(args.row, args.cell)]);\r\n    } else if (!this._options?.selectActiveCell || (!isRowDefined && !isCellDefined)) {\r\n      // clear the previous selection once the cell changes\r\n      this.setSelectedRanges([]);\r\n    }\r\n  }\r\n\r\n  protected isKeyAllowed(key: string) {\r\n    return ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'PageDown', 'PageUp', 'Home', 'End', 'a', 'A'].some(k => k === key);\r\n  }\r\n\r\n  protected handleKeyDown(e: SlickEventData_) {\r\n    let ranges: SlickRange_[], last: SlickRange_;\r\n    const colLn = this._grid.getColumns().length;\r\n    const active = this._grid.getActiveCell();\r\n    let dataLn = 0;\r\n    if (this._dataView && 'getPagingInfo' in this._dataView) {\r\n      dataLn = this._dataView?.getPagingInfo().pageSize || this._dataView.getLength();\r\n    } else {\r\n      dataLn = this._grid.getDataLength();\r\n    }\r\n\r\n    if (active && (e.shiftKey || e.ctrlKey) && !e.altKey && this.isKeyAllowed(e.key as string)) {\r\n      ranges = this.getSelectedRanges().slice();\r\n      if (!ranges.length) {\r\n        ranges.push(new SlickRange(active.row, active.cell));\r\n      }\r\n      // keyboard can work with last range only\r\n      last = ranges.pop() as SlickRange_;\r\n\r\n      // can't handle selection out of active cell\r\n      if (!last.contains(active.row, active.cell)) {\r\n        last = new SlickRange(active.row, active.cell);\r\n      }\r\n\r\n      let dRow = last.toRow - last.fromRow;\r\n      let dCell = last.toCell - last.fromCell;\r\n      let toCell: undefined | number;\r\n      let toRow = 0;\r\n\r\n      // when using Ctrl+{a, A} we will change our position to cell 0,0 and select all grid cells\r\n      if (e.ctrlKey && e.key?.toLowerCase() === 'a') {\r\n        this._grid.setActiveCell(0, 0, false, false, true);\r\n        active.row = 0;\r\n        active.cell = 0;\r\n        toCell = colLn - 1;\r\n        toRow = dataLn - 1;\r\n      }\r\n\r\n      // walking direction\r\n      const dirRow = active.row === last.fromRow ? 1 : -1;\r\n      const dirCell = active.cell === last.fromCell ? 1 : -1;\r\n      const isSingleKeyMove = e.key!.startsWith('Arrow');\r\n\r\n      if (isSingleKeyMove && !e.ctrlKey) {\r\n        // single cell move: (Arrow{Up/ArrowDown/ArrowLeft/ArrowRight})\r\n        if (e.key === 'ArrowLeft') {\r\n          dCell -= dirCell;\r\n        } else if (e.key === 'ArrowRight') {\r\n          dCell += dirCell;\r\n        } else if (e.key === 'ArrowUp') {\r\n          dRow -= dirRow;\r\n        } else if (e.key === 'ArrowDown') {\r\n          dRow += dirRow;\r\n        }\r\n        toRow = active.row + dirRow * dRow;\r\n      } else {\r\n        // multiple cell moves: (Home, End, Page{Up/Down})\r\n        if (this._cachedPageRowCount < 1) {\r\n          this._cachedPageRowCount = this._grid.getViewportRowCount();\r\n        }\r\n        if (this._prevSelectedRow === undefined) {\r\n          this._prevSelectedRow = active.row;\r\n        }\r\n\r\n        if ((!e.ctrlKey && e.shiftKey && e.key === 'Home') || (e.ctrlKey && e.shiftKey && e.key === 'ArrowLeft')) {\r\n          toCell = 0;\r\n          toRow = active.row;\r\n        } else if ((!e.ctrlKey && e.shiftKey && e.key === 'End') || (e.ctrlKey && e.shiftKey && e.key === 'ArrowRight')) {\r\n          toCell = colLn - 1;\r\n          toRow = active.row;\r\n        } else if (e.ctrlKey && e.shiftKey && e.key === 'ArrowUp') {\r\n          toRow = 0;\r\n        } else if (e.ctrlKey && e.shiftKey && e.key === 'ArrowDown') {\r\n          toRow = dataLn - 1;\r\n        } else if (e.ctrlKey && e.shiftKey && e.key === 'Home') {\r\n          toCell = 0;\r\n          toRow = 0;\r\n        } else if (e.ctrlKey && e.shiftKey && e.key === 'End') {\r\n          toCell = colLn - 1;\r\n          toRow = dataLn - 1;\r\n        } else if (e.key === 'PageUp') {\r\n          if (this._prevSelectedRow >= 0) {\r\n            toRow = this._prevSelectedRow - this._cachedPageRowCount;\r\n          }\r\n          if (toRow < 0) {\r\n            toRow = 0;\r\n          }\r\n        } else if (e.key === 'PageDown') {\r\n          if (this._prevSelectedRow <= dataLn - 1) {\r\n            toRow = this._prevSelectedRow + this._cachedPageRowCount;\r\n          }\r\n          if (toRow > dataLn - 1) {\r\n            toRow = dataLn - 1;\r\n          }\r\n        }\r\n        this._prevSelectedRow = toRow;\r\n      }\r\n\r\n      // define new selection range\r\n      toCell ??= active.cell + dirCell * dCell;\r\n      const new_last = new SlickRange(active.row, active.cell, toRow, toCell);\r\n      if (this.removeInvalidRanges([new_last]).length) {\r\n        ranges.push(new_last);\r\n        const viewRow = dirRow > 0 ? new_last.toRow : new_last.fromRow;\r\n        const viewCell = dirCell > 0 ? new_last.toCell : new_last.fromCell;\r\n\r\n        if (isSingleKeyMove) {\r\n          this._grid.scrollRowIntoView(viewRow);\r\n          this._grid.scrollCellIntoView(viewRow, viewCell);\r\n        } else {\r\n          this._grid.scrollRowIntoView(toRow);\r\n          this._grid.scrollCellIntoView(toRow, viewCell);\r\n        }\r\n      } else {\r\n        ranges.push(last);\r\n      }\r\n\r\n      this.setSelectedRanges(ranges);\r\n\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      this._prevKeyDown = e.key as string;\r\n    }\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      CellSelectionModel: SlickCellSelectionModel\r\n    }\r\n  });\r\n}", "import type { CheckboxSelectorOption, Column, DOMEvent, SlickPlugin, SelectableOverrideCallback, OnHeaderClickEventArgs } from '../models/index.js';\r\nimport { BindingEventService as BindingEventService_, type SlickEventData, SlickEventHandler as SlickEventHandler_, Utils as Utils_ } from '../slick.core.js';\r\nimport type { SlickDataView } from '../slick.dataview.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\r\nconst SlickEventHandler = IIFE_ONLY ? Slick.EventHandler : SlickEventHandler_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\nexport class SlickCheckboxSelectColumn<T = any> implements SlickPlugin {\r\n  // --\r\n  // public API\r\n  pluginName = 'CheckboxSelectColumn' as const;\r\n\r\n  // --\r\n  // protected props\r\n  protected _dataView!: SlickDataView<T>;\r\n  protected _grid!: SlickGrid;\r\n  protected _isUsingDataView = false;\r\n  protected _selectableOverride: SelectableOverrideCallback<T> | null = null;\r\n  protected _headerRowNode?: HTMLElement;\r\n  protected _selectAll_UID: number;\r\n  protected _handler = new SlickEventHandler();\r\n  protected _selectedRowsLookup: any = {};\r\n  protected _checkboxColumnCellIndex: number | null = null;\r\n  protected _options: CheckboxSelectorOption;\r\n  protected _defaults: CheckboxSelectorOption = {\r\n    columnId: '_checkbox_selector',\r\n    cssClass: undefined,\r\n    hideSelectAllCheckbox: false,\r\n    name: '',\r\n    toolTip: 'Select/Deselect All',\r\n    width: 30,\r\n    reorderable: false,\r\n    applySelectOnAllPages: false, // defaults to false, when that is enabled the \"Select All\" will be applied to all pages (when using Pagination)\r\n    hideInColumnTitleRow: false,\r\n    hideInFilterHeaderRow: true\r\n  };\r\n  protected _isSelectAllChecked = false;\r\n  protected _bindingEventService: BindingEventService_;\r\n\r\n  constructor(options?: Partial<CheckboxSelectorOption>) {\r\n    this._bindingEventService = new BindingEventService();\r\n    this._options = Utils.extend(true, {}, this._defaults, options);\r\n    this._selectAll_UID = this.createUID();\r\n\r\n    // user could override the checkbox icon logic from within the options or after instantiating the plugin\r\n    if (typeof this._options.selectableOverride === 'function') {\r\n      this.selectableOverride(this._options.selectableOverride);\r\n    }\r\n  }\r\n\r\n  init(grid: SlickGrid) {\r\n    this._grid = grid;\r\n    this._isUsingDataView = !Array.isArray(grid.getData());\r\n    if (this._isUsingDataView) {\r\n      this._dataView = grid.getData();\r\n    }\r\n    this._handler\r\n      .subscribe(this._grid.onSelectedRowsChanged, this.handleSelectedRowsChanged.bind(this))\r\n      .subscribe(this._grid.onClick, this.handleClick.bind(this))\r\n      .subscribe(this._grid.onKeyDown, this.handleKeyDown.bind(this));\r\n\r\n    if (this._isUsingDataView && this._dataView && this._options.applySelectOnAllPages) {\r\n      this._handler\r\n        .subscribe(this._dataView.onSelectedRowIdsChanged, this.handleDataViewSelectedIdsChanged.bind(this))\r\n        .subscribe(this._dataView.onPagingInfoChanged, this.handleDataViewSelectedIdsChanged.bind(this));\r\n    }\r\n\r\n    if (!this._options.hideInFilterHeaderRow) {\r\n      this.addCheckboxToFilterHeaderRow(grid);\r\n    }\r\n    if (!this._options.hideInColumnTitleRow) {\r\n      this._handler.subscribe(this._grid.onHeaderClick, this.handleHeaderClick.bind(this));\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    this._handler.unsubscribeAll();\r\n    this._bindingEventService.unbindAll();\r\n  }\r\n\r\n  getOptions() {\r\n    return this._options;\r\n  }\r\n\r\n  setOptions(options: Partial<CheckboxSelectorOption>) {\r\n    this._options = Utils.extend(true, {}, this._options, options);\r\n\r\n    if (this._options.hideSelectAllCheckbox) {\r\n      this.hideSelectAllFromColumnHeaderTitleRow();\r\n      this.hideSelectAllFromColumnHeaderFilterRow();\r\n    } else {\r\n      if (!this._options.hideInColumnTitleRow) {\r\n        this.renderSelectAllCheckbox(this._isSelectAllChecked);\r\n        this._handler.subscribe(this._grid.onHeaderClick, this.handleHeaderClick.bind(this));\r\n      } else {\r\n        this.hideSelectAllFromColumnHeaderTitleRow();\r\n        if (this._options.name) {\r\n          this._grid.updateColumnHeader(this._options.columnId || '', this._options.name, '');\r\n        }\r\n      }\r\n\r\n      if (!this._options.hideInFilterHeaderRow) {\r\n        const selectAllContainerElm = this._headerRowNode?.querySelector<HTMLSpanElement>('#filter-checkbox-selectall-container');\r\n        if (selectAllContainerElm) {\r\n          selectAllContainerElm.style.display = 'flex';\r\n          const selectAllInputElm = selectAllContainerElm.querySelector<HTMLInputElement>('input[type=\"checkbox\"]');\r\n          if (selectAllInputElm) {\r\n            selectAllInputElm.checked = this._isSelectAllChecked;\r\n          }\r\n        }\r\n      } else {\r\n        this.hideSelectAllFromColumnHeaderFilterRow();\r\n      }\r\n    }\r\n  }\r\n\r\n  protected hideSelectAllFromColumnHeaderTitleRow() {\r\n    this._grid.updateColumnHeader(this._options.columnId || '', this._options.name || '', '');\r\n  }\r\n\r\n  protected hideSelectAllFromColumnHeaderFilterRow() {\r\n    const selectAllContainerElm = this._headerRowNode?.querySelector<HTMLSpanElement>('#filter-checkbox-selectall-container');\r\n    if (selectAllContainerElm) {\r\n      selectAllContainerElm.style.display = 'none';\r\n    }\r\n  }\r\n\r\n  protected handleSelectedRowsChanged() {\r\n    const selectedRows = this._grid.getSelectedRows();\r\n    const lookup: any = {};\r\n    let row = 0, i = 0, k = 0;\r\n    let disabledCount = 0;\r\n    if (typeof this._selectableOverride === 'function') {\r\n      for (k = 0; k < this._grid.getDataLength(); k++) {\r\n        // If we are allowed to select the row\r\n        const dataItem = this._grid.getDataItem(k);\r\n        if (!this.checkSelectableOverride(i, dataItem, this._grid)) {\r\n          disabledCount++;\r\n        }\r\n      }\r\n    }\r\n\r\n    const removeList: number[] = [];\r\n    for (i = 0; i < selectedRows.length; i++) {\r\n      row = selectedRows[i];\r\n\r\n      // If we are allowed to select the row\r\n      const rowItem = this._grid.getDataItem(row);\r\n      if (this.checkSelectableOverride(i, rowItem, this._grid)) {\r\n        lookup[row] = true;\r\n        if (lookup[row] !== this._selectedRowsLookup[row]) {\r\n          this._grid.invalidateRow(row);\r\n          delete this._selectedRowsLookup[row];\r\n        }\r\n      }\r\n      else {\r\n        removeList.push(row);\r\n      }\r\n    }\r\n    if (typeof this._selectedRowsLookup === 'object') {\r\n      Object.keys(this._selectedRowsLookup).forEach(selectedRow => {\r\n        if (selectedRow !== undefined) {\r\n          this._grid.invalidateRow(+selectedRow);\r\n        }\r\n      });\r\n    }\r\n    this._selectedRowsLookup = lookup;\r\n    this._grid.render();\r\n    this._isSelectAllChecked = (selectedRows?.length ?? 0) + disabledCount >= this._grid.getDataLength();\r\n\r\n    if (!this._isUsingDataView || !this._options.applySelectOnAllPages) {\r\n      if (!this._options.hideInColumnTitleRow && !this._options.hideSelectAllCheckbox) {\r\n        this.renderSelectAllCheckbox(this._isSelectAllChecked);\r\n      }\r\n      if (!this._options.hideInFilterHeaderRow) {\r\n        const selectAllElm = this._headerRowNode?.querySelector<HTMLInputElement>(`#header-filter-selector${this._selectAll_UID}`);\r\n        if (selectAllElm) {\r\n          selectAllElm.checked = this._isSelectAllChecked;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove items that shouln't of been selected in the first place (Got here Ctrl + click)\r\n    if (removeList.length > 0) {\r\n      for (i = 0; i < removeList.length; i++) {\r\n        const remIdx = selectedRows.indexOf(removeList[i]);\r\n        selectedRows.splice(remIdx, 1);\r\n      }\r\n      this._grid.setSelectedRows(selectedRows, 'click.cleanup');\r\n    }\r\n  }\r\n\r\n  protected handleDataViewSelectedIdsChanged() {\r\n    const selectedIds = this._dataView.getAllSelectedFilteredIds();\r\n    const filteredItems = this._dataView.getFilteredItems();\r\n    let disabledCount = 0;\r\n\r\n    if (typeof this._selectableOverride === 'function' && selectedIds.length > 0) {\r\n      for (let k = 0; k < this._dataView.getItemCount(); k++) {\r\n        // If we are allowed to select the row\r\n        const dataItem: T = this._dataView.getItemByIdx(k);\r\n        const idProperty = this._dataView.getIdPropertyName();\r\n        const dataItemId = dataItem[idProperty as keyof T];\r\n        const foundItemIdx = filteredItems.findIndex(function (item) {\r\n          return item[idProperty as keyof T] === dataItemId;\r\n        });\r\n        if (foundItemIdx >= 0 && !this.checkSelectableOverride(k, dataItem, this._grid)) {\r\n          disabledCount++;\r\n        }\r\n      }\r\n    }\r\n    this._isSelectAllChecked = (selectedIds && selectedIds.length) + disabledCount >= filteredItems.length;\r\n\r\n    if (!this._options.hideInColumnTitleRow && !this._options.hideSelectAllCheckbox) {\r\n      this.renderSelectAllCheckbox(this._isSelectAllChecked);\r\n    }\r\n    if (!this._options.hideInFilterHeaderRow) {\r\n      const selectAllElm = this._headerRowNode?.querySelector<HTMLInputElement>(`#header-filter-selector${this._selectAll_UID}`);\r\n      if (selectAllElm) {\r\n        selectAllElm.checked = this._isSelectAllChecked;\r\n      }\r\n    }\r\n  }\r\n\r\n  protected handleKeyDown(e: SlickEventData, args: any) {\r\n    if (e.which === 32) {\r\n      if (this._grid.getColumns()[args.cell].id === this._options.columnId) {\r\n        // if editing, try to commit\r\n        if (!this._grid.getEditorLock().isActive() || this._grid.getEditorLock().commitCurrentEdit()) {\r\n          this.toggleRowSelection(args.row);\r\n        }\r\n        e.preventDefault();\r\n        e.stopImmediatePropagation();\r\n      }\r\n    }\r\n  }\r\n\r\n  protected handleClick(e: SlickEventData, args: { row: number; cell: number; }) {\r\n    // clicking on a row select checkbox\r\n    if (this._grid.getColumns()[args.cell].id === this._options.columnId && (e.target as HTMLInputElement).type === 'checkbox') {\r\n      // if editing, try to commit\r\n      if (this._grid.getEditorLock().isActive() && !this._grid.getEditorLock().commitCurrentEdit()) {\r\n        e.preventDefault();\r\n        e.stopImmediatePropagation();\r\n        return;\r\n      }\r\n\r\n      this.toggleRowSelection(args.row);\r\n      e.stopPropagation();\r\n      e.stopImmediatePropagation();\r\n    }\r\n  }\r\n\r\n  protected toggleRowSelection(row: number) {\r\n    const dataContext = this._grid.getDataItem(row);\r\n    if (!this.checkSelectableOverride(row, dataContext, this._grid)) {\r\n      return;\r\n    }\r\n\r\n    if (this._selectedRowsLookup[row]) {\r\n      const newSelectedRows = this._grid.getSelectedRows().filter((n) => n !== row);\r\n      this._grid.setSelectedRows(newSelectedRows, 'click.toggle');\r\n    } else {\r\n      this._grid.setSelectedRows(this._grid.getSelectedRows().concat(row), 'click.toggle');\r\n    }\r\n    this._grid.setActiveCell(row, this.getCheckboxColumnCellIndex());\r\n  }\r\n\r\n  selectRows(rowArray: number[]) {\r\n    const addRows: number[] = [];\r\n    for (let i = 0, l = rowArray.length; i < l; i++) {\r\n      if (!this._selectedRowsLookup[rowArray[i]]) {\r\n        addRows[addRows.length] = rowArray[i];\r\n      }\r\n    }\r\n    this._grid.setSelectedRows(this._grid.getSelectedRows().concat(addRows), 'SlickCheckboxSelectColumn.selectRows');\r\n  }\r\n\r\n  deSelectRows(rowArray: number[]) {\r\n    const removeRows: number[] = [];\r\n    for (let i = 0, l = rowArray.length; i < l; i++) {\r\n      if (this._selectedRowsLookup[rowArray[i]]) {\r\n        removeRows[removeRows.length] = rowArray[i];\r\n      }\r\n    }\r\n\r\n    this._grid.setSelectedRows(this._grid.getSelectedRows().filter((n) => removeRows.indexOf(n) < 0), 'SlickCheckboxSelectColumn.deSelectRows');\r\n  }\r\n\r\n  protected handleHeaderClick(e: DOMEvent<HTMLInputElement> | SlickEventData, args: OnHeaderClickEventArgs) {\r\n    if (args.column.id === this._options.columnId && (e.target as HTMLInputElement).type === 'checkbox') {\r\n      // if editing, try to commit\r\n      if (this._grid.getEditorLock().isActive() && !this._grid.getEditorLock().commitCurrentEdit()) {\r\n        e.preventDefault();\r\n        e.stopImmediatePropagation();\r\n        return;\r\n      }\r\n\r\n      let isAllSelected = (e.target as HTMLInputElement).checked;\r\n      const caller = isAllSelected ? 'click.selectAll' : 'click.unselectAll';\r\n      const rows: number[] = [];\r\n\r\n      if (isAllSelected) {\r\n        for (let i = 0; i < this._grid.getDataLength(); i++) {\r\n          // Get the row and check it's a selectable row before pushing it onto the stack\r\n          const rowItem = this._grid.getDataItem(i);\r\n          if (!rowItem.__group && !rowItem.__groupTotals && this.checkSelectableOverride(i, rowItem, this._grid)) {\r\n            rows.push(i);\r\n          }\r\n        }\r\n        isAllSelected = true;\r\n      }\r\n      if (this._isUsingDataView && this._dataView && this._options.applySelectOnAllPages) {\r\n        const ids: Array<number | string> = [];\r\n        const filteredItems = this._dataView.getFilteredItems();\r\n        for (let j = 0; j < filteredItems.length; j++) {\r\n          // Get the row and check it's a selectable ID (it could be in a different page) before pushing it onto the stack\r\n          const dataviewRowItem: T = filteredItems[j];\r\n          if (this.checkSelectableOverride(j, dataviewRowItem, this._grid)) {\r\n            ids.push(dataviewRowItem[this._dataView.getIdPropertyName() as keyof T] as number | string);\r\n          }\r\n        }\r\n        this._dataView.setSelectedIds(ids, { isRowBeingAdded: isAllSelected });\r\n      }\r\n      this._grid.setSelectedRows(rows, caller);\r\n      e.stopPropagation();\r\n      e.stopImmediatePropagation();\r\n    }\r\n  }\r\n\r\n  protected getCheckboxColumnCellIndex() {\r\n    if (this._checkboxColumnCellIndex === null) {\r\n      this._checkboxColumnCellIndex = 0;\r\n      const colArr = this._grid.getColumns();\r\n      for (let i = 0; i < colArr.length; i++) {\r\n        if (colArr[i].id === this._options.columnId) {\r\n          this._checkboxColumnCellIndex = i;\r\n        }\r\n      }\r\n    }\r\n    return this._checkboxColumnCellIndex;\r\n  }\r\n\r\n  /**\r\n   * use a DocumentFragment to return a fragment including an <input> then a <label> as siblings,\r\n   * the label is using `for` to link it to the input `id`\r\n   * @param {String} inputId - id to link the label\r\n   * @param {Boolean} [checked] - is the input checkbox checked? (defaults to false)\r\n   * @returns\r\n   */\r\n  createCheckboxElement(inputId: string, checked = false) {\r\n    const fragmentElm = new DocumentFragment();\r\n    fragmentElm.appendChild(\r\n      Utils.createDomElement('input', { id: inputId, type: 'checkbox', checked, ariaChecked: String(checked) })\r\n    );\r\n    fragmentElm.appendChild(\r\n      Utils.createDomElement('label', { htmlFor: inputId })\r\n    );\r\n\r\n    return fragmentElm;\r\n  }\r\n\r\n  getColumnDefinition() {\r\n    return {\r\n      id: this._options.columnId,\r\n      reorderable: this._options.reorderable,\r\n      name: (this._options.hideSelectAllCheckbox || this._options.hideInColumnTitleRow)\r\n        ? this._options.name || ''\r\n        : this.createCheckboxElement(`header-selector${this._selectAll_UID}`),\r\n      toolTip: (this._options.hideSelectAllCheckbox || this._options.hideInColumnTitleRow) ? '' : this._options.toolTip,\r\n      field: 'sel',\r\n      width: this._options.width,\r\n      resizable: false,\r\n      sortable: false,\r\n      cssClass: this._options.cssClass,\r\n      hideSelectAllCheckbox: this._options.hideSelectAllCheckbox,\r\n      formatter: this.checkboxSelectionFormatter.bind(this),\r\n      // exclude from all menus, defaults to true unless the option is provided differently by the user\r\n      excludeFromColumnPicker: this._options.excludeFromColumnPicker ?? true,\r\n      excludeFromGridMenu: this._options.excludeFromGridMenu ?? true,\r\n      excludeFromHeaderMenu: this._options.excludeFromHeaderMenu ?? true,\r\n    };\r\n  }\r\n\r\n  protected addCheckboxToFilterHeaderRow(grid: SlickGrid) {\r\n    this._handler.subscribe(grid.onHeaderRowCellRendered, (_e: any, args: any) => {\r\n      if (args.column.field === 'sel') {\r\n        Utils.emptyElement(args.node);\r\n        const spanElm = Utils.createDomElement('span', { id: 'filter-checkbox-selectall-container', ariaChecked: 'false' });\r\n        spanElm.appendChild(\r\n          Utils.createDomElement('input', { type: 'checkbox', id: `header-filter-selector${this._selectAll_UID}` })\r\n        );\r\n        spanElm.appendChild(\r\n          Utils.createDomElement('label', { htmlFor: `header-filter-selector${this._selectAll_UID}` })\r\n        );\r\n\r\n        args.node.appendChild(spanElm);\r\n        this._headerRowNode = args.node;\r\n\r\n        this._bindingEventService.bind(spanElm, 'click', ((e: DOMEvent<HTMLInputElement>) => this.handleHeaderClick(e, args)) as EventListener);\r\n      }\r\n    });\r\n  }\r\n\r\n  protected createUID() {\r\n    return Math.round(10000000 * Math.random());\r\n  }\r\n\r\n  protected checkboxSelectionFormatter(row: number, _cell: number, _val: any, _columnDef: Column, dataContext: any, grid: SlickGrid) {\r\n    if (dataContext && this.checkSelectableOverride(row, dataContext, grid)) {\r\n      const UID = this.createUID() + row;\r\n      return this.createCheckboxElement(`selector${UID}`, !!this._selectedRowsLookup[row]);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  protected checkSelectableOverride(row: number, dataContext: any, grid: SlickGrid) {\r\n    if (typeof this._selectableOverride === 'function') {\r\n      return this._selectableOverride(row, dataContext, grid);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected renderSelectAllCheckbox(isSelectAllChecked?: boolean) {\r\n    this._grid.updateColumnHeader(\r\n      this._options.columnId || '',\r\n      this.createCheckboxElement(`header-selector${this._selectAll_UID}`, !!isSelectAllChecked),\r\n      this._options.toolTip\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Method that user can pass to override the default behavior or making every row a selectable row.\r\n   * In order word, user can choose which rows to be selectable or not by providing his own logic.\r\n   * @param overrideFn: override function callback\r\n   */\r\n  selectableOverride(overrideFn: SelectableOverrideCallback<T>) {\r\n    this._selectableOverride = overrideFn;\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      CheckboxSelectColumn: SlickCheckboxSelectColumn\r\n    }\r\n  });\r\n}\r\n\r\n", "import {\r\n  BindingEventService as BindingEventService_,\r\n  SlickEvent as SlickEvent_,\r\n  SlickEventData as SlickEventData_,\r\n  SlickEventHandler as SlickEventHandler_,\r\n  Utils as Utils_\r\n} from '../slick.core.js';\r\nimport type {\r\n  Column,\r\n  ContextMenuOption,\r\n  DOMMouseOrTouchEvent,\r\n  GridOption,\r\n  MenuCommandItem,\r\n  MenuCommandItemCallbackArgs,\r\n  MenuFromCellCallbackArgs,\r\n  MenuOptionItem,\r\n  MenuOptionItemCallbackArgs,\r\n  MenuType,\r\n  SlickPlugin\r\n} from '../models/index.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst SlickEventData = IIFE_ONLY ? Slick.EventData : SlickEventData_;\r\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : SlickEventHandler_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/**\r\n * A plugin to add Context Menu (mouse right+click), it subscribes to the cell \"onContextMenu\" event.\r\n * The \"contextMenu\" is defined in the Grid Options object\r\n * You can use it to change a data property (only 1) through a list of Options AND/OR through a list of Commands.\r\n * A good example of a Command would be an Export to CSV, that can be run from anywhere in the grid by doing a mouse right+click\r\n *\r\n * Note:\r\n *   There is only 1 list of Options, so typically that would be use for 1 column\r\n *   if you plan to use different Options for different columns, then the CellMenu plugin might be better suited.\r\n *\r\n * USAGE:\r\n *\r\n * Add the slick.contextmenu.(js|css) files and register it with the grid.\r\n *\r\n * To specify a menu in a column header, extend the column definition like so:\r\n * var contextMenuPlugin = new Slick.Plugins.ContextMenu(columns, grid, options);\r\n *\r\n * Available grid options, by defining a contextMenu object:\r\n *\r\n *  var options = {\r\n *    enableCellNavigation: true,\r\n *    contextMenu: {\r\n *      optionTitle: 'Change Priority',\r\n *      optionShownOverColumnIds: [\"priority\"],\r\n *      optionItems: [\r\n *        { option: 0, title: 'none', cssClass: 'italic' },\r\n *        { divider: true },\r\n *        \"divider\" // just the string is also accepted\r\n *        { option: 1, iconCssClass: 'fa fa-fire grey', title: 'Low' },\r\n *        { option: 3, iconCssClass: 'fa fa-fire red', title: 'High' },\r\n *        { option: 2, iconCssClass: 'fa fa-fire orange', title: 'Medium' },\r\n *        { option: 4, iconCssClass: 'fa fa-fire', title: 'Extreme', disabled: true },\r\n *      ],\r\n *      commandTitle: 'Commands',\r\n *      commandShownOverColumnIds: [\"title\", \"complete\", \"start\", \"finish\", \"effortDriven\"],\r\n *      commandItems: [\r\n *        { command: 'export-excel', title: 'Export to CSV', iconCssClass: 'fa fa-file-excel-o', cssClass: '' },\r\n *        { command: 'delete-row', title: 'Delete Row', cssClass: 'bold', textCssClass: 'red' },\r\n *        { command: 'help', title: 'Help', iconCssClass: 'fa fa-question-circle',},\r\n *        { divider: true },\r\n *      ],\r\n *    }\r\n *  };\r\n *\r\n *\r\n * Available contextMenu properties:\r\n *    commandTitle:               Title of the Command section (optional)\r\n *    commandItems:               Array of Command item objects (command/title pair)\r\n *    commandShownOverColumnIds:  Define which column to show the Commands list. If not defined (defaults), the menu will be shown over all columns\r\n *    optionTitle:                Title of the Option section (optional)\r\n *    optionItems:                Array of Options item objects (option/title pair)\r\n *    optionShownOverColumnIds:   Define which column to show the Options list. If not defined (defaults), the menu will be shown over all columns\r\n *    hideCloseButton:            Hide the Close button on top right (defaults to false)\r\n *    hideCommandSection:         Hide the Commands section even when the commandItems array is filled (defaults to false)\r\n *    hideMenuOnScroll:           Do we want to hide the Cell Menu when a scrolling event occurs (defaults to false)?\r\n *    hideOptionSection:          Hide the Options section even when the optionItems array is filled (defaults to false)\r\n *    maxHeight:                  Maximum height that the drop menu will have, can be a number (250) or text (\"none\")\r\n *    width:                      Width that the drop menu will have, can be a number (250) or text (defaults to \"auto\")\r\n *    autoAdjustDrop:             Auto-align dropup or dropdown menu to the left or right depending on grid viewport available space (defaults to true)\r\n *    autoAdjustDropOffset:       Optionally add an offset to the auto-align of the drop menu (defaults to -4)\r\n *    autoAlignSide:              Auto-align drop menu to the left or right depending on grid viewport available space (defaults to true)\r\n *    autoAlignSideOffset:        Optionally add an offset to the left/right side auto-align (defaults to 0)\r\n *    menuUsabilityOverride:      Callback method that user can override the default behavior of enabling/disabling the menu from being usable (must be combined with a custom formatter)\r\n *    subItemChevronClass:        CSS class that can be added on the right side of a sub-item parent (typically a chevron-right icon)\r\n *    subMenuOpenByEvent:         defaults to \"mouseover\", what event type shoud we use to open sub-menu(s), 2 options are available: \"mouseover\" or \"click\"\r\n *\r\n *\r\n * Available menu Command/Option item properties:\r\n *    action:                     Optionally define a callback function that gets executed when item is chosen (and/or use the onCommand event)\r\n *    command:                    A command identifier to be passed to the onCommand event handlers (when using \"commandItems\").\r\n *    option:                     An option to be passed to the onOptionSelected event handlers (when using \"optionItems\").\r\n *    title:                      Menu item text.\r\n *    divider:                    Boolean which tell if the current item is a divider, not an actual command. You could also pass \"divider\" instead of an object\r\n *    disabled:                   Whether the item/command is disabled.\r\n *    hidden:                     Whether the item/command is hidden.\r\n *    subMenuTitle:               Optional sub-menu title that will shows up when sub-menu commmands/options list is opened\r\n *    subMenuTitleCssClass:       Optional sub-menu title CSS class to use with `subMenuTitle`\r\n *    tooltip:                    Item tooltip.\r\n *    cssClass:                   A CSS class to be added to the menu item container.\r\n *    iconCssClass:               A CSS class to be added to the menu item icon.\r\n *    textCssClass:               A CSS class to be added to the menu item text.\r\n *    iconImage:                  A url to the icon image.\r\n *    itemVisibilityOverride:     Callback method that user can override the default behavior of showing/hiding an item from the list\r\n *    itemUsabilityOverride:      Callback method that user can override the default behavior of enabling/disabling an item from the list\r\n *\r\n * The plugin exposes the following events:\r\n *\r\n *    onAfterMenuShow: Fired after the menu is shown.  You can customize the menu or dismiss it by returning false.\r\n *        Event args:\r\n *            cell:         Cell or column index\r\n *            row:          Row index\r\n *            grid:         Reference to the grid.\r\n *\r\n *    onBeforeMenuShow: Fired before the menu is shown.  You can customize the menu or dismiss it by returning false.\r\n *        Event args:\r\n *            cell:         Cell or column index\r\n *            row:          Row index\r\n *            grid:         Reference to the grid.\r\n *\r\n *    onBeforeMenuClose: Fired when the menu is closing.\r\n *        Event args:\r\n *            cell:         Cell or column index\r\n *            row:          Row index\r\n *            grid:         Reference to the grid.\r\n *            menu:         Menu DOM element\r\n *\r\n *    onCommand: Fired on menu option clicked from the Command items list\r\n *        Event args:\r\n *            cell:         Cell or column index\r\n *            row:          Row index\r\n *            grid:         Reference to the grid.\r\n *            command:      Menu command identified.\r\n *            item:         Menu item selected\r\n *            column:    Cell Column definition\r\n *            dataContext:  Cell Data Context (data object)\r\n *            value:        Value of the cell we triggered the context menu from\r\n *\r\n *    onOptionSelected: Fired on menu option clicked from the Option items list\r\n *        Event args:\r\n *            cell:         Cell or column index\r\n *            row:          Row index\r\n *            grid:         Reference to the grid.\r\n *            option:       Menu option selected.\r\n *            item:         Menu item selected\r\n *            column:    Cell Column definition\r\n *            dataContext:  Cell Data Context (data object)\r\n *\r\n *\r\n * @param options {Object} Context Menu Options\r\n * @class Slick.Plugins.ContextMenu\r\n */\r\nexport class SlickContextMenu implements SlickPlugin {\r\n  // --\r\n  // public API\r\n  pluginName = 'ContextMenu' as const;\r\n  onAfterMenuShow = new SlickEvent<MenuFromCellCallbackArgs>('onAfterMenuShow');\r\n  onBeforeMenuShow = new SlickEvent<MenuFromCellCallbackArgs>('onBeforeMenuShow');\r\n  onBeforeMenuClose = new SlickEvent<MenuFromCellCallbackArgs>('onBeforeMenuClose');\r\n  onCommand = new SlickEvent<MenuCommandItemCallbackArgs>('onCommand');\r\n  onOptionSelected = new SlickEvent<MenuOptionItemCallbackArgs>('onOptionSelected');\r\n\r\n  // --\r\n  // protected props\r\n  protected _bindingEventService = new BindingEventService();\r\n  protected _contextMenuProperties: ContextMenuOption;\r\n  protected _currentCell = -1;\r\n  protected _currentRow = -1;\r\n  protected _grid!: SlickGrid;\r\n  protected _gridOptions!: GridOption;\r\n  protected _gridUid = '';\r\n  protected _handler = new EventHandler();\r\n  protected _commandTitleElm?: HTMLSpanElement;\r\n  protected _optionTitleElm?: HTMLSpanElement;\r\n  protected _lastMenuTypeClicked = '';\r\n  protected _menuElm?: HTMLDivElement | null;\r\n  protected _subMenuParentId = '';\r\n  protected _defaults: ContextMenuOption = {\r\n    autoAdjustDrop: true,     // dropup/dropdown\r\n    autoAlignSide: true,      // left/right\r\n    autoAdjustDropOffset: -4,\r\n    autoAlignSideOffset: 0,\r\n    hideMenuOnScroll: false,\r\n    maxHeight: 'none',\r\n    width: 'auto',\r\n    optionShownOverColumnIds: [],\r\n    commandShownOverColumnIds: [],\r\n    subMenuOpenByEvent: 'mouseover',\r\n  };\r\n\r\n  constructor(optionProperties: Partial<ContextMenuOption>) {\r\n    this._contextMenuProperties = Utils.extend({}, this._defaults, optionProperties);\r\n  }\r\n\r\n  init(grid: SlickGrid) {\r\n    this._grid = grid;\r\n    this._gridOptions = grid.getOptions();\r\n    this._gridUid = grid.getUID() || '';\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n    this._handler.subscribe(this._grid.onContextMenu, this.handleOnContextMenu.bind(this));\r\n    if (this._contextMenuProperties.hideMenuOnScroll) {\r\n      this._handler.subscribe(this._grid.onScroll, this.destroyMenu.bind(this));\r\n    }\r\n  }\r\n\r\n  setOptions(newOptions: Partial<ContextMenuOption>) {\r\n    this._contextMenuProperties = Utils.extend({}, this._contextMenuProperties, newOptions);\r\n\r\n    // on the array properties, we want to make sure to overwrite them and not just extending them\r\n    if (newOptions.commandShownOverColumnIds) {\r\n      this._contextMenuProperties.commandShownOverColumnIds = newOptions.commandShownOverColumnIds;\r\n    }\r\n    if (newOptions.optionShownOverColumnIds) {\r\n      this._contextMenuProperties.optionShownOverColumnIds = newOptions.optionShownOverColumnIds;\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    this.onAfterMenuShow.unsubscribe();\r\n    this.onBeforeMenuShow.unsubscribe();\r\n    this.onBeforeMenuClose.unsubscribe();\r\n    this.onCommand.unsubscribe();\r\n    this.onOptionSelected.unsubscribe();\r\n    this._handler.unsubscribeAll();\r\n    this._bindingEventService.unbindAll();\r\n    this._menuElm?.remove();\r\n    this._commandTitleElm = null as any;\r\n    this._optionTitleElm = null as any;\r\n    this._menuElm = null as any;\r\n  }\r\n\r\n  protected createParentMenu(evt: SlickEventData_ | MouseEvent) {\r\n    const e = evt instanceof SlickEventData ? evt.getNativeEvent<MouseEvent | TouchEvent>() : evt;\r\n    const targetEvent = (e as TouchEvent).touches?.[0] ?? e;\r\n    const cell = this._grid.getCellFromEvent(e);\r\n    this._currentCell = cell?.cell ?? 0;\r\n    this._currentRow = cell?.row ?? 0;\r\n    const columnDef = this._grid.getColumns()[this._currentCell];\r\n\r\n    const isColumnOptionAllowed = this.checkIsColumnAllowed(this._contextMenuProperties.optionShownOverColumnIds ?? [], columnDef.id);\r\n    const isColumnCommandAllowed = this.checkIsColumnAllowed(this._contextMenuProperties.commandShownOverColumnIds ?? [], columnDef.id);\r\n    const commandItems = this._contextMenuProperties.commandItems || [];\r\n    const optionItems = this._contextMenuProperties.optionItems || [];\r\n\r\n    // make sure there's at least something to show before creating the Context Menu\r\n    if (!columnDef || (!isColumnCommandAllowed && !isColumnOptionAllowed) || (!commandItems.length && !optionItems.length)) {\r\n      return;\r\n    }\r\n\r\n    // delete any prior context menu\r\n    this.destroyMenu(e);\r\n\r\n    // Let the user modify the menu or cancel altogether,\r\n    // or provide alternative menu implementation.\r\n    if (this.onBeforeMenuShow.notify({\r\n      cell: this._currentCell,\r\n      row: this._currentRow,\r\n      grid: this._grid\r\n    }, e, this).getReturnValue() === false) {\r\n      return;\r\n    }\r\n\r\n    // create 1st parent menu container & reposition it\r\n    this._menuElm = this.createMenu(commandItems, optionItems);\r\n    this._menuElm.style.top = `${targetEvent.pageY}px`;\r\n    this._menuElm.style.left = `${targetEvent.pageX}px`;\r\n    this._menuElm.style.display = 'block';\r\n    document.body.appendChild(this._menuElm);\r\n\r\n    if (this.onAfterMenuShow.notify({\r\n      cell: this._currentCell,\r\n      row: this._currentRow,\r\n      grid: this._grid\r\n    }, e, this).getReturnValue() === false) {\r\n      return;\r\n    }\r\n\r\n    return this._menuElm;\r\n  }\r\n\r\n  protected createMenu(commandItems: Array<MenuCommandItem | 'divider'>, optionItems: Array<MenuOptionItem | 'divider'>, level = 0, item?: MenuCommandItem | MenuOptionItem | 'divider') {\r\n    const columnDef = this._grid.getColumns()[this._currentCell];\r\n    const dataContext = this._grid.getDataItem(this._currentRow);\r\n    const isColumnOptionAllowed = this.checkIsColumnAllowed(this._contextMenuProperties.optionShownOverColumnIds ?? [], columnDef.id);\r\n    const isColumnCommandAllowed = this.checkIsColumnAllowed(this._contextMenuProperties.commandShownOverColumnIds ?? [], columnDef.id);\r\n\r\n    // create a new context menu\r\n    const maxHeight = isNaN(this._contextMenuProperties.maxHeight as number) ? this._contextMenuProperties.maxHeight : `${this._contextMenuProperties.maxHeight ?? 0}px`;\r\n    const width = isNaN(this._contextMenuProperties.width as number) ? this._contextMenuProperties.width : `${this._contextMenuProperties.maxWidth ?? 0}px`;\r\n\r\n    // to avoid having multiple sub-menu trees opened,\r\n    // we need to somehow keep trace of which parent menu the tree belongs to\r\n    // and we should keep ref of only the first sub-menu parent, we can use the command name (remove any whitespaces though)\r\n    const subMenuCommand = (item as MenuCommandItem)?.command;\r\n    let subMenuId = (level === 1 && subMenuCommand) ? subMenuCommand.replaceAll(' ', '') : '';\r\n    if (subMenuId) {\r\n      this._subMenuParentId = subMenuId;\r\n    }\r\n    if (level > 1) {\r\n      subMenuId = this._subMenuParentId;\r\n    }\r\n\r\n    const menuClasses = `slick-context-menu slick-menu-level-${level} ${this._gridUid}`;\r\n    const bodyMenuElm = document.body.querySelector<HTMLDivElement>(`.slick-context-menu.slick-menu-level-${level}${this.getGridUidSelector()}`);\r\n\r\n    // return menu/sub-menu if it's already opened unless we are on different sub-menu tree if so close them all\r\n    if (bodyMenuElm) {\r\n      if (bodyMenuElm.dataset.subMenuParent === subMenuId) {\r\n        return bodyMenuElm;\r\n      }\r\n      this.destroySubMenus();\r\n    }\r\n\r\n    const menuElm = document.createElement('div');\r\n    menuElm.className = menuClasses;\r\n    if (level > 0) {\r\n      menuElm.classList.add('slick-submenu');\r\n      if (subMenuId) {\r\n        menuElm.dataset.subMenuParent = subMenuId;\r\n      }\r\n    }\r\n    menuElm.ariaLabel = level > 1 ? 'SubMenu' : 'Context Menu';\r\n    menuElm.role = 'menu';\r\n    if (width) {\r\n      menuElm.style.width = width as string;\r\n    }\r\n    if (maxHeight) {\r\n      menuElm.style.maxHeight = maxHeight as string;\r\n    }\r\n\r\n    menuElm.style.display = 'none';\r\n\r\n    let closeButtonElm: HTMLButtonElement | null = null;\r\n    if (level === 0) {\r\n      closeButtonElm = document.createElement('button');\r\n      closeButtonElm.type = 'button';\r\n      closeButtonElm.className = 'close';\r\n      closeButtonElm.dataset.dismiss = 'slick-context-menu';\r\n      closeButtonElm.ariaLabel = 'Close';\r\n\r\n      const spanCloseElm = document.createElement('span');\r\n      spanCloseElm.className = 'close';\r\n      spanCloseElm.ariaHidden = 'true';\r\n      spanCloseElm.textContent = '\u00D7';\r\n      closeButtonElm.appendChild(spanCloseElm);\r\n    }\r\n\r\n    // -- Option List section\r\n    if (!this._contextMenuProperties.hideOptionSection && isColumnOptionAllowed && optionItems.length > 0) {\r\n      const optionMenuElm = document.createElement('div');\r\n      optionMenuElm.className = 'slick-context-menu-option-list';\r\n      optionMenuElm.role = 'menu';\r\n\r\n      // when creating sub-menu add its sub-menu title when exists\r\n      if (item && level > 0) {\r\n        this.addSubMenuTitleWhenExists(item, optionMenuElm); // add sub-menu title when exists\r\n      }\r\n\r\n      if (closeButtonElm && !this._contextMenuProperties.hideCloseButton) {\r\n        this._bindingEventService.bind(closeButtonElm, 'click', this.handleCloseButtonClicked.bind(this) as EventListener);\r\n        menuElm.appendChild(closeButtonElm);\r\n      }\r\n      menuElm.appendChild(optionMenuElm);\r\n\r\n      this.populateCommandOrOptionItems(\r\n        'option',\r\n        this._contextMenuProperties,\r\n        optionMenuElm,\r\n        optionItems,\r\n        { cell: this._currentCell, row: this._currentRow, column: columnDef, dataContext, grid: this._grid, level }\r\n      );\r\n    }\r\n\r\n    // -- Command List section\r\n    if (!this._contextMenuProperties.hideCommandSection && isColumnCommandAllowed && commandItems.length > 0) {\r\n      const commandMenuElm = document.createElement('div');\r\n      commandMenuElm.className = 'slick-context-menu-command-list';\r\n      commandMenuElm.role = 'menu';\r\n\r\n      // when creating sub-menu add its sub-menu title when exists\r\n      if (item && level > 0) {\r\n        this.addSubMenuTitleWhenExists(item, commandMenuElm); // add sub-menu title when exists\r\n      }\r\n\r\n      if (closeButtonElm && !this._contextMenuProperties.hideCloseButton && (!isColumnOptionAllowed || optionItems.length === 0 || this._contextMenuProperties.hideOptionSection)) {\r\n        this._bindingEventService.bind(closeButtonElm, 'click', this.handleCloseButtonClicked.bind(this) as EventListener);\r\n        menuElm.appendChild(closeButtonElm);\r\n      }\r\n\r\n      menuElm.appendChild(commandMenuElm);\r\n      this.populateCommandOrOptionItems(\r\n        'command',\r\n        this._contextMenuProperties,\r\n        commandMenuElm,\r\n        commandItems,\r\n        { cell: this._currentCell, row: this._currentRow, column: columnDef, dataContext, grid: this._grid, level }\r\n      );\r\n    }\r\n\r\n    // increment level for possible next sub-menus if exists\r\n    level++;\r\n\r\n    return menuElm;\r\n  }\r\n\r\n  protected addSubMenuTitleWhenExists(item: MenuCommandItem | MenuOptionItem | 'divider', commandOrOptionMenu: HTMLDivElement) {\r\n    if (item !== 'divider' && item?.subMenuTitle) {\r\n      const subMenuTitleElm = document.createElement('div');\r\n      subMenuTitleElm.className = 'slick-menu-title';\r\n      subMenuTitleElm.textContent = item.subMenuTitle as string;\r\n      const subMenuTitleClass = item.subMenuTitleCssClass as string;\r\n      if (subMenuTitleClass) {\r\n        subMenuTitleElm.classList.add(...Utils.classNameToList(subMenuTitleClass));\r\n      }\r\n\r\n      commandOrOptionMenu.appendChild(subMenuTitleElm);\r\n    }\r\n  }\r\n\r\n  protected handleCloseButtonClicked(e: MouseEvent | TouchEvent) {\r\n    if (!e.defaultPrevented) {\r\n      this.destroyMenu(e);\r\n    }\r\n  }\r\n\r\n  destroyMenu(e?: Event | SlickEventData_, args?: { cell: number; row: number; }) {\r\n    this._menuElm = this._menuElm || document.querySelector(`.slick-context-menu${this.getGridUidSelector()}`);\r\n\r\n    if (this._menuElm?.remove) {\r\n      if (this.onBeforeMenuClose.notify({\r\n        cell: args?.cell ?? 0,\r\n        row: args?.row ?? 0,\r\n        grid: this._grid,\r\n      }, e, this).getReturnValue() === false) {\r\n        return;\r\n      }\r\n      this._menuElm.remove();\r\n      this._menuElm = null;\r\n    }\r\n    this.destroySubMenus();\r\n  }\r\n\r\n  /** Destroy all parent menus and any sub-menus */\r\n  destroyAllMenus() {\r\n    this.destroySubMenus();\r\n\r\n    // remove all parent menu listeners before removing them from the DOM\r\n    this._bindingEventService.unbindAll('parent-menu');\r\n    document.querySelectorAll(`.slick-context-menu${this.getGridUidSelector()}`)\r\n      .forEach(subElm => subElm.remove());\r\n  }\r\n\r\n  /** Close and destroy all previously opened sub-menus */\r\n  destroySubMenus() {\r\n    this._bindingEventService.unbindAll('sub-menu');\r\n    document.querySelectorAll(`.slick-context-menu.slick-submenu${this.getGridUidSelector()}`)\r\n      .forEach(subElm => subElm.remove());\r\n  }\r\n\r\n  protected checkIsColumnAllowed(columnIds: Array<number | string>, columnId: number | string) {\r\n    let isAllowedColumn = false;\r\n\r\n    if (columnIds?.length > 0) {\r\n      for (let o = 0, ln = columnIds.length; o < ln; o++) {\r\n        if (columnIds[o] === columnId) {\r\n          isAllowedColumn = true;\r\n        }\r\n      }\r\n    } else {\r\n      isAllowedColumn = true;\r\n    }\r\n    return isAllowedColumn;\r\n  }\r\n\r\n  protected getGridUidSelector() {\r\n    const gridUid = this._grid.getUID() || '';\r\n    return gridUid ? `.${gridUid}` : '';\r\n  }\r\n\r\n  protected handleOnContextMenu(evt: SlickEventData_ | DOMMouseOrTouchEvent<HTMLDivElement>, args: MenuCommandItemCallbackArgs) {\r\n    this.destroyAllMenus(); // make there's only 1 parent menu opened at a time\r\n    const e = evt instanceof SlickEventData ? evt.getNativeEvent<DOMMouseOrTouchEvent<HTMLDivElement>>() : evt;\r\n    e.preventDefault();\r\n    const cell = this._grid.getCellFromEvent(e);\r\n\r\n    if (cell) {\r\n      const columnDef = this._grid.getColumns()[cell.cell];\r\n      const dataContext = this._grid.getDataItem(cell.row);\r\n\r\n      // run the override function (when defined), if the result is false it won't go further\r\n      args = args || {};\r\n      args.cell = cell.cell;\r\n      args.row = cell.row;\r\n      args.column = columnDef;\r\n      args.dataContext = dataContext;\r\n      args.grid = this._grid;\r\n\r\n      if (!this.runOverrideFunctionWhenExists(this._contextMenuProperties.menuUsabilityOverride, args)) {\r\n        return;\r\n      }\r\n\r\n      // create the DOM element\r\n      this._menuElm = this.createParentMenu(e as MouseEvent);\r\n\r\n      // reposition the menu to where the user clicked\r\n      if (this._menuElm) {\r\n        this.repositionMenu(e, this._menuElm);\r\n        this._menuElm.style.display = 'block';\r\n      }\r\n\r\n      // Hide the menu on outside click.\r\n      this._bindingEventService.bind(document.body, 'mousedown', this.handleBodyMouseDown.bind(this) as EventListener);\r\n    }\r\n  }\r\n\r\n  /** When users click outside the Cell Menu, we will typically close the Cell Menu (and any sub-menus) */\r\n  protected handleBodyMouseDown(e: DOMMouseOrTouchEvent<HTMLDivElement>) {\r\n    // did we click inside the menu or any of its sub-menu(s)\r\n    let isMenuClicked = false;\r\n    if (this._menuElm?.contains(e.target)) {\r\n      isMenuClicked = true;\r\n    }\r\n    if (!isMenuClicked) {\r\n      document\r\n        .querySelectorAll(`.slick-context-menu.slick-submenu${this.getGridUidSelector()}`)\r\n        .forEach(subElm => {\r\n          if (subElm.contains(e.target)) {\r\n            isMenuClicked = true;\r\n          }\r\n        });\r\n    }\r\n\r\n    if (this._menuElm !== e.target && !isMenuClicked && !e.defaultPrevented) {\r\n      this.destroyMenu(e, { cell: this._currentCell, row: this._currentRow });\r\n    }\r\n  }\r\n\r\n  /** Construct the Command Items section. */\r\n  protected populateCommandOrOptionItems(\r\n    itemType: MenuType,\r\n    contextMenu: ContextMenuOption,\r\n    commandOrOptionMenuElm: HTMLElement,\r\n    commandOrOptionItems: Array<MenuCommandItem | 'divider'> | Array<MenuOptionItem | 'divider'>,\r\n    args: { cell: number, row: number, column: Column, dataContext: any, grid: SlickGrid, level: number }\r\n  ) {\r\n    if (!args || !commandOrOptionItems || !contextMenu) {\r\n      return;\r\n    }\r\n\r\n    // user could pass a title on top of the Commands/Options section\r\n    const level = args?.level || 0;\r\n    const isSubMenu = level > 0;\r\n    if (contextMenu?.[`${itemType}Title`] && !isSubMenu) {\r\n      this[`_${itemType}TitleElm`] = document.createElement('div');\r\n      this[`_${itemType}TitleElm`]!.className = 'slick-menu-title';\r\n      this[`_${itemType}TitleElm`]!.textContent = contextMenu[`${itemType}Title`] as string;\r\n      commandOrOptionMenuElm.appendChild(this[`_${itemType}TitleElm`]!);\r\n    }\r\n\r\n    for (let i = 0, ln = commandOrOptionItems.length; i < ln; i++) {\r\n      let addClickListener = true;\r\n      const item = commandOrOptionItems[i];\r\n\r\n      // run each override functions to know if the item is visible and usable\r\n      const isItemVisible = this.runOverrideFunctionWhenExists<typeof args>((item as MenuCommandItem | MenuOptionItem).itemVisibilityOverride, args);\r\n      const isItemUsable = this.runOverrideFunctionWhenExists<typeof args>((item as MenuCommandItem | MenuOptionItem).itemUsabilityOverride, args);\r\n\r\n      // if the result is not visible then there's no need to go further\r\n      if (!isItemVisible) {\r\n        continue;\r\n      }\r\n\r\n      // when the override is defined, we need to use its result to update the disabled property\r\n      // so that \"handleMenuItemClick\" has the correct flag and won't trigger a command clicked event\r\n      if (Object.prototype.hasOwnProperty.call(item, 'itemUsabilityOverride')) {\r\n        (item as MenuCommandItem | MenuOptionItem).disabled = isItemUsable ? false : true;\r\n      }\r\n\r\n      const liElm = document.createElement('div');\r\n      liElm.className = 'slick-context-menu-item';\r\n      liElm.role = 'menuitem';\r\n\r\n      if ((item as MenuCommandItem | MenuOptionItem).divider || item === 'divider') {\r\n        liElm.classList.add('slick-context-menu-item-divider');\r\n        addClickListener = false;\r\n      }\r\n\r\n      // if the item is disabled then add the disabled css class\r\n      if ((item as MenuCommandItem | MenuOptionItem).disabled || !isItemUsable) {\r\n        liElm.classList.add('slick-context-menu-item-disabled');\r\n      }\r\n\r\n      // if the item is hidden then add the hidden css class\r\n      if ((item as MenuCommandItem | MenuOptionItem).hidden) {\r\n        liElm.classList.add('slick-context-menu-item-hidden');\r\n      }\r\n\r\n      if ((item as MenuCommandItem | MenuOptionItem).cssClass) {\r\n        liElm.classList.add(...Utils.classNameToList((item as MenuCommandItem | MenuOptionItem).cssClass));\r\n      }\r\n\r\n      if ((item as MenuCommandItem | MenuOptionItem).tooltip) {\r\n        liElm.title = (item as MenuCommandItem | MenuOptionItem).tooltip || '';\r\n      }\r\n\r\n      const iconElm = document.createElement('div');\r\n      iconElm.className = 'slick-context-menu-icon';\r\n\r\n      liElm.appendChild(iconElm);\r\n\r\n      if ((item as MenuCommandItem | MenuOptionItem).iconCssClass) {\r\n        iconElm.classList.add(...Utils.classNameToList((item as MenuCommandItem | MenuOptionItem).iconCssClass));\r\n      }\r\n\r\n      if ((item as MenuCommandItem | MenuOptionItem).iconImage) {\r\n        iconElm.style.backgroundImage = `url(${(item as MenuCommandItem | MenuOptionItem).iconImage})`;\r\n      }\r\n\r\n      const textElm = document.createElement('span');\r\n      textElm.className = 'slick-context-menu-content';\r\n      textElm.textContent = (item as MenuCommandItem | MenuOptionItem).title || '';\r\n\r\n      liElm.appendChild(textElm);\r\n\r\n      if ((item as MenuCommandItem | MenuOptionItem).textCssClass) {\r\n        textElm.classList.add(...Utils.classNameToList((item as MenuCommandItem | MenuOptionItem).textCssClass));\r\n      }\r\n\r\n      commandOrOptionMenuElm.appendChild(liElm);\r\n\r\n      if (addClickListener) {\r\n        const eventGroup = isSubMenu ? 'sub-menu' : 'parent-menu';\r\n        this._bindingEventService.bind(liElm, 'click', this.handleMenuItemClick.bind(this, item, itemType, level) as EventListener, undefined, eventGroup);\r\n      }\r\n\r\n      // optionally open sub-menu(s) by mouseover\r\n      if (this._contextMenuProperties.subMenuOpenByEvent === 'mouseover') {\r\n        this._bindingEventService.bind(liElm, 'mouseover', ((e: DOMMouseOrTouchEvent<HTMLDivElement>) => {\r\n          if ((item as MenuCommandItem).commandItems || (item as MenuOptionItem).optionItems) {\r\n            this.repositionSubMenu(item, itemType, level, e);\r\n            this._lastMenuTypeClicked = itemType;\r\n          } else if (!isSubMenu) {\r\n            this.destroySubMenus();\r\n          }\r\n        }) as EventListener);\r\n      }\r\n\r\n      // the option/command item could be a sub-menu if it has another list of commands/options\r\n      if ((item as MenuCommandItem).commandItems || (item as MenuOptionItem).optionItems) {\r\n        const chevronElm = document.createElement('span');\r\n        chevronElm.className = 'sub-item-chevron';\r\n        if (this._contextMenuProperties.subItemChevronClass) {\r\n          chevronElm.classList.add(...Utils.classNameToList(this._contextMenuProperties.subItemChevronClass));\r\n        } else {\r\n          chevronElm.textContent = '\u2B9E'; // \u2B9E or \u25B8\r\n        }\r\n\r\n        liElm.classList.add('slick-submenu-item');\r\n        liElm.appendChild(chevronElm);\r\n        continue;\r\n      }\r\n    }\r\n  }\r\n\r\n  protected handleMenuItemClick(item: MenuCommandItem | MenuOptionItem | 'divider', type: MenuType, level = 0, e: DOMMouseOrTouchEvent<HTMLDivElement>) {\r\n    if ((item as never)?.[type] !== undefined && item !== 'divider' && !item.disabled && !(item as MenuCommandItem | MenuOptionItem).divider && this._currentCell !== undefined && this._currentRow !== undefined) {\r\n      if (type === 'option' && !this._grid.getEditorLock().commitCurrentEdit()) {\r\n        return;\r\n      }\r\n      const optionOrCommand = (item as any)[type] !== undefined ? (item as any)[type] : '';\r\n      const row = this._currentRow;\r\n      const cell = this._currentCell;\r\n      const columnDef = this._grid.getColumns()[cell];\r\n      const dataContext = this._grid.getDataItem(row);\r\n      let cellValue;\r\n\r\n      if (Object.prototype.hasOwnProperty.call(dataContext, columnDef?.field)) {\r\n        cellValue = dataContext[columnDef.field];\r\n      }\r\n\r\n      if (optionOrCommand !== undefined && !(item as any)[`${type}Items`]) {\r\n        // user could execute a callback through 2 ways\r\n        // via the onCommand event and/or an action callback\r\n        const callbackArgs = {\r\n          cell,\r\n          row,\r\n          grid: this._grid,\r\n          [type]: optionOrCommand,\r\n          item,\r\n          column: columnDef,\r\n          dataContext,\r\n          value: cellValue\r\n        };\r\n        const eventType = type === 'command' ? 'onCommand' : 'onOptionSelected';\r\n        this[eventType].notify(callbackArgs as any, e, this);\r\n\r\n        // execute action callback when defined\r\n        if (typeof (item as MenuCommandItem).action === 'function') {\r\n          (item as any).action.call(this, e, callbackArgs);\r\n        }\r\n\r\n        if (!e.defaultPrevented) {\r\n          this.destroyMenu(e, { cell, row });\r\n        }\r\n      } else if ((item as MenuCommandItem).commandItems || (item as MenuOptionItem).optionItems) {\r\n        this.repositionSubMenu(item, type, level, e);\r\n      } else {\r\n        this.destroySubMenus();\r\n      }\r\n      this._lastMenuTypeClicked = type;\r\n    }\r\n  }\r\n\r\n  protected repositionSubMenu(item: MenuCommandItem | MenuOptionItem | 'divider', type: MenuType, level: number, e: DOMMouseOrTouchEvent<HTMLDivElement>) {\r\n    // when we're clicking a grid cell OR our last menu type (command/option) differs then we know that we need to start fresh and close any sub-menus that might still be open\r\n    if (e.target.classList.contains('slick-cell') || this._lastMenuTypeClicked !== type) {\r\n      this.destroySubMenus();\r\n    }\r\n\r\n    // creating sub-menu, we'll also pass level & the item object since we might have \"subMenuTitle\" to show\r\n    const subMenuElm = this.createMenu((item as MenuCommandItem)?.commandItems || [], (item as MenuOptionItem)?.optionItems || [], level + 1, item);\r\n    subMenuElm.style.display = 'block';\r\n    document.body.appendChild(subMenuElm);\r\n    this.repositionMenu(e, subMenuElm);\r\n  }\r\n\r\n  /**\r\n   * Reposition the menu drop (up/down) and the side (left/right)\r\n   * @param {*} event\r\n   */\r\n  protected repositionMenu(e: DOMMouseOrTouchEvent<HTMLDivElement>, menuElm: HTMLElement) {\r\n    const isSubMenu = menuElm.classList.contains('slick-submenu');\r\n    const targetEvent = (e as TouchEvent).touches?.[0] ?? e;\r\n    const parentElm = isSubMenu\r\n      ? e.target.closest('.slick-context-menu-item') as HTMLDivElement\r\n      : e.target.closest('.slick-cell') as HTMLDivElement;\r\n\r\n    if (menuElm && parentElm) {\r\n      const parentOffset = Utils.offset(parentElm);\r\n      let menuOffsetLeft = (isSubMenu && parentElm) ? parentOffset?.left ?? 0 : targetEvent.pageX;\r\n      let menuOffsetTop = parentElm ? parentOffset?.top ?? 0 : targetEvent.pageY;\r\n      const menuHeight = menuElm?.offsetHeight || 0;\r\n      const menuWidth = Number(menuElm?.offsetWidth || this._contextMenuProperties.width || 0);\r\n      const rowHeight = this._gridOptions.rowHeight;\r\n      const dropOffset = Number(this._contextMenuProperties.autoAdjustDropOffset || 0);\r\n      const sideOffset = Number(this._contextMenuProperties.autoAlignSideOffset || 0);\r\n\r\n      // if autoAdjustDrop is enable, we first need to see what position the drop will be located\r\n      // without necessary toggling it's position just yet, we just want to know the future position for calculation\r\n      if (this._contextMenuProperties.autoAdjustDrop) {\r\n        // since we reposition menu below slick cell, we need to take it in consideration and do our calculation from that element\r\n        const spaceBottom = Utils.calculateAvailableSpace(parentElm).bottom;\r\n        const spaceTop = Utils.calculateAvailableSpace(parentElm).top;\r\n        const spaceBottomRemaining = spaceBottom + dropOffset - rowHeight!;\r\n        const spaceTopRemaining = spaceTop - dropOffset + rowHeight!;\r\n        const dropPosition = (spaceBottomRemaining < menuHeight && spaceTopRemaining > spaceBottomRemaining) ? 'top' : 'bottom';\r\n        if (dropPosition === 'top') {\r\n          menuElm.classList.remove('dropdown');\r\n          menuElm.classList.add('dropup');\r\n          if (isSubMenu) {\r\n            menuOffsetTop -= (menuHeight - dropOffset - parentElm.clientHeight);\r\n          } else {\r\n            menuOffsetTop -= menuHeight - dropOffset;\r\n          }\r\n        } else {\r\n          menuElm.classList.remove('dropup');\r\n          menuElm.classList.add('dropdown');\r\n          if (isSubMenu) {\r\n            menuOffsetTop += dropOffset;\r\n          } else {\r\n            menuOffsetTop += rowHeight! + dropOffset;\r\n          }\r\n        }\r\n      }\r\n\r\n      // when auto-align is set, it will calculate whether it has enough space in the viewport to show the drop menu on the right (default)\r\n      // if there isn't enough space on the right, it will automatically align the drop menu to the left\r\n      // to simulate an align left, we actually need to know the width of the drop menu\r\n      if (this._contextMenuProperties.autoAlignSide) {\r\n        const gridPos = this._grid.getGridPosition();\r\n        let subMenuPosCalc = menuOffsetLeft + Number(menuWidth); // calculate coordinate at caller element far right\r\n        if (isSubMenu) {\r\n          subMenuPosCalc += parentElm.clientWidth;\r\n        }\r\n        const browserWidth = document.documentElement.clientWidth;\r\n        const dropSide = (subMenuPosCalc >= gridPos.width || subMenuPosCalc >= browserWidth) ? 'left' : 'right';\r\n        if (dropSide === 'left') {\r\n          menuElm.classList.remove('dropright');\r\n          menuElm.classList.add('dropleft');\r\n          menuOffsetLeft -= menuWidth - sideOffset;\r\n        } else {\r\n          menuElm.classList.remove('dropleft');\r\n          menuElm.classList.add('dropright');\r\n          if (isSubMenu) {\r\n            menuOffsetLeft += sideOffset + parentElm.offsetWidth;\r\n          } else {\r\n            menuOffsetLeft += sideOffset;\r\n          }\r\n        }\r\n      }\r\n\r\n      // ready to reposition the menu\r\n      menuElm.style.top = `${menuOffsetTop}px`;\r\n      menuElm.style.left = `${menuOffsetLeft}px`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method that user can pass to override the default behavior.\r\n   * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\r\n   * @param overrideFn: override function callback\r\n   * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\r\n   */\r\n  protected runOverrideFunctionWhenExists<T = any>(overrideFn: ((args: any) => boolean) | undefined, args: T): boolean {\r\n    if (typeof overrideFn === 'function') {\r\n      return overrideFn.call(this, args);\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      Plugins: {\r\n        ContextMenu: SlickContextMenu\r\n      }\r\n    }\r\n  });\r\n}\r\n", "import { SlickEvent as SlickEvent_, type SlickEventData as SlickEventData_, SlickEventHandler as SlickEventHandler_, Utils as Utils_ } from '../slick.core.js';\r\nimport type { Column, DragRowMove, CrossGridRowMoveManagerOption, FormatterResultWithText, UsabilityOverrideFn } from '../models/index.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst SlickEventHandler = IIFE_ONLY ? Slick.EventHandler : SlickEventHandler_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/**\r\n * Row Move Manager options:\r\n *    cssClass:                 A CSS class to be added to the menu item container.\r\n *    columnId:                 Column definition id (defaults to \"_move\")\r\n *    cancelEditOnDrag:         Do we want to cancel any Editing while dragging a row (defaults to false)\r\n *    disableRowSelection:      Do we want to disable the row selection? (defaults to false)\r\n *    hideRowMoveShadow:        Do we want to hide the row move shadow clone? (defaults to true)\r\n *    rowMoveShadowMarginTop:   When row move shadow is shown, optional margin-top (defaults to 0)\r\n *    rowMoveShadowMarginLeft:  When row move shadow is shown, optional margin-left (defaults to 0)\r\n *    rowMoveShadowOpacity:     When row move shadow is shown, what is its opacity? (defaults to 0.95)\r\n *    rowMoveShadowScale:       When row move shadow is shown, what is its size scale? (default to 0.75)\r\n *    singleRowMove:            Do we want a single row move? Setting this to false means that it's a multple row move (defaults to false)\r\n *    width:                    Width of the column\r\n *    usabilityOverride:        Callback method that user can override the default behavior of the row being moveable or not\r\n *\r\n */\r\nexport class SlickCrossGridRowMoveManager {\r\n  // --\r\n  // public API\r\n  pluginName = 'CrossGridRowMoveManager' as const;\r\n  onBeforeMoveRows = new SlickEvent<{ rows: number[]; insertBefore: number; fromGrid: SlickGrid; toGrid: SlickGrid; }>('onBeforeMoveRows');\r\n  onMoveRows = new SlickEvent<{ rows: number[]; insertBefore: number; fromGrid: SlickGrid; toGrid: SlickGrid; }>('onMoveRows');\r\n\r\n  // --\r\n  // protected props\r\n  protected _grid!: SlickGrid;\r\n  protected _canvas!: HTMLElement;\r\n  protected _dragging = false;\r\n  protected _toGrid!: SlickGrid;\r\n  protected _toCanvas!: HTMLElement;\r\n  protected _usabilityOverride?: UsabilityOverrideFn;\r\n  protected _eventHandler: SlickEventHandler_;\r\n  protected _options: CrossGridRowMoveManagerOption;\r\n  protected _defaults: CrossGridRowMoveManagerOption = {\r\n    columnId: '_move',\r\n    cssClass: undefined,\r\n    cancelEditOnDrag: false,\r\n    disableRowSelection: false,\r\n    hideRowMoveShadow: true,\r\n    rowMoveShadowMarginTop: 0,\r\n    rowMoveShadowMarginLeft: 0,\r\n    rowMoveShadowOpacity: 0.95,\r\n    rowMoveShadowScale: 0.75,\r\n    singleRowMove: false,\r\n    toGrid: undefined as any,\r\n    width: 40,\r\n  };\r\n\r\n  constructor(options: Partial<CrossGridRowMoveManagerOption>) {\r\n    this._options = Utils.extend(true, {}, this._defaults, options);\r\n    this._eventHandler = new SlickEventHandler();\r\n  }\r\n\r\n  init(grid: SlickGrid) {\r\n    this._grid = grid;\r\n    this._canvas = this._grid.getCanvasNode();\r\n    this._toGrid = this._options.toGrid;\r\n    this._toCanvas = this._toGrid.getCanvasNode();\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n\r\n    // user could override the expandable icon logic from within the options or after instantiating the plugin\r\n    if (typeof this._options?.usabilityOverride === 'function') {\r\n      this.usabilityOverride(this._options.usabilityOverride);\r\n    }\r\n\r\n    this._eventHandler\r\n      .subscribe(this._grid.onDragInit, this.handleDragInit.bind(this))\r\n      .subscribe(this._grid.onDragStart as any, this.handleDragStart.bind(this))\r\n      .subscribe(this._grid.onDrag, this.handleDrag.bind(this))\r\n      .subscribe(this._grid.onDragEnd, this.handleDragEnd.bind(this));\r\n  }\r\n\r\n  destroy() {\r\n    this._eventHandler.unsubscribeAll();\r\n  }\r\n\r\n  setOptions(newOptions: CrossGridRowMoveManagerOption) {\r\n    this._options = Utils.extend({}, this._options, newOptions);\r\n  }\r\n\r\n  protected handleDragInit(e: SlickEventData_) {\r\n    // prevent the grid from cancelling drag'n'drop by default\r\n    e.stopImmediatePropagation();\r\n  }\r\n\r\n  protected handleDragStart(e: SlickEventData_, dd: DragRowMove & { fromGrid: SlickGrid; toGrid: SlickGrid; }): boolean | void {\r\n    const cell = this._grid.getCellFromEvent(e) || { cell: -1, row: -1 };\r\n    const currentRow = cell?.row ?? 0;\r\n    const dataContext = this._grid.getDataItem(currentRow);\r\n\r\n    if (!this.checkUsabilityOverride(currentRow, dataContext, this._grid)) {\r\n      return;\r\n    }\r\n\r\n    if (this._options.cancelEditOnDrag && this._grid.getEditorLock().isActive()) {\r\n      this._grid.getEditorLock().cancelCurrentEdit();\r\n    }\r\n\r\n    if (this._grid.getEditorLock().isActive() || !this.isHandlerColumn(cell.cell)) {\r\n      return false;\r\n    }\r\n\r\n    this._dragging = true;\r\n    e.stopImmediatePropagation();\r\n\r\n    // optionally create a shadow element of the row so that we can see all the time which row exactly we're dragging\r\n    if (!this._options.hideRowMoveShadow) {\r\n      const cellNodeElm = this._grid.getCellNode(cell.row, cell.cell);\r\n      const slickRowElm = cellNodeElm?.closest('.slick-row');\r\n      if (slickRowElm) {\r\n        dd.clonedSlickRow = slickRowElm.cloneNode(true) as HTMLDivElement;\r\n        dd.clonedSlickRow.classList.add('slick-reorder-shadow-row');\r\n        dd.clonedSlickRow.style.display = 'none';\r\n        dd.clonedSlickRow.style.marginLeft = Number(this._options.rowMoveShadowMarginLeft || 0) + 'px';\r\n        dd.clonedSlickRow.style.marginTop = Number(this._options.rowMoveShadowMarginTop || 0) + 'px';\r\n        dd.clonedSlickRow.style.opacity = `${this._options.rowMoveShadowOpacity || 0.95}`;\r\n        dd.clonedSlickRow.style.transform = `scale(${this._options.rowMoveShadowScale || 0.75})`;\r\n        this._canvas.appendChild(dd.clonedSlickRow);\r\n      }\r\n    }\r\n\r\n    let selectedRows = this._options.singleRowMove ? [cell.row] : this._grid.getSelectedRows();\r\n    if (selectedRows.length === 0 || !selectedRows.some(selectedRow => selectedRow === cell.row)) {\r\n      selectedRows = [cell.row];\r\n      if (!this._options.disableRowSelection) {\r\n        this._grid.setSelectedRows(selectedRows);\r\n      }\r\n    }\r\n\r\n    selectedRows.sort((a, b) => a - b);\r\n\r\n    const rowHeight = this._grid.getOptions().rowHeight;\r\n\r\n    dd.fromGrid = this._grid;\r\n    dd.toGrid = this._toGrid;\r\n    dd.selectedRows = selectedRows;\r\n\r\n    dd.selectionProxy = document.createElement('div');\r\n    dd.selectionProxy.className = 'slick-reorder-proxy';\r\n    dd.selectionProxy.style.display = 'none';\r\n    dd.selectionProxy.style.position = 'absolute';\r\n    dd.selectionProxy.style.zIndex = '99999';\r\n    dd.selectionProxy.style.width = `${this._toCanvas.clientWidth}px`;\r\n    dd.selectionProxy.style.height = `${rowHeight! * selectedRows.length}px`;\r\n    this._toCanvas.appendChild(dd.selectionProxy);\r\n\r\n    dd.guide = document.createElement('div');\r\n    dd.guide.className = 'slick-reorder-guide';\r\n    dd.guide.style.position = 'absolute';\r\n    dd.guide.style.zIndex = '99999';\r\n    dd.guide.style.width = `${this._toCanvas.clientWidth}px`;\r\n    dd.guide.style.top = `-1000px`;\r\n    this._toCanvas.appendChild(dd.guide);\r\n\r\n    dd.insertBefore = -1;\r\n  }\r\n\r\n  protected handleDrag(evt: SlickEventData_, dd: DragRowMove): boolean | void {\r\n    if (!this._dragging) {\r\n      return;\r\n    }\r\n\r\n    evt.stopImmediatePropagation();\r\n    const e = evt.getNativeEvent<MouseEvent | TouchEvent>();\r\n\r\n    const targetEvent = (e as TouchEvent).touches?.[0] ?? e;\r\n    const top = targetEvent.pageY - (Utils.offset(this._toCanvas)?.top ?? 0);\r\n    dd.selectionProxy.style.top = `${top - 5}px`;\r\n    dd.selectionProxy.style.display = 'block';\r\n\r\n    // if the row move shadow is enabled, we'll also make it follow the mouse cursor\r\n    if (dd.clonedSlickRow) {\r\n      dd.clonedSlickRow.style.top = `${top - 6}px`;\r\n      dd.clonedSlickRow.style.display = 'block';\r\n    }\r\n\r\n    const insertBefore = Math.max(0, Math.min(Math.round(top / this._toGrid.getOptions().rowHeight!), this._toGrid.getDataLength()));\r\n    if (insertBefore !== dd.insertBefore) {\r\n      const eventData = {\r\n        fromGrid: this._grid,\r\n        toGrid: this._toGrid,\r\n        rows: dd.selectedRows,\r\n        insertBefore\r\n      };\r\n\r\n      if (this.onBeforeMoveRows.notify(eventData).getReturnValue() === false) {\r\n        dd.canMove = false;\r\n      } else {\r\n        dd.canMove = true;\r\n      }\r\n\r\n      // if there's a UsabilityOverride defined, we also need to verify that the condition is valid\r\n      if (this._usabilityOverride && dd.canMove) {\r\n        const insertBeforeDataContext = this._toGrid.getDataItem(insertBefore);\r\n        dd.canMove = this.checkUsabilityOverride(insertBefore, insertBeforeDataContext, this._toGrid);\r\n      }\r\n\r\n      // if the new target is possible we'll display the dark blue bar (representin the acceptability) at the target position\r\n      // else it won't show up (it will be off the screen)\r\n      if (!dd.canMove) {\r\n        dd.guide.style.top = '-1000px';\r\n      } else {\r\n        dd.guide.style.top = `${insertBefore * (this._toGrid.getOptions().rowHeight || 0)}px`;\r\n      }\r\n\r\n      dd.insertBefore = insertBefore;\r\n    }\r\n  }\r\n\r\n  protected handleDragEnd(e: SlickEventData_, dd: DragRowMove) {\r\n    if (!this._dragging) {\r\n      return;\r\n    }\r\n    this._dragging = false;\r\n    e.stopImmediatePropagation();\r\n\r\n    dd.guide?.remove();\r\n    dd.selectionProxy?.remove();\r\n    dd.clonedSlickRow?.remove();\r\n\r\n    if (dd.canMove) {\r\n      const eventData = {\r\n        fromGrid: this._grid,\r\n        toGrid: this._toGrid,\r\n        rows: dd.selectedRows,\r\n        insertBefore: dd.insertBefore\r\n      };\r\n      // TODO:  this._grid.remapCellCssClasses ?\r\n      this.onMoveRows.notify(eventData);\r\n    }\r\n  }\r\n\r\n  getColumnDefinition(): Column {\r\n    const columnId = String(this._options?.columnId ?? this._defaults.columnId);\r\n\r\n    return {\r\n      id: columnId,\r\n      name: '',\r\n      field: 'move',\r\n      behavior: 'selectAndMove',\r\n      excludeFromColumnPicker: true,\r\n      excludeFromGridMenu: true,\r\n      excludeFromHeaderMenu: true,\r\n      selectable: false,\r\n      resizable: false,\r\n      width: this._options.width || 40,\r\n      formatter: this.moveIconFormatter.bind(this)\r\n    };\r\n  }\r\n\r\n  protected moveIconFormatter(row: number, _cell: number, _val: any, _column: Column, dataContext: any, grid: SlickGrid): FormatterResultWithText | string {\r\n    if (!this.checkUsabilityOverride(row, dataContext, grid)) {\r\n      return '';\r\n    } else {\r\n      return { addClasses: `cell-reorder dnd ${this._options.cssClass || ''}`.trim(), text: '' };\r\n    }\r\n  }\r\n\r\n  protected checkUsabilityOverride(row: number, dataContext: any, grid: SlickGrid) {\r\n    if (typeof this._usabilityOverride === 'function') {\r\n      return this._usabilityOverride(row, dataContext, grid);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Method that user can pass to override the default behavior or making every row moveable.\r\n   * In order word, user can choose which rows to be an available as moveable (or not) by providing his own logic show/hide icon and usability.\r\n   * @param overrideFn: override function callback\r\n   */\r\n  usabilityOverride(overrideFn: UsabilityOverrideFn) {\r\n    this._usabilityOverride = overrideFn;\r\n  }\r\n\r\n  isHandlerColumn(columnIndex: number | string) {\r\n    return /move|selectAndMove/.test(this._grid.getColumns()[+columnIndex].behavior || '');\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      CrossGridRowMoveManager: SlickCrossGridRowMoveManager\r\n    }\r\n  });\r\n}\r\n\r\n", "import type { CancellablePromiseWrapper, Column, CustomDataView, CustomTooltipOption, Formatter, FormatterResultWithHtml, FormatterResultWithText, GridOption } from '../models/index.js';\r\nimport { type SlickEventData, SlickEventHandler as SlickEventHandler_, Utils as Utils_ } from '../slick.core.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst SlickEventHandler = IIFE_ONLY ? Slick.EventHandler : SlickEventHandler_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/**\r\n * A plugin to add Custom Tooltip when hovering a cell, it subscribes to the cell \"onMouseEnter\" and \"onMouseLeave\" events.\r\n * The \"customTooltip\" is defined in the Column Definition OR Grid Options (the first found will have priority over the second)\r\n *\r\n * USAGE:\r\n *\r\n * Add the slick.customTooltip.(js|css) files and register it with the grid.\r\n *\r\n * To specify a tooltip when hovering a cell, extend the column definition like so:\r\n * const customTooltipPlugin = new Slick.Plugins.CustomTooltip(columns, grid options);\r\n *\r\n * Available plugin options (same options are available in both column definition and/or grid options)\r\n *\r\n * Example 1  - via Column Definition\r\n *  const columns = [\r\n *    {\r\n *      id: \"action\", name: \"Action\", field: \"action\", formatter: fakeButtonFormatter,\r\n *      customTooltip: {\r\n *        formatter: tooltipTaskFormatter,\r\n *        usabilityOverride: (args) => !!(args.dataContext.id % 2) // show it only every second row\r\n *      }\r\n *    }\r\n *  ];\r\n *\r\n *  OR Example 2 - via Grid Options (for all columns), NOTE: the column definition tooltip options will win over the options defined in the grid options\r\n *  const gridOptions = {\r\n *    enableCellNavigation: true,\r\n *    customTooltip: {\r\n *      formatter: tooltipTaskFormatter,\r\n *      usabilityOverride: (args) => !!(args.dataContext.id % 2) // show it only every second row\r\n *    },\r\n *  };\r\n *\r\n * Available options that can be defined from either a column definition or in grid options (column definition options as precendence)\r\n *   asyncParamsPropName:                 defaults to \"__params\", optionally change the property name that will be used to merge the data returned by the async method into the `dataContext` object\r\n *   asyncProcess:                        Async Post method returning a Promise, it must return an object with 1 or more properties. internally the data that will automatically be merged into the `dataContext` object under the `__params` property so that you can use it in your `asyncPostFormatter` formatter.\r\n *   asyncPostFormatter:                  Formatter to execute once the async process is completed, to displayed the actual text result (used when dealing with an Async API to get data to display later in the tooltip)\r\n *   hideArrow:                           defaults to False, should we hide the tooltip pointer arrow?\r\n *   className:                           defaults to \"slick-custom-tooltip\"\r\n *   formatter:                           Formatter to execute for displaying the data that will show in the tooltip. NOTE: when using `asyncProcess`, this formatter will be executed first and prior to the actual async process.\r\n *   headerFormatter:                     Formatter to execute when custom tooltip is over a header column\r\n *   headerRowFormatter:                  Formatter to execute when custom tooltip is over a heade row column (e.g. filter)\r\n *   maxHeight:                           optional maximum height number (in pixel) of the tooltip container\r\n *   maxWidth:                            optional maximum width number (in pixel) of the tooltip container\r\n *   offsetLeft:                          defaults to 0, optional left offset, it must be a positive/negative number (in pixel) that will be added to the offset position calculation of the tooltip container.\r\n *   offsetRight:                         defaults to 0, optional right offset, it must be a positive/negative number (in pixel) that will be added to the offset position calculation of the tooltip container.\r\n *   offsetTopBottom:                     defaults to 4, optional top or bottom offset (depending on which side it shows), it must be a positive/negative number (in pixel) that will be added to the offset position calculation of the tooltip container.\r\n *   position:                            defaults to \"auto\" (available options: 'auto' | 'top' | 'bottom' | 'left-align' | 'right-align'), allows to align the tooltip to the best logical position in the window, by default it will show on top left but if it calculates that it doesn't have enough space it will use bottom (same goes for each side align)\r\n *   regularTooltipWhiteSpace:            defaults to `pre-line`, optionally change the style `white-space` when displaying regular text tooltip. NOTE: when using a formatter it will use the `whiteSpace` setting instead\r\n *   whiteSpace:                          defaults to `normal`, optionally change the style `white-space` when displaying tooltip with formatter (tooltip or regular formatter)\r\n *   useRegularTooltip:                   defaults to False, when set to True it will try parse through the regular cell formatter and try to find a `title` attribute to show as a regular tooltip (also note: this has precedence over customTooltip formatter defined)\r\n *   useRegularTooltipFromFormatterOnly:  defaults to False, optionally force to retrieve the `title` from the Formatter result instead of the cell itself.\r\n *                                            for example, when used in combo with the AutoTooltip plugin we might want to force the tooltip to read the `title` attribute from the formatter result first instead of the cell itself,\r\n *                                            make the cell as a 2nd read, in other words check the formatter prior to the cell which the AutoTooltip might have filled.\r\n *   renderRegularTooltipAsHtml:          defaults to false, regular \"title\" tooltip won't be rendered as html unless specified via this flag (also \"\\r\\n\" will be replaced by <br>)\r\n *   tooltipTextMaxLength:                defaults to 700 (characters), when defined the text will be truncated to the max length characters provided\r\n *   usabilityOverride:                   callback method that user can override the default behavior of showing the tooltip. If it returns False, then the tooltip won't show\r\n *\r\n * @param options {Object} Custom Tooltip Options\r\n * @class Slick.Plugins.CustomTooltip\r\n * @constructor\r\n */\r\n\r\ntype CellType = 'slick-cell' | 'slick-header-column' | 'slick-headerrow-column';\r\n\r\n/**\r\n * CustomTooltip plugin to show/hide tooltips when columns are too narrow to fit content.\r\n * @constructor\r\n * @param {boolean} [options.className=\"slick-custom-tooltip\"]  - custom tooltip class name\r\n * @param {boolean} [options.offsetTop=5]                       - tooltip offset from the top\r\n */\r\nexport class SlickCustomTooltip {\r\n  // --\r\n  // public API\r\n  pluginName = 'CustomTooltip' as const;\r\n\r\n  // --\r\n  // protected props\r\n  protected _cancellablePromise?: CancellablePromiseWrapper;\r\n  protected _cellNodeElm?: HTMLDivElement;\r\n  protected _dataView?: CustomDataView | null;\r\n  protected _grid!: SlickGrid;\r\n  protected _gridOptions!: GridOption;\r\n  protected _tooltipElm?: HTMLDivElement;\r\n  protected _options!: CustomTooltipOption;\r\n  protected _defaults: CustomTooltipOption = {\r\n    className: 'slick-custom-tooltip',\r\n    offsetLeft: 0,\r\n    offsetRight: 0,\r\n    offsetTopBottom: 4,\r\n    hideArrow: false,\r\n    tooltipTextMaxLength: 700,\r\n    regularTooltipWhiteSpace: 'pre-line',\r\n    whiteSpace: 'normal',\r\n  };\r\n  protected _eventHandler = new SlickEventHandler();\r\n  protected _cellTooltipOptions!: CustomTooltipOption;\r\n\r\n  constructor(protected readonly tooltipOptions: Partial<CustomTooltipOption>) { }\r\n\r\n  /**\r\n   * Initialize plugin.\r\n   */\r\n  init(grid: SlickGrid) {\r\n    this._grid = grid;\r\n    const _data = grid?.getData() || [];\r\n    this._dataView = Array.isArray(_data) ? null : _data as CustomDataView;\r\n    this._gridOptions = (grid.getOptions() || {}) as GridOption;\r\n    this._options = Utils.extend(true, {}, this._defaults, this._gridOptions.customTooltip, this.tooltipOptions);\r\n    this._eventHandler\r\n      .subscribe(grid.onMouseEnter, this.handleOnMouseEnter.bind(this))\r\n      .subscribe(grid.onHeaderMouseEnter, (e, args) => this.handleOnHeaderMouseEnterByType(e, args, 'slick-header-column'))\r\n      .subscribe(grid.onHeaderRowMouseEnter, (e, args) => this.handleOnHeaderMouseEnterByType(e, args, 'slick-headerrow-column'))\r\n      .subscribe(grid.onMouseLeave, () => this.hideTooltip())\r\n      .subscribe(grid.onHeaderMouseLeave, () => this.hideTooltip())\r\n      .subscribe(grid.onHeaderRowMouseLeave, () => this.hideTooltip());\r\n  }\r\n\r\n  /**\r\n   * Destroy plugin.\r\n   */\r\n  destroy() {\r\n    this.hideTooltip();\r\n    this._eventHandler.unsubscribeAll();\r\n  }\r\n\r\n  /** depending on the selector type, execute the necessary handler code */\r\n  protected handleOnHeaderMouseEnterByType(e: SlickEventData, args: any, selector: CellType) {\r\n    // before doing anything, let's remove any previous tooltip before\r\n    // and cancel any opened Promise/Observable when using async\r\n    this.hideTooltip();\r\n\r\n    const cell = {\r\n      row: -1, // negative row to avoid pulling any dataContext while rendering\r\n      cell: this._grid.getColumns().findIndex((col) => args?.column?.id === col.id)\r\n    };\r\n    const columnDef = args.column;\r\n    const item = {};\r\n    const isHeaderRowType = selector === 'slick-headerrow-column';\r\n\r\n    // run the override function (when defined), if the result is false it won't go further\r\n    args = args || {};\r\n    args.cell = cell.cell;\r\n    args.row = cell.row;\r\n    args.columnDef = columnDef;\r\n    args.dataContext = item;\r\n    args.grid = this._grid;\r\n    args.type = isHeaderRowType ? 'header-row' : 'header';\r\n\r\n    this._cellTooltipOptions = Utils.extend(true, {}, this._options, columnDef.customTooltip);\r\n    if ((columnDef?.disableTooltip) || !this.runOverrideFunctionWhenExists<typeof args>(this._cellTooltipOptions.usabilityOverride, args)) {\r\n      return;\r\n    }\r\n\r\n    if (columnDef && e.target) {\r\n      this._cellNodeElm = (e.target as HTMLDivElement).closest(`.${selector}`) as HTMLDivElement;\r\n      const formatter = isHeaderRowType ? this._cellTooltipOptions.headerRowFormatter : this._cellTooltipOptions.headerFormatter;\r\n\r\n      if (this._cellTooltipOptions.useRegularTooltip || !formatter) {\r\n        const formatterOrText = !isHeaderRowType ? columnDef.name : this._cellTooltipOptions.useRegularTooltip ? null : formatter;\r\n        this.renderRegularTooltip(formatterOrText, cell, null, columnDef, item);\r\n      } else if (this._cellNodeElm && typeof formatter === 'function') {\r\n        this.renderTooltipFormatter(formatter, cell, null, columnDef, item);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle mouse entering grid cell to show tooltip.\r\n   * @param {jQuery.Event} e - The event\r\n   */\r\n  protected handleOnMouseEnter(e: SlickEventData, args: any) {\r\n    // before doing anything, let's remove any previous tooltip before\r\n    // and cancel any opened Promise/Observable when using async\r\n    this.hideTooltip();\r\n\r\n    if (this._grid && e) {\r\n      // get cell only when it's possible (ie, Composite Editor will not be able to get cell and so it will never show any tooltip)\r\n      const targetClassName = (event?.target as HTMLDivElement)?.closest('.slick-cell')?.className;\r\n      const cell = (targetClassName && /l\\d+/.exec(targetClassName || '')) ? this._grid.getCellFromEvent(e) : null;\r\n\r\n      if (cell) {\r\n        const item = this._dataView ? this._dataView.getItem(cell.row) : this._grid.getDataItem(cell.row);\r\n        const columnDef = this._grid.getColumns()[cell.cell];\r\n        this._cellNodeElm = this._grid.getCellNode(cell.row, cell.cell) as HTMLDivElement;\r\n        this._cellTooltipOptions = Utils.extend(true, {}, this._options, columnDef.customTooltip);\r\n\r\n        if (item && columnDef) {\r\n          // run the override function (when defined), if the result is false it won't go further\r\n          args = args || {};\r\n          args.cell = cell.cell;\r\n          args.row = cell.row;\r\n          args.columnDef = columnDef;\r\n          args.dataContext = item;\r\n          args.grid = this._grid;\r\n          args.type = 'cell';\r\n          if ((columnDef?.disableTooltip) || !this.runOverrideFunctionWhenExists<typeof args>(this._cellTooltipOptions.usabilityOverride, args)) {\r\n            return;\r\n          }\r\n\r\n          const value = item.hasOwnProperty(columnDef.field) ? item[columnDef.field] : null;\r\n\r\n          if (this._cellTooltipOptions.useRegularTooltip || !this._cellTooltipOptions.formatter) {\r\n            this.renderRegularTooltip(columnDef.formatter, cell, value, columnDef, item);\r\n          } else {\r\n            if (typeof this._cellTooltipOptions.formatter === 'function') {\r\n              this.renderTooltipFormatter(this._cellTooltipOptions.formatter, cell, value, columnDef, item);\r\n            }\r\n            if (typeof this._cellTooltipOptions.asyncProcess === 'function') {\r\n              const asyncProcess = this._cellTooltipOptions.asyncProcess(cell.row, cell.cell, value, columnDef, item, this._grid);\r\n              if (!this._cellTooltipOptions.asyncPostFormatter) {\r\n                throw new Error('[SlickGrid] when using \"asyncProcess\", you must also provide an \"asyncPostFormatter\" formatter');\r\n              }\r\n\r\n              if (asyncProcess instanceof Promise) {\r\n                // create a new cancellable promise which will resolve, unless it's cancelled, with the udpated `dataContext` object that includes the `this._this._params`\r\n                this._cancellablePromise = this.cancellablePromise(asyncProcess);\r\n                this._cancellablePromise.promise\r\n                  .then((asyncResult) => {\r\n                    this.asyncProcessCallback(asyncResult, cell, value, columnDef, item);\r\n                  })\r\n                  .catch(function (error) {\r\n                    // we will throw back any errors, unless it's a cancelled promise which in that case will be disregarded (thrown by the promise wrapper cancel() call)\r\n                    if (!(error.isPromiseCancelled)) {\r\n                      throw error;\r\n                    }\r\n                  });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  protected findFirstElementAttribute(inputElm: Element | null | undefined, attributes: string[]): string | null {\r\n    if (inputElm) {\r\n      let outputAttrData: string | null = null;\r\n      attributes.forEach((attribute) => {\r\n        const attrData = inputElm.getAttribute(attribute);\r\n        if (attrData) {\r\n          outputAttrData = attrData;\r\n        }\r\n      });\r\n      return outputAttrData;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Parse the cell formatter and assume it might be html\r\n   * then create a temporary html element to easily retrieve the first [title=\"\"] attribute text content\r\n   * also clear the \"title\" attribute from the grid div text content so that it won't show also as a 2nd browser tooltip\r\n   */\r\n  protected renderRegularTooltip(formatterOrText: Formatter | string | undefined, cell: { row: number; cell: number; }, value: any, columnDef: Column, item: any) {\r\n    const tmpDiv = document.createElement('div');\r\n    this._grid.applyHtmlCode(tmpDiv, this.parseFormatterAndSanitize(formatterOrText, cell, value, columnDef, item));\r\n    let tooltipText = columnDef.toolTip || '';\r\n    let tmpTitleElm;\r\n\r\n    if (!tooltipText) {\r\n      if ((this._cellNodeElm && (this._cellNodeElm.clientWidth < this._cellNodeElm.scrollWidth)) && !this._cellTooltipOptions.useRegularTooltipFromFormatterOnly) {\r\n        tooltipText = (this._cellNodeElm.textContent || '').trim() || '';\r\n        if (this._cellTooltipOptions.tooltipTextMaxLength && (tooltipText.length > this._cellTooltipOptions.tooltipTextMaxLength)) {\r\n          tooltipText = tooltipText.substring(0, this._cellTooltipOptions.tooltipTextMaxLength - 3) + '...';\r\n        }\r\n        tmpTitleElm = this._cellNodeElm;\r\n      } else {\r\n        if (this._cellTooltipOptions.useRegularTooltipFromFormatterOnly) {\r\n          tmpTitleElm = tmpDiv.querySelector('[title], [data-slick-tooltip]');\r\n        } else {\r\n          tmpTitleElm = this.findFirstElementAttribute(this._cellNodeElm, ['title', 'data-slick-tooltip']) ? this._cellNodeElm : tmpDiv.querySelector('[title], [data-slick-tooltip]');\r\n          if ((!tmpTitleElm || !this.findFirstElementAttribute(tmpTitleElm, ['title', 'data-slick-tooltip'])) && this._cellNodeElm) {\r\n            tmpTitleElm = this._cellNodeElm.querySelector('[title], [data-slick-tooltip]');\r\n          }\r\n        }\r\n        if (!tooltipText || (typeof formatterOrText === 'function' && this._cellTooltipOptions.useRegularTooltipFromFormatterOnly)) {\r\n          tooltipText = this.findFirstElementAttribute(tmpTitleElm, ['title', 'data-slick-tooltip']) || '';\r\n        }\r\n      }\r\n    }\r\n\r\n    if (tooltipText !== '') {\r\n      this.renderTooltipFormatter(formatterOrText, cell, value, columnDef, item, tooltipText);\r\n    }\r\n\r\n    // also clear any \"title\" attribute to avoid showing a 2nd browser tooltip\r\n    this.swapAndClearTitleAttribute(tmpTitleElm, tooltipText);\r\n  }\r\n\r\n  /**\r\n * swap and copy the \"title\" attribute into a new custom attribute then clear the \"title\" attribute\r\n * from the grid div text content so that it won't show also as a 2nd browser tooltip\r\n */\r\n  protected swapAndClearTitleAttribute(inputTitleElm?: Element | null, tooltipText?: string) {\r\n    // the title attribute might be directly on the slick-cell container element (when formatter returns a result object)\r\n    // OR in a child element (most commonly as a custom formatter)\r\n    const titleElm = inputTitleElm || (this._cellNodeElm && ((this._cellNodeElm.hasAttribute('title') && this._cellNodeElm.getAttribute('title')) ? this._cellNodeElm : this._cellNodeElm.querySelector('[title]')));\r\n\r\n    // flip tooltip text from `title` to `data-slick-tooltip`\r\n    if (titleElm) {\r\n      titleElm.setAttribute('data-slick-tooltip', tooltipText || '');\r\n      if (titleElm.hasAttribute('title')) {\r\n        titleElm.setAttribute('title', '');\r\n      }\r\n    }\r\n  }\r\n\r\n  protected asyncProcessCallback(asyncResult: any, cell: { row: number, cell: number }, value: any, columnDef: Column, dataContext: any) {\r\n    this.hideTooltip();\r\n    const itemWithAsyncData = Utils.extend(true, {}, dataContext, { [this._cellTooltipOptions.asyncParamsPropName || '__params']: asyncResult });\r\n    this.renderTooltipFormatter(this._cellTooltipOptions.asyncPostFormatter, cell, value, columnDef, itemWithAsyncData);\r\n  }\r\n\r\n  protected cancellablePromise<T = any>(inputPromise: Promise<T>): CancellablePromiseWrapper<T> {\r\n    let hasCancelled = false;\r\n\r\n    if (inputPromise instanceof Promise) {\r\n      return {\r\n        promise: inputPromise.then(function (result) {\r\n          if (hasCancelled) {\r\n            throw { isPromiseCancelled: true };\r\n          }\r\n          return result;\r\n        }),\r\n        cancel: () => hasCancelled = true\r\n      };\r\n    }\r\n    return inputPromise;\r\n  }\r\n\r\n  protected getHtmlElementOffset(element?: HTMLElement | null) {\r\n    if (!element) {\r\n      return undefined;\r\n    }\r\n    const rect = element.getBoundingClientRect();\r\n    let left = 0;\r\n    let top = 0;\r\n    let bottom = 0;\r\n    let right = 0;\r\n\r\n    if (rect.top !== undefined && rect.left !== undefined) {\r\n      top = rect.top + window.pageYOffset;\r\n      left = rect.left + window.pageXOffset;\r\n      right = rect.right;\r\n      bottom = rect.bottom;\r\n    }\r\n    return { top, left, bottom, right };\r\n  }\r\n\r\n  /**\r\n   * hide (remove) tooltip from the DOM,\r\n   * when using async process, it will also cancel any opened Promise/Observable that might still be opened/pending.\r\n   */\r\n  hideTooltip() {\r\n    this._cancellablePromise?.cancel();\r\n    const prevTooltip = document.body.querySelector(`.${this._cellTooltipOptions?.className ?? this._defaults.className}.${this._grid.getUID()}`);\r\n    prevTooltip?.remove();\r\n  }\r\n\r\n  /**\r\n   * Reposition the Tooltip to be top-left position over the cell.\r\n   * By default we use an \"auto\" mode which will allow to position the Tooltip to the best logical position in the window, also when we mention position, we are talking about the relative position against the grid cell.\r\n   * We can assume that in 80% of the time the default position is top-right, the default is \"auto\" but we can also override it and use a specific position.\r\n   * Most of the time positioning of the tooltip will be to the \"top-right\" of the cell is ok but if our column is completely on the right side then we'll want to change the position to \"left\" align.\r\n   * Same goes for the top/bottom position, Most of the time positioning the tooltip to the \"top\" but if we are hovering a cell at the top of the grid and there's no room to display it then we might need to reposition to \"bottom\" instead.\r\n   */\r\n  protected reposition(cell: { row: number; cell: number; }) {\r\n    if (this._tooltipElm) {\r\n      this._cellNodeElm = (this._cellNodeElm || this._grid.getCellNode(cell.row, cell.cell)) as HTMLDivElement;\r\n      const cellPosition = this.getHtmlElementOffset(this._cellNodeElm);\r\n      const cellContainerWidth = this._cellNodeElm.offsetWidth;\r\n      const calculatedTooltipHeight = this._tooltipElm.getBoundingClientRect().height;\r\n      const calculatedTooltipWidth = this._tooltipElm.getBoundingClientRect().width;\r\n      const calculatedBodyWidth = document.body.offsetWidth || window.innerWidth;\r\n\r\n      // first calculate the default (top/left) position\r\n      let newPositionTop = (cellPosition?.top || 0) - this._tooltipElm.offsetHeight - (this._cellTooltipOptions.offsetTopBottom ?? 0);\r\n      let newPositionLeft = (cellPosition?.left || 0) - (this._cellTooltipOptions.offsetRight ?? 0);\r\n\r\n      // user could explicitely use a \"left-align\" arrow position, (when user knows his column is completely on the right in the grid)\r\n      // or when using \"auto\" and we detect not enough available space then we'll position to the \"left\" of the cell\r\n      const position = this._cellTooltipOptions.position || 'auto';\r\n      if (position === 'center') {\r\n        newPositionLeft += (cellContainerWidth / 2) - (calculatedTooltipWidth / 2) + (this._cellTooltipOptions.offsetRight || 0);\r\n        this._tooltipElm.classList.remove('arrow-left-align');\r\n        this._tooltipElm.classList.remove('arrow-right-align');\r\n        this._tooltipElm.classList.add('arrow-center-align');\r\n\r\n      } else if (position === 'right-align' || ((position === 'auto' || position !== 'left-align') && (newPositionLeft + calculatedTooltipWidth) > calculatedBodyWidth)) {\r\n        newPositionLeft -= (calculatedTooltipWidth - cellContainerWidth - (this._cellTooltipOptions.offsetLeft || 0));\r\n        this._tooltipElm.classList.remove('arrow-center-align');\r\n        this._tooltipElm.classList.remove('arrow-left-align');\r\n        this._tooltipElm.classList.add('arrow-right-align');\r\n      } else {\r\n        this._tooltipElm.classList.remove('arrow-center-align');\r\n        this._tooltipElm.classList.remove('arrow-right-align');\r\n        this._tooltipElm.classList.add('arrow-left-align');\r\n      }\r\n\r\n      // do the same calculation/reposition with top/bottom (default is top of the cell or in other word starting from the cell going down)\r\n      if (position === 'bottom' || (position === 'auto' && calculatedTooltipHeight > Utils.calculateAvailableSpace(this._cellNodeElm).top)) {\r\n        newPositionTop = (cellPosition?.top || 0) + (this._gridOptions.rowHeight || 0) + (this._cellTooltipOptions.offsetTopBottom || 0);\r\n        this._tooltipElm.classList.remove('arrow-down');\r\n        this._tooltipElm.classList.add('arrow-up');\r\n      } else {\r\n        this._tooltipElm.classList.add('arrow-down');\r\n        this._tooltipElm.classList.remove('arrow-up');\r\n      }\r\n\r\n      // reposition the tooltip over the cell (90% of the time this will end up using a position on the \"right\" of the cell)\r\n      this._tooltipElm.style.top = newPositionTop + 'px';\r\n      this._tooltipElm.style.left = newPositionLeft + 'px';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse the Custom Formatter (when provided) or return directly the text when it is already a string.\r\n   * We will also sanitize the text in both cases before returning it so that it can be used safely.\r\n   */\r\n  protected parseFormatterAndSanitize(formatterOrText: Formatter | string | undefined, cell: { row: number; cell: number; }, value: any, columnDef: Column, item: unknown): string | HTMLElement {\r\n    if (typeof formatterOrText === 'function') {\r\n      const tooltipResult = formatterOrText(cell.row, cell.cell, value, columnDef, item, this._grid);\r\n      const formatterText = (Object.prototype.toString.call(tooltipResult) !== '[object Object]' ? tooltipResult : (tooltipResult as FormatterResultWithHtml).html || (tooltipResult as FormatterResultWithText).text);\r\n      if (formatterText instanceof HTMLElement) {\r\n        return formatterText;\r\n      }\r\n      return this._grid.sanitizeHtmlString(formatterText as string);\r\n    } else if (typeof formatterOrText === 'string') {\r\n      return this._grid.sanitizeHtmlString(formatterOrText);\r\n    }\r\n    return '';\r\n  }\r\n\r\n\r\n  protected renderTooltipFormatter(formatter: Formatter | string | undefined, cell: { row: number; cell: number; }, value: any, columnDef: Column, item: unknown, tooltipText?: string, inputTitleElm?: Element | null) {\r\n    // create the tooltip DOM element with the text returned by the Formatter\r\n    this._tooltipElm = document.createElement('div');\r\n    this._tooltipElm.className = (this._cellTooltipOptions.className || this._defaults.className) as string;\r\n    this._tooltipElm.classList.add(this._grid.getUID());\r\n    this._tooltipElm.classList.add('l' + cell.cell);\r\n    this._tooltipElm.classList.add('r' + cell.cell);\r\n    let outputText = tooltipText || this.parseFormatterAndSanitize(formatter, cell, value, columnDef, item) || '';\r\n    if (outputText instanceof HTMLElement) {\r\n      const content = outputText.textContent || '';\r\n      if (this._cellTooltipOptions.tooltipTextMaxLength && content.length > this._cellTooltipOptions.tooltipTextMaxLength) {\r\n        outputText.textContent = content.substring(0, this._cellTooltipOptions.tooltipTextMaxLength - 3) + '...';\r\n      }\r\n    } else {\r\n      outputText = (this._cellTooltipOptions.tooltipTextMaxLength && outputText.length > this._cellTooltipOptions.tooltipTextMaxLength) ? outputText.substring(0, this._cellTooltipOptions.tooltipTextMaxLength - 3) + '...' : outputText;\r\n    }\r\n\r\n    let finalOutputText = '';\r\n    if (!tooltipText || (this._cellTooltipOptions?.renderRegularTooltipAsHtml)) {\r\n      if (outputText instanceof HTMLElement) {\r\n        this._grid.applyHtmlCode(this._tooltipElm, outputText);\r\n        finalOutputText = this._grid.sanitizeHtmlString(outputText.textContent || '');\r\n      } else {\r\n        finalOutputText = this._grid.sanitizeHtmlString(outputText);\r\n        this._tooltipElm.innerHTML = finalOutputText;\r\n      }\r\n      this._tooltipElm.style.whiteSpace = this._cellTooltipOptions?.whiteSpace ?? this._defaults.whiteSpace as string;\r\n    } else {\r\n      finalOutputText = (outputText instanceof HTMLElement ? outputText.textContent : outputText) || '';\r\n      this._tooltipElm.textContent = finalOutputText;\r\n      this._tooltipElm.style.whiteSpace = this._cellTooltipOptions?.regularTooltipWhiteSpace ?? this._defaults.regularTooltipWhiteSpace as string; // use `pre` so that sequences of white space are collapsed. Lines are broken at newline characters\r\n    }\r\n\r\n    // optional max height/width of the tooltip container\r\n    if (this._cellTooltipOptions.maxHeight) {\r\n      this._tooltipElm.style.maxHeight = this._cellTooltipOptions.maxHeight + 'px';\r\n    }\r\n    if (this._cellTooltipOptions.maxWidth) {\r\n      this._tooltipElm.style.maxWidth = this._cellTooltipOptions.maxWidth + 'px';\r\n    }\r\n\r\n    // when do have text to show, then append the new tooltip to the html body & reposition the tooltip\r\n    if (finalOutputText) {\r\n      document.body.appendChild(this._tooltipElm);\r\n\r\n      // reposition the tooltip on top of the cell that triggered the mouse over event\r\n      this.reposition(cell);\r\n\r\n      // user could optionally hide the tooltip arrow (we can simply update the CSS variables, that's the only way we have to update CSS pseudo)\r\n      if (!this._cellTooltipOptions.hideArrow) {\r\n        this._tooltipElm.classList.add('tooltip-arrow');\r\n      }\r\n\r\n      // also clear any \"title\" attribute to avoid showing a 2nd browser tooltip\r\n      this.swapAndClearTitleAttribute(inputTitleElm, (outputText instanceof HTMLElement ? outputText.textContent : outputText) || '');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method that user can pass to override the default behavior.\r\n   * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\r\n   * @param overrideFn: override function callback\r\n   * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\r\n   */\r\n  protected runOverrideFunctionWhenExists<T = any>(overrideFn: ((args: any) => boolean) | undefined, args: T): boolean {\r\n    if (typeof overrideFn === 'function') {\r\n      return overrideFn.call(this, args);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  setOptions(newOptions: Partial<CustomTooltipOption>) {\r\n    this._options = Utils.extend({}, this._options, newOptions);\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      Plugins: {\r\n        CustomTooltip: SlickCustomTooltip\r\n      }\r\n    }\r\n  });\r\n}\r\n", "// @ts-ignore\r\nimport type SortableInstance from 'sortablejs';\r\n\r\nimport type { Column, DOMMouseOrTouchEvent, DraggableGroupingOption, Grouping, GroupingGetterFunction } from '../models/index.js';\r\nimport { BindingEventService as BindingEventService_, SlickEvent as SlickEvent_, SlickEventHandler as SlickEventHandler_, Utils as Utils_ } from '../slick.core.js';\r\nimport type { SlickDataView } from '../slick.dataview.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst SlickEventHandler = IIFE_ONLY ? Slick.EventHandler : SlickEventHandler_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/**\r\n *\r\n * Draggable Grouping contributed by:  Muthukumar Selvarasu\r\n *  muthukumar{dot}se{at}gmail{dot}com\r\n *  github.com/muthukumarse/Slickgrid\r\n *\r\n * NOTES:\r\n *     This plugin provides the Draggable Grouping feature which could be located in either the Top-Header or the Pre-Header\r\n * A plugin to add Draggable Grouping feature.\r\n *\r\n * USAGE:\r\n *\r\n * Add the plugin .js & .css files and register it with the grid.\r\n *\r\n *\r\n * The plugin expose the following methods:\r\n *    destroy: used to destroy the plugin\r\n *    setDroppedGroups: provide option to set default grouping on loading\r\n *    clearDroppedGroups: provide option to clear grouping\r\n *    getSetupColumnReorder: its function to setup draggable feature agains Header Column, should be passed on grid option. Also possible to pass custom function\r\n *\r\n *\r\n * The plugin expose the following event(s):\r\n *    onGroupChanged: pass the grouped columns to who subscribed.\r\n *\r\n */\r\nexport class SlickDraggableGrouping {\r\n  // --\r\n  // public API\r\n  pluginName = 'DraggableGrouping' as const;\r\n  onGroupChanged = new SlickEvent<{ caller?: string; groupColumns: Grouping[]; }>('onGroupChanged');\r\n\r\n  // --\r\n  // protected props\r\n  protected _grid!: SlickGrid;\r\n  protected _gridUid = '';\r\n  protected _gridColumns: Column[] = [];\r\n  protected _dataView!: SlickDataView;\r\n  protected _dropzoneElm!: HTMLDivElement;\r\n  protected _droppableInstance?: SortableInstance;\r\n  protected _dropzonePlaceholder!: HTMLDivElement;\r\n  protected _groupToggler?: HTMLDivElement;\r\n  protected _options: DraggableGroupingOption;\r\n  protected _defaults: DraggableGroupingOption = {\r\n    dropPlaceHolderText: 'Drop a column header here to group by the column',\r\n    hideGroupSortIcons: false,\r\n    hideToggleAllButton: false,\r\n    toggleAllButtonText: '',\r\n    toggleAllPlaceholderText: 'Toggle all Groups',\r\n  };\r\n  protected _bindingEventService = new BindingEventService();\r\n  protected _handler = new SlickEventHandler();\r\n  protected _sortableLeftInstance?: SortableInstance;\r\n  protected _sortableRightInstance?: SortableInstance;\r\n  protected _columnsGroupBy: Column[] = [];\r\n\r\n  /**\r\n   * @param options {Object} Options:\r\n   *    deleteIconCssClass:  an extra CSS class to add to the delete button (default undefined), if deleteIconCssClass && deleteIconImage undefined then slick-groupby-remove-image class will be added\r\n   *    deleteIconImage:     a url to the delete button image (default undefined)\r\n   *    groupIconCssClass:   an extra CSS class to add to the grouping field hint  (default undefined)\r\n   *    groupIconImage:      a url to the grouping field hint image (default undefined)\r\n   *    dropPlaceHolderText:      option to specify set own placeholder note text\r\n   */\r\n  constructor(options: Partial<DraggableGroupingOption>) {\r\n    this._options = Utils.extend(true, {}, this._defaults, options);\r\n  }\r\n\r\n  /**\r\n   * Initialize plugin.\r\n   */\r\n  init(grid: SlickGrid) {\r\n    this._grid = grid;\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n\r\n    this._gridUid = this._grid.getUID();\r\n    this._gridColumns = this._grid.getColumns();\r\n    this._dataView = this._grid.getData();\r\n    this._dropzoneElm = this._grid.getTopHeaderPanel() || this._grid.getPreHeaderPanel();\r\n    this._dropzoneElm.classList.add('slick-dropzone');\r\n\r\n    const dropPlaceHolderText = this._options.dropPlaceHolderText || 'Drop a column header here to group by the column';\r\n\r\n    this._dropzonePlaceholder = document.createElement('div');\r\n    this._dropzonePlaceholder.className = 'slick-placeholder';\r\n    this._dropzonePlaceholder.textContent = dropPlaceHolderText;\r\n\r\n    this._groupToggler = document.createElement('div');\r\n    this._groupToggler.className = 'slick-group-toggle-all expanded';\r\n    this._groupToggler.style.display = 'none';\r\n\r\n    this._dropzoneElm.appendChild(this._dropzonePlaceholder);\r\n    this._dropzoneElm.appendChild(this._groupToggler);\r\n\r\n    this.setupColumnDropbox();\r\n\r\n\r\n    this._handler.subscribe(this._grid.onHeaderCellRendered, (_e, args) => {\r\n      const column = args.column;\r\n      const node = args.node;\r\n      if (!Utils.isEmptyObject(column.grouping) && node) {\r\n        node.style.cursor = 'pointer'; // add the pointer cursor on each column title\r\n\r\n        // also optionally add an icon beside each column title that can be dragged\r\n        if (this._options.groupIconCssClass || this._options.groupIconImage) {\r\n          const groupableIconElm = document.createElement('span');\r\n          groupableIconElm.className = 'slick-column-groupable';\r\n          if (this._options.groupIconCssClass) {\r\n            groupableIconElm.classList.add(...Utils.classNameToList(this._options.groupIconCssClass));\r\n          }\r\n          if (this._options.groupIconImage) {\r\n            groupableIconElm.style.background = `url(${this._options.groupIconImage}) no-repeat center center`;\r\n          }\r\n          node.appendChild(groupableIconElm);\r\n        }\r\n      }\r\n    });\r\n\r\n    for (let i = 0; i < this._gridColumns.length; i++) {\r\n      const columnId = this._gridColumns[i].field;\r\n      this._grid.updateColumnHeader(columnId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup the column reordering\r\n   * NOTE: this function is a standalone function and is called externally and does not have access to `this` instance\r\n   * @param grid - slick grid object\r\n   * @param headers - slick grid column header elements\r\n   * @param _headerColumnWidthDiff - header column width difference\r\n   * @param setColumns - callback to reassign columns\r\n   * @param setupColumnResize - callback to setup the column resize\r\n   * @param columns - columns array\r\n   * @param getColumnIndex - callback to find index of a column\r\n   * @param uid - grid UID\r\n   * @param trigger - callback to execute when triggering a column grouping\r\n   */\r\n  getSetupColumnReorder(grid: SlickGrid, headers: any, _headerColumnWidthDiff: any, setColumns: (columns: Column[]) => void, setupColumnResize: () => void, _columns: Column[], getColumnIndex: (columnId: string) => number, _uid: string, trigger: (slickEvent: SlickEvent_, data?: any) => void) {\r\n    this.destroySortableInstances();\r\n    const dropzoneElm = grid.getTopHeaderPanel() || grid.getPreHeaderPanel();\r\n    const groupTogglerElm = dropzoneElm.querySelector<HTMLDivElement>('.slick-group-toggle-all');\r\n\r\n    const sortableOptions = {\r\n      animation: 50,\r\n      // chosenClass: 'slick-header-column-active',\r\n      ghostClass: 'slick-sortable-placeholder',\r\n      draggable: '.slick-header-column',\r\n      dataIdAttr: 'data-id',\r\n      group: {\r\n        name: 'shared',\r\n        pull: 'clone',\r\n        put: false,\r\n      },\r\n      revertClone: true,\r\n      // filter: function (_e, target) {\r\n      //   // block column from being able to be dragged if it's already a grouped column\r\n      //   // NOTE: need to disable for now since it also blocks the column reordering\r\n      //   return this.columnsGroupBy.some(c => c.id === target.getAttribute('data-id'));\r\n      // },\r\n      onStart: () => {\r\n        dropzoneElm.classList.add('slick-dropzone-hover');\r\n        dropzoneElm.classList.add('slick-dropzone-placeholder-hover');\r\n        const draggablePlaceholderElm = dropzoneElm.querySelector<HTMLDivElement>('.slick-placeholder');\r\n        if (draggablePlaceholderElm) {\r\n          draggablePlaceholderElm.style.display = 'inline-block';\r\n        }\r\n\r\n        const droppedGroupingElms = dropzoneElm.querySelectorAll<HTMLDivElement>('.slick-dropped-grouping');\r\n        droppedGroupingElms.forEach(droppedGroupingElm => droppedGroupingElm.style.display = 'none');\r\n        if (groupTogglerElm) {\r\n          groupTogglerElm.style.display = 'none';\r\n        }\r\n      },\r\n      onEnd: (e: Event & { item: any; clone: HTMLElement; }) => {\r\n        const draggablePlaceholderElm = dropzoneElm.querySelector<HTMLDivElement>('.slick-placeholder');\r\n        dropzoneElm.classList.remove('slick-dropzone-hover');\r\n        draggablePlaceholderElm?.classList.remove('slick-dropzone-placeholder-hover');\r\n\r\n\r\n        if (this._dropzonePlaceholder) {\r\n          this._dropzonePlaceholder.style.display = 'none';\r\n        }\r\n        if (draggablePlaceholderElm) {\r\n          draggablePlaceholderElm.parentElement?.classList.remove('slick-dropzone-placeholder-hover');\r\n        }\r\n\r\n        const droppedGroupingElms = dropzoneElm.querySelectorAll<HTMLDivElement>('.slick-dropped-grouping');\r\n        if (droppedGroupingElms.length) {\r\n          droppedGroupingElms.forEach(droppedGroupingElm => droppedGroupingElm.style.display = 'inline-flex');\r\n          if (draggablePlaceholderElm) {\r\n            draggablePlaceholderElm.style.display = 'none';\r\n          }\r\n          if (groupTogglerElm) {\r\n            groupTogglerElm.style.display = 'inline-block';\r\n          }\r\n        }\r\n\r\n        if (!grid.getEditorLock().commitCurrentEdit()) {\r\n          return;\r\n        }\r\n\r\n        const reorderedIds = this._sortableLeftInstance?.toArray() ?? [];\r\n\r\n        // when frozen columns are used, headers has more than one entry and we need the ids from all of them.\r\n        // though there is only really a left and right header, this will work even if that should change.\r\n        if (headers.length > 1) {\r\n          const ids = this._sortableRightInstance?.toArray() ?? [];\r\n\r\n          // Note: the loop below could be simplified with:\r\n          // reorderedIds.push.apply(reorderedIds,ids);\r\n          // However, the loop is more in keeping with way-backward compatibility\r\n          for (const id of ids) {\r\n            reorderedIds.push(id);\r\n          }\r\n        }\r\n\r\n        const finalReorderedColumns: Column[] = [];\r\n        const reorderedColumns = grid.getColumns();\r\n        for (const reorderedId of reorderedIds) {\r\n          finalReorderedColumns.push(reorderedColumns[getColumnIndex.call(grid, reorderedId)]);\r\n        }\r\n        setColumns.call(grid, finalReorderedColumns);\r\n        trigger.call(grid, grid.onColumnsReordered, { grid, impactedColumns: finalReorderedColumns });\r\n        e.stopPropagation();\r\n        setupColumnResize.call(grid);\r\n      }\r\n    };\r\n\r\n    this._sortableLeftInstance = Sortable.create(document.querySelector(`.${grid.getUID()} .slick-header-columns.slick-header-columns-left`) as HTMLDivElement, sortableOptions);\r\n    this._sortableRightInstance = Sortable.create(document.querySelector(`.${grid.getUID()} .slick-header-columns.slick-header-columns-right`) as HTMLDivElement, sortableOptions);\r\n\r\n    return {\r\n      sortableLeftInstance: this._sortableLeftInstance,\r\n      sortableRightInstance: this._sortableRightInstance\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Destroy plugin.\r\n   */\r\n  destroy() {\r\n    this.destroySortableInstances();\r\n    if (this._droppableInstance?.el) {\r\n      this._droppableInstance?.destroy();\r\n    }\r\n    this.onGroupChanged.unsubscribe();\r\n    this._handler.unsubscribeAll();\r\n    this._bindingEventService.unbindAll();\r\n    Utils.emptyElement(document.querySelector(`.${this._gridUid} .slick-preheader-panel,.${this._gridUid} .slick-topheader-panel`));\r\n  }\r\n\r\n  protected destroySortableInstances() {\r\n    if (this._sortableLeftInstance?.el) {\r\n      this._sortableLeftInstance?.destroy();\r\n    }\r\n    if (this._sortableRightInstance?.el) {\r\n      this._sortableRightInstance?.destroy();\r\n    }\r\n  }\r\n\r\n  protected addDragOverDropzoneListeners() {\r\n    const draggablePlaceholderElm = this._dropzoneElm.querySelector('.slick-placeholder');\r\n\r\n    if (draggablePlaceholderElm && this._dropzoneElm) {\r\n      this._bindingEventService.bind(draggablePlaceholderElm, 'dragover', (e) => e.preventDefault());\r\n      this._bindingEventService.bind(draggablePlaceholderElm, 'dragenter', () => this._dropzoneElm.classList.add('slick-dropzone-hover'));\r\n      this._bindingEventService.bind(draggablePlaceholderElm, 'dragleave', () => this._dropzoneElm.classList.remove('slick-dropzone-hover'));\r\n    }\r\n  }\r\n\r\n  protected setupColumnDropbox() {\r\n    const dropzoneElm = this._dropzoneElm;\r\n\r\n    this._droppableInstance = Sortable.create(dropzoneElm, {\r\n      group: 'shared',\r\n      // chosenClass: 'slick-header-column-active',\r\n      ghostClass: 'slick-droppable-sortitem-hover',\r\n      draggable: '.slick-dropped-grouping',\r\n      dragoverBubble: true,\r\n      onAdd: (evt: MouseEvent & { item: any; clone: HTMLElement; originalEvent: MouseEvent; }) => {\r\n        const el = evt.item;\r\n        const elId = el.getAttribute('id');\r\n        if (elId?.replace(this._gridUid, '')) {\r\n          this.handleGroupByDrop(dropzoneElm, (Sortable.utils).clone(evt.item));\r\n        }\r\n        evt.clone.style.opacity = '.5';\r\n        el.parentNode?.removeChild(el);\r\n      },\r\n      onUpdate: () => {\r\n        const sortArray = this._droppableInstance?.toArray() ?? [];\r\n        const newGroupingOrder: Column[] = [];\r\n        for (let i = 0, l = sortArray.length; i < l; i++) {\r\n          for (let a = 0, b = this._columnsGroupBy.length; a < b; a++) {\r\n            if (this._columnsGroupBy[a].id === sortArray[i]) {\r\n              newGroupingOrder.push(this._columnsGroupBy[a]);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        this._columnsGroupBy = newGroupingOrder;\r\n        this.updateGroupBy('sort-group');\r\n      },\r\n    });\r\n\r\n    // Sortable doesn't have onOver, we need to implement it ourselves\r\n    this.addDragOverDropzoneListeners();\r\n\r\n    if (this._groupToggler) {\r\n      this._bindingEventService.bind(this._groupToggler, 'click', ((event: DOMMouseOrTouchEvent<HTMLDivElement>) => {\r\n        const target = event.target;\r\n        this.toggleGroupToggler(target, target?.classList.contains('expanded'));\r\n      }) as EventListener);\r\n    }\r\n  }\r\n\r\n  protected handleGroupByDrop(containerElm: HTMLDivElement, headerColumnElm: HTMLDivElement) {\r\n    const headerColDataId = headerColumnElm.getAttribute('data-id');\r\n    const columnId = headerColDataId?.replace(this._gridUid, '');\r\n    let columnAllowed = true;\r\n    for (const colGroupBy of this._columnsGroupBy) {\r\n      if (colGroupBy.id === columnId) {\r\n        columnAllowed = false;\r\n      }\r\n    }\r\n\r\n    if (columnAllowed) {\r\n      for (const col of this._gridColumns) {\r\n        if (col.id === columnId && col.grouping && !Utils.isEmptyObject(col.grouping)) {\r\n          const columnNameElm = headerColumnElm.querySelector('.slick-column-name');\r\n          const entryElm = document.createElement('div');\r\n          entryElm.id = `${this._gridUid}_${col.id}_entry`;\r\n          entryElm.className = 'slick-dropped-grouping';\r\n          entryElm.dataset.id = `${col.id}`;\r\n\r\n          const groupTextElm = document.createElement('div');\r\n          groupTextElm.className = 'slick-dropped-grouping-title';\r\n          groupTextElm.style.display = 'inline-flex';\r\n          groupTextElm.textContent = columnNameElm ? columnNameElm.textContent : headerColumnElm.textContent;\r\n          entryElm.appendChild(groupTextElm);\r\n\r\n          // delete icon\r\n          const groupRemoveIconElm = document.createElement('div');\r\n          groupRemoveIconElm.className = 'slick-groupby-remove';\r\n          if (this._options.deleteIconCssClass) {\r\n            groupRemoveIconElm.classList.add(...Utils.classNameToList(this._options.deleteIconCssClass));\r\n          }\r\n          if (this._options.deleteIconImage) {\r\n            groupRemoveIconElm.classList.add(...Utils.classNameToList(this._options.deleteIconImage));\r\n          }\r\n          if (!this._options.deleteIconCssClass) {\r\n            groupRemoveIconElm.classList.add('slick-groupby-remove-icon');\r\n          }\r\n          if (!this._options.deleteIconCssClass && !this._options.deleteIconImage) {\r\n            groupRemoveIconElm.classList.add('slick-groupby-remove-image');\r\n          }\r\n\r\n          // sorting icons when enabled\r\n          if (this._options?.hideGroupSortIcons !== true && col.sortable) {\r\n            if (col.grouping?.sortAsc === undefined) {\r\n              col.grouping.sortAsc = true;\r\n            }\r\n          }\r\n\r\n          entryElm.appendChild(groupRemoveIconElm);\r\n          entryElm.appendChild(document.createElement('div'));\r\n          containerElm.appendChild(entryElm);\r\n\r\n          this.addColumnGroupBy(col);\r\n          this.addGroupByRemoveClickHandler(col.id, groupRemoveIconElm, headerColumnElm, entryElm);\r\n        }\r\n      }\r\n\r\n      // show the \"Toggle All\" when feature is enabled\r\n      if (this._groupToggler && this._columnsGroupBy.length > 0) {\r\n        this._groupToggler.style.display = 'inline-block';\r\n      }\r\n    }\r\n  }\r\n\r\n  protected addColumnGroupBy(column: Column) {\r\n    this._columnsGroupBy.push(column);\r\n    this.updateGroupBy('add-group');\r\n  }\r\n\r\n  protected addGroupByRemoveClickHandler(id: string | number, groupRemoveIconElm: HTMLDivElement, headerColumnElm: HTMLDivElement, entry: any) {\r\n    this._bindingEventService.bind(groupRemoveIconElm, 'click', () => {\r\n      const boundedElms = this._bindingEventService.getBoundedEvents().filter(boundedEvent => boundedEvent.element === groupRemoveIconElm);\r\n      for (const boundedEvent of boundedElms) {\r\n        this._bindingEventService.unbind(boundedEvent.element, 'click', boundedEvent.listener);\r\n      }\r\n      this.removeGroupBy(id, headerColumnElm, entry);\r\n    });\r\n  }\r\n\r\n  setDroppedGroups(groupingInfo: Array<string | GroupingGetterFunction> | string) {\r\n    const groupingInfos = Array.isArray(groupingInfo) ? groupingInfo : [groupingInfo];\r\n    this._dropzonePlaceholder.style.display = 'none';\r\n    for (const groupInfo of groupingInfos) {\r\n      const columnElm = this._grid.getHeaderColumn(groupInfo as string);\r\n      this.handleGroupByDrop(this._dropzoneElm, columnElm);\r\n    }\r\n  }\r\n\r\n  clearDroppedGroups() {\r\n    this._columnsGroupBy = [];\r\n    this.updateGroupBy('clear-all');\r\n    const allDroppedGroupingElms = this._dropzoneElm.querySelectorAll('.slick-dropped-grouping');\r\n\r\n    for (const groupElm of Array.from(allDroppedGroupingElms)) {\r\n      const groupRemoveBtnElm = this._dropzoneElm.querySelector('.slick-groupby-remove');\r\n      groupRemoveBtnElm?.remove();\r\n      groupElm?.remove();\r\n    }\r\n\r\n    // show placeholder text & hide the \"Toggle All\" when that later feature is enabled\r\n    this._dropzonePlaceholder.style.display = 'inline-block';\r\n    if (this._groupToggler) {\r\n      this._groupToggler.style.display = 'none';\r\n    }\r\n  }\r\n\r\n  protected removeFromArray(arrayToModify: any[], itemToRemove: any) {\r\n    if (Array.isArray(arrayToModify)) {\r\n      const itemIdx = arrayToModify.findIndex(a => a.id === itemToRemove.id);\r\n      if (itemIdx >= 0) {\r\n        arrayToModify.splice(itemIdx, 1);\r\n      }\r\n    }\r\n    return arrayToModify;\r\n  }\r\n\r\n  protected removeGroupBy(id: string | number, _hdrColumnElm: HTMLDivElement, entry: any) {\r\n    entry.remove();\r\n    const groupby: Column[] = [];\r\n    this._gridColumns.forEach((col) => groupby[col.id as any] = col);\r\n    this.removeFromArray(this._columnsGroupBy, groupby[id as any]);\r\n    if (this._columnsGroupBy.length === 0) {\r\n      this._dropzonePlaceholder.style.display = 'block';\r\n      if (this._groupToggler) {\r\n        this._groupToggler.style.display = 'none';\r\n      }\r\n    }\r\n    this.updateGroupBy('remove-group');\r\n  }\r\n\r\n  protected toggleGroupToggler(targetElm: Element | null, collapsing = true, shouldExecuteDataViewCommand = true) {\r\n    if (targetElm) {\r\n      if (collapsing === true) {\r\n        targetElm.classList.add('collapsed');\r\n        targetElm.classList.remove('expanded');\r\n        if (shouldExecuteDataViewCommand) {\r\n          this._dataView.collapseAllGroups();\r\n        }\r\n      } else {\r\n        targetElm.classList.remove('collapsed');\r\n        targetElm.classList.add('expanded');\r\n        if (shouldExecuteDataViewCommand) {\r\n          this._dataView.expandAllGroups();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  protected updateGroupBy(originator: string) {\r\n    if (this._columnsGroupBy.length === 0) {\r\n      this._dataView.setGrouping([]);\r\n      this.onGroupChanged.notify({ caller: originator, groupColumns: [] });\r\n      return;\r\n    }\r\n    const groupingArray: Grouping<any>[] = [];\r\n    this._columnsGroupBy.forEach((element) => groupingArray.push(element.grouping!));\r\n    this._dataView.setGrouping(groupingArray);\r\n    this.onGroupChanged.notify({ caller: originator, groupColumns: groupingArray });\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      DraggableGrouping: SlickDraggableGrouping\r\n    }\r\n  });\r\n}\r\n", "import type {\r\n  Column,\r\n  DOMEvent,\r\n  HeaderButtonItem,\r\n  HeaderButtonOnCommandArgs,\r\n  HeaderButtonOption,\r\n  OnHeaderCellRenderedEventArgs,\r\n  SlickPlugin\r\n} from '../models/index.js';\r\nimport { BindingEventService as BindingEventService_, EventHandler as EventHandler_, SlickEvent as SlickEvent_, type SlickEventData, Utils as Utils_ } from '../slick.core.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : EventHandler_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/***\r\n   * A plugin to add custom buttons to column headers.\r\n   *\r\n   * USAGE:\r\n   *\r\n   * Add the plugin .js & .css files and register it with the grid.\r\n   *\r\n   * To specify a custom button in a column header, extend the column definition like so:\r\n   *\r\n   *   let columns = [\r\n   *     {\r\n   *       id: 'myColumn',\r\n   *       name: 'My column',\r\n   *\r\n   *       // This is the relevant part\r\n   *       header: {\r\n   *          buttons: [\r\n   *              {\r\n   *                // button options\r\n   *              },\r\n   *              {\r\n   *                // button options\r\n   *              }\r\n   *          ]\r\n   *       }\r\n   *     }\r\n   *   ];\r\n   *\r\n   * Available button options:\r\n   *    cssClass:     CSS class to add to the button.\r\n   *    image:        Relative button image path.\r\n   *    disabled:     Whether the item is disabled.\r\n   *    tooltip:      Button tooltip.\r\n   *    showOnHover:  Only show the button on hover.\r\n   *    handler:      Button click handler.\r\n   *    command:      A command identifier to be passed to the onCommand event handlers.\r\n   *\r\n   * Available menu item options:\r\n   *    action:                   Optionally define a callback function that gets executed when item is chosen (and/or use the onCommand event)\r\n   *    command:                  A command identifier to be passed to the onCommand event handlers.\r\n   *    cssClass:                 CSS class to add to the button.\r\n   *    handler:                  Button click handler.\r\n   *    image:                    Relative button image path.\r\n   *    showOnHover:              Only show the button on hover.\r\n   *    tooltip:                  Button tooltip.\r\n   *    itemVisibilityOverride:   Callback method that user can override the default behavior of showing/hiding an item from the list\r\n   *    itemUsabilityOverride:    Callback method that user can override the default behavior of enabling/disabling an item from the list\r\n   *\r\n   * The plugin exposes the following events:\r\n   *    onCommand:    Fired on button click for buttons with 'command' specified.\r\n   *        Event args:\r\n   *            grid:     Reference to the grid.\r\n   *            column:   Column definition.\r\n   *            command:  Button command identified.\r\n   *            button:   Button options.  Note that you can change the button options in your\r\n   *                      event handler, and the column header will be automatically updated to\r\n   *                      reflect them.  This is useful if you want to implement something like a\r\n   *                      toggle button.\r\n   *\r\n   *\r\n   * @param options {Object} Options:\r\n   *    buttonCssClass:   a CSS class to use for buttons (default 'slick-header-button')\r\n   * @class Slick.Plugins.HeaderButtons\r\n   * @constructor\r\n   */\r\nexport class SlickHeaderButtons implements SlickPlugin {\r\n  // --\r\n  // public API\r\n  pluginName = 'HeaderButtons' as const;\r\n  onCommand = new SlickEvent<HeaderButtonOnCommandArgs>('onCommand');\r\n\r\n  // --\r\n  // protected props\r\n  protected _grid!: SlickGrid;\r\n  protected _handler = new EventHandler();\r\n  protected _bindingEventService = new BindingEventService();\r\n  protected _defaults: HeaderButtonOption = {\r\n    buttonCssClass: 'slick-header-button'\r\n  };\r\n  protected _options: HeaderButtonOption;\r\n\r\n  constructor(options: Partial<HeaderButtonOption>) {\r\n    this._options = Utils.extend(true, {}, this._defaults, options);\r\n  }\r\n\r\n  init(grid: SlickGrid) {\r\n    this._grid = grid;\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n    this._handler\r\n      .subscribe(this._grid.onHeaderCellRendered, this.handleHeaderCellRendered.bind(this))\r\n      .subscribe(this._grid.onBeforeHeaderCellDestroy, this.handleBeforeHeaderCellDestroy.bind(this));\r\n\r\n    // Force the grid to re-render the header now that the events are hooked up.\r\n    this._grid.setColumns(this._grid.getColumns());\r\n  }\r\n\r\n  destroy() {\r\n    this._handler.unsubscribeAll();\r\n    this._bindingEventService.unbindAll();\r\n  }\r\n\r\n  protected handleHeaderCellRendered(_e: SlickEventData, args: OnHeaderCellRenderedEventArgs) {\r\n    const column = args.column;\r\n\r\n    if (column.header?.buttons) {\r\n      // Append buttons in reverse order since they are floated to the right.\r\n      let i = column.header.buttons.length;\r\n      while (i--) {\r\n        const button = column.header.buttons[i];\r\n\r\n        // run each override functions to know if the item is visible and usable\r\n        const isItemVisible = this.runOverrideFunctionWhenExists<typeof args>(button.itemVisibilityOverride, args);\r\n        const isItemUsable = this.runOverrideFunctionWhenExists<typeof args>(button.itemUsabilityOverride, args);\r\n\r\n        // if the result is not visible then there's no need to go further\r\n        if (!isItemVisible) {\r\n          continue;\r\n        }\r\n\r\n        // when the override is defined, we need to use its result to update the disabled property\r\n        // so that \"handleMenuItemCommandClick\" has the correct flag and won't trigger a command clicked event\r\n        if (Object.prototype.hasOwnProperty.call(button, 'itemUsabilityOverride')) {\r\n          button.disabled = isItemUsable ? false : true;\r\n        }\r\n\r\n        const btn = document.createElement('div');\r\n        btn.className = this._options.buttonCssClass || '';\r\n        btn.ariaLabel = 'Header Button';\r\n        btn.role = 'button';\r\n\r\n        if (button.disabled) {\r\n          btn.classList.add('slick-header-button-disabled');\r\n        }\r\n\r\n        if (button.showOnHover) {\r\n          btn.classList.add('slick-header-button-hidden');\r\n        }\r\n\r\n        if (button.image) {\r\n          btn.style.backgroundImage = `url(${button.image})`;\r\n        }\r\n\r\n        if (button.cssClass) {\r\n          btn.classList.add(...Utils.classNameToList(button.cssClass));\r\n        }\r\n\r\n        if (button.tooltip) {\r\n          btn.title = button.tooltip;\r\n        }\r\n\r\n        if (button.handler && !button.disabled) {\r\n          this._bindingEventService.bind(btn, 'click', button.handler);\r\n        }\r\n\r\n        this._bindingEventService.bind(btn, 'click', this.handleButtonClick.bind(this, button, args.column) as EventListener);\r\n        args.node.appendChild(btn);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  protected handleBeforeHeaderCellDestroy(_e: SlickEventData, args: { column: Column; node: HTMLElement; }) {\r\n    const column = args.column;\r\n\r\n    if (column.header?.buttons) {\r\n      // Removing buttons via jQuery will also clean up any event handlers and data.\r\n      // NOTE: If you attach event handlers directly or using a different framework,\r\n      //       you must also clean them up here to avoid memory leaks.\r\n      const buttonCssClass = (this._options.buttonCssClass || '').replace(/(\\s+)/g, '.');\r\n      if (buttonCssClass) {\r\n        args.node.querySelectorAll(`.${buttonCssClass}`).forEach(elm => elm.remove());\r\n      }\r\n    }\r\n  }\r\n\r\n  protected handleButtonClick(button: HeaderButtonItem, columnDef: Column, e: DOMEvent<HTMLDivElement>) {\r\n    const command = button.command || '';\r\n    const callbackArgs = {\r\n      grid: this._grid,\r\n      column: columnDef,\r\n      button\r\n    } as HeaderButtonOnCommandArgs;\r\n\r\n    if (command) {\r\n      callbackArgs.command = command;\r\n    }\r\n\r\n    // execute action callback when defined\r\n    if (typeof button.action === 'function') {\r\n      button.action.call(this, e, callbackArgs);\r\n    }\r\n\r\n    if (command && !button.disabled) {\r\n      this.onCommand.notify(callbackArgs, e, this);\r\n\r\n      // Update the header in case the user updated the button definition in the handler.\r\n      this._grid.updateColumnHeader(columnDef.id);\r\n    }\r\n\r\n    // Stop propagation so that it doesn't register as a header click event.\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n  }\r\n\r\n  /**\r\n   * Method that user can pass to override the default behavior.\r\n   * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\r\n   * @param overrideFn: override function callback\r\n   * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\r\n   */\r\n  protected runOverrideFunctionWhenExists<T = any>(overrideFn: ((args: any) => boolean) | undefined, args: T): boolean {\r\n    if (typeof overrideFn === 'function') {\r\n      return overrideFn.call(this, args);\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      Plugins: {\r\n        HeaderButtons: SlickHeaderButtons\r\n      }\r\n    }\r\n  });\r\n}\r\n", "import {\r\n  BindingEventService as BindingEventService_,\r\n  Event as SlickEvent_,\r\n  type SlickEventData,\r\n  SlickEventHandler as SlickEventHandler_,\r\n  Utils as Utils_\r\n} from '../slick.core.js';\r\nimport type {\r\n  Column,\r\n  DOMEvent,\r\n  DOMMouseOrTouchEvent,\r\n  HeaderMenuCommandItemCallbackArgs,\r\n  HeaderMenuItems,\r\n  HeaderMenuOption,\r\n  HeaderMenuCommandItem,\r\n  MenuCommandItemCallbackArgs,\r\n  SlickPlugin,\r\n  OnHeaderCellRenderedEventArgs,\r\n} from '../models/index.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst SlickEventHandler = IIFE_ONLY ? Slick.EventHandler : SlickEventHandler_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/**\r\n * A plugin to add drop-down menus to column headers.\r\n *\r\n * USAGE:\r\n *\r\n * Add the plugin .js & .css files and register it with the grid.\r\n *\r\n * To specify a menu in a column header, extend the column definition like so:\r\n *\r\n *   let columns = [\r\n *     {\r\n *       id: 'myColumn',\r\n *       name: 'My column',\r\n *\r\n *       // This is the relevant part\r\n *       header: {\r\n *          menu: {\r\n *              items: [\r\n *                {\r\n *                  // menu item options\r\n *                },\r\n *                {\r\n *                  // menu item options\r\n *                }\r\n *              ]\r\n *          }\r\n *       }\r\n *     }\r\n *   ];\r\n *\r\n *\r\n * Available menu options:\r\n *    autoAlign:              Auto-align drop menu to the left when not enough viewport space to show on the right\r\n *    autoAlignOffset:        When drop menu is aligned to the left, it might not be perfectly aligned with the header menu icon, if that is the case you can add an offset (positive/negative number to move right/left)\r\n *    buttonCssClass:         an extra CSS class to add to the menu button (default 'caret')\r\n *    buttonImage:            a url to the menu button image\r\n *    menuUsabilityOverride:  Callback method that user can override the default behavior of enabling/disabling the menu from being usable (must be combined with a custom formatter)\r\n *    minWidth:               Minimum width that the drop menu will have\r\n *    subItemChevronClass:        CSS class that can be added on the right side of a sub-item parent (typically a chevron-right icon)\r\n *    subMenuOpenByEvent:         defaults to \"mouseover\", what event type shoud we use to open sub-menu(s), 2 options are available: \"mouseover\" or \"click\"\r\n *\r\n *\r\n * Available menu item options:\r\n *    action:                   Optionally define a callback function that gets executed when item is chosen (and/or use the onCommand event)\r\n *    title:                    Menu item text.\r\n *    divider:                  Whether the current item is a divider, not an actual command.\r\n *    disabled:                 Whether the item/command is disabled.\r\n *    hidden:                   Whether the item/command is hidden.\r\n *    tooltip:                  Item tooltip.\r\n *    command:                  A command identifier to be passed to the onCommand event handlers.\r\n *    cssClass:                 A CSS class to be added to the menu item container.\r\n *    iconCssClass:             A CSS class to be added to the menu item icon.\r\n *    iconImage:                A url to the icon image.\r\n *    textCssClass:             A CSS class to be added to the menu item text.\r\n *    itemVisibilityOverride:   Callback method that user can override the default behavior of showing/hiding an item from the list\r\n *    itemUsabilityOverride:    Callback method that user can override the default behavior of enabling/disabling an item from the list\r\n *\r\n *\r\n * The plugin exposes the following events:\r\n\r\n  *    onAfterMenuShow:   Fired after the menu is shown.  You can customize the menu or dismiss it by returning false.\r\n  *        Event args:\r\n  *            grid:     Reference to the grid.\r\n  *            column:   Column definition.\r\n  *            menu:     Menu options.  Note that you can change the menu items here.\r\n  *\r\n  *    onBeforeMenuShow:   Fired before the menu is shown.  You can customize the menu or dismiss it by returning false.\r\n  *        Event args:\r\n  *            grid:     Reference to the grid.\r\n  *            column:   Column definition.\r\n  *            menu:     Menu options.  Note that you can change the menu items here.\r\n  *\r\n  *    onCommand:    Fired on menu item click for buttons with 'command' specified.\r\n  *        Event args:\r\n  *            grid:     Reference to the grid.\r\n  *            column:   Column definition.\r\n  *            command:  Button command identified.\r\n  *            button:   Button options.  Note that you can change the button options in your\r\n  *                      event handler, and the column header will be automatically updated to\r\n  *                      reflect them.  This is useful if you want to implement something like a\r\n  *                      toggle button.\r\n  *\r\n  *\r\n  * @param options {Object} Options:\r\n  *    buttonCssClass:   an extra CSS class to add to the menu button (default 'caret')\r\n  *    buttonImage:      a url to the menu button image\r\n  * @class Slick.Plugins.HeaderButtons\r\n  */\r\nexport class SlickHeaderMenu implements SlickPlugin {\r\n  // --\r\n  // public API\r\n  pluginName = 'HeaderMenu' as const;\r\n  onAfterMenuShow = new SlickEvent<HeaderMenuCommandItemCallbackArgs>('onAfterMenuShow');\r\n  onBeforeMenuShow = new SlickEvent<HeaderMenuCommandItemCallbackArgs>('onBeforeMenuShow');\r\n  onCommand = new SlickEvent<MenuCommandItemCallbackArgs>('onCommand');\r\n\r\n  // --\r\n  // protected props\r\n  protected _grid!: SlickGrid;\r\n  protected _gridUid = '';\r\n  protected _handler = new SlickEventHandler();\r\n  protected _bindingEventService = new BindingEventService();\r\n  protected _defaults: HeaderMenuOption = {\r\n    buttonCssClass: undefined,\r\n    buttonImage: undefined,\r\n    minWidth: 100,\r\n    autoAlign: true,\r\n    autoAlignOffset: 0,\r\n    subMenuOpenByEvent: 'mouseover',\r\n  };\r\n  protected _options: HeaderMenuOption;\r\n  protected _activeHeaderColumnElm?: HTMLDivElement | null;\r\n  protected _menuElm?: HTMLDivElement | null;\r\n  protected _subMenuParentId = '';\r\n\r\n  constructor(options: Partial<HeaderMenuOption>) {\r\n    this._options = Utils.extend(true, {}, options, this._defaults);\r\n  }\r\n\r\n  init(grid: SlickGrid) {\r\n    this._grid = grid;\r\n    this._gridUid = grid?.getUID() || '';\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n    this._handler\r\n      .subscribe(this._grid.onHeaderCellRendered, this.handleHeaderCellRendered.bind(this))\r\n      .subscribe(this._grid.onBeforeHeaderCellDestroy, this.handleBeforeHeaderCellDestroy.bind(this));\r\n\r\n    // Force the grid to re-render the header now that the events are hooked up.\r\n    this._grid.setColumns(this._grid.getColumns());\r\n\r\n    // Hide the menu on outside click.\r\n    this._bindingEventService.bind(document.body, 'click', this.handleBodyMouseDown.bind(this) as EventListener);\r\n  }\r\n\r\n  setOptions(newOptions: Partial<HeaderMenuOption>) {\r\n    this._options = Utils.extend(true, {}, this._options, newOptions);\r\n  }\r\n\r\n  protected getGridUidSelector() {\r\n    const gridUid = this._grid.getUID() || '';\r\n    return gridUid ? `.${gridUid}` : '';\r\n  }\r\n\r\n  destroy() {\r\n    this._handler.unsubscribeAll();\r\n    this._bindingEventService.unbindAll();\r\n    this._menuElm = this._menuElm || document.body.querySelector(`.slick-header-menu${this.getGridUidSelector()}`);\r\n    this._menuElm?.remove();\r\n    this._activeHeaderColumnElm = undefined;\r\n  }\r\n\r\n  destroyAllMenus() {\r\n    this.destroySubMenus();\r\n\r\n    // remove all parent menu listeners before removing them from the DOM\r\n    this._bindingEventService.unbindAll('parent-menu');\r\n    document.querySelectorAll(`.slick-header-menu${this.getGridUidSelector()}`)\r\n      .forEach(subElm => subElm.remove());\r\n  }\r\n\r\n  /** Close and destroy all previously opened sub-menus */\r\n  destroySubMenus() {\r\n    this._bindingEventService.unbindAll('sub-menu');\r\n    document.querySelectorAll(`.slick-header-menu.slick-submenu${this.getGridUidSelector()}`)\r\n      .forEach(subElm => subElm.remove());\r\n  }\r\n\r\n  protected handleBodyMouseDown(e: DOMEvent<HTMLElement>) {\r\n    // did we click inside the menu or any of its sub-menu(s)\r\n    let isMenuClicked = false;\r\n    if (this._menuElm?.contains(e.target)) {\r\n      isMenuClicked = true;\r\n    }\r\n    if (!isMenuClicked) {\r\n      document\r\n        .querySelectorAll(`.slick-header-menu.slick-submenu${this.getGridUidSelector()}`)\r\n        .forEach(subElm => {\r\n          if (subElm.contains(e.target)) {\r\n            isMenuClicked = true;\r\n          }\r\n        });\r\n    }\r\n\r\n    if (this._menuElm !== e.target && !isMenuClicked && !e.defaultPrevented || e.target.className === 'close') {\r\n      this.hideMenu();\r\n    }\r\n  }\r\n\r\n  hideMenu() {\r\n    if (this._menuElm) {\r\n      this._menuElm.remove();\r\n      this._menuElm = undefined;\r\n    }\r\n    this._activeHeaderColumnElm?.classList.remove('slick-header-column-active');\r\n    this.destroySubMenus();\r\n  }\r\n\r\n  protected handleHeaderCellRendered(_e: SlickEventData, args: OnHeaderCellRenderedEventArgs) {\r\n    const column = args.column;\r\n    const menu = column?.header?.menu as HeaderMenuItems;\r\n\r\n    if (menu?.items) {\r\n      console.warn('[SlickGrid] Header Menu \"items\" property was deprecated in favor of \"commandItems\" to align with all other Menu plugins.');\r\n    }\r\n\r\n    if (menu) {\r\n      // run the override function (when defined), if the result is false it won't go further\r\n      if (!this.runOverrideFunctionWhenExists<typeof args>(this._options.menuUsabilityOverride, args)) {\r\n        return;\r\n      }\r\n\r\n      const elm = document.createElement('div');\r\n      elm.className = 'slick-header-menubutton';\r\n      elm.ariaLabel = 'Header Menu';\r\n      elm.role = 'button';\r\n\r\n      if (!this._options.buttonCssClass && !this._options.buttonImage) {\r\n        this._options.buttonCssClass = 'caret'; // default when nothing is provided\r\n      }\r\n\r\n      if (this._options.buttonCssClass) {\r\n        // sgi icon with mask requires inner span to work properly\r\n        const icon = document.createElement('span');\r\n        icon.classList.add(...Utils.classNameToList(this._options.buttonCssClass));\r\n        elm.appendChild(icon);\r\n      }\r\n\r\n      if (this._options.buttonImage) {\r\n        elm.style.backgroundImage = `url(${this._options.buttonImage})`;\r\n      }\r\n\r\n      if (this._options.tooltip) {\r\n        elm.title = this._options.tooltip;\r\n      }\r\n\r\n      this._bindingEventService.bind(elm, 'click', ((e: DOMMouseOrTouchEvent<HTMLDivElement>) => {\r\n        this.destroyAllMenus(); // make there's only 1 parent menu opened at a time\r\n        this.createParentMenu(e, menu, args.column);\r\n      }) as EventListener);\r\n      args.node.appendChild(elm);\r\n    }\r\n  }\r\n\r\n  protected handleBeforeHeaderCellDestroy(_e: SlickEventData, args: { column: Column; node: HTMLElement; }) {\r\n    const column = args.column;\r\n\r\n    if (column.header?.menu) {\r\n      args.node.querySelectorAll('.slick-header-menubutton').forEach(elm => elm.remove());\r\n    }\r\n  }\r\n\r\n  protected addSubMenuTitleWhenExists(item: HeaderMenuCommandItem | 'divider', commandMenuElm: HTMLDivElement) {\r\n    if (item !== 'divider' && item?.subMenuTitle) {\r\n      const subMenuTitleElm = document.createElement('div');\r\n      subMenuTitleElm.className = 'slick-menu-title';\r\n      subMenuTitleElm.textContent = item.subMenuTitle as string;\r\n      const subMenuTitleClass = item.subMenuTitleCssClass as string;\r\n      if (subMenuTitleClass) {\r\n        subMenuTitleElm.classList.add(...Utils.classNameToList(subMenuTitleClass));\r\n      }\r\n\r\n      commandMenuElm.appendChild(subMenuTitleElm);\r\n    }\r\n  }\r\n\r\n  protected createParentMenu(event: DOMMouseOrTouchEvent<HTMLDivElement>, menu: HeaderMenuItems, columnDef: Column) {\r\n    // Let the user modify the menu or cancel altogether,\r\n    // or provide alternative menu implementation.\r\n    const callbackArgs = {\r\n      grid: this._grid,\r\n      column: columnDef,\r\n      menu\r\n    } as unknown as HeaderMenuCommandItemCallbackArgs;\r\n    if (this.onBeforeMenuShow.notify(callbackArgs, event, this).getReturnValue() === false) {\r\n      return;\r\n    }\r\n\r\n    // create 1st parent menu container & reposition it\r\n    this._menuElm = this.createMenu((menu.commandItems || menu.items) as Array<HeaderMenuCommandItem | 'divider'>, columnDef);\r\n    const containerNode = this._grid.getContainerNode();\r\n    if (containerNode) {\r\n      containerNode.appendChild(this._menuElm);\r\n    }\r\n    this.repositionMenu(event, this._menuElm);\r\n\r\n    if (this.onAfterMenuShow.notify(callbackArgs, event, this).getReturnValue() === false) {\r\n      return;\r\n    }\r\n\r\n    // Stop propagation so that it doesn't register as a header click event.\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n  }\r\n\r\n  protected createMenu(commandItems: Array<HeaderMenuCommandItem | 'divider'>, columnDef: Column, level = 0, item?: HeaderMenuCommandItem | 'divider') {\r\n    // to avoid having multiple sub-menu trees opened,\r\n    // we need to somehow keep trace of which parent menu the tree belongs to\r\n    // and we should keep ref of only the first sub-menu parent, we can use the command name (remove any whitespaces though)\r\n    const isSubMenu = level > 0;\r\n    const subMenuCommand = (item as HeaderMenuCommandItem)?.command;\r\n    let subMenuId = (level === 1 && subMenuCommand) ? subMenuCommand.replaceAll(' ', '') : '';\r\n    if (subMenuId) {\r\n      this._subMenuParentId = subMenuId;\r\n    }\r\n    if (isSubMenu) {\r\n      subMenuId = this._subMenuParentId;\r\n    }\r\n\r\n    // return menu/sub-menu if it's already opened unless we are on different sub-menu tree if so close them all\r\n    const menuClasses = `slick-header-menu slick-menu-level-${level} ${this._gridUid}`;\r\n    const bodyMenuElm = document.body.querySelector<HTMLDivElement>(`.slick-header-menu.slick-menu-level-${level}${this.getGridUidSelector()}`);\r\n    if (bodyMenuElm) {\r\n      if (bodyMenuElm.dataset.subMenuParent === subMenuId) {\r\n        return bodyMenuElm;\r\n      }\r\n      this.destroySubMenus();\r\n    }\r\n\r\n    const menuElm = document.createElement('div');\r\n    menuElm.className = menuClasses;\r\n    if (level > 0) {\r\n      menuElm.classList.add('slick-submenu');\r\n      if (subMenuId) {\r\n        menuElm.dataset.subMenuParent = subMenuId;\r\n      }\r\n    }\r\n    menuElm.classList.add(this._gridUid);\r\n    menuElm.role = 'menu';\r\n    menuElm.ariaLabel = level > 1 ? 'SubMenu' : 'Header Menu';\r\n    menuElm.style.minWidth = `${this._options.minWidth}px`;\r\n    menuElm.setAttribute('aria-expanded', 'true');\r\n\r\n    const callbackArgs = {\r\n      grid: this._grid,\r\n      column: columnDef,\r\n      menu: { items: commandItems }\r\n    } as unknown as HeaderMenuCommandItemCallbackArgs;\r\n\r\n    // when creating sub-menu add its sub-menu title when exists\r\n    if (item && level > 0) {\r\n      this.addSubMenuTitleWhenExists(item, menuElm); // add sub-menu title when exists\r\n    }\r\n\r\n    // Construct the menu items.\r\n    for (let i = 0; i < commandItems.length; i++) {\r\n      let addClickListener = true;\r\n      const item = commandItems[i];\r\n\r\n      // run each override functions to know if the item is visible and usable\r\n      const isItemVisible = this.runOverrideFunctionWhenExists((item as HeaderMenuCommandItem).itemVisibilityOverride, callbackArgs);\r\n      const isItemUsable = this.runOverrideFunctionWhenExists((item as HeaderMenuCommandItem).itemUsabilityOverride, callbackArgs);\r\n\r\n      // if the result is not visible then there's no need to go further\r\n      if (!isItemVisible) {\r\n        continue;\r\n      }\r\n\r\n      // when the override is defined, we need to use its result to update the disabled property\r\n      // so that \"handleMenuItemCommandClick\" has the correct flag and won't trigger a command clicked event\r\n      if (Object.prototype.hasOwnProperty.call(item, 'itemUsabilityOverride')) {\r\n        (item as HeaderMenuCommandItem).disabled = isItemUsable ? false : true;\r\n      }\r\n\r\n      const menuItemElm = document.createElement('div');\r\n      menuItemElm.className = 'slick-header-menuitem';\r\n      menuItemElm.role = 'menuitem';\r\n\r\n      if ((item as HeaderMenuCommandItem).divider || item === 'divider') {\r\n        menuItemElm.classList.add('slick-header-menuitem-divider');\r\n        addClickListener = false;\r\n      }\r\n\r\n      if ((item as HeaderMenuCommandItem).disabled) {\r\n        menuItemElm.classList.add('slick-header-menuitem-disabled');\r\n      }\r\n\r\n      if ((item as HeaderMenuCommandItem).hidden) {\r\n        menuItemElm.classList.add('slick-header-menuitem-hidden');\r\n      }\r\n\r\n      if ((item as HeaderMenuCommandItem).cssClass) {\r\n        menuItemElm.classList.add(...Utils.classNameToList((item as HeaderMenuCommandItem).cssClass));\r\n      }\r\n\r\n      if ((item as HeaderMenuCommandItem).tooltip) {\r\n        menuItemElm.title = (item as HeaderMenuCommandItem).tooltip || '';\r\n      }\r\n\r\n      const iconElm = document.createElement('div');\r\n      iconElm.className = 'slick-header-menuicon';\r\n      menuItemElm.appendChild(iconElm);\r\n\r\n      if ((item as HeaderMenuCommandItem).iconCssClass) {\r\n        iconElm.classList.add(...Utils.classNameToList((item as HeaderMenuCommandItem).iconCssClass));\r\n      }\r\n\r\n      if ((item as HeaderMenuCommandItem).iconImage) {\r\n        iconElm.style.backgroundImage = 'url(' + (item as HeaderMenuCommandItem).iconImage + ')';\r\n      }\r\n\r\n      const textElm = document.createElement('span');\r\n      textElm.className = 'slick-header-menucontent';\r\n      textElm.textContent = (item as HeaderMenuCommandItem).title || '';\r\n      menuItemElm.appendChild(textElm);\r\n\r\n      if ((item as HeaderMenuCommandItem).textCssClass) {\r\n        textElm.classList.add(...Utils.classNameToList((item as HeaderMenuCommandItem).textCssClass));\r\n      }\r\n      menuElm.appendChild(menuItemElm);\r\n\r\n      if (addClickListener) {\r\n        const eventGroup = isSubMenu ? 'sub-menu' : 'parent-menu';\r\n        this._bindingEventService.bind(menuItemElm, 'click', this.handleMenuItemClick.bind(this, item, columnDef, level) as EventListener, undefined, eventGroup);\r\n      }\r\n\r\n      // optionally open sub-menu(s) by mouseover\r\n      if (this._options.subMenuOpenByEvent === 'mouseover') {\r\n        this._bindingEventService.bind(menuItemElm, 'mouseover', ((e: DOMMouseOrTouchEvent<HTMLDivElement>) => {\r\n          if ((item as HeaderMenuCommandItem).commandItems || (item as HeaderMenuCommandItem).items) {\r\n            this.repositionSubMenu(item as HeaderMenuCommandItem, columnDef, level, e);\r\n          } else if (!isSubMenu) {\r\n            this.destroySubMenus();\r\n          }\r\n        }) as EventListener);\r\n      }\r\n\r\n      // the option/command item could be a sub-menu if it has another list of commands/options\r\n      if ((item as HeaderMenuCommandItem).commandItems || (item as HeaderMenuCommandItem).items) {\r\n        const chevronElm = document.createElement('div');\r\n        chevronElm.className = 'sub-item-chevron';\r\n        if (this._options.subItemChevronClass) {\r\n          chevronElm.classList.add(...Utils.classNameToList(this._options.subItemChevronClass));\r\n        } else {\r\n          chevronElm.textContent = '\u2B9E'; // \u2B9E or \u25B8\r\n        }\r\n\r\n        menuItemElm.classList.add('slick-submenu-item');\r\n        menuItemElm.appendChild(chevronElm);\r\n      }\r\n    }\r\n\r\n    return menuElm;\r\n  }\r\n\r\n  protected handleMenuItemClick(item: HeaderMenuCommandItem | 'divider', columnDef: Column, level = 0, e: DOMMouseOrTouchEvent<HTMLDivElement>): boolean | void {\r\n    if (item !== 'divider' && !item.disabled && !item.divider) {\r\n      const command = (item as HeaderMenuCommandItem).command || '';\r\n\r\n      if (Utils.isDefined(command) && !item.commandItems && !(item as HeaderMenuCommandItem).items) {\r\n        const callbackArgs = {\r\n          grid: this._grid,\r\n          column: columnDef,\r\n          command,\r\n          item,\r\n        };\r\n        this.onCommand.notify(callbackArgs, e, this);\r\n\r\n        // execute action callback when defined\r\n        if (typeof item.action === 'function') {\r\n          item.action.call(this, e, callbackArgs);\r\n        }\r\n\r\n        // unless prevented, close the menu\r\n        if (!e.defaultPrevented) {\r\n          this.hideMenu();\r\n        }\r\n      } else if (item.commandItems || (item as HeaderMenuCommandItem).items) {\r\n        this.repositionSubMenu(item as HeaderMenuCommandItem, columnDef, level, e);\r\n      } else {\r\n        this.destroySubMenus();\r\n      }\r\n    }\r\n  }\r\n\r\n  protected repositionSubMenu(item: HeaderMenuCommandItem, columnDef: Column, level: number, e: DOMMouseOrTouchEvent<HTMLDivElement>) {\r\n    // when we're clicking a grid cell OR our last menu type (command/option) differs then we know that we need to start fresh and close any sub-menus that might still be open\r\n    if (e.target.classList.contains('slick-header-menubutton')) {\r\n      this.destroySubMenus();\r\n    }\r\n\r\n    // creating sub-menu, we'll also pass level & the item object since we might have \"subMenuTitle\" to show\r\n    const subMenuElm = this.createMenu(item.commandItems || item.items || [], columnDef, level + 1, item);\r\n    document.body.appendChild(subMenuElm);\r\n    this.repositionMenu(e, subMenuElm);\r\n  }\r\n\r\n  protected repositionMenu(e: DOMMouseOrTouchEvent<HTMLDivElement>, menuElm: HTMLDivElement) {\r\n    const buttonElm = e.target;\r\n    const isSubMenu = menuElm.classList.contains('slick-submenu');\r\n    const parentElm = isSubMenu\r\n      ? e.target.closest('.slick-header-menuitem') as HTMLDivElement\r\n      : buttonElm as HTMLElement;\r\n\r\n    const btnOffset = Utils.offset(buttonElm);\r\n    const gridPos = this._grid.getGridPosition();\r\n    const menuWidth = menuElm.offsetWidth;\r\n    const menuOffset = Utils.offset(this._menuElm!);\r\n    const parentOffset = Utils.offset(parentElm);\r\n    const menuOffsetTop = isSubMenu\r\n      ? parentOffset?.top ?? 0\r\n      : buttonElm.clientHeight ?? btnOffset?.top ?? 0 + (this._options?.menuOffsetTop ?? 0);\r\n    let menuOffsetLeft = isSubMenu ? parentOffset?.left ?? 0 : btnOffset?.left ?? 0;\r\n\r\n    // when auto-align is set, it will calculate whether it has enough space in the viewport to show the drop menu on the right (default)\r\n    // if there isn't enough space on the right, it will automatically align the drop menu to the left\r\n    // to simulate an align left, we actually need to know the width of the drop menu\r\n    if (isSubMenu && parentElm) {\r\n      let subMenuPosCalc = menuOffsetLeft + Number(menuWidth); // calculate coordinate at caller element far right\r\n      if (isSubMenu) {\r\n        subMenuPosCalc += parentElm.clientWidth;\r\n      }\r\n      const browserWidth = document.documentElement.clientWidth;\r\n      const dropSide = (subMenuPosCalc >= gridPos.width || subMenuPosCalc >= browserWidth) ? 'left' : 'right';\r\n      if (dropSide === 'left') {\r\n        menuElm.classList.remove('dropright');\r\n        menuElm.classList.add('dropleft');\r\n        menuOffsetLeft -= menuWidth;\r\n      } else {\r\n        menuElm.classList.remove('dropleft');\r\n        menuElm.classList.add('dropright');\r\n        if (isSubMenu) {\r\n          menuOffsetLeft += parentElm.offsetWidth;\r\n        }\r\n      }\r\n    } else {\r\n      if (menuOffsetLeft + menuElm.offsetWidth >= gridPos.width) {\r\n        menuOffsetLeft = menuOffsetLeft + buttonElm.clientWidth - menuElm.clientWidth + (this._options.autoAlignOffset || 0);\r\n      }\r\n      menuOffsetLeft -= menuOffset?.left ?? 0;\r\n    }\r\n\r\n    // ready to reposition the menu\r\n    menuElm.style.top = `${menuOffsetTop}px`;\r\n    menuElm.style.left = `${menuOffsetLeft}px`;\r\n\r\n    // Mark the header as active to keep the highlighting.\r\n    this._activeHeaderColumnElm = menuElm.closest('.slick-header-column');\r\n    if (this._activeHeaderColumnElm) {\r\n      this._activeHeaderColumnElm.classList.add('slick-header-column-active');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method that user can pass to override the default behavior.\r\n   * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\r\n   * @param overrideFn: override function callback\r\n   * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\r\n   */\r\n  protected runOverrideFunctionWhenExists<T = any>(overrideFn: ((args: any) => boolean) | undefined, args: T): boolean {\r\n    if (typeof overrideFn === 'function') {\r\n      return overrideFn.call(this, args);\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      Plugins: {\r\n        HeaderMenu: SlickHeaderMenu\r\n      }\r\n    }\r\n  });\r\n}\r\n", "import { BindingEventService as BindingEventService_, Event as SlickEvent_, Utils as Utils_ } from '../slick.core.js';\r\nimport type { GridOption, GridSize, ResizerOption } from '../models/index.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n// define some constants, height/width are in pixels\r\nconst DATAGRID_MIN_HEIGHT = 180;\r\nconst DATAGRID_MIN_WIDTH = 300;\r\nconst DATAGRID_BOTTOM_PADDING = 20;\r\n\r\n/***\r\n * A Resizer plugin that can be used to auto-resize a grid and/or resize with fixed dimensions.\r\n * When fixed height is defined, it will auto-resize only the width and vice versa with the width defined.\r\n * You can also choose to use the flag \"enableAutoSizeColumns\" if you want to the plugin to\r\n * automatically call the grid \"autosizeColumns()\" method after each resize.\r\n *\r\n * USAGE:\r\n *\r\n * Add the \"slick.resizer.js\" file and register it with the grid.\r\n *\r\n * You can specify certain options as arguments when instantiating the plugin like so:\r\n * var resizer = new Slick.Plugins.Resizer({\r\n *   container: '#gridContainer',\r\n *   rightPadding: 15,\r\n *   bottomPadding: 20,\r\n *   minHeight: 180,\r\n *   minWidth: 300,\r\n * });\r\n * grid.registerPlugin(resizer);\r\n *\r\n *\r\n * The plugin exposes the following events:\r\n *\r\n *    onGridAfterResize:  Fired after the grid got resized.  You can customize the menu or dismiss it by returning false.\r\n *        Event args:\r\n *            grid:       Reference to the grid.\r\n *            dimensions: Resized grid dimensions used\r\n *\r\n *    onGridBeforeResize:   Fired before the grid gets resized.  You can customize the menu or dismiss it by returning false.\r\n *        Event args:\r\n *            grid:     Reference to the grid.\r\n *\r\n *\r\n * @param {Object} options available plugin options that can be passed in the constructor:\r\n *   container:      (REQUIRED) DOM element selector of the page container, basically what element in the page will be used to calculate the available space\r\n *   gridContainer:             DOM element selector of the grid container, optional but when provided it will be resized with same size as the grid (typically a container holding the grid and extra custom footer/pagination)\r\n *   applyResizeToContainer:    Defaults to false, do we want to apply the resized dimentions to the grid container as well?\r\n *   rightPadding:              Defaults to 0, right side padding to remove from the total dimension\r\n *   bottomPadding:             Defaults to 20, bottom padding to remove from the total dimension\r\n *   minHeight:                 Defaults to 180, minimum height of the grid\r\n *   minWidth:                  Defaults to 300, minimum width of the grid\r\n *   maxHeight:                 Maximum height of the grid\r\n *   maxWidth:                  Maximum width of the grid\r\n *   calculateAvailableSizeBy:  Defaults to \"window\", which DOM element (\"container\" or \"window\") are we using to calculate the available size for the grid?\r\n *\r\n * @class Slick.Plugins.Resizer\r\n */\r\n\r\nexport class SlickResizer {\r\n  // --\r\n  // public API\r\n  pluginName = 'Resizer' as const;\r\n  onGridAfterResize = new SlickEvent<{ grid: SlickGrid; dimensions: GridSize; }>('onGridAfterResize');\r\n  onGridBeforeResize = new SlickEvent<{ grid: SlickGrid; }>('onGridBeforeResize');\r\n\r\n  // --\r\n  // protected props\r\n  protected _bindingEventService: BindingEventService_;\r\n  protected _fixedHeight?: number | null;\r\n  protected _fixedWidth?: number | null;\r\n  protected _grid!: SlickGrid;\r\n  protected _gridDomElm!: HTMLElement;\r\n  protected _gridContainerElm!: HTMLElement;\r\n  protected _pageContainerElm!: HTMLElement;\r\n  protected _gridOptions!: GridOption;\r\n  protected _gridUid = '';\r\n  protected _lastDimensions?: GridSize;\r\n  protected _resizePaused = false;\r\n  protected _timer?: number;\r\n  protected _options: ResizerOption;\r\n  protected _defaults: ResizerOption = {\r\n    bottomPadding: 20,\r\n    applyResizeToContainer: false,\r\n    minHeight: 180,\r\n    minWidth: 300,\r\n    rightPadding: 0\r\n  };\r\n\r\n  constructor(options: Partial<ResizerOption>, fixedDimensions?: { height?: number; width?: number; }) {\r\n    this._bindingEventService = new BindingEventService();\r\n    this._options = Utils.extend(true, {}, this._defaults, options);\r\n    if (fixedDimensions) {\r\n      this._fixedHeight = fixedDimensions.height;\r\n      this._fixedWidth = fixedDimensions.width;\r\n    }\r\n  }\r\n\r\n  setOptions(newOptions: Partial<ResizerOption>) {\r\n    this._options = Utils.extend(true, {}, this._defaults, this._options, newOptions);\r\n  }\r\n\r\n  init(grid: SlickGrid) {\r\n    this.setOptions(this._options);\r\n    this._grid = grid;\r\n    this._gridOptions = this._grid.getOptions();\r\n    this._gridUid = this._grid.getUID();\r\n    this._gridDomElm = this._grid.getContainerNode();\r\n    this._pageContainerElm = typeof this._options.container === 'string'\r\n      ? document.querySelector(this._options.container) as HTMLElement\r\n      : this._options.container as HTMLElement;\r\n\r\n    if (this._options.gridContainer) {\r\n      this._gridContainerElm = this._options.gridContainer as HTMLElement;\r\n    }\r\n\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n    if (this._gridOptions) {\r\n      this.bindAutoResizeDataGrid();\r\n    }\r\n  }\r\n\r\n  /** Bind an auto resize trigger on the datagrid, if that is enable then it will resize itself to the available space\r\n  * Options: we could also provide a % factor to resize on each height/width independently\r\n  */\r\n  bindAutoResizeDataGrid(newSizes?: GridSize) {\r\n    const gridElmOffset = Utils.offset(this._gridDomElm);\r\n\r\n    // if we can't find the grid to resize, return without binding anything\r\n    if (this._gridDomElm !== undefined || gridElmOffset !== undefined) {\r\n      // -- 1st resize the datagrid size at first load (we need this because the .on event is not triggered on first load)\r\n      // -- also we add a slight delay (in ms) so that we resize after the grid render is done\r\n      this.resizeGrid(0, newSizes, null);\r\n\r\n      // -- 2nd bind a trigger on the Window DOM element, so that it happens also when resizing after first load\r\n      // -- bind auto-resize to Window object only if it exist\r\n      this._bindingEventService.bind(window, 'resize', (event) => {\r\n        this.onGridBeforeResize.notify({ grid: this._grid }, event, this);\r\n\r\n        // unless the resizer is paused, let's go and resize the grid\r\n        if (!this._resizePaused) {\r\n          // for some yet unknown reason, calling the resize twice removes any stuttering/flickering\r\n          // when changing the height and makes it much smoother experience\r\n          this.resizeGrid(0, newSizes, event);\r\n          this.resizeGrid(0, newSizes, event);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the datagrid new height/width from the available space, also consider that a % factor might be applied to calculation\r\n   */\r\n  calculateGridNewDimensions(): GridSize | null {\r\n    const gridElmOffset = Utils.offset(this._gridDomElm);\r\n\r\n    if (!window || this._pageContainerElm === undefined || this._gridDomElm === undefined || gridElmOffset === undefined) {\r\n      return null;\r\n    }\r\n\r\n    // calculate bottom padding\r\n    const bottomPadding = (this._options?.bottomPadding !== undefined) ? this._options.bottomPadding : DATAGRID_BOTTOM_PADDING;\r\n\r\n    let gridHeight = 0;\r\n    let gridOffsetTop = 0;\r\n\r\n    // which DOM element are we using to calculate the available size for the grid?\r\n    // defaults to \"window\"\r\n    if (this._options.calculateAvailableSizeBy === 'container') {\r\n      // uses the container's height to calculate grid height without any top offset\r\n      gridHeight = Utils.innerSize(this._pageContainerElm, 'height') || 0;\r\n    } else {\r\n      // uses the browser's window height with its top offset to calculate grid height\r\n      gridHeight = window.innerHeight || 0;\r\n      gridOffsetTop = (gridElmOffset !== undefined) ? gridElmOffset.top : 0;\r\n    }\r\n\r\n    const availableHeight = gridHeight - gridOffsetTop - bottomPadding;\r\n    const availableWidth = Utils.innerSize(this._pageContainerElm, 'width') || window.innerWidth || 0;\r\n    const maxHeight = this._options?.maxHeight || undefined;\r\n    const minHeight = (this._options?.minHeight !== undefined) ? this._options.minHeight : DATAGRID_MIN_HEIGHT;\r\n    const maxWidth = this._options?.maxWidth || undefined;\r\n    const minWidth = (this._options?.minWidth !== undefined) ? this._options.minWidth : DATAGRID_MIN_WIDTH;\r\n\r\n    let newHeight = availableHeight;\r\n    let newWidth = (this._options?.rightPadding) ? availableWidth - this._options.rightPadding : availableWidth;\r\n\r\n    // optionally (when defined), make sure that grid height & width are within their thresholds\r\n    if (newHeight < minHeight) {\r\n      newHeight = minHeight;\r\n    }\r\n    if (maxHeight && newHeight > maxHeight) {\r\n      newHeight = maxHeight;\r\n    }\r\n    if (newWidth < minWidth) {\r\n      newWidth = minWidth;\r\n    }\r\n    if (maxWidth && newWidth > maxWidth) {\r\n      newWidth = maxWidth;\r\n    }\r\n\r\n    // return the new dimensions unless a fixed height/width was defined\r\n    return {\r\n      height: this._fixedHeight || newHeight,\r\n      width: this._fixedWidth || newWidth\r\n    };\r\n  }\r\n\r\n  /** Destroy function when element is destroyed */\r\n  destroy() {\r\n    this.onGridBeforeResize.unsubscribe();\r\n    this.onGridAfterResize.unsubscribe();\r\n    this._bindingEventService.unbindAll();\r\n  }\r\n\r\n  /**\r\n  * Return the last resize dimensions used by the service\r\n  * @return {object} last dimensions (height: number, width: number)\r\n  */\r\n  getLastResizeDimensions() {\r\n    return this._lastDimensions;\r\n  }\r\n\r\n  /**\r\n   * Provide the possibility to pause the resizer for some time, until user decides to re-enabled it later if he wish to.\r\n   * @param {boolean} isResizePaused are we pausing the resizer?\r\n   */\r\n  pauseResizer(isResizePaused: boolean) {\r\n    this._resizePaused = isResizePaused;\r\n  }\r\n\r\n  /**\r\n   * Resize the datagrid to fit the browser height & width.\r\n   * @param {number} [delay] to wait before resizing, defaults to 0 (in milliseconds)\r\n   * @param {object} [newSizes] can optionally be passed (height: number, width: number)\r\n   * @param {object} [event] that triggered the resize, defaults to null\r\n   * @return If the browser supports it, we can return a Promise that would resolve with the new dimensions\r\n   */\r\n  resizeGrid(delay?: number, newSizes?: GridSize, event?: Event | null): Promise<GridSize | undefined> | void {\r\n    // because of the javascript async nature, we might want to delay the resize a little bit\r\n    const resizeDelay = delay || 0;\r\n\r\n    // return a Promise when supported by the browser\r\n    if (typeof Promise === 'function') {\r\n      return new Promise((resolve) => {\r\n        if (resizeDelay > 0) {\r\n          window.clearTimeout(this._timer);\r\n          this._timer = window.setTimeout(() => {\r\n            resolve(this.resizeGridCallback(newSizes, event));\r\n          }, resizeDelay);\r\n        } else {\r\n          resolve(this.resizeGridCallback(newSizes, event));\r\n        }\r\n      });\r\n    } else {\r\n      // OR no return when Promise isn't supported\r\n      if (resizeDelay > 0) {\r\n        window.clearTimeout(this._timer);\r\n        this._timer = window.setTimeout(() => {\r\n          this.resizeGridCallback(newSizes, event);\r\n        }, resizeDelay);\r\n      } else {\r\n        this.resizeGridCallback(newSizes, event);\r\n      }\r\n    }\r\n  }\r\n\r\n  protected resizeGridCallback(newSizes?: GridSize, event?: Event | null) {\r\n    const lastDimensions = this.resizeGridWithDimensions(newSizes) as GridSize;\r\n    this.onGridAfterResize.notify({ grid: this._grid, dimensions: lastDimensions }, event, this);\r\n    return lastDimensions;\r\n  }\r\n\r\n  protected resizeGridWithDimensions(newSizes?: GridSize): GridSize | undefined {\r\n    // calculate the available sizes with minimum height defined as a varant\r\n    const availableDimensions = this.calculateGridNewDimensions();\r\n\r\n    if ((newSizes || availableDimensions) && this._gridDomElm) {\r\n      try {\r\n        // get the new sizes, if new sizes are passed (not 0), we will use them else use available space\r\n        // basically if user passes 1 of the dimension, let say he passes just the height,\r\n        // we will use the height as a fixed height but the width will be resized by it's available space\r\n        const newHeight = (newSizes?.height) ? newSizes.height : availableDimensions?.height;\r\n        const newWidth = (newSizes?.width) ? newSizes.width : availableDimensions?.width;\r\n\r\n        // apply these new height/width to the datagrid\r\n        if (!this._gridOptions.autoHeight) {\r\n          this._gridDomElm.style.height = `${newHeight}px`;\r\n        }\r\n        this._gridDomElm.style.width = `${newWidth}px`;\r\n        if (this._gridContainerElm) {\r\n          this._gridContainerElm.style.width = `${newWidth}px`;\r\n        }\r\n\r\n        // resize the slickgrid canvas on all browser\r\n        if (this._grid?.resizeCanvas) {\r\n          this._grid.resizeCanvas();\r\n        }\r\n\r\n        // also call the grid auto-size columns so that it takes available when going bigger\r\n        if (this._gridOptions?.enableAutoSizeColumns && this._grid.autosizeColumns) {\r\n          // make sure that the grid still exist (by looking if the Grid UID is found in the DOM tree) to avoid SlickGrid error \"missing stylesheet\"\r\n          if (this._gridUid && document.querySelector(`.${this._gridUid}`)) {\r\n            this._grid.autosizeColumns();\r\n          }\r\n        }\r\n\r\n        // keep last resized dimensions & resolve them to the Promise\r\n        this._lastDimensions = {\r\n          height: newHeight,\r\n          width: newWidth\r\n        };\r\n      } catch (e) {\r\n        this.destroy();\r\n      }\r\n    }\r\n\r\n    return this._lastDimensions;\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      Plugins: {\r\n        Resizer: SlickResizer\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n", "import {\r\n  SlickEvent as SlickEvent_,\r\n  type SlickEventData,\r\n  SlickEventHandler as SlickEventHandler_,\r\n  Utils as Utils_\r\n} from '../slick.core.js';\r\nimport type {\r\n  Column,\r\n  FormatterResultWithHtml,\r\n  GridOption,\r\n  OnAfterRowDetailToggleArgs,\r\n  OnBeforeRowDetailToggleArgs,\r\n  OnRowBackToViewportRangeArgs,\r\n  OnRowDetailAsyncEndUpdateArgs,\r\n  OnRowDetailAsyncResponseArgs,\r\n  OnRowOutOfViewportRangeArgs,\r\n  RowDetailViewOption,\r\n  UsabilityOverrideFn\r\n} from '../models/index.js';\r\nimport type { SlickDataView } from '../slick.dataview.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst SlickEventHandler = IIFE_ONLY ? Slick.EventHandler : SlickEventHandler_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/**\r\n * A plugin to add row detail panel\r\n * Original StackOverflow question & article making this possible (thanks to violet313)\r\n * https://stackoverflow.com/questions/10535164/can-slickgrids-row-height-be-dynamically-altered#29399927\r\n * http://violet313.org/slickgrids/#intro\r\n *\r\n * USAGE:\r\n * Add the slick.rowDetailView.(js|css) files and register the plugin with the grid.\r\n *\r\n * AVAILABLE ROW DETAIL OPTIONS:\r\n *    cssClass:               A CSS class to be added to the row detail\r\n *    expandedClass:          Extra classes to be added to the expanded Toggle\r\n *    expandableOverride:     callback method that user can override the default behavior of making every row an expandable row (the logic to show or not the expandable icon).\r\n *    collapsedClass:         Extra classes to be added to the collapse Toggle\r\n *    loadOnce:               Defaults to false, when set to True it will load the data once and then reuse it.\r\n *    preTemplate:            Template that will be used before the async process (typically used to show a spinner/loading)\r\n *    postTemplate:           Template that will be loaded once the async function finishes\r\n *    process:                Async server function call\r\n *    panelRows:              Row count to use for the template panel\r\n *    singleRowExpand:        Defaults to false, limit expanded row to 1 at a time.\r\n *    useRowClick:            Boolean flag, when True will open the row detail on a row click (from any column), default to False\r\n *    keyPrefix:              Defaults to '_', prefix used for all the plugin metadata added to the item object (meta e.g.: padding, collapsed, parent)\r\n *    collapseAllOnSort:      Defaults to true, which will collapse all row detail views when user calls a sort. Unless user implements a sort to deal with padding\r\n *    saveDetailViewOnScroll: Defaults to true, which will save the row detail view in a cache when it detects that it will become out of the viewport buffer\r\n *    useSimpleViewportCalc:  Defaults to false, which will use simplified calculation of out or back of viewport visibility\r\n *\r\n * AVAILABLE PUBLIC METHODS:\r\n *    init:                 initiliaze the plugin\r\n *    expandableOverride:   callback method that user can override the default behavior of making every row an expandable row (the logic to show or not the expandable icon).\r\n *    destroy:              destroy the plugin and it's events\r\n *    collapseAll:          collapse all opened row detail panel\r\n *    collapseDetailView:   collapse a row by passing the item object (row detail)\r\n *    expandDetailView:     expand a row by passing the item object (row detail)\r\n *    getColumnDefinition:  get the column definitions\r\n *    getExpandedRows:      get all the expanded rows\r\n *    getFilterItem:        takes in the item we are filtering and if it is an expanded row returns it's parents row to filter on\r\n *    getOptions:           get current plugin options\r\n *    resizeDetailView:     resize a row detail view, it will auto-calculate the number of rows it needs\r\n *    saveDetailView:       save a row detail view content by passing the row object\r\n *    setOptions:           set or change some of the plugin options\r\n *\r\n * THE PLUGIN EXPOSES THE FOLLOWING SLICK EVENTS:\r\n *    onAsyncResponse:  This event must be used with the \"notify\" by the end user once the Asynchronous Server call returns the item detail\r\n *      Event args:\r\n *        item:         Item detail returned from the async server call\r\n *        detailView:   An explicit view to use instead of template (Optional)\r\n *\r\n *    onAsyncEndUpdate: Fired when the async response finished\r\n *      Event args:\r\n *        grid:         Reference to the grid.\r\n *        item:         Item data context\r\n *\r\n *    onBeforeRowDetailToggle: Fired before the row detail gets toggled\r\n *      Event args:\r\n *        grid:         Reference to the grid.\r\n *        item:         Item data context\r\n *\r\n *    onAfterRowDetailToggle: Fired after the row detail gets toggled\r\n *      Event args:\r\n *        grid:         Reference to the grid.\r\n *        item:         Item data context\r\n *        expandedRows: Array of the Expanded Rows\r\n *\r\n *    onRowOutOfViewportRange: Fired after a row becomes out of viewport range (user can't see the row anymore)\r\n *      Event args:\r\n *        grid:         Reference to the grid.\r\n *        item:         Item data context\r\n *        rowId:        Id of the Row object (datacontext) in the Grid\r\n *        rowIndex:     Index of the Row in the Grid\r\n *        expandedRows: Array of the Expanded Rows\r\n *        rowIdsOutOfViewport: Array of the Out of viewport Range Rows\r\n *\r\n *    onRowBackToViewportRange: Fired after a row is back to viewport range (user can visually see the row detail)\r\n *      Event args:\r\n *        grid:         Reference to the grid.\r\n *        item:         Item data context\r\n *        rowId:        Id of the Row object (datacontext) in the Grid\r\n *        rowIndex:     Index of the Row in the Grid\r\n *        expandedRows: Array of the Expanded Rows\r\n *        rowIdsOutOfViewport: Array of the Out of viewport Range Rows\r\n */\r\nexport class SlickRowDetailView {\r\n  // --\r\n  // public API\r\n  pluginName = 'RowDetailView' as const;\r\n  onAsyncResponse = new SlickEvent<OnRowDetailAsyncResponseArgs>('onAsyncResponse');\r\n  onAsyncEndUpdate = new SlickEvent<OnRowDetailAsyncEndUpdateArgs>('onAsyncEndUpdate');\r\n  onAfterRowDetailToggle = new SlickEvent<OnAfterRowDetailToggleArgs>('onAfterRowDetailToggle');\r\n  onBeforeRowDetailToggle = new SlickEvent<OnBeforeRowDetailToggleArgs>('onBeforeRowDetailToggle');\r\n  onRowBackToViewportRange = new SlickEvent<OnRowBackToViewportRangeArgs>('onRowBackToViewportRange');\r\n  onRowOutOfViewportRange = new SlickEvent<OnRowOutOfViewportRangeArgs>('onRowOutOfViewportRange');\r\n\r\n  // --\r\n  // protected props\r\n  protected _grid!: SlickGrid;\r\n  protected _gridOptions!: GridOption;\r\n  protected _gridUid = '';\r\n  protected _dataView!: SlickDataView;\r\n  protected _dataViewIdProperty = 'id';\r\n  protected _expandableOverride: UsabilityOverrideFn | null = null;\r\n  protected _lastRange: { bottom: number; top: number; } | null = null;\r\n  protected _expandedRows: any[] = [];\r\n  protected _eventHandler: SlickEventHandler_;\r\n  protected _outsideRange = 5;\r\n  protected _visibleRenderedCellCount = 0;\r\n  protected _options: RowDetailViewOption;\r\n  protected _defaults = {\r\n    columnId: '_detail_selector',\r\n    cssClass: 'detailView-toggle',\r\n    expandedClass: undefined,\r\n    collapsedClass: undefined,\r\n    keyPrefix: '_',\r\n    loadOnce: false,\r\n    collapseAllOnSort: true,\r\n    reorderable: false,\r\n    saveDetailViewOnScroll: true,\r\n    singleRowExpand: false,\r\n    useSimpleViewportCalc: false,\r\n    alwaysRenderColumn: true,\r\n    toolTip: '',\r\n    width: 30,\r\n    maxRows: undefined\r\n  } as RowDetailViewOption;\r\n  protected _keyPrefix = this._defaults.keyPrefix;\r\n  protected _gridRowBuffer = 0;\r\n  protected _rowIdsOutOfViewport: Array<number | string> = [];\r\n\r\n  /** Constructor of the Row Detail View Plugin which accepts optional options */\r\n  constructor(options: RowDetailViewOption) {\r\n    this._options = Utils.extend(true, {}, this._defaults, options);\r\n    this._eventHandler = new SlickEventHandler();\r\n\r\n    // user could override the expandable icon logic from within the options or after instantiating the plugin\r\n    if (typeof this._options.expandableOverride === 'function') {\r\n      this.expandableOverride(this._options.expandableOverride);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize the plugin, which requires user to pass the SlickGrid Grid object\r\n   * @param grid: SlickGrid Grid object\r\n   */\r\n  init(grid: SlickGrid) {\r\n    if (!grid) {\r\n      throw new Error('RowDetailView Plugin requires the Grid instance to be passed as argument to the \"init()\" method');\r\n    }\r\n    this._grid = grid;\r\n    this._gridUid = grid.getUID();\r\n    this._gridOptions = grid.getOptions() || {};\r\n    this._dataView = this._grid.getData<SlickDataView>();\r\n    this._keyPrefix = this._options?.keyPrefix ?? '_';\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n\r\n    // Update the minRowBuffer so that the view doesn't disappear when it's at top of screen + the original default 3\r\n    this._gridRowBuffer = this._gridOptions.minRowBuffer || 0;\r\n    this._gridOptions.minRowBuffer = this._options.panelRows + 3;\r\n\r\n    this._eventHandler\r\n      .subscribe(this._grid.onClick, this.handleClick.bind(this))\r\n      .subscribe(this._grid.onScroll, this.handleScroll.bind(this));\r\n\r\n    // Sort will, by default, Collapse all of the open items (unless user implements his own onSort which deals with open row and padding)\r\n    if (this._options.collapseAllOnSort) {\r\n      this._eventHandler.subscribe(this._grid.onSort, this.collapseAll.bind(this));\r\n      this._expandedRows = [];\r\n      this._rowIdsOutOfViewport = [];\r\n    }\r\n\r\n    this._eventHandler.subscribe(this._dataView.onRowCountChanged, () => {\r\n      this._grid.updateRowCount();\r\n      this._grid.render();\r\n    });\r\n\r\n    this._eventHandler.subscribe(this._dataView.onRowsChanged, (_e, a) => {\r\n      this._grid.invalidateRows(a.rows);\r\n      this._grid.render();\r\n    });\r\n\r\n    // subscribe to the onAsyncResponse so that the plugin knows when the user server side calls finished\r\n    this.subscribeToOnAsyncResponse();\r\n\r\n    // after data is set, let's get the DataView Id Property name used (defaults to \"id\")\r\n    this._eventHandler.subscribe(this._dataView.onSetItemsCalled, () => {\r\n      this._dataViewIdProperty = this._dataView?.getIdPropertyName() ?? 'id';\r\n    });\r\n\r\n    // if we use the alternative & simpler calculation of the out of viewport range\r\n    // we will need to know how many rows are rendered on the screen and we need to wait for grid to be rendered\r\n    // unfortunately there is no triggered event for knowing when grid is finished, so we use 250ms delay and it's typically more than enough\r\n    if (this._options.useSimpleViewportCalc) {\r\n      this._eventHandler.subscribe(this._grid.onRendered, (_e, args) => {\r\n        if (args?.endRow) {\r\n          this._visibleRenderedCellCount = args.endRow - args.startRow;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /** destroy the plugin and it's events */\r\n  destroy() {\r\n    this._eventHandler.unsubscribeAll();\r\n    this.onAsyncResponse.unsubscribe();\r\n    this.onAsyncEndUpdate.unsubscribe();\r\n    this.onAfterRowDetailToggle.unsubscribe();\r\n    this.onBeforeRowDetailToggle.unsubscribe();\r\n    this.onRowOutOfViewportRange.unsubscribe();\r\n    this.onRowBackToViewportRange.unsubscribe();\r\n  }\r\n\r\n  /** Get current plugin options */\r\n  getOptions() {\r\n    return this._options;\r\n  }\r\n\r\n  /** set or change some of the plugin options */\r\n  setOptions(options: Partial<RowDetailViewOption>) {\r\n    this._options = Utils.extend(true, {}, this._options, options);\r\n    if (this._options?.singleRowExpand) {\r\n      this.collapseAll();\r\n    }\r\n  }\r\n\r\n  /** Find a value in an array and return the index when (or -1 when not found) */\r\n  protected arrayFindIndex(sourceArray: any[], value: any) {\r\n    if (Array.isArray(sourceArray)) {\r\n      for (let i = 0; i < sourceArray.length; i++) {\r\n        if (sourceArray[i] === value) {\r\n          return i;\r\n        }\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /** Handle mouse click event */\r\n  protected handleClick(e: SlickEventData, args: { row: number; cell: number; }) {\r\n    const dataContext = this._grid.getDataItem(args.row);\r\n    if (!this.checkExpandableOverride(args.row, dataContext, this._grid)) {\r\n      return;\r\n    }\r\n\r\n    // clicking on a row select checkbox\r\n    if (this._options.useRowClick || this._grid.getColumns()[args.cell]['id'] === this._options.columnId && (e.target as HTMLDivElement).classList.contains(this._options.cssClass || '')) {\r\n      // if editing, try to commit\r\n      if (this._grid.getEditorLock().isActive() && !this._grid.getEditorLock().commitCurrentEdit()) {\r\n        e.preventDefault();\r\n        e.stopImmediatePropagation();\r\n        return;\r\n      }\r\n\r\n      // trigger an event before toggling\r\n      // user could cancel the Row Detail opening when event is returning false\r\n      if (this.onBeforeRowDetailToggle.notify({ grid: this._grid, item: dataContext }, e, this).getReturnValue() === false) {\r\n        return;\r\n      }\r\n\r\n      this.toggleRowSelection(args.row, dataContext);\r\n\r\n      // trigger an event after toggling\r\n      this.onAfterRowDetailToggle.notify({\r\n        grid: this._grid,\r\n        item: dataContext,\r\n        expandedRows: this._expandedRows,\r\n      }, e, this);\r\n\r\n      e.stopPropagation();\r\n      e.stopImmediatePropagation();\r\n    }\r\n  }\r\n\r\n  /** If we scroll save detail views that go out of cache range */\r\n  protected handleScroll() {\r\n    if (this._options.useSimpleViewportCalc) {\r\n      this.calculateOutOfRangeViewsSimplerVersion();\r\n    } else {\r\n      this.calculateOutOfRangeViews();\r\n    }\r\n  }\r\n\r\n  /** Calculate when expanded rows become out of view range */\r\n  protected calculateOutOfRangeViews() {\r\n    let scrollDir = '';\r\n    if (this._grid) {\r\n      const renderedRange = this._grid.getRenderedRange();\r\n      // Only check if we have expanded rows\r\n      if (this._expandedRows.length > 0) {\r\n        // Assume scroll direction is down by default.\r\n        scrollDir = 'DOWN';\r\n        if (this._lastRange) {\r\n          // Some scrolling isn't anything as the range is the same\r\n          if (this._lastRange.top === renderedRange.top && this._lastRange.bottom === renderedRange.bottom) {\r\n            return;\r\n          }\r\n\r\n          // If our new top is smaller we are scrolling up\r\n          if (this._lastRange.top > renderedRange.top ||\r\n            // Or we are at very top but our bottom is increasing\r\n            (this._lastRange.top === 0 && renderedRange.top === 0) && this._lastRange.bottom > renderedRange.bottom) {\r\n            scrollDir = 'UP';\r\n          }\r\n        }\r\n      }\r\n\r\n      this._expandedRows.forEach((row) => {\r\n        const rowIndex = this._dataView?.getRowById(row[this._dataViewIdProperty]) ?? 0;\r\n        const rowPadding = row[`${this._keyPrefix}sizePadding`];\r\n        const rowOutOfRange = this.arrayFindIndex(this._rowIdsOutOfViewport, row[this._dataViewIdProperty]) >= 0;\r\n\r\n        if (scrollDir === 'UP') {\r\n          // save the view when asked\r\n          if (this._options.saveDetailViewOnScroll) {\r\n            // If the bottom item within buffer range is an expanded row save it.\r\n            if (rowIndex >= renderedRange.bottom - this._gridRowBuffer) {\r\n              this.saveDetailView(row);\r\n            }\r\n          }\r\n\r\n          // If the row expanded area is within the buffer notify that it is back in range\r\n          if (rowOutOfRange && rowIndex - this._outsideRange < renderedRange.top && rowIndex >= renderedRange.top) {\r\n            this.notifyBackToViewportWhenDomExist(row, row[this._dataViewIdProperty]);\r\n          }\r\n\r\n          // if our first expanded row is about to go off the bottom\r\n          else if (!rowOutOfRange && (rowIndex + rowPadding) > renderedRange.bottom) {\r\n            this.notifyOutOfViewport(row, row[this._dataViewIdProperty]);\r\n          }\r\n        }\r\n        else if (scrollDir === 'DOWN') {\r\n          // save the view when asked\r\n          if (this._options.saveDetailViewOnScroll) {\r\n            // If the top item within buffer range is an expanded row save it.\r\n            if (rowIndex <= renderedRange.top + this._gridRowBuffer) {\r\n              this.saveDetailView(row);\r\n            }\r\n          }\r\n\r\n          // If row index is i higher than bottom with some added value (To ignore top rows off view) and is with view and was our of range\r\n          if (rowOutOfRange && (rowIndex + rowPadding + this._outsideRange) > renderedRange.bottom && rowIndex < rowIndex + rowPadding) {\r\n            this.notifyBackToViewportWhenDomExist(row, row[this._dataViewIdProperty]);\r\n          }\r\n          // if our row is outside top of and the buffering zone but not in the array of outOfVisable range notify it\r\n          else if (!rowOutOfRange && rowIndex < renderedRange.top) {\r\n            this.notifyOutOfViewport(row, row[this._dataViewIdProperty]);\r\n          }\r\n        }\r\n      });\r\n      this._lastRange = renderedRange;\r\n    }\r\n  }\r\n\r\n  /** This is an alternative & more simpler version of the Calculate when expanded rows become out of view range */\r\n  protected calculateOutOfRangeViewsSimplerVersion() {\r\n    if (this._grid) {\r\n      const renderedRange = this._grid.getRenderedRange();\r\n\r\n      this._expandedRows.forEach((row) => {\r\n        const rowIndex = this._dataView.getRowById(row[this._dataViewIdProperty]) ?? -1;\r\n        const isOutOfVisibility = this.checkIsRowOutOfViewportRange(rowIndex, renderedRange);\r\n        if (!isOutOfVisibility && this.arrayFindIndex(this._rowIdsOutOfViewport, row[this._dataViewIdProperty]) >= 0) {\r\n          this.notifyBackToViewportWhenDomExist(row, row[this._dataViewIdProperty]);\r\n        } else if (isOutOfVisibility) {\r\n          this.notifyOutOfViewport(row, row[this._dataViewIdProperty]);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if the row became out of visible range (when user can't see it anymore)\r\n   * @param rowIndex\r\n   * @param renderedRange from SlickGrid\r\n   */\r\n  protected checkIsRowOutOfViewportRange(rowIndex: number, renderedRange: any) {\r\n    if (Math.abs(renderedRange.bottom - this._gridRowBuffer - rowIndex) > this._visibleRenderedCellCount * 2) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Send a notification, through \"onRowOutOfViewportRange\", that is out of the viewport range */\r\n  protected notifyOutOfViewport(item: any, rowId: number | string) {\r\n    const rowIndex = (item.rowIndex || this._dataView.getRowById(item[this._dataViewIdProperty])) as number;\r\n\r\n    this.onRowOutOfViewportRange.notify({\r\n      grid: this._grid,\r\n      item,\r\n      rowId,\r\n      rowIndex,\r\n      expandedRows: this._expandedRows,\r\n      rowIdsOutOfViewport: this.syncOutOfViewportArray(rowId, true)\r\n    }, null, this);\r\n  }\r\n\r\n  /** Send a notification, through \"onRowBackToViewportRange\", that a row came back into the viewport visible range */\r\n  protected notifyBackToViewportWhenDomExist(item: any, rowId: number | string) {\r\n    const rowIndex = (item.rowIndex || this._dataView.getRowById(item[this._dataViewIdProperty])) as number;\r\n\r\n    window.setTimeout(() => {\r\n      // make sure View Row DOM Element really exist before notifying that it's a row that is visible again\r\n      if (document.querySelector(`.${this._gridUid} .cellDetailView_${item[this._dataViewIdProperty]}`)) {\r\n        this.onRowBackToViewportRange.notify({\r\n          grid: this._grid,\r\n          item,\r\n          rowId,\r\n          rowIndex,\r\n          expandedRows: this._expandedRows,\r\n          rowIdsOutOfViewport: this.syncOutOfViewportArray(rowId, false)\r\n        }, null, this);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * This function will sync the \"out of viewport\" array whenever necessary.\r\n   * The sync can add a detail row (when necessary, no need to add again if it already exist) or delete a row from the array.\r\n   * @param rowId: number\r\n   * @param isAdding: are we adding or removing a row?\r\n   */\r\n  protected syncOutOfViewportArray(rowId: number | string, isAdding: boolean) {\r\n    const arrayRowIndex = this.arrayFindIndex(this._rowIdsOutOfViewport, rowId);\r\n\r\n    if (isAdding && arrayRowIndex < 0) {\r\n      this._rowIdsOutOfViewport.push(rowId);\r\n    } else if (!isAdding && arrayRowIndex >= 0) {\r\n      this._rowIdsOutOfViewport.splice(arrayRowIndex, 1);\r\n    }\r\n    return this._rowIdsOutOfViewport;\r\n  }\r\n\r\n  // Toggle between showing or hiding a row\r\n  protected toggleRowSelection(rowNumber: number, dataContext: any) {\r\n    if (!this.checkExpandableOverride(rowNumber, dataContext, this._grid)) {\r\n      return;\r\n    }\r\n\r\n    this._dataView.beginUpdate();\r\n    this.handleAccordionShowHide(dataContext);\r\n    this._dataView.endUpdate();\r\n  }\r\n\r\n  /** Collapse all of the open detail rows */\r\n  collapseAll() {\r\n    this._dataView.beginUpdate();\r\n    for (let i = this._expandedRows.length - 1; i >= 0; i--) {\r\n      this.collapseDetailView(this._expandedRows[i], true);\r\n    }\r\n    this._dataView.endUpdate();\r\n  }\r\n\r\n  /** Collapse a detail row so that it is not longer open */\r\n  collapseDetailView(item: any, isMultipleCollapsing = false) {\r\n    if (!isMultipleCollapsing) {\r\n      this._dataView.beginUpdate();\r\n    }\r\n    // Save the details on the collapse assuming onetime loading\r\n    if (this._options.loadOnce) {\r\n      this.saveDetailView(item);\r\n    }\r\n\r\n    item[`${this._keyPrefix}collapsed`] = true;\r\n    for (let idx = 1; idx <= item[`${this._keyPrefix}sizePadding`]; idx++) {\r\n      this._dataView.deleteItem(item[this._dataViewIdProperty] + '.' + idx);\r\n    }\r\n    item[`${this._keyPrefix}sizePadding`] = 0;\r\n    this._dataView.updateItem(item[this._dataViewIdProperty], item);\r\n\r\n    // Remove the item from the expandedRows\r\n    this._expandedRows = this._expandedRows.filter((r) => {\r\n      return r[this._dataViewIdProperty] !== item[this._dataViewIdProperty];\r\n    });\r\n\r\n    if (!isMultipleCollapsing) {\r\n      this._dataView.endUpdate();\r\n    }\r\n  }\r\n\r\n  /** Expand a detail row by providing the dataview item that is to be expanded */\r\n  expandDetailView(item: any) {\r\n    if (this._options?.singleRowExpand) {\r\n      this.collapseAll();\r\n    }\r\n\r\n    item[`${this._keyPrefix}collapsed`] = false;\r\n    this._expandedRows.push(item);\r\n\r\n    // In the case something went wrong loading it the first time such a scroll of screen before loaded\r\n    if (!item[`${this._keyPrefix}detailContent`]) {\r\n      item[`${this._keyPrefix}detailViewLoaded`] = false;\r\n    }\r\n    // display pre-loading template\r\n    if (!item[`${this._keyPrefix}detailViewLoaded`] || this._options.loadOnce !== true) {\r\n      item[`${this._keyPrefix}detailContent`] = this._options?.preTemplate?.(item);\r\n    } else {\r\n      this.onAsyncResponse.notify({\r\n        item,\r\n        itemDetail: item,\r\n        detailView: item[`${this._keyPrefix}detailContent`],\r\n        grid: this._grid\r\n      }, undefined, this);\r\n      this.applyTemplateNewLineHeight(item);\r\n      this._dataView.updateItem(item[this._dataViewIdProperty], item);\r\n\r\n      return;\r\n    }\r\n\r\n    this.applyTemplateNewLineHeight(item);\r\n    this._dataView.updateItem(item[this._dataViewIdProperty], item);\r\n\r\n    // async server call\r\n    this._options.process(item);\r\n  }\r\n\r\n  /** Saves the current state of the detail view */\r\n  saveDetailView(item: any) {\r\n    const view = document.querySelector(`.${this._gridUid} .innerDetailView_${item[this._dataViewIdProperty]}`);\r\n    if (view) {\r\n      const html = view.innerHTML;\r\n      if (html !== undefined) {\r\n        item[`${this._keyPrefix}detailContent`] = html;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * subscribe to the onAsyncResponse so that the plugin knows when the user server side calls finished\r\n   * the response has to be as \"args.item\" (or \"args.itemDetail\") with it's data back\r\n   */\r\n  protected subscribeToOnAsyncResponse() {\r\n    this.onAsyncResponse.subscribe((e, args) => {\r\n      if (!args || (!args.item && !args.itemDetail)) {\r\n        throw 'Slick.RowDetailView plugin requires the onAsyncResponse() to supply \"args.item\" property.';\r\n      }\r\n\r\n      // we accept item/itemDetail, just get the one which has data\r\n      const itemDetail = args.item || args.itemDetail;\r\n\r\n      // If we just want to load in a view directly we can use detailView property to do so\r\n      if (args.detailView) {\r\n        itemDetail[`${this._keyPrefix}detailContent`] = args.detailView;\r\n      } else {\r\n        itemDetail[`${this._keyPrefix}detailContent`] = this._options?.postTemplate?.(itemDetail);\r\n      }\r\n\r\n      itemDetail[`${this._keyPrefix}detailViewLoaded`] = true;\r\n      this._dataView.updateItem(itemDetail[this._dataViewIdProperty], itemDetail);\r\n\r\n      // trigger an event once the post template is finished loading\r\n      this.onAsyncEndUpdate.notify({\r\n        grid: this._grid,\r\n        item: itemDetail,\r\n        itemDetail\r\n      }, e, this);\r\n    });\r\n  }\r\n\r\n  /** When row is getting toggled, we will handle the action of collapsing/expanding */\r\n  protected handleAccordionShowHide(item: any) {\r\n    if (item) {\r\n      if (!item[`${this._keyPrefix}collapsed`]) {\r\n        this.collapseDetailView(item);\r\n      } else {\r\n        this.expandDetailView(item);\r\n      }\r\n    }\r\n  }\r\n\r\n  //////////////////////////////////////////////////////////////\r\n  //////////////////////////////////////////////////////////////\r\n\r\n  /** Get the Row Detail padding (which are the rows dedicated to the detail panel) */\r\n  protected getPaddingItem(parent: any, offset: any) {\r\n    const item: any = {};\r\n\r\n    Object.keys(this._dataView).forEach(prop => {\r\n      item[prop] = null;\r\n    });\r\n    item[this._dataViewIdProperty] = parent[this._dataViewIdProperty] + '.' + offset;\r\n\r\n    // additional hidden padding metadata fields\r\n    item[`${this._keyPrefix}collapsed`] = true;\r\n    item[`${this._keyPrefix}isPadding`] = true;\r\n    item[`${this._keyPrefix}parent`] = parent;\r\n    item[`${this._keyPrefix}offset`] = offset;\r\n\r\n    return item;\r\n  };\r\n\r\n  /** Create the detail ctr node. this belongs to the dev & can be custom-styled as per */\r\n  protected applyTemplateNewLineHeight(item: any) {\r\n    // the height is calculated by the template row count (how many line of items does the template view have)\r\n    const rowCount = this._options.panelRows;\r\n\r\n    // calculate padding requirements based on detail-content..\r\n    // ie. worst-case: create an invisible dom node now & find it's height.\r\n    const lineHeight = 13; // we know cuz we wrote the custom css init ;)\r\n    item[`${this._keyPrefix}sizePadding`] = Math.ceil(((rowCount * 2) * lineHeight) / this._gridOptions.rowHeight!);\r\n    item[`${this._keyPrefix}height`] = (item[`${this._keyPrefix}sizePadding`] * this._gridOptions.rowHeight!);\r\n    const idxParent = this._dataView.getIdxById(item[this._dataViewIdProperty]) ?? 0;\r\n    for (let idx = 1; idx <= item[`${this._keyPrefix}sizePadding`]; idx++) {\r\n      this._dataView.insertItem(idxParent + idx, this.getPaddingItem(item, idx));\r\n    }\r\n  }\r\n\r\n  /** Get the Column Definition of the first column dedicated to toggling the Row Detail View */\r\n  getColumnDefinition() {\r\n    return {\r\n      id: this._options.columnId,\r\n      name: '',\r\n      reorderable: this._options.reorderable,\r\n      toolTip: this._options.toolTip,\r\n      field: 'sel',\r\n      width: this._options.width,\r\n      resizable: false,\r\n      sortable: false,\r\n      alwaysRenderColumn: this._options.alwaysRenderColumn,\r\n      cssClass: this._options.cssClass,\r\n      formatter: this.detailSelectionFormatter.bind(this)\r\n    };\r\n  }\r\n\r\n  /** Return the currently expanded rows */\r\n  getExpandedRows() {\r\n    return this._expandedRows;\r\n  }\r\n\r\n  /** The cell Formatter that shows the icon that will be used to toggle the Row Detail */\r\n  protected detailSelectionFormatter(row: number, _cell: number, _val: any, _column: Column, dataContext: any, grid: SlickGrid): FormatterResultWithHtml | HTMLElement | '' {\r\n    if (!this.checkExpandableOverride(row, dataContext, grid)) {\r\n      return '';\r\n    } else {\r\n      if (dataContext[`${this._keyPrefix}collapsed`] === undefined) {\r\n        dataContext[`${this._keyPrefix}collapsed`] = true;\r\n        dataContext[`${this._keyPrefix}sizePadding`] = 0;     //the required number of pading rows\r\n        dataContext[`${this._keyPrefix}height`] = 0;     //the actual height in pixels of the detail field\r\n        dataContext[`${this._keyPrefix}isPadding`] = false;\r\n        dataContext[`${this._keyPrefix}parent`] = undefined;\r\n        dataContext[`${this._keyPrefix}offset`] = 0;\r\n      }\r\n\r\n      if (dataContext[`${this._keyPrefix}isPadding`]) {\r\n        // render nothing\r\n      }\r\n      else if (dataContext[`${this._keyPrefix}collapsed`]) {\r\n        let collapsedClasses = this._options.cssClass + ' expand ';\r\n        if (this._options.collapsedClass) {\r\n          collapsedClasses += this._options.collapsedClass;\r\n        }\r\n        return Utils.createDomElement('div', { className: collapsedClasses });\r\n      }\r\n      else {\r\n        const rowHeight = this._gridOptions.rowHeight;\r\n        let outterHeight = dataContext[`${this._keyPrefix}sizePadding`] * this._gridOptions.rowHeight!;\r\n\r\n        if (this._options.maxRows !== undefined && dataContext[`${this._keyPrefix}sizePadding`] > this._options.maxRows) {\r\n          outterHeight = this._options.maxRows * rowHeight!;\r\n          dataContext[`${this._keyPrefix}sizePadding`] = this._options.maxRows;\r\n        }\r\n\r\n        // sneaky extra </div> inserted here-----------------v\r\n        let expandedClasses = this._options.cssClass + ' collapse ';\r\n        if (this._options.expandedClass) {\r\n          expandedClasses += this._options.expandedClass;\r\n        }\r\n\r\n        // create the Row Detail div container that will be inserted AFTER the `.slick-cell`\r\n        const cellDetailContainerElm = Utils.createDomElement('div', {\r\n          className: `dynamic-cell-detail cellDetailView_${dataContext[this._dataViewIdProperty]}`,\r\n          style: { height: `${outterHeight}px`, top: `${rowHeight}px` }\r\n        });\r\n        const innerContainerElm = Utils.createDomElement('div', { className: `detail-container detailViewContainer_${dataContext[this._dataViewIdProperty]}` });\r\n        const innerDetailViewElm = Utils.createDomElement('div', { className: `innerDetailView_${dataContext[this._dataViewIdProperty]}` });\r\n        innerDetailViewElm.innerHTML = this._grid.sanitizeHtmlString(dataContext[`${this._keyPrefix}detailContent`]);\r\n\r\n        innerContainerElm.appendChild(innerDetailViewElm);\r\n        cellDetailContainerElm.appendChild(innerContainerElm);\r\n\r\n        const result: FormatterResultWithHtml = {\r\n          html: Utils.createDomElement('div', { className: expandedClasses }),\r\n          insertElementAfterTarget: cellDetailContainerElm,\r\n        };\r\n\r\n        return result;\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n  /** Resize the Row Detail View */\r\n  resizeDetailView(item: any) {\r\n    if (!item) {\r\n      return;\r\n    }\r\n\r\n    // Grad each of the DOM elements\r\n    const mainContainer = document.querySelector<HTMLDivElement>(`.${this._gridUid} .detailViewContainer_${item[this._dataViewIdProperty]}`);\r\n    const cellItem = document.querySelector<HTMLDivElement>(`.${this._gridUid} .cellDetailView_${item[this._dataViewIdProperty]}`);\r\n    const inner = document.querySelector<HTMLDivElement>(`.${this._gridUid} .innerDetailView_${item[this._dataViewIdProperty]}`);\r\n\r\n    if (!mainContainer || !cellItem || !inner) {\r\n      return;\r\n    }\r\n\r\n    for (let idx = 1; idx <= item[`${this._keyPrefix}sizePadding`]; idx++) {\r\n      this._dataView.deleteItem(`${item[this._dataViewIdProperty]}.${idx}`);\r\n    }\r\n\r\n    const rowHeight = this._gridOptions.rowHeight; // height of a row\r\n    const lineHeight = 13; // we know cuz we wrote the custom css innit ;)\r\n\r\n    // remove the height so we can calculate the height\r\n    mainContainer.style.minHeight = '';\r\n\r\n    // Get the scroll height for the main container so we know the actual size of the view\r\n    const itemHeight = mainContainer.scrollHeight;\r\n\r\n    // Now work out how many rows\r\n    const rowCount = Math.ceil(itemHeight / rowHeight!);\r\n\r\n    item[`${this._keyPrefix}sizePadding`] = Math.ceil(((rowCount * 2) * lineHeight) / rowHeight!);\r\n    item[`${this._keyPrefix}height`] = itemHeight;\r\n\r\n    let outterHeight = (item[`${this._keyPrefix}sizePadding`] * rowHeight!);\r\n    if (this._options.maxRows !== undefined && item[`${this._keyPrefix}sizePadding`] > this._options.maxRows) {\r\n      outterHeight = this._options.maxRows * rowHeight!;\r\n      item[`${this._keyPrefix}sizePadding`] = this._options.maxRows;\r\n    }\r\n\r\n    // If the padding is now more than the original minRowBuff we need to increase it\r\n    if (this._grid.getOptions().minRowBuffer! < item[`${this._keyPrefix}sizePadding`]) {\r\n      // Update the minRowBuffer so that the view doesn't disappear when it's at top of screen + the original default 3\r\n      this._grid.getOptions().minRowBuffer = item[`${this._keyPrefix}sizePadding`] + 3;\r\n    }\r\n\r\n    mainContainer.setAttribute('style', 'min-height: ' + item[`${this._keyPrefix}height`] + 'px');\r\n    if (cellItem) {\r\n      cellItem.setAttribute('style', 'height: ' + outterHeight + 'px; top:' + rowHeight + 'px');\r\n    }\r\n\r\n    const idxParent = this._dataView.getIdxById(item[this._dataViewIdProperty]) ?? 0;\r\n    for (let idx = 1; idx <= item[`${this._keyPrefix}sizePadding`]; idx++) {\r\n      this._dataView.insertItem(idxParent + idx, this.getPaddingItem(item, idx));\r\n    }\r\n\r\n    // Lastly save the updated state\r\n    this.saveDetailView(item);\r\n  }\r\n\r\n  /** Takes in the item we are filtering and if it is an expanded row returns it's parents row to filter on */\r\n  getFilterItem(item: any) {\r\n    if (item[`${this._keyPrefix}isPadding`] && item[`${this._keyPrefix}parent`]) {\r\n      item = item[`${this._keyPrefix}parent`];\r\n    }\r\n    return item;\r\n  }\r\n\r\n  protected checkExpandableOverride(row: number, dataContext: any, grid: SlickGrid) {\r\n    if (typeof this._expandableOverride === 'function') {\r\n      return this._expandableOverride(row, dataContext, grid);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Method that user can pass to override the default behavior or making every row an expandable row.\r\n   * In order word, user can choose which rows to be an available row detail (or not) by providing his own logic.\r\n   * @param overrideFn: override function callback\r\n   */\r\n  expandableOverride(overrideFn: UsabilityOverrideFn) {\r\n    this._expandableOverride = overrideFn;\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      Plugins: {\r\n        RowDetailView: SlickRowDetailView\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n", "import { SlickEvent as SlickEvent_, type SlickEventData as SlickEventData_, SlickEventHandler as SlickEventHandler_, Utils as Utils_ } from '../slick.core.js';\r\nimport type { Column, DragRowMove, FormatterResultWithHtml, RowMoveManagerOption, UsabilityOverrideFn } from '../models/index.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst SlickEventHandler = IIFE_ONLY ? Slick.EventHandler : SlickEventHandler_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/**\r\n * Row Move Manager options:\r\n *    containerCssClass:        A CSS class to be added to the cell container.\r\n *    cssClass:                 A CSS class to be added to the div of the cell formatter.\r\n *    columnId:                 Column definition id (defaults to \"_move\")\r\n *    cancelEditOnDrag:         Do we want to cancel any Editing while dragging a row (defaults to false)\r\n *    disableRowSelection:      Do we want to disable the row selection? (defaults to false)\r\n *    hideRowMoveShadow:        Do we want to hide the row move shadow clone? (defaults to true)\r\n *    rowMoveShadowMarginTop:   When row move shadow is shown, optional margin-top (defaults to 0)\r\n *    rowMoveShadowMarginLeft:  When row move shadow is shown, optional margin-left (defaults to 0)\r\n *    rowMoveShadowOpacity:     When row move shadow is shown, what is its opacity? (defaults to 0.95)\r\n *    rowMoveShadowScale:       When row move shadow is shown, what is its size scale? (default to 0.75)\r\n *    singleRowMove:            Do we want a single row move? Setting this to false means that it's a multple row move (defaults to false)\r\n *    width:                    Width of the column\r\n *    usabilityOverride:        Callback method that user can override the default behavior of the row being moveable or not\r\n *\r\n */\r\n\r\nexport class SlickRowMoveManager {\r\n  // --\r\n  // public API\r\n  pluginName = 'RowMoveManager' as const;\r\n  onBeforeMoveRows = new SlickEvent<{ grid: SlickGrid; rows: number[]; insertBefore: number; }>('onBeforeMoveRows');\r\n  onMoveRows = new SlickEvent<{ grid: SlickGrid; rows: number[]; insertBefore: number; }>('onMoveRows');\r\n\r\n  // --\r\n  // protected props\r\n  protected _grid!: SlickGrid;\r\n  protected _canvas!: HTMLElement;\r\n  protected _dragging = false;\r\n  protected _eventHandler: SlickEventHandler_;\r\n  protected _usabilityOverride?: UsabilityOverrideFn;\r\n  protected _options: RowMoveManagerOption;\r\n  protected _defaults: RowMoveManagerOption = {\r\n    columnId: '_move',\r\n    cssClass: undefined,\r\n    cancelEditOnDrag: false,\r\n    disableRowSelection: false,\r\n    hideRowMoveShadow: true,\r\n    reorderable: false,\r\n    rowMoveShadowMarginTop: 0,\r\n    rowMoveShadowMarginLeft: 0,\r\n    rowMoveShadowOpacity: 0.95,\r\n    rowMoveShadowScale: 0.75,\r\n    singleRowMove: false,\r\n    width: 40,\r\n  };\r\n\r\n  constructor(options: Partial<RowMoveManagerOption>) {\r\n    this._options = Utils.extend(true, {}, this._defaults, options);\r\n    this._eventHandler = new SlickEventHandler();\r\n  }\r\n\r\n\r\n  init(grid: SlickGrid) {\r\n    this._grid = grid;\r\n    this._canvas = this._grid.getCanvasNode();\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n\r\n    // user could override the expandable icon logic from within the options or after instantiating the plugin\r\n    if (typeof this._options?.usabilityOverride === 'function') {\r\n      this.usabilityOverride(this._options.usabilityOverride);\r\n    }\r\n\r\n    this._eventHandler\r\n      .subscribe(this._grid.onDragInit, this.handleDragInit.bind(this))\r\n      .subscribe(this._grid.onDragStart, this.handleDragStart.bind(this))\r\n      .subscribe(this._grid.onDrag, this.handleDrag.bind(this))\r\n      .subscribe(this._grid.onDragEnd, this.handleDragEnd.bind(this));\r\n  }\r\n\r\n  destroy() {\r\n    this._eventHandler.unsubscribeAll();\r\n  }\r\n\r\n  setOptions(newOptions: Partial<RowMoveManagerOption>) {\r\n    this._options = Utils.extend({}, this._options, newOptions);\r\n  }\r\n\r\n  protected handleDragInit(e: SlickEventData_) {\r\n    // prevent the grid from cancelling drag'n'drop by default\r\n    e.stopImmediatePropagation();\r\n  }\r\n\r\n  protected handleDragStart(e: SlickEventData_, dd: DragRowMove): boolean | void {\r\n    const cell = this._grid.getCellFromEvent(e) || { cell: -1, row: -1 };\r\n    const currentRow = cell?.row;\r\n    const dataContext = this._grid.getDataItem(currentRow);\r\n\r\n    if (!this.checkUsabilityOverride(currentRow, dataContext, this._grid)) {\r\n      return;\r\n    }\r\n\r\n    if (this._options.cancelEditOnDrag && this._grid.getEditorLock().isActive()) {\r\n      this._grid.getEditorLock().cancelCurrentEdit();\r\n    }\r\n\r\n    if (this._grid.getEditorLock().isActive() || !this.isHandlerColumn(cell.cell)) {\r\n      return false;\r\n    }\r\n\r\n    this._dragging = true;\r\n    e.stopImmediatePropagation();\r\n\r\n    // optionally create a shadow element of the row so that we can see all the time which row exactly we're dragging\r\n    if (!this._options.hideRowMoveShadow) {\r\n      const slickRowElm = this._grid.getCellNode(cell.row, cell.cell)?.closest<HTMLDivElement>('.slick-row');\r\n      if (slickRowElm) {\r\n        dd.clonedSlickRow = slickRowElm.cloneNode(true) as HTMLDivElement;\r\n        dd.clonedSlickRow.classList.add('slick-reorder-shadow-row');\r\n        dd.clonedSlickRow.style.display = 'none';\r\n        dd.clonedSlickRow.style.marginLeft = Number(this._options.rowMoveShadowMarginLeft || 0) + 'px';\r\n        dd.clonedSlickRow.style.marginTop = Number(this._options.rowMoveShadowMarginTop || 0) + 'px';\r\n        dd.clonedSlickRow.style.opacity = `${this._options.rowMoveShadowOpacity || 0.95}`;\r\n        dd.clonedSlickRow.style.transform = `scale(${this._options.rowMoveShadowScale || 0.75})`;\r\n        this._canvas.appendChild(dd.clonedSlickRow);\r\n      }\r\n    }\r\n\r\n    let selectedRows = this._options.singleRowMove ? [cell.row] : this._grid.getSelectedRows();\r\n    if (selectedRows.length === 0 || !selectedRows.some(selectedRow => selectedRow === cell.row)) {\r\n      selectedRows = [cell.row];\r\n      if (!this._options.disableRowSelection) {\r\n        this._grid.setSelectedRows(selectedRows);\r\n      }\r\n    }\r\n\r\n    const rowHeight = this._grid.getOptions().rowHeight;\r\n\r\n    dd.selectedRows = selectedRows;\r\n\r\n    dd.selectionProxy = document.createElement('div');\r\n    dd.selectionProxy.className = 'slick-reorder-proxy';\r\n    dd.selectionProxy.style.display = 'none';\r\n    dd.selectionProxy.style.position = 'absolute';\r\n    dd.selectionProxy.style.zIndex = '99999';\r\n    dd.selectionProxy.style.width = `${this._canvas.clientWidth}px`;\r\n    dd.selectionProxy.style.height = `${rowHeight! * selectedRows.length}px`;\r\n    this._canvas.appendChild(dd.selectionProxy);\r\n\r\n    dd.guide = document.createElement('div');\r\n    dd.guide.className = 'slick-reorder-guide';\r\n    dd.guide.style.position = 'absolute';\r\n    dd.guide.style.zIndex = '99999';\r\n    dd.guide.style.width = `${this._canvas.clientWidth}px`;\r\n    dd.guide.style.top = `-1000px`;\r\n    this._canvas.appendChild(dd.guide);\r\n\r\n    dd.insertBefore = -1;\r\n  }\r\n\r\n  protected handleDrag(evt: SlickEventData_, dd: DragRowMove): boolean | void {\r\n    if (!this._dragging) {\r\n      return;\r\n    }\r\n\r\n    evt.stopImmediatePropagation();\r\n    const e = evt.getNativeEvent<MouseEvent | TouchEvent>();\r\n\r\n    const targetEvent = (e as TouchEvent)?.touches?.[0] ?? e;\r\n    const top = targetEvent.pageY - (Utils.offset(this._canvas)?.top ?? 0);\r\n    dd.selectionProxy.style.top = `${top - 5}px`;\r\n    dd.selectionProxy.style.display = 'block';\r\n\r\n    // if the row move shadow is enabled, we'll also make it follow the mouse cursor\r\n    if (dd.clonedSlickRow) {\r\n      dd.clonedSlickRow.style.top = `${top - 6}px`;\r\n      dd.clonedSlickRow.style.display = 'block';\r\n    }\r\n\r\n    const insertBefore = Math.max(0, Math.min(Math.round(top / this._grid.getOptions().rowHeight!), this._grid.getDataLength()));\r\n    if (insertBefore !== dd.insertBefore) {\r\n      const eventData = {\r\n        grid: this._grid,\r\n        rows: dd.selectedRows,\r\n        insertBefore\r\n      };\r\n\r\n      if (this.onBeforeMoveRows.notify(eventData).getReturnValue() === false) {\r\n        dd.canMove = false;\r\n      } else {\r\n        dd.canMove = true;\r\n      }\r\n\r\n      // if there's a UsabilityOverride defined, we also need to verify that the condition is valid\r\n      if (this._usabilityOverride && dd.canMove) {\r\n        const insertBeforeDataContext = this._grid.getDataItem(insertBefore);\r\n        dd.canMove = this.checkUsabilityOverride(insertBefore, insertBeforeDataContext, this._grid);\r\n      }\r\n\r\n      // if the new target is possible we'll display the dark blue bar (representin the acceptability) at the target position\r\n      // else it won't show up (it will be off the screen)\r\n      if (!dd.canMove) {\r\n        dd.guide.style.top = '-1000px';\r\n      } else {\r\n        dd.guide.style.top = `${insertBefore * (this._grid.getOptions().rowHeight || 0)}px`;\r\n      }\r\n\r\n      dd.insertBefore = insertBefore;\r\n    }\r\n  }\r\n\r\n  protected handleDragEnd(e: SlickEventData_, dd: DragRowMove) {\r\n    if (!this._dragging) {\r\n      return;\r\n    }\r\n    this._dragging = false;\r\n    e.stopImmediatePropagation();\r\n\r\n    dd.guide?.remove();\r\n    dd.selectionProxy?.remove();\r\n    dd.clonedSlickRow?.remove();\r\n\r\n    if (dd.canMove) {\r\n      const eventData = {\r\n        grid: this._grid,\r\n        rows: dd.selectedRows,\r\n        insertBefore: dd.insertBefore\r\n      };\r\n      // TODO:  this._grid.remapCellCssClasses ?\r\n      this.onMoveRows.notify(eventData);\r\n    }\r\n  }\r\n\r\n  getColumnDefinition(): Column {\r\n    const columnId = String(this._options?.columnId ?? this._defaults.columnId);\r\n\r\n    return {\r\n      id: columnId,\r\n      name: '',\r\n      field: 'move',\r\n      behavior: 'selectAndMove',\r\n      reorderable: this._options.reorderable,\r\n      excludeFromColumnPicker: true,\r\n      excludeFromGridMenu: true,\r\n      excludeFromHeaderMenu: true,\r\n      resizable: false,\r\n      selectable: false,\r\n      width: this._options.width || 40,\r\n      formatter: this.moveIconFormatter.bind(this)\r\n    };\r\n  }\r\n\r\n  protected moveIconFormatter(row: number, _cell: number, _val: any, _column: Column, dataContext: any, grid: SlickGrid): FormatterResultWithHtml | string {\r\n    if (!this.checkUsabilityOverride(row, dataContext, grid)) {\r\n      return '';\r\n    } else {\r\n      const iconElm = document.createElement('div');\r\n      iconElm.className = this._options.cssClass || '';\r\n      return {\r\n        addClasses: `cell-reorder dnd ${this._options.containerCssClass || ''}`,\r\n        html: iconElm\r\n      };\r\n    }\r\n  }\r\n\r\n  protected checkUsabilityOverride(row: number, dataContext: any, grid: SlickGrid) {\r\n    if (typeof this._usabilityOverride === 'function') {\r\n      return this._usabilityOverride(row, dataContext, grid);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Method that user can pass to override the default behavior or making every row moveable.\r\n   * In order word, user can choose which rows to be an available as moveable (or not) by providing his own logic show/hide icon and usability.\r\n   * @param overrideFn: override function callback\r\n   */\r\n  usabilityOverride(overrideFn: UsabilityOverrideFn) {\r\n    this._usabilityOverride = overrideFn;\r\n  }\r\n\r\n  isHandlerColumn(columnIndex: number | string) {\r\n    return /move|selectAndMove/.test(this._grid.getColumns()[+columnIndex].behavior || '');\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      RowMoveManager: SlickRowMoveManager\r\n    }\r\n  });\r\n}\r\n\r\n", "import {\r\n  keyCode as keyCode_,\r\n  SlickEvent as SlickEvent_,\r\n  SlickEventData as SlickEventData_,\r\n  SlickEventHandler as SlickEventHandler_,\r\n  SlickRange as SlickRange_,\r\n  Utils as Utils_\r\n} from '../slick.core.js';\r\nimport { Draggable as Draggable_ } from '../slick.interactions.js';\r\nimport { SlickCellRangeDecorator as SlickCellRangeDecorator_ } from './slick.cellrangedecorator.js';\r\nimport { SlickCellRangeSelector as SlickCellRangeSelector_ } from './slick.cellrangeselector.js';\r\nimport type { SlickCrossGridRowMoveManager as SlickCrossGridRowMoveManager_ } from './slick.crossgridrowmovemanager.js';\r\nimport type { SlickRowMoveManager as SlickRowMoveManager_ } from './slick.rowmovemanager.js';\r\nimport type { OnActiveCellChangedEventArgs, RowSelectionModelOption } from '../models/index.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst Draggable = IIFE_ONLY ? Slick.Draggable : Draggable_;\r\nconst keyCode = IIFE_ONLY ? Slick.keyCode : keyCode_;\r\nconst SlickCellRangeDecorator = IIFE_ONLY ? Slick.CellRangeDecorator : SlickCellRangeDecorator_;\r\nconst SlickCellRangeSelector = IIFE_ONLY ? Slick.CellRangeSelector : SlickCellRangeSelector_;\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst SlickEventData = IIFE_ONLY ? Slick.EventData : SlickEventData_;\r\nconst SlickEventHandler = IIFE_ONLY ? Slick.EventHandler : SlickEventHandler_;\r\nconst SlickRange = IIFE_ONLY ? Slick.Range : SlickRange_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\nexport class SlickRowSelectionModel {\r\n  // --\r\n  // public API\r\n  pluginName = 'RowSelectionModel' as const;\r\n  onSelectedRangesChanged = new SlickEvent<SlickRange_[]>('onSelectedRangesChanged');\r\n  // _handler, _inHandler, _isRowMoveManagerHandler, _options, wrapHandler\r\n  // --\r\n  // protected props\r\n  protected _grid!: SlickGrid;\r\n  protected _ranges: SlickRange_[] = [];\r\n  protected _eventHandler = new SlickEventHandler();\r\n  protected _inHandler = false;\r\n  protected _selector?: SlickCellRangeSelector_;\r\n  protected _isRowMoveManagerHandler: any;\r\n  protected _options: RowSelectionModelOption;\r\n  protected _defaults: RowSelectionModelOption = {\r\n    selectActiveRow: true,\r\n    dragToSelect: false,\r\n    autoScrollWhenDrag: true,\r\n    cellRangeSelector: undefined\r\n  };\r\n\r\n  constructor(options?: Partial<RowSelectionModelOption>) {\r\n    this._options = Utils.extend(true, {}, this._defaults, options);\r\n  }\r\n\r\n  init(grid: SlickGrid) {\r\n    if (Draggable === undefined) {\r\n      throw new Error('Slick.Draggable is undefined, make sure to import \"slick.interactions.js\"');\r\n    }\r\n\r\n    this._selector = this._options.cellRangeSelector;\r\n    this._grid = grid;\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n\r\n    if (!this._selector && this._options.dragToSelect) {\r\n      if (!SlickCellRangeDecorator) {\r\n        throw new Error('Slick.CellRangeDecorator is required when option dragToSelect set to true');\r\n      }\r\n      this._selector = new SlickCellRangeSelector({\r\n        selectionCss: { border: 'none' } as CSSStyleDeclaration,\r\n        autoScroll: this._options.autoScrollWhenDrag\r\n      });\r\n    }\r\n\r\n    this._eventHandler.subscribe(this._grid.onActiveCellChanged, this.wrapHandler(this.handleActiveCellChange).bind(this));\r\n    this._eventHandler.subscribe(this._grid.onKeyDown, this.wrapHandler(this.handleKeyDown).bind(this));\r\n    this._eventHandler.subscribe(this._grid.onClick, this.wrapHandler(this.handleClick).bind(this));\r\n    if (this._selector) {\r\n      grid.registerPlugin(this._selector);\r\n      this._selector.onCellRangeSelecting.subscribe(this.handleCellRangeSelected.bind(this));\r\n      this._selector.onCellRangeSelected.subscribe(this.handleCellRangeSelected.bind(this));\r\n      this._selector.onBeforeCellRangeSelected.subscribe(this.handleBeforeCellRangeSelected.bind(this));\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    this._eventHandler.unsubscribeAll();\r\n    if (this._selector) {\r\n      this._selector.onCellRangeSelecting.unsubscribe(this.handleCellRangeSelected.bind(this));\r\n      this._selector.onCellRangeSelected.unsubscribe(this.handleCellRangeSelected.bind(this));\r\n      this._selector.onBeforeCellRangeSelected.unsubscribe(this.handleBeforeCellRangeSelected.bind(this));\r\n      this._grid.unregisterPlugin(this._selector);\r\n      if (this._selector.destroy) {\r\n        this._selector.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  protected wrapHandler(handler: (...args: any) => void) {\r\n    return (...args: any) => {\r\n      if (!this._inHandler) {\r\n        this._inHandler = true;\r\n        handler.apply(this, args);\r\n        this._inHandler = false;\r\n      }\r\n    };\r\n  }\r\n\r\n  protected rangesToRows(ranges: SlickRange_[]): number[] {\r\n    const rows: number[] = [];\r\n    for (let i = 0; i < ranges.length; i++) {\r\n      for (let j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {\r\n        rows.push(j);\r\n      }\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  protected rowsToRanges(rows: number[]) {\r\n    const ranges: SlickRange_[] = [];\r\n    const lastCell = this._grid.getColumns().length - 1;\r\n    rows.forEach(row => ranges.push(new SlickRange(row, 0, row, lastCell)));\r\n    return ranges;\r\n  }\r\n\r\n  protected getRowsRange(from: number, to: number) {\r\n    let i;\r\n    const rows: number[] = [];\r\n    for (i = from; i <= to; i++) {\r\n      rows.push(i);\r\n    }\r\n    for (i = to; i < from; i++) {\r\n      rows.push(i);\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  getSelectedRows() {\r\n    return this.rangesToRows(this._ranges);\r\n  }\r\n\r\n  setSelectedRows(rows: number[]) {\r\n    this.setSelectedRanges(this.rowsToRanges(rows), 'SlickRowSelectionModel.setSelectedRows');\r\n  }\r\n\r\n  setSelectedRanges(ranges: SlickRange_[], caller = 'SlickRowSelectionModel.setSelectedRanges') {\r\n    // simple check for: empty selection didn't change, prevent firing onSelectedRangesChanged\r\n    if ((!this._ranges || this._ranges.length === 0) && (!ranges || ranges.length === 0)) {\r\n      return;\r\n    }\r\n    this._ranges = ranges;\r\n\r\n    // provide extra \"caller\" argument through SlickEventData event to avoid breaking the previous pubsub event structure\r\n    // that only accepts an array of selected range `SlickRange[]`, the SlickEventData args will be merged and used later by `onSelectedRowsChanged`\r\n    const eventData = new SlickEventData(new CustomEvent('click', { detail: { caller } }), this._ranges);\r\n    this.onSelectedRangesChanged.notify(this._ranges, eventData);\r\n  }\r\n\r\n  getSelectedRanges() {\r\n    return this._ranges;\r\n  }\r\n\r\n  refreshSelections() {\r\n    this.setSelectedRows(this.getSelectedRows());\r\n  }\r\n\r\n  protected handleActiveCellChange(_e: SlickEventData_, args: OnActiveCellChangedEventArgs) {\r\n    if (this._options.selectActiveRow && Utils.isDefined(args.row)) {\r\n      this.setSelectedRanges([new SlickRange(args.row, 0, args.row, this._grid.getColumns().length - 1)]);\r\n    }\r\n  }\r\n\r\n  protected handleKeyDown(e: KeyboardEvent) {\r\n    const activeRow = this._grid.getActiveCell();\r\n    if (this._grid.getOptions().multiSelect && activeRow\r\n      && e.shiftKey && !e.ctrlKey && !e.altKey && !e.metaKey\r\n      && (e.which === keyCode.UP || e.which === keyCode.DOWN)) {\r\n      let selectedRows = this.getSelectedRows();\r\n      selectedRows.sort(function (x, y) {\r\n        return x - y;\r\n      });\r\n\r\n      if (!selectedRows.length) {\r\n        selectedRows = [activeRow.row];\r\n      }\r\n\r\n      let top = selectedRows[0];\r\n      let bottom = selectedRows[selectedRows.length - 1];\r\n      let active: number;\r\n\r\n      if (e.which === keyCode.DOWN) {\r\n        active = activeRow.row < bottom || top === bottom ? ++bottom : ++top;\r\n      } else {\r\n        active = activeRow.row < bottom ? --bottom : --top;\r\n      }\r\n\r\n      if (active >= 0 && active < this._grid.getDataLength()) {\r\n        this._grid.scrollRowIntoView(active);\r\n        const tempRanges = this.rowsToRanges(this.getRowsRange(top, bottom));\r\n        this.setSelectedRanges(tempRanges);\r\n      }\r\n\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n\r\n  protected handleClick(e: MouseEvent): boolean | void {\r\n    const cell = this._grid.getCellFromEvent(e);\r\n    if (!cell || !this._grid.canCellBeActive(cell.row, cell.cell)) {\r\n      return false;\r\n    }\r\n\r\n    if (!this._grid.getOptions().multiSelect || (\r\n      !e.ctrlKey && !e.shiftKey && !e.metaKey)) {\r\n      return false;\r\n    }\r\n\r\n    let selection = this.rangesToRows(this._ranges);\r\n    const idx = selection.indexOf(cell.row);\r\n\r\n    if (idx === -1 && (e.ctrlKey || e.metaKey)) {\r\n      selection.push(cell.row);\r\n      this._grid.setActiveCell(cell.row, cell.cell);\r\n    } else if (idx !== -1 && (e.ctrlKey || e.metaKey)) {\r\n      selection = selection.filter((o) => o !== cell.row);\r\n      this._grid.setActiveCell(cell.row, cell.cell);\r\n    } else if (selection.length && e.shiftKey) {\r\n      const last = selection.pop() as number;\r\n      const from = Math.min(cell.row, last);\r\n      const to = Math.max(cell.row, last);\r\n      selection = [];\r\n      for (let i = from; i <= to; i++) {\r\n        if (i !== last) {\r\n          selection.push(i);\r\n        }\r\n      }\r\n      selection.push(last);\r\n      this._grid.setActiveCell(cell.row, cell.cell);\r\n    }\r\n\r\n    const tempRanges = this.rowsToRanges(selection);\r\n    this.setSelectedRanges(tempRanges);\r\n    e.stopImmediatePropagation();\r\n\r\n    return true;\r\n  }\r\n\r\n  protected handleBeforeCellRangeSelected(e: SlickEventData_, cell: { row: number; cell: number; }): boolean | void {\r\n    if (!this._isRowMoveManagerHandler) {\r\n      const rowMoveManager = this._grid.getPluginByName<SlickRowMoveManager_>('RowMoveManager') || this._grid.getPluginByName<SlickCrossGridRowMoveManager_>('CrossGridRowMoveManager');\r\n      this._isRowMoveManagerHandler = rowMoveManager ? rowMoveManager.isHandlerColumn : Utils.noop;\r\n    }\r\n    if (this._grid.getEditorLock().isActive() || this._isRowMoveManagerHandler(cell.cell)) {\r\n      e.stopPropagation();\r\n      return false;\r\n    }\r\n    this._grid.setActiveCell(cell.row, cell.cell);\r\n  }\r\n\r\n  protected handleCellRangeSelected(_e: SlickEventData_, args: { range: SlickRange_; }): boolean | void {\r\n    if (!this._grid.getOptions().multiSelect || !this._options.selectActiveRow) {\r\n      return false;\r\n    }\r\n    this.setSelectedRanges([new SlickRange(args.range.fromRow, 0, args.range.toRow, this._grid.getColumns().length - 1)]);\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      RowSelectionModel: SlickRowSelectionModel\r\n    }\r\n  });\r\n}\r\n\r\n", "import { SlickEvent as SlickEvent_, Utils as Utils_ } from '../slick.core.js';\r\nimport type { Column, ColumnSort, SlickPlugin } from '../models/index.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\nexport interface SlickStateOption {\r\n  /** optional grid state clientId */\r\n  cid: string;\r\n\r\n  /** default columns when loadnig the grid */\r\n  defaultColumns: Column[];\r\n\r\n  /** local storage key prefix */\r\n  key_prefix: string;\r\n\r\n  /** should we scroll the grid into view? */\r\n  scrollRowIntoView: boolean;\r\n\r\n  /** local storage wrapper */\r\n  storage: LocalStorageWrapper;\r\n}\r\n\r\nexport interface CurrentState {\r\n  columns: Array<{ id: string | number; width: number | undefined; }>;\r\n  sortcols: ColumnSort[];\r\n  userData: any;\r\n  viewport: { top: number; bottom: number; leftPx: number; rightPx: number; };\r\n}\r\n\r\nclass LocalStorageWrapper {\r\n  protected localStorage = window.localStorage;\r\n\r\n  constructor() {\r\n    if (typeof localStorage === 'undefined') {\r\n      console.error('localStorage is not available. slickgrid statepersistor disabled.');\r\n    }\r\n  }\r\n\r\n  get<T = any>(key: string) {\r\n    return new Promise<T>((resolve, reject) => {\r\n      if (!localStorage) {\r\n        reject('missing localStorage');\r\n        return;\r\n      }\r\n      try {\r\n        const d = localStorage.getItem(key);\r\n        if (d) {\r\n          return resolve(JSON.parse(d) as T);\r\n        }\r\n        resolve({} as T);\r\n      } catch (exc) {\r\n        reject(exc);\r\n      }\r\n    });\r\n  }\r\n\r\n  set(key: string, obj: any) {\r\n    if (!localStorage) { return; }\r\n    if (typeof obj !== 'undefined') {\r\n      obj = JSON.stringify(obj);\r\n    }\r\n    localStorage.setItem(key, obj);\r\n  }\r\n};\r\n\r\nexport class SlickState implements SlickPlugin {\r\n  // --\r\n  // public API\r\n  pluginName = 'State' as const;\r\n  onStateChanged = new SlickEvent<CurrentState>('onStateChanged');\r\n\r\n  // --\r\n  // protected props\r\n  protected _grid!: SlickGrid;\r\n  protected _cid = '';\r\n  protected _store: LocalStorageWrapper;\r\n  protected _options: SlickStateOption;\r\n  protected _state?: CurrentState;\r\n  protected _userData = {\r\n    state: null,\r\n    current: null\r\n  };\r\n\r\n  constructor(options: Partial<SlickStateOption>) {\r\n    const defaults = {\r\n      key_prefix: 'slickgrid:',\r\n      storage: new LocalStorageWrapper(),\r\n      scrollRowIntoView: true\r\n    };\r\n    this._options = Utils.extend(true, {}, defaults, options);\r\n    this._store = this._options.storage;\r\n  }\r\n\r\n  init(grid: SlickGrid) {\r\n    this._grid = grid;\r\n    this._cid = grid.cid || this._options.cid;\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n\r\n    if (this._cid) {\r\n      this._grid.onColumnsResized.subscribe(this.save.bind(this));\r\n      this._grid.onColumnsReordered.subscribe(this.save.bind(this));\r\n      this._grid.onSort.subscribe(this.save.bind(this));\r\n    } else {\r\n      console.warn('grid has no client id. state persisting is disabled.');\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    this._grid.onSort.unsubscribe(this.save.bind(this));\r\n    this._grid.onColumnsReordered.unsubscribe(this.save.bind(this));\r\n    this._grid.onColumnsResized.unsubscribe(this.save.bind(this));\r\n    this.save();\r\n  }\r\n\r\n  save() {\r\n    if (this._cid && this._store) {\r\n      this._state = {\r\n        sortcols: this.getSortColumns(),\r\n        viewport: this._grid.getViewport(),\r\n        columns: this.getColumns(),\r\n        userData: null\r\n      };\r\n      this._state.userData = this._userData.current;\r\n      this.setUserDataFromState(this._state.userData);\r\n      this.onStateChanged.notify(this._state);\r\n\r\n      return this._store.set(this._options.key_prefix + this._cid, this._state);\r\n    }\r\n  }\r\n\r\n  restore() {\r\n    return new Promise((resolve, reject) => {\r\n      if (!this._cid) {\r\n        reject('missing client id');\r\n        return;\r\n      }\r\n      if (!this._store) {\r\n        reject('missing store');\r\n        return;\r\n      }\r\n\r\n      this._store.get<CurrentState>(this._options.key_prefix + this._cid)\r\n        .then((state) => {\r\n          if (state) {\r\n            if (state.sortcols) {\r\n              this._grid.setSortColumns(state.sortcols || []);\r\n            }\r\n            if (state.viewport && this._options.scrollRowIntoView) {\r\n              this._grid.scrollRowIntoView(state.viewport.top, true);\r\n            }\r\n            if (state.columns) {\r\n              const defaultColumns = this._options.defaultColumns;\r\n              if (defaultColumns) {\r\n                const defaultColumnsLookup: Record<number | string, Column> = {};\r\n                defaultColumns.forEach((colDef) => defaultColumnsLookup[colDef.id] = colDef);\r\n\r\n                const cols: Array<{ id: string | number; width: number | undefined; }> = [];\r\n                (state.columns || []).forEach((columnDef) => {\r\n                  if (defaultColumnsLookup[columnDef.id]) {\r\n                    cols.push(Utils.extend(true, {}, defaultColumnsLookup[columnDef.id], {\r\n                      width: columnDef.width,\r\n                      headerCssClass: (columnDef as Column).headerCssClass\r\n                    }));\r\n                  }\r\n                });\r\n\r\n                state.columns = cols;\r\n              }\r\n\r\n              this._grid.setColumns(state.columns as Column[]);\r\n            }\r\n            this.setUserDataFromState(state.userData);\r\n          }\r\n          resolve(state);\r\n        })\r\n        .catch((e) => {\r\n          reject(e);\r\n        });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * allows users to add their own data to the grid state\r\n   * this function does not trigger the save() function, so the actual act of writing the state happens in save()\r\n   * therefore, it's necessary to call save() function after setting user-data\r\n   *\r\n   * @param data\r\n   * @return {State}\r\n   */\r\n  setUserData(data: any) {\r\n    this._userData.current = data;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @internal\r\n   * @param data\r\n   * @return {State}\r\n   */\r\n  setUserDataFromState(data: any) {\r\n    this._userData.state = data;\r\n    return this.setUserData(data);\r\n  }\r\n\r\n  /**\r\n   * returns current value of user-data\r\n   * @return {Object}\r\n   */\r\n  getUserData() {\r\n    return this._userData.current;\r\n  }\r\n\r\n  /**\r\n   * returns user-data found in saved state\r\n   *\r\n   * @return {Object}\r\n   */\r\n  getStateUserData() {\r\n    return this._userData.state;\r\n  }\r\n\r\n  /**\r\n   * Sets user-data to the value read from state\r\n   * @return {State}\r\n   */\r\n  resetUserData() {\r\n    this._userData.current = this._userData.state;\r\n    return this;\r\n  }\r\n\r\n  getColumns() {\r\n    return this._grid.getColumns().map((col) => ({\r\n      id: col.id,\r\n      width: col.width\r\n    }));\r\n  }\r\n\r\n  getSortColumns() {\r\n    return this._grid.getSortColumns();\r\n  }\r\n\r\n  reset() {\r\n    this._store.set(this._options.key_prefix + this._cid, {});\r\n    this.setUserDataFromState(null);\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      State: SlickState\r\n    }\r\n  });\r\n}\r\n\r\n", "import type { Column, CompositeEditorOption, Editor, EditorArguments, HtmlElementPosition } from './models/index.js';\r\nimport { Utils as Utils_ } from './slick.core.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/**\r\n * A composite SlickGrid editor factory.\r\n * Generates an editor that is composed of multiple editors for given columns.\r\n * Individual editors are provided given containers instead of the original cell.\r\n * Validation will be performed on all editors individually and the results will be aggregated into one\r\n * validation result.\r\n *\r\n *\r\n * The returned editor will have its prototype set to CompositeEditor, so you can use the \"instanceof\" check.\r\n *\r\n * NOTE:  This doesn't work for detached editors since they will be created and positioned relative to the\r\n *        active cell and not the provided container.\r\n *\r\n * @namespace Slick\r\n * @class CompositeEditor\r\n * @constructor\r\n * @param columns {Array} Column definitions from which editors will be pulled.\r\n * @param containers {Array} Container HTMLElements in which editors will be placed.\r\n * @param options {Object} Options hash:\r\n *  validationFailedMsg     -   A generic failed validation message set on the aggregated validation resuls.\r\n *  validationMsgPrefix     -   Add an optional prefix to each validation message (only the ones shown in the modal form, not the ones in the \"errors\")\r\n *  modalType               -   Defaults to \"edit\", modal type can 1 of these 3: (create, edit, mass, mass-selection)\r\n *  hide                    -   A function to be called when the grid asks the editor to hide itself.\r\n *  show                    -   A function to be called when the grid asks the editor to show itself.\r\n *  position                -   A function to be called when the grid asks the editor to reposition itself.\r\n *  destroy                 -   A function to be called when the editor is destroyed.\r\n */\r\nexport function SlickCompositeEditor(columns: Column[], containers: Array<HTMLDivElement>, options: CompositeEditorOption) {\r\n  const defaultOptions = {\r\n    modalType: 'edit', // available type (create, edit, mass)\r\n    validationFailedMsg: 'Some of the fields have failed validation',\r\n    validationMsgPrefix: null,\r\n    show: null,\r\n    hide: null,\r\n    position: null,\r\n    destroy: null,\r\n    formValues: {},\r\n    editors: {}\r\n  };\r\n\r\n  const noop = function () { };\r\n\r\n  let firstInvalidEditor: Editor | null = null;\r\n\r\n  options = Slick.Utils.extend({}, defaultOptions, options);\r\n\r\n  function getContainerBox(i: number) {\r\n    const c = containers[i];\r\n    const offset = Slick.Utils.offset(c);\r\n    const w = Slick.Utils.width(c);\r\n    const h = Slick.Utils.height(c);\r\n\r\n    return {\r\n      top: (offset?.top ?? 0),\r\n      left: (offset?.left ?? 0),\r\n      bottom: (offset?.top ?? 0) + (h || 0),\r\n      right: (offset?.left ?? 0) + (w || 0),\r\n      width: w,\r\n      height: h,\r\n      visible: true\r\n    };\r\n  }\r\n\r\n  function editor(args: any[]) {\r\n    // @ts-ignore\r\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n    const context: any = this;\r\n    let editors: Array<Editor & { args: EditorArguments }> = [];\r\n\r\n    function init() {\r\n      let newArgs: any = {};\r\n      let idx = 0;\r\n      while (idx < columns.length) {\r\n        if (columns[idx].editor) {\r\n          const column = columns[idx];\r\n          newArgs = Slick.Utils.extend(false, {}, args);\r\n          newArgs.container = containers[idx];\r\n          newArgs.column = column;\r\n          newArgs.position = getContainerBox(idx);\r\n          newArgs.commitChanges = noop;\r\n          newArgs.cancelChanges = noop;\r\n          newArgs.compositeEditorOptions = options;\r\n          newArgs.formValues = {};\r\n\r\n          const currentEditor = new (column.editor as any)(newArgs) as Editor & { args: EditorArguments };\r\n          options.editors[column.id] = currentEditor; // add every Editor instance refs\r\n          editors.push(currentEditor);\r\n        }\r\n        idx++;\r\n      }\r\n\r\n      // focus on first input\r\n      window.setTimeout(() => {\r\n        if (Array.isArray(editors) && editors.length > 0 && typeof editors[0].focus === 'function') {\r\n          editors[0].focus();\r\n        }\r\n      }, 0);\r\n    }\r\n\r\n    context.destroy = () => {\r\n      let idx = 0;\r\n      while (idx < editors.length) {\r\n        editors[idx].destroy();\r\n        idx++;\r\n      }\r\n\r\n      options.destroy?.();\r\n      editors = [];\r\n    };\r\n\r\n\r\n    context.focus = () => {\r\n      // if validation has failed, set the focus to the first invalid editor\r\n      (firstInvalidEditor || editors[0]).focus();\r\n    };\r\n\r\n    context.isValueChanged = () => {\r\n      let idx = 0;\r\n      while (idx < editors.length) {\r\n        if (editors[idx].isValueChanged()) {\r\n          return true;\r\n        }\r\n        idx++;\r\n      }\r\n      return false;\r\n    };\r\n\r\n    context.serializeValue = () => {\r\n      const serializedValue: any[] = [];\r\n      let idx = 0;\r\n      while (idx < editors.length) {\r\n        serializedValue[idx] = editors[idx].serializeValue();\r\n        idx++;\r\n      }\r\n      return serializedValue;\r\n    };\r\n\r\n    context.applyValue = (item: any, state: any) => {\r\n      let idx = 0;\r\n      while (idx < editors.length) {\r\n        editors[idx].applyValue(item, state[idx]);\r\n        idx++;\r\n      }\r\n    };\r\n\r\n    context.loadValue = (item: any) => {\r\n      let idx = 0;\r\n\r\n      while (idx < editors.length) {\r\n        editors[idx].loadValue(item);\r\n        idx++;\r\n      }\r\n    };\r\n\r\n    context.validate = (target: HTMLElement | null) => {\r\n      let validationResults;\r\n      const errors: any[] = [];\r\n      let targetElm = target ? target : null;\r\n\r\n      firstInvalidEditor = null;\r\n\r\n      let idx = 0;\r\n      while (idx < editors.length) {\r\n        const columnDef = editors[idx].args?.column ?? {};\r\n        if (columnDef) {\r\n          let validationElm = document.querySelector(`.item-details-validation.editor-${columnDef.id}`);\r\n          let labelElm = document.querySelector(`.item-details-label.editor-${columnDef.id}`);\r\n          let editorElm = document.querySelector(`[data-editorid=${columnDef.id}]`);\r\n          const validationMsgPrefix = options?.validationMsgPrefix || '';\r\n\r\n          if (!targetElm || Slick.Utils.contains(editorElm as HTMLElement, targetElm)) {\r\n            validationResults = editors[idx].validate();\r\n\r\n            if (!validationResults.valid) {\r\n              firstInvalidEditor = editors[idx];\r\n              errors.push({\r\n                index: idx,\r\n                editor: editors[idx],\r\n                container: containers[idx],\r\n                msg: validationResults.msg\r\n              });\r\n\r\n              if (validationElm) {\r\n                validationElm.textContent = validationMsgPrefix + validationResults.msg;\r\n                labelElm?.classList.add('invalid');\r\n                editorElm?.classList.add('invalid');\r\n              }\r\n            } else if (validationElm) {\r\n              validationElm.textContent = '';\r\n              editorElm?.classList.remove('invalid');\r\n              labelElm?.classList.remove('invalid');\r\n            }\r\n          }\r\n          validationElm = null;\r\n          labelElm = null;\r\n          editorElm = null;\r\n        }\r\n        idx++;\r\n      }\r\n      targetElm = null;\r\n\r\n      if (errors.length) {\r\n        return {\r\n          valid: false,\r\n          msg: options.validationFailedMsg,\r\n          errors\r\n        };\r\n      }\r\n\r\n      return {\r\n        valid: true,\r\n        msg: ''\r\n      };\r\n    };\r\n\r\n    context.hide = () => {\r\n      let idx = 0;\r\n      while (idx < editors.length) {\r\n        editors[idx]?.hide?.();\r\n        idx++;\r\n      }\r\n      options?.hide?.();\r\n    };\r\n\r\n    context.show = () => {\r\n      let idx = 0;\r\n      while (idx < editors.length) {\r\n        editors[idx]?.show?.();\r\n        idx++;\r\n      }\r\n      options?.show?.();\r\n    };\r\n\r\n    context.position = (box: HtmlElementPosition) => {\r\n      options?.position?.(box);\r\n    };\r\n\r\n    init();\r\n  }\r\n\r\n  // so we can do \"editor instanceof Slick.CompositeEditor\r\n  // @ts-ignore\r\n  editor.prototype = this;\r\n  return editor;\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(Slick, {\r\n    CompositeEditor: SlickCompositeEditor\r\n  });\r\n}\r\n", "import { type SlickEventData, SlickGroup as SlickGroup_, keyCode as keyCode_, Utils as Utils_ } from './slick.core.js';\r\nimport type { Column, GroupItemMetadataProviderOption, GroupingFormatterItem, ItemMetadata, SlickPlugin } from './models/index.js';\r\nimport type { SlickGrid } from './slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst keyCode = IIFE_ONLY ? Slick.keyCode : keyCode_;\r\nconst SlickGroup = IIFE_ONLY ? Slick.Group : SlickGroup_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/**\r\n * Provides item metadata for group (Slick.Group) and totals (Slick.Totals) rows produced by the DataView.\r\n * This metadata overrides the default behavior and formatting of those rows so that they appear and function\r\n * correctly when processed by the grid.\r\n *\r\n * This class also acts as a grid plugin providing event handlers to expand & collapse groups.\r\n * If \"grid.registerPlugin(...)\" is not called, expand & collapse will not work.\r\n *\r\n * @class GroupItemMetadataProvider\r\n * @module Data\r\n * @namespace Slick.Data\r\n * @constructor\r\n * @param inputOptions\r\n */\r\nexport class SlickGroupItemMetadataProvider implements SlickPlugin {\r\n  pluginName = 'GroupItemMetadataProvider' as const;\r\n\r\n  protected _grid!: SlickGrid;\r\n  protected _options: GroupItemMetadataProviderOption;\r\n  protected _defaults: GroupItemMetadataProviderOption = {\r\n    checkboxSelect: false,\r\n    checkboxSelectCssClass: 'slick-group-select-checkbox',\r\n    checkboxSelectPlugin: null,\r\n    groupCssClass: 'slick-group',\r\n    groupTitleCssClass: 'slick-group-title',\r\n    totalsCssClass: 'slick-group-totals',\r\n    groupFocusable: true,\r\n    totalsFocusable: false,\r\n    toggleCssClass: 'slick-group-toggle',\r\n    toggleExpandedCssClass: 'expanded',\r\n    toggleCollapsedCssClass: 'collapsed',\r\n    enableExpandCollapse: true,\r\n    groupFormatter: this.defaultGroupCellFormatter.bind(this),\r\n    totalsFormatter: this.defaultTotalsCellFormatter.bind(this),\r\n    includeHeaderTotals: false\r\n  };\r\n\r\n  constructor(inputOptions?: GroupItemMetadataProviderOption) {\r\n    this._options = Utils.extend<GroupItemMetadataProviderOption>(true, {}, this._defaults, inputOptions);\r\n  }\r\n\r\n  /** Getter of SlickGrid DataView object */\r\n  protected get dataView(): any {\r\n    return this._grid?.getData?.() ?? {} as any;\r\n  }\r\n\r\n  getOptions() {\r\n    return this._options;\r\n  }\r\n\r\n  setOptions(inputOptions: GroupItemMetadataProviderOption) {\r\n    Utils.extend(true, this._options, inputOptions);\r\n  }\r\n\r\n  protected defaultGroupCellFormatter(_row: number, _cell: number, _value: any, _columnDef: Column, item: any) {\r\n    if (!this._options.enableExpandCollapse) {\r\n      return item.title;\r\n    }\r\n\r\n    const indentation = `${item.level * 15}px`;\r\n    const toggleClass = item.collapsed ? this._options.toggleCollapsedCssClass : this._options.toggleExpandedCssClass;\r\n\r\n    // use a DocumentFragment to avoid creating an extra div container\r\n    const containerElm = document.createDocumentFragment();\r\n\r\n    // 1. optional row checkbox span to select the entire group rows\r\n    if (this._options.checkboxSelect) {\r\n      containerElm.appendChild(Utils.createDomElement('span', { className: `${this._options.checkboxSelectCssClass} ${item.selectChecked ? 'checked' : 'unchecked'}` }));\r\n    }\r\n\r\n    // 2. group toggle span\r\n    containerElm.appendChild(Utils.createDomElement('span', {\r\n      className: `${this._options.toggleCssClass} ${toggleClass}`,\r\n      ariaExpanded: String(!item.collapsed),\r\n      style: { marginLeft: indentation }\r\n    }));\r\n\r\n    // 3. group title span\r\n    const groupTitleElm = Utils.createDomElement('span', { className: this._options.groupTitleCssClass || '' });\r\n    groupTitleElm.setAttribute('level', item.level);\r\n    (item.title instanceof HTMLElement)\r\n      ? groupTitleElm.appendChild(item.title)\r\n      : this._grid.applyHtmlCode(groupTitleElm, item.title ?? '');\r\n    containerElm.appendChild(groupTitleElm);\r\n\r\n    return containerElm;\r\n  }\r\n\r\n  protected defaultTotalsCellFormatter(_row: number, _cell: number, _value: any, columnDef: Column, item: any, grid: SlickGrid) {\r\n    return (columnDef?.groupTotalsFormatter?.(item, columnDef, grid)) ?? '';\r\n  }\r\n\r\n\r\n  init(grid: SlickGrid) {\r\n    this._grid = grid;\r\n    this._grid.onClick.subscribe(this.handleGridClick.bind(this));\r\n    this._grid.onKeyDown.subscribe(this.handleGridKeyDown.bind(this));\r\n  }\r\n\r\n  destroy() {\r\n    if (this._grid) {\r\n      this._grid.onClick.unsubscribe(this.handleGridClick.bind(this));\r\n      this._grid.onKeyDown.unsubscribe(this.handleGridKeyDown.bind(this));\r\n    }\r\n  }\r\n\r\n  protected handleGridClick(e: SlickEventData, args: { row: number; cell: number; grid: SlickGrid; }) {\r\n    const target = e.target as HTMLElement;\r\n    const item = this._grid.getDataItem(args.row);\r\n    if (item && item instanceof SlickGroup && target.classList.contains(this._options.toggleCssClass || '')) {\r\n      this.handleDataViewExpandOrCollapse(item);\r\n      e.stopImmediatePropagation();\r\n      e.preventDefault();\r\n    }\r\n    if (item && item instanceof SlickGroup && target.classList.contains(this._options.checkboxSelectCssClass || '')) {\r\n      item.selectChecked = !item.selectChecked;\r\n      target.classList.remove((item.selectChecked ? 'unchecked' : 'checked'));\r\n      target.classList.add((item.selectChecked ? 'checked' : 'unchecked'));\r\n      // get rowIndexes array\r\n      const rowIndexes = this.dataView.mapItemsToRows(item.rows);\r\n      if (item.selectChecked) {\r\n        this._options.checkboxSelectPlugin.selectRows(rowIndexes);\r\n      } else {\r\n        this._options.checkboxSelectPlugin.deSelectRows(rowIndexes);\r\n      }\r\n    }\r\n  }\r\n\r\n  // TODO:  add -/+ handling\r\n  protected handleGridKeyDown(e: SlickEventData) {\r\n    if (this._options.enableExpandCollapse && (e.which === keyCode.SPACE)) {\r\n      const activeCell = this._grid.getActiveCell();\r\n      if (activeCell) {\r\n        const item = this._grid.getDataItem(activeCell.row);\r\n        if (item && item instanceof SlickGroup) {\r\n          this.handleDataViewExpandOrCollapse(item);\r\n          e.stopImmediatePropagation();\r\n          e.preventDefault();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  protected handleDataViewExpandOrCollapse(item: any) {\r\n    const range = this._grid.getRenderedRange();\r\n    this.dataView.setRefreshHints({\r\n      ignoreDiffsBefore: range.top,\r\n      ignoreDiffsAfter: range.bottom + 1\r\n    });\r\n\r\n    if (item.collapsed) {\r\n      this.dataView.expandGroup(item.groupingKey);\r\n    } else {\r\n      this.dataView.collapseGroup(item.groupingKey);\r\n    }\r\n  }\r\n\r\n  getGroupRowMetadata(item: GroupingFormatterItem, _row?: number, _cell?: number): ItemMetadata {\r\n    const groupLevel = item?.level;\r\n    return {\r\n      selectable: false,\r\n      focusable: this._options.groupFocusable,\r\n      cssClasses: `${this._options.groupCssClass} slick-group-level-${groupLevel}`,\r\n      formatter: (this._options.includeHeaderTotals && this._options.totalsFormatter) || undefined,\r\n      columns: {\r\n        0: {\r\n          colspan: this._options.includeHeaderTotals ? '1' : '*',\r\n          formatter: this._options.groupFormatter,\r\n          editor: null\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  getTotalsRowMetadata(item: { group: GroupingFormatterItem }, _row?: number, _cell?: number): ItemMetadata | null {\r\n    const groupLevel = item?.group?.level;\r\n    return {\r\n      selectable: false,\r\n      focusable: this._options.totalsFocusable,\r\n      cssClasses: `${this._options.totalsCssClass} slick-group-level-${groupLevel}`,\r\n      formatter: this._options.totalsFormatter,\r\n      editor: null\r\n    };\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  window.Slick.Data = window.Slick.Data || {};\r\n  window.Slick.Data.GroupItemMetadataProvider = SlickGroupItemMetadataProvider;\r\n}\r\n", "import type {\r\n  Aggregator,\r\n  AnyFunction,\r\n  CssStyleHash,\r\n  CustomDataView,\r\n  DataViewHints,\r\n  Grouping,\r\n  GroupingFormatterItem,\r\n  ItemMetadata,\r\n  ItemMetadataProvider,\r\n  OnGroupCollapsedEventArgs,\r\n  OnGroupExpandedEventArgs,\r\n  OnRowCountChangedEventArgs,\r\n  OnRowsChangedEventArgs,\r\n  OnRowsOrCountChangedEventArgs,\r\n  OnSelectedRowIdsChangedEventArgs,\r\n  OnSetItemsCalledEventArgs,\r\n  PagingInfo,\r\n  SlickGridModel,\r\n} from './models/index.js';\r\nimport {\r\n  type BasePubSub,\r\n  SlickEvent as SlickEvent_,\r\n  SlickEventData as SlickEventData_,\r\n  SlickGroup as SlickGroup_,\r\n  SlickGroupTotals as SlickGroupTotals_,\r\n  Utils as Utils_,\r\n  type SlickNonDataItem,\r\n} from './slick.core.js';\r\nimport { SlickGroupItemMetadataProvider as SlickGroupItemMetadataProvider_ } from './slick.groupitemmetadataprovider.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst SlickEventData = IIFE_ONLY ? Slick.EventData : SlickEventData_;\r\nconst SlickGroup = IIFE_ONLY ? Slick.Group : SlickGroup_;\r\nconst SlickGroupTotals = IIFE_ONLY ? Slick.GroupTotals : SlickGroupTotals_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\nconst SlickGroupItemMetadataProvider = IIFE_ONLY ? Slick.Data?.GroupItemMetadataProvider ?? {} : SlickGroupItemMetadataProvider_;\r\n\r\nexport interface DataViewOption {\r\n  /** global override for all rows */\r\n  globalItemMetadataProvider: ItemMetadataProvider | null;\r\n\r\n  /** Optionally provide a GroupItemMetadataProvider in order to use Grouping/DraggableGrouping features */\r\n  groupItemMetadataProvider: SlickGroupItemMetadataProvider_ | null;\r\n\r\n  /** defaults to false, are we using inline filters? */\r\n  inlineFilters: boolean;\r\n\r\n  /**\r\n   * defaults to false, option to use CSP Safe approach,\r\n   * Note: it is an opt-in option because it is slightly slower (perf impact) when compared to the non-CSP safe approach.\r\n   */\r\n  useCSPSafeFilter: boolean;\r\n}\r\nexport type FilterFn<T> = (item: T, args: any) => boolean;\r\nexport type FilterCspFn<T> = (item: T[], args: any) => T[];\r\nexport type FilterWithCspCachingFn<T> = (item: T[], args: any, filterCache: any[]) => T[];\r\nexport type DataIdType = number | string;\r\nexport type SlickDataItem = SlickNonDataItem | SlickGroup_ | SlickGroupTotals_ | any;\r\nexport type GroupGetterFn = (val: any) => string | number;\r\n\r\n/**\r\n  * A simple Model implementation.\r\n  * Provides a filtered view of the underlying data.\r\n  * Relies on the data item having an \"id\" property uniquely identifying it.\r\n  */\r\nexport class SlickDataView<TData extends SlickDataItem = any> implements CustomDataView {\r\n  protected defaults: DataViewOption = {\r\n    globalItemMetadataProvider: null,\r\n    groupItemMetadataProvider: null,\r\n    inlineFilters: false,\r\n    useCSPSafeFilter: false,\r\n  };\r\n\r\n  // private\r\n  protected idProperty = 'id';          // property holding a unique row id\r\n  protected items: TData[] = [];            // data by index\r\n  protected rows: TData[] = [];             // data by row\r\n  protected idxById = new Map<DataIdType, number>();   // indexes by id\r\n  protected rowsById: { [id: DataIdType]: number } | undefined = undefined;       // rows by id; lazy-calculated\r\n  protected filter: FilterFn<TData> | null = null;         // filter function\r\n  protected filterCSPSafe: FilterFn<TData> | null = null;         // filter function\r\n  protected updated: ({ [id: DataIdType]: boolean }) | null = null;        // updated item ids\r\n  protected suspend = false;            // suspends the recalculation\r\n  protected isBulkSuspend = false;      // delays protectedious operations like the\r\n  // index update and delete to efficient\r\n  // versions at endUpdate\r\n  protected bulkDeleteIds = new Map<DataIdType, boolean>();\r\n  protected sortAsc: boolean | undefined = true;\r\n  protected fastSortField?: string | null | (() => string);\r\n  protected sortComparer!: ((a: TData, b: TData) => number);\r\n  protected refreshHints: DataViewHints = {};\r\n  protected prevRefreshHints: DataViewHints = {};\r\n  protected filterArgs: any;\r\n  protected filteredItems: TData[] = [];\r\n  protected compiledFilter?: FilterFn<TData> | null;\r\n  protected compiledFilterCSPSafe?: FilterCspFn<TData> | null;\r\n  protected compiledFilterWithCaching?: FilterFn<TData> | null;\r\n  protected compiledFilterWithCachingCSPSafe?: FilterWithCspCachingFn<TData> | null;\r\n  protected filterCache: any[] = [];\r\n  protected _grid?: SlickGridModel; // grid object will be defined only after using \"syncGridSelection()\" method\"\r\n\r\n  // grouping\r\n  protected groupingInfoDefaults: Grouping = {\r\n    getter: undefined,\r\n    formatter: undefined,\r\n    comparer: (a: { value: any; }, b: { value: any; }) => (a.value === b.value ? 0 : (a.value > b.value ? 1 : -1)),\r\n    predefinedValues: [],\r\n    aggregators: [],\r\n    aggregateEmpty: false,\r\n    aggregateCollapsed: false,\r\n    aggregateChildGroups: false,\r\n    collapsed: false,\r\n    displayTotalsRow: true,\r\n    lazyTotalsCalculation: false\r\n  };\r\n  protected groupingInfos: Array<Grouping & { aggregators: Aggregator[]; getterIsAFn?: boolean; compiledAccumulators: any[]; getter: GroupGetterFn | string }> = [];\r\n  protected groups: SlickGroup_[] = [];\r\n  protected toggledGroupsByLevel: any[] = [];\r\n  protected groupingDelimiter = ':|:';\r\n  protected selectedRowIds: DataIdType[] = [];\r\n  protected preSelectedRowIdsChangeFn?: (args?: any) => void;\r\n\r\n  protected pagesize = 0;\r\n  protected pagenum = 0;\r\n  protected totalRows = 0;\r\n  protected _options: DataViewOption;\r\n  protected _container?: HTMLElement;\r\n\r\n  // public events\r\n  onBeforePagingInfoChanged: SlickEvent_<PagingInfo>;\r\n  onGroupExpanded: SlickEvent_<OnGroupExpandedEventArgs>;\r\n  onGroupCollapsed: SlickEvent_<OnGroupCollapsedEventArgs>;\r\n  onPagingInfoChanged: SlickEvent_<PagingInfo>;\r\n  onRowCountChanged: SlickEvent_<OnRowCountChangedEventArgs>;\r\n  onRowsChanged: SlickEvent_<OnRowsChangedEventArgs>;\r\n  onRowsOrCountChanged: SlickEvent_<OnRowsOrCountChangedEventArgs>;\r\n  onSelectedRowIdsChanged: SlickEvent_<OnSelectedRowIdsChangedEventArgs>;\r\n  onSetItemsCalled: SlickEvent_<OnSetItemsCalledEventArgs>;\r\n\r\n  constructor(options?: Partial<DataViewOption>, protected externalPubSub?: BasePubSub) {\r\n    this.onBeforePagingInfoChanged = new SlickEvent<PagingInfo>('onBeforePagingInfoChanged', externalPubSub);\r\n    this.onGroupExpanded = new SlickEvent<OnGroupExpandedEventArgs>('onGroupExpanded', externalPubSub);\r\n    this.onGroupCollapsed = new SlickEvent<OnGroupCollapsedEventArgs>('onGroupCollapsed', externalPubSub);\r\n    this.onPagingInfoChanged = new SlickEvent<PagingInfo>('onPagingInfoChanged', externalPubSub);\r\n    this.onRowCountChanged = new SlickEvent<OnRowCountChangedEventArgs>('onRowCountChanged', externalPubSub);\r\n    this.onRowsChanged = new SlickEvent<OnRowsChangedEventArgs>('onRowsChanged', externalPubSub);\r\n    this.onRowsOrCountChanged = new SlickEvent<OnRowsOrCountChangedEventArgs>('onRowsOrCountChanged', externalPubSub);\r\n    this.onSelectedRowIdsChanged = new SlickEvent<OnSelectedRowIdsChangedEventArgs>('onSelectedRowIdsChanged', externalPubSub);\r\n    this.onSetItemsCalled = new SlickEvent<OnSetItemsCalledEventArgs>('onSetItemsCalled', externalPubSub);\r\n\r\n    this._options = Utils.extend(true, {}, this.defaults, options);\r\n  }\r\n\r\n  /**\r\n   * Begins a bached update of the items in the data view.\r\n   * including deletes and the related events are postponed to the endUpdate call.\r\n   * As certain operations are postponed during this update, some methods might not\r\n   * deliver fully consistent information.\r\n   * @param {Boolean} [bulkUpdate] - if set to true, most data view modifications\r\n   */\r\n  beginUpdate(bulkUpdate?: boolean) {\r\n    this.suspend = true;\r\n    this.isBulkSuspend = bulkUpdate === true;\r\n  }\r\n\r\n  endUpdate() {\r\n    const wasBulkSuspend = this.isBulkSuspend;\r\n    this.isBulkSuspend = false;\r\n    this.suspend = false;\r\n    if (wasBulkSuspend) {\r\n      this.processBulkDelete();\r\n      this.ensureIdUniqueness();\r\n    }\r\n    this.refresh();\r\n  }\r\n\r\n  destroy() {\r\n    this.items = [];\r\n    this.idxById = null as any;\r\n    this.rowsById = null as any;\r\n    this.filter = null as any;\r\n    this.filterCSPSafe = null as any;\r\n    this.updated = null as any;\r\n    this.sortComparer = null as any;\r\n    this.filterCache = [];\r\n    this.filteredItems = [];\r\n    this.compiledFilter = null;\r\n    this.compiledFilterCSPSafe = null;\r\n    this.compiledFilterWithCaching = null;\r\n    this.compiledFilterWithCachingCSPSafe = null;\r\n\r\n    if (this._grid && this._grid.onSelectedRowsChanged && this._grid.onCellCssStylesChanged) {\r\n      this._grid.onSelectedRowsChanged.unsubscribe();\r\n      this._grid.onCellCssStylesChanged.unsubscribe();\r\n    }\r\n    if (this.onRowsOrCountChanged) {\r\n      this.onRowsOrCountChanged.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /** provide some refresh hints as to what to rows needs refresh */\r\n  setRefreshHints(hints: DataViewHints) {\r\n    this.refreshHints = hints;\r\n  }\r\n\r\n  /** get extra filter arguments of the filter method */\r\n  getFilterArgs() {\r\n    return this.filterArgs;\r\n  }\r\n\r\n  /** add extra filter arguments to the filter method */\r\n  setFilterArgs(args: any) {\r\n    this.filterArgs = args;\r\n  }\r\n\r\n  /**\r\n   * Processes all delete requests placed during bulk update\r\n   * by recomputing the items and idxById members.\r\n   */\r\n  protected processBulkDelete() {\r\n    if (!this.idxById) { return; }\r\n\r\n    // the bulk update is processed by\r\n    // recomputing the whole items array and the index lookup in one go.\r\n    // this is done by placing the not-deleted items\r\n    // from left to right into the array and shrink the array the the new\r\n    // size afterwards.\r\n    // see https://github.com/6pac/SlickGrid/issues/571 for further details.\r\n\r\n    let id: DataIdType, item, newIdx = 0;\r\n    for (let i = 0, l = this.items.length; i < l; i++) {\r\n      item = this.items[i];\r\n      id = item[this.idProperty as keyof TData] as DataIdType;\r\n      if (id === undefined) {\r\n        throw new Error(`[SlickGrid DataView] Each data element must implement a unique 'id' property`);\r\n      }\r\n\r\n      // if items have been marked as deleted we skip them for the new final items array\r\n      // and we remove them from the lookup table.\r\n      if (this.bulkDeleteIds.has(id)) {\r\n        this.idxById.delete(id);\r\n      } else {\r\n        // for items which are not deleted, we add them to the\r\n        // next free position in the array and register the index in the lookup.\r\n        this.items[newIdx] = item;\r\n        this.idxById.set(id, newIdx);\r\n        ++newIdx;\r\n      }\r\n    }\r\n\r\n    // here we shrink down the full item array to the ones actually\r\n    // inserted in the cleanup loop above.\r\n    this.items.length = newIdx;\r\n    // and finally cleanup the deleted ids to start cleanly on the next update.\r\n    this.bulkDeleteIds = new Map();\r\n  }\r\n\r\n  protected updateIdxById(startingIndex?: number) {\r\n    if (this.isBulkSuspend || !this.idxById) { // during bulk update we do not reorganize\r\n      return;\r\n    }\r\n    startingIndex = startingIndex || 0;\r\n    let id: DataIdType;\r\n    for (let i = startingIndex, l = this.items.length; i < l; i++) {\r\n      id = this.items[i][this.idProperty as keyof TData] as DataIdType;\r\n      if (id === undefined) {\r\n        throw new Error(`[SlickGrid DataView] Each data element must implement a unique 'id' property`);\r\n      }\r\n      this.idxById.set(id, i);\r\n    }\r\n  }\r\n\r\n  protected ensureIdUniqueness() {\r\n    if (this.isBulkSuspend || !this.idxById) { // during bulk update we do not reorganize\r\n      return;\r\n    }\r\n    let id: DataIdType;\r\n    for (let i = 0, l = this.items.length; i < l; i++) {\r\n      id = this.items[i][this.idProperty as keyof TData] as DataIdType;\r\n      if (id === undefined || this.idxById.get(id) !== i) {\r\n        throw new Error(`[SlickGrid DataView] Each data element must implement a unique 'id' property`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Get all DataView Items */\r\n  getItems() {\r\n    return this.items;\r\n  }\r\n\r\n  /** Get the DataView Id property name to use (defaults to \"Id\" but could be customized to something else when instantiating the DataView) */\r\n  getIdPropertyName() {\r\n    return this.idProperty;\r\n  }\r\n\r\n  /**\r\n   * Set the Items with a new Dataset and optionally pass a different Id property name\r\n   * @param {Array<*>} data - array of data\r\n   * @param {String} [objectIdProperty] - optional id property to use as primary id\r\n   */\r\n  setItems(data: TData[], objectIdProperty?: string) {\r\n    if (objectIdProperty !== undefined) {\r\n      this.idProperty = objectIdProperty;\r\n    }\r\n    this.items = this.filteredItems = data;\r\n    this.onSetItemsCalled.notify({ idProperty: this.idProperty, itemCount: this.items.length }, null, this);\r\n    this.idxById = new Map();\r\n    this.updateIdxById();\r\n    this.ensureIdUniqueness();\r\n    this.refresh();\r\n  }\r\n\r\n  /** Set Paging Options */\r\n  setPagingOptions(args: Partial<PagingInfo>) {\r\n    if (this.onBeforePagingInfoChanged.notify(this.getPagingInfo(), null, this).getReturnValue() !== false) {\r\n      if (Utils.isDefined(args.pageSize)) {\r\n        this.pagesize = args.pageSize;\r\n        this.pagenum = this.pagesize ? Math.min(this.pagenum, Math.max(0, Math.ceil(this.totalRows / this.pagesize) - 1)) : 0;\r\n      }\r\n\r\n      if (Utils.isDefined(args.pageNum)) {\r\n        this.pagenum = Math.min(args.pageNum, Math.max(0, Math.ceil(this.totalRows / this.pagesize) - 1));\r\n      }\r\n\r\n      this.onPagingInfoChanged.notify(this.getPagingInfo(), null, this);\r\n\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n  /** Get Paging Options */\r\n  getPagingInfo(): PagingInfo {\r\n    const totalPages = this.pagesize ? Math.max(1, Math.ceil(this.totalRows / this.pagesize)) : 1;\r\n    return { pageSize: this.pagesize, pageNum: this.pagenum, totalRows: this.totalRows, totalPages, dataView: this as SlickDataView };\r\n  }\r\n\r\n  /** Sort Method to use by the DataView */\r\n  sort(comparer: (a: TData, b: TData) => number, ascending?: boolean) {\r\n    this.sortAsc = ascending;\r\n    this.sortComparer = comparer;\r\n    this.fastSortField = null;\r\n    if (ascending === false) {\r\n      this.items.reverse();\r\n    }\r\n    this.items.sort(comparer);\r\n    if (ascending === false) {\r\n      this.items.reverse();\r\n    }\r\n    this.idxById = new Map();\r\n    this.updateIdxById();\r\n    this.refresh();\r\n  }\r\n\r\n  /**\r\n   * @deprecated, to be more removed in next major since IE is no longer supported and this is no longer useful.\r\n   * Provides a workaround for the extremely slow sorting in IE.\r\n   * Does a [lexicographic] sort on a give column by temporarily overriding Object.prototype.toString\r\n   * to return the value of that field and then doing a native Array.sort().\r\n   */\r\n  fastSort(field: string | (() => string), ascending?: boolean) {\r\n    this.sortAsc = ascending;\r\n    this.fastSortField = field;\r\n    this.sortComparer = null as any;\r\n    const oldToString = Object.prototype.toString;\r\n    Object.prototype.toString = (typeof field === 'function') ? field : function () {\r\n      // @ts-ignore\r\n      return this[field];\r\n    };\r\n    // an extra reversal for descending sort keeps the sort stable\r\n    // (assuming a stable native sort implementation, which isn't true in some cases)\r\n    if (ascending === false) {\r\n      this.items.reverse();\r\n    }\r\n    this.items.sort();\r\n    Object.prototype.toString = oldToString;\r\n    if (ascending === false) {\r\n      this.items.reverse();\r\n    }\r\n    this.idxById = new Map();\r\n    this.updateIdxById();\r\n    this.refresh();\r\n  }\r\n\r\n  /** Re-Sort the dataset */\r\n  reSort() {\r\n    if (this.sortComparer) {\r\n      this.sort(this.sortComparer, this.sortAsc);\r\n    } else if (this.fastSortField) {\r\n      this.fastSort(this.fastSortField, this.sortAsc);\r\n    }\r\n  }\r\n\r\n  /** Get only the DataView filtered items */\r\n  getFilteredItems<T extends TData>() {\r\n    return this.filteredItems as T[];\r\n  }\r\n\r\n  /** Get the array length (count) of only the DataView filtered items */\r\n  getFilteredItemCount() {\r\n    return this.filteredItems.length;\r\n  }\r\n\r\n  /** Get current Filter used by the DataView */\r\n  getFilter() {\r\n    return this._options.useCSPSafeFilter ? this.filterCSPSafe : this.filter;\r\n  }\r\n\r\n  /**\r\n   * Set a Filter that will be used by the DataView\r\n   * @param {Function} fn - filter callback function\r\n   */\r\n  setFilter(filterFn: FilterFn<TData>) {\r\n    this.filterCSPSafe = filterFn;\r\n    this.filter = filterFn;\r\n    if (this._options.inlineFilters) {\r\n      this.compiledFilterCSPSafe = this.compileFilterCSPSafe;\r\n      this.compiledFilterWithCachingCSPSafe = this.compileFilterWithCachingCSPSafe;\r\n      this.compiledFilter = this.compileFilter(this._options.useCSPSafeFilter);\r\n      this.compiledFilterWithCaching = this.compileFilterWithCaching(this._options.useCSPSafeFilter);\r\n    }\r\n    this.refresh();\r\n  }\r\n\r\n  /** Get current Grouping info */\r\n  getGrouping(): Grouping[] {\r\n    return this.groupingInfos;\r\n  }\r\n\r\n  /** Set some Grouping */\r\n  setGrouping(groupingInfo: Grouping | Grouping[]) {\r\n    if (!this._options.groupItemMetadataProvider) {\r\n      this._options.groupItemMetadataProvider = new SlickGroupItemMetadataProvider();\r\n    }\r\n\r\n    this.groups = [];\r\n    this.toggledGroupsByLevel = [];\r\n    groupingInfo = groupingInfo || [];\r\n    this.groupingInfos = ((groupingInfo instanceof Array) ? groupingInfo : [groupingInfo]) as any;\r\n\r\n    for (let i = 0; i < this.groupingInfos.length; i++) {\r\n      const gi = this.groupingInfos[i] = Utils.extend(true, {}, this.groupingInfoDefaults, this.groupingInfos[i]);\r\n      gi.getterIsAFn = typeof gi.getter === 'function';\r\n\r\n      // pre-compile accumulator loops\r\n      gi.compiledAccumulators = [];\r\n      let idx = gi.aggregators.length;\r\n      while (idx--) {\r\n        gi.compiledAccumulators[idx] = this.compileAccumulatorLoopCSPSafe(gi.aggregators[idx]);\r\n      }\r\n\r\n      this.toggledGroupsByLevel[i] = {};\r\n    }\r\n\r\n    this.refresh();\r\n  }\r\n\r\n  /** Get an item in the DataView by its row index */\r\n  getItemByIdx<T extends TData>(i: number) {\r\n    return this.items[i] as T;\r\n  }\r\n\r\n  /** Get row index in the DataView by its Id */\r\n  getIdxById(id: DataIdType) {\r\n    return this.idxById?.get(id);\r\n  }\r\n\r\n  protected ensureRowsByIdCache() {\r\n    if (!this.rowsById) {\r\n      this.rowsById = {};\r\n      for (let i = 0, l = this.rows.length; i < l; i++) {\r\n        this.rowsById[this.rows[i][this.idProperty as keyof TData] as DataIdType] = i;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Get row number in the grid by its item object */\r\n  getRowByItem(item: TData) {\r\n    this.ensureRowsByIdCache();\r\n    return this.rowsById?.[item[this.idProperty as keyof TData] as DataIdType];\r\n  }\r\n\r\n  /** Get row number in the grid by its Id */\r\n  getRowById(id: DataIdType) {\r\n    this.ensureRowsByIdCache();\r\n    return this.rowsById?.[id];\r\n  }\r\n\r\n  /** Get an item in the DataView by its Id */\r\n  getItemById<T extends TData>(id: DataIdType) {\r\n    return this.items[(this.idxById.get(id) as number)] as T;\r\n  }\r\n\r\n  /** From the items array provided, return the mapped rows */\r\n  mapItemsToRows(itemArray: TData[]) {\r\n    const rows: number[] = [];\r\n    this.ensureRowsByIdCache();\r\n    for (let i = 0, l = itemArray.length; i < l; i++) {\r\n      const row = this.rowsById?.[itemArray[i][this.idProperty as keyof TData] as DataIdType];\r\n      if (Utils.isDefined(row)) {\r\n        rows[rows.length] = row as number;\r\n      }\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  /** From the Ids array provided, return the mapped rows */\r\n  mapIdsToRows(idArray: DataIdType[]) {\r\n    const rows: number[] = [];\r\n    this.ensureRowsByIdCache();\r\n    for (let i = 0, l = idArray.length; i < l; i++) {\r\n      const row = this.rowsById?.[idArray[i]];\r\n      if (Utils.isDefined(row)) {\r\n        rows[rows.length] = row as number;\r\n      }\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  /** From the rows array provided, return the mapped Ids */\r\n  mapRowsToIds(rowArray: number[]) {\r\n    const ids: DataIdType[] = [];\r\n    for (let i = 0, l = rowArray.length; i < l; i++) {\r\n      if (rowArray[i] < this.rows.length) {\r\n        const rowItem = this.rows[rowArray[i]];\r\n        ids[ids.length] = rowItem![this.idProperty as keyof TData] as DataIdType;\r\n      }\r\n    }\r\n    return ids;\r\n  }\r\n\r\n  /**\r\n   * Performs the update operations of a single item by id without\r\n   * triggering any events or refresh operations.\r\n   * @param id The new id of the item.\r\n   * @param item The item which should be the new value for the given id.\r\n   */\r\n  updateSingleItem(id: DataIdType, item: TData) {\r\n    if (!this.idxById) { return; }\r\n\r\n    // see also https://github.com/mleibman/SlickGrid/issues/1082\r\n    if (!this.idxById.has(id)) {\r\n      throw new Error('[SlickGrid DataView] Invalid id');\r\n    }\r\n\r\n    // What if the specified item also has an updated idProperty?\r\n    // Then we'll have to update the index as well, and possibly the `updated` cache too.\r\n    if (id !== item[this.idProperty as keyof TData]) {\r\n      // make sure the new id is unique:\r\n      const newId = item[this.idProperty as keyof TData] as DataIdType;\r\n      if (!Utils.isDefined(newId)) {\r\n        throw new Error('[SlickGrid DataView] Cannot update item to associate with a null id');\r\n      }\r\n      if (this.idxById.has(newId)) {\r\n        throw new Error('[SlickGrid DataView] Cannot update item to associate with a non-unique id');\r\n      }\r\n      this.idxById.set(newId, this.idxById.get(id) as number);\r\n      this.idxById.delete(id);\r\n\r\n      // Also update the `updated` hashtable/markercache? Yes, `recalc()` inside `refresh()` needs that one!\r\n      if (this.updated?.[id]) {\r\n        delete this.updated[id];\r\n      }\r\n\r\n      // Also update the row indexes? no need since the `refresh()`, further down, blows away the `rowsById[]` cache!\r\n\r\n      id = newId;\r\n    }\r\n    this.items[this.idxById.get(id) as number] = item;\r\n\r\n    // Also update the rows? no need since the `refresh()`, further down, blows away the `rows[]` cache and recalculates it via `recalc()`!\r\n\r\n    if (!this.updated) {\r\n      this.updated = {};\r\n    }\r\n    this.updated[id] = true;\r\n  }\r\n\r\n  /**\r\n   * Updates a single item in the data view given the id and new value.\r\n   * @param id The new id of the item.\r\n   * @param item The item which should be the new value for the given id.\r\n   */\r\n  updateItem<T extends TData>(id: DataIdType, item: T) {\r\n    this.updateSingleItem(id, item);\r\n    this.refresh();\r\n  }\r\n\r\n  /**\r\n   * Updates multiple items in the data view given the new ids and new values.\r\n   * @param id {Array} The array of new ids which is in the same order as the items.\r\n   * @param newItems {Array} The new items that should be set in the data view for the given ids.\r\n   */\r\n  updateItems<T extends TData>(ids: DataIdType[], newItems: T[]) {\r\n    if (ids.length !== newItems.length) {\r\n      throw new Error('[SlickGrid DataView] Mismatch on the length of ids and items provided to update');\r\n    }\r\n    for (let i = 0, l = newItems.length; i < l; i++) {\r\n      this.updateSingleItem(ids[i], newItems[i]);\r\n    }\r\n    this.refresh();\r\n  }\r\n\r\n  /**\r\n   * Inserts a single item into the data view at the given position.\r\n   * @param insertBefore {Number} The 0-based index before which the item should be inserted.\r\n   * @param item The item to insert.\r\n   */\r\n  insertItem(insertBefore: number, item: TData) {\r\n    this.items.splice(insertBefore, 0, item);\r\n    this.updateIdxById(insertBefore);\r\n    this.refresh();\r\n  }\r\n\r\n  /**\r\n   * Inserts multiple items into the data view at the given position.\r\n   * @param insertBefore {Number} The 0-based index before which the items should be inserted.\r\n   * @param newItems {Array}  The items to insert.\r\n   */\r\n  insertItems(insertBefore: number, newItems: TData[]) {\r\n    // @ts-ignore\r\n    Array.prototype.splice.apply(this.items, [insertBefore, 0].concat(newItems));\r\n    this.updateIdxById(insertBefore);\r\n    this.refresh();\r\n  }\r\n\r\n  /**\r\n   * Adds a single item at the end of the data view.\r\n   * @param item The item to add at the end.\r\n   */\r\n  addItem(item: TData) {\r\n    this.items.push(item);\r\n    this.updateIdxById(this.items.length - 1);\r\n    this.refresh();\r\n  }\r\n\r\n  /**\r\n   * Adds multiple items at the end of the data view.\r\n   * @param {Array} newItems The items to add at the end.\r\n   */\r\n  addItems(newItems: TData[]) {\r\n    this.items = this.items.concat(newItems);\r\n    this.updateIdxById(this.items.length - newItems.length);\r\n    this.refresh();\r\n  }\r\n\r\n  /**\r\n   * Deletes a single item identified by the given id from the data view.\r\n   * @param {String|Number} id The id identifying the object to delete.\r\n   */\r\n  deleteItem(id: DataIdType) {\r\n    if (!this.idxById) { return; }\r\n    if (this.isBulkSuspend) {\r\n      this.bulkDeleteIds.set(id, true);\r\n    } else {\r\n      const idx = this.idxById.get(id);\r\n      if (idx === undefined) {\r\n        throw new Error('[SlickGrid DataView] Invalid id');\r\n      }\r\n      this.idxById.delete(id);\r\n      this.items.splice(idx, 1);\r\n      this.updateIdxById(idx);\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes multiple item identified by the given ids from the data view.\r\n   * @param {Array} ids The ids of the items to delete.\r\n   */\r\n  deleteItems(ids: DataIdType[]) {\r\n    if (ids.length === 0 || !this.idxById) {\r\n      return;\r\n    }\r\n\r\n    if (this.isBulkSuspend) {\r\n      for (let i = 0, l = ids.length; i < l; i++) {\r\n        const id = ids[i];\r\n        const idx = this.idxById.get(id);\r\n        if (idx === undefined) {\r\n          throw new Error('[SlickGrid DataView] Invalid id');\r\n        }\r\n        this.bulkDeleteIds.set(id, true);\r\n      }\r\n    } else {\r\n      // collect all indexes\r\n      const indexesToDelete: number[] = [];\r\n      for (let i = 0, l = ids.length; i < l; i++) {\r\n        const id = ids[i];\r\n        const idx = this.idxById.get(id);\r\n        if (idx === undefined) {\r\n          throw new Error('[SlickGrid DataView] Invalid id');\r\n        }\r\n        this.idxById.delete(id);\r\n        indexesToDelete.push(idx);\r\n      }\r\n\r\n      // Remove from back to front\r\n      indexesToDelete.sort();\r\n      for (let i = indexesToDelete.length - 1; i >= 0; --i) {\r\n        this.items.splice(indexesToDelete[i], 1);\r\n      }\r\n\r\n      // update lookup from front to back\r\n      this.updateIdxById(indexesToDelete[0]);\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n  /** Add an item in a sorted dataset (a Sort function must be defined) */\r\n  sortedAddItem(item: TData) {\r\n    if (!this.sortComparer) {\r\n      throw new Error('[SlickGrid DataView] sortedAddItem() requires a sort comparer, use sort()');\r\n    }\r\n    this.insertItem(this.sortedIndex(item), item);\r\n  }\r\n\r\n  /** Update an item in a sorted dataset (a Sort function must be defined) */\r\n  sortedUpdateItem(id: string | number, item: TData) {\r\n    if (!this.idxById) { return; }\r\n    if (!this.idxById.has(id) || id !== item[this.idProperty as keyof TData]) {\r\n      throw new Error('[SlickGrid DataView] Invalid or non-matching id ' + this.idxById.get(id));\r\n    }\r\n    if (!this.sortComparer) {\r\n      throw new Error('[SlickGrid DataView] sortedUpdateItem() requires a sort comparer, use sort()');\r\n    }\r\n    const oldItem = this.getItemById(id);\r\n    if (this.sortComparer(oldItem, item) !== 0) {\r\n      // item affects sorting -> must use sorted add\r\n      this.deleteItem(id);\r\n      this.sortedAddItem(item);\r\n    } else { // update does not affect sorting -> regular update works fine\r\n      this.updateItem(id, item);\r\n    }\r\n  }\r\n\r\n  protected sortedIndex(searchItem: TData) {\r\n    let low = 0;\r\n    let high = this.items.length;\r\n\r\n    while (low < high) {\r\n      const mid = low + high >>> 1;\r\n      if (this.sortComparer(this.items[mid], searchItem) === -1) {\r\n        low = mid + 1;\r\n      } else {\r\n        high = mid;\r\n      }\r\n    }\r\n    return low;\r\n  }\r\n\r\n  /** Get item count, that is the full dataset lenght of the DataView */\r\n  getItemCount() {\r\n    return this.items.length;\r\n  }\r\n\r\n  /** Get row count (rows displayed in current page) */\r\n  getLength() {\r\n    return this.rows.length;\r\n  }\r\n\r\n  /** Retrieve an item from the DataView at specific index */\r\n  getItem<T extends TData>(i: number) {\r\n    const item = this.rows[i] as T;\r\n\r\n    // if this is a group row, make sure totals are calculated and update the title\r\n    if ((item as SlickGroup_)?.__group && (item as SlickGroup_).totals && !(item as SlickGroup_).totals?.initialized) {\r\n      const gi = this.groupingInfos[(item as SlickGroup_).level];\r\n      if (!gi.displayTotalsRow) {\r\n        this.calculateTotals((item as SlickGroup_).totals);\r\n        (item as SlickGroup_).title = gi.formatter ? gi.formatter((item as SlickGroup_)) : (item as SlickGroup_).value;\r\n      }\r\n    }\r\n    // if this is a totals row, make sure it's calculated\r\n    else if ((item as SlickGroupTotals_)?.__groupTotals && !(item as SlickGroupTotals_).initialized) {\r\n      this.calculateTotals(item as SlickGroupTotals_);\r\n    }\r\n\r\n    return item;\r\n  }\r\n\r\n  getItemMetadata(row: number): ItemMetadata | null {\r\n    const item = this.rows[row];\r\n    if (item === undefined) {\r\n      return null;\r\n    }\r\n\r\n    // global override for all regular rows\r\n    if (this._options.globalItemMetadataProvider?.getRowMetadata) {\r\n      return this._options.globalItemMetadataProvider.getRowMetadata(item, row);\r\n    }\r\n\r\n    // overrides for grouping rows\r\n    if ((item as SlickGroup_).__group && this._options.groupItemMetadataProvider?.getGroupRowMetadata) {\r\n      return this._options.groupItemMetadataProvider.getGroupRowMetadata(item as GroupingFormatterItem, row);\r\n    }\r\n\r\n    // overrides for totals rows\r\n    if ((item as SlickGroupTotals_).__groupTotals && this._options.groupItemMetadataProvider?.getTotalsRowMetadata) {\r\n      return this._options.groupItemMetadataProvider.getTotalsRowMetadata(item as { group: GroupingFormatterItem }, row);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  protected expandCollapseAllGroups(level?: number, collapse?: boolean) {\r\n    if (!Utils.isDefined(level)) {\r\n      for (let i = 0; i < this.groupingInfos.length; i++) {\r\n        this.toggledGroupsByLevel[i] = {};\r\n        this.groupingInfos[i].collapsed = collapse;\r\n\r\n        if (collapse === true) {\r\n          this.onGroupCollapsed.notify({ level: i, groupingKey: null });\r\n        } else {\r\n          this.onGroupExpanded.notify({ level: i, groupingKey: null });\r\n        }\r\n      }\r\n    } else {\r\n      this.toggledGroupsByLevel[level] = {};\r\n      this.groupingInfos[level].collapsed = collapse;\r\n\r\n      if (collapse === true) {\r\n        this.onGroupCollapsed.notify({ level, groupingKey: null });\r\n      } else {\r\n        this.onGroupExpanded.notify({ level, groupingKey: null });\r\n      }\r\n    }\r\n    this.refresh();\r\n  }\r\n\r\n  /**\r\n   * @param {Number} [level] Optional level to collapse.  If not specified, applies to all levels.\r\n   */\r\n  collapseAllGroups(level?: number) {\r\n    this.expandCollapseAllGroups(level, true);\r\n  }\r\n\r\n  /**\r\n   * @param {Number} [level] Optional level to expand.  If not specified, applies to all levels.\r\n   */\r\n  expandAllGroups(level?: number) {\r\n    this.expandCollapseAllGroups(level, false);\r\n  }\r\n\r\n  expandCollapseGroup(level: number, groupingKey: string, collapse?: boolean) {\r\n    // @ts-ignore\r\n    this.toggledGroupsByLevel[level][groupingKey] = this.groupingInfos[level].collapsed ^ collapse;\r\n    this.refresh();\r\n  }\r\n\r\n  /**\r\n   * @param varArgs Either a Slick.Group's \"groupingKey\" property, or a\r\n   *     variable argument list of grouping values denoting a unique path to the row.  For\r\n   *     example, calling collapseGroup('high', '10%') will collapse the '10%' subgroup of\r\n   *     the 'high' group.\r\n   */\r\n  collapseGroup(...args: any) {\r\n    const calledArgs = Array.prototype.slice.call(args);\r\n    const arg0 = calledArgs[0];\r\n    let groupingKey: string;\r\n    let level: number;\r\n\r\n    if (args.length === 1 && arg0.indexOf(this.groupingDelimiter) !== -1) {\r\n      groupingKey = arg0;\r\n      level = arg0.split(this.groupingDelimiter).length - 1;\r\n    } else {\r\n      groupingKey = args.join(this.groupingDelimiter);\r\n      level = args.length - 1;\r\n    }\r\n\r\n    this.expandCollapseGroup(level, groupingKey, true);\r\n    this.onGroupCollapsed.notify({ level, groupingKey });\r\n  }\r\n\r\n  /**\r\n   * @param varArgs Either a Slick.Group's \"groupingKey\" property, or a\r\n   *     variable argument list of grouping values denoting a unique path to the row.  For\r\n   *     example, calling expandGroup('high', '10%') will expand the '10%' subgroup of\r\n   *     the 'high' group.\r\n   */\r\n  expandGroup(...args: any) {\r\n    const calledArgs = Array.prototype.slice.call(args);\r\n    const arg0 = calledArgs[0];\r\n    let groupingKey: string;\r\n    let level: number;\r\n\r\n    if (args.length === 1 && arg0.indexOf(this.groupingDelimiter) !== -1) {\r\n      level = arg0.split(this.groupingDelimiter).length - 1;\r\n      groupingKey = arg0;\r\n    } else {\r\n      level = args.length - 1;\r\n      groupingKey = args.join(this.groupingDelimiter);\r\n    }\r\n\r\n    this.expandCollapseGroup(level, groupingKey, false);\r\n    this.onGroupExpanded.notify({ level, groupingKey });\r\n  }\r\n\r\n  getGroups() {\r\n    return this.groups;\r\n  }\r\n\r\n  protected extractGroups(rows: any[], parentGroup?: SlickGroup_) {\r\n    let group: SlickGroup_;\r\n    let val: any;\r\n    const groups: SlickGroup_[] = [];\r\n    const groupsByVal: any = {};\r\n    let r;\r\n    const level = parentGroup ? parentGroup.level + 1 : 0;\r\n    const gi = this.groupingInfos[level];\r\n\r\n    for (let i = 0, l = gi.predefinedValues?.length ?? 0; i < l; i++) {\r\n      val = gi.predefinedValues?.[i];\r\n      group = groupsByVal[val];\r\n      if (!group) {\r\n        group = new SlickGroup();\r\n        group.value = val;\r\n        group.level = level;\r\n        group.groupingKey = (parentGroup ? parentGroup.groupingKey + this.groupingDelimiter : '') + val;\r\n        groups[groups.length] = group;\r\n        groupsByVal[val] = group;\r\n      }\r\n    }\r\n\r\n    for (let i = 0, l = rows.length; i < l; i++) {\r\n      r = rows[i];\r\n      val = gi.getterIsAFn ? (gi.getter as GroupGetterFn)(r) : r[gi.getter as keyof TData];\r\n      group = groupsByVal[val];\r\n      if (!group) {\r\n        group = new SlickGroup();\r\n        group.value = val;\r\n        group.level = level;\r\n        group.groupingKey = (parentGroup ? parentGroup.groupingKey + this.groupingDelimiter : '') + val;\r\n        groups[groups.length] = group;\r\n        groupsByVal[val] = group;\r\n      }\r\n\r\n      group.rows[group.count++] = r;\r\n    }\r\n\r\n    if (level < this.groupingInfos.length - 1) {\r\n      for (let i = 0; i < groups.length; i++) {\r\n        group = groups[i];\r\n        group.groups = this.extractGroups(group.rows, group);\r\n      }\r\n    }\r\n\r\n    if (groups.length) {\r\n      this.addTotals(groups, level);\r\n    }\r\n\r\n    groups.sort(this.groupingInfos[level].comparer);\r\n\r\n    return groups;\r\n  }\r\n\r\n  /** claculate Group Totals */\r\n  protected calculateTotals(totals: SlickGroupTotals_) {\r\n    const group = totals.group;\r\n    const gi = this.groupingInfos[group.level ?? 0];\r\n    const isLeafLevel = (group.level === this.groupingInfos.length);\r\n    let agg: Aggregator;\r\n    let idx = gi.aggregators.length;\r\n\r\n    if (!isLeafLevel && gi.aggregateChildGroups) {\r\n      // make sure all the subgroups are calculated\r\n      let i = group.groups?.length ?? 0;\r\n      while (i--) {\r\n        if (!group.groups[i].totals.initialized) {\r\n          this.calculateTotals(group.groups[i].totals);\r\n        }\r\n      }\r\n    }\r\n\r\n    while (idx--) {\r\n      agg = gi.aggregators[idx];\r\n      agg.init();\r\n      if (!isLeafLevel && gi.aggregateChildGroups) {\r\n        gi.compiledAccumulators[idx].call(agg, group.groups);\r\n      } else {\r\n        gi.compiledAccumulators[idx].call(agg, group.rows);\r\n      }\r\n      agg.storeResult(totals);\r\n    }\r\n    totals.initialized = true;\r\n  }\r\n\r\n  protected addGroupTotals(group: SlickGroup_) {\r\n    const gi = this.groupingInfos[group.level];\r\n    const totals = new SlickGroupTotals();\r\n    totals.group = group;\r\n    group.totals = totals;\r\n    if (!gi.lazyTotalsCalculation) {\r\n      this.calculateTotals(totals);\r\n    }\r\n  }\r\n\r\n  protected addTotals(groups: SlickGroup_[], level?: number) {\r\n    level = level || 0;\r\n    const gi = this.groupingInfos[level];\r\n    const groupCollapsed = gi.collapsed;\r\n    const toggledGroups = this.toggledGroupsByLevel[level];\r\n    let idx = groups.length, g;\r\n    while (idx--) {\r\n      g = groups[idx];\r\n\r\n      if (g.collapsed && !gi.aggregateCollapsed) {\r\n        continue;\r\n      }\r\n\r\n      // Do a depth-first aggregation so that parent group aggregators can access subgroup totals.\r\n      if (g.groups) {\r\n        this.addTotals(g.groups, level + 1);\r\n      }\r\n\r\n      if (gi.aggregators?.length && (\r\n        gi.aggregateEmpty || g.rows.length || g.groups?.length)) {\r\n        this.addGroupTotals(g);\r\n      }\r\n\r\n      g.collapsed = (groupCollapsed as any) ^ toggledGroups[g.groupingKey];\r\n      g.title = gi.formatter ? gi.formatter(g) : g.value;\r\n    }\r\n  }\r\n\r\n  protected flattenGroupedRows(groups: SlickGroup_[], level?: number) {\r\n    level = level || 0;\r\n    const gi = this.groupingInfos[level];\r\n    const groupedRows: any[] = [];\r\n    let rows: any[];\r\n    let gl = 0;\r\n    let g;\r\n    for (let i = 0, l = groups.length; i < l; i++) {\r\n      g = groups[i];\r\n      groupedRows[gl++] = g;\r\n\r\n      if (!g.collapsed) {\r\n        rows = g.groups ? this.flattenGroupedRows(g.groups, level + 1) : g.rows;\r\n        for (let j = 0, jj = rows.length; j < jj; j++) {\r\n          groupedRows[gl++] = rows[j];\r\n        }\r\n      }\r\n\r\n      if (g.totals && gi.displayTotalsRow && (!g.collapsed || gi.aggregateCollapsed)) {\r\n        groupedRows[gl++] = g.totals;\r\n      }\r\n    }\r\n    return groupedRows;\r\n  }\r\n\r\n  protected compileAccumulatorLoopCSPSafe(aggregator: Aggregator) {\r\n    if (aggregator.accumulate) {\r\n      return function (items: any[]) {\r\n        let result;\r\n        for (let i = 0; i < items.length; i++) {\r\n          const item = items[i];\r\n          result = aggregator.accumulate!.call(aggregator, item);\r\n        }\r\n        return result;\r\n      };\r\n    } else {\r\n      return function noAccumulator() { };\r\n    }\r\n  }\r\n\r\n  protected compileFilterCSPSafe(items: TData[], args: any): TData[] {\r\n    if (typeof this.filterCSPSafe !== 'function') {\r\n      return [];\r\n    }\r\n    const _retval: TData[] = [];\r\n    const _il = items.length;\r\n\r\n    for (let _i = 0; _i < _il; _i++) {\r\n      if (this.filterCSPSafe(items[_i], args)) {\r\n        _retval.push(items[_i]);\r\n      }\r\n    }\r\n\r\n    return _retval;\r\n  }\r\n\r\n  protected compileFilter(stopRunningIfCSPSafeIsActive = false): FilterFn<TData> | null {\r\n    if (stopRunningIfCSPSafeIsActive) {\r\n      return null as any;\r\n    }\r\n    const filterInfo = Utils.getFunctionDetails(this.filter as FilterFn<TData>);\r\n\r\n    const filterPath1 = '{ continue _coreloop; }$1';\r\n    const filterPath2 = '{ _retval[_idx++] = $item$; continue _coreloop; }$1';\r\n    // make some allowances for minification - there's only so far we can go with RegEx\r\n    const filterBody = filterInfo.body\r\n      .replace(/return false\\s*([;}]|\\}|$)/gi, filterPath1)\r\n      .replace(/return!1([;}]|\\}|$)/gi, filterPath1)\r\n      .replace(/return true\\s*([;}]|\\}|$)/gi, filterPath2)\r\n      .replace(/return!0([;}]|\\}|$)/gi, filterPath2)\r\n      .replace(/return ([^;}]+?)\\s*([;}]|$)/gi,\r\n        '{ if ($1) { _retval[_idx++] = $item$; }; continue _coreloop; }$2');\r\n\r\n    // This preserves the function template code after JS compression,\r\n    // so that replace() commands still work as expected.\r\n    let tpl = [\r\n      // 'function(_items, _args) { ',\r\n      'var _retval = [], _idx = 0; ',\r\n      'var $item$, $args$ = _args; ',\r\n      '_coreloop: ',\r\n      'for (var _i = 0, _il = _items.length; _i < _il; _i++) { ',\r\n      '$item$ = _items[_i]; ',\r\n      '$filter$; ',\r\n      '} ',\r\n      'return _retval; '\r\n      // '}'\r\n    ].join('');\r\n    tpl = tpl.replace(/\\$filter\\$/gi, filterBody);\r\n    tpl = tpl.replace(/\\$item\\$/gi, filterInfo.params[0]);\r\n    tpl = tpl.replace(/\\$args\\$/gi, filterInfo.params[1]);\r\n    const fn: any = new Function('_items,_args', tpl);\r\n    const fnName = 'compiledFilter';\r\n    fn.displayName = fnName;\r\n    fn.name = this.setFunctionName(fn, fnName);\r\n    return fn;\r\n  }\r\n\r\n  protected compileFilterWithCaching(stopRunningIfCSPSafeIsActive = false) {\r\n    if (stopRunningIfCSPSafeIsActive) {\r\n      return null as any;\r\n    }\r\n\r\n    const filterInfo = Utils.getFunctionDetails(this.filter as FilterFn<TData>);\r\n\r\n    const filterPath1 = '{ continue _coreloop; }$1';\r\n    const filterPath2 = '{ _cache[_i] = true;_retval[_idx++] = $item$; continue _coreloop; }$1';\r\n    // make some allowances for minification - there's only so far we can go with RegEx\r\n    const filterBody = filterInfo.body\r\n      .replace(/return false\\s*([;}]|\\}|$)/gi, filterPath1)\r\n      .replace(/return!1([;}]|\\}|$)/gi, filterPath1)\r\n      .replace(/return true\\s*([;}]|\\}|$)/gi, filterPath2)\r\n      .replace(/return!0([;}]|\\}|$)/gi, filterPath2)\r\n      .replace(/return ([^;}]+?)\\s*([;}]|$)/gi,\r\n        '{ if ((_cache[_i] = $1)) { _retval[_idx++] = $item$; }; continue _coreloop; }$2');\r\n\r\n    // This preserves the function template code after JS compression,\r\n    // so that replace() commands still work as expected.\r\n    let tpl = [\r\n      // 'function(_items, _args, _cache) { ',\r\n      'var _retval = [], _idx = 0; ',\r\n      'var $item$, $args$ = _args; ',\r\n      '_coreloop: ',\r\n      'for (var _i = 0, _il = _items.length; _i < _il; _i++) { ',\r\n      '$item$ = _items[_i]; ',\r\n      'if (_cache[_i]) { ',\r\n      '_retval[_idx++] = $item$; ',\r\n      'continue _coreloop; ',\r\n      '} ',\r\n      '$filter$; ',\r\n      '} ',\r\n      'return _retval; '\r\n      // '}'\r\n    ].join('');\r\n    tpl = tpl.replace(/\\$filter\\$/gi, filterBody);\r\n    tpl = tpl.replace(/\\$item\\$/gi, filterInfo.params[0]);\r\n    tpl = tpl.replace(/\\$args\\$/gi, filterInfo.params[1]);\r\n\r\n    const fn: any = new Function('_items,_args,_cache', tpl);\r\n    const fnName = 'compiledFilterWithCaching';\r\n    fn.displayName = fnName;\r\n    fn.name = this.setFunctionName(fn, fnName);\r\n    return fn;\r\n  }\r\n\r\n  protected compileFilterWithCachingCSPSafe(items: TData[], args: any, filterCache: any[]): TData[] {\r\n    if (typeof this.filterCSPSafe !== 'function') {\r\n      return [];\r\n    }\r\n\r\n    const retval: TData[] = [];\r\n    const il = items.length;\r\n\r\n    for (let _i = 0; _i < il; _i++) {\r\n      if (filterCache[_i] || this.filterCSPSafe(items[_i], args)) {\r\n        retval.push(items[_i]);\r\n      }\r\n    }\r\n\r\n    return retval;\r\n  }\r\n\r\n  /**\r\n   * In ES5 we could set the function name on the fly but in ES6 this is forbidden and we need to set it through differently\r\n   * We can use Object.defineProperty and set it the property to writable, see MDN for reference\r\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\r\n   * @param {*} fn\r\n   * @param {string} fnName\r\n   */\r\n  protected setFunctionName(fn: any, fnName: string) {\r\n    try {\r\n      Object.defineProperty(fn, 'name', { writable: true, value: fnName });\r\n    } catch (err) {\r\n      fn.name = fnName;\r\n    }\r\n  }\r\n\r\n  protected uncompiledFilter(items: TData[], args: any) {\r\n    const retval: any[] = [];\r\n    let idx = 0;\r\n\r\n    for (let i = 0, ii = items.length; i < ii; i++) {\r\n      if (this.filter?.(items[i], args)) {\r\n        retval[idx++] = items[i];\r\n      }\r\n    }\r\n\r\n    return retval;\r\n  }\r\n\r\n  protected uncompiledFilterWithCaching(items: TData[], args: any, cache: any) {\r\n    const retval: any[] = [];\r\n    let idx = 0,\r\n      item: TData;\r\n\r\n    for (let i = 0, ii = items.length; i < ii; i++) {\r\n      item = items[i];\r\n      if (cache[i]) {\r\n        retval[idx++] = item;\r\n      } else if (this.filter?.(item, args)) {\r\n        retval[idx++] = item;\r\n        cache[i] = true;\r\n      }\r\n    }\r\n\r\n    return retval;\r\n  }\r\n\r\n  protected getFilteredAndPagedItems(items: TData[]) {\r\n    if (this._options.useCSPSafeFilter ? this.filterCSPSafe : this.filter) {\r\n      let batchFilter: AnyFunction;\r\n      let batchFilterWithCaching: AnyFunction;\r\n      if (this._options.useCSPSafeFilter) {\r\n        batchFilter = (this._options.inlineFilters ? this.compiledFilterCSPSafe : this.uncompiledFilter) as AnyFunction;\r\n        batchFilterWithCaching = (this._options.inlineFilters ? this.compiledFilterWithCachingCSPSafe : this.uncompiledFilterWithCaching) as AnyFunction;\r\n      } else {\r\n        batchFilter = (this._options.inlineFilters ? this.compiledFilter : this.uncompiledFilter) as AnyFunction;\r\n        batchFilterWithCaching = (this._options.inlineFilters ? this.compiledFilterWithCaching : this.uncompiledFilterWithCaching) as AnyFunction;\r\n      }\r\n      if (this.refreshHints.isFilterNarrowing) {\r\n        this.filteredItems = batchFilter.call(this, this.filteredItems, this.filterArgs);\r\n      } else if (this.refreshHints.isFilterExpanding) {\r\n        this.filteredItems = batchFilterWithCaching.call(this, items, this.filterArgs, this.filterCache);\r\n      } else if (!this.refreshHints.isFilterUnchanged) {\r\n        this.filteredItems = batchFilter.call(this, items, this.filterArgs);\r\n      }\r\n    } else {\r\n      // special case:  if not filtering and not paging, the resulting\r\n      // rows collection needs to be a copy so that changes due to sort\r\n      // can be caught\r\n      this.filteredItems = this.pagesize ? items : items.concat();\r\n    }\r\n\r\n    // get the current page\r\n    let paged: TData[];\r\n    if (this.pagesize) {\r\n      if (this.filteredItems.length <= this.pagenum * this.pagesize) {\r\n        if (this.filteredItems.length === 0) {\r\n          this.pagenum = 0;\r\n        } else {\r\n          this.pagenum = Math.floor((this.filteredItems.length - 1) / this.pagesize);\r\n        }\r\n      }\r\n      paged = this.filteredItems.slice(this.pagesize * this.pagenum, this.pagesize * this.pagenum + this.pagesize);\r\n    } else {\r\n      paged = this.filteredItems;\r\n    }\r\n    return { totalRows: this.filteredItems.length, rows: paged };\r\n  }\r\n\r\n  protected getRowDiffs(rows: TData[], newRows: TData[]) {\r\n    let item: TData | SlickNonDataItem | SlickDataItem | SlickGroup_;\r\n    let r;\r\n    let eitherIsNonData;\r\n    const diff: number[] = [];\r\n    let from = 0;\r\n    let to = Math.max(newRows.length, rows.length);\r\n\r\n    if (this.refreshHints?.ignoreDiffsBefore) {\r\n      from = Math.max(0,\r\n        Math.min(newRows.length, this.refreshHints.ignoreDiffsBefore));\r\n    }\r\n\r\n    if (this.refreshHints?.ignoreDiffsAfter) {\r\n      to = Math.min(newRows.length,\r\n        Math.max(0, this.refreshHints.ignoreDiffsAfter));\r\n    }\r\n\r\n    for (let i = from, rl = rows.length; i < to; i++) {\r\n      if (i >= rl) {\r\n        diff[diff.length] = i;\r\n      } else {\r\n        item = newRows[i];\r\n        r = rows[i];\r\n\r\n        if (!item || (this.groupingInfos.length && (eitherIsNonData = ((item as SlickNonDataItem).__nonDataRow) || ((r as SlickNonDataItem).__nonDataRow)) &&\r\n          (item as SlickGroup_).__group !== (r as SlickGroup_).__group ||\r\n          (item as SlickGroup_).__group && !(item as SlickGroup_).equals(r as SlickGroup_))\r\n          || (eitherIsNonData &&\r\n            // no good way to compare totals since they are arbitrary DTOs\r\n            // deep object comparison is pretty expensive\r\n            // always considering them 'dirty' seems easier for the time being\r\n            ((item as SlickGroupTotals_).__groupTotals || (r as SlickGroupTotals_).__groupTotals))\r\n          || item[this.idProperty as keyof TData] !== r[this.idProperty as keyof TData]\r\n          || (this.updated?.[item[this.idProperty as keyof TData]])\r\n        ) {\r\n          diff[diff.length] = i;\r\n        }\r\n      }\r\n    }\r\n    return diff;\r\n  }\r\n\r\n  protected recalc(_items: TData[]) {\r\n    this.rowsById = undefined;\r\n\r\n    if (this.refreshHints.isFilterNarrowing !== this.prevRefreshHints.isFilterNarrowing ||\r\n      this.refreshHints.isFilterExpanding !== this.prevRefreshHints.isFilterExpanding) {\r\n      this.filterCache = [];\r\n    }\r\n\r\n    const filteredItems = this.getFilteredAndPagedItems(_items);\r\n    this.totalRows = filteredItems.totalRows;\r\n    let newRows: TData[] = filteredItems.rows;\r\n\r\n    this.groups = [];\r\n    if (this.groupingInfos.length) {\r\n      this.groups = this.extractGroups(newRows);\r\n      if (this.groups.length) {\r\n        newRows = this.flattenGroupedRows(this.groups);\r\n      }\r\n    }\r\n\r\n    const diff = this.getRowDiffs(this.rows, newRows as TData[]);\r\n\r\n    this.rows = newRows as TData[];\r\n\r\n    return diff;\r\n  }\r\n\r\n  refresh() {\r\n    if (this.suspend) {\r\n      return;\r\n    }\r\n\r\n    const previousPagingInfo = Utils.extend(true, {}, this.getPagingInfo());\r\n\r\n    const countBefore = this.rows.length;\r\n    const totalRowsBefore = this.totalRows;\r\n\r\n    let diff = this.recalc(this.items); // pass as direct refs to avoid closure perf hit\r\n\r\n    // if the current page is no longer valid, go to last page and recalc\r\n    // we suffer a performance penalty here, but the main loop (recalc) remains highly optimized\r\n    if (this.pagesize && this.totalRows < this.pagenum * this.pagesize) {\r\n      this.pagenum = Math.max(0, Math.ceil(this.totalRows / this.pagesize) - 1);\r\n      diff = this.recalc(this.items);\r\n    }\r\n\r\n    this.updated = null;\r\n    this.prevRefreshHints = this.refreshHints;\r\n    this.refreshHints = {};\r\n\r\n    if (totalRowsBefore !== this.totalRows) {\r\n      // use the previously saved paging info\r\n      if (this.onBeforePagingInfoChanged.notify(previousPagingInfo, null, this).getReturnValue() !== false) {\r\n        this.onPagingInfoChanged.notify(this.getPagingInfo(), null, this);\r\n      }\r\n    }\r\n    if (countBefore !== this.rows.length) {\r\n      this.onRowCountChanged.notify({ previous: countBefore, current: this.rows.length, itemCount: this.items.length, dataView: this, callingOnRowsChanged: (diff.length > 0) }, null, this);\r\n    }\r\n    if (diff.length > 0) {\r\n      this.onRowsChanged.notify({ rows: diff, itemCount: this.items.length, dataView: this, calledOnRowCountChanged: (countBefore !== this.rows.length) }, null, this);\r\n    }\r\n    if (countBefore !== this.rows.length || diff.length > 0) {\r\n      this.onRowsOrCountChanged.notify({\r\n        rowsDiff: diff, previousRowCount: countBefore, currentRowCount: this.rows.length, itemCount: this.items.length,\r\n        rowCountChanged: countBefore !== this.rows.length, rowsChanged: diff.length > 0, dataView: this\r\n      }, null, this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Wires the grid and the DataView together to keep row selection tied to item ids.\r\n   * This is useful since, without it, the grid only knows about rows, so if the items\r\n   * move around, the same rows stay selected instead of the selection moving along\r\n   * with the items.\r\n   *\r\n   * NOTE:  This doesn't work with cell selection model.\r\n   *\r\n   * @param {SlickGrid} grid - The grid to sync selection with.\r\n   * @param {Boolean} preserveHidden - Whether to keep selected items that go out of the\r\n   *     view due to them getting filtered out.\r\n   * @param {Boolean} [preserveHiddenOnSelectionChange] - Whether to keep selected items\r\n   *     that are currently out of the view (see preserveHidden) as selected when selection\r\n   *     changes.\r\n   * @return {Event} An event that notifies when an internal list of selected row ids\r\n   *     changes.  This is useful since, in combination with the above two options, it allows\r\n   *     access to the full list selected row ids, and not just the ones visible to the grid.\r\n   * @method syncGridSelection\r\n   */\r\n  syncGridSelection(grid: SlickGridModel, preserveHidden: boolean, preserveHiddenOnSelectionChange?: boolean) {\r\n    this._grid = grid;\r\n    let inHandler: boolean;\r\n    this.selectedRowIds = this.mapRowsToIds(grid.getSelectedRows());\r\n\r\n    /** @param {Array} rowIds */\r\n    const setSelectedRowIds = (rowIds: DataIdType[] | false) => {\r\n      if (rowIds === false) {\r\n        this.selectedRowIds = [];\r\n      } else {\r\n        if (this.selectedRowIds!.sort().join(',') !== rowIds.sort().join(',')) {\r\n          this.selectedRowIds = rowIds;\r\n        }\r\n      }\r\n    };\r\n\r\n    const update = () => {\r\n      if ((this.selectedRowIds || []).length > 0 && !inHandler) {\r\n        inHandler = true;\r\n        const selectedRows = this.mapIdsToRows(this.selectedRowIds || []);\r\n        if (!preserveHidden) {\r\n          const selectedRowsChangedArgs = {\r\n            grid: this._grid,\r\n            ids: this.mapRowsToIds(selectedRows),\r\n            rows: selectedRows,\r\n            dataView: this\r\n          };\r\n          this.preSelectedRowIdsChangeFn!(selectedRowsChangedArgs);\r\n          this.onSelectedRowIdsChanged.notify(Object.assign(selectedRowsChangedArgs, {\r\n            selectedRowIds: this.selectedRowIds,\r\n            filteredIds: this.getAllSelectedFilteredIds() as DataIdType[],\r\n          }), new SlickEventData(), this);\r\n        }\r\n        grid.setSelectedRows(selectedRows);\r\n        inHandler = false;\r\n      }\r\n    };\r\n\r\n    grid.onSelectedRowsChanged.subscribe((_e: SlickEventData_, args: { rows: number[]; }) => {\r\n      if (!inHandler) {\r\n        const newSelectedRowIds = this.mapRowsToIds(args.rows);\r\n        const selectedRowsChangedArgs = {\r\n          grid: this._grid,\r\n          ids: newSelectedRowIds,\r\n          rows: args.rows,\r\n          added: true,\r\n          dataView: this\r\n        };\r\n        this.preSelectedRowIdsChangeFn!(selectedRowsChangedArgs);\r\n        this.onSelectedRowIdsChanged.notify(Object.assign(selectedRowsChangedArgs, {\r\n          selectedRowIds: this.selectedRowIds,\r\n          filteredIds: this.getAllSelectedFilteredIds() as DataIdType[],\r\n        }), new SlickEventData(), this);\r\n      }\r\n    });\r\n\r\n    this.preSelectedRowIdsChangeFn = (args: { ids: DataIdType[]; added?: boolean; }) => {\r\n      if (!inHandler) {\r\n        inHandler = true;\r\n        const overwrite = (typeof args.added === typeof undefined);\r\n\r\n        if (overwrite) {\r\n          setSelectedRowIds(args.ids);\r\n        } else {\r\n          let rowIds: DataIdType[];\r\n          if (args.added) {\r\n            if (preserveHiddenOnSelectionChange && grid.getOptions().multiSelect) {\r\n              // find the ones that are hidden\r\n              const hiddenSelectedRowIds = this.selectedRowIds?.filter((id) => this.getRowById(id) === undefined);\r\n              // add the newly selected ones\r\n              rowIds = hiddenSelectedRowIds!.concat(args.ids);\r\n            } else {\r\n              rowIds = args.ids;\r\n            }\r\n          } else {\r\n            if (preserveHiddenOnSelectionChange && grid.getOptions().multiSelect) {\r\n              // remove rows whose id is on the list\r\n              const argsIdsSet = new Set(args.ids);\r\n              rowIds = this.selectedRowIds?.filter((id) => !argsIdsSet.has(id));\r\n            } else {\r\n              rowIds = [];\r\n            }\r\n          }\r\n          setSelectedRowIds(rowIds);\r\n        }\r\n        inHandler = false;\r\n      }\r\n    };\r\n\r\n    this.onRowsOrCountChanged.subscribe(update.bind(this));\r\n\r\n    return this.onSelectedRowIdsChanged;\r\n  }\r\n\r\n  /**\r\n   * Get all selected IDs\r\n   * Note: when using Pagination it will also include hidden selections assuming `preserveHiddenOnSelectionChange` is set to true.\r\n   */\r\n  getAllSelectedIds() {\r\n    return this.selectedRowIds;\r\n  }\r\n\r\n  /**\r\n   * Get all selected filtered IDs (similar to \"getAllSelectedIds\" but only return filtered data)\r\n   * Note: when using Pagination it will also include hidden selections assuming `preserveHiddenOnSelectionChange` is set to true.\r\n   */\r\n  getAllSelectedFilteredIds() {\r\n    return this.getAllSelectedFilteredItems().map((item) => item[this.idProperty as keyof TData]);\r\n  }\r\n\r\n  /**\r\n   * Set current row selected IDs array (regardless of Pagination)\r\n   * NOTE: This will NOT change the selection in the grid, if you need to do that then you still need to call\r\n   * \"grid.setSelectedRows(rows)\"\r\n   * @param {Array} selectedIds - list of IDs which have been selected for this action\r\n   * @param {Object} options\r\n   *  - `isRowBeingAdded`: defaults to true, are the new selected IDs being added (or removed) as new row selections\r\n   *  - `shouldTriggerEvent`: defaults to true, should we trigger `onSelectedRowIdsChanged` event\r\n   *  - `applyRowSelectionToGrid`: defaults to true, should we apply the row selections to the grid in the UI\r\n   */\r\n  setSelectedIds(selectedIds: Array<number | string>, options?: Partial<{ isRowBeingAdded: boolean; shouldTriggerEvent: boolean; applyRowSelectionToGrid: boolean; }>) {\r\n    let isRowBeingAdded = options?.isRowBeingAdded;\r\n    const shouldTriggerEvent = options?.shouldTriggerEvent;\r\n    const applyRowSelectionToGrid = options?.applyRowSelectionToGrid;\r\n\r\n    if (isRowBeingAdded !== false) {\r\n      isRowBeingAdded = true;\r\n    }\r\n    const selectedRows = this.mapIdsToRows(selectedIds);\r\n    const selectedRowsChangedArgs = {\r\n      grid: this._grid,\r\n      ids: selectedIds,\r\n      rows: selectedRows,\r\n      added: isRowBeingAdded,\r\n      dataView: this\r\n    };\r\n    this.preSelectedRowIdsChangeFn?.(selectedRowsChangedArgs);\r\n\r\n    if (shouldTriggerEvent !== false) {\r\n      this.onSelectedRowIdsChanged.notify(Object.assign(selectedRowsChangedArgs, {\r\n        selectedRowIds: this.selectedRowIds,\r\n        filteredIds: this.getAllSelectedFilteredIds() as DataIdType[],\r\n      }), new SlickEventData(), this);\r\n    }\r\n\r\n    // should we also apply the row selection in to the grid (UI) as well?\r\n    if (applyRowSelectionToGrid !== false && this._grid) {\r\n      this._grid.setSelectedRows(selectedRows);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all selected dataContext items\r\n   * Note: when using Pagination it will also include hidden selections assuming `preserveHiddenOnSelectionChange` is set to true.\r\n   */\r\n  getAllSelectedItems<T extends TData>() {\r\n    const selectedData: TData[] = [];\r\n    const selectedIds = this.getAllSelectedIds();\r\n    selectedIds!.forEach((id) => {\r\n      selectedData.push(this.getItemById(id));\r\n    });\r\n    return selectedData as T[];\r\n  }\r\n\r\n  /**\r\n  * Get all selected filtered dataContext items (similar to \"getAllSelectedItems\" but only return filtered data)\r\n  * Note: when using Pagination it will also include hidden selections assuming `preserveHiddenOnSelectionChange` is set to true.\r\n  */\r\n  getAllSelectedFilteredItems<T extends TData>() {\r\n    if (!Array.isArray(this.selectedRowIds)) {\r\n      return [];\r\n    }\r\n\r\n    const selectedRowIdSet = new Set<DataIdType>(this.selectedRowIds);\r\n    const intersection = this.filteredItems.filter((a) => selectedRowIdSet.has(a[this.idProperty as keyof TData] as DataIdType));\r\n    return (intersection || []) as T[];\r\n  }\r\n\r\n  syncGridCellCssStyles(grid: SlickGridModel, key: string) {\r\n    let hashById: any;\r\n    let inHandler: boolean;\r\n\r\n    const storeCellCssStyles = (hash: CssStyleHash) => {\r\n      hashById = {};\r\n      if (typeof hash === 'object') {\r\n        Object.keys(hash).forEach(row => {\r\n          if (hash) {\r\n            const id = this.rows[row as any][this.idProperty as keyof TData];\r\n            hashById[id] = hash[row];\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    // since this method can be called after the cell styles have been set,\r\n    // get the existing ones right away\r\n    storeCellCssStyles(grid.getCellCssStyles(key));\r\n\r\n    const update = () => {\r\n      if (typeof hashById === 'object') {\r\n        inHandler = true;\r\n        this.ensureRowsByIdCache();\r\n        const newHash: CssStyleHash = {};\r\n        Object.keys(hashById).forEach(id => {\r\n          const row = this.rowsById?.[id];\r\n          if (Utils.isDefined(row)) {\r\n            newHash[row as number] = hashById[id];\r\n          }\r\n        });\r\n        grid.setCellCssStyles(key, newHash);\r\n        inHandler = false;\r\n      }\r\n    };\r\n\r\n    grid.onCellCssStylesChanged.subscribe((_e: SlickEventData_, args: any) => {\r\n      if (inHandler) { return; }\r\n      if (key !== args.key) { return; }\r\n      if (args.hash) {\r\n        storeCellCssStyles(args.hash);\r\n      } else {\r\n        grid.onCellCssStylesChanged.unsubscribe();\r\n        this.onRowsOrCountChanged.unsubscribe(update);\r\n      }\r\n    });\r\n\r\n    this.onRowsOrCountChanged.subscribe(update.bind(this));\r\n  }\r\n}\r\n\r\nexport class AvgAggregator<T = any> implements Aggregator {\r\n  private _nonNullCount = 0;\r\n  private _sum = 0;\r\n  private _field: number | string;\r\n  private _type = 'avg' as const;\r\n\r\n  constructor(field: number | string) {\r\n    this._field = field;\r\n  }\r\n\r\n  get field(): number | string {\r\n    return this._field;\r\n  }\r\n\r\n  get type(): string {\r\n    return this._type;\r\n  }\r\n\r\n  init(): void {\r\n    this._nonNullCount = 0;\r\n    this._sum = 0;\r\n  }\r\n\r\n  accumulate(item: T) {\r\n    const val: any = (item?.hasOwnProperty(this._field)) ? item[this._field as keyof T] : null;\r\n    if (val !== null && val !== '' && !isNaN(val)) {\r\n      this._nonNullCount++;\r\n      this._sum += parseFloat(val);\r\n    }\r\n  }\r\n\r\n  storeResult(groupTotals: SlickGroupTotals_ & { avg: Record<number | string, number>; }) {\r\n    if (!groupTotals || groupTotals[this._type] === undefined) {\r\n      (groupTotals as any)[this._type] = {};\r\n    }\r\n    if (this._nonNullCount !== 0) {\r\n      groupTotals[this._type][this._field] = this._sum / this._nonNullCount;\r\n    }\r\n  }\r\n}\r\n\r\nexport class MinAggregator<T = any> implements Aggregator {\r\n  private _min: number | null = null;\r\n  private _field: number | string;\r\n  private _type = 'min' as const;\r\n\r\n  constructor(field: number | string) {\r\n    this._field = field;\r\n  }\r\n\r\n  get field(): number | string {\r\n    return this._field;\r\n  }\r\n\r\n  get type(): string {\r\n    return this._type;\r\n  }\r\n\r\n  init() {\r\n    this._min = null;\r\n  }\r\n\r\n  accumulate(item: T) {\r\n    const val: any = (item?.hasOwnProperty(this._field)) ? item[this._field as keyof T] : null;\r\n    if (val !== null && val !== '' && !isNaN(val)) {\r\n      if (this._min === null || val < this._min) {\r\n        this._min = parseFloat(val);\r\n      }\r\n    }\r\n  }\r\n\r\n  storeResult(groupTotals: SlickGroupTotals_ & { min: Record<number | string, number | null>; }) {\r\n    if (!groupTotals || groupTotals[this._type] === undefined) {\r\n      groupTotals[this._type] = {};\r\n    }\r\n    groupTotals[this._type][this._field] = this._min;\r\n  }\r\n}\r\n\r\nexport class MaxAggregator<T = any> implements Aggregator {\r\n  private _max: number | null = null;\r\n  private _field: number | string;\r\n  private _type = 'max' as const;\r\n\r\n  constructor(field: number | string) {\r\n    this._field = field;\r\n  }\r\n\r\n  get field(): number | string {\r\n    return this._field;\r\n  }\r\n\r\n  get type(): string {\r\n    return this._type;\r\n  }\r\n\r\n  init(): void {\r\n    this._max = null;\r\n  }\r\n\r\n  accumulate(item: T) {\r\n    const val: any = (item?.hasOwnProperty(this._field)) ? item[this._field as keyof T] : null;\r\n    if (val !== null && val !== '' && !isNaN(val)) {\r\n      if (this._max === null || val > this._max) {\r\n        this._max = parseFloat(val);\r\n      }\r\n    }\r\n  }\r\n\r\n  storeResult(groupTotals: SlickGroupTotals_ & { max: Record<number | string, number | null>; }) {\r\n    if (!groupTotals || groupTotals[this._type] === undefined) {\r\n      groupTotals[this._type] = {};\r\n    }\r\n    groupTotals[this._type][this._field] = this._max;\r\n  }\r\n}\r\n\r\nexport class SumAggregator<T = any> implements Aggregator {\r\n  private _sum = 0;\r\n  private _field: number | string;\r\n  private _type = 'sum' as const;\r\n\r\n  constructor(field: number | string) {\r\n    this._field = field;\r\n  }\r\n\r\n  get field(): number | string {\r\n    return this._field;\r\n  }\r\n\r\n  get type(): string {\r\n    return this._type;\r\n  }\r\n\r\n  init() {\r\n    this._sum = 0;\r\n  }\r\n\r\n  accumulate(item: T) {\r\n    const val: any = (item?.hasOwnProperty(this._field)) ? item[this._field as keyof T] : null;\r\n    if (val !== null && val !== '' && !isNaN(val)) {\r\n      this._sum += parseFloat(val);\r\n    }\r\n  }\r\n\r\n  storeResult(groupTotals: SlickGroupTotals_ & { sum: Record<number | string, number>; }) {\r\n    if (!groupTotals || groupTotals[this._type] === undefined) {\r\n      groupTotals[this._type] = {};\r\n    }\r\n    groupTotals[this._type][this._field] = this._sum;\r\n  }\r\n}\r\n\r\nexport class CountAggregator implements Aggregator {\r\n  private _field: number | string;\r\n  private _type = 'count' as const;\r\n\r\n  constructor(field: number | string) {\r\n    this._field = field;\r\n  }\r\n\r\n  get field(): number | string {\r\n    return this._field;\r\n  }\r\n\r\n  get type(): string {\r\n    return this._type;\r\n  }\r\n\r\n  init(): void {\r\n  }\r\n\r\n  storeResult(groupTotals: SlickGroupTotals_ & { count: Record<number | string, number>; }) {\r\n    if (!groupTotals || groupTotals[this._type] === undefined) {\r\n      groupTotals[this._type] = {};\r\n    }\r\n    groupTotals[this._type][this._field] = groupTotals.group.rows.length;\r\n  }\r\n}\r\n\r\n// TODO:  add more built-in aggregators\r\n// TODO:  merge common aggregators in one to prevent needless iterating\r\n\r\nexport const Aggregators = {\r\n  Avg: AvgAggregator,\r\n  Min: MinAggregator,\r\n  Max: MaxAggregator,\r\n  Sum: SumAggregator,\r\n  Count: CountAggregator\r\n};\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  window.Slick.Data = window.Slick.Data || {};\r\n  window.Slick.Data.DataView = SlickDataView;\r\n  window.Slick.Data.Aggregators = Aggregators;\r\n}\r\n", "import type { Column, Editor, EditorArguments, EditorValidationResult, ElementPosition, GridOption, OnCompositeEditorChangeEventArgs } from './models/index.js';\r\nimport { keyCode as keyCode_, Utils as Utils_ } from './slick.core.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst keyCode = IIFE_ONLY ? Slick.keyCode : keyCode_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/***\r\n * Contains basic SlickGrid editors.\r\n * @module Editors\r\n * @namespace Slick\r\n */\r\n\r\nexport class TextEditor<TData = any, C extends Column<TData> = Column<TData>, O extends GridOption<C> = GridOption<C>> implements Editor {\r\n  protected input!: HTMLInputElement;\r\n  protected defaultValue?: number | string;\r\n  protected navOnLR?: boolean;\r\n\r\n  constructor(protected readonly args: EditorArguments<TData, C, O>) {\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.navOnLR = this.args.grid.getOptions().editorCellNavOnLRKeys;\r\n    this.input = Utils.createDomElement('input', { type: 'text', className: 'editor-text' }, this.args.container);\r\n    this.input.addEventListener('keydown', (this.navOnLR ? handleKeydownLRNav : handleKeydownLRNoNav) as EventListener);\r\n    this.input.focus();\r\n    this.input.select();\r\n\r\n    // don't show Save/Cancel when it's a Composite Editor and also trigger a onCompositeEditorChange event when input changes\r\n    if (this.args.compositeEditorOptions) {\r\n      this.input.addEventListener('change', this.onChange.bind(this));\r\n    }\r\n  }\r\n\r\n  onChange() {\r\n    const activeCell = this.args.grid.getActiveCell();\r\n\r\n    // when valid, we'll also apply the new value to the dataContext item object\r\n    if (this.validate().valid) {\r\n      this.applyValue(this.args.item, this.serializeValue());\r\n    }\r\n    this.applyValue(this.args.compositeEditorOptions.formValues, this.serializeValue());\r\n    this.args.grid.onCompositeEditorChange.notify({\r\n      row: activeCell?.row ?? 0,\r\n      cell: activeCell?.cell ?? 0,\r\n      item: this.args.item,\r\n      column: this.args.column,\r\n      formValues: this.args.compositeEditorOptions.formValues,\r\n      grid: this.args.grid,\r\n      editors: this.args.compositeEditorOptions.editors\r\n    } as unknown as OnCompositeEditorChangeEventArgs);\r\n  }\r\n\r\n  destroy() {\r\n    this.input.removeEventListener('keydown', (this.navOnLR ? handleKeydownLRNav : handleKeydownLRNoNav) as EventListener);\r\n    this.input.removeEventListener('change', this.onChange.bind(this));\r\n    this.input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.input.focus();\r\n  }\r\n\r\n  getValue() {\r\n    return this.input.value;\r\n  }\r\n\r\n  setValue(val: string) {\r\n    this.input.value = val;\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = item[this.args.column.field] || '';\r\n    this.input.value = String(this.defaultValue ?? '');\r\n    this.input.defaultValue = String(this.defaultValue ?? '');\r\n    this.input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.input.value;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.input.value === '' && !Utils.isDefined(this.defaultValue))) && (this.input.value !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    if (this.args.column.validator) {\r\n      const validationResults = this.args.column.validator(this.input.value, this.args);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n\r\nexport class IntegerEditor<TData = any, C extends Column<TData> = Column<TData>, O extends GridOption<C> = GridOption<C>> implements Editor {\r\n  protected input!: HTMLInputElement;\r\n  protected defaultValue?: string | number;\r\n  protected navOnLR?: boolean;\r\n\r\n  constructor(protected readonly args: EditorArguments<TData, C, O>) {\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.navOnLR = this.args.grid.getOptions().editorCellNavOnLRKeys;\r\n    this.input = Utils.createDomElement('input', { type: 'text', className: 'editor-text' }, this.args.container);\r\n    this.input.addEventListener('keydown', (this.navOnLR ? handleKeydownLRNav : handleKeydownLRNoNav) as EventListener);\r\n    this.input.focus();\r\n    this.input.select();\r\n\r\n    // trigger onCompositeEditorChange event when input changes and it's a Composite Editor\r\n    if (this.args.compositeEditorOptions) {\r\n      this.input.addEventListener('change', this.onChange.bind(this));\r\n    }\r\n  }\r\n\r\n  onChange() {\r\n    const activeCell = this.args.grid.getActiveCell();\r\n\r\n    // when valid, we'll also apply the new value to the dataContext item object\r\n    if (this.validate().valid) {\r\n      this.applyValue(this.args.item, this.serializeValue());\r\n    }\r\n    this.applyValue(this.args.compositeEditorOptions.formValues, this.serializeValue());\r\n    this.args.grid.onCompositeEditorChange.notify({\r\n      row: activeCell?.row ?? 0,\r\n      cell: activeCell?.cell ?? 0,\r\n      item: this.args.item,\r\n      column: this.args.column,\r\n      formValues: this.args.compositeEditorOptions.formValues,\r\n      grid: this.args.grid,\r\n      editors: this.args.compositeEditorOptions.editors\r\n    } as unknown as OnCompositeEditorChangeEventArgs);\r\n  }\r\n\r\n  destroy() {\r\n    this.input.removeEventListener('keydown', (this.navOnLR ? handleKeydownLRNav : handleKeydownLRNoNav) as EventListener);\r\n    this.input.removeEventListener('change', this.onChange.bind(this));\r\n    this.input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.input.focus();\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = item[this.args.column.field];\r\n    this.input.value = String(this.defaultValue ?? '');\r\n    this.input.defaultValue = String(this.defaultValue ?? '');\r\n    this.input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return parseInt(this.input.value, 10) || 0;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.input.value === '' && !Utils.isDefined(this.defaultValue))) && (this.input.value !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    if (isNaN(this.input.value as unknown as number)) {\r\n      return {\r\n        valid: false,\r\n        msg: 'Please enter a valid integer'\r\n      };\r\n    }\r\n\r\n    if (this.args.column.validator) {\r\n      const validationResults = this.args.column.validator(this.input.value, this.args);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n\r\nexport class FloatEditor<TData = any, C extends Column<TData> = Column<TData>, O extends GridOption<C> = GridOption<C>> implements Editor {\r\n  protected input!: HTMLInputElement;\r\n  protected defaultValue?: string | number;\r\n  protected navOnLR?: boolean;\r\n\r\n  /** Default number of decimal places to use with FloatEditor */\r\n  static DefaultDecimalPlaces?: number = undefined;\r\n\r\n  /** Should we allow empty value when using FloatEditor */\r\n  static AllowEmptyValue = false;\r\n\r\n  constructor(protected readonly args: EditorArguments<TData, C, O>) {\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.navOnLR = this.args.grid.getOptions().editorCellNavOnLRKeys;\r\n    this.input = Utils.createDomElement('input', { type: 'text', className: 'editor-text' }, this.args.container);\r\n    this.input.addEventListener('keydown', (this.navOnLR ? handleKeydownLRNav : handleKeydownLRNoNav) as EventListener);\r\n    this.input.focus();\r\n    this.input.select();\r\n\r\n    // trigger onCompositeEditorChange event when input changes and it's a Composite Editor\r\n    if (this.args.compositeEditorOptions) {\r\n      this.input.addEventListener('change', this.onChange.bind(this));\r\n    }\r\n  };\r\n\r\n  onChange() {\r\n    const activeCell = this.args.grid.getActiveCell();\r\n\r\n    // when valid, we'll also apply the new value to the dataContext item object\r\n    if (this.validate().valid) {\r\n      this.applyValue(this.args.item, this.serializeValue());\r\n    }\r\n    this.applyValue(this.args.compositeEditorOptions.formValues, this.serializeValue());\r\n    this.args.grid.onCompositeEditorChange.notify({\r\n      row: activeCell?.row ?? 0,\r\n      cell: activeCell?.cell ?? 0,\r\n      item: this.args.item,\r\n      column: this.args.column,\r\n      formValues: this.args.compositeEditorOptions.formValues,\r\n      grid: this.args.grid,\r\n      editors: this.args.compositeEditorOptions.editors\r\n    } as unknown as OnCompositeEditorChangeEventArgs);\r\n  };\r\n\r\n  destroy() {\r\n    this.input.removeEventListener('keydown', (this.navOnLR ? handleKeydownLRNav : handleKeydownLRNoNav) as EventListener);\r\n    this.input.removeEventListener('change', this.onChange.bind(this));\r\n    this.input.remove();\r\n  };\r\n\r\n  focus() {\r\n    this.input.focus();\r\n  }\r\n\r\n  getDecimalPlaces() {\r\n    // returns the number of fixed decimal places or null\r\n    let rtn: number | undefined = this.args.column.editorFixedDecimalPlaces;\r\n    if (!Utils.isDefined(rtn)) {\r\n      rtn = FloatEditor.DefaultDecimalPlaces;\r\n    }\r\n    return (!rtn && rtn !== 0 ? null : rtn);\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = item[this.args.column.field];\r\n\r\n    const decPlaces = this.getDecimalPlaces();\r\n    if (decPlaces !== null\r\n      && (this.defaultValue || this.defaultValue === 0)\r\n      && (this.defaultValue as number)?.toFixed) {\r\n      this.defaultValue = (this.defaultValue as number).toFixed(decPlaces);\r\n    }\r\n\r\n    this.input.value = String(this.defaultValue ?? '');\r\n    this.input.defaultValue = String(this.defaultValue ?? '');\r\n    this.input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    let rtn: number | undefined = parseFloat(this.input.value);\r\n    if (FloatEditor.AllowEmptyValue) {\r\n      if (!rtn && rtn !== 0) {\r\n        rtn = undefined;\r\n      }\r\n    } else {\r\n      rtn = rtn || 0;\r\n    }\r\n\r\n    const decPlaces = this.getDecimalPlaces();\r\n    if (decPlaces !== null\r\n      && (rtn || rtn === 0)\r\n      && rtn.toFixed) {\r\n      rtn = parseFloat(rtn.toFixed(decPlaces));\r\n    }\r\n\r\n    return rtn as number;\r\n  }\r\n\r\n  applyValue(item: any, state: number | string) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.input.value === '' && !Utils.isDefined(this.defaultValue))) && (this.input.value !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    if (isNaN(this.input.value as unknown as number)) {\r\n      return {\r\n        valid: false,\r\n        msg: 'Please enter a valid number'\r\n      };\r\n    }\r\n\r\n    if (this.args.column.validator) {\r\n      const validationResults = this.args.column.validator(this.input.value, this.args);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n\r\nexport class FlatpickrEditor<TData = any, C extends Column<TData> = Column<TData>, O extends GridOption<C> = GridOption<C>> implements Editor {\r\n  protected input!: HTMLInputElement;\r\n  protected defaultValue?: string | number;\r\n  protected flatpickrInstance: any;\r\n\r\n  constructor(protected readonly args: EditorArguments<TData, C, O>) {\r\n    this.init();\r\n    if (typeof flatpickr === 'undefined') {\r\n      throw new Error('Flatpickr not loaded but required in SlickGrid.Editors, refer to Flatpickr documentation: https://flatpickr.js.org/getting-started/');\r\n    }\r\n  }\r\n\r\n  init() {\r\n    this.input = Utils.createDomElement('input', { type: 'text', className: 'editor-text' }, this.args.container);\r\n    this.input.focus();\r\n    this.input.select();\r\n    const editorOptions = this.args.column.params?.editorOptions; // i.e.: { id: 'start', params: { editorOptions: {altFormat: 'd/m/Y', dateFormat: 'd/m/Y'}} }\r\n    this.flatpickrInstance = flatpickr(this.input, {\r\n      closeOnSelect: true,\r\n      allowInput: true,\r\n      altInput: true,\r\n      altFormat: editorOptions?.altFormat ?? 'm/d/Y',\r\n      dateFormat: editorOptions?.dateFormat ?? 'm/d/Y',\r\n      onChange: () => {\r\n        // trigger onCompositeEditorChange event when input changes and it's a Composite Editor\r\n        if (this.args.compositeEditorOptions) {\r\n          const activeCell = this.args.grid.getActiveCell();\r\n\r\n          // when valid, we'll also apply the new value to the dataContext item object\r\n          if (this.validate().valid) {\r\n            this.applyValue(this.args.item, this.serializeValue());\r\n          }\r\n          this.applyValue(this.args.compositeEditorOptions.formValues, this.serializeValue());\r\n          this.args.grid.onCompositeEditorChange.notify({\r\n            row: activeCell?.row ?? 0,\r\n            cell: activeCell?.cell ?? 0,\r\n            item: this.args.item,\r\n            column: this.args.column,\r\n            formValues: this.args.compositeEditorOptions.formValues,\r\n            grid: this.args.grid,\r\n            editors: this.args.compositeEditorOptions.editors\r\n          } as unknown as OnCompositeEditorChangeEventArgs);\r\n        }\r\n      },\r\n    });\r\n\r\n    if (!this.args.compositeEditorOptions) {\r\n      window.setTimeout(() => {\r\n        this.show();\r\n        this.focus();\r\n      }, 50);\r\n    }\r\n\r\n    Utils.width(this.input, (Utils.width(this.input) as number) - (!this.args.compositeEditorOptions ? 18 : 28));\r\n  }\r\n\r\n  destroy() {\r\n    this.hide();\r\n    if (this.flatpickrInstance) {\r\n      this.flatpickrInstance.destroy();\r\n    }\r\n    this.input.remove();\r\n  }\r\n\r\n  show() {\r\n    if (!this.args.compositeEditorOptions && this.flatpickrInstance) {\r\n      this.flatpickrInstance.open();\r\n    }\r\n  }\r\n\r\n  hide() {\r\n    if (!this.args.compositeEditorOptions && this.flatpickrInstance) {\r\n      this.flatpickrInstance.close();\r\n    }\r\n  }\r\n\r\n  focus() {\r\n    this.input.focus();\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = item[this.args.column.field];\r\n    this.input.value = String(this.defaultValue ?? '');\r\n    this.input.defaultValue = String(this.defaultValue ?? '');\r\n    this.input.select();\r\n    if (this.flatpickrInstance) {\r\n      this.flatpickrInstance.setDate(this.defaultValue);\r\n    }\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.input.value;\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.input.value === '' && !Utils.isDefined(this.defaultValue))) && (this.input.value !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    if (this.args.column.validator) {\r\n      const validationResults = this.args.column.validator(this.input.value, this.args);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n\r\nexport class YesNoSelectEditor<TData = any, C extends Column<TData> = Column<TData>, O extends GridOption<C> = GridOption<C>> implements Editor {\r\n  protected select!: HTMLSelectElement;\r\n  protected defaultValue?: string | number;\r\n\r\n  constructor(protected readonly args: EditorArguments<TData, C, O>) {\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.select = Utils.createDomElement('select', { tabIndex: 0, className: 'editor-yesno' }, this.args.container);\r\n    Utils.createDomElement('option', { value: 'yes', textContent: 'Yes' }, this.select);\r\n    Utils.createDomElement('option', { value: 'no', textContent: 'No' }, this.select);\r\n\r\n    this.select.focus();\r\n\r\n    // trigger onCompositeEditorChange event when input changes and it's a Composite Editor\r\n    if (this.args.compositeEditorOptions) {\r\n      this.select.addEventListener('change', this.onChange.bind(this));\r\n    }\r\n  }\r\n\r\n  onChange() {\r\n    const activeCell = this.args.grid.getActiveCell();\r\n\r\n    // when valid, we'll also apply the new value to the dataContext item object\r\n    if (this.validate().valid) {\r\n      this.applyValue(this.args.item, this.serializeValue());\r\n    }\r\n    this.applyValue(this.args.compositeEditorOptions.formValues, this.serializeValue());\r\n    this.args.grid.onCompositeEditorChange.notify({\r\n      row: activeCell?.row ?? 0,\r\n      cell: activeCell?.cell ?? 0,\r\n      item: this.args.item,\r\n      column: this.args.column,\r\n      formValues: this.args.compositeEditorOptions.formValues,\r\n      grid: this.args.grid,\r\n      editors: this.args.compositeEditorOptions.editors\r\n    } as unknown as OnCompositeEditorChangeEventArgs);\r\n  }\r\n\r\n  destroy() {\r\n    this.select.removeEventListener('change', this.onChange.bind(this));\r\n    this.select.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.select.focus();\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.select.value = ((this.defaultValue = item[this.args.column.field]) ? 'yes' : 'no');\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.select.value === 'yes';\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return this.select.value !== this.defaultValue;\r\n  }\r\n\r\n  validate() {\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n\r\nexport class CheckboxEditor<TData = any, C extends Column<TData> = Column<TData>, O extends GridOption<C> = GridOption<C>> implements Editor {\r\n  protected input!: HTMLInputElement;\r\n  protected defaultValue?: boolean;\r\n\r\n  constructor(protected readonly args: EditorArguments<TData, C, O>) {\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.input = Utils.createDomElement('input', { className: 'editor-checkbox', type: 'checkbox', value: 'true' }, this.args.container);\r\n    this.input.focus();\r\n\r\n    // trigger onCompositeEditorChange event when input checkbox changes and it's a Composite Editor\r\n    if (this.args.compositeEditorOptions) {\r\n      this.input.addEventListener('change', this.onChange.bind(this));\r\n    }\r\n  };\r\n\r\n  onChange() {\r\n    const activeCell = this.args.grid.getActiveCell();\r\n\r\n    // when valid, we'll also apply the new value to the dataContext item object\r\n    if (this.validate().valid) {\r\n      this.applyValue(this.args.item, this.serializeValue());\r\n    }\r\n    this.applyValue(this.args.compositeEditorOptions.formValues, this.serializeValue());\r\n    this.args.grid.onCompositeEditorChange.notify({\r\n      row: activeCell?.row ?? 0,\r\n      cell: activeCell?.cell ?? 0,\r\n      item: this.args.item,\r\n      column: this.args.column,\r\n      formValues: this.args.compositeEditorOptions.formValues,\r\n      grid: this.args.grid,\r\n      editors: this.args.compositeEditorOptions.editors\r\n    } as unknown as OnCompositeEditorChangeEventArgs);\r\n  };\r\n\r\n  destroy() {\r\n    this.input.removeEventListener('change', this.onChange.bind(this));\r\n    this.input.remove();\r\n  };\r\n\r\n  focus() {\r\n    this.input.focus();\r\n  };\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = !!(item[this.args.column.field]);\r\n    if (this.defaultValue) {\r\n      this.input.checked = true;\r\n    } else {\r\n      this.input.checked = false;\r\n    }\r\n  };\r\n\r\n  serializeValue() {\r\n    return this.input.checked;\r\n  };\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (this.serializeValue() !== this.defaultValue);\r\n  }\r\n\r\n  validate(): EditorValidationResult {\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n\r\nexport class PercentCompleteEditor<TData = any, C extends Column<TData> = Column<TData>, O extends GridOption<C> = GridOption<C>> implements Editor {\r\n  protected input!: HTMLInputElement;\r\n  protected defaultValue?: number;\r\n  protected picker!: HTMLDivElement;\r\n  protected slider!: HTMLInputElement | null;\r\n\r\n  constructor(protected readonly args: EditorArguments<TData, C, O>) {\r\n    this.init();\r\n  }\r\n\r\n  sliderInputHandler(e: MouseEvent & { target: HTMLButtonElement }) {\r\n    this.input.value = e.target.value;\r\n  }\r\n\r\n  sliderChangeHandler() {\r\n    // trigger onCompositeEditorChange event when slider stops and it's a Composite Editor\r\n    if (this.args.compositeEditorOptions) {\r\n      const activeCell = this.args.grid.getActiveCell();\r\n\r\n      // when valid, we'll also apply the new value to the dataContext item object\r\n      if (this.validate().valid) {\r\n        this.applyValue(this.args.item, this.serializeValue());\r\n      }\r\n      this.applyValue(this.args.compositeEditorOptions.formValues, this.serializeValue());\r\n      this.args.grid.onCompositeEditorChange.notify({\r\n        row: activeCell?.row ?? 0,\r\n        cell: activeCell?.cell ?? 0,\r\n        item: this.args.item,\r\n        column: this.args.column,\r\n        formValues: this.args.compositeEditorOptions.formValues,\r\n        grid: this.args.grid,\r\n        editors: this.args.compositeEditorOptions.editors\r\n      } as unknown as OnCompositeEditorChangeEventArgs);\r\n    }\r\n  }\r\n\r\n  init() {\r\n    this.input = Utils.createDomElement('input', { className: 'editor-percentcomplete', type: 'text' }, this.args.container);\r\n    Utils.width(this.input, this.args.container.clientWidth - 25);\r\n\r\n    this.picker = Utils.createDomElement('div', { className: 'editor-percentcomplete-picker' }, this.args.container);\r\n    Utils.createDomElement('span', { className: 'editor-percentcomplete-picker-icon' }, this.picker);\r\n    const containerHelper = Utils.createDomElement('div', { className: 'editor-percentcomplete-helper' }, this.picker);\r\n    const containerWrapper = Utils.createDomElement('div', { className: 'editor-percentcomplete-wrapper' }, containerHelper);\r\n    Utils.createDomElement('div', { className: 'editor-percentcomplete-slider' }, containerWrapper);\r\n    this.slider = Utils.createDomElement('input', { className: 'editor-percentcomplete-slider', type: 'range', value: String(this.defaultValue ?? '') }, containerWrapper);\r\n    const containerButtons = Utils.createDomElement('div', { className: 'editor-percentcomplete-buttons' }, containerWrapper);\r\n    Utils.createDomElement('button', { value: '0', className: 'slick-btn slick-btn-default', textContent: 'Not started' }, containerButtons);\r\n    containerButtons.appendChild(document.createElement('br'));\r\n    Utils.createDomElement('button', { value: '50', className: 'slick-btn slick-btn-default', textContent: 'In Progress' }, containerButtons);\r\n    containerButtons.appendChild(document.createElement('br'));\r\n    Utils.createDomElement('button', { value: '100', className: 'slick-btn slick-btn-default', textContent: 'Complete' }, containerButtons);\r\n\r\n    this.input.focus();\r\n    this.input.select();\r\n\r\n    this.slider.addEventListener('input', this.sliderInputHandler.bind(this) as EventListener);\r\n    this.slider.addEventListener('change', this.sliderChangeHandler.bind(this));\r\n\r\n    const buttons = this.picker.querySelectorAll('.editor-percentcomplete-buttons button');\r\n    [].forEach.call(buttons, (button: HTMLButtonElement) => {\r\n      button.addEventListener('click', this.onClick.bind(this) as EventListener);\r\n    });\r\n  };\r\n\r\n  onClick(e: MouseEvent & { target: HTMLButtonElement }) {\r\n    this.input.value = String(e.target.value ?? '');\r\n    this.slider!.value = String(e.target.value ?? '');\r\n  };\r\n\r\n  destroy() {\r\n    this.slider?.removeEventListener('input', this.sliderInputHandler.bind(this) as EventListener);\r\n    this.slider?.removeEventListener('change', this.sliderChangeHandler.bind(this));\r\n    this.picker.querySelectorAll('.editor-percentcomplete-buttons button')\r\n      .forEach(button => button.removeEventListener('click', this.onClick.bind(this) as EventListener));\r\n    this.input.remove();\r\n    this.picker.remove();\r\n  };\r\n\r\n  focus() {\r\n    this.input.focus();\r\n  };\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = item[this.args.column.field];\r\n    this.slider!.value = String(this.defaultValue ?? '');\r\n    this.input.value = String(this.defaultValue);\r\n    this.input.select();\r\n  };\r\n\r\n  serializeValue() {\r\n    return parseInt(this.input.value, 10) || 0;\r\n  };\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  };\r\n\r\n  isValueChanged() {\r\n    return (!(this.input.value === '' && !Utils.isDefined(this.defaultValue))) && ((parseInt(this.input.value as any, 10) || 0) !== this.defaultValue);\r\n  };\r\n\r\n  validate(): EditorValidationResult {\r\n    if (isNaN(parseInt(this.input.value, 10))) {\r\n      return {\r\n        valid: false,\r\n        msg: 'Please enter a valid positive number'\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  };\r\n}\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * The UI is added onto document BODY and .position(), .show() and .hide() are implemented.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class LongTextEditor<TData = any, C extends Column<TData> = Column<TData>, O extends GridOption<C> = GridOption<C>> implements Editor {\r\n  protected input!: HTMLTextAreaElement;\r\n  protected wrapper!: HTMLDivElement;\r\n  protected defaultValue?: string;\r\n  protected selectionStart = 0;\r\n\r\n  constructor(protected readonly args: EditorArguments<TData, C, O>) {\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    const compositeEditorOptions = this.args.compositeEditorOptions;\r\n    this.args.grid.getOptions().editorCellNavOnLRKeys;\r\n    const container = compositeEditorOptions ? this.args.container : document.body;\r\n\r\n    this.wrapper = Utils.createDomElement('div', { className: 'slick-large-editor-text' }, container);\r\n    if (compositeEditorOptions) {\r\n      this.wrapper.style.position = 'relative';\r\n      Utils.setStyleSize(this.wrapper, 'padding', 0);\r\n      Utils.setStyleSize(this.wrapper, 'border', 0);\r\n    } else {\r\n      this.wrapper.style.position = 'absolute';\r\n    }\r\n\r\n    this.input = Utils.createDomElement('textarea', { rows: 5, style: { background: 'white', width: '250px', height: '80px', border: '0', outline: '0' } }, this.wrapper);\r\n\r\n    // trigger onCompositeEditorChange event when input changes and it's a Composite Editor\r\n    if (compositeEditorOptions) {\r\n      this.input.addEventListener('change', this.onChange.bind(this));\r\n    } else {\r\n      const btnContainer = Utils.createDomElement('div', { style: 'text-align:right' }, this.wrapper);\r\n      Utils.createDomElement('button', { id: 'save', className: 'slick-btn slick-btn-primary', textContent: 'Save' }, btnContainer);\r\n      Utils.createDomElement('button', { id: 'cancel', className: 'slick-btn slick-btn-default', textContent: 'Cancel' }, btnContainer);\r\n\r\n      this.wrapper.querySelector('#save')!.addEventListener('click', this.save.bind(this));\r\n      this.wrapper.querySelector('#cancel')!.addEventListener('click', this.cancel.bind(this));\r\n      this.input.addEventListener('keydown', this.handleKeyDown.bind(this) as EventListener);\r\n      this.position(this.args.position as ElementPosition);\r\n    }\r\n\r\n    this.input.focus();\r\n    this.input.select();\r\n  };\r\n\r\n  onChange() {\r\n    const activeCell = this.args.grid.getActiveCell();\r\n\r\n    // when valid, we'll also apply the new value to the dataContext item object\r\n    if (this.validate().valid) {\r\n      this.applyValue(this.args.item, this.serializeValue());\r\n    }\r\n    this.applyValue(this.args.compositeEditorOptions.formValues, this.serializeValue());\r\n    this.args.grid.onCompositeEditorChange.notify({\r\n      row: activeCell?.row ?? 0,\r\n      cell: activeCell?.cell ?? 0,\r\n      item: this.args.item,\r\n      column: this.args.column,\r\n      formValues: this.args.compositeEditorOptions.formValues,\r\n      grid: this.args.grid,\r\n      editors: this.args.compositeEditorOptions.editors\r\n    } as unknown as OnCompositeEditorChangeEventArgs);\r\n  };\r\n\r\n  handleKeyDown(e: KeyboardEvent & { target: HTMLInputElement }) {\r\n    if (e.which === keyCode.ENTER && e.ctrlKey) {\r\n      this.save();\r\n    } else if (e.which === keyCode.ESCAPE) {\r\n      e.preventDefault();\r\n      this.cancel();\r\n    } else if (e.which === keyCode.TAB && e.shiftKey) {\r\n      e.preventDefault();\r\n      this.args.grid.navigatePrev();\r\n    } else if (e.which === keyCode.TAB) {\r\n      e.preventDefault();\r\n      this.args.grid.navigateNext();\r\n    } else if (e.which === keyCode.LEFT || e.which === keyCode.RIGHT) {\r\n      if (this.args.grid.getOptions().editorCellNavOnLRKeys) {\r\n        const cursorPosition = this.selectionStart;\r\n        const textLength = e.target.value.length;\r\n        if (e.keyCode === keyCode.LEFT && cursorPosition === 0) {\r\n          this.args.grid.navigatePrev();\r\n        }\r\n        if (e.keyCode === keyCode.RIGHT && cursorPosition >= textLength - 1) {\r\n          this.args.grid.navigateNext();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  save() {\r\n    const gridOptions = this.args.grid.getOptions() || {};\r\n    if (gridOptions.autoCommitEdit) {\r\n      this.args.grid.getEditorLock().commitCurrentEdit();\r\n    } else {\r\n      this.args.commitChanges();\r\n    }\r\n  };\r\n\r\n  cancel() {\r\n    this.input.value = String(this.defaultValue ?? '');\r\n    this.args.cancelChanges();\r\n  };\r\n\r\n  hide() {\r\n    Utils.hide(this.wrapper);\r\n  };\r\n\r\n  show() {\r\n    Utils.show(this.wrapper);\r\n  };\r\n\r\n  position(position: ElementPosition) {\r\n    Utils.setStyleSize(this.wrapper, 'top', (position.top || 0) - 5);\r\n    Utils.setStyleSize(this.wrapper, 'left', (position.left || 0) - 2);\r\n  };\r\n\r\n  destroy() {\r\n    if (this.args.compositeEditorOptions) {\r\n      this.input.removeEventListener('change', this.onChange.bind(this));\r\n    } else {\r\n      this.wrapper.querySelector('#save')!.removeEventListener('click', this.save.bind(this));\r\n      this.wrapper.querySelector('#cancel')!.removeEventListener('click', this.cancel.bind(this));\r\n      this.input.removeEventListener('keydown', this.handleKeyDown.bind(this) as EventListener);\r\n    }\r\n    this.wrapper.remove();\r\n  };\r\n\r\n  focus() {\r\n    this.input.focus();\r\n  };\r\n\r\n  loadValue(item: any) {\r\n    this.input.value = this.defaultValue = item[this.args.column.field];\r\n    this.input.select();\r\n  };\r\n\r\n  serializeValue() {\r\n    return this.input.value;\r\n  };\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  };\r\n\r\n  isValueChanged() {\r\n    return (!(this.input.value === '' && !Utils.isDefined(this.defaultValue))) && (this.input.value !== this.defaultValue);\r\n  };\r\n\r\n  validate() {\r\n    if (this.args.column.validator) {\r\n      const validationResults = this.args.column.validator(this.input.value, this.args);\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  };\r\n}\r\n\r\n/*\r\n * Depending on the value of Grid option 'editorCellNavOnLRKeys', us\r\n * Navigate to the cell on the left if the cursor is at the beginning of the input string\r\n * and to the right cell if it's at the end. Otherwise, move the cursor within the text\r\n */\r\nfunction handleKeydownLRNav(e: KeyboardEvent & { target: HTMLInputElement; selectionStart: number; }) {\r\n  const cursorPosition = e.selectionStart;\r\n  const textLength = e.target.value.length;\r\n  if ((e.keyCode === keyCode.LEFT && cursorPosition > 0) ||\r\n    e.keyCode === keyCode.RIGHT && cursorPosition < textLength - 1) {\r\n    e.stopImmediatePropagation();\r\n  }\r\n}\r\n\r\nfunction handleKeydownLRNoNav(e: KeyboardEvent) {\r\n  if (e.keyCode === keyCode.LEFT || e.keyCode === keyCode.RIGHT) {\r\n    e.stopImmediatePropagation();\r\n  }\r\n}\r\n\r\nexport const Editors = {\r\n  Text: TextEditor,\r\n  Integer: IntegerEditor,\r\n  Float: FloatEditor,\r\n  Flatpickr: FlatpickrEditor,\r\n  YesNoSelect: YesNoSelectEditor,\r\n  Checkbox: CheckboxEditor,\r\n  PercentComplete: PercentCompleteEditor,\r\n  LongText: LongTextEditor\r\n};\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(Slick, {\r\n    Editors\r\n  });\r\n}\r\n\r\n", "import type { Formatter } from './models/index.js';\r\nimport { Utils as Utils_ } from './slick.core.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/***\r\n * Contains basic SlickGrid formatters.\r\n *\r\n * NOTE:  These are merely examples.  You will most likely need to implement something more\r\n *        robust/extensible/localizable/etc. for your use!\r\n *\r\n * @module Formatters\r\n * @namespace Slick\r\n */\r\n\r\nexport const PercentCompleteFormatter: Formatter = (_row, _cell, value) => {\r\n  if (!Utils.isDefined(value) || value === '') {\r\n    return '-';\r\n  } else if (value < 50) {\r\n    return `<span style=\"color:red;font-weight:bold;\">${value}%</span>`;\r\n  } else {\r\n    return `<span style=\"color:green\">${value}%</span>`;\r\n  }\r\n};\r\n\r\nexport const PercentCompleteBarFormatter: Formatter = (_row, _cell, value) => {\r\n  if (!Utils.isDefined(value) || value === '') {\r\n    return '';\r\n  }\r\n\r\n  let color;\r\n\r\n  if (value < 30) {\r\n    color = 'red';\r\n  } else if (value < 70) {\r\n    color = 'silver';\r\n  } else {\r\n    color = 'green';\r\n  }\r\n\r\n  return `<span class=\"percent-complete-bar\" style=\"background:${color};width:${value}%\" title=\"${value}%\"></span>`;\r\n};\r\n\r\nexport const YesNoFormatter: Formatter = (_row, _cell, value) => {\r\n  return value ? 'Yes' : 'No';\r\n};\r\n\r\nexport const CheckboxFormatter: Formatter = (_row, _cell, value) => {\r\n  return `<span class=\"sgi sgi-checkbox-${value ? 'intermediate' : 'blank-outline'}\"></span>`;\r\n};\r\n\r\nexport const CheckmarkFormatter: Formatter = (_row, _cell, value) => {\r\n  return value ? `<span class=\"sgi sgi-check\"></span>` : '';\r\n};\r\n\r\nexport const Formatters = {\r\n  PercentComplete: PercentCompleteFormatter,\r\n  PercentCompleteBar: PercentCompleteBarFormatter,\r\n  YesNo: YesNoFormatter,\r\n  Checkmark: CheckmarkFormatter,\r\n  Checkbox: CheckboxFormatter\r\n};\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(Slick, {\r\n    Formatters\r\n  });\r\n}\r\n\r\n", "// @ts-ignore\r\nimport type SortableInstance from 'sortablejs';\r\n\r\nimport type {\r\n  AutoSize,\r\n  CellPosition,\r\n  CellViewportRange,\r\n  Column,\r\n  ColumnMetadata,\r\n  ColumnSort,\r\n  CssStyleHash,\r\n  CSSStyleDeclarationWritable,\r\n  CustomDataView,\r\n  DOMEvent,\r\n  DragPosition,\r\n  DragRowMove,\r\n  Editor,\r\n  EditorArguments,\r\n  EditorConstructor,\r\n  EditController,\r\n  Formatter,\r\n  FormatterOverrideCallback,\r\n  FormatterResultObject,\r\n  FormatterResultWithHtml,\r\n  FormatterResultWithText,\r\n  GridOption as BaseGridOption,\r\n  InteractionBase,\r\n  ItemMetadata,\r\n  MenuCommandItemCallbackArgs,\r\n  MultiColumnSort,\r\n  OnActivateChangedOptionsEventArgs,\r\n  OnActiveCellChangedEventArgs,\r\n  OnAddNewRowEventArgs,\r\n  OnAutosizeColumnsEventArgs,\r\n  OnBeforeUpdateColumnsEventArgs,\r\n  OnBeforeAppendCellEventArgs,\r\n  OnBeforeCellEditorDestroyEventArgs,\r\n  OnBeforeColumnsResizeEventArgs,\r\n  OnBeforeEditCellEventArgs,\r\n  OnBeforeHeaderCellDestroyEventArgs,\r\n  OnBeforeHeaderRowCellDestroyEventArgs,\r\n  OnBeforeFooterRowCellDestroyEventArgs,\r\n  OnBeforeSetColumnsEventArgs,\r\n  OnCellChangeEventArgs,\r\n  OnCellCssStylesChangedEventArgs,\r\n  OnClickEventArgs,\r\n  OnColumnsDragEventArgs,\r\n  OnColumnsReorderedEventArgs,\r\n  OnColumnsResizedEventArgs,\r\n  OnColumnsResizeDblClickEventArgs,\r\n  OnCompositeEditorChangeEventArgs,\r\n  OnDblClickEventArgs,\r\n  OnFooterContextMenuEventArgs,\r\n  OnFooterRowCellRenderedEventArgs,\r\n  OnHeaderCellRenderedEventArgs,\r\n  OnFooterClickEventArgs,\r\n  OnHeaderClickEventArgs,\r\n  OnHeaderContextMenuEventArgs,\r\n  OnHeaderMouseEventArgs,\r\n  OnHeaderRowCellRenderedEventArgs,\r\n  OnKeyDownEventArgs,\r\n  OnPreHeaderContextMenuEventArgs,\r\n  OnPreHeaderClickEventArgs,\r\n  OnRenderedEventArgs,\r\n  OnSelectedRowsChangedEventArgs,\r\n  OnSetOptionsEventArgs,\r\n  OnScrollEventArgs,\r\n  OnValidationErrorEventArgs,\r\n  PagingInfo,\r\n  RowInfo,\r\n  SelectionModel,\r\n  SingleColumnSort,\r\n  SlickGridModel,\r\n  SlickPlugin,\r\n} from './models/index.js';\r\nimport {\r\n  type BasePubSub,\r\n  BindingEventService as BindingEventService_,\r\n  ColAutosizeMode as ColAutosizeMode_,\r\n  GlobalEditorLock as GlobalEditorLock_,\r\n  GridAutosizeColsMode as GridAutosizeColsMode_,\r\n  keyCode as keyCode_,\r\n  preClickClassName as preClickClassName_,\r\n  RowSelectionMode as RowSelectionMode_,\r\n  type SlickEditorLock,\r\n  SlickEvent as SlickEvent_,\r\n  SlickEventData as SlickEventData_,\r\n  SlickRange as SlickRange_,\r\n  Utils as Utils_,\r\n  ValueFilterMode as ValueFilterMode_,\r\n  WidthEvalMode as WidthEvalMode_,\r\n} from './slick.core.js';\r\nimport { Draggable as Draggable_, MouseWheel as MouseWheel_, Resizable as Resizable_ } from './slick.interactions.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\r\nconst ColAutosizeMode = IIFE_ONLY ? Slick.ColAutosizeMode : ColAutosizeMode_;\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst SlickEventData = IIFE_ONLY ? Slick.EventData : SlickEventData_;\r\nconst GlobalEditorLock = IIFE_ONLY ? Slick.GlobalEditorLock : GlobalEditorLock_;\r\nconst GridAutosizeColsMode = IIFE_ONLY ? Slick.GridAutosizeColsMode : GridAutosizeColsMode_;\r\nconst keyCode = IIFE_ONLY ? Slick.keyCode : keyCode_;\r\nconst preClickClassName = IIFE_ONLY ? Slick.preClickClassName : preClickClassName_;\r\nconst SlickRange = IIFE_ONLY ? Slick.Range : SlickRange_;\r\nconst RowSelectionMode = IIFE_ONLY ? Slick.RowSelectionMode : RowSelectionMode_;\r\nconst ValueFilterMode = IIFE_ONLY ? Slick.ValueFilterMode : ValueFilterMode_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\nconst WidthEvalMode = IIFE_ONLY ? Slick.WidthEvalMode : WidthEvalMode_;\r\nconst Draggable = IIFE_ONLY ? Slick.Draggable : Draggable_;\r\nconst MouseWheel = IIFE_ONLY ? Slick.MouseWheel : MouseWheel_;\r\nconst Resizable = IIFE_ONLY ? Slick.Resizable : Resizable_;\r\n\r\n/**\r\n * @license\r\n * (c) 2009-present Michael Leibman\r\n * michael{dot}leibman{at}gmail{dot}com\r\n * http://github.com/mleibman/slickgrid\r\n *\r\n * Distributed under MIT license.\r\n * All rights reserved.\r\n *\r\n * SlickGrid v5.15.0\r\n *\r\n * NOTES:\r\n *     Cell/row DOM manipulations are done directly bypassing JS DOM manipulation methods.\r\n *     This increases the speed dramatically, but can only be done safely because there are no event handlers\r\n *     or data associated with any cell/row DOM nodes.  Cell editors must make sure they implement .destroy()\r\n *     and do proper cleanup.\r\n */\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////\r\n// SlickGrid class implementation (available as SlickGrid)\r\n\r\ninterface RowCaching {\r\n  rowNode: HTMLElement[] | null,\r\n  cellColSpans: Array<number | '*'>;\r\n  cellNodesByColumnIdx: HTMLElement[];\r\n  cellRenderQueue: any[];\r\n}\r\n\r\nexport class SlickGrid<TData = any, C extends Column<TData> = Column<TData>, O extends BaseGridOption<C> = BaseGridOption<C>> {\r\n  //////////////////////////////////////////////////////////////////////////////////////////////\r\n  // Public API\r\n  slickGridVersion = '5.15.0';\r\n\r\n  /** optional grid state clientId */\r\n  cid = '';\r\n\r\n  // Events\r\n  onActiveCellChanged: SlickEvent_<OnActiveCellChangedEventArgs>;\r\n  onActiveCellPositionChanged: SlickEvent_<{ grid: SlickGrid; }>;\r\n  onAddNewRow: SlickEvent_<OnAddNewRowEventArgs>;\r\n  onAutosizeColumns: SlickEvent_<OnAutosizeColumnsEventArgs>;\r\n  onBeforeAppendCell: SlickEvent_<OnBeforeAppendCellEventArgs>;\r\n  onBeforeCellEditorDestroy: SlickEvent_<OnBeforeCellEditorDestroyEventArgs>;\r\n  onBeforeColumnsResize: SlickEvent_<OnBeforeColumnsResizeEventArgs>;\r\n  onBeforeDestroy: SlickEvent_<{ grid: SlickGrid; }>;\r\n  onBeforeEditCell: SlickEvent_<OnBeforeEditCellEventArgs>;\r\n  onBeforeFooterRowCellDestroy: SlickEvent_<OnBeforeFooterRowCellDestroyEventArgs>;\r\n  onBeforeHeaderCellDestroy: SlickEvent_<OnBeforeHeaderCellDestroyEventArgs>;\r\n  onBeforeHeaderRowCellDestroy: SlickEvent_<OnBeforeHeaderRowCellDestroyEventArgs>;\r\n  onBeforeSetColumns: SlickEvent_<OnBeforeSetColumnsEventArgs>;\r\n  onBeforeSort: SlickEvent_<SingleColumnSort | MultiColumnSort>;\r\n  onBeforeUpdateColumns: SlickEvent_<OnBeforeUpdateColumnsEventArgs>;\r\n  onCellChange: SlickEvent_<OnCellChangeEventArgs>;\r\n  onCellCssStylesChanged: SlickEvent_<OnCellCssStylesChangedEventArgs>;\r\n  onClick: SlickEvent_<OnClickEventArgs>;\r\n  onColumnsReordered: SlickEvent_<OnColumnsReorderedEventArgs>;\r\n  onColumnsDrag: SlickEvent_<OnColumnsDragEventArgs>;\r\n  onColumnsResized: SlickEvent_<OnColumnsResizedEventArgs>;\r\n  onColumnsResizeDblClick: SlickEvent_<OnColumnsResizeDblClickEventArgs>;\r\n  onCompositeEditorChange: SlickEvent_<OnCompositeEditorChangeEventArgs>;\r\n  onContextMenu: SlickEvent_<MenuCommandItemCallbackArgs>;\r\n  onDrag: SlickEvent_<DragRowMove>;\r\n  onDblClick: SlickEvent_<OnDblClickEventArgs>;\r\n  onDragInit: SlickEvent_<DragRowMove>;\r\n  onDragStart: SlickEvent_<DragRowMove>;\r\n  onDragEnd: SlickEvent_<DragRowMove>;\r\n  onFooterClick: SlickEvent_<OnFooterClickEventArgs>;\r\n  onFooterContextMenu: SlickEvent_<OnFooterContextMenuEventArgs>;\r\n  onFooterRowCellRendered: SlickEvent_<OnFooterRowCellRenderedEventArgs>;\r\n  onHeaderCellRendered: SlickEvent_<OnHeaderCellRenderedEventArgs>;\r\n  onHeaderClick: SlickEvent_<OnHeaderClickEventArgs>;\r\n  onHeaderContextMenu: SlickEvent_<OnHeaderContextMenuEventArgs>;\r\n  onHeaderMouseEnter: SlickEvent_<OnHeaderMouseEventArgs>;\r\n  onHeaderMouseLeave: SlickEvent_<OnHeaderMouseEventArgs>;\r\n  onHeaderRowCellRendered: SlickEvent_<OnHeaderRowCellRenderedEventArgs>;\r\n  onHeaderRowMouseEnter: SlickEvent_<OnHeaderMouseEventArgs>;\r\n  onHeaderRowMouseLeave: SlickEvent_<OnHeaderMouseEventArgs>;\r\n  onPreHeaderContextMenu: SlickEvent_<OnPreHeaderContextMenuEventArgs>;\r\n  onPreHeaderClick: SlickEvent_<OnPreHeaderClickEventArgs>;\r\n  onKeyDown: SlickEvent_<OnKeyDownEventArgs>;\r\n  onMouseEnter: SlickEvent_<OnHeaderMouseEventArgs>;\r\n  onMouseLeave: SlickEvent_<OnHeaderMouseEventArgs>;\r\n  onRendered: SlickEvent_<OnRenderedEventArgs>;\r\n  onScroll: SlickEvent_<OnScrollEventArgs>;\r\n  onSelectedRowsChanged: SlickEvent_<OnSelectedRowsChangedEventArgs>;\r\n  onSetOptions: SlickEvent_<OnSetOptionsEventArgs>;\r\n  onActivateChangedOptions: SlickEvent_<OnActivateChangedOptionsEventArgs>;\r\n  onSort: SlickEvent_<SingleColumnSort | MultiColumnSort>;\r\n  onValidationError: SlickEvent_<OnValidationErrorEventArgs>;\r\n  onViewportChanged: SlickEvent_<{ grid: SlickGrid; }>;\r\n\r\n  // ---\r\n  // protected variables\r\n\r\n  // shared across all grids on the page\r\n  protected scrollbarDimensions?: { height: number; width: number; };\r\n  protected maxSupportedCssHeight!: number;  // browser's breaking point\r\n\r\n  protected canvas: HTMLCanvasElement | null = null;\r\n  protected canvas_context: CanvasRenderingContext2D | null = null;\r\n\r\n  // settings\r\n  protected _options!: O;\r\n  protected _defaults: BaseGridOption = {\r\n    alwaysShowVerticalScroll: false,\r\n    alwaysAllowHorizontalScroll: false,\r\n    explicitInitialization: false,\r\n    rowHeight: 25,\r\n    defaultColumnWidth: 80,\r\n    enableHtmlRendering: true,\r\n    enableAddRow: false,\r\n    leaveSpaceForNewRows: false,\r\n    editable: false,\r\n    autoEdit: true,\r\n    autoEditNewRow: true,\r\n    autoCommitEdit: false,\r\n    suppressActiveCellChangeOnEdit: false,\r\n    enableCellNavigation: true,\r\n    enableColumnReorder: true,\r\n    unorderableColumnCssClass: 'unorderable',\r\n    asyncEditorLoading: false,\r\n    asyncEditorLoadDelay: 100,\r\n    forceFitColumns: false,\r\n    enableAsyncPostRender: false,\r\n    asyncPostRenderDelay: 50,\r\n    enableAsyncPostRenderCleanup: false,\r\n    asyncPostRenderCleanupDelay: 40,\r\n    auto: false,\r\n    nonce: '',\r\n    editorLock: GlobalEditorLock,\r\n    showColumnHeader: true,\r\n    showHeaderRow: false,\r\n    headerRowHeight: 25,\r\n    createFooterRow: false,\r\n    showFooterRow: false,\r\n    footerRowHeight: 25,\r\n    createPreHeaderPanel: false,\r\n    createTopHeaderPanel: false,\r\n    showPreHeaderPanel: false,\r\n    showTopHeaderPanel: false,\r\n    preHeaderPanelHeight: 25,\r\n    showTopPanel: false,\r\n    topPanelHeight: 25,\r\n    preHeaderPanelWidth: 'auto', // mostly useful for Draggable Grouping dropzone to take full width\r\n    topHeaderPanelHeight: 25,\r\n    topHeaderPanelWidth: 'auto', // mostly useful for Draggable Grouping dropzone to take full width\r\n    formatterFactory: null,\r\n    editorFactory: null,\r\n    cellFlashingCssClass: 'flashing',\r\n    rowHighlightCssClass: 'highlight-animate',\r\n    rowHighlightDuration: 400,\r\n    selectedCellCssClass: 'selected',\r\n    multiSelect: true,\r\n    enableCellRowSpan: false,\r\n    enableTextSelectionOnCells: false,\r\n    dataItemColumnValueExtractor: null,\r\n    frozenBottom: false,\r\n    frozenColumn: -1,\r\n    frozenRow: -1,\r\n    frozenRightViewportMinWidth: 100,\r\n    throwWhenFrozenNotAllViewable: false,\r\n    fullWidthRows: false,\r\n    multiColumnSort: false,\r\n    numberedMultiColumnSort: false,\r\n    tristateMultiColumnSort: false,\r\n    sortColNumberInSeparateSpan: false,\r\n    defaultFormatter: this.defaultFormatter,\r\n    forceSyncScrolling: false,\r\n    addNewRowCssClass: 'new-row',\r\n    preserveCopiedSelectionOnPaste: false,\r\n    preventDragFromKeys: ['ctrlKey', 'metaKey'],\r\n    showCellSelection: true,\r\n    viewportClass: undefined,\r\n    minRowBuffer: 3,\r\n    emulatePagingWhenScrolling: true, // when scrolling off bottom of viewport, place new row at top of viewport\r\n    editorCellNavOnLRKeys: false,\r\n    enableMouseWheelScrollHandler: true,\r\n    doPaging: true,\r\n    autosizeColsMode: GridAutosizeColsMode.LegacyOff,\r\n    autosizeColPaddingPx: 4,\r\n    rowTopOffsetRenderType: 'top',\r\n    scrollRenderThrottling: 10,\r\n    autosizeTextAvgToMWidthRatio: 0.75,\r\n    viewportSwitchToScrollModeWidthPercent: undefined,\r\n    viewportMinWidthPx: undefined,\r\n    viewportMaxWidthPx: undefined,\r\n    suppressCssChangesOnHiddenInit: false,\r\n    ffMaxSupportedCssHeight: 6000000,\r\n    maxSupportedCssHeight: 1000000000,\r\n    maxPartialRowSpanRemap: 5000,\r\n    sanitizer: undefined,  // sanitize function, built in basic sanitizer is: Slick.RegexSanitizer(dirtyHtml)\r\n    logSanitizedHtml: false, // log to console when sanitised - recommend true for testing of dev and production\r\n    mixinDefaults: true,\r\n    shadowRoot: undefined\r\n  };\r\n\r\n  protected _columnDefaults = {\r\n    name: '',\r\n    headerCssClass: null,\r\n    defaultSortAsc: true,\r\n    focusable: true,\r\n    hidden: false,\r\n    minWidth: 30,\r\n    maxWidth: undefined,\r\n    rerenderOnResize: false,\r\n    reorderable: true,\r\n    resizable: true,\r\n    sortable: false,\r\n    selectable: true,\r\n  } as Partial<C>;\r\n\r\n  protected _columnAutosizeDefaults: AutoSize = {\r\n    ignoreHeaderText: false,\r\n    colValueArray: undefined,\r\n    allowAddlPercent: undefined,\r\n    formatterOverride: undefined,\r\n    autosizeMode: ColAutosizeMode.ContentIntelligent,\r\n    rowSelectionModeOnInit: undefined,\r\n    rowSelectionMode: RowSelectionMode.FirstNRows,\r\n    rowSelectionCount: 100,\r\n    valueFilterMode: ValueFilterMode.None,\r\n    widthEvalMode: WidthEvalMode.Auto,\r\n    sizeToRemaining: undefined,\r\n    widthPx: undefined,\r\n    contentSizePx: 0,\r\n    headerWidthPx: 0,\r\n    colDataTypeOf: undefined\r\n  };\r\n\r\n  protected _columnResizeTimer?: number;\r\n  protected _executionBlockTimer?: number;\r\n  protected _flashCellTimer?: number;\r\n  protected _highlightRowTimer?: number;\r\n\r\n  // scroller\r\n  protected th!: number;   // virtual height\r\n  protected h!: number;    // real scrollable height\r\n  protected ph!: number;   // page height\r\n  protected n!: number;    // number of pages\r\n  protected cj!: number;   // \"jumpiness\" coefficient\r\n\r\n  protected page = 0;       // current page\r\n  protected offset = 0;     // current page offset\r\n  protected vScrollDir = 1;\r\n  protected _bindingEventService = new BindingEventService();\r\n  protected initialized = false;\r\n  protected _container!: HTMLElement;\r\n  protected uid = `slickgrid_${Math.round(1000000 * Math.random())}`;\r\n  protected _focusSink!: HTMLDivElement;\r\n  protected _focusSink2!: HTMLDivElement;\r\n  protected _groupHeaders: HTMLDivElement[] = [];\r\n  protected _headerScroller: HTMLDivElement[] = [];\r\n  protected _headers: HTMLDivElement[] = [];\r\n  protected _headerRows!: HTMLDivElement[];\r\n  protected _headerRowScroller!: HTMLDivElement[];\r\n  protected _headerRowSpacerL!: HTMLDivElement;\r\n  protected _headerRowSpacerR!: HTMLDivElement;\r\n  protected _footerRow!: HTMLDivElement[];\r\n  protected _footerRowScroller!: HTMLDivElement[];\r\n  protected _footerRowSpacerL!: HTMLDivElement;\r\n  protected _footerRowSpacerR!: HTMLDivElement;\r\n  protected _preHeaderPanel!: HTMLDivElement;\r\n  protected _preHeaderPanelScroller!: HTMLDivElement;\r\n  protected _preHeaderPanelSpacer!: HTMLDivElement;\r\n  protected _preHeaderPanelR!: HTMLDivElement;\r\n  protected _preHeaderPanelScrollerR!: HTMLDivElement;\r\n  protected _preHeaderPanelSpacerR!: HTMLDivElement;\r\n  protected _topHeaderPanel!: HTMLDivElement;\r\n  protected _topHeaderPanelScroller!: HTMLDivElement;\r\n  protected _topHeaderPanelSpacer!: HTMLDivElement;\r\n  protected _topPanelScrollers!: HTMLDivElement[];\r\n  protected _topPanels!: HTMLDivElement[];\r\n  protected _viewport!: HTMLDivElement[];\r\n  protected _canvas!: HTMLDivElement[];\r\n  protected _style?: HTMLStyleElement;\r\n  protected _boundAncestors: HTMLElement[] = [];\r\n  protected stylesheet?: { cssRules: Array<{ selectorText: string; }>; rules: Array<{ selectorText: string; }>; } | null;\r\n  protected columnCssRulesL?: Array<{ selectorText: string; }>;\r\n  protected columnCssRulesR?: Array<{ selectorText: string; }>;\r\n  protected viewportH = 0;\r\n  protected viewportW = 0;\r\n  protected canvasWidth = 0;\r\n  protected canvasWidthL = 0;\r\n  protected canvasWidthR = 0;\r\n  protected headersWidth = 0;\r\n  protected headersWidthL = 0;\r\n  protected headersWidthR = 0;\r\n  protected viewportHasHScroll = false;\r\n  protected viewportHasVScroll = false;\r\n  protected headerColumnWidthDiff = 0;\r\n  protected headerColumnHeightDiff = 0; // border+padding\r\n  protected cellWidthDiff = 0;\r\n  protected cellHeightDiff = 0;\r\n  protected absoluteColumnMinWidth!: number;\r\n  protected hasFrozenRows = false;\r\n  protected frozenRowsHeight = 0;\r\n  protected actualFrozenRow = -1;\r\n  protected paneTopH = 0;\r\n  protected paneBottomH = 0;\r\n  protected viewportTopH = 0;\r\n  protected viewportBottomH = 0;\r\n  protected topPanelH = 0;\r\n  protected headerRowH = 0;\r\n  protected footerRowH = 0;\r\n\r\n  protected tabbingDirection = 1;\r\n  protected _activeCanvasNode!: HTMLDivElement;\r\n  protected _activeViewportNode!: HTMLDivElement;\r\n  protected activePosX!: number;\r\n  protected activePosY!: number;\r\n  protected activeRow!: number;\r\n  protected activeCell!: number;\r\n  protected activeCellNode: HTMLDivElement | null = null;\r\n  protected currentEditor: Editor | null = null;\r\n  protected serializedEditorValue: any;\r\n  protected editController?: EditController;\r\n  protected _prevDataLength = 0;\r\n  protected _prevInvalidatedRowsCount = 0;\r\n  protected _rowSpanIsCached = false;\r\n  protected _colsWithRowSpanCache: { [colIdx: number]: Set<string> } = {};\r\n  protected rowsCache: Record<number, RowCaching> = {};\r\n  protected renderedRows = 0;\r\n  protected numVisibleRows = 0;\r\n  protected prevScrollTop = 0;\r\n  protected scrollHeight = 0;\r\n  protected scrollTop = 0;\r\n  protected lastRenderedScrollTop = 0;\r\n  protected lastRenderedScrollLeft = 0;\r\n  protected prevScrollLeft = 0;\r\n  protected scrollLeft = 0;\r\n\r\n  protected selectionModel?: SelectionModel;\r\n  protected selectedRows: number[] = [];\r\n\r\n  protected plugins: SlickPlugin[] = [];\r\n  protected cellCssClasses: CssStyleHash = {};\r\n\r\n  protected columnsById: Record<string, number> = {};\r\n  protected sortColumns: ColumnSort[] = [];\r\n  protected columnPosLeft: number[] = [];\r\n  protected columnPosRight: number[] = [];\r\n\r\n  protected pagingActive = false;\r\n  protected pagingIsLastPage = false;\r\n\r\n  protected scrollThrottle!: { enqueue: () => void; dequeue: () => void; };\r\n\r\n  // async call handles\r\n  protected h_editorLoader?: number;\r\n  protected h_postrender?: number;\r\n  protected h_postrenderCleanup?: number;\r\n  protected postProcessedRows: any = {};\r\n  protected postProcessToRow: number = null as any;\r\n  protected postProcessFromRow: number = null as any;\r\n  protected postProcessedCleanupQueue: Array<{\r\n    actionType: string;\r\n    groupId: number;\r\n    node: HTMLElement | HTMLElement[];\r\n    columnIdx?: number;\r\n    rowIdx?: number;\r\n  }> = [];\r\n  protected postProcessgroupId = 0;\r\n\r\n  // perf counters\r\n  protected counter_rows_rendered = 0;\r\n  protected counter_rows_removed = 0;\r\n\r\n  protected _paneHeaderL!: HTMLDivElement;\r\n  protected _paneHeaderR!: HTMLDivElement;\r\n  protected _paneTopL!: HTMLDivElement;\r\n  protected _paneTopR!: HTMLDivElement;\r\n  protected _paneBottomL!: HTMLDivElement;\r\n  protected _paneBottomR!: HTMLDivElement;\r\n  protected _headerScrollerL!: HTMLDivElement;\r\n  protected _headerScrollerR!: HTMLDivElement;\r\n  protected _headerL!: HTMLDivElement;\r\n  protected _headerR!: HTMLDivElement;\r\n  protected _groupHeadersL!: HTMLDivElement;\r\n  protected _groupHeadersR!: HTMLDivElement;\r\n  protected _headerRowScrollerL!: HTMLDivElement;\r\n  protected _headerRowScrollerR!: HTMLDivElement;\r\n  protected _footerRowScrollerL!: HTMLDivElement;\r\n  protected _footerRowScrollerR!: HTMLDivElement;\r\n  protected _headerRowL!: HTMLDivElement;\r\n  protected _headerRowR!: HTMLDivElement;\r\n  protected _footerRowL!: HTMLDivElement;\r\n  protected _footerRowR!: HTMLDivElement;\r\n  protected _topPanelScrollerL!: HTMLDivElement;\r\n  protected _topPanelScrollerR!: HTMLDivElement;\r\n  protected _topPanelL!: HTMLDivElement;\r\n  protected _topPanelR!: HTMLDivElement;\r\n  protected _viewportTopL!: HTMLDivElement;\r\n  protected _viewportTopR!: HTMLDivElement;\r\n  protected _viewportBottomL!: HTMLDivElement;\r\n  protected _viewportBottomR!: HTMLDivElement;\r\n  protected _canvasTopL!: HTMLDivElement;\r\n  protected _canvasTopR!: HTMLDivElement;\r\n  protected _canvasBottomL!: HTMLDivElement;\r\n  protected _canvasBottomR!: HTMLDivElement;\r\n  protected _viewportScrollContainerX!: HTMLDivElement;\r\n  protected _viewportScrollContainerY!: HTMLDivElement;\r\n  protected _headerScrollContainer!: HTMLDivElement;\r\n  protected _headerRowScrollContainer!: HTMLDivElement;\r\n  protected _footerRowScrollContainer!: HTMLDivElement;\r\n\r\n  // store css attributes if display:none is active in container or parent\r\n  protected cssShow = { position: 'absolute', visibility: 'hidden', display: 'block' };\r\n  protected _hiddenParents: HTMLElement[] = [];\r\n  protected oldProps: Array<Partial<CSSStyleDeclaration>> = [];\r\n  protected enforceFrozenRowHeightRecalc = false;\r\n  protected columnResizeDragging = false;\r\n  protected slickDraggableInstance: InteractionBase | null = null;\r\n  protected slickMouseWheelInstances: Array<InteractionBase> = [];\r\n  protected slickResizableInstances: Array<InteractionBase> = [];\r\n  protected sortableSideLeftInstance?: SortableInstance;\r\n  protected sortableSideRightInstance?: SortableInstance;\r\n  protected logMessageCount = 0;\r\n  protected logMessageMaxCount = 30;\r\n  protected _pubSubService?: BasePubSub;\r\n\r\n  /**\r\n   * Creates a new instance of the grid.\r\n   * @class SlickGrid\r\n   * @constructor\r\n   * @param {Node} container - Container node to create the grid in.\r\n   * @param {Array|Object} data - An array of objects for databinding or an external DataView.\r\n   * @param {Array<C>} columns - An array of column definitions.\r\n   * @param {Object} [options] - Grid Options\r\n   * @param {Object} [externalPubSub] - optional External PubSub Service to use by SlickEvent\r\n   **/\r\n  constructor(protected readonly container: HTMLElement | string, protected data: CustomDataView<TData> | TData[], protected columns: C[], options: Partial<O>, protected readonly externalPubSub?: BasePubSub) {\r\n    this._container = typeof this.container === 'string'\r\n      ? document.querySelector(this.container) as HTMLDivElement\r\n      : this.container;\r\n\r\n    if (!this._container) {\r\n      throw new Error(`SlickGrid requires a valid container, ${this.container} does not exist in the DOM.`);\r\n    }\r\n\r\n    this._pubSubService = externalPubSub;\r\n    this.onActiveCellChanged = new SlickEvent<OnActiveCellChangedEventArgs>('onActiveCellChanged', externalPubSub);\r\n    this.onActiveCellPositionChanged = new SlickEvent<{ grid: SlickGrid; }>('onActiveCellPositionChanged', externalPubSub);\r\n    this.onAddNewRow = new SlickEvent<OnAddNewRowEventArgs>('onAddNewRow', externalPubSub);\r\n    this.onAutosizeColumns = new SlickEvent<OnAutosizeColumnsEventArgs>('onAutosizeColumns', externalPubSub);\r\n    this.onBeforeAppendCell = new SlickEvent<OnBeforeAppendCellEventArgs>('onBeforeAppendCell', externalPubSub);\r\n    this.onBeforeCellEditorDestroy = new SlickEvent<OnBeforeCellEditorDestroyEventArgs>('onBeforeCellEditorDestroy', externalPubSub);\r\n    this.onBeforeColumnsResize = new SlickEvent<OnBeforeColumnsResizeEventArgs>('onBeforeColumnsResize', externalPubSub);\r\n    this.onBeforeDestroy = new SlickEvent<{ grid: SlickGrid; }>('onBeforeDestroy', externalPubSub);\r\n    this.onBeforeEditCell = new SlickEvent<OnBeforeEditCellEventArgs>('onBeforeEditCell', externalPubSub);\r\n    this.onBeforeFooterRowCellDestroy = new SlickEvent<OnBeforeFooterRowCellDestroyEventArgs>('onBeforeFooterRowCellDestroy', externalPubSub);\r\n    this.onBeforeHeaderCellDestroy = new SlickEvent<OnBeforeHeaderCellDestroyEventArgs>('onBeforeHeaderCellDestroy', externalPubSub);\r\n    this.onBeforeHeaderRowCellDestroy = new SlickEvent<OnBeforeHeaderRowCellDestroyEventArgs>('onBeforeHeaderRowCellDestroy', externalPubSub);\r\n    this.onBeforeSetColumns = new SlickEvent<OnBeforeSetColumnsEventArgs>('onBeforeSetColumns', externalPubSub);\r\n    this.onBeforeSort = new SlickEvent<SingleColumnSort | MultiColumnSort>('onBeforeSort', externalPubSub);\r\n    this.onBeforeUpdateColumns = new SlickEvent<OnBeforeUpdateColumnsEventArgs>('onBeforeUpdateColumns', externalPubSub);\r\n    this.onCellChange = new SlickEvent<OnCellChangeEventArgs>('onCellChange', externalPubSub);\r\n    this.onCellCssStylesChanged = new SlickEvent<OnCellCssStylesChangedEventArgs>('onCellCssStylesChanged', externalPubSub);\r\n    this.onClick = new SlickEvent<OnClickEventArgs>('onClick', externalPubSub);\r\n    this.onColumnsReordered = new SlickEvent<OnColumnsReorderedEventArgs>('onColumnsReordered', externalPubSub);\r\n    this.onColumnsDrag = new SlickEvent<OnColumnsDragEventArgs>('onColumnsDrag', externalPubSub);\r\n    this.onColumnsResized = new SlickEvent<OnColumnsResizedEventArgs>('onColumnsResized', externalPubSub);\r\n    this.onColumnsResizeDblClick = new SlickEvent<OnColumnsResizeDblClickEventArgs>('onColumnsResizeDblClick', externalPubSub);\r\n    this.onCompositeEditorChange = new SlickEvent<OnCompositeEditorChangeEventArgs>('onCompositeEditorChange', externalPubSub);\r\n    this.onContextMenu = new SlickEvent<MenuCommandItemCallbackArgs>('onContextMenu', externalPubSub);\r\n    this.onDrag = new SlickEvent<DragRowMove>('onDrag', externalPubSub);\r\n    this.onDblClick = new SlickEvent<OnDblClickEventArgs>('onDblClick', externalPubSub);\r\n    this.onDragInit = new SlickEvent<DragRowMove>('onDragInit', externalPubSub);\r\n    this.onDragStart = new SlickEvent<DragRowMove>('onDragStart', externalPubSub);\r\n    this.onDragEnd = new SlickEvent<DragRowMove>('onDragEnd', externalPubSub);\r\n    this.onFooterClick = new SlickEvent<OnFooterClickEventArgs>('onFooterClick', externalPubSub);\r\n    this.onFooterContextMenu = new SlickEvent<OnFooterContextMenuEventArgs>('onFooterContextMenu', externalPubSub);\r\n    this.onFooterRowCellRendered = new SlickEvent<OnFooterRowCellRenderedEventArgs>('onFooterRowCellRendered', externalPubSub);\r\n    this.onHeaderCellRendered = new SlickEvent<OnHeaderCellRenderedEventArgs>('onHeaderCellRendered', externalPubSub);\r\n    this.onHeaderClick = new SlickEvent<OnHeaderClickEventArgs>('onHeaderClick', externalPubSub);\r\n    this.onHeaderContextMenu = new SlickEvent<OnHeaderContextMenuEventArgs>('onHeaderContextMenu', externalPubSub);\r\n    this.onHeaderMouseEnter = new SlickEvent<OnHeaderMouseEventArgs>('onHeaderMouseEnter', externalPubSub);\r\n    this.onHeaderMouseLeave = new SlickEvent<OnHeaderMouseEventArgs>('onHeaderMouseLeave', externalPubSub);\r\n    this.onHeaderRowCellRendered = new SlickEvent<OnHeaderRowCellRenderedEventArgs>('onHeaderRowCellRendered', externalPubSub);\r\n    this.onHeaderRowMouseEnter = new SlickEvent<OnHeaderMouseEventArgs>('onHeaderRowMouseEnter', externalPubSub);\r\n    this.onHeaderRowMouseLeave = new SlickEvent<OnHeaderMouseEventArgs>('onHeaderRowMouseLeave', externalPubSub);\r\n    this.onPreHeaderClick = new SlickEvent<OnPreHeaderClickEventArgs>('onPreHeaderClick', externalPubSub);\r\n    this.onPreHeaderContextMenu = new SlickEvent<OnPreHeaderContextMenuEventArgs>('onPreHeaderContextMenu', externalPubSub);\r\n    this.onKeyDown = new SlickEvent<OnKeyDownEventArgs>('onKeyDown', externalPubSub);\r\n    this.onMouseEnter = new SlickEvent<OnHeaderMouseEventArgs>('onMouseEnter', externalPubSub);\r\n    this.onMouseLeave = new SlickEvent<OnHeaderMouseEventArgs>('onMouseLeave', externalPubSub);\r\n    this.onRendered = new SlickEvent<OnRenderedEventArgs>('onRendered', externalPubSub);\r\n    this.onScroll = new SlickEvent<OnScrollEventArgs>('onScroll', externalPubSub);\r\n    this.onSelectedRowsChanged = new SlickEvent<OnSelectedRowsChangedEventArgs>('onSelectedRowsChanged', externalPubSub);\r\n    this.onSetOptions = new SlickEvent<OnSetOptionsEventArgs>('onSetOptions', externalPubSub);\r\n    this.onActivateChangedOptions = new SlickEvent<OnActivateChangedOptionsEventArgs>('onActivateChangedOptions', externalPubSub);\r\n    this.onSort = new SlickEvent<SingleColumnSort | MultiColumnSort>('onSort', externalPubSub);\r\n    this.onValidationError = new SlickEvent<OnValidationErrorEventArgs>('onValidationError', externalPubSub);\r\n    this.onViewportChanged = new SlickEvent<{ grid: SlickGrid; }>('onViewportChanged', externalPubSub);\r\n\r\n    this.initialize(options);\r\n  }\r\n\r\n  //////////////////////////////////////////////////////////////////////////////////////////////\r\n  // Initialization\r\n\r\n  /** Initializes the grid. */\r\n  init() {\r\n    this.finishInitialization();\r\n  }\r\n\r\n  /**\r\n   * Apply HTML code by 3 different ways depending on what is provided as input and what options are enabled.\r\n   * 1. value is an HTMLElement or DocumentFragment, then first empty the target and simply append the HTML to the target element.\r\n   * 2. value is string and `enableHtmlRendering` is enabled, then use `target.innerHTML = value;`\r\n   * 3. value is string and `enableHtmlRendering` is disabled, then use `target.textContent = value;`\r\n   * @param target - target element to apply to\r\n   * @param val - input value can be either a string or an HTMLElement\r\n   * @param options -\r\n   *   `emptyTarget`, defaults to true, will empty the target.\r\n   *   `skipEmptyReassignment`, defaults to true, when enabled it will not try to reapply an empty value when the target is already empty\r\n   */\r\n  applyHtmlCode(target: HTMLElement, val: string | HTMLElement | DocumentFragment, options?: { emptyTarget?: boolean; skipEmptyReassignment?: boolean; }) {\r\n    if (target) {\r\n      if (val instanceof HTMLElement || val instanceof DocumentFragment) {\r\n        // first empty target and then append new HTML element\r\n        const emptyTarget = options?.emptyTarget !== false;\r\n        if (emptyTarget) {\r\n          Utils.emptyElement(target);\r\n        }\r\n        target.appendChild(val);\r\n      } else {\r\n        // when it's already empty and we try to reassign empty, it's probably ok to skip the assignment\r\n        const skipEmptyReassignment = options?.skipEmptyReassignment !== false;\r\n        if (skipEmptyReassignment && !Utils.isDefined(val) && !target.innerHTML) {\r\n          return;\r\n        }\r\n\r\n        let sanitizedText = val;\r\n        if (typeof sanitizedText === 'number' || typeof sanitizedText === 'boolean') {\r\n          target.textContent = sanitizedText;\r\n        } else {\r\n          sanitizedText = this.sanitizeHtmlString(val as string);\r\n\r\n          // apply HTML when enableHtmlRendering is enabled but make sure we do have a value (without a value, it will simply use `textContent` to clear text content)\r\n          if (this._options.enableHtmlRendering && sanitizedText) {\r\n            target.innerHTML = sanitizedText;\r\n          } else {\r\n            target.textContent = sanitizedText;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  protected initialize(options: Partial<O>) {\r\n    // calculate these only once and share between grid instances\r\n    if (options?.mixinDefaults) {\r\n      // use provided options and then assign defaults\r\n      if (!this._options) { this._options = options as O; }\r\n      Utils.applyDefaults(this._options, this._defaults);\r\n    } else {\r\n      this._options = Utils.extend<O>(true, {}, this._defaults, options);\r\n    }\r\n    this.scrollThrottle = this.actionThrottle(this.render.bind(this), this._options.scrollRenderThrottling as number);\r\n    this.maxSupportedCssHeight = this.maxSupportedCssHeight || this.getMaxSupportedCssHeight();\r\n    this.validateAndEnforceOptions();\r\n    this._columnDefaults.width = this._options.defaultColumnWidth;\r\n\r\n    if (!this._options.suppressCssChangesOnHiddenInit) {\r\n      this.cacheCssForHiddenInit();\r\n    }\r\n\r\n    this.updateColumnProps();\r\n\r\n    // validate loaded JavaScript modules against requested options\r\n    if (this._options.enableColumnReorder && (!Sortable || !Sortable.create)) {\r\n      throw new Error('SlickGrid requires Sortable.js module to be loaded');\r\n    }\r\n\r\n    this.editController = {\r\n      commitCurrentEdit: this.commitCurrentEdit.bind(this),\r\n      cancelCurrentEdit: this.cancelCurrentEdit.bind(this),\r\n    };\r\n\r\n    Utils.emptyElement(this._container);\r\n    this._container.style.outline = String(0);\r\n    this._container.classList.add(this.uid);\r\n    this._container.classList.add('ui-widget');\r\n    this._container.setAttribute('role', 'grid');\r\n\r\n    const containerStyles = window.getComputedStyle(this._container);\r\n    if (!(/relative|absolute|fixed/).test(containerStyles.position)) {\r\n      this._container.style.position = 'relative';\r\n    }\r\n\r\n    this._focusSink = Utils.createDomElement('div', { tabIndex: 0, style: { position: 'fixed', width: '0px', height: '0px', top: '0px', left: '0px', outline: '0px' } }, this._container);\r\n\r\n    if (this._options.createTopHeaderPanel) {\r\n      this._topHeaderPanelScroller = Utils.createDomElement('div', { className: 'slick-topheader-panel slick-state-default', style: { overflow: 'hidden', position: 'relative' } }, this._container);\r\n      this._topHeaderPanelScroller.appendChild(document.createElement('div'));\r\n      this._topHeaderPanel = Utils.createDomElement('div', null, this._topHeaderPanelScroller);\r\n      this._topHeaderPanelSpacer = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._topHeaderPanelScroller);\r\n\r\n      if (!this._options.showTopHeaderPanel) {\r\n        Utils.hide(this._topHeaderPanelScroller);\r\n      }\r\n    }\r\n\r\n    // Containers used for scrolling frozen columns and rows\r\n    this._paneHeaderL = Utils.createDomElement('div', { className: 'slick-pane slick-pane-header slick-pane-left', tabIndex: 0 }, this._container);\r\n    this._paneHeaderR = Utils.createDomElement('div', { className: 'slick-pane slick-pane-header slick-pane-right', tabIndex: 0 }, this._container);\r\n    this._paneTopL = Utils.createDomElement('div', { className: 'slick-pane slick-pane-top slick-pane-left', tabIndex: 0 }, this._container);\r\n    this._paneTopR = Utils.createDomElement('div', { className: 'slick-pane slick-pane-top slick-pane-right', tabIndex: 0 }, this._container);\r\n    this._paneBottomL = Utils.createDomElement('div', { className: 'slick-pane slick-pane-bottom slick-pane-left', tabIndex: 0 }, this._container);\r\n    this._paneBottomR = Utils.createDomElement('div', { className: 'slick-pane slick-pane-bottom slick-pane-right', tabIndex: 0 }, this._container);\r\n\r\n    if (this._options.createPreHeaderPanel) {\r\n      this._preHeaderPanelScroller = Utils.createDomElement('div', { className: 'slick-preheader-panel ui-state-default slick-state-default', style: { overflow: 'hidden', position: 'relative' } }, this._paneHeaderL);\r\n      this._preHeaderPanelScroller.appendChild(document.createElement('div'));\r\n      this._preHeaderPanel = Utils.createDomElement('div', null, this._preHeaderPanelScroller);\r\n      this._preHeaderPanelSpacer = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._preHeaderPanelScroller);\r\n\r\n      this._preHeaderPanelScrollerR = Utils.createDomElement('div', { className: 'slick-preheader-panel ui-state-default slick-state-default', style: { overflow: 'hidden', position: 'relative' } }, this._paneHeaderR);\r\n      this._preHeaderPanelR = Utils.createDomElement('div', null, this._preHeaderPanelScrollerR);\r\n      this._preHeaderPanelSpacerR = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._preHeaderPanelScrollerR);\r\n\r\n      if (!this._options.showPreHeaderPanel) {\r\n        Utils.hide(this._preHeaderPanelScroller);\r\n        Utils.hide(this._preHeaderPanelScrollerR);\r\n      }\r\n    }\r\n\r\n    // Append the header scroller containers\r\n    this._headerScrollerL = Utils.createDomElement('div', { className: 'slick-header ui-state-default slick-state-default slick-header-left' }, this._paneHeaderL);\r\n    this._headerScrollerR = Utils.createDomElement('div', { className: 'slick-header ui-state-default slick-state-default slick-header-right' }, this._paneHeaderR);\r\n\r\n    // Cache the header scroller containers\r\n    this._headerScroller.push(this._headerScrollerL);\r\n    this._headerScroller.push(this._headerScrollerR);\r\n\r\n    // Append the columnn containers to the headers\r\n    this._headerL = Utils.createDomElement('div', { className: 'slick-header-columns slick-header-columns-left', role: 'row', style: { left: '-1000px' } }, this._headerScrollerL);\r\n    this._headerR = Utils.createDomElement('div', { className: 'slick-header-columns slick-header-columns-right', role: 'row', style: { left: '-1000px' } }, this._headerScrollerR);\r\n\r\n    // Cache the header columns\r\n    this._headers = [this._headerL, this._headerR];\r\n\r\n    this._headerRowScrollerL = Utils.createDomElement('div', { className: 'slick-headerrow ui-state-default slick-state-default' }, this._paneTopL);\r\n    this._headerRowScrollerR = Utils.createDomElement('div', { className: 'slick-headerrow ui-state-default slick-state-default' }, this._paneTopR);\r\n\r\n    this._headerRowScroller = [this._headerRowScrollerL, this._headerRowScrollerR];\r\n\r\n    this._headerRowSpacerL = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._headerRowScrollerL);\r\n    this._headerRowSpacerR = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._headerRowScrollerR);\r\n\r\n    this._headerRowL = Utils.createDomElement('div', { className: 'slick-headerrow-columns slick-headerrow-columns-left' }, this._headerRowScrollerL);\r\n    this._headerRowR = Utils.createDomElement('div', { className: 'slick-headerrow-columns slick-headerrow-columns-right' }, this._headerRowScrollerR);\r\n\r\n    this._headerRows = [this._headerRowL, this._headerRowR];\r\n\r\n    // Append the top panel scroller\r\n    this._topPanelScrollerL = Utils.createDomElement('div', { className: 'slick-top-panel-scroller ui-state-default slick-state-default' }, this._paneTopL);\r\n    this._topPanelScrollerR = Utils.createDomElement('div', { className: 'slick-top-panel-scroller ui-state-default slick-state-default' }, this._paneTopR);\r\n\r\n    this._topPanelScrollers = [this._topPanelScrollerL, this._topPanelScrollerR];\r\n\r\n    // Append the top panel\r\n    this._topPanelL = Utils.createDomElement('div', { className: 'slick-top-panel', style: { width: '10000px' } }, this._topPanelScrollerL);\r\n    this._topPanelR = Utils.createDomElement('div', { className: 'slick-top-panel', style: { width: '10000px' } }, this._topPanelScrollerR);\r\n\r\n    this._topPanels = [this._topPanelL, this._topPanelR];\r\n\r\n    if (!this._options.showColumnHeader) {\r\n      this._headerScroller.forEach((el) => {\r\n        Utils.hide(el);\r\n      });\r\n    }\r\n\r\n    if (!this._options.showTopPanel) {\r\n      this._topPanelScrollers.forEach((scroller) => {\r\n        Utils.hide(scroller);\r\n      });\r\n    }\r\n\r\n    if (!this._options.showHeaderRow) {\r\n      this._headerRowScroller.forEach((scroller) => {\r\n        Utils.hide(scroller);\r\n      });\r\n    }\r\n\r\n    // Append the viewport containers\r\n    this._viewportTopL = Utils.createDomElement('div', { className: 'slick-viewport slick-viewport-top slick-viewport-left', tabIndex: 0 }, this._paneTopL);\r\n    this._viewportTopR = Utils.createDomElement('div', { className: 'slick-viewport slick-viewport-top slick-viewport-right', tabIndex: 0 }, this._paneTopR);\r\n    this._viewportBottomL = Utils.createDomElement('div', { className: 'slick-viewport slick-viewport-bottom slick-viewport-left', tabIndex: 0 }, this._paneBottomL);\r\n    this._viewportBottomR = Utils.createDomElement('div', { className: 'slick-viewport slick-viewport-bottom slick-viewport-right', tabIndex: 0 }, this._paneBottomR);\r\n\r\n    // Cache the viewports\r\n    this._viewport = [this._viewportTopL, this._viewportTopR, this._viewportBottomL, this._viewportBottomR];\r\n    if (this._options.viewportClass) {\r\n      this._viewport.forEach((view) => {\r\n        view.classList.add(...Utils.classNameToList((this._options.viewportClass)));\r\n      });\r\n    }\r\n\r\n    // Default the active viewport to the top left\r\n    this._activeViewportNode = this._viewportTopL;\r\n\r\n    // Append the canvas containers\r\n    this._canvasTopL = Utils.createDomElement('div', { className: 'grid-canvas grid-canvas-top grid-canvas-left', tabIndex: 0 }, this._viewportTopL);\r\n    this._canvasTopR = Utils.createDomElement('div', { className: 'grid-canvas grid-canvas-top grid-canvas-right', tabIndex: 0 }, this._viewportTopR);\r\n    this._canvasBottomL = Utils.createDomElement('div', { className: 'grid-canvas grid-canvas-bottom grid-canvas-left', tabIndex: 0 }, this._viewportBottomL);\r\n    this._canvasBottomR = Utils.createDomElement('div', { className: 'grid-canvas grid-canvas-bottom grid-canvas-right', tabIndex: 0 }, this._viewportBottomR);\r\n\r\n    // Cache the canvases\r\n    this._canvas = [this._canvasTopL, this._canvasTopR, this._canvasBottomL, this._canvasBottomR];\r\n\r\n    this.scrollbarDimensions = this.scrollbarDimensions || this.measureScrollbar();\r\n\r\n    // Default the active canvas to the top left\r\n    this._activeCanvasNode = this._canvasTopL;\r\n\r\n    // top-header\r\n    if (this._topHeaderPanelSpacer) {\r\n      Utils.width(this._topHeaderPanelSpacer, this.getCanvasWidth() + this.scrollbarDimensions.width);\r\n    }\r\n\r\n    // pre-header\r\n    if (this._preHeaderPanelSpacer) {\r\n      Utils.width(this._preHeaderPanelSpacer, this.getCanvasWidth() + this.scrollbarDimensions.width);\r\n    }\r\n\r\n    this._headers.forEach((el) => {\r\n      Utils.width(el, this.getHeadersWidth());\r\n    });\r\n\r\n    Utils.width(this._headerRowSpacerL, this.getCanvasWidth() + this.scrollbarDimensions.width);\r\n    Utils.width(this._headerRowSpacerR, this.getCanvasWidth() + this.scrollbarDimensions.width);\r\n\r\n    // footer Row\r\n    if (this._options.createFooterRow) {\r\n      this._footerRowScrollerR = Utils.createDomElement('div', { className: 'slick-footerrow ui-state-default slick-state-default' }, this._paneTopR);\r\n      this._footerRowScrollerL = Utils.createDomElement('div', { className: 'slick-footerrow ui-state-default slick-state-default' }, this._paneTopL);\r\n\r\n      this._footerRowScroller = [this._footerRowScrollerL, this._footerRowScrollerR];\r\n\r\n      this._footerRowSpacerL = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._footerRowScrollerL);\r\n      Utils.width(this._footerRowSpacerL, this.getCanvasWidth() + this.scrollbarDimensions.width);\r\n      this._footerRowSpacerR = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._footerRowScrollerR);\r\n      Utils.width(this._footerRowSpacerR, this.getCanvasWidth() + this.scrollbarDimensions.width);\r\n\r\n      this._footerRowL = Utils.createDomElement('div', { className: 'slick-footerrow-columns slick-footerrow-columns-left' }, this._footerRowScrollerL);\r\n      this._footerRowR = Utils.createDomElement('div', { className: 'slick-footerrow-columns slick-footerrow-columns-right' }, this._footerRowScrollerR);\r\n\r\n      this._footerRow = [this._footerRowL, this._footerRowR];\r\n\r\n      if (!this._options.showFooterRow) {\r\n        this._footerRowScroller.forEach((scroller) => {\r\n          Utils.hide(scroller);\r\n        });\r\n      }\r\n    }\r\n\r\n    this._focusSink2 = this._focusSink.cloneNode(true) as HTMLDivElement;\r\n    this._container.appendChild(this._focusSink2);\r\n\r\n    if (!this._options.explicitInitialization) {\r\n      this.finishInitialization();\r\n    }\r\n  }\r\n\r\n  protected finishInitialization() {\r\n    if (!this.initialized) {\r\n      this.initialized = true;\r\n\r\n      this.getViewportWidth();\r\n      this.getViewportHeight();\r\n\r\n      // header columns and cells may have different padding/border skewing width calculations (box-sizing, hello?)\r\n      // calculate the diff so we can set consistent sizes\r\n      this.measureCellPaddingAndBorder();\r\n\r\n      // for usability reasons, all text selection in SlickGrid is disabled\r\n      // with the exception of input and textarea elements (selection must\r\n      // be enabled there so that editors work as expected); note that\r\n      // selection in grid cells (grid body) is already unavailable in\r\n      // all browsers except IE\r\n      this.disableSelection(this._headers); // disable all text selection in header (including input and textarea)\r\n\r\n      if (!this._options.enableTextSelectionOnCells) {\r\n        // disable text selection in grid cells except in input and textarea elements\r\n        // (this is IE-specific, because selectstart event will only fire in IE)\r\n        this._viewport.forEach((view) => {\r\n          this._bindingEventService.bind(view, 'selectstart', (event) => {\r\n            if (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement) {\r\n              return;\r\n            }\r\n          });\r\n        });\r\n      }\r\n\r\n      this.setFrozenOptions();\r\n      this.setPaneFrozenClasses();\r\n      this.setPaneVisibility();\r\n      this.setScroller();\r\n      this.setOverflow();\r\n\r\n      this.updateColumnCaches();\r\n      this.createColumnHeaders();\r\n      this.createColumnFooter();\r\n      this.setupColumnSort();\r\n      this.createCssRules();\r\n      this.resizeCanvas();\r\n      this.bindAncestorScrollEvents();\r\n\r\n      this._bindingEventService.bind(this._container, 'resize', this.resizeCanvas.bind(this));\r\n      this._viewport.forEach((view) => {\r\n        this._bindingEventService.bind(view, 'scroll', this.handleScroll.bind(this));\r\n      });\r\n\r\n      if (this._options.enableMouseWheelScrollHandler) {\r\n        this._viewport.forEach((view) => {\r\n          this.slickMouseWheelInstances.push(MouseWheel({\r\n            element: view,\r\n            onMouseWheel: this.handleMouseWheel.bind(this)\r\n          }));\r\n        });\r\n      }\r\n\r\n      this._headerScroller.forEach((el) => {\r\n        this._bindingEventService.bind(el, 'contextmenu', this.handleHeaderContextMenu.bind(this) as EventListener);\r\n        this._bindingEventService.bind(el, 'click', this.handleHeaderClick.bind(this) as EventListener);\r\n      });\r\n\r\n      this._headerRowScroller.forEach((scroller) => {\r\n        this._bindingEventService.bind(scroller, 'scroll', this.handleHeaderRowScroll.bind(this) as EventListener);\r\n      });\r\n\r\n      if (this._options.createFooterRow) {\r\n        this._footerRow.forEach((footer) => {\r\n          this._bindingEventService.bind(footer, 'contextmenu', this.handleFooterContextMenu.bind(this) as EventListener);\r\n          this._bindingEventService.bind(footer, 'click', this.handleFooterClick.bind(this) as EventListener);\r\n        });\r\n\r\n        this._footerRowScroller.forEach((scroller) => {\r\n          this._bindingEventService.bind(scroller, 'scroll', this.handleFooterRowScroll.bind(this) as EventListener);\r\n        });\r\n      }\r\n\r\n      if (this._options.createTopHeaderPanel) {\r\n        this._bindingEventService.bind(this._topHeaderPanelScroller, 'scroll', this.handleTopHeaderPanelScroll.bind(this) as EventListener);\r\n      }\r\n\r\n      if (this._options.createPreHeaderPanel) {\r\n        this._bindingEventService.bind(this._preHeaderPanelScroller, 'scroll', this.handlePreHeaderPanelScroll.bind(this) as EventListener);\r\n        this._bindingEventService.bind(this._preHeaderPanelScroller, 'contextmenu', this.handlePreHeaderContextMenu.bind(this) as EventListener);\r\n        this._bindingEventService.bind(this._preHeaderPanelScrollerR, 'contextmenu', this.handlePreHeaderContextMenu.bind(this) as EventListener);\r\n        this._bindingEventService.bind(this._preHeaderPanelScroller, 'click', this.handlePreHeaderClick.bind(this) as EventListener);\r\n        this._bindingEventService.bind(this._preHeaderPanelScrollerR, 'click', this.handlePreHeaderClick.bind(this) as EventListener);\r\n      }\r\n\r\n      this._bindingEventService.bind(this._focusSink, 'keydown', this.handleKeyDown.bind(this) as EventListener);\r\n      this._bindingEventService.bind(this._focusSink2, 'keydown', this.handleKeyDown.bind(this) as EventListener);\r\n\r\n      this._canvas.forEach((element) => {\r\n        this._bindingEventService.bind(element, 'keydown', this.handleKeyDown.bind(this) as EventListener);\r\n        this._bindingEventService.bind(element, 'click', this.handleClick.bind(this) as EventListener);\r\n        this._bindingEventService.bind(element, 'dblclick', this.handleDblClick.bind(this) as EventListener);\r\n        this._bindingEventService.bind(element, 'contextmenu', this.handleContextMenu.bind(this) as EventListener);\r\n        this._bindingEventService.bind(element, 'mouseover', this.handleCellMouseOver.bind(this) as EventListener);\r\n        this._bindingEventService.bind(element, 'mouseout', this.handleCellMouseOut.bind(this) as EventListener);\r\n      });\r\n\r\n      if (Draggable) {\r\n        this.slickDraggableInstance = Draggable({\r\n          containerElement: this._container,\r\n          allowDragFrom: 'div.slick-cell',\r\n          // the slick cell parent must always contain `.dnd` and/or `.cell-reorder` class to be identified as draggable\r\n          allowDragFromClosest: 'div.slick-cell.dnd, div.slick-cell.cell-reorder',\r\n          preventDragFromKeys: this._options.preventDragFromKeys,\r\n          onDragInit: this.handleDragInit.bind(this),\r\n          onDragStart: this.handleDragStart.bind(this),\r\n          onDrag: this.handleDrag.bind(this),\r\n          onDragEnd: this.handleDragEnd.bind(this)\r\n        });\r\n      }\r\n\r\n      if (!this._options.suppressCssChangesOnHiddenInit) {\r\n        this.restoreCssFromHiddenInit();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** handles \"display:none\" on container or container parents, related to issue: https://github.com/6pac/SlickGrid/issues/568 */\r\n  cacheCssForHiddenInit() {\r\n    this._hiddenParents = Utils.parents(this._container, ':hidden') as HTMLElement[];\r\n    this.oldProps = [];\r\n    this._hiddenParents.forEach(el => {\r\n      const old: Partial<CSSStyleDeclaration> = {};\r\n      Object.keys(this.cssShow).forEach(name => {\r\n        if (this.cssShow) {\r\n          old[name as any] = el.style[name as 'position' | 'visibility' | 'display'];\r\n          el.style[name as any] = this.cssShow[name as 'position' | 'visibility' | 'display'];\r\n        }\r\n      });\r\n      this.oldProps.push(old);\r\n    });\r\n  }\r\n\r\n  restoreCssFromHiddenInit() {\r\n    // finish handle display:none on container or container parents\r\n    // - put values back the way they were\r\n    let i = 0;\r\n    if (this._hiddenParents) {\r\n      this._hiddenParents.forEach(el => {\r\n        const old = this.oldProps[i++];\r\n        Object.keys(this.cssShow).forEach(name => {\r\n          if (this.cssShow) {\r\n            el.style[name as CSSStyleDeclarationWritable] = (old as any)[name];\r\n          }\r\n        });\r\n      });\r\n      this._hiddenParents = [];\r\n    }\r\n  }\r\n\r\n  protected hasFrozenColumns() {\r\n    return this._options.frozenColumn! > -1;\r\n  }\r\n\r\n  /** Register an external Plugin */\r\n  registerPlugin<T extends SlickPlugin>(plugin: T) {\r\n    this.plugins.unshift(plugin);\r\n    plugin.init(this as unknown as SlickGridModel);\r\n  }\r\n\r\n  /** Unregister (destroy) an external Plugin */\r\n  unregisterPlugin(plugin: SlickPlugin) {\r\n    for (let i = this.plugins.length; i >= 0; i--) {\r\n      if (this.plugins[i] === plugin) {\r\n        this.plugins[i]?.destroy();\r\n        this.plugins.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Get a Plugin (addon) by its name */\r\n  getPluginByName<P extends SlickPlugin | undefined = undefined>(name: string) {\r\n    for (let i = this.plugins.length - 1; i >= 0; i--) {\r\n      if (this.plugins[i]?.pluginName === name) {\r\n        return this.plugins[i] as P;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Unregisters a current selection model and registers a new one. See the definition of SelectionModel for more information.\r\n   * @param {Object} selectionModel A SelectionModel.\r\n   */\r\n  setSelectionModel(model: SelectionModel) {\r\n    if (this.selectionModel) {\r\n      this.selectionModel.onSelectedRangesChanged.unsubscribe(this.handleSelectedRangesChanged.bind(this));\r\n      if (this.selectionModel.destroy) {\r\n        this.selectionModel.destroy();\r\n      }\r\n    }\r\n\r\n    this.selectionModel = model;\r\n    if (this.selectionModel) {\r\n      this.selectionModel.init(this as unknown as SlickGridModel);\r\n      this.selectionModel.onSelectedRangesChanged.subscribe(this.handleSelectedRangesChanged.bind(this));\r\n    }\r\n  }\r\n\r\n  /** Returns the current SelectionModel. See here for more information about SelectionModels. */\r\n  getSelectionModel() {\r\n    return this.selectionModel;\r\n  }\r\n\r\n  /** Get Grid Canvas Node DOM Element */\r\n  getCanvasNode(columnIdOrIdx?: number | string, rowIndex?: number) {\r\n    return this._getContainerElement(this.getCanvases(), columnIdOrIdx, rowIndex) as HTMLDivElement;\r\n  }\r\n\r\n  /** Get the canvas DOM element */\r\n  getActiveCanvasNode(e?: Event | SlickEventData_) {\r\n    if (e === undefined) {\r\n      return this._activeCanvasNode;\r\n    }\r\n\r\n    if (e instanceof SlickEventData) {\r\n      e = e.getNativeEvent<Event>();\r\n    }\r\n\r\n    this._activeCanvasNode = (e as any)?.target.closest('.grid-canvas');\r\n    return this._activeCanvasNode;\r\n  }\r\n\r\n  /** Get the canvas DOM element */\r\n  getCanvases() {\r\n    return this._canvas;\r\n  }\r\n\r\n  /** Get the Viewport DOM node element */\r\n  getViewportNode(columnIdOrIdx?: number | string, rowIndex?: number) {\r\n    return this._getContainerElement(this.getViewports(), columnIdOrIdx, rowIndex);\r\n  }\r\n\r\n  /** Get all the Viewport node elements */\r\n  getViewports() {\r\n    return this._viewport;\r\n  }\r\n\r\n  getActiveViewportNode(e: Event | SlickEventData_) {\r\n    this.setActiveViewportNode(e);\r\n\r\n    return this._activeViewportNode;\r\n  }\r\n\r\n  /** Sets an active viewport node */\r\n  setActiveViewportNode(e: Event | SlickEventData_) {\r\n    if (e instanceof SlickEventData) {\r\n      e = e.getNativeEvent<Event>();\r\n    }\r\n    this._activeViewportNode = (e as any)?.target.closest('.slick-viewport');\r\n    return this._activeViewportNode;\r\n  }\r\n\r\n  protected _getContainerElement(targetContainers: HTMLElement[], columnIdOrIdx?: number | string, rowIndex?: number) {\r\n    if (!targetContainers) { return; }\r\n    if (!columnIdOrIdx) { columnIdOrIdx = 0; }\r\n    if (!rowIndex) { rowIndex = 0; }\r\n\r\n    const idx = (typeof columnIdOrIdx === 'number' ? columnIdOrIdx : this.getColumnIndex(columnIdOrIdx));\r\n\r\n    const isBottomSide = this.hasFrozenRows && rowIndex >= this.actualFrozenRow + (this._options.frozenBottom ? 0 : 1);\r\n    const isRightSide = this.hasFrozenColumns() && idx > this._options.frozenColumn!;\r\n\r\n    return targetContainers[(isBottomSide ? 2 : 0) + (isRightSide ? 1 : 0)];\r\n  }\r\n\r\n  protected measureScrollbar() {\r\n    let className = '';\r\n    this._viewport.forEach(v => className += v.className);\r\n    const outerdiv = Utils.createDomElement('div', { className, style: { position: 'absolute', top: '-10000px', left: '-10000px', overflow: 'auto', width: '100px', height: '100px' } }, document.body);\r\n    const innerdiv = Utils.createDomElement('div', { style: { width: '200px', height: '200px', overflow: 'auto' } }, outerdiv);\r\n    const dim = {\r\n      width: outerdiv.offsetWidth - outerdiv.clientWidth,\r\n      height: outerdiv.offsetHeight - outerdiv.clientHeight\r\n    };\r\n    innerdiv.remove();\r\n    outerdiv.remove();\r\n    return dim;\r\n  }\r\n\r\n  /** Get the headers width in pixel */\r\n  getHeadersWidth() {\r\n    this.headersWidth = this.headersWidthL = this.headersWidthR = 0;\r\n    const includeScrollbar = !this._options.autoHeight;\r\n\r\n    let i = 0;\r\n    const ii = this.columns.length;\r\n    for (i = 0; i < ii; i++) {\r\n      if (!this.columns[i] || this.columns[i].hidden) { continue; }\r\n\r\n      const width = this.columns[i].width;\r\n\r\n      if ((this._options.frozenColumn!) > -1 && (i > this._options.frozenColumn!)) {\r\n        this.headersWidthR += width || 0;\r\n      } else {\r\n        this.headersWidthL += width || 0;\r\n      }\r\n    }\r\n\r\n    if (includeScrollbar) {\r\n      if ((this._options.frozenColumn!) > -1 && (i > this._options.frozenColumn!)) {\r\n        this.headersWidthR += this.scrollbarDimensions?.width ?? 0;\r\n      } else {\r\n        this.headersWidthL += this.scrollbarDimensions?.width ?? 0;\r\n      }\r\n    }\r\n\r\n    if (this.hasFrozenColumns()) {\r\n      this.headersWidthL = this.headersWidthL + 1000;\r\n\r\n      this.headersWidthR = Math.max(this.headersWidthR, this.viewportW) + this.headersWidthL;\r\n      this.headersWidthR += this.scrollbarDimensions?.width ?? 0;\r\n    } else {\r\n      this.headersWidthL += this.scrollbarDimensions?.width ?? 0;\r\n      this.headersWidthL = Math.max(this.headersWidthL, this.viewportW) + 1000;\r\n    }\r\n\r\n    this.headersWidth = this.headersWidthL + this.headersWidthR;\r\n    return Math.max(this.headersWidth, this.viewportW) + 1000;\r\n  }\r\n\r\n  /** Get the grid canvas width */\r\n  getCanvasWidth(): number {\r\n    const availableWidth = this.viewportHasVScroll ? this.viewportW - (this.scrollbarDimensions?.width ?? 0) : this.viewportW;\r\n    let i = this.columns.length;\r\n\r\n    this.canvasWidthL = this.canvasWidthR = 0;\r\n\r\n    while (i--) {\r\n      if (!this.columns[i] || this.columns[i].hidden) { continue; }\r\n\r\n      if (this.hasFrozenColumns() && (i > this._options.frozenColumn!)) {\r\n        this.canvasWidthR += this.columns[i].width || 0;\r\n      } else {\r\n        this.canvasWidthL += this.columns[i].width || 0;\r\n      }\r\n    }\r\n    let totalRowWidth = this.canvasWidthL + this.canvasWidthR;\r\n    if (this._options.fullWidthRows) {\r\n      const extraWidth = Math.max(totalRowWidth, availableWidth) - totalRowWidth;\r\n      if (extraWidth > 0) {\r\n        totalRowWidth += extraWidth;\r\n        if (this.hasFrozenColumns()) {\r\n          this.canvasWidthR += extraWidth;\r\n        } else {\r\n          this.canvasWidthL += extraWidth;\r\n        }\r\n      }\r\n    }\r\n    return totalRowWidth;\r\n  }\r\n\r\n  protected updateCanvasWidth(forceColumnWidthsUpdate?: boolean) {\r\n    const oldCanvasWidth = this.canvasWidth;\r\n    const oldCanvasWidthL = this.canvasWidthL;\r\n    const oldCanvasWidthR = this.canvasWidthR;\r\n    this.canvasWidth = this.getCanvasWidth();\r\n\r\n    if (this._options.createTopHeaderPanel) {\r\n      Utils.width(this._topHeaderPanel, this._options.topHeaderPanelWidth ?? this.canvasWidth);\r\n    }\r\n\r\n    const widthChanged = this.canvasWidth !== oldCanvasWidth || this.canvasWidthL !== oldCanvasWidthL || this.canvasWidthR !== oldCanvasWidthR;\r\n\r\n    if (widthChanged || this.hasFrozenColumns() || this.hasFrozenRows) {\r\n      Utils.width(this._canvasTopL, this.canvasWidthL);\r\n\r\n      this.getHeadersWidth();\r\n\r\n      Utils.width(this._headerL, this.headersWidthL);\r\n      Utils.width(this._headerR, this.headersWidthR);\r\n\r\n      if (this.hasFrozenColumns()) {\r\n        const cWidth = Utils.width(this._container) || 0;\r\n        if (cWidth > 0 && this.canvasWidthL > cWidth && this._options.throwWhenFrozenNotAllViewable) {\r\n          throw new Error('[SlickGrid] Frozen columns cannot be wider than the actual grid container width. '\r\n            + 'Make sure to have less columns freezed or make your grid container wider');\r\n        }\r\n        Utils.width(this._canvasTopR, this.canvasWidthR);\r\n\r\n        Utils.width(this._paneHeaderL, this.canvasWidthL);\r\n        Utils.setStyleSize(this._paneHeaderR, 'left', this.canvasWidthL);\r\n        Utils.setStyleSize(this._paneHeaderR, 'width', this.viewportW - this.canvasWidthL);\r\n\r\n        Utils.width(this._paneTopL, this.canvasWidthL);\r\n        Utils.setStyleSize(this._paneTopR, 'left', this.canvasWidthL);\r\n        Utils.width(this._paneTopR, this.viewportW - this.canvasWidthL);\r\n\r\n        Utils.width(this._headerRowScrollerL, this.canvasWidthL);\r\n        Utils.width(this._headerRowScrollerR, this.viewportW - this.canvasWidthL);\r\n\r\n        Utils.width(this._headerRowL, this.canvasWidthL);\r\n        Utils.width(this._headerRowR, this.canvasWidthR);\r\n\r\n        if (this._options.createFooterRow) {\r\n          Utils.width(this._footerRowScrollerL, this.canvasWidthL);\r\n          Utils.width(this._footerRowScrollerR, this.viewportW - this.canvasWidthL);\r\n\r\n          Utils.width(this._footerRowL, this.canvasWidthL);\r\n          Utils.width(this._footerRowR, this.canvasWidthR);\r\n        }\r\n        if (this._options.createPreHeaderPanel) {\r\n          Utils.width(this._preHeaderPanel, this._options.preHeaderPanelWidth ?? this.canvasWidth);\r\n        }\r\n        Utils.width(this._viewportTopL, this.canvasWidthL);\r\n        Utils.width(this._viewportTopR, this.viewportW - this.canvasWidthL);\r\n\r\n        if (this.hasFrozenRows) {\r\n          Utils.width(this._paneBottomL, this.canvasWidthL);\r\n          Utils.setStyleSize(this._paneBottomR, 'left', this.canvasWidthL);\r\n\r\n          Utils.width(this._viewportBottomL, this.canvasWidthL);\r\n          Utils.width(this._viewportBottomR, this.viewportW - this.canvasWidthL);\r\n\r\n          Utils.width(this._canvasBottomL, this.canvasWidthL);\r\n          Utils.width(this._canvasBottomR, this.canvasWidthR);\r\n        }\r\n      } else {\r\n        Utils.width(this._paneHeaderL, '100%');\r\n        Utils.width(this._paneTopL, '100%');\r\n        Utils.width(this._headerRowScrollerL, '100%');\r\n        Utils.width(this._headerRowL, this.canvasWidth);\r\n\r\n        if (this._options.createFooterRow) {\r\n          Utils.width(this._footerRowScrollerL, '100%');\r\n          Utils.width(this._footerRowL, this.canvasWidth);\r\n        }\r\n\r\n        if (this._options.createPreHeaderPanel) {\r\n          Utils.width(this._preHeaderPanel, this._options.preHeaderPanelWidth ?? this.canvasWidth);\r\n        }\r\n        Utils.width(this._viewportTopL, '100%');\r\n\r\n        if (this.hasFrozenRows) {\r\n          Utils.width(this._viewportBottomL, '100%');\r\n          Utils.width(this._canvasBottomL, this.canvasWidthL);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.viewportHasHScroll = (this.canvasWidth >= this.viewportW - (this.scrollbarDimensions?.width ?? 0));\r\n\r\n    Utils.width(this._headerRowSpacerL, this.canvasWidth + (this.viewportHasVScroll ? (this.scrollbarDimensions?.width ?? 0) : 0));\r\n    Utils.width(this._headerRowSpacerR, this.canvasWidth + (this.viewportHasVScroll ? (this.scrollbarDimensions?.width ?? 0) : 0));\r\n\r\n    if (this._options.createFooterRow) {\r\n      Utils.width(this._footerRowSpacerL, this.canvasWidth + (this.viewportHasVScroll ? (this.scrollbarDimensions?.width ?? 0) : 0));\r\n      Utils.width(this._footerRowSpacerR, this.canvasWidth + (this.viewportHasVScroll ? (this.scrollbarDimensions?.width ?? 0) : 0));\r\n    }\r\n\r\n    if (widthChanged || forceColumnWidthsUpdate) {\r\n      this.applyColumnWidths();\r\n    }\r\n  }\r\n\r\n  protected disableSelection(target: HTMLElement[]) {\r\n    target.forEach((el) => {\r\n      el.setAttribute('unselectable', 'on');\r\n      (el.style as any).mozUserSelect = 'none';\r\n      this._bindingEventService.bind(el, 'selectstart', () => false);\r\n    });\r\n  }\r\n\r\n  protected getMaxSupportedCssHeight() {\r\n    let supportedHeight = 1000000;\r\n    // FF reports the height back but still renders blank after ~6M px\r\n    // let testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? 6000000 : 1000000000;\r\n    const testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? this._options.ffMaxSupportedCssHeight : this._options.maxSupportedCssHeight;\r\n    const div = Utils.createDomElement('div', { style: { display: 'hidden' } }, document.body);\r\n\r\n    while (true) {\r\n      const test = supportedHeight * 2;\r\n      Utils.height(div, test);\r\n      const height = Utils.height(div);\r\n\r\n      if (test > testUpTo! || height !== test) {\r\n        break;\r\n      } else {\r\n        supportedHeight = test;\r\n      }\r\n    }\r\n\r\n    div.remove();\r\n    return supportedHeight;\r\n  }\r\n\r\n  /** Get grid unique identifier */\r\n  getUID() {\r\n    return this.uid;\r\n  }\r\n\r\n  /** Get Header Column Width Difference in pixel */\r\n  getHeaderColumnWidthDiff() {\r\n    return this.headerColumnWidthDiff;\r\n  }\r\n\r\n  /** Get scrollbar dimensions */\r\n  getScrollbarDimensions() {\r\n    return this.scrollbarDimensions;\r\n  }\r\n\r\n  /** Get the displayed scrollbar dimensions */\r\n  getDisplayedScrollbarDimensions() {\r\n    return {\r\n      width: this.viewportHasVScroll ? (this.scrollbarDimensions?.width ?? 0) : 0,\r\n      height: this.viewportHasHScroll ? (this.scrollbarDimensions?.height ?? 0) : 0\r\n    };\r\n  }\r\n\r\n  /** Get the absolute column minimum width */\r\n  getAbsoluteColumnMinWidth(): number {\r\n    return this.absoluteColumnMinWidth;\r\n  }\r\n\r\n  getPubSubService(): BasePubSub | undefined {\r\n    return this._pubSubService;\r\n  }\r\n\r\n  // TODO:  this is static.  need to handle page mutation.\r\n  protected bindAncestorScrollEvents() {\r\n    let elem: HTMLElement | null = (this.hasFrozenRows && !this._options.frozenBottom) ? this._canvasBottomL : this._canvasTopL;\r\n    while ((elem = elem!.parentNode as HTMLElement) !== document.body && elem) {\r\n      // bind to scroll containers only\r\n      if (elem === this._viewportTopL || elem.scrollWidth !== elem.clientWidth || elem.scrollHeight !== elem.clientHeight) {\r\n        this._boundAncestors.push(elem);\r\n        this._bindingEventService.bind(elem, 'scroll', this.handleActiveCellPositionChange.bind(this));\r\n      }\r\n    }\r\n  }\r\n\r\n  protected unbindAncestorScrollEvents() {\r\n    this._boundAncestors.forEach((ancestor) => {\r\n      this._bindingEventService.unbindByEventName(ancestor, 'scroll');\r\n    });\r\n    this._boundAncestors = [];\r\n  }\r\n\r\n  /**\r\n   * Updates an existing column definition and a corresponding header DOM element with the new title and tooltip.\r\n   * @param {Number|String} columnId Column id.\r\n   * @param {string | HTMLElement | DocumentFragment} [title] New column name.\r\n   * @param {String} [toolTip] New column tooltip.\r\n   */\r\n  updateColumnHeader(columnId: number | string, title?: string | HTMLElement | DocumentFragment, toolTip?: string) {\r\n    if (this.initialized) {\r\n      const idx = this.getColumnIndex(columnId);\r\n      if (!Utils.isDefined(idx)) {\r\n        return;\r\n      }\r\n\r\n      const columnDef = this.columns[idx];\r\n      const header: HTMLElement | undefined = this.getColumnByIndex(idx);\r\n      if (header) {\r\n        if (title !== undefined) {\r\n          this.columns[idx].name = title;\r\n        }\r\n        if (toolTip !== undefined) {\r\n          this.columns[idx].toolTip = toolTip;\r\n        }\r\n\r\n        this.trigger(this.onBeforeHeaderCellDestroy, {\r\n          node: header,\r\n          column: columnDef,\r\n          grid: this\r\n        });\r\n\r\n        header.setAttribute('title', toolTip || '');\r\n        if (title !== undefined) {\r\n          this.applyHtmlCode(header.children[0] as HTMLElement, title);\r\n        }\r\n\r\n        this.trigger(this.onHeaderCellRendered, {\r\n          node: header,\r\n          column: columnDef,\r\n          grid: this\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the Header DOM element\r\n   * @param {C} columnDef - column definition\r\n   */\r\n  getHeader(columnDef: C) {\r\n    if (!columnDef) {\r\n      return this.hasFrozenColumns() ? this._headers : this._headerL;\r\n    }\r\n    const idx = this.getColumnIndex(columnDef.id);\r\n    return this.hasFrozenColumns() ? ((idx <= this._options.frozenColumn!) ? this._headerL : this._headerR) : this._headerL;\r\n  }\r\n\r\n  /**\r\n   * Get a specific Header Column DOM element by its column Id or index\r\n   * @param {Number|String} columnIdOrIdx - column Id or index\r\n   */\r\n  getHeaderColumn(columnIdOrIdx: number | string) {\r\n    const idx = (typeof columnIdOrIdx === 'number' ? columnIdOrIdx : this.getColumnIndex(columnIdOrIdx));\r\n    const targetHeader = this.hasFrozenColumns() ? ((idx <= this._options.frozenColumn!) ? this._headerL : this._headerR) : this._headerL;\r\n    const targetIndex = this.hasFrozenColumns() ? ((idx <= this._options.frozenColumn!) ? idx : idx - this._options.frozenColumn! - 1) : idx;\r\n\r\n    return targetHeader.children[targetIndex] as HTMLDivElement;\r\n  }\r\n\r\n  /** Get the Header Row DOM element */\r\n  getHeaderRow() {\r\n    return this.hasFrozenColumns() ? this._headerRows : this._headerRows[0];\r\n  }\r\n\r\n  /** Get the Footer DOM element */\r\n  getFooterRow() {\r\n    return this.hasFrozenColumns() ? this._footerRow : this._footerRow[0];\r\n  }\r\n\r\n  /** @alias `getPreHeaderPanelLeft` */\r\n  getPreHeaderPanel() {\r\n    return this._preHeaderPanel;\r\n  }\r\n\r\n  /** Get the Pre-Header Panel Left DOM node element */\r\n  getPreHeaderPanelLeft() {\r\n    return this._preHeaderPanel;\r\n  }\r\n\r\n  /** Get the Pre-Header Panel Right DOM node element */\r\n  getPreHeaderPanelRight() {\r\n    return this._preHeaderPanelR;\r\n  }\r\n\r\n  /** Get the Top-Header Panel DOM node element */\r\n  getTopHeaderPanel() {\r\n    return this._topHeaderPanel;\r\n  }\r\n\r\n  /**\r\n   * Get Header Row Column DOM element by its column Id or index\r\n   * @param {Number|String} columnIdOrIdx - column Id or index\r\n   */\r\n  getHeaderRowColumn(columnIdOrIdx: number | string) {\r\n    let idx = (typeof columnIdOrIdx === 'number' ? columnIdOrIdx : this.getColumnIndex(columnIdOrIdx));\r\n    let headerRowTarget: HTMLDivElement;\r\n\r\n    if (this.hasFrozenColumns()) {\r\n      if (idx <= this._options.frozenColumn!) {\r\n        headerRowTarget = this._headerRowL;\r\n      } else {\r\n        headerRowTarget = this._headerRowR;\r\n        idx -= this._options.frozenColumn! + 1;\r\n      }\r\n    } else {\r\n      headerRowTarget = this._headerRowL;\r\n    }\r\n\r\n    return headerRowTarget.children[idx] as HTMLDivElement;\r\n  }\r\n\r\n  /**\r\n   * Get the Footer Row Column DOM element by its column Id or index\r\n   * @param {Number|String} columnIdOrIdx - column Id or index\r\n   */\r\n  getFooterRowColumn(columnIdOrIdx: number | string) {\r\n    let idx = (typeof columnIdOrIdx === 'number' ? columnIdOrIdx : this.getColumnIndex(columnIdOrIdx));\r\n    let footerRowTarget: HTMLDivElement;\r\n\r\n    if (this.hasFrozenColumns()) {\r\n      if (idx <= this._options.frozenColumn!) {\r\n        footerRowTarget = this._footerRowL;\r\n      } else {\r\n        footerRowTarget = this._footerRowR;\r\n\r\n        idx -= this._options.frozenColumn! + 1;\r\n      }\r\n    } else {\r\n      footerRowTarget = this._footerRowL;\r\n    }\r\n\r\n    return footerRowTarget.children[idx] as HTMLDivElement;\r\n  }\r\n\r\n  protected createColumnFooter() {\r\n    if (this._options.createFooterRow) {\r\n      this._footerRow.forEach((footer) => {\r\n        const columnElements = footer.querySelectorAll('.slick-footerrow-column');\r\n        columnElements.forEach((column) => {\r\n          const columnDef = Utils.storage.get(column, 'column');\r\n          this.trigger(this.onBeforeFooterRowCellDestroy, {\r\n            node: column,\r\n            column: columnDef,\r\n            grid: this\r\n          });\r\n        });\r\n      });\r\n\r\n      Utils.emptyElement(this._footerRowL);\r\n      Utils.emptyElement(this._footerRowR);\r\n\r\n      for (let i = 0; i < this.columns.length; i++) {\r\n        const m = this.columns[i];\r\n        if (!m || m.hidden) { continue; }\r\n\r\n        const footerRowCell = Utils.createDomElement('div', { className: `ui-state-default slick-state-default slick-footerrow-column l${i} r${i}` }, this.hasFrozenColumns() && (i > this._options.frozenColumn!) ? this._footerRowR : this._footerRowL);\r\n        const className = this.hasFrozenColumns() && i <= this._options.frozenColumn! ? 'frozen' : null;\r\n        if (className) {\r\n          footerRowCell.classList.add(className);\r\n        }\r\n\r\n        Utils.storage.put(footerRowCell, 'column', m);\r\n\r\n        this.trigger(this.onFooterRowCellRendered, {\r\n          node: footerRowCell,\r\n          column: m,\r\n          grid: this\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  protected handleHeaderMouseHoverOn(e: Event | SlickEventData_) {\r\n    (e as any)?.target.classList.add('ui-state-hover', 'slick-state-hover');\r\n  }\r\n\r\n  protected handleHeaderMouseHoverOff(e: Event | SlickEventData_) {\r\n    (e as any)?.target.classList.remove('ui-state-hover', 'slick-state-hover');\r\n  }\r\n\r\n  protected createColumnHeaders() {\r\n    this._headers.forEach((header) => {\r\n      const columnElements = header.querySelectorAll('.slick-header-column');\r\n      columnElements.forEach((column) => {\r\n        const columnDef = Utils.storage.get(column, 'column');\r\n        if (columnDef) {\r\n          this.trigger(this.onBeforeHeaderCellDestroy, {\r\n            node: column,\r\n            column: columnDef,\r\n            grid: this\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    Utils.emptyElement(this._headerL);\r\n    Utils.emptyElement(this._headerR);\r\n\r\n    this.getHeadersWidth();\r\n\r\n    Utils.width(this._headerL, this.headersWidthL);\r\n    Utils.width(this._headerR, this.headersWidthR);\r\n\r\n    this._headerRows.forEach((row) => {\r\n      const columnElements = row.querySelectorAll('.slick-headerrow-column');\r\n      columnElements.forEach((column) => {\r\n        const columnDef = Utils.storage.get(column, 'column');\r\n        if (columnDef) {\r\n          this.trigger(this.onBeforeHeaderRowCellDestroy, {\r\n            node: this,\r\n            column: columnDef,\r\n            grid: this\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    Utils.emptyElement(this._headerRowL);\r\n    Utils.emptyElement(this._headerRowR);\r\n\r\n    if (this._options.createFooterRow) {\r\n      const footerRowLColumnElements = this._footerRowL.querySelectorAll('.slick-footerrow-column');\r\n      footerRowLColumnElements.forEach((column) => {\r\n        const columnDef = Utils.storage.get(column, 'column');\r\n        if (columnDef) {\r\n          this.trigger(this.onBeforeFooterRowCellDestroy, {\r\n            node: this,\r\n            column: columnDef,\r\n            grid: this\r\n          });\r\n        }\r\n      });\r\n      Utils.emptyElement(this._footerRowL);\r\n\r\n      if (this.hasFrozenColumns()) {\r\n        const footerRowRColumnElements = this._footerRowR.querySelectorAll('.slick-footerrow-column');\r\n        footerRowRColumnElements.forEach((column) => {\r\n          const columnDef = Utils.storage.get(column, 'column');\r\n          if (columnDef) {\r\n            this.trigger(this.onBeforeFooterRowCellDestroy, {\r\n              node: this,\r\n              column: columnDef,\r\n              grid: this\r\n            });\r\n          }\r\n        });\r\n        Utils.emptyElement(this._footerRowR);\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < this.columns.length; i++) {\r\n      const m: C = this.columns[i];\r\n      if (m.hidden) { continue; }\r\n\r\n      const headerTarget = this.hasFrozenColumns() ? ((i <= this._options.frozenColumn!) ? this._headerL : this._headerR) : this._headerL;\r\n      const headerRowTarget = this.hasFrozenColumns() ? ((i <= this._options.frozenColumn!) ? this._headerRowL : this._headerRowR) : this._headerRowL;\r\n\r\n      const header = Utils.createDomElement('div', { id: `${this.uid + m.id}`, dataset: { id: String(m.id) }, role: 'columnheader', className: 'ui-state-default slick-state-default slick-header-column' }, headerTarget);\r\n      if (m.toolTip) {\r\n        header.title = m.toolTip;\r\n      }\r\n      if (!m.reorderable) {\r\n        header.classList.add(this._options.unorderableColumnCssClass!);\r\n      }\r\n      const colNameElm = Utils.createDomElement('span', { className: 'slick-column-name' }, header);\r\n      this.applyHtmlCode(colNameElm, m.name as string);\r\n\r\n      Utils.width(header, m.width! - this.headerColumnWidthDiff);\r\n\r\n      let classname = m.headerCssClass || null;\r\n      if (classname) {\r\n        header.classList.add(...Utils.classNameToList(classname));\r\n      }\r\n      classname = this.hasFrozenColumns() && i <= this._options.frozenColumn! ? 'frozen' : null;\r\n      if (classname) {\r\n        header.classList.add(classname);\r\n      }\r\n\r\n      this._bindingEventService.bind(header, 'mouseenter', this.handleHeaderMouseEnter.bind(this) as EventListener);\r\n      this._bindingEventService.bind(header, 'mouseleave', this.handleHeaderMouseLeave.bind(this) as EventListener);\r\n\r\n      Utils.storage.put(header, 'column', m);\r\n\r\n      if (this._options.enableColumnReorder || m.sortable) {\r\n        this._bindingEventService.bind(header, 'mouseenter', this.handleHeaderMouseHoverOn.bind(this) as EventListener);\r\n        this._bindingEventService.bind(header, 'mouseleave', this.handleHeaderMouseHoverOff.bind(this) as EventListener);\r\n      }\r\n\r\n      if (m.hasOwnProperty('headerCellAttrs') && m.headerCellAttrs instanceof Object) {\r\n        Object.keys(m.headerCellAttrs).forEach(key => {\r\n          if (m.headerCellAttrs.hasOwnProperty(key)) {\r\n            header.setAttribute(key, m.headerCellAttrs[key]);\r\n          }\r\n        });\r\n      }\r\n\r\n      if (m.sortable) {\r\n        header.classList.add('slick-header-sortable');\r\n        Utils.createDomElement('div', { className: `slick-sort-indicator ${this._options.numberedMultiColumnSort && !this._options.sortColNumberInSeparateSpan ? ' slick-sort-indicator-numbered' : ''}` }, header);\r\n        if (this._options.numberedMultiColumnSort && this._options.sortColNumberInSeparateSpan) {\r\n          Utils.createDomElement('div', { className: 'slick-sort-indicator-numbered' }, header);\r\n        }\r\n      }\r\n\r\n      this.trigger(this.onHeaderCellRendered, {\r\n        node: header,\r\n        column: m,\r\n        grid: this\r\n      });\r\n\r\n      if (this._options.showHeaderRow) {\r\n        const headerRowCell = Utils.createDomElement('div', { className: `ui-state-default slick-state-default slick-headerrow-column l${i} r${i}` }, headerRowTarget);\r\n        const frozenClasses = this.hasFrozenColumns() && i <= this._options.frozenColumn! ? 'frozen' : null;\r\n        if (frozenClasses) {\r\n          headerRowCell.classList.add(frozenClasses);\r\n        }\r\n\r\n        this._bindingEventService.bind(headerRowCell, 'mouseenter', this.handleHeaderRowMouseEnter.bind(this) as EventListener);\r\n        this._bindingEventService.bind(headerRowCell, 'mouseleave', this.handleHeaderRowMouseLeave.bind(this) as EventListener);\r\n\r\n        Utils.storage.put(headerRowCell, 'column', m);\r\n\r\n        this.trigger(this.onHeaderRowCellRendered, {\r\n          node: headerRowCell,\r\n          column: m,\r\n          grid: this\r\n        });\r\n      }\r\n      if (this._options.createFooterRow && this._options.showFooterRow) {\r\n        const footerRowTarget = this.hasFrozenColumns() ? ((i <= this._options.frozenColumn!) ? this._footerRow[0] : this._footerRow[1]) : this._footerRow[0];\r\n        const footerRowCell = Utils.createDomElement('div', { className: `ui-state-default slick-state-default slick-footerrow-column l${i} r${i}` }, footerRowTarget);\r\n        Utils.storage.put(footerRowCell, 'column', m);\r\n\r\n        this.trigger(this.onFooterRowCellRendered, {\r\n          node: footerRowCell,\r\n          column: m,\r\n          grid: this\r\n        });\r\n      }\r\n    }\r\n\r\n    this.setSortColumns(this.sortColumns);\r\n    this.setupColumnResize();\r\n    if (this._options.enableColumnReorder) {\r\n      if (typeof this._options.enableColumnReorder === 'function') {\r\n        this._options.enableColumnReorder(this as unknown as SlickGridModel, this._headers, this.headerColumnWidthDiff, this.setColumns as any, this.setupColumnResize, this.columns, this.getColumnIndex, this.uid, this.trigger);\r\n      } else {\r\n        this.setupColumnReorder();\r\n      }\r\n    }\r\n  }\r\n\r\n  protected setupColumnSort() {\r\n    this._headers.forEach((header) => {\r\n      this._bindingEventService.bind(header, 'click', (e: any) => {\r\n        if (this.columnResizeDragging) {\r\n          return;\r\n        }\r\n\r\n        if (e.target.classList.contains('slick-resizable-handle')) {\r\n          return;\r\n        }\r\n\r\n        const coll = e.target.closest('.slick-header-column');\r\n        if (!coll) {\r\n          return;\r\n        }\r\n\r\n        const column = Utils.storage.get(coll, 'column');\r\n        if (column.sortable) {\r\n          if (!this.getEditorLock()?.commitCurrentEdit()) {\r\n            return;\r\n          }\r\n\r\n          const previousSortColumns = this.sortColumns.slice();\r\n          let sortColumn: ColumnSort | null = null;\r\n          let i = 0;\r\n          for (; i < this.sortColumns.length; i++) {\r\n            if (this.sortColumns[i].columnId === column.id) {\r\n              sortColumn = this.sortColumns[i];\r\n              sortColumn.sortAsc = !sortColumn.sortAsc;\r\n              break;\r\n            }\r\n          }\r\n          const hadSortCol = !!sortColumn;\r\n\r\n          if (this._options.tristateMultiColumnSort) {\r\n            if (!sortColumn) {\r\n              sortColumn = { columnId: column.id, sortAsc: column.defaultSortAsc, sortCol: column };\r\n            }\r\n            if (hadSortCol && sortColumn.sortAsc) {\r\n              // three state: remove sort rather than go back to ASC\r\n              this.sortColumns.splice(i, 1);\r\n              sortColumn = null;\r\n            }\r\n            if (!this._options.multiColumnSort) {\r\n              this.sortColumns = [];\r\n            }\r\n            if (sortColumn && (!hadSortCol || !this._options.multiColumnSort)) {\r\n              this.sortColumns.push(sortColumn);\r\n            }\r\n          } else {\r\n            // legacy behaviour\r\n            if (e.metaKey && this._options.multiColumnSort) {\r\n              if (sortColumn) {\r\n                this.sortColumns.splice(i, 1);\r\n              }\r\n            } else {\r\n              if ((!e.shiftKey && !e.metaKey) || !this._options.multiColumnSort) {\r\n                this.sortColumns = [];\r\n              }\r\n\r\n              if (!sortColumn) {\r\n                sortColumn = { columnId: column.id, sortAsc: column.defaultSortAsc, sortCol: column };\r\n                this.sortColumns.push(sortColumn);\r\n              } else if (this.sortColumns.length === 0) {\r\n                this.sortColumns.push(sortColumn);\r\n              }\r\n            }\r\n          }\r\n\r\n          let onSortArgs;\r\n          if (!this._options.multiColumnSort) {\r\n            onSortArgs = {\r\n              multiColumnSort: false,\r\n              previousSortColumns,\r\n              columnId: (this.sortColumns.length > 0 ? column.id : null),\r\n              sortCol: (this.sortColumns.length > 0 ? column : null),\r\n              sortAsc: (this.sortColumns.length > 0 ? this.sortColumns[0].sortAsc : true)\r\n            };\r\n          } else {\r\n            onSortArgs = {\r\n              multiColumnSort: true,\r\n              previousSortColumns,\r\n              sortCols: this.sortColumns.map((col) => {\r\n                const tempCol = this.columns[this.getColumnIndex(col.columnId)];\r\n                return !tempCol || tempCol.hidden ? null : { columnId: tempCol.id, sortCol: tempCol, sortAsc: col.sortAsc };\r\n              }).filter((el) => el)\r\n            };\r\n          }\r\n\r\n          if (this.trigger(this.onBeforeSort, onSortArgs, e).getReturnValue() !== false) {\r\n            this.setSortColumns(this.sortColumns);\r\n            this.trigger(this.onSort, onSortArgs, e);\r\n          }\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  protected setupColumnReorder() {\r\n    this.sortableSideLeftInstance?.destroy();\r\n    this.sortableSideRightInstance?.destroy();\r\n\r\n    let columnScrollTimer: any = null;\r\n\r\n    const scrollColumnsRight = () => this._viewportScrollContainerX.scrollLeft = this._viewportScrollContainerX.scrollLeft + 10;\r\n    const scrollColumnsLeft = () => this._viewportScrollContainerX.scrollLeft = this._viewportScrollContainerX.scrollLeft - 10;\r\n\r\n    let canDragScroll = false;\r\n    const sortableOptions = {\r\n      animation: 50,\r\n      direction: 'horizontal',\r\n      chosenClass: 'slick-header-column-active',\r\n      ghostClass: 'slick-sortable-placeholder',\r\n      draggable: '.slick-header-column',\r\n      dragoverBubble: false,\r\n      revertClone: true,\r\n      scroll: !this.hasFrozenColumns(), // enable auto-scroll\r\n      // lock unorderable columns by using a combo of filter + onMove\r\n      filter: `.${this._options.unorderableColumnCssClass}`,\r\n      onMove: (event: MouseEvent & { related: HTMLElement; }) => {\r\n        return !event.related.classList.contains(this._options.unorderableColumnCssClass as string);\r\n      },\r\n      onStart: (e: { item: any; originalEvent: MouseEvent; }) => {\r\n        canDragScroll = !this.hasFrozenColumns() ||\r\n          Utils.offset(e.item)!.left > Utils.offset(this._viewportScrollContainerX)!.left;\r\n\r\n        if (canDragScroll && e.originalEvent.pageX > this._container.clientWidth) {\r\n          if (!(columnScrollTimer)) {\r\n            columnScrollTimer = window.setInterval(scrollColumnsRight, 100);\r\n          }\r\n        } else if (canDragScroll && e.originalEvent.pageX < Utils.offset(this._viewportScrollContainerX)!.left) {\r\n          if (!(columnScrollTimer)) {\r\n            columnScrollTimer = window.setInterval(scrollColumnsLeft, 100);\r\n          }\r\n        } else {\r\n          window.clearInterval(columnScrollTimer);\r\n          columnScrollTimer = null;\r\n        }\r\n      },\r\n      onEnd: (e: MouseEvent & { item: any; originalEvent: MouseEvent; }) => {\r\n        window.clearInterval(columnScrollTimer);\r\n        columnScrollTimer = null;\r\n\r\n        if (!this.getEditorLock()?.commitCurrentEdit()) {\r\n          return;\r\n        }\r\n\r\n        let reorderedIds = this.sortableSideLeftInstance?.toArray() ?? [];\r\n        reorderedIds = reorderedIds.concat(this.sortableSideRightInstance?.toArray() ?? []);\r\n\r\n        const reorderedColumns: C[] = [];\r\n        for (let i = 0; i < reorderedIds.length; i++) {\r\n          reorderedColumns.push(this.columns[this.getColumnIndex(reorderedIds[i])]);\r\n        }\r\n        this.setColumns(reorderedColumns);\r\n\r\n        this.trigger(this.onColumnsReordered, { impactedColumns: this.columns });\r\n        e.stopPropagation();\r\n        this.setupColumnResize();\r\n        if (this.activeCellNode) {\r\n          this.setFocus(); // refocus on active cell\r\n        }\r\n      }\r\n    };\r\n\r\n    this.sortableSideLeftInstance = Sortable.create(this._headerL, sortableOptions);\r\n    this.sortableSideRightInstance = Sortable.create(this._headerR, sortableOptions);\r\n  }\r\n\r\n  protected getHeaderChildren() {\r\n    const a = Array.from(this._headers[0].children);\r\n    const b = Array.from(this._headers[1].children);\r\n    return a.concat(b) as HTMLElement[];\r\n  }\r\n\r\n  protected handleResizeableDoubleClick(evt: MouseEvent & { target: HTMLDivElement; }) {\r\n    const triggeredByColumn = evt.target.parentElement!.id.replace(this.uid, '');\r\n    this.trigger(this.onColumnsResizeDblClick, { triggeredByColumn });\r\n  }\r\n\r\n  protected setupColumnResize() {\r\n    if (typeof Resizable === 'undefined') {\r\n      throw new Error(`Slick.Resizable is undefined, make sure to import \"slick.interactions.js\"`);\r\n    }\r\n\r\n    let j: number;\r\n    let k: number;\r\n    let c: C;\r\n    let pageX: number;\r\n    let minPageX: number;\r\n    let maxPageX: number;\r\n    let firstResizable: number | undefined;\r\n    let lastResizable = -1;\r\n    let frozenLeftColMaxWidth = 0;\r\n\r\n    const children: HTMLElement[] = this.getHeaderChildren();\r\n    const vc = this.getVisibleColumns();\r\n    for (let i = 0; i < children.length; i++) {\r\n      const child = children[i];\r\n      const handles = child.querySelectorAll('.slick-resizable-handle');\r\n      handles.forEach((handle) => handle.remove());\r\n\r\n      if (i >= vc.length || !vc[i]) {\r\n        continue;\r\n      }\r\n\r\n      if (vc[i].resizable) {\r\n        if (firstResizable === undefined) {\r\n          firstResizable = i;\r\n        }\r\n        lastResizable = i;\r\n      }\r\n    }\r\n\r\n    if (firstResizable === undefined) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < children.length; i++) {\r\n      const colElm = children[i];\r\n\r\n      if (i >= vc.length || !vc[i]) {\r\n        continue;\r\n      }\r\n      if (i < firstResizable || (this._options.forceFitColumns && i >= lastResizable)) {\r\n        continue;\r\n      }\r\n\r\n      const resizeableHandle = Utils.createDomElement('div', { className: 'slick-resizable-handle', role: 'separator', ariaOrientation: 'horizontal' }, colElm);\r\n      this._bindingEventService.bind(resizeableHandle, 'dblclick', this.handleResizeableDoubleClick.bind(this) as EventListener);\r\n\r\n      this.slickResizableInstances.push(\r\n        Resizable({\r\n          resizeableElement: colElm as HTMLElement,\r\n          resizeableHandleElement: resizeableHandle,\r\n          onResizeStart: (e, resizeElms): boolean | void => {\r\n            const targetEvent = (e as TouchEvent).touches ? (e as TouchEvent).changedTouches[0] : e;\r\n            if (!this.getEditorLock()?.commitCurrentEdit()) {\r\n              return false;\r\n            }\r\n            pageX = (targetEvent as MouseEvent).pageX;\r\n            frozenLeftColMaxWidth = 0;\r\n            resizeElms.resizeableElement.classList.add('slick-header-column-active');\r\n            let shrinkLeewayOnRight: number | null = null;\r\n            let stretchLeewayOnRight: number | null = null;\r\n            // lock each column's width option to current width\r\n            for (let pw = 0; pw < children.length; pw++) {\r\n              if (pw >= vc.length || !vc[pw]) {\r\n                continue;\r\n              }\r\n              vc[pw].previousWidth = children[pw].offsetWidth;\r\n            }\r\n            if (this._options.forceFitColumns) {\r\n              shrinkLeewayOnRight = 0;\r\n              stretchLeewayOnRight = 0;\r\n              // colums on right affect maxPageX/minPageX\r\n              for (j = i + 1; j < vc.length; j++) {\r\n                c = vc[j];\r\n                if (c?.resizable) {\r\n                  if (stretchLeewayOnRight !== null) {\r\n                    if (c.maxWidth) {\r\n                      stretchLeewayOnRight += c.maxWidth - (c.previousWidth || 0);\r\n                    } else {\r\n                      stretchLeewayOnRight = null;\r\n                    }\r\n                  }\r\n                  shrinkLeewayOnRight += (c.previousWidth || 0) - Math.max(c.minWidth || 0, this.absoluteColumnMinWidth);\r\n                }\r\n              }\r\n            }\r\n            let shrinkLeewayOnLeft = 0;\r\n            let stretchLeewayOnLeft: number | null = 0;\r\n            for (j = 0; j <= i; j++) {\r\n              // columns on left only affect minPageX\r\n              c = vc[j];\r\n              if (c?.resizable) {\r\n                if (stretchLeewayOnLeft !== null) {\r\n                  if (c.maxWidth) {\r\n                    stretchLeewayOnLeft += c.maxWidth - (c.previousWidth || 0);\r\n                  } else {\r\n                    stretchLeewayOnLeft = null;\r\n                  }\r\n                }\r\n                shrinkLeewayOnLeft += (c.previousWidth || 0) - Math.max(c.minWidth || 0, this.absoluteColumnMinWidth);\r\n              }\r\n            }\r\n            if (shrinkLeewayOnRight === null) {\r\n              shrinkLeewayOnRight = 100000;\r\n            }\r\n            if (shrinkLeewayOnLeft === null) {\r\n              shrinkLeewayOnLeft = 100000;\r\n            }\r\n            if (stretchLeewayOnRight === null) {\r\n              stretchLeewayOnRight = 100000;\r\n            }\r\n            if (stretchLeewayOnLeft === null) {\r\n              stretchLeewayOnLeft = 100000;\r\n            }\r\n            maxPageX = pageX + Math.min(shrinkLeewayOnRight, stretchLeewayOnLeft);\r\n            minPageX = pageX - Math.min(shrinkLeewayOnLeft, stretchLeewayOnRight);\r\n          },\r\n          onResize: (e, resizeElms) => {\r\n            const targetEvent = (e as TouchEvent).touches ? (e as TouchEvent).changedTouches[0] : e;\r\n            this.columnResizeDragging = true;\r\n            let actualMinWidth;\r\n            const d = Math.min(maxPageX, Math.max(minPageX, (targetEvent as MouseEvent).pageX)) - pageX;\r\n            let x;\r\n            let newCanvasWidthL = 0;\r\n            let newCanvasWidthR = 0;\r\n            const viewportWidth = this.viewportHasVScroll ? this.viewportW - (this.scrollbarDimensions?.width ?? 0) : this.viewportW;\r\n\r\n            if (d < 0) { // shrink column\r\n              x = d;\r\n\r\n              for (j = i; j >= 0; j--) {\r\n                c = vc[j];\r\n                if (c?.resizable && !c.hidden) {\r\n                  actualMinWidth = Math.max(c.minWidth || 0, this.absoluteColumnMinWidth);\r\n                  if (x && (c.previousWidth || 0) + x < actualMinWidth) {\r\n                    x += (c.previousWidth || 0) - actualMinWidth;\r\n                    c.width = actualMinWidth;\r\n                  } else {\r\n                    c.width = (c.previousWidth || 0) + x;\r\n                    x = 0;\r\n                  }\r\n                }\r\n              }\r\n\r\n              for (k = 0; k <= i; k++) {\r\n                c = vc[k];\r\n                if (!c || c.hidden) { continue; }\r\n\r\n                if (this.hasFrozenColumns() && (k > this._options.frozenColumn!)) {\r\n                  newCanvasWidthR += c.width || 0;\r\n                } else {\r\n                  newCanvasWidthL += c.width || 0;\r\n                }\r\n              }\r\n\r\n              if (this._options.forceFitColumns) {\r\n                x = -d;\r\n                for (j = i + 1; j < vc.length; j++) {\r\n                  c = vc[j];\r\n                  if (!c || c.hidden) { continue; }\r\n                  if (c.resizable) {\r\n                    if (x && c.maxWidth && (c.maxWidth - (c.previousWidth || 0) < x)) {\r\n                      x -= c.maxWidth - (c.previousWidth || 0);\r\n                      c.width = c.maxWidth;\r\n                    } else {\r\n                      c.width = (c.previousWidth || 0) + x;\r\n                      x = 0;\r\n                    }\r\n\r\n                    if (this.hasFrozenColumns() && (j > this._options.frozenColumn!)) {\r\n                      newCanvasWidthR += c.width || 0;\r\n                    } else {\r\n                      newCanvasWidthL += c.width || 0;\r\n                    }\r\n                  }\r\n                }\r\n              } else {\r\n                for (j = i + 1; j < vc.length; j++) {\r\n                  c = vc[j];\r\n                  if (!c || c.hidden) { continue; }\r\n\r\n                  if (this.hasFrozenColumns() && (j > this._options.frozenColumn!)) {\r\n                    newCanvasWidthR += c.width || 0;\r\n                  } else {\r\n                    newCanvasWidthL += c.width || 0;\r\n                  }\r\n                }\r\n              }\r\n\r\n              if (this._options.forceFitColumns) {\r\n                x = -d;\r\n                for (j = i + 1; j < vc.length; j++) {\r\n                  c = vc[j];\r\n                  if (!c || c.hidden) { continue; }\r\n                  if (c.resizable) {\r\n                    if (x && c.maxWidth && (c.maxWidth - (c.previousWidth || 0) < x)) {\r\n                      x -= c.maxWidth - (c.previousWidth || 0);\r\n                      c.width = c.maxWidth;\r\n                    } else {\r\n                      c.width = (c.previousWidth || 0) + x;\r\n                      x = 0;\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            } else { // stretch column\r\n              x = d;\r\n\r\n              newCanvasWidthL = 0;\r\n              newCanvasWidthR = 0;\r\n\r\n              for (j = i; j >= 0; j--) {\r\n                c = vc[j];\r\n                if (!c || c.hidden) { continue; }\r\n                if (c.resizable) {\r\n                  if (x && c.maxWidth && (c.maxWidth - (c.previousWidth || 0) < x)) {\r\n                    x -= c.maxWidth - (c.previousWidth || 0);\r\n                    c.width = c.maxWidth;\r\n                  } else {\r\n                    const newWidth = (c.previousWidth || 0) + x;\r\n                    const resizedCanvasWidthL = this.canvasWidthL + x;\r\n\r\n                    if (this.hasFrozenColumns() && (j <= this._options.frozenColumn!)) {\r\n                      // if we're on the left frozen side, we need to make sure that our left section width never goes over the total viewport width\r\n                      if (newWidth > frozenLeftColMaxWidth && resizedCanvasWidthL < (viewportWidth - this._options.frozenRightViewportMinWidth!)) {\r\n                        frozenLeftColMaxWidth = newWidth; // keep max column width ref, if we go over the limit this number will stop increasing\r\n                      }\r\n                      c.width = ((resizedCanvasWidthL + this._options.frozenRightViewportMinWidth!) > viewportWidth) ? frozenLeftColMaxWidth : newWidth;\r\n                    } else {\r\n                      c.width = newWidth;\r\n                    }\r\n                    x = 0;\r\n                  }\r\n                }\r\n              }\r\n\r\n              for (k = 0; k <= i; k++) {\r\n                c = vc[k];\r\n                if (!c || c.hidden) { continue; }\r\n\r\n                if (this.hasFrozenColumns() && (k > this._options.frozenColumn!)) {\r\n                  newCanvasWidthR += c.width || 0;\r\n                } else {\r\n                  newCanvasWidthL += c.width || 0;\r\n                }\r\n              }\r\n\r\n              if (this._options.forceFitColumns) {\r\n                x = -d;\r\n                for (j = i + 1; j < vc.length; j++) {\r\n                  c = vc[j];\r\n                  if (!c || c.hidden) { continue; }\r\n                  if (c.resizable) {\r\n                    actualMinWidth = Math.max(c.minWidth || 0, this.absoluteColumnMinWidth);\r\n                    if (x && (c.previousWidth || 0) + x < actualMinWidth) {\r\n                      x += (c.previousWidth || 0) - actualMinWidth;\r\n                      c.width = actualMinWidth;\r\n                    } else {\r\n                      c.width = (c.previousWidth || 0) + x;\r\n                      x = 0;\r\n                    }\r\n\r\n                    if (this.hasFrozenColumns() && (j > this._options.frozenColumn!)) {\r\n                      newCanvasWidthR += c.width || 0;\r\n                    } else {\r\n                      newCanvasWidthL += c.width || 0;\r\n                    }\r\n                  }\r\n                }\r\n              } else {\r\n                for (j = i + 1; j < vc.length; j++) {\r\n                  c = vc[j];\r\n                  if (!c || c.hidden) { continue; }\r\n\r\n                  if (this.hasFrozenColumns() && (j > this._options.frozenColumn!)) {\r\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n                    newCanvasWidthR += c.width || 0;\r\n                  } else {\r\n                    newCanvasWidthL += c.width || 0;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n\r\n            if (this.hasFrozenColumns() && newCanvasWidthL !== this.canvasWidthL) {\r\n              Utils.width(this._headerL, newCanvasWidthL + 1000);\r\n              Utils.setStyleSize(this._paneHeaderR, 'left', newCanvasWidthL);\r\n            }\r\n\r\n            this.applyColumnHeaderWidths();\r\n            if (this._options.syncColumnCellResize) {\r\n              this.applyColumnWidths();\r\n            }\r\n            this.trigger(this.onColumnsDrag, {\r\n              triggeredByColumn: resizeElms.resizeableElement,\r\n              resizeHandle: resizeElms.resizeableHandleElement\r\n            });\r\n          },\r\n          onResizeEnd: (_e, resizeElms) => {\r\n            resizeElms.resizeableElement.classList.remove('slick-header-column-active');\r\n\r\n            const triggeredByColumn = resizeElms.resizeableElement.id.replace(this.uid, '');\r\n            if (this.trigger(this.onBeforeColumnsResize, { triggeredByColumn }).getReturnValue() === true) {\r\n              this.applyColumnHeaderWidths();\r\n            }\r\n            let newWidth;\r\n            for (j = 0; j < vc.length; j++) {\r\n              c = vc[j];\r\n              if (!c || c.hidden) { continue; }\r\n              newWidth = children[j].offsetWidth;\r\n\r\n              if (c.previousWidth !== newWidth && c.rerenderOnResize) {\r\n                this.invalidateAllRows();\r\n              }\r\n            }\r\n            this.updateCanvasWidth(true);\r\n            this.render();\r\n            this.trigger(this.onColumnsResized, { triggeredByColumn });\r\n            window.clearTimeout(this._columnResizeTimer);\r\n            this._columnResizeTimer = window.setTimeout(() => { this.columnResizeDragging = false; }, 300);\r\n          }\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  protected getVBoxDelta(el: HTMLElement) {\r\n    const p = ['borderTopWidth', 'borderBottomWidth', 'paddingTop', 'paddingBottom'];\r\n    const styles = getComputedStyle(el);\r\n    let delta = 0;\r\n    p.forEach((val) => delta += Utils.toFloat(styles[val as any]));\r\n    return delta;\r\n  }\r\n\r\n  protected setFrozenOptions() {\r\n    this._options.frozenColumn = (this._options.frozenColumn! >= 0 && this._options.frozenColumn! < this.columns.length)\r\n      ? parseInt(this._options.frozenColumn as unknown as string, 10)\r\n      : -1;\r\n\r\n    if (this._options.frozenRow! > -1) {\r\n      this.hasFrozenRows = true;\r\n      this.frozenRowsHeight = (this._options.frozenRow!) * this._options.rowHeight!;\r\n      const dataLength = this.getDataLength();\r\n\r\n      this.actualFrozenRow = (this._options.frozenBottom)\r\n        ? (dataLength - this._options.frozenRow!)\r\n        : this._options.frozenRow!;\r\n    } else {\r\n      this.hasFrozenRows = false;\r\n    }\r\n  }\r\n\r\n  /** add/remove frozen class to left headers/footer when defined */\r\n  protected setPaneFrozenClasses(): void {\r\n    const classAction = this.hasFrozenColumns() ? 'add' : 'remove';\r\n    for (const elm of [this._paneHeaderL, this._paneTopL, this._paneBottomL]) {\r\n      elm.classList[classAction]('frozen');\r\n    }\r\n  }\r\n\r\n  protected setPaneVisibility() {\r\n    if (this.hasFrozenColumns()) {\r\n      Utils.show(this._paneHeaderR);\r\n      Utils.show(this._paneTopR);\r\n\r\n      if (this.hasFrozenRows) {\r\n        Utils.show(this._paneBottomL);\r\n        Utils.show(this._paneBottomR);\r\n      } else {\r\n        Utils.hide(this._paneBottomR);\r\n        Utils.hide(this._paneBottomL);\r\n      }\r\n    } else {\r\n      Utils.hide(this._paneHeaderR);\r\n      Utils.hide(this._paneTopR);\r\n      Utils.hide(this._paneBottomR);\r\n\r\n      if (this.hasFrozenRows) {\r\n        Utils.show(this._paneBottomL);\r\n      } else {\r\n        Utils.hide(this._paneBottomR);\r\n        Utils.hide(this._paneBottomL);\r\n      }\r\n    }\r\n  }\r\n\r\n  protected setOverflow() {\r\n    this._viewportTopL.style.overflowX = (this.hasFrozenColumns()) ? (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'hidden' : 'scroll') : (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'hidden' : 'auto');\r\n    this._viewportTopL.style.overflowY = (!this.hasFrozenColumns() && this._options.alwaysShowVerticalScroll) ? 'scroll' : ((this.hasFrozenColumns()) ? (this.hasFrozenRows ? 'hidden' : 'hidden') : (this.hasFrozenRows ? 'scroll' : 'auto'));\r\n\r\n    this._viewportTopR.style.overflowX = (this.hasFrozenColumns()) ? (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'hidden' : 'scroll') : (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'hidden' : 'auto');\r\n    this._viewportTopR.style.overflowY = this._options.alwaysShowVerticalScroll ? 'scroll' : ((this.hasFrozenColumns()) ? (this.hasFrozenRows ? 'scroll' : 'auto') : (this.hasFrozenRows ? 'scroll' : 'auto'));\r\n\r\n    this._viewportBottomL.style.overflowX = (this.hasFrozenColumns()) ? (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'scroll' : 'auto') : (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'auto' : 'auto');\r\n    this._viewportBottomL.style.overflowY = (!this.hasFrozenColumns() && this._options.alwaysShowVerticalScroll) ? 'scroll' : ((this.hasFrozenColumns()) ? (this.hasFrozenRows ? 'hidden' : 'hidden') : (this.hasFrozenRows ? 'scroll' : 'auto'));\r\n\r\n    this._viewportBottomR.style.overflowX = (this.hasFrozenColumns()) ? (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'scroll' : 'auto') : (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'auto' : 'auto');\r\n    this._viewportBottomR.style.overflowY = this._options.alwaysShowVerticalScroll ? 'scroll' : ((this.hasFrozenColumns()) ? (this.hasFrozenRows ? 'auto' : 'auto') : (this.hasFrozenRows ? 'auto' : 'auto'));\r\n\r\n    if (this._options.viewportClass) {\r\n      const viewportClassList = Utils.classNameToList(this._options.viewportClass);\r\n      this._viewportTopL.classList.add(...viewportClassList);\r\n      this._viewportTopR.classList.add(...viewportClassList);\r\n      this._viewportBottomL.classList.add(...viewportClassList);\r\n      this._viewportBottomR.classList.add(...viewportClassList);\r\n    }\r\n  }\r\n\r\n  protected setScroller() {\r\n    if (this.hasFrozenColumns()) {\r\n      this._headerScrollContainer = this._headerScrollerR;\r\n      this._headerRowScrollContainer = this._headerRowScrollerR;\r\n      this._footerRowScrollContainer = this._footerRowScrollerR;\r\n\r\n      if (this.hasFrozenRows) {\r\n        if (this._options.frozenBottom) {\r\n          this._viewportScrollContainerX = this._viewportBottomR;\r\n          this._viewportScrollContainerY = this._viewportTopR;\r\n        } else {\r\n          this._viewportScrollContainerX = this._viewportScrollContainerY = this._viewportBottomR;\r\n        }\r\n      } else {\r\n        this._viewportScrollContainerX = this._viewportScrollContainerY = this._viewportTopR;\r\n      }\r\n    } else {\r\n      this._headerScrollContainer = this._headerScrollerL;\r\n      this._headerRowScrollContainer = this._headerRowScrollerL;\r\n      this._footerRowScrollContainer = this._footerRowScrollerL;\r\n\r\n      if (this.hasFrozenRows) {\r\n        if (this._options.frozenBottom) {\r\n          this._viewportScrollContainerX = this._viewportBottomL;\r\n          this._viewportScrollContainerY = this._viewportTopL;\r\n        } else {\r\n          this._viewportScrollContainerX = this._viewportScrollContainerY = this._viewportBottomL;\r\n        }\r\n      } else {\r\n        this._viewportScrollContainerX = this._viewportScrollContainerY = this._viewportTopL;\r\n      }\r\n    }\r\n  }\r\n\r\n  protected measureCellPaddingAndBorder() {\r\n    const h = ['borderLeftWidth', 'borderRightWidth', 'paddingLeft', 'paddingRight'];\r\n    const v = ['borderTopWidth', 'borderBottomWidth', 'paddingTop', 'paddingBottom'];\r\n    const header = this._headers[0];\r\n\r\n    this.headerColumnWidthDiff = this.headerColumnHeightDiff = 0;\r\n    this.cellWidthDiff = this.cellHeightDiff = 0;\r\n\r\n    let el = Utils.createDomElement('div', { className: 'ui-state-default slick-state-default slick-header-column', style: { visibility: 'hidden' }, textContent: '-' }, header);\r\n    let style = getComputedStyle(el);\r\n    if (style.boxSizing !== 'border-box') {\r\n      h.forEach((val) => this.headerColumnWidthDiff += Utils.toFloat(style[val as any]));\r\n      v.forEach((val) => this.headerColumnHeightDiff += Utils.toFloat(style[val as any]));\r\n    }\r\n    el.remove();\r\n\r\n    const r = Utils.createDomElement('div', { className: 'slick-row' }, this._canvas[0]);\r\n    el = Utils.createDomElement('div', { className: 'slick-cell', id: '', style: { visibility: 'hidden' }, textContent: '-' }, r);\r\n    style = getComputedStyle(el);\r\n    if (style.boxSizing !== 'border-box') {\r\n      h.forEach((val) => this.cellWidthDiff += Utils.toFloat(style[val as any]));\r\n      v.forEach((val) => this.cellHeightDiff += Utils.toFloat(style[val as any]));\r\n    }\r\n    r.remove();\r\n\r\n    this.absoluteColumnMinWidth = Math.max(this.headerColumnWidthDiff, this.cellWidthDiff);\r\n  }\r\n\r\n  protected createCssRules() {\r\n    this._style = document.createElement('style');\r\n    this._style.nonce = this._options.nonce || '';\r\n    (this._options.shadowRoot || document.head).appendChild(this._style);\r\n\r\n    const rowHeight = (this._options.rowHeight! - this.cellHeightDiff);\r\n    const rules = [\r\n      `.${this.uid} .slick-group-header-column { left: 1000px; }`,\r\n      `.${this.uid} .slick-header-column { left: 1000px; }`,\r\n      `.${this.uid} .slick-top-panel { height: ${this._options.topPanelHeight}px; }`,\r\n      `.${this.uid} .slick-preheader-panel { height: ${this._options.preHeaderPanelHeight}px; }`,\r\n      `.${this.uid} .slick-topheader-panel { height: ${this._options.topHeaderPanelHeight}px; }`,\r\n      `.${this.uid} .slick-headerrow-columns { height: ${this._options.headerRowHeight}px; }`,\r\n      `.${this.uid} .slick-footerrow-columns { height: ${this._options.footerRowHeight}px; }`,\r\n      `.${this.uid} .slick-cell { height: ${rowHeight}px; }`,\r\n      `.${this.uid} .slick-row { height: ${this._options.rowHeight}px; }`,\r\n    ];\r\n\r\n    const sheet = this._style.sheet;\r\n    if (sheet) {\r\n      rules.forEach(rule => {\r\n        sheet.insertRule(rule);\r\n      });\r\n\r\n      for (let i = 0; i < this.columns.length; i++) {\r\n        if (!this.columns[i] || this.columns[i].hidden) { continue; }\r\n\r\n        sheet.insertRule(`.${this.uid} .l${i} { }`);\r\n        sheet.insertRule(`.${this.uid} .r${i} { }`);\r\n      }\r\n    } else {\r\n      // fallback in case the 1st approach doesn't work, let's use our previous way of creating the css rules which is what works in Salesforce :(\r\n      this.createCssRulesAlternative(rules);\r\n    }\r\n  }\r\n\r\n  /** Create CSS rules via template in case the first approach with createElement('style') doesn't work */\r\n  protected createCssRulesAlternative(rules: string[]) {\r\n    const template = document.createElement('template');\r\n    template.innerHTML = '<style type=\"text/css\" rel=\"stylesheet\" />';\r\n    this._style = template.content.firstChild as HTMLStyleElement;\r\n    (this._options.shadowRoot || document.head).appendChild(this._style);\r\n\r\n    for (let i = 0; i < this.columns.length; i++) {\r\n      if (!this.columns[i] || this.columns[i].hidden) { continue; }\r\n\r\n      rules.push(`.${this.uid} .l${i} { }`);\r\n      rules.push(`.${this.uid} .r${i} { }`);\r\n    }\r\n\r\n    if ((this._style as any).styleSheet) { // IE\r\n      (this._style as any).styleSheet.cssText = rules.join(' ');\r\n    } else {\r\n      this._style.appendChild(document.createTextNode(rules.join(' ')));\r\n    }\r\n  }\r\n\r\n  protected getColumnCssRules(idx: number) {\r\n    let i: number;\r\n    if (!this.stylesheet) {\r\n      const sheets: any = (this._options.shadowRoot || document).styleSheets;\r\n\r\n      if (this._options.devMode && typeof this._options.devMode?.ownerNodeIndex === 'number' && this._options.devMode.ownerNodeIndex >= 0) {\r\n        sheets[this._options.devMode.ownerNodeIndex].ownerNode = this._style;\r\n      }\r\n\r\n      for (i = 0; i < sheets.length; i++) {\r\n        if ((sheets[i].ownerNode || sheets[i].owningElement) === this._style) {\r\n          this.stylesheet = sheets[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (!this.stylesheet) {\r\n        throw new Error('SlickGrid Cannot find stylesheet.');\r\n      }\r\n\r\n      // find and cache column CSS rules\r\n      this.columnCssRulesL = [];\r\n      this.columnCssRulesR = [];\r\n      const cssRules = (this.stylesheet.cssRules || this.stylesheet.rules);\r\n      let matches;\r\n      let columnIdx;\r\n      for (i = 0; i < cssRules.length; i++) {\r\n        const selector = cssRules[i].selectorText;\r\n        if (matches = /\\.l\\d+/.exec(selector)) {\r\n          columnIdx = parseInt(matches[0].substr(2, matches[0].length - 2), 10);\r\n          this.columnCssRulesL[columnIdx] = cssRules[i];\r\n        } else if (matches = /\\.r\\d+/.exec(selector)) {\r\n          columnIdx = parseInt(matches[0].substr(2, matches[0].length - 2), 10);\r\n          this.columnCssRulesR[columnIdx] = cssRules[i];\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      left: this.columnCssRulesL![idx],\r\n      right: this.columnCssRulesR![idx]\r\n    };\r\n  }\r\n\r\n  protected removeCssRules() {\r\n    this._style?.remove();\r\n    this.stylesheet = null;\r\n  }\r\n\r\n  /** Clear all highlight timers that might have been left opened */\r\n  protected clearAllTimers() {\r\n    window.clearTimeout(this._columnResizeTimer);\r\n    window.clearTimeout(this._executionBlockTimer);\r\n    window.clearTimeout(this._flashCellTimer);\r\n    window.clearTimeout(this._highlightRowTimer);\r\n    window.clearTimeout(this.h_editorLoader);\r\n  }\r\n\r\n  /**\r\n   * Destroy (dispose) of SlickGrid\r\n   * @param {boolean} shouldDestroyAllElements - do we want to destroy (nullify) all DOM elements as well? This help in avoiding mem leaks\r\n   */\r\n  destroy(shouldDestroyAllElements?: boolean) {\r\n    this._bindingEventService.unbindAll();\r\n    this.slickDraggableInstance = this.destroyAllInstances(this.slickDraggableInstance) as null;\r\n    this.slickMouseWheelInstances = this.destroyAllInstances(this.slickMouseWheelInstances) as InteractionBase[];\r\n    this.slickResizableInstances = this.destroyAllInstances(this.slickResizableInstances) as InteractionBase[];\r\n    this.getEditorLock()?.cancelCurrentEdit();\r\n\r\n    this.trigger(this.onBeforeDestroy, {});\r\n\r\n    let i = this.plugins.length;\r\n    while (i--) {\r\n      this.unregisterPlugin(this.plugins[i]);\r\n    }\r\n\r\n    if (this._options.enableColumnReorder && typeof this.sortableSideLeftInstance?.destroy === 'function') {\r\n      this.sortableSideLeftInstance?.destroy();\r\n      this.sortableSideRightInstance?.destroy();\r\n    }\r\n\r\n    this.unbindAncestorScrollEvents();\r\n    this._bindingEventService.unbindByEventName(this._container, 'resize');\r\n    this.removeCssRules();\r\n\r\n    this._canvas.forEach((element) => {\r\n      this._bindingEventService.unbindByEventName(element, 'keydown');\r\n      this._bindingEventService.unbindByEventName(element, 'click');\r\n      this._bindingEventService.unbindByEventName(element, 'dblclick');\r\n      this._bindingEventService.unbindByEventName(element, 'contextmenu');\r\n      this._bindingEventService.unbindByEventName(element, 'mouseover');\r\n      this._bindingEventService.unbindByEventName(element, 'mouseout');\r\n    });\r\n    this._viewport.forEach((view) => {\r\n      this._bindingEventService.unbindByEventName(view, 'scroll');\r\n    });\r\n\r\n    this._headerScroller.forEach((el) => {\r\n      this._bindingEventService.unbindByEventName(el, 'contextmenu');\r\n      this._bindingEventService.unbindByEventName(el, 'click');\r\n    });\r\n\r\n    this._headerRowScroller.forEach((scroller) => {\r\n      this._bindingEventService.unbindByEventName(scroller, 'scroll');\r\n    });\r\n\r\n    if (this._footerRow) {\r\n      this._footerRow.forEach((footer) => {\r\n        this._bindingEventService.unbindByEventName(footer, 'contextmenu');\r\n        this._bindingEventService.unbindByEventName(footer, 'click');\r\n      });\r\n    }\r\n\r\n    if (this._footerRowScroller) {\r\n      this._footerRowScroller.forEach((scroller) => {\r\n        this._bindingEventService.unbindByEventName(scroller, 'scroll');\r\n      });\r\n    }\r\n\r\n    if (this._preHeaderPanelScroller) {\r\n      this._bindingEventService.unbindByEventName(this._preHeaderPanelScroller, 'scroll');\r\n    }\r\n\r\n    if (this._topHeaderPanelScroller) {\r\n      this._bindingEventService.unbindByEventName(this._topHeaderPanelScroller, 'scroll');\r\n    }\r\n\r\n    this._bindingEventService.unbindByEventName(this._focusSink, 'keydown');\r\n    this._bindingEventService.unbindByEventName(this._focusSink2, 'keydown');\r\n\r\n    const resizeHandles = this._container.querySelectorAll('.slick-resizable-handle');\r\n    [].forEach.call(resizeHandles, (handle) => {\r\n      this._bindingEventService.unbindByEventName(handle, 'dblclick');\r\n    });\r\n\r\n    const headerColumns = this._container.querySelectorAll('.slick-header-column');\r\n    [].forEach.call(headerColumns, (column) => {\r\n      this._bindingEventService.unbindByEventName(column, 'mouseenter');\r\n      this._bindingEventService.unbindByEventName(column, 'mouseleave');\r\n\r\n      this._bindingEventService.unbindByEventName(column, 'mouseenter');\r\n      this._bindingEventService.unbindByEventName(column, 'mouseleave');\r\n    });\r\n\r\n    Utils.emptyElement(this._container);\r\n    this._container.classList.remove(this.uid);\r\n    this.clearAllTimers();\r\n\r\n    if (shouldDestroyAllElements) {\r\n      this.destroyAllElements();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * call destroy method, when exists, on all the instance(s) it found\r\n   * @params instances - can be a single instance or a an array of instances\r\n   */\r\n  protected destroyAllInstances(inputInstances: null | InteractionBase | Array<InteractionBase>) {\r\n    if (inputInstances) {\r\n      const instances = Array.isArray(inputInstances) ? inputInstances : [inputInstances];\r\n      let instance: InteractionBase | undefined;\r\n      while (Utils.isDefined(instance = instances.pop())) {\r\n        if (instance && typeof instance.destroy === 'function') {\r\n          instance.destroy();\r\n        }\r\n      }\r\n    }\r\n    // reset instance(s)\r\n    inputInstances = (Array.isArray(inputInstances) ? [] : null);\r\n    return inputInstances;\r\n  }\r\n\r\n  protected destroyAllElements() {\r\n    this._activeCanvasNode = null as any;\r\n    this._activeViewportNode = null as any;\r\n    this._boundAncestors = null as any;\r\n    this._canvas = null as any;\r\n    this._canvasTopL = null as any;\r\n    this._canvasTopR = null as any;\r\n    this._canvasBottomL = null as any;\r\n    this._canvasBottomR = null as any;\r\n    this._container = null as any;\r\n    this._focusSink = null as any;\r\n    this._focusSink2 = null as any;\r\n    this._groupHeaders = null as any;\r\n    this._groupHeadersL = null as any;\r\n    this._groupHeadersR = null as any;\r\n    this._headerL = null as any;\r\n    this._headerR = null as any;\r\n    this._headers = null as any;\r\n    this._headerRows = null as any;\r\n    this._headerRowL = null as any;\r\n    this._headerRowR = null as any;\r\n    this._headerRowSpacerL = null as any;\r\n    this._headerRowSpacerR = null as any;\r\n    this._headerRowScrollContainer = null as any;\r\n    this._headerRowScroller = null as any;\r\n    this._headerRowScrollerL = null as any;\r\n    this._headerRowScrollerR = null as any;\r\n    this._headerScrollContainer = null as any;\r\n    this._headerScroller = null as any;\r\n    this._headerScrollerL = null as any;\r\n    this._headerScrollerR = null as any;\r\n    this._hiddenParents = null as any;\r\n    this._footerRow = null as any;\r\n    this._footerRowL = null as any;\r\n    this._footerRowR = null as any;\r\n    this._footerRowSpacerL = null as any;\r\n    this._footerRowSpacerR = null as any;\r\n    this._footerRowScroller = null as any;\r\n    this._footerRowScrollerL = null as any;\r\n    this._footerRowScrollerR = null as any;\r\n    this._footerRowScrollContainer = null as any;\r\n    this._preHeaderPanel = null as any;\r\n    this._preHeaderPanelR = null as any;\r\n    this._preHeaderPanelScroller = null as any;\r\n    this._preHeaderPanelScrollerR = null as any;\r\n    this._preHeaderPanelSpacer = null as any;\r\n    this._preHeaderPanelSpacerR = null as any;\r\n    this._topPanels = null as any;\r\n    this._topPanelScrollers = null as any;\r\n    this._style = null as any;\r\n    this._topPanelScrollerL = null as any;\r\n    this._topPanelScrollerR = null as any;\r\n    this._topPanelL = null as any;\r\n    this._topPanelR = null as any;\r\n    this._paneHeaderL = null as any;\r\n    this._paneHeaderR = null as any;\r\n    this._paneTopL = null as any;\r\n    this._paneTopR = null as any;\r\n    this._paneBottomL = null as any;\r\n    this._paneBottomR = null as any;\r\n    this._viewport = null as any;\r\n    this._viewportTopL = null as any;\r\n    this._viewportTopR = null as any;\r\n    this._viewportBottomL = null as any;\r\n    this._viewportBottomR = null as any;\r\n    this._viewportScrollContainerX = null as any;\r\n    this._viewportScrollContainerY = null as any;\r\n  }\r\n\r\n  //////////////////////////////////////////////////////////////////////////////////////////////\r\n  // Column Autosizing\r\n  //////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  /** Proportionally resize a specific column by its name, index or Id */\r\n  autosizeColumn(columnOrIndexOrId: number | string, isInit?: boolean) {\r\n    let colDef: C | null = null;\r\n    let colIndex = -1;\r\n    if (typeof columnOrIndexOrId === 'number') {\r\n      colDef = this.columns[columnOrIndexOrId];\r\n      colIndex = columnOrIndexOrId;\r\n    } else if (typeof columnOrIndexOrId === 'string') {\r\n      for (let i = 0; i < this.columns.length; i++) {\r\n        if (this.columns[i].id === columnOrIndexOrId) { colDef = this.columns[i]; colIndex = i; }\r\n      }\r\n    }\r\n    if (!colDef) {\r\n      return;\r\n    }\r\n    const gridCanvas = this.getCanvasNode(0, 0) as HTMLElement;\r\n    this.getColAutosizeWidth(colDef, colIndex, gridCanvas, isInit || false, colIndex);\r\n  }\r\n\r\n  protected treatAsLocked(autoSize: AutoSize = {}) {\r\n    // treat as locked (don't resize) if small and header is the widest part\r\n    return !autoSize.ignoreHeaderText\r\n      && !autoSize.sizeToRemaining\r\n      && (autoSize.contentSizePx === autoSize.headerWidthPx)\r\n      && ((autoSize.widthPx ?? 0) < 100);\r\n  }\r\n\r\n  /** Proportionately resizes all columns to fill available horizontal space. This does not take the cell contents into consideration. */\r\n  autosizeColumns(autosizeMode?: string, isInit?: boolean) {\r\n    const checkHiddenParents = !(this._hiddenParents?.length);\r\n    if (checkHiddenParents) {\r\n      this.cacheCssForHiddenInit();\r\n    }\r\n    this.internalAutosizeColumns(autosizeMode, isInit);\r\n    if (checkHiddenParents) {\r\n      this.restoreCssFromHiddenInit();\r\n    }\r\n  }\r\n\r\n  protected internalAutosizeColumns(autosizeMode?: string, isInit?: boolean) {\r\n    // LogColWidths();\r\n    autosizeMode = autosizeMode || this._options.autosizeColsMode;\r\n    if (autosizeMode === GridAutosizeColsMode.LegacyForceFit || autosizeMode === GridAutosizeColsMode.LegacyOff) {\r\n      this.legacyAutosizeColumns();\r\n      return;\r\n    }\r\n\r\n    if (autosizeMode === GridAutosizeColsMode.None) {\r\n      return;\r\n    }\r\n\r\n    // test for brower canvas support, canvas_context!=null if supported\r\n    this.canvas = document.createElement('canvas');\r\n    if (this.canvas?.getContext) { this.canvas_context = this.canvas.getContext('2d'); }\r\n\r\n    // pass in the grid canvas\r\n    const gridCanvas = this.getCanvasNode(0, 0) as HTMLElement;\r\n    const viewportWidth = this.viewportHasVScroll ? this.viewportW - (this.scrollbarDimensions?.width ?? 0) : this.viewportW;\r\n\r\n    // iterate columns to get autosizes\r\n    let i: number;\r\n    let c: C;\r\n    let colWidth: number;\r\n    let reRender = false;\r\n    let totalWidth = 0;\r\n    let totalWidthLessSTR = 0;\r\n    let strColsMinWidth = 0;\r\n    let totalMinWidth = 0;\r\n    let totalLockedColWidth = 0;\r\n    for (i = 0; i < this.columns.length; i++) {\r\n      c = this.columns[i];\r\n      this.getColAutosizeWidth(c, i, gridCanvas, isInit || false, i);\r\n      totalLockedColWidth += (c.autoSize?.autosizeMode === ColAutosizeMode.Locked ? (c.width || 0) : (this.treatAsLocked(c.autoSize) ? c.autoSize?.widthPx || 0 : 0));\r\n      totalMinWidth += (c.autoSize?.autosizeMode === ColAutosizeMode.Locked ? (c.width || 0) : (this.treatAsLocked(c.autoSize) ? c.autoSize?.widthPx || 0 : c.minWidth || 0));\r\n      totalWidth += (c.autoSize?.widthPx || 0);\r\n      totalWidthLessSTR += (c.autoSize?.sizeToRemaining ? 0 : c.autoSize?.widthPx || 0);\r\n      strColsMinWidth += (c.autoSize?.sizeToRemaining ? c.minWidth || 0 : 0);\r\n    }\r\n    const strColTotalGuideWidth = totalWidth - totalWidthLessSTR;\r\n\r\n    if (autosizeMode === GridAutosizeColsMode.FitViewportToCols) {\r\n      // - if viewport with is outside MinViewportWidthPx and MaxViewportWidthPx, then the viewport is set to\r\n      //   MinViewportWidthPx or MaxViewportWidthPx and the FitColsToViewport algorithm is used\r\n      // - viewport is resized to fit columns\r\n      let setWidth = totalWidth + (this.scrollbarDimensions?.width ?? 0);\r\n      autosizeMode = GridAutosizeColsMode.IgnoreViewport;\r\n\r\n      if (this._options.viewportMaxWidthPx && setWidth > this._options.viewportMaxWidthPx) {\r\n        setWidth = this._options.viewportMaxWidthPx;\r\n        autosizeMode = GridAutosizeColsMode.FitColsToViewport;\r\n      } else if (this._options.viewportMinWidthPx && setWidth < this._options.viewportMinWidthPx) {\r\n        setWidth = this._options.viewportMinWidthPx;\r\n        autosizeMode = GridAutosizeColsMode.FitColsToViewport;\r\n      } else {\r\n        // falling back to IgnoreViewport will size the columns as-is, with render checking\r\n        // for (i = 0; i < columns.length; i++) { columns[i].width = columns[i].autoSize.widthPx; }\r\n      }\r\n      Utils.width(this._container, setWidth);\r\n    }\r\n\r\n    if (autosizeMode === GridAutosizeColsMode.FitColsToViewport) {\r\n      if (strColTotalGuideWidth > 0 && totalWidthLessSTR < viewportWidth - strColsMinWidth) {\r\n        // if addl space remains in the viewport and there are SizeToRemaining cols, just the SizeToRemaining cols expand proportionally to fill viewport\r\n        for (i = 0; i < this.columns.length; i++) {\r\n          c = this.columns[i];\r\n          if (!c || c.hidden) { continue; }\r\n\r\n          const totalSTRViewportWidth = viewportWidth - totalWidthLessSTR;\r\n          if (c.autoSize?.sizeToRemaining) {\r\n            colWidth = totalSTRViewportWidth * (c.autoSize?.widthPx || 0) / strColTotalGuideWidth;\r\n          } else {\r\n            colWidth = (c.autoSize?.widthPx || 0);\r\n          }\r\n          if (c.rerenderOnResize && (c.width || 0) !== colWidth) {\r\n            reRender = true;\r\n          }\r\n          c.width = colWidth;\r\n        }\r\n      } else if ((this._options.viewportSwitchToScrollModeWidthPercent && totalWidthLessSTR + strColsMinWidth > viewportWidth * this._options.viewportSwitchToScrollModeWidthPercent / 100)\r\n        || (totalMinWidth > viewportWidth)) {\r\n        // if the total columns width is wider than the viewport by switchToScrollModeWidthPercent, switch to IgnoreViewport mode\r\n        autosizeMode = GridAutosizeColsMode.IgnoreViewport;\r\n      } else {\r\n        // otherwise (ie. no SizeToRemaining cols or viewport smaller than columns) all cols other than 'Locked' scale in proportion to fill viewport\r\n        // and SizeToRemaining get minWidth\r\n        let unallocatedColWidth = totalWidthLessSTR - totalLockedColWidth;\r\n        let unallocatedViewportWidth = viewportWidth - totalLockedColWidth - strColsMinWidth;\r\n        for (i = 0; i < this.columns.length; i++) {\r\n          c = this.columns[i];\r\n          if (!c || c.hidden) { continue; }\r\n\r\n          colWidth = c.width || 0;\r\n          if (c.autoSize?.autosizeMode !== ColAutosizeMode.Locked && !this.treatAsLocked(c.autoSize)) {\r\n            if (c.autoSize?.sizeToRemaining) {\r\n              colWidth = c.minWidth || 0;\r\n            } else {\r\n              // size width proportionally to free space (we know we have enough room due to the earlier calculations)\r\n              colWidth = unallocatedViewportWidth / unallocatedColWidth * (c.autoSize?.widthPx || 0) - 1;\r\n              if (colWidth < (c.minWidth || 0)) {\r\n                colWidth = c.minWidth || 0;\r\n              }\r\n\r\n              // remove the just allocated widths from the allocation pool\r\n              unallocatedColWidth -= (c.autoSize?.widthPx || 0);\r\n              unallocatedViewportWidth -= colWidth;\r\n            }\r\n          }\r\n          if (this.treatAsLocked(c.autoSize)) {\r\n            colWidth = (c.autoSize?.widthPx || 0);\r\n            if (colWidth < (c.minWidth || 0)) {\r\n              colWidth = c.minWidth || 0;\r\n            }\r\n          }\r\n          if (c.rerenderOnResize && c.width !== colWidth) {\r\n            reRender = true;\r\n          }\r\n          c.width = colWidth;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (autosizeMode === GridAutosizeColsMode.IgnoreViewport) {\r\n      // just size columns as-is\r\n      for (i = 0; i < this.columns.length; i++) {\r\n        if (!this.columns[i] || this.columns[i].hidden) { continue; }\r\n\r\n        colWidth = this.columns[i].autoSize?.widthPx || 0;\r\n        if (this.columns[i].rerenderOnResize && this.columns[i].width !== colWidth) {\r\n          reRender = true;\r\n        }\r\n        this.columns[i].width = colWidth;\r\n      }\r\n    }\r\n\r\n    this.reRenderColumns(reRender);\r\n  }\r\n\r\n  protected LogColWidths() {\r\n    let s = 'Col Widths:';\r\n    for (let i = 0; i < this.columns.length; i++) { s += ' ' + (this.columns[i].hidden ? 'H' : this.columns[i].width); }\r\n    console.log(s);\r\n  }\r\n\r\n  protected getColAutosizeWidth(columnDef: C, colIndex: number, gridCanvas: HTMLElement, isInit: boolean, colArrayIndex: number) {\r\n    const autoSize = columnDef.autoSize as AutoSize;\r\n\r\n    // set to width as default\r\n    autoSize.widthPx = columnDef.width;\r\n    if (autoSize.autosizeMode === ColAutosizeMode.Locked\r\n      || autoSize.autosizeMode === ColAutosizeMode.Guide) {\r\n      return;\r\n    }\r\n\r\n    const dl = this.getDataLength(); // getDataItem();\r\n    const isoDateRegExp = new RegExp(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z/);\r\n\r\n    // ContentIntelligent takes settings from column data type\r\n    if (autoSize.autosizeMode === ColAutosizeMode.ContentIntelligent) {\r\n      // default to column colDataTypeOf (can be used if initially there are no data rows)\r\n      let colDataTypeOf = autoSize.colDataTypeOf;\r\n      let colDataItem: any;\r\n      if (dl > 0) {\r\n        const tempRow = this.getDataItem(0);\r\n        if (tempRow) {\r\n          colDataItem = tempRow[columnDef.field as keyof TData];\r\n\r\n          // check for dates in hiding\r\n          if (isoDateRegExp.test(colDataItem)) { colDataItem = Date.parse(colDataItem); }\r\n\r\n          colDataTypeOf = typeof colDataItem;\r\n          if (colDataTypeOf === 'object') {\r\n            if (colDataItem instanceof Date) { colDataTypeOf = 'date'; }\r\n            if (typeof moment !== 'undefined' && colDataItem instanceof moment) { colDataTypeOf = 'moment'; }\r\n          }\r\n        }\r\n      }\r\n      if (colDataTypeOf === 'boolean') {\r\n        autoSize.colValueArray = [true, false];\r\n      }\r\n      if (colDataTypeOf === 'number') {\r\n        autoSize.valueFilterMode = ValueFilterMode.GetGreatestAndSub;\r\n        autoSize.rowSelectionMode = RowSelectionMode.AllRows;\r\n      }\r\n      if (colDataTypeOf === 'string') {\r\n        autoSize.valueFilterMode = ValueFilterMode.GetLongestText;\r\n        autoSize.rowSelectionMode = RowSelectionMode.AllRows;\r\n        autoSize.allowAddlPercent = 5;\r\n      }\r\n      if (colDataTypeOf === 'date') {\r\n        autoSize.colValueArray = [new Date(2009, 8, 30, 12, 20, 20)]; // Sep 30th 2009, 12:20:20 AM\r\n      }\r\n      if (colDataTypeOf === 'moment' && typeof moment !== 'undefined') {\r\n        autoSize.colValueArray = [moment([2009, 8, 30, 12, 20, 20])]; // Sep 30th 2009, 12:20:20 AM\r\n      }\r\n    }\r\n\r\n    // at this point, the autosizeMode is effectively 'Content', so proceed to get size\r\n    let colWidth = autoSize.contentSizePx = this.getColContentSize(columnDef, colIndex, gridCanvas, isInit, colArrayIndex);\r\n\r\n    if (colWidth === 0) {\r\n      colWidth = autoSize.widthPx || 0;\r\n    }\r\n\r\n    const addlPercentMultiplier = (autoSize.allowAddlPercent ? (1 + autoSize.allowAddlPercent / 100) : 1);\r\n    colWidth = colWidth * addlPercentMultiplier + (this._options.autosizeColPaddingPx || 0);\r\n    if (columnDef.minWidth && colWidth < columnDef.minWidth) { colWidth = columnDef.minWidth; }\r\n    if (columnDef.maxWidth && colWidth > columnDef.maxWidth) { colWidth = columnDef.maxWidth; }\r\n\r\n    if (autoSize.autosizeMode === ColAutosizeMode.ContentExpandOnly || ((columnDef?.editor as any)?.ControlFillsColumn)) {\r\n      // only use content width if it's wider than the default column width (this is used for dropdowns and other fixed width controls)\r\n      if (colWidth < (columnDef.width || 0)) {\r\n        colWidth = columnDef.width || 0;\r\n      }\r\n    }\r\n    autoSize.widthPx = colWidth;\r\n  }\r\n\r\n  protected getColContentSize(columnDef: C, colIndex: number, gridCanvas: HTMLElement, isInit: boolean, colArrayIndex: number) {\r\n    const autoSize = columnDef.autoSize as AutoSize;\r\n    let widthAdjustRatio = 1;\r\n\r\n    // at this point, the autosizeMode is effectively 'Content', so proceed to get size\r\n\r\n    // get header width, if we are taking notice of it\r\n    let i: number;\r\n    let tempVal: any;\r\n    let maxLen = 0;\r\n    let maxColWidth = 0;\r\n    autoSize.headerWidthPx = 0;\r\n    if (!autoSize.ignoreHeaderText) {\r\n      autoSize.headerWidthPx = this.getColHeaderWidth(columnDef);\r\n    }\r\n    if (autoSize.headerWidthPx === 0) {\r\n      autoSize.headerWidthPx = (columnDef.width ? columnDef.width\r\n        : (columnDef.maxWidth ? columnDef.maxWidth\r\n          : (columnDef.minWidth ? columnDef.minWidth : 20)\r\n        )\r\n      );\r\n    }\r\n\r\n    if (autoSize.colValueArray) {\r\n      // if an array of values are specified, just pass them in instead of data\r\n      maxColWidth = this.getColWidth(columnDef, gridCanvas, autoSize.colValueArray as any);\r\n      return Math.max(autoSize.headerWidthPx, maxColWidth);\r\n    }\r\n\r\n    // select rows to evaluate using rowSelectionMode and rowSelectionCount\r\n    const rowInfo = {} as RowInfo;\r\n    rowInfo.colIndex = colIndex;\r\n    rowInfo.rowCount = this.getDataLength();\r\n    rowInfo.startIndex = 0;\r\n    rowInfo.endIndex = rowInfo.rowCount - 1;\r\n    rowInfo.valueArr = null;\r\n    rowInfo.getRowVal = (j: number) => this.getDataItem(j)[columnDef.field as keyof TData];\r\n\r\n    const rowSelectionMode = (isInit ? autoSize.rowSelectionModeOnInit : undefined) || autoSize.rowSelectionMode;\r\n\r\n    if (rowSelectionMode === RowSelectionMode.FirstRow) { rowInfo.endIndex = 0; }\r\n    if (rowSelectionMode === RowSelectionMode.LastRow) { rowInfo.endIndex = rowInfo.startIndex = rowInfo.rowCount - 1; }\r\n    if (rowSelectionMode === RowSelectionMode.FirstNRows) { rowInfo.endIndex = Math.min(autoSize.rowSelectionCount || 0, rowInfo.rowCount) - 1; }\r\n\r\n    // now use valueFilterMode to further filter selected rows\r\n    if (autoSize.valueFilterMode === ValueFilterMode.DeDuplicate) {\r\n      const rowsDict: any = {};\r\n      for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\r\n        rowsDict[rowInfo.getRowVal(i)] = true;\r\n      }\r\n      if (Object.keys) {\r\n        rowInfo.valueArr = Object.keys(rowsDict);\r\n      } else {\r\n        rowInfo.valueArr = [];\r\n        for (const v in rowsDict) {\r\n          if (rowsDict) {\r\n            rowInfo.valueArr.push(v);\r\n          }\r\n        }\r\n      }\r\n      rowInfo.startIndex = 0;\r\n      rowInfo.endIndex = rowInfo.length - 1;\r\n    }\r\n\r\n    if (autoSize.valueFilterMode === ValueFilterMode.GetGreatestAndSub) {\r\n      // get greatest abs value in data\r\n      let maxVal;\r\n      let maxAbsVal = 0;\r\n      for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\r\n        tempVal = rowInfo.getRowVal(i);\r\n        if (Math.abs(tempVal) > maxAbsVal) {\r\n          maxVal = tempVal; maxAbsVal = Math.abs(tempVal);\r\n        }\r\n      }\r\n      // now substitute a '9' for all characters (to get widest width) and convert back to a number\r\n      maxVal = '' + maxVal;\r\n      maxVal = Array(maxVal.length + 1).join('9');\r\n      maxVal = +maxVal;\r\n\r\n      rowInfo.valueArr = [maxVal];\r\n      rowInfo.startIndex = rowInfo.endIndex = 0;\r\n    }\r\n\r\n    if (autoSize.valueFilterMode === ValueFilterMode.GetLongestTextAndSub) {\r\n      // get greatest abs value in data\r\n      for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\r\n        tempVal = rowInfo.getRowVal(i);\r\n        if ((tempVal || '').length > maxLen) { maxLen = tempVal.length; }\r\n      }\r\n      // now substitute a 'm' for all characters\r\n      tempVal = Array(maxLen + 1).join('m');\r\n      widthAdjustRatio = this._options.autosizeTextAvgToMWidthRatio || 0;\r\n\r\n      rowInfo.maxLen = maxLen;\r\n      rowInfo.valueArr = [tempVal];\r\n      rowInfo.startIndex = rowInfo.endIndex = 0;\r\n    }\r\n\r\n    if (autoSize.valueFilterMode === ValueFilterMode.GetLongestText) {\r\n      // get greatest abs value in data\r\n      maxLen = 0; let maxIndex = 0;\r\n      for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\r\n        tempVal = rowInfo.getRowVal(i);\r\n        if ((tempVal || '').length > maxLen) { maxLen = tempVal.length; maxIndex = i; }\r\n      }\r\n      // now substitute a 'c' for all characters\r\n      tempVal = rowInfo.getRowVal(maxIndex);\r\n      rowInfo.maxLen = maxLen;\r\n      rowInfo.valueArr = [tempVal];\r\n      rowInfo.startIndex = rowInfo.endIndex = 0;\r\n    }\r\n\r\n    // !!! HACK !!!!\r\n    if (rowInfo.maxLen && rowInfo.maxLen > 30 && colArrayIndex > 1) { autoSize.sizeToRemaining = true; }\r\n    maxColWidth = this.getColWidth(columnDef, gridCanvas, rowInfo) * widthAdjustRatio;\r\n    return Math.max(autoSize.headerWidthPx, maxColWidth);\r\n  }\r\n\r\n  protected getColWidth(columnDef: C, gridCanvas: HTMLElement, rowInfo: RowInfo) {\r\n    const rowEl = Utils.createDomElement('div', { className: 'slick-row ui-widget-content' }, gridCanvas);\r\n    const cellEl = Utils.createDomElement('div', { className: 'slick-cell' }, rowEl);\r\n\r\n    cellEl.style.position = 'absolute';\r\n    cellEl.style.visibility = 'hidden';\r\n    cellEl.style.textOverflow = 'initial';\r\n    cellEl.style.whiteSpace = 'nowrap';\r\n\r\n    let i: number;\r\n    let len: number;\r\n    let max = 0;\r\n    let maxText = '';\r\n    let formatterResult: string | FormatterResultWithHtml | FormatterResultWithText | HTMLElement | DocumentFragment;\r\n    let val: any;\r\n\r\n    // get mode - if text only display, use canvas otherwise html element\r\n    let useCanvas = (columnDef.autoSize!.widthEvalMode === WidthEvalMode.TextOnly);\r\n\r\n    if (columnDef.autoSize?.widthEvalMode === WidthEvalMode.Auto) {\r\n      const noFormatter = !columnDef.formatterOverride && !columnDef.formatter;\r\n      const formatterIsText = ((columnDef?.formatterOverride as { ReturnsTextOnly: boolean })?.ReturnsTextOnly)\r\n        || (!columnDef.formatterOverride && (columnDef.formatter as any)?.ReturnsTextOnly);\r\n      useCanvas = noFormatter || formatterIsText;\r\n    }\r\n\r\n    // use canvas - very fast, but text-only\r\n    if (this.canvas_context && useCanvas) {\r\n      const style = getComputedStyle(cellEl);\r\n      this.canvas_context.font = style.fontSize + ' ' + style.fontFamily;\r\n      for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\r\n        // row is either an array or values or a single value\r\n        val = (rowInfo.valueArr ? rowInfo.valueArr[i] : rowInfo.getRowVal(i));\r\n        if (columnDef.formatterOverride) {\r\n          // use formatterOverride as first preference\r\n          formatterResult = (columnDef.formatterOverride as FormatterOverrideCallback)(i, rowInfo.colIndex, val, columnDef, this.getDataItem(i), this as unknown as SlickGridModel);\r\n        } else if (columnDef.formatter) {\r\n          // otherwise, use formatter\r\n          formatterResult = columnDef.formatter(i, rowInfo.colIndex, val, columnDef, this.getDataItem(i), this as unknown as SlickGridModel);\r\n        } else {\r\n          // otherwise, use plain text\r\n          formatterResult = '' + val;\r\n        }\r\n        len = formatterResult ? this.canvas_context.measureText(formatterResult as string).width : 0;\r\n        if (len > max) {\r\n          max = len;\r\n          maxText = formatterResult as string;\r\n        }\r\n      }\r\n\r\n      cellEl.textContent = maxText;\r\n      len = cellEl.offsetWidth;\r\n\r\n      rowEl.remove();\r\n      return len;\r\n    }\r\n\r\n    for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\r\n      val = (rowInfo.valueArr ? rowInfo.valueArr[i] : rowInfo.getRowVal(i));\r\n      if (columnDef.formatterOverride) {\r\n        // use formatterOverride as first preference\r\n        formatterResult = (columnDef.formatterOverride as FormatterOverrideCallback)(i, rowInfo.colIndex, val, columnDef, this.getDataItem(i), this as unknown as SlickGridModel);\r\n      } else if (columnDef.formatter) {\r\n        // otherwise, use formatter\r\n        formatterResult = columnDef.formatter(i, rowInfo.colIndex, val, columnDef, this.getDataItem(i), this as unknown as SlickGridModel);\r\n      } else {\r\n        // otherwise, use plain text\r\n        formatterResult = '' + val;\r\n      }\r\n      this.applyFormatResultToCellNode(formatterResult, cellEl);\r\n      len = cellEl.offsetWidth;\r\n      if (len > max) { max = len; }\r\n    }\r\n\r\n    rowEl.remove();\r\n    return max;\r\n  }\r\n\r\n  protected getColHeaderWidth(columnDef: C) {\r\n    let width = 0;\r\n    // if (columnDef && (!columnDef.resizable || columnDef._autoCalcWidth === true)) { return; }\r\n    const headerColElId = this.getUID() + columnDef.id;\r\n    let headerColEl = document.getElementById(headerColElId) as HTMLElement;\r\n    const dummyHeaderColElId = `${headerColElId}_`;\r\n    const clone = headerColEl.cloneNode(true) as HTMLElement;\r\n    if (headerColEl) {\r\n      // headers have been created, use clone technique\r\n      clone.id = dummyHeaderColElId;\r\n      clone.style.cssText = 'position: absolute; visibility: hidden;right: auto;text-overflow: initial;white-space: nowrap;';\r\n      headerColEl.parentNode!.insertBefore(clone, headerColEl);\r\n      width = clone.offsetWidth;\r\n      clone.parentNode!.removeChild(clone);\r\n    } else {\r\n      // headers have not yet been created, create a new node\r\n      const header = this.getHeader(columnDef) as HTMLElement;\r\n      headerColEl = Utils.createDomElement('div', { id: dummyHeaderColElId, className: 'ui-state-default slick-state-default slick-header-column' }, header);\r\n      const colNameElm = Utils.createDomElement('span', { className: 'slick-column-name' }, headerColEl);\r\n      this.applyHtmlCode(colNameElm, columnDef.name!);\r\n      clone.style.cssText = 'position: absolute; visibility: hidden;right: auto;text-overflow: initial;white-space: nowrap;';\r\n      if (columnDef.headerCssClass) {\r\n        headerColEl.classList.add(...Utils.classNameToList(columnDef.headerCssClass));\r\n      }\r\n      width = headerColEl.offsetWidth;\r\n      header.removeChild(headerColEl);\r\n    }\r\n    return width;\r\n  }\r\n\r\n  protected legacyAutosizeColumns() {\r\n    let i;\r\n    let c: C | undefined;\r\n    let shrinkLeeway = 0;\r\n    let total = 0;\r\n    let prevTotal = 0;\r\n    const widths: number[] = [];\r\n    const availWidth = this.viewportHasVScroll ? this.viewportW - (this.scrollbarDimensions?.width ?? 0) : this.viewportW;\r\n\r\n    for (i = 0; i < this.columns.length; i++) {\r\n      c = this.columns[i];\r\n      if (!c || c.hidden) {\r\n        widths.push(0);\r\n        continue;\r\n      }\r\n      widths.push(c.width || 0);\r\n      total += c.width || 0;\r\n      if (c.resizable) {\r\n        shrinkLeeway += (c.width || 0) - Math.max((c.minWidth || 0), this.absoluteColumnMinWidth);\r\n      }\r\n    }\r\n\r\n    // shrink\r\n    prevTotal = total;\r\n    while (total > availWidth && shrinkLeeway) {\r\n      const shrinkProportion = (total - availWidth) / shrinkLeeway;\r\n      for (i = 0; i < this.columns.length && total > availWidth; i++) {\r\n        c = this.columns[i];\r\n        if (!c || c.hidden) { continue; }\r\n        const width = widths[i];\r\n        if (!c.resizable || width <= c.minWidth! || width <= this.absoluteColumnMinWidth) {\r\n          continue;\r\n        }\r\n        const absMinWidth = Math.max(c.minWidth!, this.absoluteColumnMinWidth);\r\n        let shrinkSize = Math.floor(shrinkProportion * (width - absMinWidth)) || 1;\r\n        shrinkSize = Math.min(shrinkSize, width - absMinWidth);\r\n        total -= shrinkSize;\r\n        shrinkLeeway -= shrinkSize;\r\n        widths[i] -= shrinkSize;\r\n      }\r\n      if (prevTotal <= total) {  // avoid infinite loop\r\n        break;\r\n      }\r\n      prevTotal = total;\r\n    }\r\n\r\n    // grow\r\n    prevTotal = total;\r\n    while (total < availWidth) {\r\n      const growProportion = availWidth / total;\r\n      for (i = 0; i < this.columns.length && total < availWidth; i++) {\r\n        c = this.columns[i];\r\n        if (!c || c.hidden) { continue; }\r\n        const currentWidth = widths[i];\r\n        let growSize;\r\n\r\n        if (!c.resizable || c.maxWidth! <= currentWidth) {\r\n          growSize = 0;\r\n        } else {\r\n          growSize = Math.min(Math.floor(growProportion * currentWidth) - currentWidth, (c.maxWidth! - currentWidth) || 1000000) || 1;\r\n        }\r\n        total += growSize;\r\n        widths[i] += (total <= availWidth ? growSize : 0);\r\n      }\r\n      if (prevTotal >= total) {  // avoid infinite loop\r\n        break;\r\n      }\r\n      prevTotal = total;\r\n    }\r\n\r\n    let reRender = false;\r\n    for (i = 0; i < this.columns.length; i++) {\r\n      if (!c || c.hidden) { continue; }\r\n\r\n      if (this.columns[i].rerenderOnResize && this.columns[i].width !== widths[i]) {\r\n        reRender = true;\r\n      }\r\n      this.columns[i].width = widths[i];\r\n    }\r\n\r\n    this.reRenderColumns(reRender);\r\n  }\r\n\r\n  /**\r\n   * Apply Columns Widths in the UI and optionally invalidate & re-render the columns when specified\r\n   * @param {Boolean} shouldReRender - should we invalidate and re-render the grid?\r\n   */\r\n  reRenderColumns(reRender?: boolean) {\r\n    this.applyColumnHeaderWidths();\r\n    this.updateCanvasWidth(true);\r\n\r\n    this.trigger(this.onAutosizeColumns, { columns: this.columns });\r\n\r\n    if (reRender) {\r\n      this.invalidateAllRows();\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  getVisibleColumns() {\r\n    return this.columns.filter(c => !c.hidden);\r\n  }\r\n\r\n  //////////////////////////////////////////////////////////////////////////////////////////////\r\n  // General\r\n  //////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  protected trigger<ArgType = any>(evt: SlickEvent_, args?: ArgType, e?: Event | SlickEventData_) {\r\n    const event: SlickEventData_ = (e || new SlickEventData(e, args)) as SlickEventData_;\r\n    const eventArgs = (args || {}) as ArgType & { grid: SlickGrid<TData, C, O>; };\r\n    eventArgs.grid = this;\r\n    return evt.notify(eventArgs, event, this);\r\n  }\r\n\r\n  /** Get Editor lock */\r\n  getEditorLock() {\r\n    return this._options.editorLock as SlickEditorLock;\r\n  }\r\n\r\n  /** Get Editor Controller */\r\n  getEditController() {\r\n    return this.editController;\r\n  }\r\n\r\n  /**\r\n   * Returns the index of a column with a given id. Since columns can be reordered by the user, this can be used to get the column definition independent of the order:\r\n   * @param {String | Number} id A column id.\r\n   */\r\n  getColumnIndex(id: number | string): number {\r\n    return this.columnsById[id];\r\n  }\r\n\r\n  protected applyColumnHeaderWidths() {\r\n    if (!this.initialized) {\r\n      return;\r\n    }\r\n\r\n    let columnIndex = 0;\r\n    const vc = this.getVisibleColumns();\r\n    this._headers.forEach((header) => {\r\n      for (let i = 0; i < header.children.length; i++, columnIndex++) {\r\n        const h = header.children[i] as HTMLElement;\r\n        const col = vc[columnIndex] || {};\r\n        const width = (col.width || 0) - this.headerColumnWidthDiff;\r\n        if (Utils.width(h) !== width) {\r\n          Utils.width(h, width);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.updateColumnCaches();\r\n  }\r\n\r\n  protected applyColumnWidths() {\r\n    let x = 0;\r\n    let w = 0;\r\n    let rule: any;\r\n    for (let i = 0; i < this.columns.length; i++) {\r\n      if (!this.columns[i]?.hidden) {\r\n        w = this.columns[i].width || 0;\r\n\r\n        rule = this.getColumnCssRules(i);\r\n        rule.left.style.left = `${x}px`;\r\n        rule.right.style.right = (((this._options.frozenColumn !== -1 && i > this._options.frozenColumn!) ? this.canvasWidthR : this.canvasWidthL) - x - w) + 'px';\r\n\r\n        // If this column is frozen, reset the css left value since the\r\n        // column starts in a new viewport.\r\n        if (this._options.frozenColumn !== i) {\r\n          x += this.columns[i].width!;\r\n        }\r\n      }\r\n      if (this._options.frozenColumn === i) {\r\n        x = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Accepts a columnId string and an ascending boolean. Applies a sort glyph in either ascending or descending form to the header of the column. Note that this does not actually sort the column. It only adds the sort glyph to the header.\r\n   * @param {String | Number} columnId\r\n   * @param {Boolean} ascending\r\n   */\r\n  setSortColumn(columnId: number | string, ascending: boolean) {\r\n    this.setSortColumns([{ columnId, sortAsc: ascending }]);\r\n  }\r\n\r\n  /**\r\n   * Get column by index\r\n   * @param {Number} id - column index\r\n   * @returns\r\n   */\r\n  getColumnByIndex(id: number) {\r\n    let result: HTMLElement | undefined;\r\n    this._headers.every((header) => {\r\n      const length = header.children.length;\r\n      if (id < length) {\r\n        result = header.children[id] as HTMLElement;\r\n        return false;\r\n      }\r\n      id -= length;\r\n      return true;\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Accepts an array of objects in the form [ { columnId: [string], sortAsc: [boolean] }, ... ]. When called, this will apply a sort glyph in either ascending or descending form to the header of each column specified in the array. Note that this does not actually sort the column. It only adds the sort glyph to the header\r\n   * @param {ColumnSort[]} cols - column sort\r\n   */\r\n  setSortColumns(cols: ColumnSort[]) {\r\n    this.sortColumns = cols;\r\n\r\n    const numberCols = this._options.numberedMultiColumnSort && this.sortColumns.length > 1;\r\n    this._headers.forEach((header) => {\r\n      let indicators = header.querySelectorAll('.slick-header-column-sorted');\r\n      indicators.forEach((indicator) => {\r\n        indicator.classList.remove('slick-header-column-sorted');\r\n      });\r\n\r\n      indicators = header.querySelectorAll('.slick-sort-indicator');\r\n      indicators.forEach((indicator) => {\r\n        indicator.classList.remove('slick-sort-indicator-asc');\r\n        indicator.classList.remove('slick-sort-indicator-desc');\r\n      });\r\n      indicators = header.querySelectorAll('.slick-sort-indicator-numbered');\r\n      indicators.forEach((el) => {\r\n        el.textContent = '';\r\n      });\r\n    });\r\n\r\n    let i = 1;\r\n    this.sortColumns.forEach((col) => {\r\n      if (!Utils.isDefined(col.sortAsc)) {\r\n        col.sortAsc = true;\r\n      }\r\n\r\n      const columnIndex = this.getColumnIndex(col.columnId);\r\n      if (Utils.isDefined(columnIndex)) {\r\n        const column = this.getColumnByIndex(columnIndex);\r\n        if (column) {\r\n          column.classList.add('slick-header-column-sorted');\r\n          let indicator = column.querySelector('.slick-sort-indicator');\r\n          indicator?.classList.add(col.sortAsc ? 'slick-sort-indicator-asc' : 'slick-sort-indicator-desc');\r\n\r\n          if (numberCols) {\r\n            indicator = column.querySelector('.slick-sort-indicator-numbered');\r\n            if (indicator) {\r\n              indicator.textContent = String(i);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      i++;\r\n    });\r\n  }\r\n\r\n  /** Get sorted columns **/\r\n  getSortColumns(): ColumnSort[] {\r\n    return this.sortColumns;\r\n  }\r\n\r\n  protected handleSelectedRangesChanged(e: SlickEventData_, ranges: SlickRange_[]) {\r\n    const ne = e.getNativeEvent<CustomEvent>();\r\n    const previousSelectedRows = this.selectedRows.slice(0); // shallow copy previously selected rows for later comparison\r\n    this.selectedRows = [];\r\n    const hash: CssStyleHash = {};\r\n    for (let i = 0; i < ranges.length; i++) {\r\n      for (let j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {\r\n        if (!hash[j]) {  // prevent duplicates\r\n          this.selectedRows.push(j);\r\n          hash[j] = {};\r\n        }\r\n        for (let k = ranges[i].fromCell; k <= ranges[i].toCell; k++) {\r\n          if (this.canCellBeSelected(j, k)) {\r\n            hash[j][this.columns[k].id] = this._options.selectedCellCssClass;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setCellCssStyles(this._options.selectedCellCssClass || '', hash);\r\n\r\n    if (this.simpleArrayEquals(previousSelectedRows, this.selectedRows)) {\r\n      const caller = ne?.detail?.caller ?? 'click';\r\n      // Use Set for faster performance\r\n      const selectedRowsSet = new Set(this.getSelectedRows());\r\n      const previousSelectedRowsSet = new Set(previousSelectedRows);\r\n\r\n      const newSelectedAdditions = Array.from(selectedRowsSet).filter(i => !previousSelectedRowsSet.has(i));\r\n      const newSelectedDeletions = Array.from(previousSelectedRowsSet).filter(i => !selectedRowsSet.has(i));\r\n\r\n      this.trigger(this.onSelectedRowsChanged, {\r\n        rows: this.getSelectedRows(),\r\n        previousSelectedRows,\r\n        caller,\r\n        changedSelectedRows: newSelectedAdditions,\r\n        changedUnselectedRows: newSelectedDeletions\r\n      }, e);\r\n    }\r\n  }\r\n\r\n  // compare 2 simple arrays (integers or strings only, do not use to compare object arrays)\r\n  simpleArrayEquals(arr1: any[], arr2: any[]) {\r\n    return Array.isArray(arr1) && Array.isArray(arr2) && arr2.sort().toString() !== arr1.sort().toString();\r\n  }\r\n\r\n  /** Returns an array of column definitions. */\r\n  getColumns() {\r\n    return this.columns;\r\n  }\r\n\r\n  protected updateColumnCaches() {\r\n    // Pre-calculate cell boundaries.\r\n    this.columnPosLeft = [];\r\n    this.columnPosRight = [];\r\n    let x = 0;\r\n    for (let i = 0, ii = this.columns.length; i < ii; i++) {\r\n      if (!this.columns[i] || this.columns[i].hidden) { continue; }\r\n\r\n      this.columnPosLeft[i] = x;\r\n      this.columnPosRight[i] = x + (this.columns[i].width || 0);\r\n\r\n      if (this._options.frozenColumn === i) {\r\n        x = 0;\r\n      } else {\r\n        x += this.columns[i].width || 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  protected updateColumnProps() {\r\n    this.columnsById = {};\r\n    for (let i = 0; i < this.columns.length; i++) {\r\n      let m: C = this.columns[i];\r\n      if (m.width) {\r\n        m.widthRequest = m.width;\r\n      }\r\n\r\n      if (this._options.mixinDefaults) {\r\n        Utils.applyDefaults(m, this._columnDefaults);\r\n        if (!m.autoSize) { m.autoSize = {}; }\r\n        Utils.applyDefaults(m.autoSize, this._columnAutosizeDefaults);\r\n      } else {\r\n        m = this.columns[i] = Utils.extend({}, this._columnDefaults, m);\r\n        m.autoSize = Utils.extend({}, this._columnAutosizeDefaults, m.autoSize);\r\n      }\r\n\r\n      this.columnsById[m.id] = i;\r\n      if (m.minWidth && ((m.width || 0) < m.minWidth)) {\r\n        m.width = m.minWidth;\r\n      }\r\n      if (m.maxWidth && ((m.width || 0) > m.maxWidth)) {\r\n        m.width = m.maxWidth;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets grid columns. Column headers will be recreated and all rendered rows will be removed. To rerender the grid (if necessary), call render().\r\n   * @param {Column[]} columnDefinitions An array of column definitions.\r\n   */\r\n  setColumns(columnDefinitions: C[]) {\r\n    this.trigger(this.onBeforeSetColumns, { previousColumns: this.columns, newColumns: columnDefinitions, grid: this });\r\n    this.columns = columnDefinitions;\r\n    this.updateColumnsInternal();\r\n  }\r\n\r\n  /** Update columns for when a hidden property has changed but the column list itself has not changed. */\r\n  updateColumns() {\r\n    this.trigger(this.onBeforeUpdateColumns, { columns: this.columns, grid: this });\r\n    this.updateColumnsInternal();\r\n  }\r\n\r\n  protected updateColumnsInternal() {\r\n    this.updateColumnProps();\r\n    this.updateColumnCaches();\r\n\r\n    if (this.initialized) {\r\n      this.setPaneFrozenClasses();\r\n      this.setPaneVisibility();\r\n      this.setOverflow();\r\n\r\n      this.invalidateAllRows();\r\n      this.createColumnHeaders();\r\n      this.createColumnFooter();\r\n      this.removeCssRules();\r\n      this.createCssRules();\r\n      this.resizeCanvas();\r\n      this.updateCanvasWidth();\r\n      this.applyColumnHeaderWidths();\r\n      this.applyColumnWidths();\r\n      this.handleScroll();\r\n      this.getSelectionModel()?.refreshSelections();\r\n    }\r\n  }\r\n\r\n  /** Returns an object containing all of the Grid options set on the grid. See a list of Grid Options here.  */\r\n  getOptions() {\r\n    return this._options;\r\n  }\r\n\r\n  /**\r\n   * Extends grid options with a given hash. If an there is an active edit, the grid will attempt to commit the changes and only continue if the attempt succeeds.\r\n   * @param {Object} options - an object with configuration options.\r\n   * @param {Boolean} [suppressRender] - do we want to supress the grid re-rendering? (defaults to false)\r\n   * @param {Boolean} [suppressColumnSet] - do we want to supress the columns set, via \"setColumns()\" method? (defaults to false)\r\n   * @param {Boolean} [suppressSetOverflow] - do we want to suppress the call to `setOverflow`\r\n   */\r\n  setOptions(newOptions: Partial<O>, suppressRender?: boolean, suppressColumnSet?: boolean, suppressSetOverflow?: boolean): void {\r\n    this.prepareForOptionsChange();\r\n\r\n    if (this._options.enableAddRow !== newOptions.enableAddRow) {\r\n      this.invalidateRow(this.getDataLength());\r\n    }\r\n\r\n    // before applying column freeze, we need our viewports to be scrolled back to left to avoid misaligned column headers\r\n    if (newOptions.frozenColumn !== undefined && newOptions.frozenColumn >= 0) {\r\n      this.getViewports().forEach(vp => vp.scrollLeft = 0);\r\n      this.handleScroll(); // trigger scroll to realign column headers as well\r\n    }\r\n\r\n    const originalOptions = Utils.extend(true, {}, this._options);\r\n    this._options = Utils.extend(this._options, newOptions);\r\n    this.trigger(this.onSetOptions, { optionsBefore: originalOptions, optionsAfter: this._options });\r\n\r\n    this.internal_setOptions(suppressRender, suppressColumnSet, suppressSetOverflow);\r\n  }\r\n\r\n  /**\r\n   * If option.mixinDefaults is true then external code maintains a reference to the options object. In this case there is no need\r\n   * to call setOptions() - changes can be made directly to the object. However setOptions() also performs some recalibration of the\r\n   * grid in reaction to changed options. activateChangedOptions call the same recalibration routines as setOptions() would have.\r\n   * @param {Boolean} [suppressRender] - do we want to supress the grid re-rendering? (defaults to false)\r\n   * @param {Boolean} [suppressColumnSet] - do we want to supress the columns set, via \"setColumns()\" method? (defaults to false)\r\n   * @param {Boolean} [suppressSetOverflow] - do we want to suppress the call to `setOverflow`\r\n   */\r\n  activateChangedOptions(suppressRender?: boolean, suppressColumnSet?: boolean, suppressSetOverflow?: boolean): void {\r\n    this.prepareForOptionsChange();\r\n    this.invalidateRow(this.getDataLength());\r\n\r\n    this.trigger(this.onActivateChangedOptions, { options: this._options });\r\n\r\n    this.internal_setOptions(suppressRender, suppressColumnSet, suppressSetOverflow);\r\n  }\r\n\r\n  protected prepareForOptionsChange() {\r\n    if (!this.getEditorLock().commitCurrentEdit()) {\r\n      return;\r\n    }\r\n\r\n    this.makeActiveCellNormal();\r\n  }\r\n\r\n  protected internal_setOptions(suppressRender?: boolean, suppressColumnSet?: boolean, suppressSetOverflow?: boolean): void {\r\n    if (this._options.showColumnHeader !== undefined) {\r\n      this.setColumnHeaderVisibility(this._options.showColumnHeader);\r\n    }\r\n    this.validateAndEnforceOptions();\r\n    this.setFrozenOptions();\r\n\r\n    // when user changed frozen row option, we need to force a recalculation of each viewport heights\r\n    if (this._options.frozenBottom !== undefined) {\r\n      this.enforceFrozenRowHeightRecalc = true;\r\n    }\r\n\r\n    this._viewport.forEach((view) => {\r\n      view.style.overflowY = this._options.autoHeight ? 'hidden' : 'auto';\r\n    });\r\n    if (!suppressRender) {\r\n      this.render();\r\n    }\r\n\r\n    this.setScroller();\r\n    if (!suppressSetOverflow) {\r\n      this.setOverflow();\r\n    }\r\n\r\n    if (!suppressColumnSet) {\r\n      this.setColumns(this.columns);\r\n    }\r\n\r\n    if (this._options.enableMouseWheelScrollHandler && this._viewport && (!this.slickMouseWheelInstances || this.slickMouseWheelInstances.length === 0)) {\r\n      this._viewport.forEach((view) => {\r\n        this.slickMouseWheelInstances.push(MouseWheel({\r\n          element: view,\r\n          onMouseWheel: this.handleMouseWheel.bind(this)\r\n        }));\r\n      });\r\n    } else if (this._options.enableMouseWheelScrollHandler === false) {\r\n      this.destroyAllInstances(this.slickMouseWheelInstances); // remove scroll handler when option is disable\r\n    }\r\n  }\r\n\r\n  validateAndEnforceOptions(): void {\r\n    if (this._options.autoHeight) {\r\n      this._options.leaveSpaceForNewRows = false;\r\n    }\r\n    if (this._options.forceFitColumns) {\r\n      this._options.autosizeColsMode = GridAutosizeColsMode.LegacyForceFit;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets a new source for databinding and removes all rendered rows. Note that this doesn't render the new rows - you can follow it with a call to render() to do that.\r\n   * @param {CustomDataView|Array<*>} newData New databinding source using a regular JavaScript array.. or a custom object exposing getItem(index) and getLength() functions.\r\n   * @param {Number} [scrollToTop] If true, the grid will reset the vertical scroll position to the top of the grid.\r\n   */\r\n  setData(newData: CustomDataView<TData> | TData[], scrollToTop?: boolean) {\r\n    this.data = newData;\r\n    this.invalidateAllRows();\r\n    this.updateRowCount();\r\n    if (scrollToTop) {\r\n      this.scrollTo(0);\r\n    }\r\n  }\r\n\r\n  /** Returns an array of every data object, unless you're using DataView in which case it returns a DataView object. */\r\n  getData<U extends CustomDataView<TData> | U[]>(): U {\r\n    return this.data as U;\r\n  }\r\n\r\n  /** Returns the size of the databinding source. */\r\n  getDataLength() {\r\n    if ((this.data as CustomDataView<TData>).getLength) {\r\n      return (this.data as CustomDataView<TData>).getLength();\r\n    } else {\r\n      return (this.data as TData[])?.length ?? 0;\r\n    }\r\n  }\r\n\r\n  protected getDataLengthIncludingAddNew() {\r\n    return this.getDataLength() + (!this._options.enableAddRow ? 0\r\n      : (!this.pagingActive || this.pagingIsLastPage ? 1 : 0)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the databinding item at a given position.\r\n   * @param {Number} index Item row index.\r\n   */\r\n  getDataItem(i: number): TData {\r\n    if ((this.data as CustomDataView).getItem) {\r\n      return (this.data as CustomDataView<TData>).getItem(i) as TData;\r\n    } else {\r\n      return (this.data as TData[])[i] as TData;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns item metadata by a row index when it exists\r\n   * @param {Number} row\r\n   * @returns {ItemMetadata | null}\r\n   */\r\n  getItemMetadaWhenExists(row: number): ItemMetadata | null {\r\n    return 'getItemMetadata' in this.data ? (this.data as CustomDataView<TData>).getItemMetadata(row) : null;\r\n  }\r\n\r\n  /** Get Top Panel DOM element */\r\n  getTopPanel() {\r\n    return this._topPanels[0];\r\n  }\r\n\r\n  /** Get Top Panels (left/right) DOM element */\r\n  getTopPanels() {\r\n    return this._topPanels;\r\n  }\r\n\r\n  /** Are we using a DataView? */\r\n  hasDataView() {\r\n    return !Array.isArray(this.data);\r\n  }\r\n\r\n  protected togglePanelVisibility(option: 'showTopPanel' | 'showHeaderRow' | 'showColumnHeader' | 'showFooterRow' | 'showPreHeaderPanel' | 'showTopHeaderPanel', container: HTMLElement | HTMLElement[], visible?: boolean, animate?: boolean) {\r\n    const animated = (animate === false) ? false : true;\r\n\r\n    if (this._options[option] !== visible) {\r\n      this._options[option] = visible as boolean;\r\n      if (visible) {\r\n        if (animated) {\r\n          Utils.slideDown(container, this.resizeCanvas.bind(this));\r\n          return;\r\n        }\r\n        Utils.show(container);\r\n        this.resizeCanvas();\r\n      } else {\r\n        if (animated) {\r\n          Utils.slideUp(container, this.resizeCanvas.bind(this));\r\n          return;\r\n        }\r\n        Utils.hide(container);\r\n        this.resizeCanvas();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the Top Panel Visibility and optionally enable/disable animation (enabled by default)\r\n   * @param {Boolean} [visible] - optionally set if top panel is visible or not\r\n   * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\r\n   */\r\n  setTopPanelVisibility(visible?: boolean, animate?: boolean) {\r\n    this.togglePanelVisibility('showTopPanel', this._topPanelScrollers, visible, animate);\r\n  }\r\n\r\n  /**\r\n   * Set the Header Row Visibility and optionally enable/disable animation (enabled by default)\r\n   * @param {Boolean} [visible] - optionally set if header row panel is visible or not\r\n   * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\r\n   */\r\n  setHeaderRowVisibility(visible?: boolean, animate?: boolean) {\r\n    this.togglePanelVisibility('showHeaderRow', this._headerRowScroller, visible, animate);\r\n  }\r\n\r\n  /**\r\n   * Set the Column Header Visibility and optionally enable/disable animation (enabled by default)\r\n   * @param {Boolean} [visible] - optionally set if column header is visible or not\r\n   * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\r\n   */\r\n  setColumnHeaderVisibility(visible?: boolean, animate?: boolean) {\r\n    this.togglePanelVisibility('showColumnHeader', this._headerScroller, visible, animate);\r\n  }\r\n\r\n  /**\r\n   * Set the Footer Visibility and optionally enable/disable animation (enabled by default)\r\n   * @param {Boolean} [visible] - optionally set if footer row panel is visible or not\r\n   * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\r\n   */\r\n  setFooterRowVisibility(visible?: boolean, animate?: boolean) {\r\n    this.togglePanelVisibility('showFooterRow', this._footerRowScroller, visible, animate);\r\n  }\r\n\r\n  /**\r\n   * Set the Pre-Header Visibility and optionally enable/disable animation (enabled by default)\r\n   * @param {Boolean} [visible] - optionally set if pre-header panel is visible or not\r\n   * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\r\n   */\r\n  setPreHeaderPanelVisibility(visible?: boolean, animate?: boolean) {\r\n    this.togglePanelVisibility('showPreHeaderPanel', [this._preHeaderPanelScroller, this._preHeaderPanelScrollerR], visible, animate);\r\n  }\r\n\r\n  /**\r\n   * Set the Top-Header Visibility\r\n   * @param {Boolean} [visible] - optionally set if top-header panel is visible or not\r\n   */\r\n  setTopHeaderPanelVisibility(visible?: boolean) {\r\n    this.togglePanelVisibility('showTopHeaderPanel', this._topHeaderPanelScroller, visible);\r\n  }\r\n\r\n  /** Get Grid Canvas Node DOM Element */\r\n  getContainerNode() {\r\n    return this._container;\r\n  }\r\n\r\n  //////////////////////////////////////////////////////////////////////////////////////////////\r\n  // Rendering / Scrolling\r\n\r\n  protected getRowHeight() {\r\n    return this._options.rowHeight!;\r\n  }\r\n\r\n  protected getRowTop(row: number) {\r\n    return Math.round(this._options.rowHeight! * row - this.offset);\r\n  }\r\n\r\n  protected getRowBottom(row: number) {\r\n    return this.getRowTop(row) + this._options.rowHeight!;\r\n  }\r\n\r\n  protected getRowFromPosition(y: number) {\r\n    return Math.floor((y + this.offset) / this._options.rowHeight!);\r\n  }\r\n\r\n  /**\r\n   * Scroll to an Y position in the grid\r\n   * @param {Number} y\r\n   */\r\n  scrollTo(y: number) {\r\n    y = Math.max(y, 0);\r\n    y = Math.min(y, (this.th || 0) - (Utils.height(this._viewportScrollContainerY) as number) + ((this.viewportHasHScroll || this.hasFrozenColumns()) ? (this.scrollbarDimensions?.height ?? 0) : 0));\r\n\r\n    const oldOffset = this.offset;\r\n    this.offset = Math.round(this.page * (this.cj || 0));\r\n    this.page = Math.min((this.n || 0) - 1, Math.floor(y / (this.ph || 0)));\r\n    const newScrollTop = (y - this.offset) as number;\r\n\r\n    if (this.offset !== oldOffset) {\r\n      const range = this.getVisibleRange(newScrollTop);\r\n      this.cleanupRows(range);\r\n      this.updateRowPositions();\r\n    }\r\n\r\n    if (this.prevScrollTop !== newScrollTop) {\r\n      this.vScrollDir = (this.prevScrollTop + oldOffset < newScrollTop + this.offset) ? 1 : -1;\r\n      this.lastRenderedScrollTop = (this.scrollTop = this.prevScrollTop = newScrollTop);\r\n\r\n      if (this.hasFrozenColumns()) {\r\n        this._viewportTopL.scrollTop = newScrollTop;\r\n      }\r\n\r\n      if (this.hasFrozenRows) {\r\n        this._viewportBottomL.scrollTop = this._viewportBottomR.scrollTop = newScrollTop;\r\n      }\r\n\r\n      if (this._viewportScrollContainerY) {\r\n        this._viewportScrollContainerY.scrollTop = newScrollTop;\r\n      }\r\n\r\n      this.trigger(this.onViewportChanged, {});\r\n    }\r\n  }\r\n\r\n  protected defaultFormatter(_row: number, _cell: number, value: any) {\r\n    if (!Utils.isDefined(value)) {\r\n      return '';\r\n    } else {\r\n      return (value + '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n    }\r\n  }\r\n\r\n  protected getFormatter(row: number, column: C): Formatter {\r\n    const rowMetadata = (this.data as CustomDataView<TData>)?.getItemMetadata?.(row);\r\n\r\n    // look up by id, then index\r\n    const columnOverrides = rowMetadata?.columns &&\r\n      (rowMetadata.columns[column.id] || rowMetadata.columns[this.getColumnIndex(column.id)]);\r\n\r\n    return ((columnOverrides?.formatter) ||\r\n      (rowMetadata?.formatter) ||\r\n      column.formatter ||\r\n      (this._options.formatterFactory?.getFormatter(column)) ||\r\n      this._options.defaultFormatter) as Formatter;\r\n  }\r\n\r\n  protected getEditor(row: number, cell: number): Editor | EditorConstructor | null | undefined {\r\n    const column = this.columns[cell];\r\n    const rowMetadata = this.getItemMetadaWhenExists(row);\r\n    const columnMetadata = rowMetadata?.columns;\r\n\r\n    if (columnMetadata?.[column.id]?.editor !== undefined) {\r\n      return columnMetadata[column.id].editor;\r\n    }\r\n    if (columnMetadata?.[cell]?.editor !== undefined) {\r\n      return columnMetadata[cell].editor;\r\n    }\r\n\r\n    return (column.editor || (this._options?.editorFactory?.getEditor(column)));\r\n  }\r\n\r\n  protected getDataItemValueForColumn(item: TData, columnDef: C) {\r\n    if (this._options.dataItemColumnValueExtractor) {\r\n      return this._options.dataItemColumnValueExtractor(item, columnDef) as TData;\r\n    }\r\n    return item[columnDef.field as keyof TData];\r\n  }\r\n\r\n  protected appendRowHtml(divArrayL: HTMLElement[], divArrayR: HTMLElement[], row: number, range: CellViewportRange, dataLength: number) {\r\n    const d = this.getDataItem(row);\r\n    const dataLoading = row < dataLength && !d;\r\n    let rowCss = 'slick-row' +\r\n      (this.hasFrozenRows && row <= this._options.frozenRow! ? ' frozen' : '') +\r\n      (dataLoading ? ' loading' : '') +\r\n      (row === this.activeRow && this._options.showCellSelection ? ' active' : '') +\r\n      (row % 2 === 1 ? ' odd' : ' even');\r\n\r\n    if (!d) {\r\n      rowCss += ` ${this._options.addNewRowCssClass}`;\r\n    }\r\n\r\n    const metadata = this.getItemMetadaWhenExists(row);\r\n    if (metadata?.cssClasses) {\r\n      rowCss += ` ${metadata.cssClasses}`;\r\n    }\r\n\r\n    const rowDiv = Utils.createDomElement('div', {\r\n      className: `ui-widget-content ${rowCss}`,\r\n      role: 'row',\r\n      dataset: { row: `${row}` },\r\n    });\r\n    const frozenRowOffset = this.getFrozenRowOffset(row);\r\n    const topOffset = this.getRowTop(row) - frozenRowOffset;\r\n    if (this._options.rowTopOffsetRenderType === 'transform') {\r\n      rowDiv.style.transform = `translateY(${topOffset}px)`;\r\n    } else {\r\n      rowDiv.style.top = `${topOffset}px`; // default to `top: {offset}px`\r\n    }\r\n\r\n    let rowDivR: HTMLElement | undefined;\r\n    divArrayL.push(rowDiv);\r\n    if (this.hasFrozenColumns()) {\r\n      // it has to be a deep copy otherwise we will have issues with pass by reference in js since\r\n      // attempting to add the same element to 2 different arrays will just move 1 item to the other array\r\n      rowDivR = rowDiv.cloneNode(true) as HTMLElement;\r\n      divArrayR.push(rowDivR);\r\n    }\r\n\r\n    const columnCount = this.columns.length;\r\n    let columnData: ColumnMetadata | null;\r\n    let colspan: number | string;\r\n    let rowspan: number;\r\n    let m: C;\r\n    let isRenderCell = true;\r\n\r\n    for (let i = 0, ii = columnCount; i < ii; i++) {\r\n      isRenderCell = true;\r\n      m = this.columns[i];\r\n      if (!m || m.hidden) { continue; }\r\n\r\n      colspan = 1;\r\n      rowspan = 1;\r\n      columnData = null;\r\n      if (metadata?.columns) {\r\n        columnData = metadata.columns[m.id] || metadata.columns[i];\r\n        colspan = columnData?.colspan || 1;\r\n        rowspan = columnData?.rowspan || 1;\r\n        if (colspan === '*') {\r\n          colspan = ii - i;\r\n        }\r\n        if (rowspan > dataLength - row) {\r\n          rowspan = dataLength - row;\r\n        }\r\n      }\r\n\r\n      if (!this._options.enableCellRowSpan && rowspan > 1) {\r\n        console.warn('[SlickGrid] Cell \"rowspan\" is an opt-in grid option because of its small perf hit, you must enable it via the \"enableCellRowSpan\" grid option.');\r\n      }\r\n\r\n      const ncolspan = colspan as number; // at this point colspan is for sure a number\r\n\r\n      // don't render child cell of a rowspan cell\r\n      const prs = this.getParentRowSpanByCell(row, i);\r\n      if (prs) {\r\n        continue;\r\n      }\r\n\r\n      // Do not render cells outside of the viewport.\r\n      if (this.columnPosRight[Math.min(ii - 1, i + ncolspan - 1)] > range.leftPx) {\r\n        if (!m.alwaysRenderColumn && this.columnPosLeft[i] > range.rightPx) {\r\n          isRenderCell = false; // render as false but keep looping to correctly save cellspan pointers\r\n        }\r\n\r\n        // All columns to the right are outside the range, so no need to render them\r\n        if (isRenderCell) {\r\n          const targetedRowDiv = (this.hasFrozenColumns() && (i > this._options.frozenColumn!) ? rowDivR! : rowDiv);\r\n          this.appendCellHtml(targetedRowDiv, row, i, ncolspan, rowspan, columnData, d);\r\n        }\r\n      } else if (m.alwaysRenderColumn || (this.hasFrozenColumns() && i <= this._options.frozenColumn!)) {\r\n        this.appendCellHtml(rowDiv, row, i, ncolspan, rowspan, columnData, d);\r\n      }\r\n\r\n      if (ncolspan > 1) {\r\n        i += (ncolspan - 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  protected appendCellHtml(divRow: HTMLElement, row: number, cell: number, colspan: number, rowspan: number, columnMetadata: ColumnMetadata | null, item: TData) {\r\n    // divRow: the html element to append items too\r\n    // row, cell: row and column index\r\n    // colspan: HTML colspan\r\n    // item: grid data for row\r\n\r\n    const m = this.columns[cell];\r\n    let cellCss = `slick-cell l${cell} r${Math.min(this.columns.length - 1, cell + colspan - 1)}`\r\n      + (m.cssClass ? ` ${m.cssClass}` : '')\r\n      + (rowspan > 1 ? ' rowspan' : '')\r\n      + (columnMetadata?.cssClass ? ` ${columnMetadata.cssClass}` : '');\r\n\r\n    if (this.hasFrozenColumns() && cell <= this._options.frozenColumn!) {\r\n      cellCss += ' frozen';\r\n    }\r\n\r\n    if (row === this.activeRow && cell === this.activeCell && this._options.showCellSelection) {\r\n      cellCss += ' active';\r\n    }\r\n\r\n    // TODO: merge them together in the setter\r\n    Object.keys(this.cellCssClasses).forEach(key => {\r\n      if (this.cellCssClasses[key][row]?.[m.id]) {\r\n        cellCss += ` ${this.cellCssClasses[key][row][m.id]}`;\r\n      }\r\n    });\r\n\r\n    let value: any = null;\r\n    let formatterResult: FormatterResultWithHtml | FormatterResultWithText | HTMLElement | DocumentFragment | string = '';\r\n    if (item) {\r\n      value = this.getDataItemValueForColumn(item, m);\r\n      formatterResult = this.getFormatter(row, m)(row, cell, value, m, item, this as unknown as SlickGridModel);\r\n      if (formatterResult === null || formatterResult === undefined) {\r\n        formatterResult = '';\r\n      }\r\n    }\r\n\r\n    // get addl css class names from object type formatter return and from string type return of onBeforeAppendCell\r\n    // we will only use the event result as CSS classes when it is a string type (undefined event always return a true boolean which is not a valid css class)\r\n    const evt = this.trigger(this.onBeforeAppendCell, { row, cell, value, dataContext: item });\r\n    const appendCellResult = evt.getReturnValue();\r\n    let addlCssClasses = typeof appendCellResult === 'string' ? appendCellResult : '';\r\n    if ((formatterResult as FormatterResultObject)?.addClasses) {\r\n      addlCssClasses += Utils.classNameToList((addlCssClasses ? ' ' : '') + (formatterResult as FormatterResultObject).addClasses).join(' ');\r\n    }\r\n\r\n    const toolTipText = (formatterResult as FormatterResultObject)?.toolTip ? `${(formatterResult as FormatterResultObject).toolTip}` : '';\r\n    const cellDiv = Utils.createDomElement('div', {\r\n      className: Utils.classNameToList(`${cellCss} ${addlCssClasses || ''}`).join(' '),\r\n      role: 'gridcell',\r\n      tabIndex: -1\r\n    });\r\n    cellDiv.setAttribute('aria-describedby', this.uid + m.id);\r\n    if (toolTipText) {\r\n      cellDiv.setAttribute('title', toolTipText);\r\n    }\r\n\r\n    // update cell rowspan height when spanning more than 1 row\r\n    const cellHeight = this.getCellHeight(row, rowspan);\r\n    if (rowspan > 1 && cellHeight !== (this._options.rowHeight! - this.cellHeightDiff)) {\r\n      cellDiv.style.height = `${cellHeight || 0}px`;\r\n    }\r\n\r\n    if (m.hasOwnProperty('cellAttrs') && m.cellAttrs instanceof Object) {\r\n      Object.keys(m.cellAttrs).forEach(key => {\r\n        if (m.cellAttrs.hasOwnProperty(key)) {\r\n          cellDiv.setAttribute(key, m.cellAttrs[key]);\r\n        }\r\n      });\r\n    }\r\n\r\n    // if there is a corresponding row (if not, this is the Add New row or this data hasn't been loaded yet)\r\n    if (item) {\r\n      const cellResult = (Object.prototype.toString.call(formatterResult) !== '[object Object]' ? formatterResult : (formatterResult as FormatterResultWithHtml).html || (formatterResult as FormatterResultWithText).text);\r\n      this.applyHtmlCode(cellDiv, cellResult as string | HTMLElement);\r\n    }\r\n    divRow.appendChild(cellDiv);\r\n\r\n    // Formatter can optional add an \"insertElementAfterTarget\" option but it must be inserted only after the `.slick-row` div exists\r\n    if ((formatterResult as FormatterResultObject).insertElementAfterTarget) {\r\n      Utils.insertAfterElement(cellDiv, (formatterResult as FormatterResultObject).insertElementAfterTarget as HTMLElement);\r\n    }\r\n\r\n    this.rowsCache[row].cellRenderQueue.push(cell);\r\n    this.rowsCache[row].cellColSpans[cell] = colspan;\r\n  }\r\n\r\n  protected cleanupRows(rangeToKeep: { bottom: number; top: number; }) {\r\n    // when using rowspan, we might have mandatory rows that cannot be cleaned up\r\n    // that is basically the starting row that holds the rowspan, that row cannot be cleaned up because it would break the UI\r\n    const mandatoryRows = new Set<number>();\r\n    if (this._options.enableCellRowSpan) {\r\n      for (let i = rangeToKeep.top, ln = rangeToKeep.bottom; i <= ln; i++) {\r\n        const parentRowSpan = this.getRowSpanIntersect(i);\r\n        if (parentRowSpan !== null) {\r\n          mandatoryRows.add(parentRowSpan); // add to Set which will take care of duplicate rows\r\n        }\r\n      }\r\n    }\r\n\r\n    Object.keys(this.rowsCache).forEach(rowId => {\r\n      if (this.rowsCache) {\r\n        let i = +rowId;\r\n        let removeFrozenRow = true;\r\n\r\n        if (this.hasFrozenRows\r\n          && ((this._options.frozenBottom && (i as unknown as number) >= this.actualFrozenRow) // Frozen bottom rows\r\n            || (!this._options.frozenBottom && (i as unknown as number) <= this.actualFrozenRow) // Frozen top rows\r\n          )\r\n        ) {\r\n          removeFrozenRow = false;\r\n        }\r\n\r\n        if (((i = parseInt(rowId, 10)) !== this.activeRow)\r\n          && (i < rangeToKeep.top || i > rangeToKeep.bottom)\r\n          && (removeFrozenRow)\r\n          && !mandatoryRows.has(i)\r\n        ) {\r\n          this.removeRowFromCache(i);\r\n        }\r\n      }\r\n    });\r\n    if (this._options.enableAsyncPostRenderCleanup) {\r\n      this.startPostProcessingCleanup();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * from a row number, return any column indexes that intersected with the grid row including the cell\r\n   * @param {Number} row - grid row index\r\n   */\r\n  getRowSpanColumnIntersects(row: number): number[] {\r\n    return this.getRowSpanIntersection<number[]>(row, 'columns');\r\n  }\r\n\r\n  /**\r\n   * from a row number, verify if the rowspan is intersecting and return it when found,\r\n   * otherwise return `null` when nothing is found or when the rowspan feature is disabled.\r\n   * @param {Number} row - grid row index\r\n   */\r\n  getRowSpanIntersect(row: number): number | null {\r\n    return this.getRowSpanIntersection<number | null>(row);\r\n  }\r\n\r\n  protected getRowSpanIntersection<R>(row: number, outputType?: 'columns' | 'start'): R {\r\n    const columnIntersects: number[] = [];\r\n    let rowStartIntersect = null;\r\n\r\n    for (let col = 0, cln = this.columns.length; col < cln; col++) {\r\n      const rmeta = this._colsWithRowSpanCache[col];\r\n      if (rmeta) {\r\n        for (const range of Array.from(rmeta)) {\r\n          const [start, end] = range.split(':').map(Number);\r\n          if (row >= start && row <= end) {\r\n            if (outputType === 'columns') {\r\n              columnIntersects.push(col);\r\n            } else {\r\n              rowStartIntersect = start;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return (outputType === 'columns' ? columnIntersects : rowStartIntersect) as R;\r\n  }\r\n\r\n  /**\r\n   * Returns the parent rowspan details when child cell are spanned from a rowspan or `null` when it's not spanned.\r\n   * By default it will exclude the parent cell that holds the rowspan, and return `null`, that initiated the rowspan unless the 3rd argument is disabled.\r\n   * The exclusion is helpful to find out when we're dealing with a child cell of a rowspan\r\n   * @param {Number} row - grid row index\r\n   * @param {Number} cell - grid cell/column index\r\n   * @param {Boolean} [excludeParentRow] - should we exclude the parent who initiated the rowspan in the search (defaults to true)?\r\n   */\r\n  getParentRowSpanByCell(row: number, cell: number, excludeParentRow = true): { start: number; end: number; range: string; } | null {\r\n    let spanDetail = null;\r\n    const rowspanRange = this._colsWithRowSpanCache[cell] || new Set<string>();\r\n\r\n    for (const range of Array.from(rowspanRange)) {\r\n      const [start, end] = range.split(':').map(Number);\r\n      const startCondition = excludeParentRow ? row > start : row >= start;\r\n      if (startCondition && row <= end) {\r\n        spanDetail = { start, end, range };\r\n        break;\r\n      }\r\n    }\r\n\r\n    return spanDetail;\r\n  }\r\n\r\n  /**\r\n   * Remap all the rowspan metadata by looping through all dataset rows and keep a cache of rowspan by column indexes\r\n   * For example:\r\n   *  1- if 2nd row of the 1st column has a metadata.rowspan of 3 then the cache will be: `{ 0: '1:4' }`\r\n   *  2- if 2nd row if the 1st column has a metadata.rowspan of 3 AND a colspan of 2 then the cache will be: `{ 0: '1:4', 1: '1:4' }`\r\n   */\r\n  protected remapAllColumnsRowSpan() {\r\n    const ln = this.getDataLength();\r\n    if (ln > 0) {\r\n      this._colsWithRowSpanCache = {};\r\n      for (let row = 0; row < ln; row++) {\r\n        this.remapRowSpanMetadataByRow(row);\r\n      }\r\n\r\n      this._rowSpanIsCached = true;\r\n    }\r\n  }\r\n\r\n  protected remapRowSpanMetadataByRow(row: number) {\r\n    const colMeta = this.getItemMetadaWhenExists(row);\r\n    if (colMeta?.columns) {\r\n      Object.keys(colMeta.columns).forEach(col => {\r\n        const colIdx = +col;\r\n        const columnMeta = colMeta.columns![colIdx];\r\n        const colspan = +(columnMeta?.colspan || 1);\r\n        const rowspan = +(columnMeta?.rowspan || 1);\r\n        this.remapRowSpanMetadata(row, colIdx, colspan, rowspan);\r\n      });\r\n    }\r\n  }\r\n\r\n  protected remapRowSpanMetadata(row: number, cell: number, colspan: number, rowspan: number) {\r\n    if (rowspan > 1) {\r\n      const rspan = `${row}:${row + rowspan - 1}`;\r\n      this._colsWithRowSpanCache[cell] ??= new Set();\r\n      this._colsWithRowSpanCache[cell].add(rspan);\r\n      if (colspan > 1) {\r\n        for (let i = 1; i < colspan; i++) {\r\n          this._colsWithRowSpanCache[cell + i] ??= new Set();\r\n          this._colsWithRowSpanCache[cell + i].add(rspan);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Invalidate all grid rows and re-render the visible grid rows */\r\n  invalidate() {\r\n    this.updateRowCount();\r\n    this.invalidateAllRows();\r\n    this.render();\r\n  }\r\n\r\n  /** Invalidate all grid rows */\r\n  invalidateAllRows() {\r\n    if (this.currentEditor) {\r\n      this.makeActiveCellNormal();\r\n    }\r\n\r\n    if (typeof this.rowsCache === 'object') {\r\n      Object.keys(this.rowsCache).forEach(row => {\r\n        if (this.rowsCache) {\r\n          this.removeRowFromCache(+row);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (this._options.enableAsyncPostRenderCleanup) {\r\n      this.startPostProcessingCleanup();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invalidate a specific set of row numbers\r\n   * @param {Number[]} rows\r\n   */\r\n  invalidateRows(rows: number[]) {\r\n    if (!rows || !rows.length) {\r\n      return;\r\n    }\r\n\r\n    let row;\r\n    this.vScrollDir = 0;\r\n    const rl = rows.length;\r\n\r\n    // use Set to avoid duplicates\r\n    const invalidatedRows = new Set<number>();\r\n    const requiredRemapRows = new Set<number>();\r\n\r\n    // only do a partial rowspan remapping when the number of rows is limited and the rows aren't the full dataset\r\n    // otherwise a full rowspan remap of the cache is much quicker and cheaper to perform\r\n    const isRowSpanFullRemap = (\r\n      rows.length > this._options.maxPartialRowSpanRemap! ||\r\n      rows.length === this.getDataLength() ||\r\n      this._prevInvalidatedRowsCount + rows.length === this.getDataLength()\r\n    );\r\n\r\n    for (let i = 0; i < rl; i++) {\r\n      row = rows[i];\r\n      if (this.currentEditor && this.activeRow === row) {\r\n        this.makeActiveCellNormal();\r\n      }\r\n      if (this.rowsCache[row]) {\r\n        this.removeRowFromCache(row);\r\n      }\r\n\r\n      // add any rows that have rowspan intersects if it's not already in the list\r\n      if (this._options.enableCellRowSpan && !isRowSpanFullRemap) {\r\n        invalidatedRows.add(row);\r\n        const parentRowSpan = this.getRowSpanIntersect(row);\r\n        if (parentRowSpan !== null) {\r\n          invalidatedRows.add(parentRowSpan);\r\n        }\r\n      }\r\n    }\r\n\r\n    // when a partial rowspan remapping is necessary\r\n    if (this._options.enableCellRowSpan && !isRowSpanFullRemap) {\r\n      for (const ir of Array.from(invalidatedRows)) {\r\n        const colIdxs = this.getRowSpanColumnIntersects(ir);\r\n        for (const cidx of colIdxs) {\r\n          const prs = this.getParentRowSpanByCell(ir, cidx);\r\n          if (prs && this._colsWithRowSpanCache[cidx]) {\r\n            this._colsWithRowSpanCache[cidx].delete(prs.range);\r\n            requiredRemapRows.add(prs.range.split(':').map(Number)[0]);\r\n          }\r\n        }\r\n      }\r\n\r\n      // now that we know all the rows that need remapping, let's start remapping\r\n      for (const row of Array.from(requiredRemapRows)) {\r\n        this.remapRowSpanMetadataByRow(row);\r\n      }\r\n    }\r\n\r\n    if (this._options.enableAsyncPostRenderCleanup) {\r\n      this.startPostProcessingCleanup();\r\n    }\r\n    this._prevInvalidatedRowsCount = rows.length;\r\n  }\r\n\r\n  /**\r\n   * Invalidate a specific row number\r\n   * @param {Number} row\r\n   */\r\n  invalidateRow(row: number) {\r\n    if (row >= 0) {\r\n      const rows = [row];\r\n      if (this._options.enableCellRowSpan) {\r\n        const intersectedRow = this.getRowSpanIntersect(row);\r\n        if (intersectedRow !== null) {\r\n          rows.push(intersectedRow);\r\n        }\r\n      }\r\n      this.invalidateRows(rows);\r\n    }\r\n  }\r\n\r\n  protected queuePostProcessedRowForCleanup(cacheEntry: RowCaching, postProcessedRow: any, rowIdx: number) {\r\n    this.postProcessgroupId++;\r\n\r\n    // store and detach node for later async cleanup\r\n    if (typeof postProcessedRow === 'object') {\r\n      Object.keys(postProcessedRow).forEach(columnIdx => {\r\n        if (postProcessedRow.hasOwnProperty(columnIdx)) {\r\n          this.postProcessedCleanupQueue.push({\r\n            actionType: 'C',\r\n            groupId: this.postProcessgroupId,\r\n            node: cacheEntry.cellNodesByColumnIdx[+columnIdx],\r\n            columnIdx: +columnIdx,\r\n            rowIdx\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    if (!cacheEntry.rowNode) {\r\n      cacheEntry.rowNode = [];\r\n    }\r\n    this.postProcessedCleanupQueue.push({\r\n      actionType: 'R',\r\n      groupId: this.postProcessgroupId,\r\n      node: cacheEntry.rowNode as HTMLElement[]\r\n    });\r\n    cacheEntry.rowNode?.forEach((node) => node.remove());\r\n  }\r\n\r\n  protected queuePostProcessedCellForCleanup(cellnode: HTMLElement, columnIdx: number, rowIdx: number) {\r\n    this.postProcessedCleanupQueue.push({\r\n      actionType: 'C',\r\n      groupId: this.postProcessgroupId,\r\n      node: cellnode,\r\n      columnIdx,\r\n      rowIdx\r\n    });\r\n    cellnode.remove();\r\n  }\r\n\r\n  protected removeRowFromCache(row: number) {\r\n    const cacheEntry = this.rowsCache[row];\r\n    if (!cacheEntry || !cacheEntry.rowNode) {\r\n      return;\r\n    }\r\n\r\n    if (this._options.enableAsyncPostRenderCleanup && this.postProcessedRows[row]) {\r\n      this.queuePostProcessedRowForCleanup(cacheEntry, this.postProcessedRows[row], row);\r\n    } else {\r\n      cacheEntry.rowNode?.forEach((node: HTMLElement) => node.parentElement?.removeChild(node));\r\n    }\r\n\r\n    delete this.rowsCache[row];\r\n    delete this.postProcessedRows[row];\r\n    this.renderedRows--;\r\n    this.counter_rows_removed++;\r\n  }\r\n\r\n  /** Apply a Formatter Result to a Cell DOM Node */\r\n  applyFormatResultToCellNode(formatterResult: FormatterResultWithHtml | FormatterResultWithText | string | HTMLElement | DocumentFragment, cellNode: HTMLDivElement, suppressRemove?: boolean) {\r\n    if (formatterResult === null || formatterResult === undefined) { formatterResult = ''; }\r\n    if (Object.prototype.toString.call(formatterResult) !== '[object Object]') {\r\n      this.applyHtmlCode(cellNode, formatterResult as string | HTMLElement);\r\n      return;\r\n    }\r\n\r\n    const formatterVal: HTMLElement | string = (formatterResult as FormatterResultWithHtml).html || (formatterResult as FormatterResultWithText).text;\r\n    this.applyHtmlCode(cellNode, formatterVal);\r\n\r\n    if ((formatterResult as FormatterResultObject).removeClasses && !suppressRemove) {\r\n      cellNode.classList.remove(...Utils.classNameToList((formatterResult as FormatterResultObject).removeClasses));\r\n    }\r\n    if ((formatterResult as FormatterResultObject).addClasses) {\r\n      cellNode.classList.add(...Utils.classNameToList((formatterResult as FormatterResultObject).addClasses));\r\n    }\r\n    if ((formatterResult as FormatterResultObject).toolTip) {\r\n      cellNode.setAttribute('title', (formatterResult as FormatterResultObject).toolTip!);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update a specific cell by its row and column index\r\n   * @param {Number} row - grid row number\r\n   * @param {Number} cell - grid cell column number\r\n   */\r\n  updateCell(row: number, cell: number) {\r\n    const cellNode = this.getCellNode(row, cell);\r\n    if (!cellNode) {\r\n      return;\r\n    }\r\n\r\n    const m = this.columns[cell];\r\n    const d = this.getDataItem(row);\r\n    if (this.currentEditor && this.activeRow === row && this.activeCell === cell) {\r\n      this.currentEditor.loadValue(d);\r\n    } else {\r\n      // if the cell has other coordinates because of row/cell span, update that cell (which will invalidate this cellNode)\r\n      // const spans = this.getSpans(row, cell);\r\n      // if (spans[0] !== row || spans[1] !== cell) {\r\n      //   this.updateCell(spans[0], spans[1]);\r\n      //   return;\r\n      // }\r\n      const formatterResult = d ? this.getFormatter(row, m)(row, cell, this.getDataItemValueForColumn(d, m), m, d, this as unknown as SlickGridModel) : '';\r\n      this.applyFormatResultToCellNode(formatterResult, cellNode);\r\n      this.invalidatePostProcessingResults(row);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update a specific row by its row index\r\n   * @param {Number} row - grid row number\r\n   */\r\n  updateRow(row: number) {\r\n    const cacheEntry = this.rowsCache[row];\r\n    if (!cacheEntry) {\r\n      return;\r\n    }\r\n\r\n    this.ensureCellNodesInRowsCache(row);\r\n\r\n    let formatterResult;\r\n    const d = this.getDataItem(row);\r\n\r\n    Object.keys(cacheEntry.cellNodesByColumnIdx).forEach(colIdx => {\r\n      if (!cacheEntry.cellNodesByColumnIdx.hasOwnProperty(colIdx)) {\r\n        return;\r\n      }\r\n\r\n      const columnIdx = +colIdx;\r\n      const m = this.columns[columnIdx];\r\n      const node = cacheEntry.cellNodesByColumnIdx[columnIdx];\r\n\r\n      if (row === this.activeRow && columnIdx === this.activeCell && this.currentEditor) {\r\n        this.currentEditor.loadValue(d);\r\n      } else if (d) {\r\n        formatterResult = this.getFormatter(row, m)(row, columnIdx, this.getDataItemValueForColumn(d, m), m, d, this as unknown as SlickGridModel);\r\n        this.applyFormatResultToCellNode(formatterResult, node as HTMLDivElement);\r\n      } else {\r\n        Utils.emptyElement(node);\r\n      }\r\n    });\r\n\r\n    this.invalidatePostProcessingResults(row);\r\n  }\r\n\r\n  getCellHeight(row: number, rowspan: number) {\r\n    let cellHeight = this._options.rowHeight || 0;\r\n    if (rowspan > 1) {\r\n      const rowSpanBottomIdx = row + rowspan - 1;\r\n      cellHeight = this.getRowBottom(rowSpanBottomIdx) - this.getRowTop(row);\r\n    } else {\r\n      const rowHeight = this.getRowHeight();\r\n      if (rowHeight !== cellHeight - this.cellHeightDiff) {\r\n        cellHeight = rowHeight;\r\n      }\r\n    }\r\n    cellHeight -= this.cellHeightDiff;\r\n    return Math.ceil(cellHeight);\r\n  }\r\n\r\n  /**\r\n   * Get the number of rows displayed in the viewport\r\n   * Note that the row count is an approximation because it is a calculated value using this formula (viewport / rowHeight = rowCount),\r\n   * the viewport must also be displayed for this calculation to work.\r\n   * @return {Number} rowCount\r\n   */\r\n  getViewportRowCount() {\r\n    const vh = this.getViewportHeight();\r\n    const scrollbarHeight = this.getScrollbarDimensions()?.height ?? 0;\r\n    return Math.floor((vh - scrollbarHeight) / this._options.rowHeight!);\r\n  }\r\n\r\n  getViewportHeight() {\r\n    if (!this._options.autoHeight || this._options.frozenColumn !== -1) {\r\n      this.topPanelH = (this._options.showTopPanel) ? this._options.topPanelHeight! + this.getVBoxDelta(this._topPanelScrollers[0]) : 0;\r\n      this.headerRowH = (this._options.showHeaderRow) ? this._options.headerRowHeight! + this.getVBoxDelta(this._headerRowScroller[0]) : 0;\r\n      this.footerRowH = (this._options.showFooterRow) ? this._options.footerRowHeight! + this.getVBoxDelta(this._footerRowScroller[0]) : 0;\r\n    }\r\n\r\n    if (this._options.autoHeight) {\r\n      let fullHeight = this._paneHeaderL.offsetHeight;\r\n      fullHeight += (this._options.showHeaderRow) ? this._options.headerRowHeight! + this.getVBoxDelta(this._headerRowScroller[0]) : 0;\r\n      fullHeight += (this._options.showFooterRow) ? this._options.footerRowHeight! + this.getVBoxDelta(this._footerRowScroller[0]) : 0;\r\n      fullHeight += (this.getCanvasWidth() > this.viewportW) ? (this.scrollbarDimensions?.height ?? 0) : 0;\r\n\r\n      this.viewportH = this._options.rowHeight!\r\n        * this.getDataLengthIncludingAddNew()\r\n        + ((this._options.frozenColumn === -1) ? fullHeight : 0);\r\n    } else {\r\n      const columnNamesH = (this._options.showColumnHeader) ? Utils.toFloat(Utils.height(this._headerScroller[0]) as number) + this.getVBoxDelta(this._headerScroller[0]) : 0;\r\n      const preHeaderH = (this._options.createPreHeaderPanel && this._options.showPreHeaderPanel) ? this._options.preHeaderPanelHeight! + this.getVBoxDelta(this._preHeaderPanelScroller) : 0;\r\n      const topHeaderH = (this._options.createTopHeaderPanel && this._options.showTopHeaderPanel) ? this._options.topHeaderPanelHeight! + this.getVBoxDelta(this._topHeaderPanelScroller) : 0;\r\n\r\n      const style = getComputedStyle(this._container);\r\n      this.viewportH = Utils.toFloat(style.height)\r\n        - Utils.toFloat(style.paddingTop)\r\n        - Utils.toFloat(style.paddingBottom)\r\n        - columnNamesH\r\n        - this.topPanelH\r\n        - this.headerRowH\r\n        - this.footerRowH\r\n        - preHeaderH\r\n        - topHeaderH;\r\n    }\r\n\r\n    this.numVisibleRows = Math.ceil(this.viewportH / this._options.rowHeight!);\r\n    return this.viewportH;\r\n  }\r\n\r\n  getViewportWidth() {\r\n    this.viewportW = parseFloat(Utils.innerSize(this._container, 'width') as unknown as string) || (this._options.devMode && this._options.devMode.containerClientWidth) || 0;\r\n    return this.viewportW;\r\n  }\r\n\r\n  /** Execute a Resize of the Grid Canvas */\r\n  resizeCanvas() {\r\n    if (!this.initialized) { return; }\r\n    this.paneTopH = 0;\r\n    this.paneBottomH = 0;\r\n    this.viewportTopH = 0;\r\n    this.viewportBottomH = 0;\r\n\r\n    this.getViewportWidth();\r\n    this.getViewportHeight();\r\n\r\n    // Account for Frozen Rows\r\n    if (this.hasFrozenRows) {\r\n      if (this._options.frozenBottom) {\r\n        this.paneTopH = this.viewportH - this.frozenRowsHeight - (this.scrollbarDimensions?.height ?? 0);\r\n        this.paneBottomH = this.frozenRowsHeight + (this.scrollbarDimensions?.height ?? 0);\r\n      } else {\r\n        this.paneTopH = this.frozenRowsHeight;\r\n        this.paneBottomH = this.viewportH - this.frozenRowsHeight;\r\n      }\r\n    } else {\r\n      this.paneTopH = this.viewportH;\r\n    }\r\n\r\n    // The top pane includes the top panel and the header row\r\n    this.paneTopH += this.topPanelH + this.headerRowH + this.footerRowH;\r\n\r\n    if (this.hasFrozenColumns() && this._options.autoHeight) {\r\n      this.paneTopH += (this.scrollbarDimensions?.height ?? 0);\r\n    }\r\n\r\n    // The top viewport does not contain the top panel or header row\r\n    this.viewportTopH = this.paneTopH - this.topPanelH - this.headerRowH - this.footerRowH;\r\n\r\n    if (this._options.autoHeight) {\r\n      if (this.hasFrozenColumns()) {\r\n        const style = getComputedStyle(this._headerScrollerL);\r\n        Utils.height(this._container, this.paneTopH + Utils.toFloat(style.height));\r\n      }\r\n\r\n      this._paneTopL.style.position = 'relative';\r\n    }\r\n\r\n    let topHeightOffset = Utils.height(this._paneHeaderL);\r\n    if (topHeightOffset) {\r\n      topHeightOffset += (this._options.showTopHeaderPanel ? this._options.topHeaderPanelHeight! : 0);\r\n    } else {\r\n      topHeightOffset = (this._options.showHeaderRow ? this._options.headerRowHeight! : 0) + (this._options.showPreHeaderPanel ? this._options.preHeaderPanelHeight! : 0);\r\n    }\r\n    Utils.setStyleSize(this._paneTopL, 'top', topHeightOffset || topHeightOffset);\r\n    Utils.height(this._paneTopL, this.paneTopH);\r\n\r\n    const paneBottomTop = this._paneTopL.offsetTop + this.paneTopH;\r\n\r\n    if (!this._options.autoHeight) {\r\n      Utils.height(this._viewportTopL, this.viewportTopH);\r\n    }\r\n\r\n    if (this.hasFrozenColumns()) {\r\n      let topHeightOffset = Utils.height(this._paneHeaderL);\r\n      if (topHeightOffset) {\r\n        topHeightOffset += (this._options.showTopHeaderPanel ? this._options.topHeaderPanelHeight! : 0);\r\n      }\r\n      Utils.setStyleSize(this._paneTopR, 'top', topHeightOffset as number);\r\n      Utils.height(this._paneTopR, this.paneTopH);\r\n      Utils.height(this._viewportTopR, this.viewportTopH);\r\n\r\n      if (this.hasFrozenRows) {\r\n        Utils.setStyleSize(this._paneBottomL, 'top', paneBottomTop);\r\n        Utils.height(this._paneBottomL, this.paneBottomH);\r\n        Utils.setStyleSize(this._paneBottomR, 'top', paneBottomTop);\r\n        Utils.height(this._paneBottomR, this.paneBottomH);\r\n        Utils.height(this._viewportBottomR, this.paneBottomH);\r\n      }\r\n    } else {\r\n      if (this.hasFrozenRows) {\r\n        Utils.width(this._paneBottomL, '100%');\r\n        Utils.height(this._paneBottomL, this.paneBottomH);\r\n        Utils.setStyleSize(this._paneBottomL, 'top', paneBottomTop);\r\n      }\r\n    }\r\n\r\n    if (this.hasFrozenRows) {\r\n      Utils.height(this._viewportBottomL, this.paneBottomH);\r\n\r\n      if (this._options.frozenBottom) {\r\n        Utils.height(this._canvasBottomL, this.frozenRowsHeight);\r\n\r\n        if (this.hasFrozenColumns()) {\r\n          Utils.height(this._canvasBottomR, this.frozenRowsHeight);\r\n        }\r\n      } else {\r\n        Utils.height(this._canvasTopL, this.frozenRowsHeight);\r\n\r\n        if (this.hasFrozenColumns()) {\r\n          Utils.height(this._canvasTopR, this.frozenRowsHeight);\r\n        }\r\n      }\r\n    } else {\r\n      Utils.height(this._viewportTopR, this.viewportTopH);\r\n    }\r\n\r\n    if (!this.scrollbarDimensions || !this.scrollbarDimensions.width) {\r\n      this.scrollbarDimensions = this.measureScrollbar();\r\n    }\r\n\r\n    if (this._options.autosizeColsMode === GridAutosizeColsMode.LegacyForceFit) {\r\n      this.autosizeColumns();\r\n    }\r\n\r\n    this.updateRowCount();\r\n    this.handleScroll();\r\n    // Since the width has changed, force the render() to reevaluate virtually rendered cells.\r\n    this.lastRenderedScrollLeft = -1;\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Update paging information status from the View\r\n   * @param {PagingInfo} pagingInfo\r\n   */\r\n  updatePagingStatusFromView(pagingInfo: Pick<PagingInfo, 'pageSize' | 'pageNum' | 'totalPages'>) {\r\n    this.pagingActive = (pagingInfo.pageSize !== 0);\r\n    this.pagingIsLastPage = (pagingInfo.pageNum === pagingInfo.totalPages - 1);\r\n  }\r\n\r\n  /** Update the dataset row count */\r\n  updateRowCount() {\r\n    if (!this.initialized) { return; }\r\n\r\n    const dataLength = this.getDataLength();\r\n\r\n    // remap all rowspan cache when necessary\r\n    if (dataLength > 0 && dataLength !== this._prevDataLength) {\r\n      this._rowSpanIsCached = false; // will force a full remap\r\n    }\r\n    if (this._options.enableCellRowSpan && !this._rowSpanIsCached) {\r\n      this.remapAllColumnsRowSpan();\r\n    }\r\n\r\n    this._prevDataLength = dataLength;\r\n    const dataLengthIncludingAddNew = this.getDataLengthIncludingAddNew();\r\n    let numberOfRows = 0;\r\n    let oldH = ((this.hasFrozenRows && !this._options.frozenBottom) ? Utils.height(this._canvasBottomL) : Utils.height(this._canvasTopL)) as number;\r\n\r\n    if (this.hasFrozenRows) {\r\n      numberOfRows = this.getDataLength() - this._options.frozenRow!;\r\n    } else {\r\n      numberOfRows = dataLengthIncludingAddNew + (this._options.leaveSpaceForNewRows ? this.numVisibleRows - 1 : 0);\r\n    }\r\n\r\n    const tempViewportH = Utils.height(this._viewportScrollContainerY) as number;\r\n    const oldViewportHasVScroll = this.viewportHasVScroll;\r\n    // with autoHeight, we do not need to accommodate the vertical scroll bar\r\n    this.viewportHasVScroll = this._options.alwaysShowVerticalScroll || !this._options.autoHeight && (numberOfRows * this._options.rowHeight! > tempViewportH);\r\n\r\n    this.makeActiveCellNormal();\r\n\r\n    // remove the rows that are now outside of the data range\r\n    // this helps avoid redundant calls to .removeRow() when the size of the data decreased by thousands of rows\r\n    const r1 = dataLength - 1;\r\n    if (typeof this.rowsCache === 'object') {\r\n      Object.keys(this.rowsCache).forEach(row => {\r\n        const cachedRow = +row;\r\n        if (cachedRow > r1) {\r\n          this.removeRowFromCache(cachedRow);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (this._options.enableAsyncPostRenderCleanup) {\r\n      this.startPostProcessingCleanup();\r\n    }\r\n\r\n    if (this.activeCellNode && this.activeRow > r1) {\r\n      this.resetActiveCell();\r\n    }\r\n\r\n    oldH = this.h;\r\n    if (this._options.autoHeight) {\r\n      this.h = this._options.rowHeight! * numberOfRows;\r\n    } else {\r\n      this.th = Math.max(this._options.rowHeight! * numberOfRows, tempViewportH - (this.scrollbarDimensions?.height ?? 0));\r\n      if (this.th < this.maxSupportedCssHeight) {\r\n        // just one page\r\n        this.h = this.ph = this.th;\r\n        this.n = 1;\r\n        this.cj = 0;\r\n      } else {\r\n        // break into pages\r\n        this.h = this.maxSupportedCssHeight;\r\n        this.ph = this.h / 100;\r\n        this.n = Math.floor(this.th / this.ph);\r\n        this.cj = (this.th - this.h) / (this.n - 1);\r\n      }\r\n    }\r\n\r\n    if (this.h !== oldH || this.enforceFrozenRowHeightRecalc) {\r\n      if (this.hasFrozenRows && !this._options.frozenBottom) {\r\n        Utils.height(this._canvasBottomL, this.h);\r\n\r\n        if (this.hasFrozenColumns()) {\r\n          Utils.height(this._canvasBottomR, this.h);\r\n        }\r\n      } else {\r\n        Utils.height(this._canvasTopL, this.h);\r\n        Utils.height(this._canvasTopR, this.h);\r\n      }\r\n\r\n      this.scrollTop = this._viewportScrollContainerY.scrollTop;\r\n      this.scrollHeight = this._viewportScrollContainerY.scrollHeight;\r\n      this.enforceFrozenRowHeightRecalc = false; // reset enforce flag\r\n    }\r\n\r\n    const oldScrollTopInRange = (this.scrollTop + this.offset <= this.th - tempViewportH);\r\n\r\n    if (this.th === 0 || this.scrollTop === 0) {\r\n      this.page = this.offset = 0;\r\n    } else if (oldScrollTopInRange) {\r\n      // maintain virtual position\r\n      this.scrollTo(this.scrollTop + this.offset);\r\n    } else {\r\n      // scroll to bottom\r\n      this.scrollTo(this.th - tempViewportH + (this.scrollbarDimensions?.height ?? 0));\r\n    }\r\n\r\n    if (this.h !== oldH && this._options.autoHeight) {\r\n      this.resizeCanvas();\r\n    }\r\n\r\n    if (this._options.autosizeColsMode === GridAutosizeColsMode.LegacyForceFit && oldViewportHasVScroll !== this.viewportHasVScroll) {\r\n      this.autosizeColumns();\r\n    }\r\n    this.updateCanvasWidth(false);\r\n  }\r\n\r\n  /** @alias `getVisibleRange` */\r\n  getViewport(viewportTop?: number, viewportLeft?: number) {\r\n    return this.getVisibleRange(viewportTop, viewportLeft);\r\n  }\r\n\r\n  getVisibleRange(viewportTop?: number, viewportLeft?: number) {\r\n    viewportTop ??= this.scrollTop;\r\n    viewportLeft ??= this.scrollLeft;\r\n\r\n    return {\r\n      top: this.getRowFromPosition(viewportTop),\r\n      bottom: this.getRowFromPosition(viewportTop + this.viewportH) + 1,\r\n      leftPx: viewportLeft,\r\n      rightPx: viewportLeft + this.viewportW\r\n    };\r\n  }\r\n\r\n  /** Get rendered range */\r\n  getRenderedRange(viewportTop?: number, viewportLeft?: number) {\r\n    const range = this.getVisibleRange(viewportTop, viewportLeft);\r\n    const buffer = Math.round(this.viewportH / this._options.rowHeight!);\r\n    const minBuffer = this._options.minRowBuffer as number;\r\n\r\n    if (this.vScrollDir === -1) {\r\n      range.top -= buffer;\r\n      range.bottom += minBuffer;\r\n    } else if (this.vScrollDir === 1) {\r\n      range.top -= minBuffer;\r\n      range.bottom += buffer;\r\n    } else {\r\n      range.top -= minBuffer;\r\n      range.bottom += minBuffer;\r\n    }\r\n\r\n    range.top = Math.max(0, range.top);\r\n    range.bottom = Math.min(this.getDataLengthIncludingAddNew() - 1, range.bottom);\r\n\r\n    range.leftPx -= this.viewportW;\r\n    range.rightPx += this.viewportW;\r\n\r\n    range.leftPx = Math.max(0, range.leftPx);\r\n    range.rightPx = Math.min(this.canvasWidth, range.rightPx);\r\n\r\n    return range;\r\n  }\r\n\r\n  protected ensureCellNodesInRowsCache(row: number) {\r\n    const cacheEntry = this.rowsCache[row];\r\n    if (cacheEntry?.cellRenderQueue.length && cacheEntry.rowNode?.length) {\r\n      const rowNode = cacheEntry.rowNode as HTMLElement[];\r\n      let children = Array.from(rowNode[0].children) as HTMLElement[];\r\n      if (rowNode.length > 1) {\r\n        children = children.concat(Array.from(rowNode[1].children) as HTMLElement[]);\r\n      }\r\n\r\n      let i = children.length - 1;\r\n      while (cacheEntry.cellRenderQueue.length) {\r\n        const columnIdx = cacheEntry.cellRenderQueue.pop();\r\n        (cacheEntry.cellNodesByColumnIdx as HTMLElement[])[columnIdx] = children[i--];\r\n      }\r\n    }\r\n  }\r\n\r\n  protected cleanUpCells(range: CellViewportRange, row: number) {\r\n    // Ignore frozen rows\r\n    if (this.hasFrozenRows\r\n      && ((this._options.frozenBottom && row > this.actualFrozenRow) // Frozen bottom rows\r\n        || (row <= this.actualFrozenRow)                     // Frozen top rows\r\n      )\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    let totalCellsRemoved = 0;\r\n    const cacheEntry = this.rowsCache[row];\r\n\r\n    // Remove cells outside the range.\r\n    const cellsToRemove: number[] = [];\r\n    Object.keys(cacheEntry.cellNodesByColumnIdx).forEach(cellNodeIdx => {\r\n      // I really hate it when people mess with Array.prototype.\r\n      if (!cacheEntry.cellNodesByColumnIdx.hasOwnProperty(cellNodeIdx)) {\r\n        return;\r\n      }\r\n\r\n      // This is a string, so it needs to be cast back to a number.\r\n      const i = +cellNodeIdx;\r\n\r\n      // Ignore frozen columns\r\n      if (i <= this._options.frozenColumn!) {\r\n        return;\r\n      }\r\n\r\n      // Ignore alwaysRenderedColumns\r\n      if (Array.isArray(this.columns) && this.columns[i]?.alwaysRenderColumn) {\r\n        return;\r\n      }\r\n\r\n      const colspan = cacheEntry.cellColSpans[i];\r\n      if (this.columnPosLeft[i] > range.rightPx ||\r\n        this.columnPosRight[Math.min(this.columns.length - 1, (i || 0) + (colspan as number) - 1)] < range.leftPx) {\r\n        if (!(row === this.activeRow && Number(i) === this.activeCell)) {\r\n          cellsToRemove.push((i as unknown as number));\r\n        }\r\n      }\r\n    });\r\n\r\n    let cellToRemove;\r\n    let cellNode;\r\n    while (Utils.isDefined(cellToRemove = cellsToRemove.pop())) {\r\n      cellNode = cacheEntry.cellNodesByColumnIdx[cellToRemove];\r\n\r\n      if (this._options.enableAsyncPostRenderCleanup && this.postProcessedRows[row]?.[cellToRemove]) {\r\n        this.queuePostProcessedCellForCleanup(cellNode, cellToRemove, row);\r\n      } else {\r\n        cellNode.parentElement?.removeChild(cellNode);\r\n      }\r\n\r\n      delete cacheEntry.cellColSpans[cellToRemove];\r\n      delete cacheEntry.cellNodesByColumnIdx[cellToRemove];\r\n      if (this.postProcessedRows[row]) {\r\n        delete this.postProcessedRows[row][cellToRemove];\r\n      }\r\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n      totalCellsRemoved++;\r\n    }\r\n  }\r\n\r\n  protected cleanUpAndRenderCells(range: CellViewportRange) {\r\n    let cacheEntry;\r\n    const divRow: HTMLElement = document.createElement('div');\r\n    const processedRows: number[] = [];\r\n    let cellsAdded: number;\r\n    let totalCellsAdded = 0;\r\n    let colspan: number | string;\r\n    let columnData: ColumnMetadata | null;\r\n    const columnCount = this.columns.length;\r\n\r\n    for (let row = range.top as number, btm = range.bottom as number; row <= btm; row++) {\r\n      cacheEntry = this.rowsCache[row];\r\n      if (!cacheEntry) {\r\n        continue;\r\n      }\r\n\r\n      // cellRenderQueue populated in renderRows() needs to be cleared first\r\n      this.ensureCellNodesInRowsCache(row);\r\n\r\n      if (!this._options.enableCellRowSpan || this.getRowSpanIntersect(row) === null) {\r\n        this.cleanUpCells(range, row);\r\n      }\r\n\r\n      // Render missing cells.\r\n      cellsAdded = 0;\r\n\r\n      let metadata = this.getItemMetadaWhenExists(row);\r\n      metadata = metadata?.columns as ItemMetadata;\r\n\r\n      const d = this.getDataItem(row);\r\n\r\n      // TODO: shorten this loop (index? heuristics? binary search?)\r\n      for (let i = 0, ii = columnCount; i < ii; i++) {\r\n        if (!this.columns[i] || this.columns[i].hidden) { continue; }\r\n\r\n        // Cells to the right are outside the range.\r\n        if (this.columnPosLeft[i] > range.rightPx) {\r\n          break;\r\n        }\r\n\r\n        // Already rendered.\r\n        if (Utils.isDefined(colspan = cacheEntry.cellColSpans[i] as number)) {\r\n          i += (colspan > 1 ? colspan - 1 : 0);\r\n          continue;\r\n        }\r\n\r\n        colspan = 1;\r\n        columnData = null;\r\n        if (metadata) {\r\n          columnData = metadata[this.columns[i].id as keyof ItemMetadata] || (metadata as any)[i];\r\n          colspan = columnData?.colspan ?? 1;\r\n          if (colspan === '*') {\r\n            colspan = ii - i;\r\n          }\r\n        }\r\n\r\n        const ncolspan = colspan as number; // at this point colspan is for sure a number\r\n\r\n        // don't render child cell of a rowspan cell\r\n        const prs = this.getParentRowSpanByCell(row, i);\r\n        if (prs) {\r\n          continue;\r\n        }\r\n\r\n        if (this.columnPosRight[Math.min(ii - 1, i + ncolspan - 1)] > range.leftPx) {\r\n          const rowspan = this.getRowspan(row, i);\r\n          this.appendCellHtml(divRow, row, i, ncolspan, rowspan, columnData, d);\r\n          cellsAdded++;\r\n        }\r\n\r\n        i += (ncolspan > 1 ? ncolspan - 1 : 0);\r\n      }\r\n\r\n      if (cellsAdded) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        totalCellsAdded += cellsAdded;\r\n        processedRows.push(row);\r\n      }\r\n    }\r\n    if (!divRow.children.length) {\r\n      return;\r\n    }\r\n\r\n    let processedRow: number | null | undefined;\r\n    let node: HTMLElement;\r\n    while (Utils.isDefined(processedRow = processedRows.pop())) {\r\n      cacheEntry = this.rowsCache[processedRow];\r\n      let columnIdx;\r\n      while (Utils.isDefined(columnIdx = cacheEntry.cellRenderQueue.pop())) {\r\n        node = divRow.lastChild as HTMLElement;\r\n\r\n        //no idea why node would be null here but apparently it is..\r\n        if (!node) {\r\n          continue;\r\n        }\r\n        if (this.hasFrozenColumns() && (columnIdx > this._options.frozenColumn!)) {\r\n          cacheEntry.rowNode![1].appendChild(node);\r\n        } else {\r\n          cacheEntry.rowNode![0].appendChild(node);\r\n        }\r\n        cacheEntry.cellNodesByColumnIdx![columnIdx] = node;\r\n      }\r\n    }\r\n  }\r\n\r\n  protected createEmptyCachingRow(): RowCaching {\r\n    return {\r\n      rowNode: null,\r\n\r\n      // ColSpans of rendered cells (by column idx).\r\n      // Can also be used for checking whether a cell has been rendered.\r\n      cellColSpans: [],\r\n\r\n      // Cell nodes (by column idx).  Lazy-populated by ensureCellNodesInRowsCache().\r\n      cellNodesByColumnIdx: [],\r\n\r\n      // Column indices of cell nodes that have been rendered, but not yet indexed in\r\n      // cellNodesByColumnIdx.  These are in the same order as cell nodes added at the\r\n      // end of the row.\r\n      cellRenderQueue: [],\r\n    };\r\n  }\r\n\r\n  protected renderRows(range: { top: number; bottom: number; leftPx: number; rightPx: number; }) {\r\n    const divArrayL: HTMLElement[] = [];\r\n    const divArrayR: HTMLElement[] = [];\r\n    const rows: number[] = [];\r\n    let needToReselectCell = false;\r\n    const dataLength = this.getDataLength();\r\n    const mustRenderRows = new Set<number>();\r\n    const renderingRows = new Set<number>();\r\n\r\n    for (let i = range.top as number, ii = range.bottom as number; i <= ii; i++) {\r\n      if (this.rowsCache[i] || (this.hasFrozenRows && this._options.frozenBottom && i === this.getDataLength())) {\r\n        continue;\r\n      }\r\n      this.renderedRows++;\r\n      rows.push(i);\r\n      renderingRows.add(i);\r\n\r\n      // Create an entry right away so that appendRowHtml() can start populating it.\r\n      this.rowsCache[i] = this.createEmptyCachingRow();\r\n\r\n      // add any rows that have rowspan intersects if it's not already in the list\r\n      if (this._options.enableCellRowSpan) {\r\n        const parentRowSpan = this.getRowSpanIntersect(i);\r\n        if (parentRowSpan !== null) {\r\n          renderingRows.add(parentRowSpan); // add to Set which will take care of duplicate rows\r\n        }\r\n      }\r\n\r\n      this.appendRowHtml(divArrayL, divArrayR, i, range, dataLength);\r\n      mustRenderRows.add(i);\r\n      if (this.activeCellNode && this.activeRow === i) {\r\n        needToReselectCell = true;\r\n      }\r\n      this.counter_rows_rendered++;\r\n    }\r\n\r\n    // check if there's any col/row span intersecting and if so add them to the renderingRows\r\n    const mandatorySpanRows = this.setDifference(renderingRows, mustRenderRows);\r\n    if (mandatorySpanRows.size > 0) {\r\n      mandatorySpanRows.forEach(r => {\r\n        this.removeRowFromCache(r); // remove any previous element to avoid duplicates in DOM\r\n        rows.push(r);\r\n        this.rowsCache[r] = this.createEmptyCachingRow();\r\n        this.appendRowHtml(divArrayL, divArrayR, r, range, dataLength);\r\n      });\r\n    }\r\n\r\n    if (rows.length) {\r\n      const x = document.createElement('div');\r\n      const xRight = document.createElement('div');\r\n\r\n      divArrayL.forEach(elm => x.appendChild(elm as HTMLElement));\r\n      divArrayR.forEach(elm => xRight.appendChild(elm as HTMLElement));\r\n\r\n      for (let i = 0, ii = rows.length; i < ii; i++) {\r\n        if ((this.hasFrozenRows) && (rows[i] >= this.actualFrozenRow)) {\r\n          if (this.hasFrozenColumns()) {\r\n            if (this.rowsCache?.hasOwnProperty(rows[i]) && x.firstChild && xRight.firstChild) {\r\n              this.rowsCache[rows[i]].rowNode = [x.firstChild as HTMLElement, xRight.firstChild as HTMLElement];\r\n              this._canvasBottomL.appendChild(x.firstChild as ChildNode);\r\n              this._canvasBottomR.appendChild(xRight.firstChild as ChildNode);\r\n            }\r\n          } else {\r\n            if (this.rowsCache?.hasOwnProperty(rows[i]) && x.firstChild) {\r\n              this.rowsCache[rows[i]].rowNode = [x.firstChild as HTMLElement];\r\n              this._canvasBottomL.appendChild(x.firstChild as ChildNode);\r\n            }\r\n          }\r\n        } else if (this.hasFrozenColumns()) {\r\n          if (this.rowsCache?.hasOwnProperty(rows[i]) && x.firstChild && xRight.firstChild) {\r\n            this.rowsCache[rows[i]].rowNode = [x.firstChild as HTMLElement, xRight.firstChild as HTMLElement];\r\n            this._canvasTopL.appendChild(x.firstChild as ChildNode);\r\n            this._canvasTopR.appendChild(xRight.firstChild as ChildNode);\r\n          }\r\n        } else {\r\n          if (this.rowsCache?.hasOwnProperty(rows[i]) && x.firstChild) {\r\n            this.rowsCache[rows[i]].rowNode = [x.firstChild as HTMLElement];\r\n            this._canvasTopL.appendChild(x.firstChild as ChildNode);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (needToReselectCell) {\r\n        this.activeCellNode = this.getCellNode(this.activeRow, this.activeCell);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** polyfill if the new Set.difference() added in ES2024 */\r\n  protected setDifference(a: Set<number>, b: Set<number>): Set<number> {\r\n    return new Set(Array.from(a).filter((item) => !b.has(item)));\r\n  }\r\n\r\n  protected startPostProcessing() {\r\n    if (!this._options.enableAsyncPostRender) {\r\n      return;\r\n    }\r\n    window.clearTimeout(this.h_postrender);\r\n    this.h_postrender = window.setTimeout(this.asyncPostProcessRows.bind(this), this._options.asyncPostRenderDelay);\r\n  }\r\n\r\n  protected startPostProcessingCleanup() {\r\n    if (!this._options.enableAsyncPostRenderCleanup) {\r\n      return;\r\n    }\r\n    window.clearTimeout(this.h_postrenderCleanup);\r\n    this.h_postrenderCleanup = window.setTimeout(this.asyncPostProcessCleanupRows.bind(this), this._options.asyncPostRenderCleanupDelay);\r\n  }\r\n\r\n  protected invalidatePostProcessingResults(row: number) {\r\n    // change status of columns to be re-rendered\r\n    if (typeof this.postProcessedRows[row] === 'object') {\r\n      Object.keys(this.postProcessedRows[row]).forEach(columnIdx => {\r\n        if (this.postProcessedRows[row].hasOwnProperty(columnIdx)) {\r\n          this.postProcessedRows[row][columnIdx] = 'C';\r\n        }\r\n      });\r\n    }\r\n    this.postProcessFromRow = Math.min(this.postProcessFromRow as number, row);\r\n    this.postProcessToRow = Math.max(this.postProcessToRow as number, row);\r\n    this.startPostProcessing();\r\n  }\r\n\r\n  protected updateRowPositions() {\r\n    for (const row in this.rowsCache) {\r\n      if (this.rowsCache) {\r\n        const rowNumber = row ? parseInt(row, 10) : 0;\r\n        const rowNode = this.rowsCache[rowNumber].rowNode![0];\r\n        if (this._options.rowTopOffsetRenderType === 'transform') {\r\n          rowNode.style.transform = `translateY(${this.getRowTop(rowNumber)}px)`;\r\n        } else {\r\n          rowNode.style.top = `${this.getRowTop(rowNumber)}px`; // default to `top: {offset}px`\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** (re)Render the grid */\r\n  render() {\r\n    if (!this.initialized) { return; }\r\n\r\n    this.scrollThrottle.dequeue();\r\n\r\n    const visible = this.getVisibleRange();\r\n    const rendered = this.getRenderedRange();\r\n\r\n    // remove rows no longer in the viewport\r\n    this.cleanupRows(rendered);\r\n\r\n    // add new rows & missing cells in existing rows\r\n    if (this.lastRenderedScrollLeft !== this.scrollLeft) {\r\n      if (this.hasFrozenRows) {\r\n        const renderedFrozenRows = Utils.extend(true, {}, rendered);\r\n\r\n        if (this._options.frozenBottom) {\r\n          renderedFrozenRows.top = this.actualFrozenRow;\r\n          renderedFrozenRows.bottom = this.getDataLength();\r\n        } else {\r\n          renderedFrozenRows.top = 0;\r\n          renderedFrozenRows.bottom = this._options.frozenRow;\r\n        }\r\n        this.cleanUpAndRenderCells(renderedFrozenRows);\r\n      }\r\n      this.cleanUpAndRenderCells(rendered);\r\n    }\r\n\r\n    // render missing rows\r\n    this.renderRows(rendered);\r\n\r\n    // Render frozen rows\r\n    if (this.hasFrozenRows) {\r\n      if (this._options.frozenBottom) {\r\n        this.renderRows({\r\n          top: this.actualFrozenRow, bottom: this.getDataLength() - 1, leftPx: rendered.leftPx, rightPx: rendered.rightPx\r\n        });\r\n      } else {\r\n        this.renderRows({\r\n          top: 0, bottom: this._options.frozenRow! - 1, leftPx: rendered.leftPx, rightPx: rendered.rightPx\r\n        });\r\n      }\r\n    }\r\n\r\n    this.postProcessFromRow = visible.top;\r\n    this.postProcessToRow = Math.min(this.getDataLengthIncludingAddNew() - 1, visible.bottom);\r\n    this.startPostProcessing();\r\n\r\n    this.lastRenderedScrollTop = this.scrollTop;\r\n    this.lastRenderedScrollLeft = this.scrollLeft;\r\n    this.trigger(this.onRendered, { startRow: visible.top, endRow: visible.bottom, grid: this });\r\n  }\r\n\r\n  protected handleHeaderRowScroll() {\r\n    const scrollLeft = this._headerRowScrollContainer.scrollLeft;\r\n    if (scrollLeft !== this._viewportScrollContainerX.scrollLeft) {\r\n      this._viewportScrollContainerX.scrollLeft = scrollLeft;\r\n    }\r\n  }\r\n\r\n  protected handleFooterRowScroll() {\r\n    const scrollLeft = this._footerRowScrollContainer.scrollLeft;\r\n    if (scrollLeft !== this._viewportScrollContainerX.scrollLeft) {\r\n      this._viewportScrollContainerX.scrollLeft = scrollLeft;\r\n    }\r\n  }\r\n\r\n  protected handlePreHeaderPanelScroll() {\r\n    this.handleElementScroll(this._preHeaderPanelScroller);\r\n  }\r\n\r\n  protected handleTopHeaderPanelScroll() {\r\n    this.handleElementScroll(this._topHeaderPanelScroller);\r\n  }\r\n\r\n  protected handleElementScroll(element: HTMLElement) {\r\n    const scrollLeft = element.scrollLeft;\r\n    if (scrollLeft !== this._viewportScrollContainerX.scrollLeft) {\r\n      this._viewportScrollContainerX.scrollLeft = scrollLeft;\r\n    }\r\n  }\r\n\r\n  protected handleScroll(e?: Event) {\r\n    this.scrollHeight = this._viewportScrollContainerY.scrollHeight;\r\n    this.scrollTop = this._viewportScrollContainerY.scrollTop;\r\n    this.scrollLeft = this._viewportScrollContainerX.scrollLeft;\r\n    return this._handleScroll(e ? 'scroll' : 'system');\r\n  }\r\n\r\n  protected _handleScroll(eventType: 'mousewheel' | 'scroll' | 'system' = 'system') {\r\n    let maxScrollDistanceY = this._viewportScrollContainerY.scrollHeight - this._viewportScrollContainerY.clientHeight;\r\n    let maxScrollDistanceX = this._viewportScrollContainerY.scrollWidth - this._viewportScrollContainerY.clientWidth;\r\n\r\n    // Protect against erroneous clientHeight/Width greater than scrollHeight/Width.\r\n    // Sometimes seen in Chrome.\r\n    maxScrollDistanceY = Math.max(0, maxScrollDistanceY);\r\n    maxScrollDistanceX = Math.max(0, maxScrollDistanceX);\r\n\r\n    // Ceiling the max scroll values\r\n    if (this.scrollTop > maxScrollDistanceY) {\r\n      this.scrollTop = maxScrollDistanceY;\r\n      this.scrollHeight = maxScrollDistanceY;\r\n    }\r\n    if (this.scrollLeft > maxScrollDistanceX) {\r\n      this.scrollLeft = maxScrollDistanceX;\r\n    }\r\n\r\n    const vScrollDist = Math.abs(this.scrollTop - this.prevScrollTop);\r\n    const hScrollDist = Math.abs(this.scrollLeft - this.prevScrollLeft);\r\n\r\n    if (hScrollDist) {\r\n      this.prevScrollLeft = this.scrollLeft;\r\n\r\n      // adjust scroll position of all div containers when scrolling the grid\r\n      this._viewportScrollContainerX.scrollLeft = this.scrollLeft;\r\n      this._headerScrollContainer.scrollLeft = this.scrollLeft;\r\n      this._topPanelScrollers[0].scrollLeft = this.scrollLeft;\r\n      if (this._options.createFooterRow) {\r\n        this._footerRowScrollContainer.scrollLeft = this.scrollLeft;\r\n      }\r\n      if (this._options.createPreHeaderPanel) {\r\n        if (this.hasFrozenColumns()) {\r\n          this._preHeaderPanelScrollerR.scrollLeft = this.scrollLeft;\r\n        } else {\r\n          this._preHeaderPanelScroller.scrollLeft = this.scrollLeft;\r\n        }\r\n      }\r\n      if (this._options.createTopHeaderPanel) {\r\n        this._topHeaderPanelScroller.scrollLeft = this.scrollLeft;\r\n      }\r\n\r\n      if (this.hasFrozenColumns()) {\r\n        if (this.hasFrozenRows) {\r\n          this._viewportTopR.scrollLeft = this.scrollLeft;\r\n        }\r\n        this._headerRowScrollerR.scrollLeft = this.scrollLeft; // right header row scrolling with frozen grid\r\n      } else {\r\n        if (this.hasFrozenRows) {\r\n          this._viewportTopL.scrollLeft = this.scrollLeft;\r\n        }\r\n        this._headerRowScrollerL.scrollLeft = this.scrollLeft; // left header row scrolling with regular grid\r\n      }\r\n    }\r\n\r\n    // autoheight suppresses vertical scrolling, but editors can create a div larger than\r\n    // the row vertical size, which can lead to a vertical scroll bar appearing temporarily\r\n    // while the editor is displayed. this is not part of the grid scrolling, so we should ignore it\r\n    if (vScrollDist && !this._options.autoHeight) {\r\n      this.vScrollDir = this.prevScrollTop < this.scrollTop ? 1 : -1;\r\n      this.prevScrollTop = this.scrollTop;\r\n\r\n      if (eventType === 'mousewheel') {\r\n        this._viewportScrollContainerY.scrollTop = this.scrollTop;\r\n      }\r\n\r\n      if (this.hasFrozenColumns()) {\r\n        if (this.hasFrozenRows && !this._options.frozenBottom) {\r\n          this._viewportBottomL.scrollTop = this.scrollTop;\r\n        } else {\r\n          this._viewportTopL.scrollTop = this.scrollTop;\r\n        }\r\n      }\r\n\r\n      // switch virtual pages if needed\r\n      if (vScrollDist < this.viewportH) {\r\n        this.scrollTo(this.scrollTop + this.offset);\r\n      } else {\r\n        const oldOffset = this.offset;\r\n        if (this.h === this.viewportH) {\r\n          this.page = 0;\r\n        } else {\r\n          this.page = Math.min(this.n - 1, Math.floor(this.scrollTop * ((this.th - this.viewportH) / (this.h - this.viewportH)) * (1 / this.ph)));\r\n        }\r\n        this.offset = Math.round(this.page * this.cj);\r\n        if (oldOffset !== this.offset) {\r\n          this.invalidateAllRows();\r\n        }\r\n      }\r\n    }\r\n\r\n    if (hScrollDist || vScrollDist) {\r\n      const dx = Math.abs(this.lastRenderedScrollLeft - this.scrollLeft);\r\n      const dy = Math.abs(this.lastRenderedScrollTop - this.scrollTop);\r\n      if (dx > 20 || dy > 20) {\r\n        // if rendering is forced or scrolling is small enough to be \"easy\", just render\r\n        if (this._options.forceSyncScrolling || (dy < this.viewportH && dx < this.viewportW)) {\r\n          this.render();\r\n        } else {\r\n          // otherwise, perform \"difficult\" renders at a capped frequency\r\n          this.scrollThrottle.enqueue();\r\n        }\r\n\r\n        this.trigger(this.onViewportChanged, {});\r\n      }\r\n    }\r\n\r\n    this.trigger(this.onScroll, {\r\n      triggeredBy: eventType,\r\n      scrollHeight: this.scrollHeight,\r\n      scrollLeft: this.scrollLeft,\r\n      scrollTop: this.scrollTop,\r\n    });\r\n\r\n    if (hScrollDist || vScrollDist) { return true; }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * limits the frequency at which the provided action is executed.\r\n   * call enqueue to execute the action - it will execute either immediately or, if it was executed less than minPeriod_ms in the past, as soon as minPeriod_ms has expired.\r\n   * call dequeue to cancel any pending action.\r\n   */\r\n  protected actionThrottle(action: () => void, minPeriod_ms: number) {\r\n    let blocked = false;\r\n    let queued = false;\r\n\r\n    const enqueue = () => {\r\n      if (!blocked) {\r\n        blockAndExecute();\r\n      } else {\r\n        queued = true;\r\n      }\r\n    };\r\n\r\n    const dequeue = () => {\r\n      queued = false;\r\n    };\r\n\r\n    const blockAndExecute = () => {\r\n      blocked = true;\r\n      window.clearTimeout(this._executionBlockTimer);\r\n      this._executionBlockTimer = window.setTimeout(unblock, minPeriod_ms);\r\n      action.call(this);\r\n    };\r\n\r\n    const unblock = () => {\r\n      if (queued) {\r\n        dequeue();\r\n        blockAndExecute();\r\n      } else {\r\n        blocked = false;\r\n      }\r\n    };\r\n\r\n    return {\r\n      enqueue: enqueue.bind(this),\r\n      dequeue: dequeue.bind(this)\r\n    };\r\n  }\r\n\r\n  protected asyncPostProcessRows() {\r\n    const dataLength = this.getDataLength();\r\n    while (this.postProcessFromRow <= this.postProcessToRow) {\r\n      const row = (this.vScrollDir >= 0) ? this.postProcessFromRow++ : this.postProcessToRow--;\r\n      const cacheEntry = this.rowsCache[row];\r\n      if (!cacheEntry || row >= dataLength) {\r\n        continue;\r\n      }\r\n\r\n      if (!this.postProcessedRows[row]) {\r\n        this.postProcessedRows[row] = {};\r\n      }\r\n\r\n      this.ensureCellNodesInRowsCache(row);\r\n      Object.keys(cacheEntry.cellNodesByColumnIdx).forEach(colIdx => {\r\n        if (cacheEntry.cellNodesByColumnIdx.hasOwnProperty(colIdx)) {\r\n          const columnIdx = +colIdx;\r\n          const m = this.columns[columnIdx];\r\n          const processedStatus = this.postProcessedRows[row][columnIdx]; // C=cleanup and re-render, R=rendered\r\n          if (m.asyncPostRender && processedStatus !== 'R') {\r\n            const node = cacheEntry.cellNodesByColumnIdx[columnIdx];\r\n            if (node) {\r\n              m.asyncPostRender(node, row, this.getDataItem(row), m, (processedStatus === 'C'));\r\n            }\r\n            this.postProcessedRows[row][columnIdx] = 'R';\r\n          }\r\n        }\r\n      });\r\n\r\n      this.h_postrender = window.setTimeout(this.asyncPostProcessRows.bind(this), this._options.asyncPostRenderDelay);\r\n      return;\r\n    }\r\n  }\r\n\r\n  protected asyncPostProcessCleanupRows() {\r\n    if (this.postProcessedCleanupQueue.length > 0) {\r\n      const groupId = this.postProcessedCleanupQueue[0].groupId;\r\n\r\n      // loop through all queue members with this groupID\r\n      while (this.postProcessedCleanupQueue.length > 0 && this.postProcessedCleanupQueue[0].groupId === groupId) {\r\n        const entry = this.postProcessedCleanupQueue.shift();\r\n        if (entry?.actionType === 'R') {\r\n          (entry.node as HTMLElement[]).forEach((node) => {\r\n            node.remove();\r\n          });\r\n        }\r\n        if (entry?.actionType === 'C') {\r\n          const column = this.columns[entry.columnIdx as number];\r\n          if (column.asyncPostRenderCleanup && entry.node) {\r\n            // cleanup must also remove element\r\n            column.asyncPostRenderCleanup(entry.node as HTMLDivElement, entry.rowIdx as number, column);\r\n          }\r\n        }\r\n      }\r\n\r\n      // call this function again after the specified delay\r\n      this.h_postrenderCleanup = window.setTimeout(this.asyncPostProcessCleanupRows.bind(this), this._options.asyncPostRenderCleanupDelay);\r\n    }\r\n  }\r\n\r\n  protected updateCellCssStylesOnRenderedRows(addedHash?: CssStyleHash | null, removedHash?: CssStyleHash | null) {\r\n    let node: HTMLElement | null;\r\n    let addedRowHash: any;\r\n    let removedRowHash: any;\r\n    if (typeof this.rowsCache === 'object') {\r\n      Object.keys(this.rowsCache).forEach(row => {\r\n        if (this.rowsCache) {\r\n          removedRowHash = removedHash?.[row];\r\n          addedRowHash = addedHash?.[row];\r\n\r\n          if (removedRowHash) {\r\n            Object.keys(removedRowHash).forEach(columnId => {\r\n              if (!addedRowHash || removedRowHash[columnId] !== addedRowHash[columnId]) {\r\n                node = this.getCellNode(+row, this.getColumnIndex(columnId));\r\n                if (node) {\r\n                  node.classList.remove(removedRowHash[columnId]);\r\n                }\r\n              }\r\n            });\r\n          }\r\n\r\n          if (addedRowHash) {\r\n            Object.keys(addedRowHash).forEach(columnId => {\r\n              if (!removedRowHash || removedRowHash[columnId] !== addedRowHash[columnId]) {\r\n                node = this.getCellNode(+row, this.getColumnIndex(columnId));\r\n                if (node) {\r\n                  node.classList.add(addedRowHash[columnId]);\r\n                }\r\n              }\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds an \"overlay\" of CSS classes to cell DOM elements. SlickGrid can have many such overlays associated with different keys and they are frequently used by plugins. For example, SlickGrid uses this method internally to decorate selected cells with selectedCellCssClass (see options).\r\n   * @param {String} key A unique key you can use in calls to setCellCssStyles and removeCellCssStyles. If a hash with that key has already been set, an exception will be thrown.\r\n   * @param {CssStyleHash} hash A hash of additional cell CSS classes keyed by row number and then by column id. Multiple CSS classes can be specified and separated by space.\r\n   * @example\r\n   * `{\r\n   * \t 0: { number_column: SlickEvent; title_column: SlickEvent;\t},\r\n   * \t 4: { percent_column: SlickEvent; }\r\n   * }`\r\n   */\r\n  addCellCssStyles(key: string, hash: CssStyleHash) {\r\n    if (this.cellCssClasses[key]) {\r\n      throw new Error(`SlickGrid addCellCssStyles: cell CSS hash with key \"${key}\" already exists.`);\r\n    }\r\n\r\n    this.cellCssClasses[key] = hash;\r\n    this.updateCellCssStylesOnRenderedRows(hash, null);\r\n    this.trigger(this.onCellCssStylesChanged, { key, hash, grid: this });\r\n  }\r\n\r\n  /**\r\n   * Removes an \"overlay\" of CSS classes from cell DOM elements. See setCellCssStyles for more.\r\n   * @param {String} key A string key.\r\n   */\r\n  removeCellCssStyles(key: string) {\r\n    if (!this.cellCssClasses[key]) {\r\n      return;\r\n    }\r\n\r\n    this.updateCellCssStylesOnRenderedRows(null, this.cellCssClasses[key]);\r\n    delete this.cellCssClasses[key];\r\n    this.trigger(this.onCellCssStylesChanged, { key, hash: null, grid: this });\r\n  }\r\n\r\n  /**\r\n   * Sets CSS classes to specific grid cells by calling removeCellCssStyles(key) followed by addCellCssStyles(key, hash). key is name for this set of styles so you can reference it later - to modify it or remove it, for example. hash is a per-row-index, per-column-name nested hash of CSS classes to apply.\r\n   * Suppose you have a grid with columns:\r\n   * [\"login\", \"name\", \"birthday\", \"age\", \"likes_icecream\", \"favorite_cake\"]\r\n   * ...and you'd like to highlight the \"birthday\" and \"age\" columns for people whose birthday is today, in this case, rows at index 0 and 9. (The first and tenth row in the grid).\r\n   * @param {String} key A string key. Will overwrite any data already associated with this key.\r\n   * @param {Object} hash A hash of additional cell CSS classes keyed by row number and then by column id. Multiple CSS classes can be specified and separated by space.\r\n   */\r\n  setCellCssStyles(key: string, hash: CssStyleHash) {\r\n    const prevHash = this.cellCssClasses[key];\r\n\r\n    this.cellCssClasses[key] = hash;\r\n    this.updateCellCssStylesOnRenderedRows(hash, prevHash);\r\n    this.trigger(this.onCellCssStylesChanged, { key, hash, grid: this });\r\n  }\r\n\r\n  /**\r\n   * Accepts a key name, returns the group of CSS styles defined under that name. See setCellCssStyles for more info.\r\n   * @param {String} key A string.\r\n   */\r\n  getCellCssStyles(key: string): CssStyleHash {\r\n    return this.cellCssClasses[key];\r\n  }\r\n\r\n  /**\r\n   * Flashes the cell twice by toggling the CSS class 4 times.\r\n   * @param {Number} row A row index.\r\n   * @param {Number} cell A column index.\r\n   * @param {Number} [speed] (optional) - The milliseconds delay between the toggling calls. Defaults to 250 ms.\r\n   */\r\n  flashCell(row: number, cell: number, speed = 250) {\r\n    const toggleCellClass = (cellNode: HTMLElement, times: number) => {\r\n      if (times < 1) {\r\n        return;\r\n      }\r\n\r\n      window.clearTimeout(this._flashCellTimer);\r\n      this._flashCellTimer = window.setTimeout(() => {\r\n        if (times % 2 === 0) {\r\n          cellNode.classList.add(this._options.cellFlashingCssClass || '');\r\n        } else {\r\n          cellNode.classList.remove(this._options.cellFlashingCssClass || '');\r\n        }\r\n        toggleCellClass(cellNode, times - 1);\r\n      }, speed);\r\n    };\r\n\r\n    if (this.rowsCache[row]) {\r\n      const cellNode = this.getCellNode(row, cell);\r\n      if (cellNode) {\r\n        toggleCellClass(cellNode, 5);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Highlight a row for a certain duration (ms) of time.\r\n   * @param {Number} row - grid row number\r\n   * @param {Number} [duration] - duration (ms), defaults to 400ms\r\n   */\r\n  highlightRow(row: number, duration?: number) {\r\n    const rowCache = this.rowsCache[row];\r\n    duration ||= this._options.rowHighlightDuration;\r\n\r\n    if (Array.isArray(rowCache?.rowNode) && this._options.rowHighlightCssClass) {\r\n      rowCache.rowNode.forEach(node => node.classList.add(...Utils.classNameToList(this._options.rowHighlightCssClass)));\r\n      window.clearTimeout(this._highlightRowTimer);\r\n      this._highlightRowTimer = window.setTimeout(() => {\r\n        rowCache.rowNode?.forEach(node => node.classList.remove(...Utils.classNameToList(this._options.rowHighlightCssClass)));\r\n      }, duration);\r\n    }\r\n  }\r\n\r\n  //////////////////////////////////////////////////////////////////////////////////////////////\r\n  // Interactivity\r\n\r\n  protected handleMouseWheel(e: MouseEvent, _delta: number, deltaX: number, deltaY: number) {\r\n    this.scrollHeight = this._viewportScrollContainerY.scrollHeight;\r\n    if (e.shiftKey) {\r\n      this.scrollLeft = this._viewportScrollContainerX.scrollLeft + (deltaX * 10);\r\n    } else {\r\n      this.scrollTop = Math.max(0, this._viewportScrollContainerY.scrollTop - (deltaY * this._options.rowHeight!));\r\n      this.scrollLeft = this._viewportScrollContainerX.scrollLeft + (deltaX * 10);\r\n    }\r\n    const handled = this._handleScroll('mousewheel');\r\n    if (handled) {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  protected handleDragInit(e: DragEvent, dd: DragPosition) {\r\n    const cell = this.getCellFromEvent(e);\r\n    if (!cell || !this.cellExists(cell.row, cell.cell)) {\r\n      return false;\r\n    }\r\n\r\n    const retval = this.trigger(this.onDragInit, dd, e);\r\n    if (retval.isImmediatePropagationStopped()) {\r\n      return retval.getReturnValue();\r\n    }\r\n\r\n    // if nobody claims to be handling drag'n'drop by stopping immediate propagation,\r\n    // cancel out of it\r\n    return false;\r\n  }\r\n\r\n  protected handleDragStart(e: DragEvent, dd: DragPosition) {\r\n    const cell = this.getCellFromEvent(e);\r\n    if (!cell || !this.cellExists(cell.row, cell.cell)) {\r\n      return false;\r\n    }\r\n\r\n    const retval = this.trigger(this.onDragStart, dd, e);\r\n    if (retval.isImmediatePropagationStopped()) {\r\n      return retval.getReturnValue();\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  protected handleDrag(e: DragEvent, dd: DragPosition) {\r\n    return this.trigger(this.onDrag, dd, e).getReturnValue();\r\n  }\r\n\r\n  protected handleDragEnd(e: DragEvent, dd: DragPosition) {\r\n    this.trigger(this.onDragEnd, dd, e);\r\n  }\r\n\r\n  protected handleKeyDown(e: KeyboardEvent & { originalEvent: Event; }) {\r\n    const retval = this.trigger(this.onKeyDown, { row: this.activeRow, cell: this.activeCell }, e);\r\n    let handled: boolean | undefined | void = retval.isImmediatePropagationStopped();\r\n\r\n    if (!handled) {\r\n      if (!e.shiftKey && !e.altKey) {\r\n        if (this._options.editable && this.currentEditor?.keyCaptureList) {\r\n          if (this.currentEditor.keyCaptureList.indexOf(e.which) > -1) {\r\n            return;\r\n          }\r\n        }\r\n        if (e.ctrlKey && e.key === 'Home') {\r\n          this.navigateTopStart();\r\n        } else if (e.ctrlKey && e.key === 'End') {\r\n          this.navigateBottomEnd();\r\n        } else if (e.ctrlKey && e.key === 'ArrowUp') {\r\n          this.navigateTop();\r\n        } else if (e.ctrlKey && e.key === 'ArrowDown') {\r\n          this.navigateBottom();\r\n        } else if ((e.ctrlKey && e.key === 'ArrowLeft') || (!e.ctrlKey && e.key === 'Home')) {\r\n          this.navigateRowStart();\r\n        } else if ((e.ctrlKey && e.key === 'ArrowRight') || (!e.ctrlKey && e.key === 'End')) {\r\n          this.navigateRowEnd();\r\n        }\r\n      }\r\n    }\r\n    if (!handled) {\r\n      if (!e.shiftKey && !e.altKey && !e.ctrlKey) {\r\n        // editor may specify an array of keys to bubble\r\n        if (this._options.editable && this.currentEditor?.keyCaptureList) {\r\n          if (this.currentEditor.keyCaptureList.indexOf(e.which) > -1) {\r\n            return;\r\n          }\r\n        }\r\n        if (e.which === keyCode.ESCAPE) {\r\n          if (!this.getEditorLock()?.isActive()) {\r\n            return; // no editing mode to cancel, allow bubbling and default processing (exit without cancelling the event)\r\n          }\r\n          this.cancelEditAndSetFocus();\r\n        } else if (e.which === keyCode.PAGE_DOWN) {\r\n          this.navigatePageDown();\r\n          handled = true;\r\n        } else if (e.which === keyCode.PAGE_UP) {\r\n          this.navigatePageUp();\r\n          handled = true;\r\n        } else if (e.which === keyCode.LEFT) {\r\n          handled = this.navigateLeft();\r\n        } else if (e.which === keyCode.RIGHT) {\r\n          handled = this.navigateRight();\r\n        } else if (e.which === keyCode.UP) {\r\n          handled = this.navigateUp();\r\n        } else if (e.which === keyCode.DOWN) {\r\n          handled = this.navigateDown();\r\n        } else if (e.which === keyCode.TAB) {\r\n          handled = this.navigateNext();\r\n        } else if (e.which === keyCode.ENTER) {\r\n          if (this._options.editable) {\r\n            if (this.currentEditor) {\r\n              // adding new row\r\n              if (this.activeRow === this.getDataLength()) {\r\n                this.navigateDown();\r\n              } else {\r\n                this.commitEditAndSetFocus();\r\n              }\r\n            } else {\r\n              if (this.getEditorLock()?.commitCurrentEdit()) {\r\n                this.makeActiveCellEditable(undefined, undefined, e);\r\n              }\r\n            }\r\n          }\r\n          handled = true;\r\n        }\r\n      } else if (e.which === keyCode.TAB && e.shiftKey && !e.ctrlKey && !e.altKey) {\r\n        handled = this.navigatePrev();\r\n      }\r\n    }\r\n\r\n    if (handled) {\r\n      // the event has been handled so don't let parent element (bubbling/propagation) or browser (default) handle it\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n      try {\r\n        (e as any).originalEvent.keyCode = 0; // prevent default behaviour for special keys in IE browsers (F3, F5, etc.)\r\n      }\r\n      // ignore exceptions - setting the original event's keycode throws access denied exception for \"Ctrl\"\r\n      // (hitting control key only, nothing else), \"Shift\" (maybe others)\r\n      // eslint-disable-next-line no-empty\r\n      catch (error) { }\r\n    }\r\n  }\r\n\r\n  protected handleClick(evt: DOMEvent<HTMLDivElement> | SlickEventData_) {\r\n    const e = evt instanceof SlickEventData ? evt.getNativeEvent() : evt;\r\n\r\n    if (!this.currentEditor) {\r\n      // if this click resulted in some cell child node getting focus,\r\n      // don't steal it back - keyboard events will still bubble up\r\n      // IE9+ seems to default DIVs to tabIndex=0 instead of -1, so check for cell clicks directly.\r\n      if ((e as DOMEvent<HTMLDivElement>).target !== document.activeElement || (e as DOMEvent<HTMLDivElement>).target.classList.contains('slick-cell')) {\r\n        const selection = this.getTextSelection(); // store text-selection and restore it after\r\n        this.setFocus();\r\n        this.setTextSelection(selection as Range);\r\n      }\r\n    }\r\n\r\n    const cell = this.getCellFromEvent(e);\r\n    if (!cell || (this.currentEditor !== null && this.activeRow === cell.row && this.activeCell === cell.cell)) {\r\n      return;\r\n    }\r\n\r\n    evt = this.trigger(this.onClick, { row: cell.row, cell: cell.cell }, evt || e);\r\n    if ((evt as any).isImmediatePropagationStopped()) {\r\n      return;\r\n    }\r\n\r\n    // this optimisation causes trouble - MLeibman #329\r\n    // if ((activeCell !== cell.cell || activeRow !== cell.row) && canCellBeActive(cell.row, cell.cell)) {\r\n    if (this.canCellBeActive(cell.row, cell.cell)) {\r\n      if (!this.getEditorLock()?.isActive() || this.getEditorLock()?.commitCurrentEdit()) {\r\n        this.scrollRowIntoView(cell.row, false);\r\n\r\n        const preClickModeOn = ((e as DOMEvent<HTMLDivElement>).target?.className === preClickClassName);\r\n        const column = this.columns[cell.cell];\r\n        const suppressActiveCellChangedEvent = !!(this._options.editable && column?.editor && this._options.suppressActiveCellChangeOnEdit);\r\n        this.setActiveCellInternal(this.getCellNode(cell.row, cell.cell), null, preClickModeOn, suppressActiveCellChangedEvent, (e as DOMEvent<HTMLDivElement>));\r\n      }\r\n    }\r\n  }\r\n\r\n  protected handleContextMenu(e: Event & { target: HTMLElement; }) {\r\n    const cell = e.target.closest('.slick-cell');\r\n    if (!cell) {\r\n      return;\r\n    }\r\n\r\n    // are we editing this cell?\r\n    if (this.activeCellNode === cell && this.currentEditor !== null) {\r\n      return;\r\n    }\r\n\r\n    this.trigger(this.onContextMenu, {}, e);\r\n  }\r\n\r\n  protected handleDblClick(e: MouseEvent) {\r\n    const cell = this.getCellFromEvent(e);\r\n    if (!cell || (this.currentEditor !== null && this.activeRow === cell.row && this.activeCell === cell.cell)) {\r\n      return;\r\n    }\r\n\r\n    this.trigger(this.onDblClick, { row: cell.row, cell: cell.cell }, e);\r\n    if (e.defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._options.editable) {\r\n      this.gotoCell(cell.row, cell.cell, true, e);\r\n    }\r\n  }\r\n\r\n  protected handleHeaderMouseEnter(e: MouseEvent & { target: HTMLElement; }) {\r\n    const c = Utils.storage.get(e.target.closest('.slick-header-column'), 'column');\r\n    if (!c) {\r\n      return;\r\n    }\r\n    this.trigger(this.onHeaderMouseEnter, {\r\n      column: c,\r\n      grid: this\r\n    }, e);\r\n  }\r\n\r\n  protected handleHeaderMouseLeave(e: MouseEvent & { target: HTMLElement; }) {\r\n    const c = Utils.storage.get(e.target.closest('.slick-header-column'), 'column');\r\n    if (!c) {\r\n      return;\r\n    }\r\n    this.trigger(this.onHeaderMouseLeave, {\r\n      column: c,\r\n      grid: this\r\n    }, e);\r\n  }\r\n\r\n  protected handleHeaderRowMouseEnter(e: MouseEvent & { target: HTMLElement; }) {\r\n    const c = Utils.storage.get(e.target.closest('.slick-headerrow-column'), 'column');\r\n    if (!c) {\r\n      return;\r\n    }\r\n    this.trigger(this.onHeaderRowMouseEnter, {\r\n      column: c,\r\n      grid: this\r\n    }, e);\r\n  }\r\n\r\n  protected handleHeaderRowMouseLeave(e: MouseEvent & { target: HTMLElement; }) {\r\n    const c = Utils.storage.get(e.target.closest('.slick-headerrow-column'), 'column');\r\n    if (!c) {\r\n      return;\r\n    }\r\n    this.trigger(this.onHeaderRowMouseLeave, {\r\n      column: c,\r\n      grid: this\r\n    }, e);\r\n  }\r\n\r\n  protected handleHeaderContextMenu(e: MouseEvent & { target: HTMLElement; }) {\r\n    const header = e.target.closest('.slick-header-column');\r\n    const column = header && Utils.storage.get(header, 'column');\r\n    this.trigger(this.onHeaderContextMenu, { column }, e);\r\n  }\r\n\r\n  protected handleHeaderClick(e: MouseEvent & { target: HTMLElement; }) {\r\n    if (!this.columnResizeDragging) {\r\n      const header = e.target.closest('.slick-header-column');\r\n      const column = header && Utils.storage.get(header, 'column');\r\n      if (column) {\r\n        this.trigger(this.onHeaderClick, { column }, e);\r\n      }\r\n    }\r\n  }\r\n\r\n  protected handlePreHeaderContextMenu(e: MouseEvent & { target: HTMLElement; }) {\r\n    this.trigger(this.onPreHeaderContextMenu, { node: e.target }, e);\r\n  }\r\n\r\n  protected handlePreHeaderClick(e: MouseEvent & { target: HTMLElement; }) {\r\n    if (!this.columnResizeDragging) {\r\n      this.trigger(this.onPreHeaderClick, { node: e.target }, e);\r\n    }\r\n  }\r\n\r\n  protected handleFooterContextMenu(e: MouseEvent & { target: HTMLElement; }) {\r\n    const footer = e.target.closest('.slick-footerrow-column');\r\n    const column = footer && Utils.storage.get(footer, 'column');\r\n    this.trigger(this.onFooterContextMenu, { column }, e);\r\n  }\r\n\r\n  protected handleFooterClick(e: MouseEvent & { target: HTMLElement; }) {\r\n    const footer = e.target.closest('.slick-footerrow-column');\r\n    const column = footer && Utils.storage.get(footer, 'column');\r\n    this.trigger(this.onFooterClick, { column }, e);\r\n  }\r\n\r\n  protected handleCellMouseOver(e: MouseEvent & { target: HTMLElement; }) {\r\n    this.trigger(this.onMouseEnter, {}, e);\r\n  }\r\n\r\n  protected handleCellMouseOut(e: MouseEvent & { target: HTMLElement; }) {\r\n    this.trigger(this.onMouseLeave, {}, e);\r\n  }\r\n\r\n  protected cellExists(row: number, cell: number) {\r\n    return !(row < 0 || row >= this.getDataLength() || cell < 0 || cell >= this.columns.length);\r\n  }\r\n\r\n  /**\r\n   * Returns row and cell indexes by providing x,y coordinates.\r\n   * Coordinates are relative to the top left corner of the grid beginning with the first row (not including the column headers).\r\n   * @param x An x coordinate.\r\n   * @param y A y coordinate.\r\n   */\r\n  getCellFromPoint(x: number, y: number) {\r\n    let row = this.getRowFromPosition(y);\r\n    let cell = 0;\r\n\r\n    let w = 0;\r\n    for (let i = 0; i < this.columns.length && w <= x; i++) {\r\n      if (!this.columns[i]) {\r\n        continue;\r\n      }\r\n      w += this.columns[i].width as number;\r\n      cell++;\r\n    }\r\n    cell -= 1;\r\n\r\n    // we'll return -1 when coordinate falls outside the grid canvas\r\n    if (row < -1) {\r\n      row = -1;\r\n    }\r\n\r\n    return { row, cell };\r\n  }\r\n\r\n  protected getCellFromNode(cellNode: HTMLElement) {\r\n    // read column number from .l<columnNumber> CSS class\r\n    const cls = /l\\d+/.exec(cellNode.className);\r\n    if (!cls) {\r\n      throw new Error(`SlickGrid getCellFromNode: cannot get cell - ${cellNode.className}`);\r\n    }\r\n    return parseInt(cls[0].substr(1, cls[0].length - 1), 10);\r\n  }\r\n\r\n  protected getRowFromNode(rowNode: HTMLElement): number | null {\r\n    for (const row in this.rowsCache) {\r\n      if (this.rowsCache) {\r\n        for (const i in this.rowsCache[row].rowNode) {\r\n          if (this.rowsCache[row].rowNode?.[+i] === rowNode) {\r\n            return (row ? parseInt(row, 10) : 0);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get frozen (pinned) row offset\r\n   * @param {Number} row - grid row number\r\n   */\r\n  getFrozenRowOffset(row: number) {\r\n    // let offset = ( hasFrozenRows ) ? ( this._options.frozenBottom ) ? ( row >= actualFrozenRow ) ? ( h < viewportTopH ) ? ( actualFrozenRow * this._options.rowHeight ) : h : 0 : ( row >= actualFrozenRow ) ? frozenRowsHeight : 0 : 0; // WTF?\r\n    let offset = 0;\r\n    if (this.hasFrozenRows) {\r\n      if (this._options.frozenBottom) {\r\n        if (row >= this.actualFrozenRow) {\r\n          if (this.h < this.viewportTopH) {\r\n            offset = (this.actualFrozenRow * this._options.rowHeight!);\r\n          } else {\r\n            offset = this.h;\r\n          }\r\n        } else {\r\n          offset = 0;\r\n        }\r\n      }\r\n      else {\r\n        if (row >= this.actualFrozenRow) {\r\n          offset = this.frozenRowsHeight;\r\n        } else {\r\n          offset = 0;\r\n        }\r\n      }\r\n    } else {\r\n      offset = 0;\r\n    }\r\n\r\n    return offset;\r\n  }\r\n\r\n  /**\r\n   * Returns a hash containing row and cell indexes from a standard W3C event.\r\n   * @param {*} event A standard W3C event.\r\n   */\r\n  getCellFromEvent(evt: Event | SlickEventData_) {\r\n    const e = evt instanceof SlickEventData ? evt.getNativeEvent() : evt;\r\n    const targetEvent: any = (e as TouchEvent).touches ? (e as TouchEvent).touches[0] : e;\r\n\r\n    const cellNode = (e as Event & { target: HTMLElement }).target.closest('.slick-cell');\r\n    if (!cellNode) {\r\n      return null;\r\n    }\r\n\r\n    let row = this.getRowFromNode(cellNode.parentNode as HTMLElement);\r\n\r\n    if (this.hasFrozenRows) {\r\n      let rowOffset = 0;\r\n      const c = Utils.offset(Utils.parents(cellNode, '.grid-canvas')[0] as HTMLElement);\r\n      const isBottom = Utils.parents(cellNode, '.grid-canvas-bottom').length;\r\n\r\n      if (isBottom) {\r\n        rowOffset = (this._options.frozenBottom) ? Utils.height(this._canvasTopL) as number : this.frozenRowsHeight;\r\n      }\r\n\r\n      row = this.getCellFromPoint(targetEvent.clientX - c!.left, targetEvent.clientY - c!.top + rowOffset + document.documentElement.scrollTop).row;\r\n    }\r\n\r\n    const cell = this.getCellFromNode(cellNode as HTMLElement);\r\n\r\n    if (!Utils.isDefined(row) || !Utils.isDefined(cell)) {\r\n      return null;\r\n    } else {\r\n      return { row, cell };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an object representing information about a cell's position. All coordinates are absolute and take into consideration the visibility and scrolling position of all ancestors.\r\n   * @param {Number} row - A row number.\r\n   * @param {Number} cell - A column number.\r\n   */\r\n  getCellNodeBox(row: number, cell: number) {\r\n    if (!this.cellExists(row, cell)) {\r\n      return null;\r\n    }\r\n\r\n    const frozenRowOffset = this.getFrozenRowOffset(row);\r\n\r\n    const y1 = this.getRowTop(row) - frozenRowOffset;\r\n    const y2 = y1 + this._options.rowHeight! - 1;\r\n    let x1 = 0;\r\n    for (let i = 0; i < cell; i++) {\r\n      if (!this.columns[i] || this.columns[i].hidden) { continue; }\r\n\r\n      x1 += (this.columns[i].width || 0);\r\n\r\n      if (this._options.frozenColumn === i) {\r\n        x1 = 0;\r\n      }\r\n    }\r\n    const x2 = x1 + (this.columns[cell]?.width || 0);\r\n\r\n    return {\r\n      top: y1,\r\n      left: x1,\r\n      bottom: y2,\r\n      right: x2,\r\n    };\r\n  }\r\n\r\n  //////////////////////////////////////////////////////////////////////////////////////////////\r\n  // Cell switching\r\n\r\n  /** Resets active cell by making cell normal and other internal reset. */\r\n  resetActiveCell() {\r\n    this.setActiveCellInternal(null, false);\r\n  }\r\n\r\n  /** Clear active cell by making cell normal & removing \"active\" CSS class. */\r\n  unsetActiveCell() {\r\n    if (Utils.isDefined(this.activeCellNode)) {\r\n      this.makeActiveCellNormal();\r\n      this.activeCellNode.classList.remove('active');\r\n      this.rowsCache[this.activeRow]?.rowNode?.forEach((node) => node.classList.remove('active'));\r\n    }\r\n  }\r\n\r\n  /** @alias `setFocus` */\r\n  focus() {\r\n    this.setFocus();\r\n  }\r\n\r\n  protected setFocus() {\r\n    if (this.tabbingDirection === -1) {\r\n      this._focusSink.focus();\r\n    } else {\r\n      this._focusSink2.focus();\r\n    }\r\n  }\r\n\r\n  /** Scroll to a specific cell and make it into the view */\r\n  scrollCellIntoView(row: number, cell: number, doPaging?: boolean) {\r\n    this.scrollRowIntoView(row, doPaging);\r\n\r\n    if (cell <= this._options.frozenColumn!) {\r\n      return;\r\n    }\r\n\r\n    const colspan = this.getColspan(row, cell);\r\n    this.internalScrollColumnIntoView(this.columnPosLeft[cell], this.columnPosRight[cell + (colspan > 1 ? colspan - 1 : 0)]);\r\n  }\r\n\r\n  protected internalScrollColumnIntoView(left: number, right: number) {\r\n    const scrollRight = this.scrollLeft + (Utils.width(this._viewportScrollContainerX) as number) - (this.viewportHasVScroll ? (this.scrollbarDimensions?.width ?? 0) : 0);\r\n\r\n    if (left < this.scrollLeft) {\r\n      this._viewportScrollContainerX.scrollLeft = left;\r\n      this.handleScroll();\r\n      this.render();\r\n    } else if (right > scrollRight) {\r\n      this._viewportScrollContainerX.scrollLeft = Math.min(left, right - this._viewportScrollContainerX.clientWidth);\r\n      this.handleScroll();\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scroll to a specific column and show it into the viewport\r\n   * @param {Number} cell - cell column number\r\n   */\r\n  scrollColumnIntoView(cell: number) {\r\n    this.internalScrollColumnIntoView(this.columnPosLeft[cell], this.columnPosRight[cell]);\r\n  }\r\n\r\n  protected setActiveCellInternal(newCell: HTMLDivElement | null, opt_editMode?: boolean | null, preClickModeOn?: boolean | null, suppressActiveCellChangedEvent?: boolean, e?: Event | SlickEvent_) {\r\n    // make current active cell as normal cell & remove \"active\" CSS classes\r\n    this.unsetActiveCell();\r\n\r\n    // let activeCellChanged = (this.activeCellNode !== newCell);\r\n    this.activeCellNode = newCell;\r\n\r\n    if (Utils.isDefined(this.activeCellNode)) {\r\n      const activeCellOffset = Utils.offset(this.activeCellNode);\r\n      let rowOffset = Math.floor(Utils.offset(Utils.parents(this.activeCellNode, '.grid-canvas')[0] as HTMLElement)!.top);\r\n      const isBottom = Utils.parents(this.activeCellNode, '.grid-canvas-bottom').length;\r\n\r\n      if (this.hasFrozenRows && isBottom) {\r\n        rowOffset -= (this._options.frozenBottom)\r\n          ? Utils.height(this._canvasTopL) as number\r\n          : this.frozenRowsHeight;\r\n      }\r\n\r\n      const cell = this.getCellFromPoint(activeCellOffset!.left, Math.ceil(activeCellOffset!.top) - rowOffset);\r\n      this.activeRow = cell.row;\r\n      this.activePosY = cell.row;\r\n      this.activeCell = this.activePosX = this.getCellFromNode(this.activeCellNode);\r\n\r\n      if (!Utils.isDefined(opt_editMode) && this._options.autoEditNewRow) {\r\n        opt_editMode = (this.activeRow === this.getDataLength()) || this._options.autoEdit;\r\n      }\r\n\r\n      if (this._options.showCellSelection) {\r\n        // make sure to never activate more than 1 cell at a time\r\n        document.querySelectorAll('.slick-cell.active').forEach((node) => node.classList.remove('active'));\r\n        this.activeCellNode.classList.add('active');\r\n        this.rowsCache[this.activeRow]?.rowNode?.forEach((node) => node.classList.add('active'));\r\n      }\r\n\r\n      if (this._options.editable && opt_editMode && this.isCellPotentiallyEditable(this.activeRow, this.activeCell)) {\r\n        if (this._options.asyncEditorLoading) {\r\n          window.clearTimeout(this.h_editorLoader);\r\n          this.h_editorLoader = window.setTimeout(() => {\r\n            this.makeActiveCellEditable(undefined, preClickModeOn, e);\r\n          }, this._options.asyncEditorLoadDelay);\r\n        } else {\r\n          this.makeActiveCellEditable(undefined, preClickModeOn, e);\r\n        }\r\n      }\r\n    } else {\r\n      this.activeRow = this.activeCell = null as any;\r\n    }\r\n\r\n    // this optimisation causes trouble - MLeibman #329\r\n    // if (activeCellChanged) {\r\n    if (!suppressActiveCellChangedEvent) {\r\n      this.trigger<OnActiveCellChangedEventArgs | null>(this.onActiveCellChanged, this.getActiveCell() as OnActiveCellChangedEventArgs);\r\n    }\r\n    // }\r\n  }\r\n\r\n  protected clearTextSelection() {\r\n    if ((document as any).selection?.empty) {\r\n      try {\r\n        // IE fails here if selected element is not in dom\r\n        (document as any).selection.empty();\r\n        // eslint-disable-next-line no-empty\r\n      } catch (e) { }\r\n    } else if (window.getSelection) {\r\n      const sel = window.getSelection();\r\n      if (sel?.removeAllRanges) {\r\n        sel.removeAllRanges();\r\n      }\r\n    }\r\n  }\r\n\r\n  protected isCellPotentiallyEditable(row: number, cell: number) {\r\n    const dataLength = this.getDataLength();\r\n    // is the data for this row loaded?\r\n    if (row < dataLength && !this.getDataItem(row)) {\r\n      return false;\r\n    }\r\n\r\n    // are we in the Add New row? Can we create new from this cell?\r\n    if (this.columns[cell].cannotTriggerInsert && row >= dataLength) {\r\n      return false;\r\n    }\r\n\r\n    // does this cell have an editor?\r\n    if (!this.columns[cell] || this.columns[cell].hidden || !this.getEditor(row, cell)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Make the cell normal again (for example after destroying cell editor),\r\n   * we can also optionally refocus on the current active cell (again possibly after closing cell editor)\r\n   * @param {Boolean} [refocusActiveCell]\r\n   */\r\n  protected makeActiveCellNormal(refocusActiveCell = false) {\r\n    if (!this.currentEditor) {\r\n      return;\r\n    }\r\n    this.trigger(this.onBeforeCellEditorDestroy, { editor: this.currentEditor });\r\n    this.currentEditor.destroy();\r\n    this.currentEditor = null;\r\n\r\n    if (this.activeCellNode) {\r\n      const d = this.getDataItem(this.activeRow);\r\n      this.activeCellNode.classList.remove('editable');\r\n      this.activeCellNode.classList.remove('invalid');\r\n      if (d) {\r\n        const column = this.columns[this.activeCell];\r\n        const formatter = this.getFormatter(this.activeRow, column);\r\n        const formatterResult = formatter(this.activeRow, this.activeCell, this.getDataItemValueForColumn(d, column), column, d, this as unknown as SlickGridModel);\r\n        this.applyFormatResultToCellNode(formatterResult, this.activeCellNode);\r\n        this.invalidatePostProcessingResults(this.activeRow);\r\n      }\r\n      if (refocusActiveCell) {\r\n        this.setFocus();\r\n      }\r\n    }\r\n\r\n    // if there previously was text selected on a page (such as selected text in the edit cell just removed),\r\n    // IE can't set focus to anything else correctly\r\n    if (navigator.userAgent.toLowerCase().match(/msie/)) {\r\n      this.clearTextSelection();\r\n    }\r\n\r\n    this.getEditorLock()?.deactivate(this.editController as EditController);\r\n  }\r\n\r\n\r\n  editActiveCell(editor: EditorConstructor, preClickModeOn?: boolean | null, e?: Event) {\r\n    this.makeActiveCellEditable(editor, preClickModeOn, e);\r\n  }\r\n\r\n  protected makeActiveCellEditable(editor?: EditorConstructor, preClickModeOn?: boolean | null, e?: Event | SlickEvent_) {\r\n    if (!this.activeCellNode) {\r\n      return;\r\n    }\r\n    if (!this._options.editable) {\r\n      throw new Error('SlickGrid makeActiveCellEditable : should never get called when this._options.editable is false');\r\n    }\r\n\r\n    // cancel pending async call if there is one\r\n    window.clearTimeout(this.h_editorLoader);\r\n\r\n    if (!this.isCellPotentiallyEditable(this.activeRow, this.activeCell)) {\r\n      return;\r\n    }\r\n\r\n    const columnDef = this.columns[this.activeCell];\r\n    const item = this.getDataItem(this.activeRow);\r\n\r\n    if (this.trigger(this.onBeforeEditCell, { row: this.activeRow, cell: this.activeCell, item, column: columnDef, target: 'grid' }).getReturnValue() === false) {\r\n      this.setFocus();\r\n      return;\r\n    }\r\n\r\n    this.getEditorLock()?.activate(this.editController as EditController);\r\n    this.activeCellNode.classList.add('editable');\r\n\r\n    const useEditor = editor || this.getEditor(this.activeRow, this.activeCell);\r\n    // editor was null and columnMetadata and editorFactory returned null or undefined\r\n    // the editor must be constructable. Also makes sure that useEditor is of type EditorConstructor\r\n    if (!useEditor || typeof useEditor !== 'function') {\r\n      return;\r\n    }\r\n\r\n    // don't clear the cell if a custom editor is passed through\r\n    if (!editor && !useEditor.suppressClearOnEdit) {\r\n      Utils.emptyElement(this.activeCellNode);\r\n    }\r\n\r\n    let metadata = this.getItemMetadaWhenExists(this.activeRow);\r\n    metadata = metadata?.columns as any;\r\n    const columnMetaData = metadata && (metadata[columnDef.id as keyof ItemMetadata] || (metadata as any)[this.activeCell]);\r\n\r\n\r\n    const editorArgs: EditorArguments<TData, C, O> = {\r\n      grid: this,\r\n      gridPosition: this.absBox(this._container),\r\n      position: this.absBox(this.activeCellNode),\r\n      container: this.activeCellNode,\r\n      column: columnDef,\r\n      columnMetaData,\r\n      item: item || {},\r\n      event: e as Event,\r\n      commitChanges: this.commitEditAndSetFocus.bind(this),\r\n      cancelChanges: this.cancelEditAndSetFocus.bind(this)\r\n    };\r\n\r\n    this.currentEditor = new useEditor(editorArgs);\r\n\r\n    if (item && this.currentEditor) {\r\n      this.currentEditor.loadValue(item);\r\n      if (preClickModeOn && this.currentEditor?.preClick) {\r\n        this.currentEditor.preClick();\r\n      }\r\n    }\r\n\r\n    this.serializedEditorValue = this.currentEditor?.serializeValue();\r\n\r\n    if (this.currentEditor?.position) {\r\n      this.handleActiveCellPositionChange();\r\n    }\r\n  }\r\n\r\n  protected commitEditAndSetFocus() {\r\n    // if the commit fails, it would do so due to a validation error\r\n    // if so, do not steal the focus from the editor\r\n    if (this.getEditorLock()?.commitCurrentEdit()) {\r\n      this.setFocus();\r\n      if (this._options.autoEdit && !this._options.autoCommitEdit) {\r\n        this.navigateDown();\r\n      }\r\n    }\r\n  }\r\n\r\n  protected cancelEditAndSetFocus() {\r\n    if (this.getEditorLock()?.cancelCurrentEdit()) {\r\n      this.setFocus();\r\n    }\r\n  }\r\n\r\n  protected absBox(elem: HTMLElement) {\r\n    const box = {\r\n      top: elem.offsetTop,\r\n      left: elem.offsetLeft,\r\n      bottom: 0,\r\n      right: 0,\r\n      width: elem.offsetWidth,\r\n      height: elem.offsetWidth,\r\n      visible: true\r\n    };\r\n    box.bottom = box.top + box.height;\r\n    box.right = box.left + box.width;\r\n\r\n    // walk up the tree\r\n    let offsetParent = elem.offsetParent;\r\n    while ((elem = elem.parentNode as HTMLElement) !== document.body) {\r\n      if (!elem || !elem.parentNode) {\r\n        break;\r\n      }\r\n\r\n      const styles = getComputedStyle(elem);\r\n      if (box.visible && elem.scrollHeight !== elem.offsetHeight && styles['overflowY'] !== 'visible') {\r\n        box.visible = box.bottom > elem.scrollTop && box.top < elem.scrollTop + elem.clientHeight;\r\n      }\r\n\r\n      if (box.visible && elem.scrollWidth !== elem.offsetWidth && styles['overflowX'] !== 'visible') {\r\n        box.visible = box.right > elem.scrollLeft && box.left < elem.scrollLeft + elem.clientWidth;\r\n      }\r\n\r\n      box.left -= elem.scrollLeft;\r\n      box.top -= elem.scrollTop;\r\n\r\n      if (elem === offsetParent) {\r\n        box.left += elem.offsetLeft;\r\n        box.top += elem.offsetTop;\r\n        offsetParent = elem.offsetParent;\r\n      }\r\n\r\n      box.bottom = box.top + box.height;\r\n      box.right = box.left + box.width;\r\n    }\r\n\r\n    return box;\r\n  }\r\n\r\n  /** Returns an object representing information about the active cell's position. All coordinates are absolute and take into consideration the visibility and scrolling position of all ancestors. */\r\n  getActiveCellPosition() {\r\n    return this.absBox(this.activeCellNode as HTMLElement);\r\n  }\r\n\r\n  /** Get the Grid Position */\r\n  getGridPosition() {\r\n    return this.absBox(this._container);\r\n  }\r\n\r\n  protected handleActiveCellPositionChange() {\r\n    if (!this.activeCellNode) {\r\n      return;\r\n    }\r\n\r\n    this.trigger(this.onActiveCellPositionChanged, {});\r\n\r\n    if (this.currentEditor) {\r\n      const cellBox = this.getActiveCellPosition();\r\n      if (this.currentEditor.show && this.currentEditor.hide) {\r\n        if (!cellBox.visible) {\r\n          this.currentEditor.hide();\r\n        } else {\r\n          this.currentEditor.show();\r\n        }\r\n      }\r\n\r\n      if (this.currentEditor.position) {\r\n        this.currentEditor.position(cellBox);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Returns the active cell editor. If there is no actively edited cell, null is returned.   */\r\n  getCellEditor() {\r\n    return this.currentEditor;\r\n  }\r\n\r\n  /**\r\n   * Returns an object representing the coordinates of the currently active cell:\r\n   * @example\t`{ row: activeRow, cell: activeCell }`\r\n   */\r\n  getActiveCell() {\r\n    if (!this.activeCellNode) {\r\n      return null;\r\n    }\r\n    return { row: this.activeRow, cell: this.activeCell };\r\n  }\r\n\r\n  /** Returns the DOM element containing the currently active cell. If no cell is active, null is returned. */\r\n  getActiveCellNode() {\r\n    return this.activeCellNode;\r\n  }\r\n\r\n  // This get/set methods are used for keeping text-selection. These don't consider IE because they don't loose text-selection.\r\n  // Fix for firefox selection. See https://github.com/mleibman/SlickGrid/pull/746/files\r\n  protected getTextSelection() {\r\n    let textSelection: Range | null = null;\r\n    if (window.getSelection) {\r\n      const selection = window.getSelection();\r\n      if ((selection?.rangeCount ?? 0) > 0) {\r\n        textSelection = selection!.getRangeAt(0);\r\n      }\r\n    }\r\n    return textSelection;\r\n  }\r\n\r\n  protected setTextSelection(selection: Range) {\r\n    if (window.getSelection && selection) {\r\n      const target = window.getSelection();\r\n      if (target) {\r\n        target.removeAllRanges();\r\n        target.addRange(selection);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scroll to a specific row and make it into the view\r\n   * @param {Number} row - grid row number\r\n   * @param {Boolean} doPaging - scroll when pagination is enabled\r\n   */\r\n  scrollRowIntoView(row: number, doPaging?: boolean) {\r\n    if (!this.hasFrozenRows ||\r\n      (!this._options.frozenBottom && row > this.actualFrozenRow - 1) ||\r\n      (this._options.frozenBottom && row < this.actualFrozenRow - 1)) {\r\n\r\n      const viewportScrollH = Utils.height(this._viewportScrollContainerY) as number;\r\n\r\n      // if frozen row on top\r\n      // subtract number of frozen row\r\n      const rowNumber = (this.hasFrozenRows && !this._options.frozenBottom ? row - this._options.frozenRow! : row);\r\n\r\n      const rowAtTop = rowNumber * this._options.rowHeight!;\r\n      const rowAtBottom = (rowNumber + 1) * this._options.rowHeight!\r\n        - viewportScrollH\r\n        + (this.viewportHasHScroll ? (this.scrollbarDimensions?.height ?? 0) : 0);\r\n\r\n      // need to page down?\r\n      if ((rowNumber + 1) * this._options.rowHeight! > this.scrollTop + viewportScrollH + this.offset) {\r\n        this.scrollTo(doPaging ? rowAtTop : rowAtBottom);\r\n        this.render();\r\n      }\r\n      // or page up?\r\n      else if (rowNumber * this._options.rowHeight! < this.scrollTop + this.offset) {\r\n        this.scrollTo(doPaging ? rowAtBottom : rowAtTop);\r\n        this.render();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scroll to the top row and make it into the view\r\n   * @param {Number} row - grid row number\r\n   */\r\n  scrollRowToTop(row: number) {\r\n    this.scrollTo(row * this._options.rowHeight!);\r\n    this.render();\r\n  }\r\n\r\n  protected scrollPage(dir: number) {\r\n    const deltaRows = dir * this.numVisibleRows;\r\n    /// First fully visible row crosses the line with\r\n    /// y === bottomOfTopmostFullyVisibleRow\r\n    const bottomOfTopmostFullyVisibleRow = this.scrollTop + this._options.rowHeight! - 1;\r\n    this.scrollTo((this.getRowFromPosition(bottomOfTopmostFullyVisibleRow) + deltaRows) * this._options.rowHeight!);\r\n    this.render();\r\n\r\n    if (this._options.enableCellNavigation && Utils.isDefined(this.activeRow)) {\r\n      let row = this.activeRow + deltaRows;\r\n      const dataLengthIncludingAddNew = this.getDataLengthIncludingAddNew();\r\n      if (row >= dataLengthIncludingAddNew) {\r\n        row = dataLengthIncludingAddNew - 1;\r\n      }\r\n      if (row < 0) {\r\n        row = 0;\r\n      }\r\n\r\n      // use the gotoDown/Up but cancel its row move to activate same row\r\n      // (i.e.: gotoDown(row - 1) will go to same row if it can be activated or next one down).\r\n      // We do this in order to find the next cell that can be activated which can be much further away (i.e. rowspan)\r\n      const pos = dir === 1\r\n        ? this.gotoDown(row - 1 || 0, this.activeCell, this.activePosY, this.activePosX)\r\n        : this.gotoUp(row + 1, this.activeCell, this.activePosY, this.activePosX)\r\n      this.navigateToPos(pos);\r\n    }\r\n  }\r\n\r\n  /** Navigate (scroll) by a page down */\r\n  navigatePageDown() {\r\n    this.scrollPage(1);\r\n  }\r\n\r\n  /** Navigate (scroll) by a page up */\r\n  navigatePageUp() {\r\n    this.scrollPage(-1);\r\n  }\r\n\r\n  /** Navigate to the top of the grid */\r\n  navigateTop() {\r\n    this.unsetActiveCell();\r\n    this.navigateToRow(0);\r\n  }\r\n\r\n  /** Navigate to the bottom of the grid */\r\n  navigateBottom() {\r\n    const row = this.getDataLength() - 1;\r\n    let tmpRow = this.getParentRowSpanByCell(row, this.activeCell)?.start ?? row;\r\n\r\n    do {\r\n      if (this._options.enableCellRowSpan) {\r\n        this.setActiveRow(tmpRow);\r\n      }\r\n      const isValidMode = this.navigateToRow(tmpRow);\r\n      if ((isValidMode && this.activeCell === this.activePosX) || !Utils.isDefined(this.activeCell)) {\r\n        break;\r\n      }\r\n    } while (--tmpRow > 0);\r\n  }\r\n\r\n  navigateToRow(row: number) {\r\n    const num_rows = this.getDataLength();\r\n    if (!num_rows) { return false; }\r\n\r\n    if (row < 0) {\r\n      row = 0;\r\n    } else if (row >= num_rows) {\r\n      row = num_rows - 1;\r\n    }\r\n\r\n    this.scrollCellIntoView(row, 0, true);\r\n    let isValidMove = !Utils.isDefined(this.activeCell) || !Utils.isDefined(this.activeRow);\r\n\r\n    if (this._options.enableCellNavigation && Utils.isDefined(this.activeRow)) {\r\n      let cell = 0;\r\n      let prevCell: number | null = null;\r\n      const prevActivePosX = this.activePosX;\r\n      while (cell <= this.activePosX) {\r\n        if (this.canCellBeActive(row, cell)) {\r\n          prevCell = cell;\r\n          if (!Utils.isDefined(this.activeCell) || cell === this.activeCell) {\r\n            isValidMove = true;\r\n          }\r\n        }\r\n        cell += this.getColspan(row, cell);\r\n      }\r\n\r\n      if (prevCell !== null) {\r\n        this.setActiveCellInternal(this.getCellNode(row, prevCell));\r\n        this.activePosX = prevActivePosX;\r\n      } else {\r\n        this.resetActiveCell();\r\n      }\r\n    }\r\n    return isValidMove;\r\n  }\r\n\r\n  protected getColspan(row: number, cell: number): number {\r\n    const metadata = this.getItemMetadaWhenExists(row);\r\n    if (!metadata || !metadata.columns) {\r\n      return 1;\r\n    }\r\n\r\n    if (cell >= this.columns.length) {\r\n      cell = this.columns.length - 1;\r\n    }\r\n    const columnData = metadata.columns[this.columns[cell].id] || metadata.columns[cell];\r\n    let colspan = columnData?.colspan;\r\n    if (colspan === '*') {\r\n      colspan = this.columns.length - cell;\r\n    } else {\r\n      colspan = colspan || 1;\r\n    }\r\n\r\n    return colspan as number;\r\n  }\r\n\r\n  protected getRowspan(row: number, cell: number) {\r\n    let rowspan = 1;\r\n    const metadata = this.getItemMetadaWhenExists(row);\r\n    if (metadata?.columns) {\r\n      Object.keys(metadata.columns).forEach(col => {\r\n        const colIdx = Number(col);\r\n        if (colIdx === cell) {\r\n          const columnMeta = metadata.columns![colIdx];\r\n          rowspan = Number(columnMeta?.rowspan || 1);\r\n        }\r\n      });\r\n    }\r\n    return rowspan;\r\n  }\r\n\r\n  protected findFocusableRow(row: number, cell: number, dir: 'up' | 'down') {\r\n    let r = row;\r\n    const rowRange = this._colsWithRowSpanCache[cell] || new Set<string>();\r\n    let found = false;\r\n\r\n    Array.from(rowRange).forEach((rrange) => {\r\n      const [start, end] = rrange.split(':').map(Number);\r\n      if (!found && row >= start && row <= end) {\r\n        r = dir === 'up' ? start : end;\r\n        if (this.canCellBeActive(r, cell)) {\r\n          found = true;\r\n        }\r\n      }\r\n    });\r\n    if (r < 0) {\r\n      r = 0;\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  protected findFirstFocusableCell(row: number): { cell: number; row: number; } {\r\n    let cell = 0;\r\n    let focusableRow = row;\r\n    let ff = -1;\r\n\r\n    while (cell < this.columns.length) {\r\n      const prs = this.getParentRowSpanByCell(row, cell);\r\n      focusableRow = (prs !== null && prs.start !== row) ? prs.start : row;\r\n      if (this.canCellBeActive(focusableRow, cell)) {\r\n        ff = cell;\r\n        break;\r\n      }\r\n      cell += this.getColspan(focusableRow, cell);\r\n    }\r\n    return { cell: ff, row: focusableRow };\r\n  }\r\n\r\n  protected findLastFocusableCell(row: number): { cell: number; row: number; } {\r\n    let cell = 0;\r\n    let focusableRow = row;\r\n    let lf = -1;\r\n\r\n    while (cell < this.columns.length) {\r\n      const prs = this.getParentRowSpanByCell(row, cell);\r\n      focusableRow = (prs !== null && prs.start !== row) ? prs.start : row;\r\n      if (this.canCellBeActive(focusableRow, cell)) {\r\n        lf = cell;\r\n      }\r\n      cell += this.getColspan(focusableRow, cell);\r\n    }\r\n\r\n    return { cell: lf, row: focusableRow };\r\n  }\r\n\r\n  /**\r\n   * From any row/cell indexes that might have colspan/rowspan, find its starting indexes\r\n   * For example, if we start at 0,0 and we have colspan/rowspan of 4 for both and our indexes is row:2,cell:3\r\n   * then our starting row/cell is 0,0. If a cell has no spanning at all then row/cell output is same as input\r\n   */\r\n  findSpanStartingCell(row: number, cell: number) {\r\n    const prs = this.getParentRowSpanByCell(row, cell);\r\n    const focusableRow = (prs !== null && prs.start !== row) ? prs.start : row;\r\n    let fc = 0;\r\n    let prevCell = 0;\r\n\r\n    while (fc < this.columns.length) {\r\n      fc += this.getColspan(focusableRow, fc);\r\n      if (fc > cell) {\r\n        fc = prevCell;\r\n        return { cell: fc, row: focusableRow };\r\n      }\r\n      prevCell = fc;\r\n    }\r\n\r\n    return { cell: fc, row: focusableRow };\r\n  }\r\n\r\n  protected gotoRight(_row: number, cell: number, posY: number, _posX?: number) {\r\n    if (cell >= this.columns.length) {\r\n      return null;\r\n    }\r\n    let fc = cell + 1;\r\n    let fr = posY;\r\n\r\n    do {\r\n      const sc = this.findSpanStartingCell(posY, fc);\r\n      fr = sc.row;\r\n      fc = sc.cell;\r\n      if (this.canCellBeActive(fr, fc) && fc > cell) {\r\n        break;\r\n      }\r\n      fc += this.getColspan(fr, sc.cell);\r\n    } while (fc < this.columns.length);\r\n\r\n    if (fc < this.columns.length) {\r\n      return {\r\n        row: fr,\r\n        cell: fc,\r\n        posX: fc,\r\n        posY,\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  protected gotoLeft(row: number, cell: number, posY: number, _posX?: number) {\r\n    if (cell <= 0) {\r\n      return null;\r\n    }\r\n\r\n    const ff = this.findFirstFocusableCell(row);\r\n    if (ff.cell === null || ff.cell >= cell) {\r\n      return null;\r\n    }\r\n\r\n    let pos: CellPosition | null;\r\n    let prev = {\r\n      row,\r\n      cell: ff.cell,\r\n      posX: ff.cell,\r\n      posY,\r\n    };\r\n\r\n    while (true) {\r\n      pos = this.gotoRight(prev.row, prev.cell, prev.posY, prev.posX);\r\n      if (!pos) {\r\n        return null;\r\n      }\r\n      if (pos.cell >= cell) {\r\n        // when right cell is within a rowspan, we need to use original row (posY)\r\n        const nextRow = this.findFocusableRow(posY, prev.cell, 'up');\r\n        if (nextRow !== prev.row) {\r\n          prev.row = nextRow;\r\n        }\r\n        return prev;\r\n      }\r\n      prev = pos;\r\n    }\r\n  }\r\n\r\n  protected gotoDown(row: number, cell: number, _posY: number, posX: number) {\r\n    let prevCell;\r\n    const ub = this.getDataLengthIncludingAddNew();\r\n    do {\r\n      row += this.getRowspan(row, posX);\r\n      prevCell = cell = 0;\r\n      while (cell <= posX) {\r\n        prevCell = cell;\r\n        cell += this.getColspan(row, cell);\r\n      }\r\n    }\r\n    while (row <= ub && !this.canCellBeActive(row, prevCell));\r\n\r\n    if (row <= ub) {\r\n      return {\r\n        row,\r\n        cell: prevCell,\r\n        posX,\r\n        posY: row,\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  protected gotoUp(row: number, cell: number, _posY: number, posX: number) {\r\n    let prevCell;\r\n    if (row <= 0) {\r\n      return null;\r\n    }\r\n    do {\r\n      row = this.findFocusableRow(row - 1, posX, 'up');\r\n      prevCell = cell = 0;\r\n      while (cell <= posX) {\r\n        prevCell = cell;\r\n        cell += this.getColspan(row, cell);\r\n      }\r\n    }\r\n    while (row >= 0 && !this.canCellBeActive(row, prevCell));\r\n\r\n    if (cell <= this.columns.length) {\r\n      return {\r\n        row,\r\n        cell: prevCell,\r\n        posX,\r\n        posY: row,\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  protected gotoNext(row: number, cell: number, posY: number, posX: number) {\r\n    if (!Utils.isDefined(row) && !Utils.isDefined(cell)) {\r\n      row = cell = posY = posX = 0;\r\n      if (this.canCellBeActive(row, cell)) {\r\n        return {\r\n          row,\r\n          cell,\r\n          posX: cell,\r\n          posY,\r\n        };\r\n      }\r\n    }\r\n\r\n    let pos = this.gotoRight(row, cell, posY, posX);\r\n    if (!pos) {\r\n      let ff;\r\n      while (!pos && ++posY < this.getDataLength() + (this._options.enableAddRow ? 1 : 0)) {\r\n        ff = this.findFirstFocusableCell(posY);\r\n        if (ff.cell !== null) {\r\n          row = this.getParentRowSpanByCell(posY, ff.cell)?.start ?? posY;\r\n          pos = {\r\n            row,\r\n            cell: ff.cell,\r\n            posX: ff.cell,\r\n            posY,\r\n          };\r\n        }\r\n      }\r\n    }\r\n    return pos;\r\n  }\r\n\r\n  protected gotoPrev(row: number, cell: number, posY: number, posX: number) {\r\n    if (!Utils.isDefined(row) && !Utils.isDefined(cell)) {\r\n      row = posY = this.getDataLengthIncludingAddNew() - 1;\r\n      cell = posX = this.columns.length - 1;\r\n      if (this.canCellBeActive(row, cell)) {\r\n        return {\r\n          row,\r\n          cell,\r\n          posX: cell,\r\n          posY,\r\n        };\r\n      }\r\n    }\r\n\r\n    let pos = this.gotoLeft(row, cell, posY, posX);\r\n    if (!pos) {\r\n      let lf;\r\n      while (!pos && --posY >= 0) {\r\n        lf = this.findLastFocusableCell(posY);\r\n        if (lf.cell > -1) {\r\n          row = this.getParentRowSpanByCell(posY, lf.cell)?.start ?? posY;\r\n          pos = {\r\n            row,\r\n            cell: lf.cell,\r\n            posX: lf.cell,\r\n            posY,\r\n          };\r\n        }\r\n      }\r\n    }\r\n    return pos;\r\n  }\r\n\r\n  protected gotoRowStart(row: number, _cell: number, _posY: number, _posX: number) {\r\n    const ff = this.findFirstFocusableCell(row);\r\n    if (ff.cell === null) { return null; }\r\n\r\n    return {\r\n      row: ff.row,\r\n      cell: ff.cell,\r\n      posX: ff.cell,\r\n      posY: row,\r\n    };\r\n  }\r\n\r\n  protected gotoRowEnd(row: number, _cell: number, _posY: number, _posX: number) {\r\n    const lf = this.findLastFocusableCell(row);\r\n    if (lf.cell === -1) { return null; }\r\n\r\n    return {\r\n      row: lf.row,\r\n      cell: lf.cell,\r\n      posX: lf.cell,\r\n      posY: row\r\n    };\r\n  }\r\n\r\n  /** Switches the active cell one cell right skipping unselectable cells. Unline navigateNext, navigateRight stops at the last cell of the row. Returns a boolean saying whether it was able to complete or not. */\r\n  navigateRight() {\r\n    return this.navigate('right');\r\n  }\r\n\r\n  /** Switches the active cell one cell left skipping unselectable cells. Unline navigatePrev, navigateLeft stops at the first cell of the row. Returns a boolean saying whether it was able to complete or not. */\r\n  navigateLeft() {\r\n    return this.navigate('left');\r\n  }\r\n\r\n  /** Switches the active cell one row down skipping unselectable cells. Returns a boolean saying whether it was able to complete or not. */\r\n  navigateDown() {\r\n    return this.navigate('down');\r\n  }\r\n\r\n  /** Switches the active cell one row up skipping unselectable cells. Returns a boolean saying whether it was able to complete or not. */\r\n  navigateUp() {\r\n    return this.navigate('up');\r\n  }\r\n\r\n  /** Tabs over active cell to the next selectable cell. Returns a boolean saying whether it was able to complete or not. */\r\n  navigateNext() {\r\n    return this.navigate('next');\r\n  }\r\n\r\n  /** Tabs over active cell to the previous selectable cell. Returns a boolean saying whether it was able to complete or not. */\r\n  navigatePrev() {\r\n    return this.navigate('prev');\r\n  }\r\n\r\n  /** Navigate to the start row in the grid */\r\n  navigateRowStart() {\r\n    return this.navigate('home');\r\n  }\r\n\r\n  /** Navigate to the end row in the grid */\r\n  navigateRowEnd() {\r\n    return this.navigate('end');\r\n  }\r\n\r\n  /** Navigate to coordinate 0,0 (top left home) */\r\n  navigateTopStart(): boolean | undefined {\r\n    this.navigateToRow(0);\r\n    return this.navigate('home');\r\n  }\r\n\r\n  /** Navigate to bottom row end (bottom right end) */\r\n  navigateBottomEnd(): boolean | undefined {\r\n    this.navigateBottom();\r\n    return this.navigate('end');\r\n  }\r\n\r\n  /**\r\n   * @param {string} dir Navigation direction.\r\n   * @return {boolean} Whether navigation resulted in a change of active cell.\r\n   */\r\n  protected navigate(dir: 'up' | 'down' | 'left' | 'right' | 'prev' | 'next' | 'home' | 'end') {\r\n    if (!this._options.enableCellNavigation) {\r\n      return false;\r\n    }\r\n\r\n    if (!this.activeCellNode && dir !== 'prev' && dir !== 'next') {\r\n      return false;\r\n    }\r\n\r\n    if (!this.getEditorLock()?.commitCurrentEdit()) {\r\n      return true;\r\n    }\r\n    this.setFocus();\r\n    this.unsetActiveCell();\r\n\r\n    const tabbingDirections = {\r\n      'up': -1,\r\n      'down': 1,\r\n      'left': -1,\r\n      'right': 1,\r\n      'prev': -1,\r\n      'next': 1,\r\n      'home': -1,\r\n      'end': 1\r\n    };\r\n    this.tabbingDirection = tabbingDirections[dir];\r\n\r\n    const stepFunctions = {\r\n      'up': this.gotoUp,\r\n      'down': this.gotoDown,\r\n      'left': this.gotoLeft,\r\n      'right': this.gotoRight,\r\n      'prev': this.gotoPrev,\r\n      'next': this.gotoNext,\r\n      'home': this.gotoRowStart,\r\n      'end': this.gotoRowEnd\r\n    };\r\n    const stepFn = stepFunctions[dir];\r\n    const pos = stepFn.call(this, this.activeRow, this.activeCell, this.activePosY, this.activePosX);\r\n    return this.navigateToPos(pos);\r\n  }\r\n\r\n  protected navigateToPos(pos: CellPosition | null) {\r\n    if (pos) {\r\n      if (this.hasFrozenRows && this._options.frozenBottom && pos.row === this.getDataLength()) {\r\n        return;\r\n      }\r\n\r\n      const isAddNewRow = (pos.row === this.getDataLength());\r\n\r\n      if ((!this._options.frozenBottom && pos.row >= this.actualFrozenRow)\r\n        || (this._options.frozenBottom && pos.row < this.actualFrozenRow)\r\n      ) {\r\n        this.scrollCellIntoView(pos.row, pos.cell, !isAddNewRow && this._options.emulatePagingWhenScrolling);\r\n      }\r\n      this.setActiveCellInternal(this.getCellNode(pos.row, pos.cell));\r\n      this.activePosX = pos.posX;\r\n      this.activePosY = pos.posY;\r\n      return true;\r\n    } else {\r\n      this.setActiveCellInternal(this.getCellNode(this.activeRow, this.activeCell));\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a DOM element containing a cell at a given row and cell.\r\n   * @param row A row index.\r\n   * @param cell A column index.\r\n   */\r\n  getCellNode(row: number, cell: number): HTMLDivElement | null {\r\n    if (this.rowsCache[row]) {\r\n      this.ensureCellNodesInRowsCache(row);\r\n      try {\r\n        if (this.rowsCache[row].cellNodesByColumnIdx.length > cell) {\r\n          return this.rowsCache[row].cellNodesByColumnIdx[cell] as HTMLDivElement | null;\r\n        }\r\n        else {\r\n          return null;\r\n        }\r\n      } catch (e) {\r\n        return this.rowsCache[row].cellNodesByColumnIdx[cell] as HTMLDivElement | null;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Sets an active cell.\r\n   * @param {number} row - A row index.\r\n   * @param {number} cell - A column index.\r\n   * @param {boolean} [optionEditMode] Option Edit Mode is Auto-Edit?\r\n   * @param {boolean} [preClickModeOn] Pre-Click Mode is Enabled?\r\n   * @param {boolean} [suppressActiveCellChangedEvent] Are we suppressing Active Cell Changed Event (defaults to false)\r\n   */\r\n  setActiveCell(row: number, cell: number, opt_editMode?: boolean, preClickModeOn?: boolean, suppressActiveCellChangedEvent?: boolean) {\r\n    if (!this.initialized) { return; }\r\n    if (row > this.getDataLength() || row < 0 || cell >= this.columns.length || cell < 0) {\r\n      return;\r\n    }\r\n\r\n    if (!this._options.enableCellNavigation) {\r\n      return;\r\n    }\r\n\r\n    this.scrollCellIntoView(row, cell, false);\r\n    this.setActiveCellInternal(this.getCellNode(row, cell), opt_editMode, preClickModeOn, suppressActiveCellChangedEvent);\r\n  }\r\n\r\n  /**\r\n   * Sets an active cell.\r\n   * @param {number} row - A row index.\r\n   * @param {number} cell - A column index.\r\n   * @param {boolean} [suppressScrollIntoView] - optionally suppress the ScrollIntoView that happens by default (defaults to false)\r\n   */\r\n  setActiveRow(row: number, cell?: number, suppressScrollIntoView?: boolean) {\r\n    if (!this.initialized) { return; }\r\n    if (row > this.getDataLength() || row < 0 || (cell ?? 0) >= this.columns.length || (cell ?? 0) < 0) {\r\n      return;\r\n    }\r\n\r\n    this.activeRow = row;\r\n    if (!suppressScrollIntoView) {\r\n      this.scrollCellIntoView(row, cell || 0, false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if you can click on a given cell and make it the active focus.\r\n   * @param {number} row A row index.\r\n   * @param {number} col A column index.\r\n   */\r\n  canCellBeActive(row: number, cell: number) {\r\n    if (!this._options.enableCellNavigation || row >= this.getDataLengthIncludingAddNew() ||\r\n      row < 0 || cell >= this.columns.length || cell < 0) {\r\n      return false;\r\n    }\r\n\r\n    if (!this.columns[cell] || this.columns[cell].hidden) {\r\n      return false;\r\n    }\r\n\r\n    // cell not found in rows that are spanned (rowspan of 1 or more) are invalid\r\n    // i.e.: if the 5th cell has rowspan that reaches the end of the grid, then the last cell that can be active is 5 (anything above 5 on same column is invalid)\r\n    const spanRow = this.getParentRowSpanByCell(row, cell)?.start ?? row;\r\n    if (spanRow !== row) {\r\n      return false;\r\n    }\r\n\r\n    const rowMetadata = this.getItemMetadaWhenExists(row);\r\n    if (rowMetadata?.focusable !== undefined) {\r\n      return !!rowMetadata.focusable;\r\n    }\r\n\r\n    const columnMetadata = rowMetadata?.columns;\r\n    if (columnMetadata?.[this.columns[cell].id]?.focusable !== undefined) {\r\n      return !!columnMetadata[this.columns[cell].id].focusable;\r\n    }\r\n    if (columnMetadata?.[cell]?.focusable !== undefined) {\r\n      return !!columnMetadata[cell].focusable;\r\n    }\r\n\r\n    return !!(this.columns[cell].focusable);\r\n  }\r\n\r\n  /**\r\n   * Returns true if selecting the row causes this particular cell to have the selectedCellCssClass applied to it. A cell can be selected if it exists and if it isn't on an empty / \"Add New\" row and if it is not marked as \"unselectable\" in the column definition.\r\n   * @param {number} row A row index.\r\n   * @param {number} col A column index.\r\n   */\r\n  canCellBeSelected(row: number, cell: number) {\r\n    if (row >= this.getDataLength() || row < 0 || cell >= this.columns.length || cell < 0) {\r\n      return false;\r\n    }\r\n\r\n    if (!this.columns[cell] || this.columns[cell].hidden) {\r\n      return false;\r\n    }\r\n\r\n    const rowMetadata = this.getItemMetadaWhenExists(row);\r\n    if (rowMetadata?.selectable !== undefined) {\r\n      return !!rowMetadata.selectable;\r\n    }\r\n\r\n    const columnMetadata = rowMetadata?.columns && (rowMetadata.columns[this.columns[cell].id] || rowMetadata.columns[cell]);\r\n    if (columnMetadata?.selectable !== undefined) {\r\n      return !!columnMetadata.selectable;\r\n    }\r\n\r\n    return !!this.columns[cell].selectable;\r\n  }\r\n\r\n  /**\r\n   * Accepts a row integer and a cell integer, scrolling the view to the row where row is its row index, and cell is its cell index. Optionally accepts a forceEdit boolean which, if true, will attempt to initiate the edit dialogue for the field in the specified cell.\r\n   * Unlike setActiveCell, this scrolls the row into the viewport and sets the keyboard focus.\r\n   * @param {Number} row A row index.\r\n   * @param {Number} cell A column index.\r\n   * @param {Boolean} [forceEdit] If true, will attempt to initiate the edit dialogue for the field in the specified cell.\r\n   */\r\n  gotoCell(row: number, cell: number, forceEdit?: boolean, e?: Event | SlickEvent_) {\r\n    if (!this.initialized) { return; }\r\n    if (!this.canCellBeActive(row, cell)) {\r\n      return;\r\n    }\r\n\r\n    if (!this.getEditorLock()?.commitCurrentEdit()) {\r\n      return;\r\n    }\r\n\r\n    this.scrollCellIntoView(row, cell, false);\r\n\r\n    const newCell = this.getCellNode(row, cell);\r\n\r\n    // if selecting the 'add new' row, start editing right away\r\n    const column = this.columns[cell];\r\n    const suppressActiveCellChangedEvent = !!(this._options.editable && column?.editor && this._options.suppressActiveCellChangeOnEdit);\r\n    this.setActiveCellInternal(newCell, (forceEdit || (row === this.getDataLength()) || this._options.autoEdit), null, suppressActiveCellChangedEvent, e);\r\n\r\n    // if no editor was created, set the focus back on the grid\r\n    if (!this.currentEditor) {\r\n      this.setFocus();\r\n    }\r\n  }\r\n\r\n\r\n  //////////////////////////////////////////////////////////////////////////////////////////////\r\n  // IEditor implementation for the editor lock\r\n\r\n  protected commitCurrentEdit() {\r\n    const self = this as SlickGrid<TData, C, O>;\r\n    const item = self.getDataItem(self.activeRow);\r\n    const column = self.columns[self.activeCell];\r\n\r\n    if (self.currentEditor) {\r\n      if (self.currentEditor.isValueChanged()) {\r\n        const validationResults = self.currentEditor.validate();\r\n\r\n        if (validationResults.valid) {\r\n          const row = self.activeRow;\r\n          const cell = self.activeCell;\r\n          const editor = self.currentEditor;\r\n          const serializedValue = self.currentEditor.serializeValue();\r\n          const prevSerializedValue = self.serializedEditorValue;\r\n\r\n          if (self.activeRow < self.getDataLength()) {\r\n            const editCommand = {\r\n              row,\r\n              cell,\r\n              editor,\r\n              serializedValue,\r\n              prevSerializedValue,\r\n              execute: () => {\r\n                editor.applyValue(item, serializedValue);\r\n                self.updateRow(row);\r\n                self.trigger(self.onCellChange, { command: 'execute', row, cell, item, column });\r\n              },\r\n              undo: () => {\r\n                editor.applyValue(item, prevSerializedValue);\r\n                self.updateRow(row);\r\n                self.trigger(self.onCellChange, { command: 'undo', row, cell, item, column, });\r\n              }\r\n            };\r\n\r\n            if (self._options.editCommandHandler) {\r\n              self.makeActiveCellNormal(true);\r\n              self._options.editCommandHandler(item, column, editCommand);\r\n            } else {\r\n              editCommand.execute();\r\n              self.makeActiveCellNormal(true);\r\n            }\r\n\r\n          } else {\r\n            const newItem = {};\r\n            self.currentEditor.applyValue(newItem, self.currentEditor.serializeValue());\r\n            self.makeActiveCellNormal(true);\r\n            self.trigger(self.onAddNewRow, { item: newItem, column });\r\n          }\r\n\r\n          // check whether the lock has been re-acquired by event handlers\r\n          return !self.getEditorLock()?.isActive();\r\n        } else {\r\n          // Re-add the CSS class to trigger transitions, if any.\r\n          if (self.activeCellNode) {\r\n            self.activeCellNode.classList.remove('invalid');\r\n            Utils.width(self.activeCellNode);// force layout\r\n            self.activeCellNode.classList.add('invalid');\r\n          }\r\n\r\n          self.trigger(self.onValidationError, {\r\n            editor: self.currentEditor,\r\n            cellNode: self.activeCellNode,\r\n            validationResults,\r\n            row: self.activeRow,\r\n            cell: self.activeCell,\r\n            column\r\n          });\r\n\r\n          self.currentEditor.focus();\r\n          return false;\r\n        }\r\n      }\r\n\r\n      self.makeActiveCellNormal(true);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected cancelCurrentEdit() {\r\n    this.makeActiveCellNormal();\r\n    return true;\r\n  }\r\n\r\n  protected rowsToRanges(rows: number[]) {\r\n    const ranges: SlickRange_[] = [];\r\n    const lastCell = this.columns.length - 1;\r\n    for (let i = 0; i < rows.length; i++) {\r\n      ranges.push(new SlickRange(rows[i], 0, rows[i], lastCell));\r\n    }\r\n    return ranges;\r\n  }\r\n\r\n  /** Returns an array of row indices corresponding to the currently selected rows. */\r\n  getSelectedRows() {\r\n    if (!this.selectionModel) {\r\n      throw new Error('SlickGrid Selection model is not set');\r\n    }\r\n    return this.selectedRows.slice(0);\r\n  }\r\n\r\n  /**\r\n   * Accepts an array of row indices and applies the current selectedCellCssClass to the cells in the row, respecting whether cells have been flagged as selectable.\r\n   * @param {Array<number>} rowsArray - an array of row numbers.\r\n   * @param {String} [caller] - an optional string to identify who called the method\r\n   */\r\n  setSelectedRows(rows: number[], caller?: string) {\r\n    if (!this.selectionModel) {\r\n      throw new Error('SlickGrid Selection model is not set');\r\n    }\r\n    if (this && this.getEditorLock && !this.getEditorLock()?.isActive()) {\r\n      this.selectionModel.setSelectedRanges(this.rowsToRanges(rows), caller || 'SlickGrid.setSelectedRows');\r\n    }\r\n  }\r\n\r\n  /** html sanitizer to avoid scripting attack */\r\n  sanitizeHtmlString(dirtyHtml: string, suppressLogging?: boolean) {\r\n    if (!this._options.sanitizer || typeof dirtyHtml !== 'string') {\r\n      return dirtyHtml;\r\n    }\r\n\r\n    const cleanHtml = this._options.sanitizer(dirtyHtml);\r\n\r\n    if (!suppressLogging && this._options.logSanitizedHtml && this.logMessageCount <= this.logMessageMaxCount && cleanHtml !== dirtyHtml) {\r\n      console.log(`sanitizer altered html: ${dirtyHtml} --> ${cleanHtml}`);\r\n      if (this.logMessageCount === this.logMessageMaxCount) {\r\n        console.log(`sanitizer: silencing messages after first ${this.logMessageMaxCount}`);\r\n      }\r\n      this.logMessageCount++;\r\n    }\r\n    return cleanHtml;\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(Slick, {\r\n    Grid: SlickGrid,\r\n  });\r\n}\r\n", "/***\r\n * A sample AJAX data store implementation.\r\n * Right now, it's hooked up to load Hackernews stories, but can\r\n * easily be extended to support any JSONP-compatible backend that accepts paging parameters.\r\n */\r\nexport class SlickRemoteModelYahoo {\r\n  // protected\r\n  protected PAGESIZE = 10;\r\n  protected data: any = { length: 0 };\r\n  protected h_request?: number;\r\n  protected req: any = null; // ajax request\r\n\r\n  // events\r\n  protected onDataLoading = new Slick.Event('onDataLoading');\r\n  protected onDataLoaded = new Slick.Event('onDataLoaded');\r\n\r\n  constructor() {\r\n    if (!(window.$ || window.jQuery) || !window.$.jsonp) {\r\n      throw new Error('SlickRemoteModel requires both jQuery and jQuery jsonp library to be loaded.');\r\n    }\r\n    this.init();\r\n  }\r\n\r\n  init() { }\r\n\r\n  isDataLoaded(from: number, to: number) {\r\n    for (let i = from; i <= to; i++) {\r\n      if (this.data[i] === undefined || this.data[i] === null) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  clear() {\r\n    for (const key in this.data) {\r\n      delete this.data[key];\r\n    }\r\n    this.data.length = 0;\r\n  }\r\n\r\n  ensureData(from: number, to: number) {\r\n    if (this.req) {\r\n      this.req.abort();\r\n      for (let i = this.req.fromPage; i <= this.req.toPage; i++) {\r\n        this.data[i * this.PAGESIZE] = undefined;\r\n      }\r\n    }\r\n\r\n    if (from < 0) {\r\n      from = 0;\r\n    }\r\n\r\n    if (this.data.length > 0) {\r\n      to = Math.min(to, this.data.length - 1);\r\n    }\r\n\r\n    let fromPage = Math.floor(from / this.PAGESIZE);\r\n    let toPage = Math.floor(to / this.PAGESIZE);\r\n\r\n    while (this.data[fromPage * this.PAGESIZE] !== undefined && fromPage < toPage) {\r\n      fromPage++;\r\n    }\r\n    while (this.data[toPage * this.PAGESIZE] !== undefined && fromPage < toPage) {\r\n      toPage--;\r\n    }\r\n    if (fromPage > toPage || ((fromPage === toPage) && this.data[fromPage * this.PAGESIZE] !== undefined)) {\r\n      // TODO:  look-ahead\r\n      this.onDataLoaded.notify({ from, to });\r\n      return;\r\n    }\r\n\r\n    const recStart = (fromPage * this.PAGESIZE);\r\n    const recCount = (((toPage - fromPage) * this.PAGESIZE) + this.PAGESIZE);\r\n\r\n    const url = 'https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20rss'\r\n      + '(' + recStart + '%2C' + recCount + ')'\r\n      + '%20where%20url%3D%22http%3A%2F%2Frss.news.yahoo.com%2Frss%2Ftopstories%22'\r\n      + '&format=json';\r\n\r\n    if (this.h_request) {\r\n      window.clearTimeout(this.h_request);\r\n    }\r\n\r\n    this.h_request = window.setTimeout(() => {\r\n      for (let i = fromPage; i <= toPage; i++) {\r\n        this.data[i * this.PAGESIZE] = null; // null indicates a 'requested but not available yet'\r\n      }\r\n      this.onDataLoading.notify({ from, to });\r\n\r\n      this.req = window.$.jsonp({\r\n        url,\r\n        callbackParameter: 'callback',\r\n        cache: true,\r\n        success: (json: any) => {\r\n          this.onSuccess(json, recStart);\r\n        },\r\n        error: () => {\r\n          this.onError(fromPage, toPage);\r\n        }\r\n      });\r\n\r\n      this.req.fromPage = fromPage;\r\n      this.req.toPage = toPage;\r\n    }, 50);\r\n  }\r\n\r\n\r\n  onError(fromPage: number, toPage: number) {\r\n    alert('error loading pages ' + fromPage + ' to ' + toPage);\r\n  }\r\n\r\n  // SAMPLE DATA\r\n  //    {\r\n  //      \"query\": {\r\n  //        \"count\": 40,\r\n  //        \"created\": \"2015-03-03T00:34:00Z\",\r\n  //        \"lang\": \"en-US\",\r\n  //        \"results\": {\r\n  //          \"item\": [\r\n  //            {\r\n  //              \"title\": \"Netanyahu assails Iran deal, touts US-Israel ties\",\r\n  //              \"description\": \"<p><a href=\\\"http://news.yahoo.com/netanyahu-us-officials-face-off-iran-133539021--politics.html\\\"><img src=\\\"http://l2.yimg.com/bt/api/res/1.2/4eoBxbJStrbGAKbmBYOJfg--/YXBwaWQ9eW5ld3M7Zmk9ZmlsbDtoPTg2O3E9NzU7dz0xMzA-/http://media.zenfs.com/en_us/News/ap_webfeeds/2f3a20c2d46d9f096f0f6a706700d430.jpg\\\" width=\\\"130\\\" height=\\\"86\\\" alt=\\\"Israeli Prime Minister Benjamin Netanyahu addresses the 2015 American Israel Public Affairs Committee (AIPAC) Policy Conference in Washington, Monday, March 2, 2015. (AP Photo/Cliff Owen)\\\" align=\\\"left\\\" title=\\\"Israeli Prime Minister Benjamin Netanyahu addresses the 2015 American Israel Public Affairs Committee (AIPAC) Policy Conference in Washington, Monday, March 2, 2015. (AP Photo/Cliff Owen)\\\" border=\\\"0\\\" /></a>WASHINGTON (AP) \u2014 Seeking to lower tensions, Benjamin Netanyahu and U.S. officials cast their dispute over Iran as a family squabble on Monday, even as the Israeli leader claimed President Barack Obama did not \u2014 and could not \u2014 fully understand his nation&#039;s vital security concerns.</p><br clear=\\\"all\\\"/>\",\r\n  //              \"link\": \"http://news.yahoo.com/netanyahu-us-officials-face-off-iran-133539021--politics.html\",\r\n  //              \"pubDate\": \"Mon, 02 Mar 2015 19:17:36 -0500\",\r\n  //              \"source\": {\r\n  //                \"url\": \"http://www.ap.org/\",\r\n  //                \"content\": \"Associated Press\"\r\n  //              },\r\n  //              \"guid\": {\r\n  //                \"isPermaLink\": \"false\",\r\n  //                \"content\": \"netanyahu-us-officials-face-off-iran-133539021--politics\"\r\n  //              },\r\n  //              \"content\": {\r\n  //                \"height\": \"86\",\r\n  //                \"type\": \"image/jpeg\",\r\n  //                \"url\": \"http://l2.yimg.com/bt/api/res/1.2/4eoBxbJStrbGAKbmBYOJfg--/YXBwaWQ9eW5ld3M7Zmk9ZmlsbDtoPTg2O3E9NzU7dz0xMzA-/http://media.zenfs.com/en_us/News/ap_webfeeds/2f3a20c2d46d9f096f0f6a706700d430.jpg\",\r\n  //                \"width\": \"130\"\r\n  //              },\r\n  //              \"text\": {\r\n  //                \"type\": \"html\",\r\n  //                \"content\": \"<p><a href=\\\"http://news.yahoo.com/netanyahu-us-officials-face-off-iran-133539021--politics.html\\\"><img src=\\\"http://l2.yimg.com/bt/api/res/1.2/4eoBxbJStrbGAKbmBYOJfg--/YXBwaWQ9eW5ld3M7Zmk9ZmlsbDtoPTg2O3E9NzU7dz0xMzA-/http://media.zenfs.com/en_us/News/ap_webfeeds/2f3a20c2d46d9f096f0f6a706700d430.jpg\\\" width=\\\"130\\\" height=\\\"86\\\" alt=\\\"Israeli Prime Minister Benjamin Netanyahu addresses the 2015 American Israel Public Affairs Committee (AIPAC) Policy Conference in Washington, Monday, March 2, 2015. (AP Photo/Cliff Owen)\\\" align=\\\"left\\\" title=\\\"Israeli Prime Minister Benjamin Netanyahu addresses the 2015 American Israel Public Affairs Committee (AIPAC) Policy Conference in Washington, Monday, March 2, 2015. (AP Photo/Cliff Owen)\\\" border=\\\"0\\\" /></a>WASHINGTON (AP) \u2014 Seeking to lower tensions, Benjamin Netanyahu and U.S. officials cast their dispute over Iran as a family squabble on Monday, even as the Israeli leader claimed President Barack Obama did not \u2014 and could not \u2014 fully understand his nation&#039;s vital security concerns.</p><br clear=\\\"all\\\"/>\"\r\n  //              },\r\n  //              \"credit\": {\r\n  //                \"role\": \"publishing company\"\r\n  //              }\r\n  //            },\r\n  //            {... },\r\n  //            {... },\r\n  //          ]\r\n  //        }\r\n  //      }\r\n  //    }\r\n\r\n  onSuccess(json: any, recStart: number) {\r\n    let recEnd = recStart;\r\n    if (json.query.count > 0) {\r\n      const results = json.query.results.item;\r\n      recEnd = recStart + results.length;\r\n      this.data.length = 100;// Math.min(parseInt(results.length),1000); // limitation of the API\r\n\r\n      for (let i = 0; i < results.length; i++) {\r\n        const item = results[i];\r\n\r\n        item.pubDate = new Date(item.pubDate);\r\n\r\n        this.data[recStart + i] = { index: recStart + i };\r\n        this.data[recStart + i].pubDate = item.pubDate;\r\n        this.data[recStart + i].title = item.title;\r\n        this.data[recStart + i].url = item.link;\r\n        this.data[recStart + i].text = item.description;\r\n      }\r\n    }\r\n    this.req = null;\r\n\r\n    this.onDataLoaded.notify({ from: recStart, to: recEnd });\r\n  }\r\n\r\n\r\n  reloadData(from: number, to: number) {\r\n    for (let i = from; i <= to; i++) {\r\n      delete this.data[i];\r\n    }\r\n    this.ensureData(from, to);\r\n  }\r\n\r\n\r\n  // return {\r\n  //   // properties\r\n  //   \"data\": data,\r\n\r\n  //   // methods\r\n  //   \"clear\": clear,\r\n  //   \"isDataLoaded\": isDataLoaded,\r\n  //   \"ensureData\": ensureData,\r\n  //   \"reloadData\": reloadData,\r\n\r\n  //   // events\r\n  //   \"onDataLoading\": onDataLoading,\r\n  //   \"onDataLoaded\": onDataLoaded\r\n  // };\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  window.Slick.Data = window.Slick.Data || {};\r\n  window.Slick.Data.RemoteModelYahoo = SlickRemoteModelYahoo;\r\n}", "import type { ColumnSort } from './models/index.js';\r\n\r\n/***\r\n * A sample AJAX data store implementation.\r\n * Right now, it's hooked up to load search results from Octopart, but can\r\n * easily be extended to support any JSONP-compatible backend that accepts paging parameters.\r\n */\r\nexport class SlickRemoteModel {\r\n  // private\r\n  protected PAGESIZE = 50;\r\n  protected data: any = { length: 0 };\r\n  protected searchstr = '';\r\n  protected sortcol: ColumnSort | null = null;\r\n  protected sortdir = 1;\r\n  protected h_request?: number;\r\n  protected req: any = null; // ajax request\r\n\r\n  // events\r\n  onDataLoading = new Slick.Event('onDataLoading');\r\n  onDataLoaded = new Slick.Event('onDataLoaded');\r\n\r\n  constructor() {\r\n    if (!(window.$ || window.jQuery) || !window.$.jsonp) {\r\n      throw new Error('SlickRemoteModel requires both jQuery and jQuery jsonp library to be loaded.');\r\n    }\r\n    this.init();\r\n  }\r\n\r\n  init() { }\r\n\r\n  isDataLoaded(from: number, to: number) {\r\n    for (let i = from; i <= to; i++) {\r\n      if (this.data[i] === undefined || this.data[i] === null) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  clear() {\r\n    for (const key in this.data) {\r\n      delete this.data[key];\r\n    }\r\n    this.data.length = 0;\r\n  }\r\n\r\n  ensureData(from: number, to: number) {\r\n    if (this.req) {\r\n      this.req.abort();\r\n      for (let i = this.req.fromPage; i <= this.req.toPage; i++) {\r\n        this.data[i * this.PAGESIZE] = undefined;\r\n      }\r\n    }\r\n\r\n    if (from < 0) {\r\n      from = 0;\r\n    }\r\n\r\n    if (this.data.length > 0) {\r\n      to = Math.min(to, this.data.length - 1);\r\n    }\r\n\r\n    let fromPage = Math.floor(from / this.PAGESIZE);\r\n    let toPage = Math.floor(to / this.PAGESIZE);\r\n\r\n    while (this.data[fromPage * this.PAGESIZE] !== undefined && fromPage < toPage) {\r\n      fromPage++;\r\n    }\r\n\r\n    while (this.data[toPage * this.PAGESIZE] !== undefined && fromPage < toPage) {\r\n      toPage--;\r\n    }\r\n\r\n    if (fromPage > toPage || ((fromPage === toPage) && this.data[fromPage * this.PAGESIZE] !== undefined)) {\r\n      // TODO:  look-ahead\r\n      this.onDataLoaded.notify({ from, to });\r\n      return;\r\n    }\r\n\r\n    let url = 'http://octopart.com/api/v3/parts/search?apikey=68b25f31&include[]=short_description&show[]=uid&show[]=manufacturer&show[]=mpn&show[]=brand&show[]=octopart_url&show[]=short_description&q=' + this.searchstr + '&start=' + (fromPage * this.PAGESIZE) + '&limit=' + (((toPage - fromPage) * this.PAGESIZE) + this.PAGESIZE);\r\n\r\n    if (this.sortcol !== null) {\r\n      url += ('&sortby=' + this.sortcol + ((this.sortdir > 0) ? '+asc' : '+desc'));\r\n    }\r\n\r\n    if (this.h_request) {\r\n      window.clearTimeout(this.h_request);\r\n    }\r\n\r\n    this.h_request = window.setTimeout(() => {\r\n      for (let i = fromPage; i <= toPage; i++) {\r\n        this.data[i * this.PAGESIZE] = null; // null indicates a 'requested but not available yet'\r\n      }\r\n      this.onDataLoading.notify({ from, to });\r\n\r\n      this.req = window.$.jsonp({\r\n        url,\r\n        callbackParameter: 'callback',\r\n        cache: true,\r\n        success: this.onSuccess,\r\n        error: () => this.onError(fromPage, toPage)\r\n      });\r\n      this.req.fromPage = fromPage;\r\n      this.req.toPage = toPage;\r\n    }, 50);\r\n  }\r\n\r\n  protected onError(fromPage: number | string, toPage: number | string) {\r\n    alert('error loading pages ' + fromPage + ' to ' + toPage);\r\n  }\r\n\r\n  protected onSuccess(resp: any) {\r\n    const from = resp.request.start, to = from + resp.results.length;\r\n    this.data.length = Math.min(parseInt(resp.hits), 1000); // limitation of the API\r\n\r\n    for (let i = 0; i < resp.results.length; i++) {\r\n      const item = resp.results[i].item;\r\n      this.data[from + i] = item;\r\n      this.data[from + i].index = from + i;\r\n    }\r\n\r\n    this.req = null;\r\n    this.onDataLoaded.notify({ from, to });\r\n  }\r\n\r\n  reloadData(from: number, to: number) {\r\n    for (let i = from; i <= to; i++) {\r\n      delete this.data[i];\r\n    }\r\n    this.ensureData(from, to);\r\n  }\r\n\r\n\r\n  setSort(column: ColumnSort, dir: number) {\r\n    this.sortcol = column;\r\n    this.sortdir = dir;\r\n    this.clear();\r\n  }\r\n\r\n  setSearch(str: string) {\r\n    this.searchstr = str;\r\n    this.clear();\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  window.Slick.Data = window.Slick.Data || {};\r\n  window.Slick.Data.RemoteModel = SlickRemoteModel;\r\n}"],
  "mappings": "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",
  "names": ["event", "BindingEventService", "SlickEvent", "Utils", "event", "BindingEventService", "SlickEvent", "Utils", "event", "BindingEventService", "SlickEvent", "Utils", "BindingEventService", "SlickGlobalEditorLock", "Utils", "SortDirectionNumber", "Utils", "event", "keyCode", "SlickEvent", "Utils", "SlickEvent", "SlickRange", "Utils", "event", "BindingEventService", "SlickEvent", "SlickEventData", "EventHandler", "Utils", "Utils", "Utils", "event", "SlickEvent", "SlickEventHandler", "SlickRange", "Draggable", "SlickCellRangeDecorator", "Utils", "SlickEvent", "SlickEventData", "SlickRange", "SlickCellRangeSelector", "Utils", "BindingEventService", "SlickEventHandler", "Utils", "BindingEventService", "SlickEvent", "SlickEventData", "EventHandler", "Utils", "SlickEvent", "SlickEventHandler", "Utils", "SlickEventHandler", "Utils", "BindingEventService", "SlickEvent", "SlickEventHandler", "Utils", "event", "BindingEventService", "SlickEvent", "EventHandler", "Utils", "BindingEventService", "SlickEvent", "SlickEventHandler", "Utils", "event", "item", "BindingEventService", "SlickEvent", "Utils", "event", "SlickEvent", "SlickEventHandler", "Utils", "SlickEvent", "SlickEventHandler", "Utils", "Draggable", "keyCode", "SlickCellRangeDecorator", "SlickCellRangeSelector", "SlickEvent", "SlickEventData", "SlickEventHandler", "SlickRange", "Utils", "SlickEvent", "Utils", "keyCode", "SlickGroup", "Utils", "SlickEvent", "SlickEventData", "SlickGroup", "SlickGroupTotals", "Utils", "SlickGroupItemMetadataProvider", "keyCode", "Utils", "Utils", "BindingEventService", "ColAutosizeMode", "SlickEvent", "SlickEventData", "GlobalEditorLock", "GridAutosizeColsMode", "keyCode", "preClickClassName", "SlickRange", "RowSelectionMode", "ValueFilterMode", "Utils", "WidthEvalMode", "Draggable", "MouseWheel", "Resizable", "event", "row", "topHeightOffset"]
}
