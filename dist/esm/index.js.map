{
  "version": 3,
  "sources": ["../../src/slick.core.ts", "../../src/slick.compositeeditor.ts", "../../src/slick.groupitemmetadataprovider.ts", "../../src/slick.dataview.ts", "../../src/slick.editors.ts", "../../src/slick.formatters.ts", "../../src/slick.interactions.ts", "../../src/slick.grid.ts", "../../src/controls/slick.columnpicker.ts", "../../src/controls/slick.gridmenu.ts", "../../src/controls/slick.pager.ts", "../../src/plugins/slick.autotooltips.ts", "../../src/plugins/slick.cellcopymanager.ts", "../../src/plugins/slick.cellexternalcopymanager.ts", "../../src/plugins/slick.cellmenu.ts", "../../src/plugins/slick.cellrangedecorator.js", "../../src/plugins/slick.cellrangeselector.js", "../../src/plugins/slick.cellselectionmodel.js", "../../src/plugins/slick.checkboxselectcolumn.js", "../../src/plugins/slick.contextmenu.ts", "../../src/plugins/slick.crossgridrowmovemanager.js", "../../src/plugins/slick.customtooltip.js", "../../src/plugins/slick.draggablegrouping.js", "../../src/plugins/slick.headerbuttons.ts", "../../src/plugins/slick.headermenu.ts", "../../src/plugins/slick.resizer.js", "../../src/plugins/slick.rowdetailview.js", "../../src/plugins/slick.rowmovemanager.js", "../../src/plugins/slick.rowselectionmodel.js", "../../src/plugins/slick.state.js"],
  "sourcesContent": ["/**\n * Contains core SlickGrid classes.\n * @module Core\n * @namespace Slick\n */\n\nimport type { EditController, ElementEventListener, Handler, InferDOMType } from './models/index';\n\n/**\n * An event object for passing data to event handlers and letting them control propagation.\n * <p>This is pretty much identical to how W3C and jQuery implement events.</p>\n * @class EventData\n * @constructor\n */\nexport class SlickEventData {\n  protected _isPropagationStopped = false;\n  protected _isImmediatePropagationStopped = false;\n  protected _isDefaultPrevented = false;\n  protected returnValues: string[] = [];\n  protected returnValue = undefined;\n  protected target?: HTMLElement;\n  protected nativeEvent;\n  protected arguments_;\n\n  constructor(protected event?: Event | null, protected args?: any) {\n    this.nativeEvent = event;\n    this.arguments_ = args;\n\n    // when we already have an event, we want to keep some of the event properties\n    // looping through some props is the only way to keep and sync these properties to the returned EventData\n    if (event) {\n      const eventProps = [\n        'altKey', 'ctrlKey', 'metaKey', 'shiftKey', 'key', 'keyCode',\n        'clientX', 'clientY', 'offsetX', 'offsetY', 'pageX', 'pageY',\n        'bubbles', 'type', 'which', 'x', 'y'\n      ];\n      for (let key of eventProps) {\n        this[key] = event[key];\n      }\n    }\n    this.target = this.nativeEvent ? this.nativeEvent.target : undefined;\n  }\n\n  /**\n   * Stops event from propagating up the DOM tree.\n   * @method stopPropagation\n   */\n  stopPropagation() {\n    this._isPropagationStopped = true;\n    if (this.nativeEvent) {\n      this.nativeEvent.stopPropagation();\n    }\n  }\n\n  /**\n   * Returns whether stopPropagation was called on this event object.\n   * @method isPropagationStopped\n   * @return {Boolean}\n   */\n  isPropagationStopped() {\n    return this._isPropagationStopped;\n  }\n\n  /**\n   * Prevents the rest of the handlers from being executed.\n   * @method stopImmediatePropagation\n   */\n  stopImmediatePropagation() {\n    this._isImmediatePropagationStopped = true;\n    if (this.nativeEvent) {\n      this.nativeEvent.stopImmediatePropagation();\n    }\n  };\n\n  /**\n   * Returns whether stopImmediatePropagation was called on this event object.\\\n   * @method isImmediatePropagationStopped\n   * @return {Boolean}\n   */\n  isImmediatePropagationStopped() {\n    return this._isImmediatePropagationStopped;\n  };\n\n  getNativeEvent() {\n    return this.nativeEvent;\n  }\n\n  preventDefault() {\n    if (this.nativeEvent) {\n      this.nativeEvent.preventDefault();\n    }\n    this._isDefaultPrevented = true;\n  }\n\n  isDefaultPrevented() {\n    if (this.nativeEvent) {\n      return this.nativeEvent.defaultPrevented;\n    }\n    return this._isDefaultPrevented;\n  }\n\n  addReturnValue(value) {\n    this.returnValues.push(value);\n    if (this.returnValue === undefined && value !== undefined) {\n      this.returnValue = value;\n    }\n  }\n\n  getReturnValue() {\n    return this.returnValue;\n  }\n\n  getArguments() {\n    return this.arguments_;\n  }\n}\n\n/**\n * A simple publisher-subscriber implementation.\n * @class Event\n * @constructor\n */\nexport class SlickEvent<ArgType = any> {\n  protected handlers: Handler<ArgType>[] = [];\n\n  /**\n   * Adds an event handler to be called when the event is fired.\n   * <p>Event handler will receive two arguments - an <code>EventData</code> and the <code>data</code>\n   * object the event was fired with.<p>\n   * @method subscribe\n   * @param fn {Function} Event handler.\n   */\n  subscribe(fn: Handler<ArgType>) {\n    this.handlers.push(fn);\n  }\n\n  /**\n   * Removes an event handler added with <code>subscribe(fn)</code>.\n   * @method unsubscribe\n   * @param fn {Function} Event handler to be removed.\n   */\n  unsubscribe(fn?: Handler<ArgType>) {\n    for (let i = this.handlers.length - 1; i >= 0; i--) {\n      if (this.handlers[i] === fn) {\n        this.handlers.splice(i, 1);\n      }\n    }\n  }\n\n  /**\n   * Fires an event notifying all subscribers.\n   * @method notify\n   * @param args {Object} Additional data object to be passed to all handlers.\n   * @param e {EventData}\n   *      Optional.\n   *      An <code>EventData</code> object to be passed to all handlers.\n   *      For DOM events, an existing W3C/jQuery event object can be passed in.\n   * @param scope {Object}\n   *      Optional.\n   *      The scope (\"this\") within which the handler will be executed.\n   *      If not specified, the scope will be set to the <code>Event</code> instance.\n   */\n  notify(args: ArgType, e?: SlickEventData | Event | null, scope?: any) {\n    if (!(e instanceof SlickEventData)) {\n      e = new SlickEventData(e, args);\n    }\n    scope = scope || this;\n\n    for (let i = 0; i < this.handlers.length && !(e.isPropagationStopped() || e.isImmediatePropagationStopped()); i++) {\n      const returnValue = this.handlers[i].call(scope, e as SlickEvent | SlickEventData, args);\n      e.addReturnValue(returnValue);\n    }\n\n    return e;\n  }\n}\n\nexport class SlickEventHandler<ArgType = any> {\n  protected handlers: Array<{ event: SlickEvent; handler: Handler<ArgType>; }> = [];\n\n  subscribe(event: SlickEvent, handler: Handler<ArgType>) {\n    this.handlers.push({ event, handler });\n    event.subscribe(handler);\n\n    return this;  // allow chaining\n  }\n\n  unsubscribe(event: SlickEvent, handler: Handler<ArgType>) {\n    let i = this.handlers.length;\n    while (i--) {\n      if (this.handlers[i].event === event &&\n        this.handlers[i].handler === handler) {\n        this.handlers.splice(i, 1);\n        event.unsubscribe(handler);\n        return;\n      }\n    }\n\n    return this;  // allow chaining\n  }\n\n  unsubscribeAll() {\n    let i = this.handlers.length;\n    while (i--) {\n      this.handlers[i].event.unsubscribe(this.handlers[i].handler);\n    }\n    this.handlers = [];\n\n    return this;  // allow chaining\n  }\n}\n\n/**\n * A structure containing a range of cells.\n * @class Range\n * @constructor\n * @param fromRow {Integer} Starting row.\n * @param fromCell {Integer} Starting cell.\n * @param toRow {Integer} Optional. Ending row. Defaults to <code>fromRow</code>.\n * @param toCell {Integer} Optional. Ending cell. Defaults to <code>fromCell</code>.\n */\nexport class SlickRange {\n  fromRow: number;\n  fromCell: number;\n  toCell: number;\n  toRow: number;\n\n  constructor(fromRow: number, fromCell: number, toRow: number, toCell: number) {\n    if (toRow === undefined && toCell === undefined) {\n      toRow = fromRow;\n      toCell = fromCell;\n    }\n\n    /**\n     * @property fromRow\n     * @type {Integer}\n     */\n    this.fromRow = Math.min(fromRow, toRow);\n\n    /**\n     * @property fromCell\n     * @type {Integer}\n     */\n    this.fromCell = Math.min(fromCell, toCell);\n\n    /**\n     * @property toRow\n     * @type {Integer}\n     */\n    this.toRow = Math.max(fromRow, toRow);\n\n    /**\n     * @property toCell\n     * @type {Integer}\n     */\n    this.toCell = Math.max(fromCell, toCell);\n  }\n\n\n  /**\n   * Returns whether a range represents a single row.\n   * @method isSingleRow\n   * @return {Boolean}\n   */\n  isSingleRow() {\n    return this.fromRow == this.toRow;\n  }\n\n  /**\n   * Returns whether a range represents a single cell.\n   * @method isSingleCell\n   * @return {Boolean}\n   */\n  isSingleCell() {\n    return this.fromRow == this.toRow && this.fromCell == this.toCell;\n  }\n\n  /**\n   * Returns whether a range contains a given cell.\n   * @method contains\n   * @param row {Integer}\n   * @param cell {Integer}\n   * @return {Boolean}\n   */\n  contains(row: number, cell: number) {\n    return row >= this.fromRow && row <= this.toRow &&\n      cell >= this.fromCell && cell <= this.toCell;\n  }\n\n  /**\n   * Returns a readable representation of a range.\n   * @method toString\n   * @return {String}\n   */\n  toString() {\n    if (this.isSingleCell()) {\n      return `(${this.fromRow}:${this.fromCell})`;\n    }\n    else {\n      return `(${this.fromRow}:${this.fromCell} - ${this.toRow}:${this.toCell})`;\n    }\n  };\n}\n\n\n/**\n * A base class that all special / non-data rows (like Group and GroupTotals) derive from.\n * @class NonDataItem\n * @constructor\n */\nexport class SlickNonDataItem {\n  __nonDataRow = true;\n}\n\n\n/**\n * Information about a group of rows.\n * @class Group\n * @extends Slick.NonDataItem\n * @constructor\n */\nexport class SlickGroup extends SlickNonDataItem {\n  __group = true;\n\n  /**\n   * Grouping level, starting with 0.\n   * @property level\n   * @type {Number}\n   */\n  level = 0;\n\n  /**\n   * Number of rows in the group.\n   * @property count\n   * @type {Integer}\n   */\n  count = 0;\n\n  /**\n   * Grouping value.\n   * @property value\n   * @type {Object}\n   */\n  value = null;\n\n  /**\n   * Formatted display value of the group.\n   * @property title\n   * @type {String}\n   */\n  title: string | null = null;\n\n  /**\n   * Whether a group is collapsed.\n   * @property collapsed\n   * @type {Boolean}\n   */\n  collapsed = false;\n\n  /**\n   * Whether a group selection checkbox is checked.\n   * @property selectChecked\n   * @type {Boolean}\n   */\n  selectChecked = false;\n\n  /**\n   * GroupTotals, if any.\n   * @property totals\n   * @type {GroupTotals}\n   */\n  totals: SlickGroupTotals = null as any;\n\n  /**\n   * Rows that are part of the group.\n   * @property rows\n   * @type {Array}\n   */\n  rows: number[] = [];\n\n  /**\n   * Sub-groups that are part of the group.\n   * @property groups\n   * @type {Array}\n   */\n  groups: any[] = null as any;\n\n  /**\n   * A unique key used to identify the group.  This key can be used in calls to DataView\n   * collapseGroup() or expandGroup().\n   * @property groupingKey\n   * @type {Object}\n   */\n  groupingKey: any = null;\n\n  constructor() {\n    super();\n  }\n  /**\n   * Compares two Group instances.\n   * @method equals\n   * @return {Boolean}\n   * @param group {Group} Group instance to compare to.\n   */\n  equals(group: SlickGroup): boolean {\n    return this.value === group.value &&\n      this.count === group.count &&\n      this.collapsed === group.collapsed &&\n      this.title === group.title;\n  };\n}\n\n/**\n * Information about group totals.\n * An instance of GroupTotals will be created for each totals row and passed to the aggregators\n * so that they can store arbitrary data in it.  That data can later be accessed by group totals\n * formatters during the display.\n * @class GroupTotals\n * @extends Slick.NonDataItem\n * @constructor\n */\nexport class SlickGroupTotals extends SlickNonDataItem {\n  __groupTotals = true;\n\n  /**\n   * Parent Group.\n   * @param group\n   * @type {Group}\n   */\n  group: SlickGroup = null as any;\n\n  /**\n   * Whether the totals have been fully initialized / calculated.\n   * Will be set to false for lazy-calculated group totals.\n   * @param initialized\n   * @type {Boolean}\n   */\n  initialized = false;\n\n  constructor() {\n    super();\n  }\n}\n\n/**\n * A locking helper to track the active edit controller and ensure that only a single controller\n * can be active at a time.  This prevents a whole class of state and validation synchronization\n * issues.  An edit controller (such as SlickGrid) can query if an active edit is in progress\n * and attempt a commit or cancel before proceeding.\n * @class EditorLock\n * @constructor\n */\nexport class EditorLock {\n  activeEditController: any = null;\n\n  /**\n   * Returns true if a specified edit controller is active (has the edit lock).\n   * If the parameter is not specified, returns true if any edit controller is active.\n   * @method isActive\n   * @param editController {EditController}\n   * @return {Boolean}\n   */\n  isActive(editController?: EditController): boolean {\n    return (editController ? this.activeEditController === editController : this.activeEditController !== null);\n  };\n\n  /**\n   * Sets the specified edit controller as the active edit controller (acquire edit lock).\n   * If another edit controller is already active, and exception will be throw new Error(.\n   * @method activate\n   * @param editController {EditController} edit controller acquiring the lock\n   */\n  activate(editController) {\n    if (editController === this.activeEditController) { // already activated?\n      return;\n    }\n    if (this.activeEditController !== null) {\n      throw new Error(\"SlickGrid.EditorLock.activate: an editController is still active, can't activate another editController\");\n    }\n    if (!editController.commitCurrentEdit) {\n      throw new Error(\"SlickGrid.EditorLock.activate: editController must implement .commitCurrentEdit()\");\n    }\n    if (!editController.cancelCurrentEdit) {\n      throw new Error(\"SlickGrid.EditorLock.activate: editController must implement .cancelCurrentEdit()\");\n    }\n    this.activeEditController = editController;\n  };\n\n  /**\n   * Unsets the specified edit controller as the active edit controller (release edit lock).\n   * If the specified edit controller is not the active one, an exception will be throw new Error(.\n   * @method deactivate\n   * @param editController {EditController} edit controller releasing the lock\n   */\n  deactivate(editController) {\n    if (!this.activeEditController) {\n      return;\n    }\n    if (this.activeEditController !== editController) {\n      throw new Error(\"SlickGrid.EditorLock.deactivate: specified editController is not the currently active one\");\n    }\n    this.activeEditController = null;\n  };\n\n  /**\n   * Attempts to commit the current edit by calling \"commitCurrentEdit\" method on the active edit\n   * controller and returns whether the commit attempt was successful (commit may fail due to validation\n   * errors, etc.).  Edit controller's \"commitCurrentEdit\" must return true if the commit has succeeded\n   * and false otherwise.  If no edit controller is active, returns true.\n   * @method commitCurrentEdit\n   * @return {Boolean}\n   */\n  commitCurrentEdit(): boolean {\n    return (this.activeEditController ? this.activeEditController.commitCurrentEdit() : true);\n  };\n\n  /**\n   * Attempts to cancel the current edit by calling \"cancelCurrentEdit\" method on the active edit\n   * controller and returns whether the edit was successfully cancelled.  If no edit controller is\n   * active, returns true.\n   * @method cancelCurrentEdit\n   * @return {Boolean}\n   */\n  cancelCurrentEdit(): boolean {\n    return (this.activeEditController ? this.activeEditController.cancelCurrentEdit() : true);\n  };\n}\n\nfunction regexSanitizer(dirtyHtml) {\n  return dirtyHtml.replace(/(\\b)(on[a-z]+)(\\s*)=|javascript:([^>]*)[^>]*|(<\\s*)(\\/*)script([<>]*).*(<\\s*)(\\/*)script(>*)|(&lt;)(\\/*)(script|script defer)(.*)(&gt;|&gt;\">)/gi, '');\n}\n\nfunction calculateAvailableSpace(element: HTMLElement) {\n  let bottom = 0, top = 0, left = 0, right = 0;\n\n  const windowHeight = window.innerHeight || 0;\n  const windowWidth = window.innerWidth || 0;\n  const scrollPosition = windowScrollPosition();\n  const pageScrollTop = scrollPosition.top;\n  const pageScrollLeft = scrollPosition.left;\n  const elmOffset = offset(element);\n\n  if (elmOffset) {\n    const elementOffsetTop = elmOffset.top || 0;\n    const elementOffsetLeft = elmOffset.left || 0;\n    top = elementOffsetTop - pageScrollTop;\n    bottom = windowHeight - (elementOffsetTop - pageScrollTop);\n    left = elementOffsetLeft - pageScrollLeft;\n    right = windowWidth - (elementOffsetLeft - pageScrollLeft);\n  }\n\n  return { top, bottom, left, right };\n}\n\n/**\n * Create a DOM Element with any optional attributes or properties.\n * It will only accept valid DOM element properties that `createElement` would accept.\n * For example: `createDomElement('div', { className: 'my-css-class' })`,\n * for style or dataset you need to use nested object `{ style: { display: 'none' }}\n * The last argument is to optionally append the created element to a parent container element.\n * @param {String} tagName - html tag\n * @param {Object} options - element properties\n * @param {[HTMLElement]} appendToParent - parent element to append to\n */\nfunction createDomElement<T extends keyof HTMLElementTagNameMap, K extends keyof HTMLElementTagNameMap[T]>(\n  tagName: T,\n  elementOptions?: null | { [P in K]: InferDOMType<HTMLElementTagNameMap[T][P]> },\n  appendToParent?: Element\n): HTMLElementTagNameMap[T] {\n  const elm = document.createElement<T>(tagName);\n\n  if (elementOptions) {\n    Object.keys(elementOptions).forEach((elmOptionKey) => {\n      const elmValue = elementOptions[elmOptionKey as keyof typeof elementOptions];\n      if (typeof elmValue === 'object') {\n        Object.assign(elm[elmOptionKey as K] as object, elmValue);\n      } else {\n        elm[elmOptionKey as K] = (elementOptions as any)[elmOptionKey as keyof typeof elementOptions];\n      }\n    });\n  }\n  if (appendToParent?.appendChild) {\n    appendToParent.appendChild(elm);\n  }\n  return elm;\n}\n\nfunction emptyElement(element: HTMLElement) {\n  if (element?.firstChild) {\n    while (element.firstChild) {\n      if (element.lastChild) {\n        element.removeChild(element.lastChild);\n      }\n    }\n  }\n  return element;\n}\n\nfunction innerSize(elm: HTMLElement, type: 'height' | 'width') {\n  let size = 0;\n\n  if (elm) {\n    const clientSize = type === 'height' ? 'clientHeight' : 'clientWidth';\n    const sides = type === 'height' ? ['top', 'bottom'] : ['left', 'right'];\n    size = elm[clientSize];\n    for (const side of sides) {\n      const sideSize = (parseFloat(getElementProp(elm, `padding-${side}`) || '') || 0);\n      size -= sideSize;\n    }\n  }\n  return size;\n}\n\nfunction getElementProp(elm: HTMLElement & { getComputedStyle?: () => CSSStyleDeclaration }, property: string) {\n  if (elm?.getComputedStyle) {\n    return window.getComputedStyle(elm, null).getPropertyValue(property);\n  }\n  return null;\n}\n\nfunction isEmptyObject(obj: any) {\n  if (obj === null || obj === undefined) {\n    return true;\n  }\n  return Object.entries(obj).length === 0;\n}\n\nfunction noop() { }\n\nfunction offset(el: HTMLElement) {\n  if (!el || !el.getBoundingClientRect) {\n    return undefined;\n  }\n  const box = el.getBoundingClientRect();\n  const docElem = document.documentElement;\n\n  return {\n    top: box.top + window.pageYOffset - docElem.clientTop,\n    left: box.left + window.pageXOffset - docElem.clientLeft\n  };\n}\n\nfunction windowScrollPosition() {\n  return {\n    left: window.pageXOffset || document.documentElement.scrollLeft || 0,\n    top: window.pageYOffset || document.documentElement.scrollTop || 0,\n  };\n}\n\nfunction width(el: HTMLElement, value?: number | string): number | void {\n  if (!el || !el.getBoundingClientRect) return;\n  if (value === undefined) {\n    return el.getBoundingClientRect().width;\n  }\n  setStyleSize(el, 'width', value);\n}\n\nfunction height(el: HTMLElement, value?: number | string): number | void {\n  if (!el) return;\n  if (value === undefined) {\n    return el.getBoundingClientRect().height;\n  }\n  setStyleSize(el, 'height', value);\n}\n\nfunction setStyleSize(el: HTMLElement, style: string, val?: number | string | Function) {\n  if (typeof val === 'function') {\n    val = val();\n  } else if (typeof val === 'string') {\n    el.style[style] = val;\n  } else {\n    el.style[style] = val + 'px';\n  }\n}\n\nfunction contains(parent: HTMLElement, child: HTMLElement) {\n  if (!parent || !child) {\n    return false;\n  }\n\n  const parentList = parents(child);\n  return !parentList.every(function (p) {\n    if (parent == p) {\n      return false;\n    }\n    return true;\n  });\n}\n\nfunction isHidden(el: HTMLElement) {\n  return el.offsetWidth === 0 && el.offsetHeight === 0;\n}\n\nfunction parents(el: HTMLElement | ParentNode, selector?: string) {\n  const parents: Array<HTMLElement | ParentNode> = [];\n  const visible = selector == \":visible\";\n  const hidden = selector == \":hidden\";\n\n  while ((el = el.parentNode as ParentNode) && el !== document) {\n    if (!el || !el.parentNode) {\n      break;\n    }\n    if (hidden) {\n      if (isHidden(el as HTMLElement)) {\n        parents.push(el);\n      }\n    } else if (visible) {\n      if (!isHidden(el as HTMLElement)) {\n        parents.push(el);\n      }\n    } else if (!selector || (el as any).matches(selector)) {\n      parents.push(el);\n    }\n  }\n  return parents;\n}\n\nfunction toFloat(value: string | number) {\n  let x = parseFloat(value as string);\n  if (isNaN(x)) {\n    return 0;\n  }\n  return x;\n}\n\nfunction show(el: HTMLElement | HTMLElement[], type = '') {\n  if (Array.isArray(el)) {\n    el.forEach((e) => e.style.display = type)\n  } else {\n    el.style.display = type;\n  }\n}\n\nfunction hide(el: HTMLElement | HTMLElement[]) {\n  if (Array.isArray(el)) {\n    el.forEach(function (e) {\n      e.style.display = 'none';\n    });\n  } else {\n    el.style.display = 'none';\n  }\n}\n\nfunction slideUp(el: HTMLElement | HTMLElement[], callback: Function) {\n  return slideAnimation(el, 'slideUp', callback);\n}\n\nfunction slideDown(el: HTMLElement | HTMLElement[], callback: Function) {\n  return slideAnimation(el, 'slideDown', callback);\n}\n\nfunction slideAnimation(el: HTMLElement | HTMLElement[], slideDirection: 'slideDown' | 'slideUp', callback: Function) {\n  if ((window as any).jQuery !== undefined) {\n    (window as any).jQuery(el)[slideDirection]('fast', callback);\n    return;\n  }\n  (slideDirection === 'slideUp') ? hide(el) : show(el);\n  callback();\n}\n\n// jQuery's extend\nlet getProto = Object.getPrototypeOf;\nlet class2type: any = {};\nlet toString = class2type.toString;\nlet hasOwn = class2type.hasOwnProperty;\nlet fnToString = hasOwn.toString;\nlet ObjectFunctionString = fnToString.call(Object);\nfunction isFunction(obj: any) {\n  return typeof obj === 'function' && typeof obj.nodeType !== 'number' &&\n    typeof obj.item !== 'function';\n}\n\nfunction isPlainObject(obj: any) {\n  let proto, Ctor;\n  if (!obj || toString.call(obj) !== '[object Object]') {\n    return false;\n  }\n\n  proto = getProto(obj);\n  if (!proto) {\n    return true;\n  }\n  Ctor = hasOwn.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor === 'function' && fnToString.call(Ctor) === ObjectFunctionString;\n}\n\nfunction extend<T = any>(...args: any[]): T {\n  let options, name, src, copy, copyIsArray, clone,\n    target = args[0],\n    i = 1,\n    length = args.length,\n    deep = false;\n\n  if (typeof target === 'boolean') {\n    deep = target;\n    target = args[i] || {};\n    i++;\n  } else {\n    target = target || {}\n  }\n  if (typeof target !== 'object' && !isFunction(target)) {\n    target = {};\n  }\n  if (i === length) {\n    // @ts-ignore\n    target = this;\n    i--;\n  }\n  for (; i < length; i++) {\n    if ((options = args[i]) != null) {\n      for (name in options) {\n        copy = options[name];\n        if (name === \"__proto__\" || target === copy) {\n          continue;\n        }\n        if (deep && copy && (isPlainObject(copy) ||\n          (copyIsArray = Array.isArray(copy)))) {\n          src = target[name];\n          if (copyIsArray && !Array.isArray(src)) {\n            clone = [];\n          } else if (!copyIsArray && !isPlainObject(src)) {\n            clone = {};\n          } else {\n            clone = src;\n          }\n          copyIsArray = false;\n          target[name] = extend(deep, clone, copy);\n        } else if (copy !== undefined) {\n          target[name] = copy;\n        }\n      }\n    }\n  }\n  return target as T;\n}\n\n/**\n * A simple binding event service to keep track of all JavaScript events with callback listeners,\n * it allows us to unbind event(s) and their listener(s) by calling a simple unbind method call.\n * Unbinding is a necessary step to make sure that all event listeners are removed to avoid memory leaks when destroing the grid\n */\nexport class BindingEventService {\n  protected boundedEvents: ElementEventListener[] = [];\n\n  destroy() {\n    this.unbindAll();\n    this.boundedEvents = [];\n  }\n\n  /** Bind an event listener to any element */\n  bind(element: Element, eventName: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) {\n    element.addEventListener(eventName, listener, options);\n    this.boundedEvents.push({ element: element, eventName, listener });\n  }\n\n  /** Unbind all will remove every every event handlers that were bounded earlier */\n  unbind(element: Element, eventName: string, listener: EventListenerOrEventListenerObject) {\n    if (element && element.removeEventListener) {\n      element.removeEventListener(eventName, listener);\n    }\n  }\n\n  unbindByEventName(element, eventName) {\n    const boundedEvent = this.boundedEvents.find(e => e.element === element && e.eventName === eventName);\n    if (boundedEvent) {\n      this.unbind(boundedEvent.element, boundedEvent.eventName, boundedEvent.listener);\n    }\n  }\n\n  /** Unbind all will remove every every event handlers that were bounded earlier */\n  unbindAll() {\n    while (this.boundedEvents.length > 0) {\n      const boundedEvent = this.boundedEvents.pop() as ElementEventListener;\n      const { element, eventName, listener } = boundedEvent;\n      this.unbind(element, eventName, listener);\n    }\n  }\n}\n\n// export Slick namespace on both global & window objects\nconst SlickCore = {\n  \"Event\": SlickEvent,\n  \"EventData\": SlickEventData,\n  \"EventHandler\": SlickEventHandler,\n  \"Range\": SlickRange,\n  \"NonDataRow\": SlickNonDataItem,\n  \"Group\": SlickGroup,\n  \"GroupTotals\": SlickGroupTotals,\n  // \"EditorLock\": EditorLock,\n  \"RegexSanitizer\": regexSanitizer,\n  // \"BindingEventService\": BindingEventService,\n  \"Utils\": {\n    \"extend\": extend,\n    \"calculateAvailableSpace\": calculateAvailableSpace,\n    \"createDomElement\": createDomElement,\n    \"emptyElement\": emptyElement,\n    \"innerSize\": innerSize,\n    \"isEmptyObject\": isEmptyObject,\n    \"noop\": noop,\n    \"offset\": offset,\n    \"height\": height,\n    \"width\": width,\n    \"setStyleSize\": setStyleSize,\n    \"contains\": contains,\n    \"toFloat\": toFloat,\n    \"parents\": parents,\n    \"show\": show,\n    \"hide\": hide,\n    \"slideUp\": slideUp,\n    \"slideDown\": slideDown,\n    \"windowScrollPosition\": windowScrollPosition,\n    \"storage\": {\n      // https://stackoverflow.com/questions/29222027/vanilla-alternative-to-jquery-data-function-any-native-javascript-alternati\n      _storage: new WeakMap(),\n      put: function (element: any, key: string, obj: any) {\n        if (!this._storage.has(element)) {\n          this._storage.set(element, new Map());\n        }\n        this._storage.get(element).set(key, obj);\n      },\n      get: function (element: any, key: string) {\n        const el = this._storage.get(element);\n        if (el) {\n          return el.get(key);\n        }\n        return null;\n      },\n      remove: function (element: any, key: string) {\n        let ret = this._storage.get(element).delete(key);\n        if (!(this._storage.get(element).size === 0)) {\n          this._storage.delete(element);\n        }\n        return ret;\n      }\n    }\n  },\n\n  /**\n   * A global singleton editor lock.\n   * @class GlobalEditorLock\n   * @static\n   * @constructor\n   */\n  \"GlobalEditorLock\": new EditorLock(),\n\n  \"keyCode\": {\n    SPACE: 8,\n    BACKSPACE: 8,\n    DELETE: 46,\n    DOWN: 40,\n    END: 35,\n    ENTER: 13,\n    ESCAPE: 27,\n    HOME: 36,\n    INSERT: 45,\n    LEFT: 37,\n    PAGE_DOWN: 34,\n    PAGE_UP: 33,\n    RIGHT: 39,\n    TAB: 9,\n    UP: 38,\n    A: 65\n  },\n  \"preClickClassName\": \"slick-edit-preclick\",\n\n  \"GridAutosizeColsMode\": {\n    None: 'NOA',\n    LegacyOff: 'LOF',\n    LegacyForceFit: 'LFF',\n    IgnoreViewport: 'IGV',\n    FitColsToViewport: 'FCV',\n    FitViewportToCols: 'FVC'\n  },\n\n  \"ColAutosizeMode\": {\n    Locked: 'LCK',\n    Guide: 'GUI',\n    Content: 'CON',\n    ContentExpandOnly: 'CXO',\n    ContentIntelligent: 'CTI'\n  },\n\n  \"RowSelectionMode\": {\n    FirstRow: 'FS1',\n    FirstNRows: 'FSN',\n    AllRows: 'ALL',\n    LastRow: 'LS1'\n  },\n\n  \"ValueFilterMode\": {\n    None: 'NONE',\n    DeDuplicate: 'DEDP',\n    GetGreatestAndSub: 'GR8T',\n    GetLongestTextAndSub: 'LNSB',\n    GetLongestText: 'LNSC'\n  },\n\n  \"WidthEvalMode\": {\n    Auto: 'AUTO',\n    TextOnly: 'CANV',\n    HTML: 'HTML'\n  }\n}\n\nexport const {\n  Utils, Event, EventData, EventHandler, Group, GroupTotals, NonDataRow, Range,\n  RegexSanitizer, GlobalEditorLock, keyCode, preClickClassName, GridAutosizeColsMode, ColAutosizeMode,\n  RowSelectionMode, ValueFilterMode, WidthEvalMode\n} = SlickCore;\n\n/*  eslint-disable no-undef */\n// also add to global object when exist\nif (IIFE_ONLY && typeof global !== \"undefined\" && window.Slick) {\n  global.Slick = window.Slick;\n}\n/*  eslint-enable no-undef */\n", "import type { CompositeEditorOption, Editor, EditorArguments } from './models/index';\nimport { Utils as Utils_ } from './slick.core';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst Utils = (IIFE_ONLY ? Slick.Utils : Utils_) as typeof Utils_;\n\n/**\n * A composite SlickGrid editor factory.\n * Generates an editor that is composed of multiple editors for given columns.\n * Individual editors are provided given containers instead of the original cell.\n * Validation will be performed on all editors individually and the results will be aggregated into one\n * validation result.\n *\n *\n * The returned editor will have its prototype set to CompositeEditor, so you can use the \"instanceof\" check.\n *\n * NOTE:  This doesn't work for detached editors since they will be created and positioned relative to the\n *        active cell and not the provided container.\n *\n * @namespace Slick\n * @class CompositeEditor\n * @constructor\n * @param columns {Array} Column definitions from which editors will be pulled.\n * @param containers {Array} Container HTMLElements in which editors will be placed.\n * @param options {Object} Options hash:\n *  validationFailedMsg     -   A generic failed validation message set on the aggregated validation resuls.\n *  validationMsgPrefix     -   Add an optional prefix to each validation message (only the ones shown in the modal form, not the ones in the \"errors\")\n *  modalType               -   Defaults to \"edit\", modal type can 1 of these 3: (create, edit, mass, mass-selection)\n *  hide                    -   A function to be called when the grid asks the editor to hide itself.\n *  show                    -   A function to be called when the grid asks the editor to show itself.\n *  position                -   A function to be called when the grid asks the editor to reposition itself.\n *  destroy                 -   A function to be called when the editor is destroyed.\n */\nexport function CompositeEditor(columns: any[], containers: Array<HTMLDivElement>, options: CompositeEditorOption) {\n  let defaultOptions = {\n    modalType: 'edit', // available type (create, edit, mass)\n    validationFailedMsg: 'Some of the fields have failed validation',\n    validationMsgPrefix: null,\n    show: null,\n    hide: null,\n    position: null,\n    destroy: null,\n    formValues: {},\n    editors: {}\n  };\n\n  let noop = function () {\n  };\n\n  let firstInvalidEditor;\n\n  options = Slick.Utils.extend({}, defaultOptions, options);\n\n  function getContainerBox(i) {\n    let c = containers[i];\n    let offset = Slick.Utils.offset(c);\n    let w = Slick.Utils.width(c);\n    let h = Slick.Utils.height(c);\n\n    return {\n      top: (offset?.top ?? 0),\n      left: (offset?.left ?? 0),\n      bottom: (offset?.top ?? 0) + (h || 0),\n      right: (offset?.left ?? 0) + (w || 0),\n      width: w,\n      height: h,\n      visible: true\n    };\n  }\n\n  function editor(args) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    // @ts-ignore\n    const context: any = this;\n    let editors: Array<Editor & { args: EditorArguments }> = [];\n\n    function init() {\n      let newArgs: any = {};\n      let idx = 0;\n      while (idx < columns.length) {\n        if (columns[idx].editor) {\n          let column = columns[idx];\n          newArgs = Slick.Utils.extend(false, {}, args);\n          newArgs.container = containers[idx];\n          newArgs.column = column;\n          newArgs.position = getContainerBox(idx);\n          newArgs.commitChanges = noop;\n          newArgs.cancelChanges = noop;\n          newArgs.compositeEditorOptions = options;\n          newArgs.formValues = {};\n\n          let currentEditor = new (column.editor)(newArgs) as Editor & { args: EditorArguments };\n          options.editors[column.id] = currentEditor; // add every Editor instance refs\n          editors.push(currentEditor);\n        }\n        idx++;\n      }\n\n      // focus on first input\n      setTimeout(function () {\n        if (Array.isArray(editors) && editors.length > 0 && typeof editors[0].focus === 'function') {\n          editors[0].focus();\n        }\n      }, 0);\n    }\n\n    context.destroy = () => {\n      let idx = 0;\n      while (idx < editors.length) {\n        editors[idx].destroy();\n        idx++;\n      }\n\n      options.destroy?.();\n      editors = [];\n    };\n\n\n    context.focus = () => {\n      // if validation has failed, set the focus to the first invalid editor\n      (firstInvalidEditor || editors[0]).focus();\n    };\n\n    context.isValueChanged = () => {\n      let idx = 0;\n      while (idx < editors.length) {\n        if (editors[idx].isValueChanged()) {\n          return true;\n        }\n        idx++;\n      }\n      return false;\n    };\n\n    context.serializeValue = () => {\n      let serializedValue: any[] = [];\n      let idx = 0;\n      while (idx < editors.length) {\n        serializedValue[idx] = editors[idx].serializeValue();\n        idx++;\n      }\n      return serializedValue;\n    };\n\n    context.applyValue = (item, state) => {\n      let idx = 0;\n      while (idx < editors.length) {\n        editors[idx].applyValue(item, state[idx]);\n        idx++;\n      }\n    };\n\n    context.loadValue = (item) => {\n      let idx = 0;\n\n      while (idx < editors.length) {\n        editors[idx].loadValue(item);\n        idx++;\n      }\n    };\n\n    context.validate = (target) => {\n      let validationResults;\n      let errors: any[] = [];\n      let targetElm = target ? target : null;\n\n      firstInvalidEditor = null;\n\n      let idx = 0;\n      while (idx < editors.length) {\n        let columnDef = editors[idx].args?.column ?? {};\n        if (columnDef) {\n          let validationElm = document.querySelector(`.item-details-validation.editor-${columnDef.id}`);\n          let labelElm = document.querySelector(`.item-details-label.editor-${columnDef.id}`);\n          let editorElm = document.querySelector(`[data-editorid=${columnDef.id}]`);\n          let validationMsgPrefix = options?.validationMsgPrefix || '';\n\n          if (!targetElm || Slick.Utils.contains(editorElm as HTMLElement, targetElm)) {\n            validationResults = editors[idx].validate();\n\n            if (!validationResults.valid) {\n              firstInvalidEditor = editors[idx];\n              errors.push({\n                index: idx,\n                editor: editors[idx],\n                container: containers[idx],\n                msg: validationResults.msg\n              });\n\n              if (validationElm) {\n                validationElm.textContent = validationMsgPrefix + validationResults.msg;\n                labelElm?.classList.add('invalid');\n                editorElm?.classList.add('invalid');\n              }\n            } else if (validationElm) {\n              validationElm.textContent = '';\n              editorElm?.classList.remove('invalid');\n              labelElm?.classList.remove('invalid');\n            }\n          }\n          validationElm = null;\n          labelElm = null;\n          editorElm = null;\n        }\n        idx++;\n      }\n      targetElm = null;\n\n      if (errors.length) {\n        return {\n          valid: false,\n          msg: options.validationFailedMsg,\n          errors: errors\n        };\n      } else {\n        return {\n          valid: true,\n          msg: ''\n        };\n      }\n    };\n\n    context.hide = () => {\n      let idx = 0;\n      while (idx < editors.length) {\n        editors[idx]?.hide?.();\n        idx++;\n      }\n      options.hide && options.hide();\n    };\n\n    context.show = () => {\n      let idx = 0;\n      while (idx < editors.length) {\n        editors[idx]?.show?.();\n        idx++;\n      }\n      options.show && options.show();\n    };\n\n    context.position = (box) => {\n      options.position && options.position(box);\n    };\n\n    init();\n  }\n\n  // so we can do \"editor instanceof Slick.CompositeEditor\n  // @ts-ignore\n  editor.prototype = this;\n  return editor;\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(Slick, {\n    CompositeEditor\n  });\n}\n", "import type { Column, GroupItemMetadataProviderOption, GroupingFormatterItem } from './models/index';\nimport { SlickGroup as SlickGroup_, keyCode as keyCode_, Utils as Utils_ } from './slick.core';\nimport type { SlickGrid } from './slick.grid';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst SlickGroup = (IIFE_ONLY ? Slick.Group : SlickGroup_) as typeof SlickGroup_;\nconst keyCode = (IIFE_ONLY ? Slick.keyCode : keyCode_) as typeof keyCode_;\nconst Utils = (IIFE_ONLY ? Slick.Utils : Utils_) as typeof Utils_;\n\n/**\n * Provides item metadata for group (Slick.Group) and totals (Slick.Totals) rows produced by the DataView.\n * This metadata overrides the default behavior and formatting of those rows so that they appear and function\n * correctly when processed by the grid.\n *\n * This class also acts as a grid plugin providing event handlers to expand & collapse groups.\n * If \"grid.registerPlugin(...)\" is not called, expand & collapse will not work.\n *\n * @class GroupItemMetadataProvider\n * @module Data\n * @namespace Slick.Data\n * @constructor\n * @param inputOptions\n */\nexport class SlickGroupItemMetadataProvider {\n  protected _grid!: SlickGrid;\n  protected _options: GroupItemMetadataProviderOption;\n  protected _defaults: GroupItemMetadataProviderOption = {\n    checkboxSelect: false,\n    checkboxSelectCssClass: 'slick-group-select-checkbox',\n    checkboxSelectPlugin: null,\n    groupCssClass: 'slick-group',\n    groupTitleCssClass: 'slick-group-title',\n    totalsCssClass: 'slick-group-totals',\n    groupFocusable: true,\n    totalsFocusable: false,\n    toggleCssClass: 'slick-group-toggle',\n    toggleExpandedCssClass: 'expanded',\n    toggleCollapsedCssClass: 'collapsed',\n    enableExpandCollapse: true,\n    groupFormatter: this.defaultGroupCellFormatter.bind(this),\n    totalsFormatter: this.defaultTotalsCellFormatter.bind(this),\n    includeHeaderTotals: false\n  };\n\n  constructor(inputOptions?: GroupItemMetadataProviderOption) {\n    this._options = Utils.extend<GroupItemMetadataProviderOption>(true, {}, this._defaults, inputOptions);\n  }\n\n  /** Getter of SlickGrid DataView object */\n  protected get dataView(): any {\n    return this._grid?.getData?.() ?? {} as any;\n  }\n\n  getOptions() {\n    return this._options;\n  }\n\n  setOptions(inputOptions: GroupItemMetadataProviderOption) {\n    Utils.extend(true, this._options, inputOptions);\n  }\n\n  defaultGroupCellFormatter(_row: number, _cell: number, _value: any, _columnDef: Column, item: any): string {\n    if (!this._options.enableExpandCollapse) {\n      return item.title;\n    }\n\n    let indentation = `${item.level * 15}px`;\n\n    return (this._options.checkboxSelect ? '<span class=\"' + this._options.checkboxSelectCssClass +\n      ' ' + (item.selectChecked ? 'checked' : 'unchecked') + '\"></span>' : '') +\n      '<span class=\"' + this._options.toggleCssClass + ' ' +\n      (item.collapsed ? this._options.toggleCollapsedCssClass : this._options.toggleExpandedCssClass) +\n      '\" style=\"margin-left:' + indentation + '\">' +\n      '</span>' +\n      '<span class=\"' + this._options.groupTitleCssClass + '\" level=\"' + item.level + '\">' +\n      item.title +\n      '</span>';\n  }\n\n  defaultTotalsCellFormatter(_row: number, _cell: number, _value: any, columnDef: Column, item: any, grid: SlickGrid) {\n    return (columnDef?.groupTotalsFormatter?.(item, columnDef, grid)) ?? '';\n  }\n\n\n  init(grid: SlickGrid) {\n    this._grid = grid;\n    this._grid.onClick.subscribe(this.handleGridClick.bind(this) as EventListener);\n    this._grid.onKeyDown.subscribe(this.handleGridKeyDown.bind(this) as EventListener);\n  }\n\n  destroy() {\n    if (this._grid) {\n      this._grid.onClick.unsubscribe(this.handleGridClick.bind(this) as EventListener);\n      this._grid.onKeyDown.unsubscribe(this.handleGridKeyDown.bind(this) as EventListener);\n    }\n  }\n\n  handleGridClick(e: MouseEvent & { target: HTMLElement }, args: { row: number; cell: number; grid: SlickGrid; }) {\n    let target = e.target;\n    let item = this._grid.getDataItem(args.row);\n    if (item && item instanceof SlickGroup && target.classList.contains(this._options.toggleCssClass || '')) {\n      let range = this._grid.getRenderedRange();\n      this.dataView.setRefreshHints({\n        ignoreDiffsBefore: range.top,\n        ignoreDiffsAfter: range.bottom + 1\n      });\n\n      if (item.collapsed) {\n        this.dataView.expandGroup(item.groupingKey);\n      } else {\n        this.dataView.collapseGroup(item.groupingKey);\n      }\n\n      e.stopImmediatePropagation();\n      e.preventDefault();\n    }\n    if (item && item instanceof SlickGroup && target.classList.contains(this._options.checkboxSelectCssClass || '')) {\n      item.selectChecked = !item.selectChecked;\n      target.classList.remove((item.selectChecked ? 'unchecked' : 'checked'));\n      target.classList.add((item.selectChecked ? 'checked' : 'unchecked'));\n      // get rowIndexes array\n      let rowIndexes = this.dataView.mapItemsToRows(item.rows);\n      (item.selectChecked ? this._options.checkboxSelectPlugin.selectRows : this._options.checkboxSelectPlugin.deSelectRows)(rowIndexes);\n    }\n  }\n\n  // TODO:  add -/+ handling\n  handleGridKeyDown(e: KeyboardEvent) {\n    if (this._options.enableExpandCollapse && (e.which == keyCode.SPACE)) {\n      let activeCell = this._grid.getActiveCell();\n      if (activeCell) {\n        let item = this._grid.getDataItem(activeCell.row);\n        if (item && item instanceof SlickGroup) {\n          let range = this._grid.getRenderedRange();\n          this.dataView.setRefreshHints({\n            ignoreDiffsBefore: range.top,\n            ignoreDiffsAfter: range.bottom + 1\n          });\n\n          if (item.collapsed) {\n            this.dataView.expandGroup(item.groupingKey);\n          } else {\n            this.dataView.collapseGroup(item.groupingKey);\n          }\n\n          e.stopImmediatePropagation();\n          e.preventDefault();\n        }\n      }\n    }\n  }\n\n  getGroupRowMetadata(item: GroupingFormatterItem) {\n    let groupLevel = item?.level;\n    return {\n      selectable: false,\n      focusable: this._options.groupFocusable,\n      cssClasses: `${this._options.groupCssClass} slick-group-level-${groupLevel}`,\n      formatter: this._options.includeHeaderTotals && this._options.totalsFormatter,\n      columns: {\n        0: {\n          colspan: this._options.includeHeaderTotals ? '1' : '*',\n          formatter: this._options.groupFormatter,\n          editor: null\n        }\n      }\n    };\n  }\n\n  getTotalsRowMetadata(item: { group: GroupingFormatterItem }) {\n    let groupLevel = item?.group?.level;\n    return {\n      selectable: false,\n      focusable: this._options.totalsFocusable,\n      cssClasses: `${this._options.totalsCssClass} slick-group-level-${groupLevel}`,\n      formatter: this._options.totalsFormatter,\n      editor: null\n    };\n  }\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  window.Slick.Data = window.Slick.Data || {};\n  window.Slick.Data.GroupItemMetadataProvider = SlickGroupItemMetadataProvider;\n}\n", "import type {\n  Aggregator,\n  CssStyleHash,\n  Grouping,\n  GroupingComparerItem,\n  GroupingFormatterItem,\n  GroupingGetterFunction,\n  OnGroupCollapsedEventArgs,\n  OnGroupExpandedEventArgs,\n  OnRowCountChangedEventArgs,\n  OnRowsChangedEventArgs,\n  OnRowsOrCountChangedEventArgs,\n  OnSelectedRowIdsChangedEventArgs,\n  OnSetItemsCalledEventArgs,\n  PagingInfo,\n  SortDirectionNumber\n} from './models/index';\nimport {\n  SlickEvent as SlickEvent_,\n  SlickEventData as SlickEventData_,\n  SlickGroup as SlickGroup_,\n  SlickGroupTotals as SlickGroupTotals_,\n  Utils as Utils_,\n  SlickNonDataItem,\n} from './slick.core';\nimport type { SlickGrid } from './slick.grid';\nimport { SlickGroupItemMetadataProvider as SlickGroupItemMetadataProvider_ } from './slick.groupitemmetadataprovider';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst SlickEvent = (IIFE_ONLY ? Slick.Event : SlickEvent_) as typeof SlickEvent_;\nconst SlickEventData = (IIFE_ONLY ? Slick.EventData : SlickEventData_) as typeof SlickEventData_;\nconst SlickGroup = (IIFE_ONLY ? Slick.Group : SlickGroup_) as typeof SlickGroup_;\nconst SlickGroupTotals = (IIFE_ONLY ? Slick.GroupTotals : SlickGroupTotals_) as typeof SlickGroupTotals_;\nconst Utils = (IIFE_ONLY ? Slick.Utils : Utils_) as typeof Utils_;\nconst SlickGroupItemMetadataProvider = (IIFE_ONLY ? Slick.Data?.GroupItemMetadataProvider ?? {} : SlickGroupItemMetadataProvider_) as typeof SlickGroupItemMetadataProvider_;\n\nexport interface DataViewOption {\n  groupItemMetadataProvider?: SlickGroupItemMetadataProvider_;\n  inlineFilters?: boolean;\n}\n\n/**\n   * A sample Model implementation.\n   * Provides a filtered view of the underlying data.\n   *\n   * Relies on the data item having an \"id\" property uniquely identifying it.\n   */\nexport class SlickDataView<T = any> {\n  protected defaults = {\n    groupItemMetadataProvider: null,\n    inlineFilters: false\n  };\n\n  // private\n  protected idProperty = 'id';          // property holding a unique row id\n  protected items: T[] = [];            // data by index\n  protected rows: T[] = [];             // data by row\n  protected idxById = new Map<number | string, number>();   // indexes by id\n  protected rowsById: any = null;       // rows by id; lazy-calculated\n  protected filter: any = null;         // filter function\n  protected updated: any = null;        // updated item ids\n  protected suspend = false;            // suspends the recalculation\n  protected isBulkSuspend = false;      // delays protectedious operations like the\n  // index update and delete to efficient\n  // versions at endUpdate\n  protected bulkDeleteIds = new Map<number | string, boolean>();\n  protected sortAsc = true;\n  protected fastSortField?: string | null | (() => string);\n  protected sortComparer!: ((a: T, b: T) => number);\n  protected refreshHints: any = {};\n  protected prevRefreshHints: any = {};\n  protected filterArgs: any;\n  protected filteredItems: T[] = [];\n  protected compiledFilter?: Function | null;\n  protected compiledFilterWithCaching?: Function | null;\n  protected filterCache: any[] = [];\n  protected _grid?: SlickGrid; // grid object will be defined only after using \"syncGridSelection()\" method\"\n\n  // grouping\n  protected groupingInfoDefaults: Grouping = {\n    getter: undefined,\n    formatter: undefined,\n    comparer: (a: { value: any; }, b: { value: any; }) => {\n      return (a.value === b.value ? 0 : (a.value > b.value ? 1 : -1));\n    },\n    predefinedValues: [],\n    aggregators: [],\n    aggregateEmpty: false,\n    aggregateCollapsed: false,\n    aggregateChildGroups: false,\n    collapsed: false,\n    displayTotalsRow: true,\n    lazyTotalsCalculation: false\n  };\n  protected groupingInfos: Array<Grouping & { aggregators: Aggregator[]; getterIsAFn?: boolean; compiledAccumulators: any[]; getter: Function | string }> = [];\n  protected groups: any[] = [];\n  protected toggledGroupsByLevel: any[] = [];\n  protected groupingDelimiter = ':|:';\n  protected selectedRowIds: Array<number | string> = [];\n  protected preSelectedRowIdsChangeFn?: Function;\n\n  protected pagesize = 0;\n  protected pagenum = 0;\n  protected totalRows = 0;\n  protected _options;\n\n  // public events\n  onBeforePagingInfoChanged = new SlickEvent<PagingInfo>();\n  onGroupExpanded = new SlickEvent<OnGroupExpandedEventArgs>();\n  onGroupCollapsed = new SlickEvent<OnGroupCollapsedEventArgs>();\n  onPagingInfoChanged = new SlickEvent<PagingInfo>();\n  onRowCountChanged = new SlickEvent<OnRowCountChangedEventArgs>();\n  onRowsChanged = new SlickEvent<OnRowsChangedEventArgs>();\n  onRowsOrCountChanged = new SlickEvent<OnRowsOrCountChangedEventArgs>();\n  onSelectedRowIdsChanged = new SlickEvent<OnSelectedRowIdsChangedEventArgs>();\n  onSetItemsCalled = new SlickEvent<OnSetItemsCalledEventArgs>();\n\n  constructor(options: DataViewOption) {\n    this._options = Utils.extend(true, {}, this.defaults, options);\n  }\n\n  /**\n   * Begins a bached update of the items in the data view.\n   * including deletes and the related events are postponed to the endUpdate call.\n   * As certain operations are postponed during this update, some methods might not\n   * deliver fully consistent information.\n   * @param {Boolean} [bulkUpdate] - if set to true, most data view modifications\n   */\n  beginUpdate(bulkUpdate?: boolean) {\n    this.suspend = true;\n    this.isBulkSuspend = bulkUpdate === true;\n  }\n\n  endUpdate() {\n    let wasBulkSuspend = this.isBulkSuspend;\n    this.isBulkSuspend = false;\n    this.suspend = false;\n    if (wasBulkSuspend) {\n      this.processBulkDelete();\n      this.ensureIdUniqueness();\n    }\n    this.refresh();\n  }\n\n  destroy() {\n    this.items = [];\n    this.idxById = null as any;\n    this.rowsById = null as any;\n    this.filter = null as any;\n    this.updated = null as any;\n    this.sortComparer = null as any;\n    this.filterCache = [];\n    this.filteredItems = [];\n    this.compiledFilter = null;\n    this.compiledFilterWithCaching = null;\n\n    if (this._grid && this._grid.onSelectedRowsChanged && this._grid.onCellCssStylesChanged) {\n      this._grid.onSelectedRowsChanged.unsubscribe();\n      this._grid.onCellCssStylesChanged.unsubscribe();\n    }\n    if (this.onRowsOrCountChanged) {\n      this.onRowsOrCountChanged.unsubscribe();\n    }\n  }\n\n  setRefreshHints(hints: any) {\n    this.refreshHints = hints;\n  }\n\n  setFilterArgs(args: any) {\n    this.filterArgs = args;\n  }\n\n  /**\n   * Processes all delete requests placed during bulk update\n   * by recomputing the items and idxById members.\n   */\n  protected processBulkDelete() {\n    if (!this.idxById) return;\n    // the bulk update is processed by\n    // recomputing the whole items array and the index lookup in one go.\n    // this is done by placing the not-deleted items\n    // from left to right into the array and shrink the array the the new\n    // size afterwards.\n    // see https://github.com/6pac/SlickGrid/issues/571 for further details.\n\n    let id, item, newIdx = 0;\n    for (let i = 0, l = this.items.length; i < l; i++) {\n      item = this.items[i];\n      id = item[this.idProperty];\n      if (id === undefined) {\n        throw new Error(\"[SlickGrid DataView] Each data element must implement a unique 'id' property\");\n      }\n\n      // if items have been marked as deleted we skip them for the new final items array\n      // and we remove them from the lookup table.\n      if (this.bulkDeleteIds.has(id)) {\n        this.idxById.delete(id);\n      } else {\n        // for items which are not deleted, we add them to the\n        // next free position in the array and register the index in the lookup.\n        this.items[newIdx] = item;\n        this.idxById.set(id, newIdx);\n        ++newIdx;\n      }\n    }\n\n    // here we shrink down the full item array to the ones actually\n    // inserted in the cleanup loop above.\n    this.items.length = newIdx;\n    // and finally cleanup the deleted ids to start cleanly on the next update.\n    this.bulkDeleteIds = new Map();\n  }\n\n  protected updateIdxById(startingIndex?: number) {\n    if (this.isBulkSuspend || !this.idxById) { // during bulk update we do not reorganize\n      return;\n    }\n    startingIndex = startingIndex || 0;\n    let id;\n    for (let i = startingIndex, l = this.items.length; i < l; i++) {\n      id = this.items[i][this.idProperty];\n      if (id === undefined) {\n        throw new Error(\"[SlickGrid DataView] Each data element must implement a unique 'id' property\");\n      }\n      this.idxById.set(id, i);\n    }\n  }\n\n  protected ensureIdUniqueness() {\n    if (this.isBulkSuspend || !this.idxById) { // during bulk update we do not reorganize\n      return;\n    }\n    let id;\n    for (let i = 0, l = this.items.length; i < l; i++) {\n      id = this.items[i][this.idProperty];\n      if (id === undefined || this.idxById.get(id) !== i) {\n        throw new Error(\"[SlickGrid DataView] Each data element must implement a unique 'id' property\");\n      }\n    }\n  }\n\n  /** Get all DataView Items */\n  getItems() {\n    return this.items;\n  }\n\n  /** Get the DataView Id property name to use (defaults to \"Id\" but could be customized to something else when instantiating the DataView) */\n  getIdPropertyName() {\n    return this.idProperty;\n  }\n\n  /**\n   * Set the Items with a new Dataset and optionally pass a different Id property name\n   * @param {Array<*>} data - array of data\n   * @param {String} [objectIdProperty] - optional id property to use as primary id\n   */\n  setItems(data: T[], objectIdProperty?: string) {\n    if (objectIdProperty !== undefined) {\n      this.idProperty = objectIdProperty;\n    }\n    this.items = this.filteredItems = data;\n    this.onSetItemsCalled.notify({ idProperty: this.idProperty, itemCount: this.items.length }, null, this);\n    this.idxById = new Map();\n    this.updateIdxById();\n    this.ensureIdUniqueness();\n    this.refresh();\n  }\n\n  /** Set Paging Options */\n  setPagingOptions(args: Partial<PagingInfo>) {\n    if (this.onBeforePagingInfoChanged.notify(this.getPagingInfo(), null, this).getReturnValue() !== false) {\n      if (args.pageSize != undefined) {\n        this.pagesize = args.pageSize;\n        this.pagenum = this.pagesize ? Math.min(this.pagenum, Math.max(0, Math.ceil(this.totalRows / this.pagesize) - 1)) : 0;\n      }\n\n      if (args.pageNum != undefined) {\n        this.pagenum = Math.min(args.pageNum, Math.max(0, Math.ceil(this.totalRows / this.pagesize) - 1));\n      }\n\n      this.onPagingInfoChanged.notify(this.getPagingInfo(), null, this);\n\n      this.refresh();\n    }\n  }\n\n  /** Get Paging Options */\n  getPagingInfo(): PagingInfo {\n    const totalPages = this.pagesize ? Math.max(1, Math.ceil(this.totalRows / this.pagesize)) : 1;\n    return { pageSize: this.pagesize, pageNum: this.pagenum, totalRows: this.totalRows, totalPages: totalPages, dataView: this as SlickDataView };\n  }\n\n  /** Sort Method to use by the DataView */\n  sort(comparer: (a: T, b: T) => number, ascending: boolean) {\n    this.sortAsc = ascending;\n    this.sortComparer = comparer;\n    this.fastSortField = null;\n    if (ascending === false) {\n      this.items.reverse();\n    }\n    this.items.sort(comparer);\n    if (ascending === false) {\n      this.items.reverse();\n    }\n    this.idxById = new Map();\n    this.updateIdxById();\n    this.refresh();\n  }\n\n  /**\n   * Provides a workaround for the extremely slow sorting in IE.\n   * Does a [lexicographic] sort on a give column by temporarily overriding Object.prototype.toString\n   * to return the value of that field and then doing a native Array.sort().\n   */\n  fastSort(field: string | (() => string), ascending: boolean) {\n    this.sortAsc = ascending;\n    this.fastSortField = field;\n    this.sortComparer = null as any;\n    let oldToString = Object.prototype.toString;\n    Object.prototype.toString = (typeof field === 'function') ? field : function () {\n      // @ts-ignore\n      return this[field];\n    };\n    // an extra reversal for descending sort keeps the sort stable\n    // (assuming a stable native sort implementation, which isn't true in some cases)\n    if (ascending === false) {\n      this.items.reverse();\n    }\n    this.items.sort();\n    Object.prototype.toString = oldToString;\n    if (ascending === false) {\n      this.items.reverse();\n    }\n    this.idxById = new Map();\n    this.updateIdxById();\n    this.refresh();\n  }\n\n  /** Re-Sort the dataset */\n  reSort() {\n    if (this.sortComparer) {\n      this.sort(this.sortComparer, this.sortAsc);\n    } else if (this.fastSortField) {\n      this.fastSort(this.fastSortField, this.sortAsc);\n    }\n  }\n\n  /** Get only the DataView filtered items */\n  getFilteredItems() {\n    return this.filteredItems;\n  }\n\n  /** Get the array length (count) of only the DataView filtered items */\n  getFilteredItemCount() {\n    return this.filteredItems.length;\n  }\n\n  /** Get current Filter used by the DataView */\n  getFilter() {\n    return this.filter;\n  }\n\n  /**\n   * Set a Filter that will be used by the DataView\n   * @param {Function} fn - filter callback function\n   */\n  setFilter(filterFn: (a: T, b: T) => number) {\n    this.filter = filterFn;\n    if (this._options.inlineFilters) {\n      this.compiledFilter = this.compileFilter();\n      this.compiledFilterWithCaching = this.compileFilterWithCaching();\n    }\n    this.refresh();\n  }\n\n  /** Get current Grouping info */\n  getGrouping(): Grouping[] {\n    return this.groupingInfos;\n  }\n\n  /** Set some Grouping */\n  setGrouping(groupingInfo: Grouping | Grouping[]) {\n    if (!this._options.groupItemMetadataProvider) {\n      this._options.groupItemMetadataProvider = new SlickGroupItemMetadataProvider();\n    }\n\n    this.groups = [];\n    this.toggledGroupsByLevel = [];\n    groupingInfo = groupingInfo || [];\n    this.groupingInfos = ((groupingInfo instanceof Array) ? groupingInfo : [groupingInfo]) as any;\n\n    for (let i = 0; i < this.groupingInfos.length; i++) {\n      let gi = this.groupingInfos[i] = Utils.extend(true, {}, this.groupingInfoDefaults, this.groupingInfos[i]);\n      gi.getterIsAFn = typeof gi.getter === 'function';\n\n      // pre-compile accumulator loops\n      gi.compiledAccumulators = [];\n      let idx = gi.aggregators.length;\n      while (idx--) {\n        gi.compiledAccumulators[idx] = this.compileAccumulatorLoop(gi.aggregators[idx]);\n      }\n\n      this.toggledGroupsByLevel[i] = {};\n    }\n\n    this.refresh();\n  }\n\n  /**\n   * @deprecated Please use {@link setGrouping}.\n   */\n  groupBy(valueGetter: string | GroupingGetterFunction<T>, valueFormatter: (g: GroupingFormatterItem) => string, sortComparer?: (a: GroupingComparerItem, b: GroupingComparerItem) => SortDirectionNumber) {\n    if (valueGetter == null) {\n      this.setGrouping([]);\n      return;\n    }\n\n    this.setGrouping({\n      getter: valueGetter,\n      formatter: valueFormatter,\n      comparer: sortComparer\n    });\n  }\n\n  /**\n   * @deprecated Please use {@link setGrouping}.\n   */\n  setAggregators(groupAggregators: Aggregator[], includeCollapsed: boolean) {\n    if (!this.groupingInfos.length) {\n      throw new Error(\"[SlickGrid DataView] At least one grouping must be specified before calling setAggregators().\");\n    }\n\n    this.groupingInfos[0].aggregators = groupAggregators;\n    this.groupingInfos[0].aggregateCollapsed = includeCollapsed;\n\n    this.setGrouping(this.groupingInfos);\n  }\n\n  /** Get an item in the DataView by its row index */\n  getItemByIdx(i: number) {\n    return this.items[i];\n  }\n\n  /** Get row index in the DataView by its Id */\n  getIdxById(id: number | string) {\n    return this.idxById && this.idxById.get(id);\n  }\n\n  protected ensureRowsByIdCache() {\n    if (!this.rowsById) {\n      this.rowsById = {};\n      for (let i = 0, l = this.rows.length; i < l; i++) {\n        this.rowsById[this.rows[i][this.idProperty]] = i;\n      }\n    }\n  }\n\n  /** Get row number in the grid by its item object */\n  getRowByItem(item: T) {\n    this.ensureRowsByIdCache();\n    return this.rowsById[item[this.idProperty]];\n  }\n\n  /** Get row number in the grid by its Id */\n  getRowById(id: number | string) {\n    this.ensureRowsByIdCache();\n    return this.rowsById[id];\n  }\n\n  /** Get an item in the DataView by its Id */\n  getItemById(id: number | string) {\n    return this.items[this.idxById.get(id) || ''];\n  }\n\n  /** From the items array provided, return the mapped rows */\n  mapItemsToRows(itemArray: T[]) {\n    const rows: number[] = [];\n    this.ensureRowsByIdCache();\n    for (let i = 0, l = itemArray.length; i < l; i++) {\n      let row = this.rowsById[itemArray[i][this.idProperty]];\n      if (row != null) {\n        rows[rows.length] = row;\n      }\n    }\n    return rows;\n  }\n\n  /** From the Ids array provided, return the mapped rows */\n  mapIdsToRows(idArray: Array<number | string>) {\n    const rows: number[] = [];\n    this.ensureRowsByIdCache();\n    for (let i = 0, l = idArray.length; i < l; i++) {\n      let row = this.rowsById[idArray[i]];\n      if (row != null) {\n        rows[rows.length] = row;\n      }\n    }\n    return rows;\n  }\n\n  /** From the rows array provided, return the mapped Ids */\n  mapRowsToIds(rowArray: number[]) {\n    const ids: Array<number | string> = [];\n    for (let i = 0, l = rowArray.length; i < l; i++) {\n      if (rowArray[i] < this.rows.length) {\n        const rowItem = this.rows[rowArray[i]];\n        ids[ids.length] = rowItem && rowItem[this.idProperty];\n      }\n    }\n    return ids;\n  }\n\n  /**\n   * Performs the update operations of a single item by id without\n   * triggering any events or refresh operations.\n   * @param id The new id of the item.\n   * @param item The item which should be the new value for the given id.\n   */\n  updateSingleItem(id: number | string, item: T) {\n    if (!this.idxById) return;\n\n    // see also https://github.com/mleibman/SlickGrid/issues/1082\n    if (!this.idxById.has(id)) {\n      throw new Error('[SlickGrid DataView] Invalid id');\n    }\n\n    // What if the specified item also has an updated idProperty?\n    // Then we'll have to update the index as well, and possibly the `updated` cache too.\n    if (id !== item[this.idProperty]) {\n      // make sure the new id is unique:\n      let newId = item[this.idProperty];\n      if (newId == null) {\n        throw new Error('[SlickGrid DataView] Cannot update item to associate with a null id');\n      }\n      if (this.idxById.has(newId)) {\n        throw new Error('[SlickGrid DataView] Cannot update item to associate with a non-unique id');\n      }\n      this.idxById.set(newId, this.idxById.get(id) as number);\n      this.idxById.delete(id);\n\n      // Also update the `updated` hashtable/markercache? Yes, `recalc()` inside `refresh()` needs that one!\n      if (this.updated?.[id]) {\n        delete this.updated[id];\n      }\n\n      // Also update the row indexes? no need since the `refresh()`, further down, blows away the `rowsById[]` cache!\n\n      id = newId;\n    }\n    this.items[this.idxById.get(id) as number] = item;\n\n    // Also update the rows? no need since the `refresh()`, further down, blows away the `rows[]` cache and recalculates it via `recalc()`!\n\n    if (!this.updated) {\n      this.updated = {};\n    }\n    this.updated[id] = true;\n  }\n\n  /**\n   * Updates a single item in the data view given the id and new value.\n   * @param id The new id of the item.\n   * @param item The item which should be the new value for the given id.\n   */\n  updateItem(id: number | string, item: T) {\n    this.updateSingleItem(id, item);\n    this.refresh();\n  }\n\n  /**\n   * Updates multiple items in the data view given the new ids and new values.\n   * @param id {Array} The array of new ids which is in the same order as the items.\n   * @param newItems {Array} The new items that should be set in the data view for the given ids.\n   */\n  updateItems(ids: Array<number | string>, newItems: T[]) {\n    if (ids.length !== newItems.length) {\n      throw new Error(\"[SlickGrid DataView] Mismatch on the length of ids and items provided to update\");\n    }\n    for (let i = 0, l = newItems.length; i < l; i++) {\n      this.updateSingleItem(ids[i], newItems[i]);\n    }\n    this.refresh();\n  }\n\n  /**\n   * Inserts a single item into the data view at the given position.\n   * @param insertBefore {Number} The 0-based index before which the item should be inserted.\n   * @param item The item to insert.\n   */\n  insertItem(insertBefore: number, item: T) {\n    this.items.splice(insertBefore, 0, item);\n    this.updateIdxById(insertBefore);\n    this.refresh();\n  }\n\n  /**\n   * Inserts multiple items into the data view at the given position.\n   * @param insertBefore {Number} The 0-based index before which the items should be inserted.\n   * @param newItems {Array}  The items to insert.\n   */\n  insertItems(insertBefore: number, newItems: T[]) {\n    // @ts-ignore\n    Array.prototype.splice.apply(this.items, [insertBefore, 0].concat(newItems));\n    this.updateIdxById(insertBefore);\n    this.refresh();\n  }\n\n  /**\n   * Adds a single item at the end of the data view.\n   * @param item The item to add at the end.\n   */\n  addItem(item: T) {\n    this.items.push(item);\n    this.updateIdxById(this.items.length - 1);\n    this.refresh();\n  }\n\n  /**\n   * Adds multiple items at the end of the data view.\n   * @param {Array} newItems The items to add at the end.\n   */\n  addItems(newItems: T[]) {\n    this.items = this.items.concat(newItems);\n    this.updateIdxById(this.items.length - newItems.length);\n    this.refresh();\n  }\n\n  /**\n   * Deletes a single item identified by the given id from the data view.\n   * @param {String|Number} id The id identifying the object to delete.\n   */\n  deleteItem(id: number | string) {\n    if (!this.idxById) return;\n    if (this.isBulkSuspend) {\n      this.bulkDeleteIds.set(id, true);\n    } else {\n      let idx = this.idxById.get(id);\n      if (idx === undefined) {\n        throw new Error('[SlickGrid DataView] Invalid id');\n      }\n      this.idxById.delete(id);\n      this.items.splice(idx, 1);\n      this.updateIdxById(idx);\n      this.refresh();\n    }\n  }\n\n  /**\n   * Deletes multiple item identified by the given ids from the data view.\n   * @param {Array} ids The ids of the items to delete.\n   */\n  deleteItems(ids: Array<number | string>) {\n    if (ids.length === 0 || !this.idxById) {\n      return;\n    }\n\n    if (this.isBulkSuspend) {\n      for (let i = 0, l = ids.length; i < l; i++) {\n        let id = ids[i];\n        let idx = this.idxById.get(id);\n        if (idx === undefined) {\n          throw new Error('[SlickGrid DataView] Invalid id');\n        }\n        this.bulkDeleteIds.set(id, true);\n      }\n    } else {\n      // collect all indexes\n      let indexesToDelete: number[] = [];\n      for (let i = 0, l = ids.length; i < l; i++) {\n        let id = ids[i];\n        let idx = this.idxById.get(id);\n        if (idx === undefined) {\n          throw new Error('[SlickGrid DataView] Invalid id');\n        }\n        this.idxById.delete(id);\n        indexesToDelete.push(idx);\n      }\n\n      // Remove from back to front\n      indexesToDelete.sort();\n      for (let i = indexesToDelete.length - 1; i >= 0; --i) {\n        this.items.splice(indexesToDelete[i], 1);\n      }\n\n      // update lookup from front to back\n      this.updateIdxById(indexesToDelete[0]);\n      this.refresh();\n    }\n  }\n\n  /** Add an item in a sorted dataset (a Sort function must be defined) */\n  sortedAddItem(item: T) {\n    if (!this.sortComparer) {\n      throw new Error('[SlickGrid DataView] sortedAddItem() requires a sort comparer, use sort()');\n    }\n    this.insertItem(this.sortedIndex(item), item);\n  }\n\n  /** Update an item in a sorted dataset (a Sort function must be defined) */\n  sortedUpdateItem(id: string | number, item: T) {\n    if (!this.idxById) return;\n    if (!this.idxById.has(id) || id !== item[this.idProperty]) {\n      throw new Error('[SlickGrid DataView] Invalid or non-matching id ' + this.idxById.get(id));\n    }\n    if (!this.sortComparer) {\n      throw new Error(\"[SlickGrid DataView] sortedUpdateItem() requires a sort comparer, use sort()\");\n    }\n    const oldItem = this.getItemById(id);\n    if (this.sortComparer(oldItem, item) !== 0) {\n      // item affects sorting -> must use sorted add\n      this.deleteItem(id);\n      this.sortedAddItem(item);\n    } else { // update does not affect sorting -> regular update works fine\n      this.updateItem(id, item);\n    }\n  }\n\n  protected sortedIndex(searchItem: T) {\n    let low = 0;\n    let high = this.items.length;\n\n    while (low < high) {\n      let mid = low + high >>> 1;\n      if (this.sortComparer(this.items[mid], searchItem) === -1) {\n        low = mid + 1;\n      } else {\n        high = mid;\n      }\n    }\n    return low;\n  }\n\n  /** Get item count, that is the full dataset lenght of the DataView */\n  getItemCount() {\n    return this.items.length;\n  }\n\n  /** Get row count (rows displayed in current page) */\n  getLength() {\n    return this.rows.length;\n  }\n\n  /** Retrieve an item from the DataView at specific index */\n  getItem(i: number) {\n    const item = this.rows[i];\n\n    // if this is a group row, make sure totals are calculated and update the title\n    if ((item as SlickGroup_)?.__group && (item as SlickGroup_).totals && !(item as SlickGroup_).totals?.initialized) {\n      const gi = this.groupingInfos[(item as SlickGroup_).level];\n      if (!gi.displayTotalsRow) {\n        this.calculateTotals((item as SlickGroup_).totals);\n        (item as SlickGroup_).title = gi.formatter ? gi.formatter((item as SlickGroup_)) : (item as SlickGroup_).value;\n      }\n    }\n    // if this is a totals row, make sure it's calculated\n    else if ((item as SlickGroupTotals_)?.__groupTotals && !(item as SlickGroupTotals_).initialized) {\n      this.calculateTotals(item as SlickGroupTotals_);\n    }\n\n    return item;\n  }\n\n  getItemMetadata(i: number) {\n    let item = this.rows[i];\n    if (item === undefined) {\n      return null;\n    }\n\n    // overrides for grouping rows\n    if ((item as SlickGroup_).__group) {\n      return this._options.groupItemMetadataProvider.getGroupRowMetadata(item);\n    }\n\n    // overrides for totals rows\n    if ((item as SlickGroupTotals_).__groupTotals) {\n      return this._options.groupItemMetadataProvider.getTotalsRowMetadata(item);\n    }\n\n    return null;\n  }\n\n  protected expandCollapseAllGroups(level?: number, collapse?: boolean) {\n    if (level == null) {\n      for (let i = 0; i < this.groupingInfos.length; i++) {\n        this.toggledGroupsByLevel[i] = {};\n        this.groupingInfos[i].collapsed = collapse;\n\n        if (collapse === true) {\n          this.onGroupCollapsed.notify({ level: i, groupingKey: null });\n        } else {\n          this.onGroupExpanded.notify({ level: i, groupingKey: null });\n        }\n      }\n    } else {\n      this.toggledGroupsByLevel[level] = {};\n      this.groupingInfos[level].collapsed = collapse;\n\n      if (collapse === true) {\n        this.onGroupCollapsed.notify({ level: level, groupingKey: null });\n      } else {\n        this.onGroupExpanded.notify({ level: level, groupingKey: null });\n      }\n    }\n    this.refresh();\n  }\n\n  /**\n   * @param {Number} [level] Optional level to collapse.  If not specified, applies to all levels.\n   */\n  collapseAllGroups(level?: number) {\n    this.expandCollapseAllGroups(level, true);\n  }\n\n  /**\n   * @param {Number} [level] Optional level to expand.  If not specified, applies to all levels.\n   */\n  expandAllGroups(level?: number) {\n    this.expandCollapseAllGroups(level, false);\n  }\n\n  expandCollapseGroup(level: number, groupingKey: string, collapse?: boolean) {\n    // @ts-ignore\n    this.toggledGroupsByLevel[level][groupingKey] = this.groupingInfos[level].collapsed ^ collapse;\n    this.refresh();\n  }\n\n  /**\n   * @param varArgs Either a Slick.Group's \"groupingKey\" property, or a\n   *     variable argument list of grouping values denoting a unique path to the row.  For\n   *     example, calling collapseGroup('high', '10%') will collapse the '10%' subgroup of\n   *     the 'high' group.\n   */\n  collapseGroup(_varArgs: any) {\n    const args = Array.prototype.slice.call(arguments);\n    const arg0 = args[0];\n    let groupingKey;\n    let level;\n\n    if (args.length === 1 && arg0.indexOf(this.groupingDelimiter) !== -1) {\n      groupingKey = arg0;\n      level = arg0.split(this.groupingDelimiter).length - 1;\n    } else {\n      groupingKey = args.join(this.groupingDelimiter);\n      level = args.length - 1;\n    }\n\n    this.expandCollapseGroup(level, groupingKey, true);\n    this.onGroupCollapsed.notify({ level: level, groupingKey: groupingKey });\n  }\n\n  /**\n   * @param varArgs Either a Slick.Group's \"groupingKey\" property, or a\n   *     variable argument list of grouping values denoting a unique path to the row.  For\n   *     example, calling expandGroup('high', '10%') will expand the '10%' subgroup of\n   *     the 'high' group.\n   */\n  expandGroup(_varArgs: any) {\n    const args = Array.prototype.slice.call(arguments);\n    const arg0 = args[0];\n    let groupingKey;\n    let level;\n\n    if (args.length === 1 && arg0.indexOf(this.groupingDelimiter) !== -1) {\n      level = arg0.split(this.groupingDelimiter).length - 1;\n      groupingKey = arg0;\n    } else {\n      level = args.length - 1;\n      groupingKey = args.join(this.groupingDelimiter);\n    }\n\n    this.expandCollapseGroup(level, groupingKey, false);\n    this.onGroupExpanded.notify({ level: level, groupingKey: groupingKey });\n  }\n\n  getGroups() {\n    return this.groups;\n  }\n\n  protected extractGroups(rows: number[], parentGroup?: SlickGroup_) {\n    let group;\n    let val;\n    let groups: SlickGroup_[] = [];\n    let groupsByVal = {};\n    let r;\n    let level = parentGroup ? parentGroup.level + 1 : 0;\n    let gi = this.groupingInfos[level];\n\n    for (let i = 0, l = gi.predefinedValues?.length ?? 0; i < l; i++) {\n      val = gi.predefinedValues?.[i];\n      group = groupsByVal[val];\n      if (!group) {\n        group = new SlickGroup();\n        group.value = val;\n        group.level = level;\n        group.groupingKey = (parentGroup ? parentGroup.groupingKey + this.groupingDelimiter : '') + val;\n        groups[groups.length] = group;\n        groupsByVal[val] = group;\n      }\n    }\n\n    for (let i = 0, l = rows.length; i < l; i++) {\n      r = rows[i];\n      val = gi.getterIsAFn ? (gi.getter as Function)(r) : r[gi.getter as string];\n      group = groupsByVal[val];\n      if (!group) {\n        group = new SlickGroup();\n        group.value = val;\n        group.level = level;\n        group.groupingKey = (parentGroup ? parentGroup.groupingKey + this.groupingDelimiter : '') + val;\n        groups[groups.length] = group;\n        groupsByVal[val] = group;\n      }\n\n      group.rows[group.count++] = r;\n    }\n\n    if (level < this.groupingInfos.length - 1) {\n      for (let i = 0; i < groups.length; i++) {\n        group = groups[i];\n        group.groups = this.extractGroups(group.rows, group);\n      }\n    }\n\n    if (groups.length) {\n      this.addTotals(groups, level);\n    }\n\n    groups.sort(this.groupingInfos[level].comparer);\n\n    return groups;\n  }\n\n  protected calculateTotals(totals: SlickGroupTotals_) {\n    let group = totals.group;\n    let gi = this.groupingInfos[group.level ?? 0];\n    let isLeafLevel = (group.level === this.groupingInfos.length);\n    let agg: Aggregator, idx = gi.aggregators.length;\n\n    if (!isLeafLevel && gi.aggregateChildGroups) {\n      // make sure all the subgroups are calculated\n      let i = group.groups?.length ?? 0;\n      while (i--) {\n        if (!group.groups[i].totals.initialized) {\n          this.calculateTotals(group.groups[i].totals);\n        }\n      }\n    }\n\n    while (idx--) {\n      agg = gi.aggregators[idx];\n      agg.init();\n      if (!isLeafLevel && gi.aggregateChildGroups) {\n        gi.compiledAccumulators[idx].call(agg, group.groups);\n      } else {\n        gi.compiledAccumulators[idx].call(agg, group.rows);\n      }\n      agg.storeResult(totals);\n    }\n    totals.initialized = true;\n  }\n\n  protected addGroupTotals(group: SlickGroup_) {\n    let gi = this.groupingInfos[group.level];\n    let totals = new SlickGroupTotals();\n    totals.group = group;\n    group.totals = totals;\n    if (!gi.lazyTotalsCalculation) {\n      this.calculateTotals(totals);\n    }\n  }\n\n  protected addTotals(groups: Grouping[], level?: number) {\n    level = level || 0;\n    let gi = this.groupingInfos[level];\n    let groupCollapsed = gi.collapsed;\n    let toggledGroups = this.toggledGroupsByLevel[level];\n    let idx = groups.length, g;\n    while (idx--) {\n      g = groups[idx];\n\n      if (g.collapsed && !gi.aggregateCollapsed) {\n        continue;\n      }\n\n      // Do a depth-first aggregation so that parent group aggregators can access subgroup totals.\n      if (g.groups) {\n        this.addTotals(g.groups, level + 1);\n      }\n\n      if (gi.aggregators?.length && (\n        gi.aggregateEmpty || g.rows.length || (g.groups && g.groups.length))) {\n        this.addGroupTotals(g);\n      }\n\n      g.collapsed = (groupCollapsed as any) ^ toggledGroups[g.groupingKey];\n      g.title = gi.formatter ? gi.formatter(g) : g.value;\n    }\n  }\n\n  protected flattenGroupedRows(groups: Grouping[], level?: number) {\n    level = level || 0;\n    const gi = this.groupingInfos[level];\n    let groupedRows: number[] = [], rows, gl = 0, g;\n    for (let i = 0, l = groups.length; i < l; i++) {\n      g = groups[i];\n      groupedRows[gl++] = g;\n\n      if (!g.collapsed) {\n        rows = g.groups ? this.flattenGroupedRows(g.groups, level + 1) : g.rows;\n        for (let j = 0, jj = rows.length; j < jj; j++) {\n          groupedRows[gl++] = rows[j];\n        }\n      }\n\n      if (g.totals && gi.displayTotalsRow && (!g.collapsed || gi.aggregateCollapsed)) {\n        groupedRows[gl++] = g.totals;\n      }\n    }\n    return groupedRows;\n  }\n\n  protected getFunctionInfo(fn: Function) {\n    const fnStr = fn.toString();\n    const usingEs5 = fnStr.indexOf('function') >= 0; // with ES6, the word function is not present\n    const fnRegex = usingEs5 ? /^function[^(]*\\(([^)]*)\\)\\s*{([\\s\\S]*)}$/ : /^[^(]*\\(([^)]*)\\)\\s*{([\\s\\S]*)}$/;\n    const matches = fn.toString().match(fnRegex) || [];\n    return {\n      params: matches[1].split(\",\"),\n      body: matches[2]\n    };\n  }\n\n  protected compileAccumulatorLoop(aggregator: Aggregator) {\n    if (aggregator.accumulate) {\n      const accumulatorInfo = this.getFunctionInfo(aggregator.accumulate);\n      const fn: any = new Function(\n        \"_items\",\n        \"for (var \" + accumulatorInfo.params[0] + \", _i=0, _il=_items.length; _i<_il; _i++) {\" +\n        accumulatorInfo.params[0] + \" = _items[_i]; \" +\n        accumulatorInfo.body +\n        \"}\"\n      );\n      const fnName = \"compiledAccumulatorLoop\";\n      fn.displayName = fnName;\n      fn.name = this.setFunctionName(fn, fnName);\n      return fn;\n    } else {\n      return function noAccumulator() { }\n    }\n  }\n\n  protected compileFilter(): Function {\n    const filterInfo = this.getFunctionInfo(this.filter);\n\n    const filterPath1 = \"{ continue _coreloop; }$1\";\n    const filterPath2 = \"{ _retval[_idx++] = $item$; continue _coreloop; }$1\";\n    // make some allowances for minification - there's only so far we can go with RegEx\n    const filterBody = filterInfo.body\n      .replace(/return false\\s*([;}]|\\}|$)/gi, filterPath1)\n      .replace(/return!1([;}]|\\}|$)/gi, filterPath1)\n      .replace(/return true\\s*([;}]|\\}|$)/gi, filterPath2)\n      .replace(/return!0([;}]|\\}|$)/gi, filterPath2)\n      .replace(/return ([^;}]+?)\\s*([;}]|$)/gi,\n        \"{ if ($1) { _retval[_idx++] = $item$; }; continue _coreloop; }$2\");\n\n    // This preserves the function template code after JS compression,\n    // so that replace() commands still work as expected.\n    let tpl = [\n      //\"function(_items, _args) { \",\n      \"var _retval = [], _idx = 0; \",\n      \"var $item$, $args$ = _args; \",\n      \"_coreloop: \",\n      \"for (var _i = 0, _il = _items.length; _i < _il; _i++) { \",\n      \"$item$ = _items[_i]; \",\n      \"$filter$; \",\n      \"} \",\n      \"return _retval; \"\n      //\"}\"\n    ].join(\"\");\n    tpl = tpl.replace(/\\$filter\\$/gi, filterBody);\n    tpl = tpl.replace(/\\$item\\$/gi, filterInfo.params[0]);\n    tpl = tpl.replace(/\\$args\\$/gi, filterInfo.params[1]);\n\n    const fn: any = new Function(\"_items,_args\", tpl);\n    const fnName = \"compiledFilter\";\n    fn.displayName = fnName;\n    fn.name = this.setFunctionName(fn, fnName);\n    return fn;\n  }\n\n  protected compileFilterWithCaching() {\n    const filterInfo = this.getFunctionInfo(this.filter);\n\n    const filterPath1 = \"{ continue _coreloop; }$1\";\n    const filterPath2 = \"{ _cache[_i] = true;_retval[_idx++] = $item$; continue _coreloop; }$1\";\n    // make some allowances for minification - there's only so far we can go with RegEx\n    const filterBody = filterInfo.body\n      .replace(/return false\\s*([;}]|\\}|$)/gi, filterPath1)\n      .replace(/return!1([;}]|\\}|$)/gi, filterPath1)\n      .replace(/return true\\s*([;}]|\\}|$)/gi, filterPath2)\n      .replace(/return!0([;}]|\\}|$)/gi, filterPath2)\n      .replace(/return ([^;}]+?)\\s*([;}]|$)/gi,\n        \"{ if ((_cache[_i] = $1)) { _retval[_idx++] = $item$; }; continue _coreloop; }$2\");\n\n    // This preserves the function template code after JS compression,\n    // so that replace() commands still work as expected.\n    let tpl = [\n      //\"function(_items, _args, _cache) { \",\n      \"var _retval = [], _idx = 0; \",\n      \"var $item$, $args$ = _args; \",\n      \"_coreloop: \",\n      \"for (var _i = 0, _il = _items.length; _i < _il; _i++) { \",\n      \"$item$ = _items[_i]; \",\n      \"if (_cache[_i]) { \",\n      \"_retval[_idx++] = $item$; \",\n      \"continue _coreloop; \",\n      \"} \",\n      \"$filter$; \",\n      \"} \",\n      \"return _retval; \"\n      //\"}\"\n    ].join(\"\");\n    tpl = tpl.replace(/\\$filter\\$/gi, filterBody);\n    tpl = tpl.replace(/\\$item\\$/gi, filterInfo.params[0]);\n    tpl = tpl.replace(/\\$args\\$/gi, filterInfo.params[1]);\n\n    const fn: any = new Function(\"_items,_args,_cache\", tpl);\n    const fnName = \"compiledFilterWithCaching\";\n    fn.displayName = fnName;\n    fn.name = this.setFunctionName(fn, fnName);\n    return fn;\n  }\n\n  /**\n   * In ES5 we could set the function name on the fly but in ES6 this is forbidden and we need to set it through differently\n   * We can use Object.defineProperty and set it the property to writable, see MDN for reference\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n   * @param {*} fn\n   * @param {string} fnName\n   */\n  protected setFunctionName(fn: any, fnName: string) {\n    try {\n      Object.defineProperty(fn, 'name', {\n        writable: true,\n        value: fnName\n      });\n    } catch (err) {\n      fn.name = fnName;\n    }\n  }\n\n  protected uncompiledFilter(items: T[], args: any) {\n    let retval: any[] = [], idx = 0;\n\n    for (let i = 0, ii = items.length; i < ii; i++) {\n      if (this.filter(items[i], args)) {\n        retval[idx++] = items[i];\n      }\n    }\n\n    return retval;\n  }\n\n  protected uncompiledFilterWithCaching(items: T[], args: any, cache: any) {\n    let retval: any[] = [], idx = 0, item: T;\n\n    for (let i = 0, ii = items.length; i < ii; i++) {\n      item = items[i];\n      if (cache[i]) {\n        retval[idx++] = item;\n      } else if (this.filter(item, args)) {\n        retval[idx++] = item;\n        cache[i] = true;\n      }\n    }\n\n    return retval;\n  }\n\n  protected getFilteredAndPagedItems(items: T[]) {\n    if (this.filter) {\n      const batchFilter = (this._options.inlineFilters ? this.compiledFilter : this.uncompiledFilter) as Function;\n      const batchFilterWithCaching = (this._options.inlineFilters ? this.compiledFilterWithCaching : this.uncompiledFilterWithCaching) as Function;\n\n      if (this.refreshHints.isFilterNarrowing) {\n        this.filteredItems = batchFilter.call(this, this.filteredItems, this.filterArgs);\n      } else if (this.refreshHints.isFilterExpanding) {\n        this.filteredItems = batchFilterWithCaching.call(this, items, this.filterArgs, this.filterCache);\n      } else if (!this.refreshHints.isFilterUnchanged) {\n        this.filteredItems = batchFilter.call(this, items, this.filterArgs);\n      }\n    } else {\n      // special case:  if not filtering and not paging, the resulting\n      // rows collection needs to be a copy so that changes due to sort\n      // can be caught\n      this.filteredItems = this.pagesize ? items : items.concat();\n    }\n\n    // get the current page\n    let paged;\n    if (this.pagesize) {\n      if (this.filteredItems.length <= this.pagenum * this.pagesize) {\n        if (this.filteredItems.length === 0) {\n          this.pagenum = 0;\n        } else {\n          this.pagenum = Math.floor((this.filteredItems.length - 1) / this.pagesize);\n        }\n      }\n      paged = this.filteredItems.slice(this.pagesize * this.pagenum, this.pagesize * this.pagenum + this.pagesize);\n    } else {\n      paged = this.filteredItems;\n    }\n    return { totalRows: this.filteredItems.length, rows: paged };\n  }\n\n  protected getRowDiffs(rows: any[], newRows: any[]) {\n    let item, r, eitherIsNonData, diff: any[] = [];\n    let from = 0, to = Math.max(newRows.length, rows.length);\n\n    if (this.refreshHints && this.refreshHints.ignoreDiffsBefore) {\n      from = Math.max(0,\n        Math.min(newRows.length, this.refreshHints.ignoreDiffsBefore));\n    }\n\n    if (this.refreshHints && this.refreshHints.ignoreDiffsAfter) {\n      to = Math.min(newRows.length,\n        Math.max(0, this.refreshHints.ignoreDiffsAfter));\n    }\n\n    for (let i = from, rl = rows.length; i < to; i++) {\n      if (i >= rl) {\n        diff[diff.length] = i;\n      } else {\n        item = newRows[i];\n        r = rows[i];\n\n        if (!item || (this.groupingInfos.length && (eitherIsNonData = ((item as SlickNonDataItem).__nonDataRow) || (r.__nonDataRow)) &&\n          (item as SlickGroup_).__group !== r.__group ||\n          (item as SlickGroup_).__group && !item.equals(r))\n          || (eitherIsNonData &&\n            // no good way to compare totals since they are arbitrary DTOs\n            // deep object comparison is pretty expensive\n            // always considering them 'dirty' seems easier for the time being\n            ((item as SlickGroupTotals_).__groupTotals || r.__groupTotals))\n          || item[this.idProperty] != r[this.idProperty]\n          || (this.updated?.[item[this.idProperty]])\n        ) {\n          diff[diff.length] = i;\n        }\n      }\n    }\n    return diff;\n  }\n\n  protected recalc(_items: T[]) {\n    this.rowsById = null;\n\n    if (this.refreshHints.isFilterNarrowing != this.prevRefreshHints.isFilterNarrowing ||\n      this.refreshHints.isFilterExpanding != this.prevRefreshHints.isFilterExpanding) {\n      this.filterCache = [];\n    }\n\n    const filteredItems = this.getFilteredAndPagedItems(_items);\n    this.totalRows = filteredItems.totalRows;\n    let newRows: number[] = filteredItems.rows;\n\n    this.groups = [];\n    if (this.groupingInfos.length) {\n      this.groups = this.extractGroups(newRows);\n      if (this.groups.length) {\n        newRows = this.flattenGroupedRows(this.groups);\n      }\n    }\n\n    let diff = this.getRowDiffs(this.rows, newRows);\n\n    this.rows = newRows as any;\n\n    return diff;\n  }\n\n  refresh() {\n    if (this.suspend) {\n      return;\n    }\n\n    let previousPagingInfo = Utils.extend(true, {}, this.getPagingInfo());\n\n    let countBefore = this.rows.length;\n    let totalRowsBefore = this.totalRows;\n\n    let diff = this.recalc(this.items); // pass as direct refs to avoid closure perf hit\n\n    // if the current page is no longer valid, go to last page and recalc\n    // we suffer a performance penalty here, but the main loop (recalc) remains highly optimized\n    if (this.pagesize && this.totalRows < this.pagenum * this.pagesize) {\n      this.pagenum = Math.max(0, Math.ceil(this.totalRows / this.pagesize) - 1);\n      diff = this.recalc(this.items);\n    }\n\n    this.updated = null;\n    this.prevRefreshHints = this.refreshHints;\n    this.refreshHints = {};\n\n    if (totalRowsBefore !== this.totalRows) {\n      // use the previously saved paging info\n      if (this.onBeforePagingInfoChanged.notify(previousPagingInfo, null, this).getReturnValue() !== false) {\n        this.onPagingInfoChanged.notify(this.getPagingInfo(), null, this);\n      }\n    }\n    if (countBefore !== this.rows.length) {\n      this.onRowCountChanged.notify({ previous: countBefore, current: this.rows.length, itemCount: this.items.length, dataView: this, callingOnRowsChanged: (diff.length > 0) }, null, this);\n    }\n    if (diff.length > 0) {\n      this.onRowsChanged.notify({ rows: diff, itemCount: this.items.length, dataView: this, calledOnRowCountChanged: (countBefore !== this.rows.length) }, null, this);\n    }\n    if (countBefore !== this.rows.length || diff.length > 0) {\n      this.onRowsOrCountChanged.notify({\n        rowsDiff: diff, previousRowCount: countBefore, currentRowCount: this.rows.length, itemCount: this.items.length,\n        rowCountChanged: countBefore !== this.rows.length, rowsChanged: diff.length > 0, dataView: this\n      }, null, this);\n    }\n  }\n\n  /**\n   * Wires the grid and the DataView together to keep row selection tied to item ids.\n   * This is useful since, without it, the grid only knows about rows, so if the items\n   * move around, the same rows stay selected instead of the selection moving along\n   * with the items.\n   *\n   * NOTE:  This doesn't work with cell selection model.\n   *\n   * @param {SlickGrid} grid - The grid to sync selection with.\n   * @param {Boolean} preserveHidden - Whether to keep selected items that go out of the\n   *     view due to them getting filtered out.\n   * @param {Boolean} [preserveHiddenOnSelectionChange] - Whether to keep selected items\n   *     that are currently out of the view (see preserveHidden) as selected when selection\n   *     changes.\n   * @return {Event} An event that notifies when an internal list of selected row ids\n   *     changes.  This is useful since, in combination with the above two options, it allows\n   *     access to the full list selected row ids, and not just the ones visible to the grid.\n   * @method syncGridSelection\n   */\n  syncGridSelection(grid: SlickGrid, preserveHidden: boolean, preserveHiddenOnSelectionChange?: boolean) {\n    this._grid = grid;\n    let inHandler;\n    this.selectedRowIds = this.mapRowsToIds(grid.getSelectedRows());\n\n    /** @param {Array} rowIds */\n    const setSelectedRowIds = (rowIds: Array<number | string> | false) => {\n      if (rowIds === false) {\n        this.selectedRowIds = [];\n      } else {\n        if (this.selectedRowIds!.sort().join(',') !== rowIds.sort().join(',')) {\n          this.selectedRowIds = rowIds;\n        }\n      }\n    }\n\n    const update = () => {\n      if ((this.selectedRowIds || []).length > 0 && !inHandler) {\n        inHandler = true;\n        let selectedRows = this.mapIdsToRows(this.selectedRowIds || []);\n        if (!preserveHidden) {\n          let selectedRowsChangedArgs = {\n            grid: this._grid,\n            ids: this.mapRowsToIds(selectedRows),\n            rows: selectedRows,\n            dataView: this\n          };\n          this.preSelectedRowIdsChangeFn!(selectedRowsChangedArgs);\n          this.onSelectedRowIdsChanged.notify(Object.assign(selectedRowsChangedArgs, {\n            selectedRowIds: this.selectedRowIds,\n            filteredIds: this.getAllSelectedFilteredIds(),\n          }), new SlickEventData(), this);\n        }\n        grid.setSelectedRows(selectedRows);\n        inHandler = false;\n      }\n    }\n\n    grid.onSelectedRowsChanged.subscribe((_e: Event, args: { rows: number[]; }) => {\n      if (!inHandler) {\n        let newSelectedRowIds = this.mapRowsToIds(args.rows);\n        let selectedRowsChangedArgs = {\n          grid: this._grid,\n          ids: newSelectedRowIds,\n          rows: args.rows,\n          added: true,\n          dataView: this\n        };\n        this.preSelectedRowIdsChangeFn!(selectedRowsChangedArgs);\n        this.onSelectedRowIdsChanged.notify(Object.assign(selectedRowsChangedArgs, {\n          selectedRowIds: this.selectedRowIds,\n          filteredIds: this.getAllSelectedFilteredIds(),\n        }), new SlickEventData(), this);\n      }\n    });\n\n    this.preSelectedRowIdsChangeFn = (args: { ids: Array<number | string>; added?: boolean; }) => {\n      if (!inHandler) {\n        inHandler = true;\n        const overwrite = (typeof args.added === typeof undefined);\n\n        if (overwrite) {\n          setSelectedRowIds(args.ids);\n        } else {\n          let rowIds: Array<number | string>;\n          if (args.added) {\n            if (preserveHiddenOnSelectionChange && grid.getOptions().multiSelect) {\n              // find the ones that are hidden\n              let hiddenSelectedRowIds = this.selectedRowIds?.filter((id) => this.getRowById(id) === undefined);\n              // add the newly selected ones\n              rowIds = hiddenSelectedRowIds!.concat(args.ids);\n            } else {\n              rowIds = args.ids;\n            }\n          } else {\n            if (preserveHiddenOnSelectionChange && grid.getOptions().multiSelect) {\n              // remove rows whose id is on the list\n              rowIds = this.selectedRowIds!.filter((id) => args.ids.indexOf(id) === -1);\n            } else {\n              rowIds = [];\n            }\n          }\n          setSelectedRowIds(rowIds);\n        }\n        inHandler = false;\n      }\n    };\n\n    this.onRowsOrCountChanged.subscribe(update.bind(this));\n\n    return this.onSelectedRowIdsChanged;\n  }\n\n  /**\n   * Get all selected IDs\n   * Note: when using Pagination it will also include hidden selections assuming `preserveHiddenOnSelectionChange` is set to true.\n   */\n  getAllSelectedIds() {\n    return this.selectedRowIds;\n  }\n\n  /**\n   * Get all selected filtered IDs (similar to \"getAllSelectedIds\" but only return filtered data)\n   * Note: when using Pagination it will also include hidden selections assuming `preserveHiddenOnSelectionChange` is set to true.\n   */\n  getAllSelectedFilteredIds() {\n    return this.getAllSelectedFilteredItems().map((item) => item[this.idProperty]);\n  }\n\n  /**\n   * Set current row selected IDs array (regardless of Pagination)\n   * NOTE: This will NOT change the selection in the grid, if you need to do that then you still need to call\n   * \"grid.setSelectedRows(rows)\"\n   * @param {Array} selectedIds - list of IDs which have been selected for this action\n   * @param {Object} options\n   *  - `isRowBeingAdded`: defaults to true, are the new selected IDs being added (or removed) as new row selections\n   *  - `shouldTriggerEvent`: defaults to true, should we trigger `onSelectedRowIdsChanged` event\n   *  - `applyRowSelectionToGrid`: defaults to true, should we apply the row selections to the grid in the UI\n   */\n  setSelectedIds(selectedIds: Array<number | string>, options: Partial<{ isRowBeingAdded: boolean; shouldTriggerEvent: boolean; applyRowSelectionToGrid: boolean; }>) {\n    let isRowBeingAdded = options?.isRowBeingAdded;\n    const shouldTriggerEvent = options?.shouldTriggerEvent;\n    const applyRowSelectionToGrid = options?.applyRowSelectionToGrid;\n\n    if (isRowBeingAdded !== false) {\n      isRowBeingAdded = true;\n    }\n    const selectedRows = this.mapIdsToRows(selectedIds);\n    const selectedRowsChangedArgs = {\n      grid: this._grid,\n      ids: selectedIds,\n      rows: selectedRows,\n      added: isRowBeingAdded,\n      dataView: this\n    };\n    this.preSelectedRowIdsChangeFn?.(selectedRowsChangedArgs);\n\n    if (shouldTriggerEvent !== false) {\n      this.onSelectedRowIdsChanged.notify(Object.assign(selectedRowsChangedArgs, {\n        \"selectedRowIds\": this.selectedRowIds,\n        \"filteredIds\": this.getAllSelectedFilteredIds(),\n      }), new SlickEventData(), this);\n    }\n\n    // should we also apply the row selection in to the grid (UI) as well?\n    if (applyRowSelectionToGrid !== false && this._grid) {\n      this._grid.setSelectedRows(selectedRows);\n    }\n  }\n\n  /**\n   * Get all selected dataContext items\n   * Note: when using Pagination it will also include hidden selections assuming `preserveHiddenOnSelectionChange` is set to true.\n   */\n  getAllSelectedItems() {\n    const selectedData: T[] = [];\n    const selectedIds = this.getAllSelectedIds();\n    selectedIds!.forEach((id) => {\n      selectedData.push(this.getItemById(id));\n    });\n    return selectedData;\n  }\n\n  /**\n  * Get all selected filtered dataContext items (similar to \"getAllSelectedItems\" but only return filtered data)\n  * Note: when using Pagination it will also include hidden selections assuming `preserveHiddenOnSelectionChange` is set to true.\n  */\n  getAllSelectedFilteredItems() {\n    if (!Array.isArray(this.selectedRowIds)) {\n      return [];\n    }\n\n    const intersection = this.filteredItems.filter((a) => this.selectedRowIds!.some((b) => a[this.idProperty] === b));\n    return intersection || [];\n  }\n\n  syncGridCellCssStyles(grid: SlickGrid, key: string) {\n    let hashById: any;\n    let inHandler: boolean;\n\n    const storeCellCssStyles = (hash: CssStyleHash) => {\n      hashById = {};\n      for (let row in hash) {\n        let id = this.rows[row][this.idProperty];\n        hashById[id] = hash[row];\n      }\n    }\n\n    // since this method can be called after the cell styles have been set,\n    // get the existing ones right away\n    storeCellCssStyles(grid.getCellCssStyles(key));\n\n    const update = () => {\n      if (hashById) {\n        inHandler = true;\n        this.ensureRowsByIdCache();\n        let newHash = {};\n        for (let id in hashById) {\n          let row = this.rowsById[id];\n          if (row != undefined) {\n            newHash[row] = hashById[id];\n          }\n        }\n        grid.setCellCssStyles(key, newHash);\n        inHandler = false;\n      }\n    }\n\n    grid.onCellCssStylesChanged.subscribe((e, args) => {\n      if (inHandler) { return; }\n      if (key != args.key) { return; }\n      if (args.hash) {\n        storeCellCssStyles(args.hash);\n      } else {\n        grid.onCellCssStylesChanged.unsubscribe();\n        this.onRowsOrCountChanged.unsubscribe(update);\n      }\n    });\n\n    this.onRowsOrCountChanged.subscribe(update.bind(this));\n  }\n}\n\nexport class AvgAggregator<T = any> implements Aggregator {\n  private _nonNullCount = 0;\n  private _sum = 0;\n  private _field: number | string;\n  private _type = 'avg';\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  get field(): number | string {\n    return this._field;\n  }\n\n  get type(): string {\n    return this._type;\n  }\n\n  init(): void {\n    this._nonNullCount = 0;\n    this._sum = 0;\n  }\n\n  accumulate(item: T) {\n    const val = (item && item.hasOwnProperty(this._field)) ? item[this._field] : null;\n    if (val !== null && val !== '' && !isNaN(val)) {\n      this._nonNullCount++;\n      this._sum += parseFloat(val);\n    }\n  }\n\n  storeResult(groupTotals: SlickGroupTotals_) {\n    if (!groupTotals || groupTotals[this._type] === undefined) {\n      groupTotals[this._type] = {};\n    }\n    if (this._nonNullCount !== 0) {\n      groupTotals[this._type][this._field] = this._sum / this._nonNullCount;\n    }\n  }\n}\n\nexport class MinAggregator<T = any> implements Aggregator {\n  private _min: number | null = null;\n  private _field: number | string;\n  private _type = 'min';\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  get field(): number | string {\n    return this._field;\n  }\n\n  get type(): string {\n    return this._type;\n  }\n\n  init() {\n    this._min = null;\n  }\n\n  accumulate(item: T) {\n    const val = (item && item.hasOwnProperty(this._field)) ? item[this._field] : null;\n    if (val !== null && val !== '' && !isNaN(val)) {\n      if (this._min === null || val < this._min) {\n        this._min = parseFloat(val);\n      }\n    }\n  }\n\n  storeResult(groupTotals: SlickGroupTotals_) {\n    if (!groupTotals || groupTotals[this._type] === undefined) {\n      groupTotals[this._type] = {};\n    }\n    groupTotals[this._type][this._field] = this._min;\n  }\n}\n\nexport class MaxAggregator<T = any> implements Aggregator {\n  private _max: number | null = null;\n  private _field: number | string;\n  private _type = 'max';\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  get field(): number | string {\n    return this._field;\n  }\n\n  get type(): string {\n    return this._type;\n  }\n\n  init(): void {\n    this._max = null;\n  }\n\n  accumulate(item: T) {\n    const val = (item && item.hasOwnProperty(this._field)) ? item[this._field] : null;\n    if (val !== null && val !== '' && !isNaN(val)) {\n      if (this._max === null || val > this._max) {\n        this._max = parseFloat(val);\n      }\n    }\n  }\n\n  storeResult(groupTotals: SlickGroupTotals_) {\n    if (!groupTotals || groupTotals[this._type] === undefined) {\n      groupTotals[this._type] = {};\n    }\n    groupTotals[this._type][this._field] = this._max;\n  }\n}\n\nexport class SumAggregator<T = any> implements Aggregator {\n  private _sum = 0;\n  private _field: number | string;\n  private _type = 'sum';\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  get field(): number | string {\n    return this._field;\n  }\n\n  get type(): string {\n    return this._type;\n  }\n\n  init() {\n    this._sum = 0;\n  }\n\n  accumulate(item: T) {\n    const val = (item && item.hasOwnProperty(this._field)) ? item[this._field] : null;\n    if (val !== null && val !== '' && !isNaN(val)) {\n      this._sum += parseFloat(val);\n    }\n  }\n\n  storeResult(groupTotals: SlickGroupTotals_) {\n    if (!groupTotals || groupTotals[this._type] === undefined) {\n      groupTotals[this._type] = {};\n    }\n    groupTotals[this._type][this._field] = this._sum;\n  }\n}\n\nexport class CountAggregator implements Aggregator {\n  private _field: number | string;\n  private _type = 'count';\n\n  constructor(field: number | string) {\n    this._field = field;\n  }\n\n  get field(): number | string {\n    return this._field;\n  }\n\n  get type(): string {\n    return this._type;\n  }\n\n  init(): void {\n  }\n\n  storeResult(groupTotals: SlickGroupTotals_) {\n    if (!groupTotals || groupTotals[this._type] === undefined) {\n      groupTotals[this._type] = {};\n    }\n    groupTotals[this._type][this._field] = groupTotals.group.rows.length;\n  }\n}\n\n// TODO:  add more built-in aggregators\n// TODO:  merge common aggregators in one to prevent needles iterating\n\nexport const Aggregators = {\n  Avg: AvgAggregator,\n  Min: MinAggregator,\n  Max: MaxAggregator,\n  Sum: SumAggregator,\n  Count: CountAggregator\n};\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  window.Slick.Data = window.Slick.Data || {};\n  window.Slick.Data.DataView = SlickDataView;\n  window.Slick.Data.Aggregators = Aggregators;\n}", "import type { Editor, EditorArguments, EditorValidationResult } from './models/index';\nimport { keyCode as keyCode_, Utils as Utils_ } from './slick.core';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst keyCode = (IIFE_ONLY ? Slick.keyCode : keyCode_) as typeof keyCode_;\nconst Utils = (IIFE_ONLY ? Slick.Utils : Utils_) as typeof Utils_;\n\n/***\n * Contains basic SlickGrid editors.\n * @module Editors\n * @namespace Slick\n */\n\nexport class TextEditor implements Editor {\n  protected input!: HTMLInputElement;\n  protected defaultValue?: number | string;\n  protected navOnLR?: boolean;\n\n  constructor(protected readonly args: EditorArguments) {\n    this.init();\n  }\n\n  init() {\n    this.navOnLR = this.args.grid.getOptions().editorCellNavOnLRKeys;\n    this.input = Utils.createDomElement('input', { type: 'text', className: 'editor-text' }, this.args.container);\n    this.input.addEventListener('keydown', (this.navOnLR ? handleKeydownLRNav : handleKeydownLRNoNav) as EventListener);\n    this.input.focus();\n    this.input.select();\n\n    // don't show Save/Cancel when it's a Composite Editor and also trigger a onCompositeEditorChange event when input changes\n    if (this.args.compositeEditorOptions) {\n      this.input.addEventListener('change', this.onChange.bind(this));\n    }\n  }\n\n  onChange() {\n    let activeCell = this.args.grid.getActiveCell();\n\n    // when valid, we'll also apply the new value to the dataContext item object\n    if (this.validate().valid) {\n      this.applyValue(this.args.item, this.serializeValue());\n    }\n    this.applyValue(this.args.compositeEditorOptions.formValues, this.serializeValue());\n    this.args.grid.onCompositeEditorChange.notify({\n      row: activeCell?.row ?? 0,\n      cell: activeCell?.cell ?? 0,\n      item: this.args.item,\n      column: this.args.column,\n      formValues: this.args.compositeEditorOptions.formValues,\n      grid: this.args.grid,\n      editors: this.args.compositeEditorOptions.editors\n    });\n  }\n\n  destroy() {\n    this.input.removeEventListener('keydown', (this.navOnLR ? handleKeydownLRNav : handleKeydownLRNoNav) as EventListener);\n    this.input.removeEventListener('change', this.onChange.bind(this))\n    this.input.remove();\n  }\n\n  focus() {\n    this.input.focus();\n  }\n\n  getValue() {\n    return this.input.value;\n  }\n\n  setValue(val) {\n    this.input.value = val;\n  }\n\n  loadValue(item) {\n    this.defaultValue = item[this.args.column.field] || '';\n    this.input.value = String(this.defaultValue ?? '');\n    this.input.defaultValue = String(this.defaultValue ?? '');\n    this.input.select();\n  }\n\n  serializeValue() {\n    return this.input.value;\n  }\n\n  applyValue(item: any, state: any) {\n    item[this.args.column.field] = state;\n  }\n\n  isValueChanged() {\n    return (!(this.input.value === '' && this.defaultValue == null)) && (this.input.value != this.defaultValue);\n  }\n\n  validate() {\n    if (this.args.column.validator) {\n      let validationResults = this.args.column.validator(this.input.value, this.args);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    }\n\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n}\n\nexport class IntegerEditor implements Editor {\n  protected input!: HTMLInputElement;\n  protected defaultValue?: string | number;\n  protected navOnLR?: boolean;\n\n  constructor(protected readonly args: EditorArguments) {\n    this.init();\n  }\n\n  init() {\n    this.navOnLR = this.args.grid.getOptions().editorCellNavOnLRKeys;\n    this.input = Utils.createDomElement('input', { type: 'text', className: 'editor-text' }, this.args.container);\n    this.input.addEventListener('keydown', (this.navOnLR ? handleKeydownLRNav : handleKeydownLRNoNav) as EventListener);\n    this.input.focus()\n    this.input.select();\n\n    // trigger onCompositeEditorChange event when input changes and it's a Composite Editor\n    if (this.args.compositeEditorOptions) {\n      this.input.addEventListener('change', this.onChange.bind(this));\n    }\n  }\n\n  onChange() {\n    let activeCell = this.args.grid.getActiveCell();\n\n    // when valid, we'll also apply the new value to the dataContext item object\n    if (this.validate().valid) {\n      this.applyValue(this.args.item, this.serializeValue());\n    }\n    this.applyValue(this.args.compositeEditorOptions.formValues, this.serializeValue());\n    this.args.grid.onCompositeEditorChange.notify({\n      row: activeCell?.row ?? 0,\n      cell: activeCell?.cell ?? 0,\n      item: this.args.item,\n      column: this.args.column,\n      formValues: this.args.compositeEditorOptions.formValues,\n      grid: this.args.grid,\n      editors: this.args.compositeEditorOptions.editors\n    });\n  }\n\n  destroy() {\n    this.input.removeEventListener('keydown', (this.navOnLR ? handleKeydownLRNav : handleKeydownLRNoNav) as EventListener);\n    this.input.removeEventListener('change', this.onChange.bind(this))\n    this.input.remove();\n  }\n\n  focus() {\n    this.input.focus();\n  }\n\n  loadValue(item) {\n    this.defaultValue = item[this.args.column.field];\n    this.input.value = String(this.defaultValue ?? '');\n    this.input.defaultValue = String(this.defaultValue ?? '');\n    this.input.select();\n  }\n\n  serializeValue() {\n    return parseInt(this.input.value, 10) || 0;\n  }\n\n  applyValue(item: any, state: any) {\n    item[this.args.column.field] = state;\n  }\n\n  isValueChanged() {\n    return (!(this.input.value === '' && this.defaultValue == null)) && (this.input.value != this.defaultValue);\n  }\n\n  validate() {\n    if (isNaN(this.input.value as unknown as number)) {\n      return {\n        valid: false,\n        msg: 'Please enter a valid integer'\n      };\n    }\n\n    if (this.args.column.validator) {\n      let validationResults = this.args.column.validator(this.input.value, this.args);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    }\n\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n}\n\nexport class FloatEditor implements Editor {\n  protected input!: HTMLInputElement;\n  protected defaultValue?: string | number;\n  protected navOnLR?: boolean;\n\n  /** Default number of decimal places to use with FloatEditor */\n  static DefaultDecimalPlaces?: number = undefined;\n\n  /** Should we allow empty value when using FloatEditor */\n  static AllowEmptyValue = false;\n\n  constructor(protected readonly args: EditorArguments) {\n    this.init();\n  }\n\n  init() {\n    this.navOnLR = this.args.grid.getOptions().editorCellNavOnLRKeys;\n    this.input = Utils.createDomElement('input', { type: 'text', className: 'editor-text' }, this.args.container);\n    this.input.addEventListener('keydown', (this.navOnLR ? handleKeydownLRNav : handleKeydownLRNoNav) as EventListener);\n    this.input.focus()\n    this.input.select();\n\n    // trigger onCompositeEditorChange event when input changes and it's a Composite Editor\n    if (this.args.compositeEditorOptions) {\n      this.input.addEventListener('change', this.onChange.bind(this));\n    }\n  };\n\n  onChange() {\n    let activeCell = this.args.grid.getActiveCell();\n\n    // when valid, we'll also apply the new value to the dataContext item object\n    if (this.validate().valid) {\n      this.applyValue(this.args.item, this.serializeValue());\n    }\n    this.applyValue(this.args.compositeEditorOptions.formValues, this.serializeValue());\n    this.args.grid.onCompositeEditorChange.notify({\n      row: activeCell?.row ?? 0,\n      cell: activeCell?.cell ?? 0,\n      item: this.args.item,\n      column: this.args.column,\n      formValues: this.args.compositeEditorOptions.formValues,\n      grid: this.args.grid,\n      editors: this.args.compositeEditorOptions.editors\n    });\n  };\n\n  destroy() {\n    this.input.removeEventListener('keydown', (this.navOnLR ? handleKeydownLRNav : handleKeydownLRNoNav) as EventListener);\n    this.input.removeEventListener('change', this.onChange.bind(this))\n    this.input.remove();\n  };\n\n  focus() {\n    this.input.focus();\n  }\n\n  getDecimalPlaces() {\n    // returns the number of fixed decimal places or null\n    let rtn: number | undefined = this.args.column.editorFixedDecimalPlaces;\n    if (typeof rtn == 'undefined') {\n      rtn = FloatEditor.DefaultDecimalPlaces;\n    }\n    return (!rtn && rtn !== 0 ? null : rtn);\n  }\n\n  loadValue(item) {\n    this.defaultValue = item[this.args.column.field];\n\n    let decPlaces = this.getDecimalPlaces();\n    if (decPlaces !== null\n      && (this.defaultValue || this.defaultValue === 0)\n      && (this.defaultValue as number)?.toFixed) {\n      this.defaultValue = (this.defaultValue as number).toFixed(decPlaces);\n    }\n\n    this.input.value = String(this.defaultValue ?? '');\n    this.input.defaultValue = String(this.defaultValue ?? '');\n    this.input.select();\n  }\n\n  serializeValue() {\n    let rtn: number | undefined = parseFloat(this.input.value);\n    if (FloatEditor.AllowEmptyValue) {\n      if (!rtn && rtn !== 0) {\n        rtn = undefined;\n      }\n    } else {\n      rtn = rtn || 0;\n    }\n\n    let decPlaces = this.getDecimalPlaces();\n    if (decPlaces !== null\n      && (rtn || rtn === 0)\n      && rtn.toFixed) {\n      rtn = parseFloat(rtn.toFixed(decPlaces));\n    }\n\n    return rtn as number;\n  }\n\n  applyValue(item: any, state: number | string) {\n    item[this.args.column.field] = state;\n  }\n\n  isValueChanged() {\n    return (!(this.input.value === '' && this.defaultValue == null)) && (this.input.value != this.defaultValue);\n  }\n\n  validate() {\n    if (isNaN(this.input.value as unknown as number)) {\n      return {\n        valid: false,\n        msg: 'Please enter a valid number'\n      };\n    }\n\n    if (this.args.column.validator) {\n      let validationResults = this.args.column.validator(this.input.value, this.args);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    }\n\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n}\n\nexport class FlatpickrEditor implements Editor {\n  protected input!: HTMLInputElement;\n  protected defaultValue?: string | number;\n  protected flatpickrInstance: any;\n\n  constructor(protected readonly args: EditorArguments) {\n    this.init();\n    if (typeof flatpickr === 'undefined') {\n      throw new Error('Flatpickr not loaded but required in SlickGrid.Editors, refer to Flatpickr documentation: https://flatpickr.js.org/getting-started/');\n    }\n  }\n\n  init() {\n    this.input = Utils.createDomElement('input', { type: 'text', className: 'editor-text' }, this.args.container);\n    this.input.focus();\n    this.input.select();\n    this.flatpickrInstance = flatpickr(this.input, {\n      closeOnSelect: true,\n      allowInput: true,\n      altInput: true,\n      altFormat: 'm/d/Y',\n      dateFormat: 'm/d/Y',\n      onChange: () => {\n        // trigger onCompositeEditorChange event when input changes and it's a Composite Editor\n        if (this.args.compositeEditorOptions) {\n          let activeCell = this.args.grid.getActiveCell();\n\n          // when valid, we'll also apply the new value to the dataContext item object\n          if (this.validate().valid) {\n            this.applyValue(this.args.item, this.serializeValue());\n          }\n          this.applyValue(this.args.compositeEditorOptions.formValues, this.serializeValue());\n          this.args.grid.onCompositeEditorChange.notify({\n            row: activeCell?.row ?? 0,\n            cell: activeCell?.cell ?? 0,\n            item: this.args.item,\n            column: this.args.column,\n            formValues: this.args.compositeEditorOptions.formValues,\n            grid: this.args.grid,\n            editors: this.args.compositeEditorOptions.editors\n          });\n        }\n      },\n    });\n\n    if (!this.args.compositeEditorOptions) {\n      setTimeout(() => {\n        this.show();\n        this.focus();\n      }, 50);\n    }\n\n    Utils.width(this.input, (Utils.width(this.input) as number) - (!this.args.compositeEditorOptions ? 18 : 28));\n  }\n\n  destroy() {\n    this.hide();\n    if (this.flatpickrInstance) {\n      this.flatpickrInstance.destroy();\n    }\n    this.input.remove();\n  }\n\n  show() {\n    if (!this.args.compositeEditorOptions && this.flatpickrInstance) {\n      this.flatpickrInstance.open();\n    }\n  }\n\n  hide() {\n    if (!this.args.compositeEditorOptions && this.flatpickrInstance) {\n      this.flatpickrInstance.close();\n    }\n  }\n\n  focus() {\n    this.input.focus();\n  }\n\n  loadValue(item) {\n    this.defaultValue = item[this.args.column.field];\n    this.input.value = String(this.defaultValue ?? '');\n    this.input.defaultValue = String(this.defaultValue ?? '');\n    this.input.select();\n    if (this.flatpickrInstance) {\n      this.flatpickrInstance.setDate(this.defaultValue);\n    }\n  }\n\n  serializeValue() {\n    return this.input.value;\n  }\n\n  applyValue(item: any, state: any) {\n    item[this.args.column.field] = state;\n  }\n\n  isValueChanged() {\n    return (!(this.input.value === '' && this.defaultValue == null)) && (this.input.value != this.defaultValue);\n  }\n\n  validate() {\n    if (this.args.column.validator) {\n      let validationResults = this.args.column.validator(this.input.value, this.args);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    }\n\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n}\n\nexport class YesNoSelectEditor implements Editor {\n  protected select!: HTMLSelectElement;\n  protected defaultValue?: string | number;\n\n  constructor(protected readonly args: EditorArguments) {\n    this.init();\n  }\n\n  init() {\n    this.select = Utils.createDomElement('select', { tabIndex: 0, className: 'editor-yesno' }, this.args.container);\n    Utils.createDomElement('option', { value: 'yes', textContent: 'Yes' }, this.select);\n    Utils.createDomElement('option', { value: 'no', textContent: 'No' }, this.select);\n\n    this.select.focus();\n\n    // trigger onCompositeEditorChange event when input changes and it's a Composite Editor\n    if (this.args.compositeEditorOptions) {\n      this.select.addEventListener('change', this.onChange.bind(this));\n    }\n  }\n\n  onChange() {\n    let activeCell = this.args.grid.getActiveCell();\n\n    // when valid, we'll also apply the new value to the dataContext item object\n    if (this.validate().valid) {\n      this.applyValue(this.args.item, this.serializeValue());\n    }\n    this.applyValue(this.args.compositeEditorOptions.formValues, this.serializeValue());\n    this.args.grid.onCompositeEditorChange.notify({\n      row: activeCell?.row ?? 0,\n      cell: activeCell?.cell ?? 0,\n      item: this.args.item,\n      column: this.args.column,\n      formValues: this.args.compositeEditorOptions.formValues,\n      grid: this.args.grid,\n      editors: this.args.compositeEditorOptions.editors\n    });\n  }\n\n  destroy() {\n    this.select.removeEventListener('change', this.onChange.bind(this))\n    this.select.remove();\n  }\n\n  focus() {\n    this.select.focus();\n  }\n\n  loadValue(item) {\n    this.select.value = ((this.defaultValue = item[this.args.column.field]) ? 'yes' : 'no');\n  }\n\n  serializeValue() {\n    return this.select.value == 'yes';\n  }\n\n  applyValue(item: any, state: any) {\n    item[this.args.column.field] = state;\n  }\n\n  isValueChanged() {\n    return this.select.value != this.defaultValue;\n  }\n\n  validate() {\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n}\n\nexport class CheckboxEditor implements Editor {\n  protected input!: HTMLInputElement;\n  protected defaultValue?: boolean;\n\n  constructor(protected readonly args: EditorArguments) {\n    this.init();\n  }\n\n  init() {\n    this.input = Utils.createDomElement('input', { className: 'editor-checkbox', type: 'checkbox', value: 'true' }, this.args.container);\n    this.input.focus();\n\n    // trigger onCompositeEditorChange event when input checkbox changes and it's a Composite Editor\n    if (this.args.compositeEditorOptions) {\n      this.input.addEventListener('change', this.onChange.bind(this));\n    }\n  };\n\n  onChange() {\n    let activeCell = this.args.grid.getActiveCell();\n\n    // when valid, we'll also apply the new value to the dataContext item object\n    if (this.validate().valid) {\n      this.applyValue(this.args.item, this.serializeValue());\n    }\n    this.applyValue(this.args.compositeEditorOptions.formValues, this.serializeValue());\n    this.args.grid.onCompositeEditorChange.notify({\n      row: activeCell?.row ?? 0,\n      cell: activeCell?.cell ?? 0,\n      item: this.args.item,\n      column: this.args.column,\n      formValues: this.args.compositeEditorOptions.formValues,\n      grid: this.args.grid,\n      editors: this.args.compositeEditorOptions.editors\n    });\n  };\n\n  destroy() {\n    this.input.removeEventListener('change', this.onChange.bind(this));\n    this.input.remove();\n  };\n\n  focus() {\n    this.input.focus();\n  };\n\n  loadValue(item: any) {\n    this.defaultValue = !!(item[this.args.column.field]);\n    if (this.defaultValue) {\n      this.input.checked = true;\n    } else {\n      this.input.checked = false;\n    }\n  };\n\n  serializeValue() {\n    return this.input.checked;\n  };\n\n  applyValue(item: any, state: any) {\n    item[this.args.column.field] = state;\n  }\n\n  isValueChanged() {\n    return (this.serializeValue() !== this.defaultValue);\n  }\n\n  validate(): EditorValidationResult {\n    return {\n      valid: true,\n      msg: null\n    };\n  }\n}\n\nexport class PercentCompleteEditor implements Editor {\n  protected input!: HTMLInputElement;\n  protected defaultValue?: number;\n  protected picker!: HTMLDivElement;\n  protected slider!: HTMLInputElement | null;\n\n  constructor(protected readonly args: EditorArguments) {\n    this.init();\n  }\n\n  sliderInputHandler(e: MouseEvent & { target: HTMLButtonElement }) {\n    this.input.value = e.target.value;\n  }\n\n  sliderChangeHandler() {\n    // trigger onCompositeEditorChange event when slider stops and it's a Composite Editor\n    if (this.args.compositeEditorOptions) {\n      let activeCell = this.args.grid.getActiveCell();\n\n      // when valid, we'll also apply the new value to the dataContext item object\n      if (this.validate().valid) {\n        this.applyValue(this.args.item, this.serializeValue());\n      }\n      this.applyValue(this.args.compositeEditorOptions.formValues, this.serializeValue());\n      this.args.grid.onCompositeEditorChange.notify({\n        row: activeCell?.row ?? 0,\n        cell: activeCell?.cell ?? 0,\n        item: this.args.item,\n        column: this.args.column,\n        formValues: this.args.compositeEditorOptions.formValues,\n        grid: this.args.grid,\n        editors: this.args.compositeEditorOptions.editors\n      });\n    }\n  }\n\n  init() {\n    this.input = Utils.createDomElement('input', { className: 'editor-percentcomplete', type: 'text' }, this.args.container);\n    Utils.width(this.input, this.args.container.clientWidth - 25);\n\n    this.picker = Utils.createDomElement('div', { className: 'editor-percentcomplete-picker' }, this.args.container);\n    Utils.createDomElement('span', { className: 'editor-percentcomplete-picker-icon' }, this.picker);\n    const containerHelper = Utils.createDomElement('div', { className: 'editor-percentcomplete-helper' }, this.picker);\n    const containerWrapper = Utils.createDomElement('div', { className: 'editor-percentcomplete-wrapper' }, containerHelper);\n    Utils.createDomElement('div', { className: 'editor-percentcomplete-slider' }, containerWrapper);\n    this.slider = Utils.createDomElement('input', { className: 'editor-percentcomplete-slider', type: 'range', value: String(this.defaultValue ?? '') }, containerWrapper);\n    const containerButtons = Utils.createDomElement('div', { className: 'editor-percentcomplete-buttons' }, containerWrapper);\n    Utils.createDomElement('button', { value: '0', className: 'slick-btn slick-btn-default', textContent: 'Not started' }, containerButtons);\n    containerButtons.appendChild(document.createElement('br'));\n    Utils.createDomElement('button', { value: '50', className: 'slick-btn slick-btn-default', textContent: 'In Progress' }, containerButtons);\n    containerButtons.appendChild(document.createElement('br'));\n    Utils.createDomElement('button', { value: '100', className: 'slick-btn slick-btn-default', textContent: 'Complete' }, containerButtons);\n\n    this.input.focus();\n    this.input.select();\n\n    this.slider.addEventListener('input', this.sliderInputHandler.bind(this) as EventListener);\n    this.slider.addEventListener('change', this.sliderChangeHandler.bind(this));\n\n    const buttons = this.picker.querySelectorAll('.editor-percentcomplete-buttons button');\n    [].forEach.call(buttons, (button: HTMLButtonElement) => {\n      button.addEventListener('click', this.onClick.bind(this) as EventListener);\n    });\n  };\n\n  onClick(e: MouseEvent & { target: HTMLButtonElement }) {\n    this.input.value = String(e.target.value ?? '');\n    this.slider!.value = String(e.target.value ?? '');\n  };\n\n  destroy() {\n    this.slider?.removeEventListener('input', this.sliderInputHandler.bind(this) as EventListener);\n    this.slider?.removeEventListener('change', this.sliderChangeHandler.bind(this));\n    this.picker.querySelectorAll('.editor-percentcomplete-buttons button')\n      .forEach(button => button.removeEventListener('click', this.onClick.bind(this) as EventListener));\n    this.input.remove();\n    this.picker.remove();\n  };\n\n  focus() {\n    this.input.focus();\n  };\n\n  loadValue(item) {\n    this.defaultValue = item[this.args.column.field];\n    this.slider!.value = String(this.defaultValue ?? '');\n    this.input.value = String(this.defaultValue);\n    this.input.select();\n  };\n\n  serializeValue() {\n    return parseInt(this.input.value, 10) || 0;\n  };\n\n  applyValue(item: any, state: any) {\n    item[this.args.column.field] = state;\n  };\n\n  isValueChanged() {\n    return (!(this.input.value === '' && this.defaultValue == null)) && ((parseInt(this.input.value as any, 10) || 0) != this.defaultValue);\n  };\n\n  validate(): EditorValidationResult {\n    if (isNaN(parseInt(this.input.value, 10))) {\n      return {\n        valid: false,\n        msg: 'Please enter a valid positive number'\n      };\n    }\n\n    return {\n      valid: true,\n      msg: null\n    };\n  };\n}\n\n/*\n * An example of a 'detached' editor.\n * The UI is added onto document BODY and .position(), .show() and .hide() are implemented.\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\n */\nexport class LongTextEditor implements Editor {\n  protected input!: HTMLTextAreaElement;\n  protected wrapper!: HTMLDivElement;\n  protected defaultValue?: string;\n  protected selectionStart = 0;\n\n  constructor(protected readonly args: EditorArguments) {\n    this.init();\n  }\n\n  init() {\n    let compositeEditorOptions = this.args.compositeEditorOptions;\n    this.args.grid.getOptions().editorCellNavOnLRKeys;\n    let container = compositeEditorOptions ? this.args.container : document.body;\n\n    this.wrapper = Utils.createDomElement('div', { className: 'slick-large-editor-text' }, container);\n    if (compositeEditorOptions) {\n      this.wrapper.style.position = 'relative';\n      Utils.setStyleSize(this.wrapper, 'padding', 0);\n      Utils.setStyleSize(this.wrapper, 'border', 0);\n    } else {\n      this.wrapper.style.position = 'absolute';\n    }\n\n    this.input = Utils.createDomElement('textarea', { rows: 5, style: { background: 'white', width: '250px', height: '80px', border: '0', outline: '0' } }, this.wrapper);\n\n    // trigger onCompositeEditorChange event when input changes and it's a Composite Editor\n    if (compositeEditorOptions) {\n      this.input.addEventListener('change', this.onChange.bind(this));\n    } else {\n      const btnContainer = Utils.createDomElement('div', { style: 'text-align:right' }, this.wrapper);\n      Utils.createDomElement('button', { id: 'save', className: 'slick-btn slick-btn-primary', textContent: 'Save' }, btnContainer);\n      Utils.createDomElement('button', { id: 'cancel', className: 'slick-btn slick-btn-default', textContent: 'Cancel' }, btnContainer);\n\n      this.wrapper.querySelector('#save')!.addEventListener('click', this.save.bind(this));\n      this.wrapper.querySelector('#cancel')!.addEventListener('click', this.cancel.bind);\n      this.input.addEventListener('keydown', this.handleKeyDown.bind(this) as EventListener);\n      this.position(this.args.position);\n    }\n\n    this.input.focus();\n    this.input.select();\n  };\n\n  onChange() {\n    let activeCell = this.args.grid.getActiveCell();\n\n    // when valid, we'll also apply the new value to the dataContext item object\n    if (this.validate().valid) {\n      this.applyValue(this.args.item, this.serializeValue());\n    }\n    this.applyValue(this.args.compositeEditorOptions.formValues, this.serializeValue());\n    this.args.grid.onCompositeEditorChange.notify({\n      row: activeCell?.row ?? 0,\n      cell: activeCell?.cell ?? 0,\n      item: this.args.item,\n      column: this.args.column,\n      formValues: this.args.compositeEditorOptions.formValues,\n      grid: this.args.grid,\n      editors: this.args.compositeEditorOptions.editors\n    });\n  };\n\n  handleKeyDown(e: KeyboardEvent & { target: HTMLInputElement }) {\n    if (e.which == keyCode.ENTER && e.ctrlKey) {\n      this.save();\n    } else if (e.which == keyCode.ESCAPE) {\n      e.preventDefault();\n      this.cancel();\n    } else if (e.which == keyCode.TAB && e.shiftKey) {\n      e.preventDefault();\n      this.args.grid.navigatePrev();\n    } else if (e.which == keyCode.TAB) {\n      e.preventDefault();\n      this.args.grid.navigateNext();\n    } else if (e.which == keyCode.LEFT || e.which == keyCode.RIGHT) {\n      if (this.args.grid.getOptions().editorCellNavOnLRKeys) {\n        let cursorPosition = this.selectionStart;\n        let textLength = e.target.value.length;\n        if (e.keyCode === keyCode.LEFT && cursorPosition === 0) {\n          this.args.grid.navigatePrev();\n        }\n        if (e.keyCode === keyCode.RIGHT && cursorPosition >= textLength - 1) {\n          this.args.grid.navigateNext();\n        }\n      }\n    }\n  };\n\n  save() {\n    const gridOptions = this.args.grid.getOptions() || {};\n    if (gridOptions.autoCommitEdit) {\n      this.args.grid.getEditorLock().commitCurrentEdit();\n    } else {\n      this.args.commitChanges();\n    }\n  };\n\n  cancel() {\n    this.input.value = String(this.defaultValue ?? '');\n    this.args.cancelChanges();\n  };\n\n  hide() {\n    Utils.hide(this.wrapper);\n  };\n\n  show() {\n    Utils.show(this.wrapper);\n  };\n\n  position(position) {\n    Utils.setStyleSize(this.wrapper, 'top', position.top - 5);\n    Utils.setStyleSize(this.wrapper, 'left', position.left - 2);\n  };\n\n  destroy() {\n    if (this.args.compositeEditorOptions) {\n      this.input.removeEventListener('change', this.onChange.bind(this));\n    } else {\n      this.wrapper.querySelector('#save')!.removeEventListener('click', this.save.bind(this));\n      this.wrapper.querySelector('#cancel')!.removeEventListener('click', this.cancel.bind(this));\n      this.input.removeEventListener('keydown', this.handleKeyDown.bind(this) as EventListener);\n    }\n    this.wrapper.remove();\n  };\n\n  focus() {\n    this.input.focus();\n  };\n\n  loadValue(item) {\n    this.input.value = this.defaultValue = item[this.args.column.field];\n    this.input.select();\n  };\n\n  serializeValue() {\n    return this.input.value;\n  };\n\n  applyValue(item: any, state: any) {\n    item[this.args.column.field] = state;\n  };\n\n  isValueChanged() {\n    return (!(this.input.value === '' && this.defaultValue == null)) && (this.input.value != this.defaultValue);\n  };\n\n  validate() {\n    if (this.args.column.validator) {\n      let validationResults = this.args.column.validator(this.input.value, this.args);\n      if (!validationResults.valid) {\n        return validationResults;\n      }\n    }\n\n    return {\n      valid: true,\n      msg: null\n    };\n  };\n}\n\n/*\n * Depending on the value of Grid option 'editorCellNavOnLRKeys', us\n * Navigate to the cell on the left if the cursor is at the beginning of the input string\n * and to the right cell if it's at the end. Otherwise, move the cursor within the text\n */\nfunction handleKeydownLRNav(e: KeyboardEvent & { target: HTMLInputElement; selectionStart: number; }) {\n  let cursorPosition = e.selectionStart;\n  let textLength = e.target.value.length;\n  if ((e.keyCode === keyCode.LEFT && cursorPosition > 0) ||\n    e.keyCode === keyCode.RIGHT && cursorPosition < textLength - 1) {\n    e.stopImmediatePropagation();\n  }\n}\n\nfunction handleKeydownLRNoNav(e) {\n  if (e.keyCode === keyCode.LEFT || e.keyCode === keyCode.RIGHT) {\n    e.stopImmediatePropagation();\n  }\n}\n\nexport const Editors = {\n  Text: TextEditor,\n  Integer: IntegerEditor,\n  Float: FloatEditor,\n  Flatpickr: FlatpickrEditor,\n  YesNoSelect: YesNoSelectEditor,\n  Checkbox: CheckboxEditor,\n  PercentComplete: PercentCompleteEditor,\n  LongText: LongTextEditor\n};\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(Slick, {\n    Editors\n  });\n}\n\n", "import type { Formatter } from './models/index';\nimport { Utils as Utils_ } from './slick.core';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst Utils = (IIFE_ONLY ? Slick.Utils : Utils_) as typeof Utils_;\n\n/***\n * Contains basic SlickGrid formatters.\n *\n * NOTE:  These are merely examples.  You will most likely need to implement something more\n *        robust/extensible/localizable/etc. for your use!\n *\n * @module Formatters\n * @namespace Slick\n */\n\nexport const PercentCompleteFormatter: Formatter = (_row, _cell, value) => {\n  if (value == null || value === '') {\n    return '-';\n  } else if (value < 50) {\n    return `<span style=\"color:red;font-weight:bold;\">${value}%</span>`;\n  } else {\n    return `<span style=\"color:green\">${value}%</span>`;\n  }\n}\n\nexport const PercentCompleteBarFormatter: Formatter = (_row, _cell, value) => {\n  if (value == null || value === '') {\n    return '';\n  }\n\n  var color;\n\n  if (value < 30) {\n    color = 'red';\n  } else if (value < 70) {\n    color = 'silver';\n  } else {\n    color = 'green';\n  }\n\n  return `<span class=\"percent-complete-bar\" style=\"background:${color};width:${value}%\" title=\"${value}%\"></span>`;\n}\n\nexport const YesNoFormatter: Formatter = (_row, _cell, value) => {\n  return value ? 'Yes' : 'No';\n}\n\nexport const CheckboxFormatter: Formatter = (_row, _cell, value) => {\n  return `<span class=\"sgi sgi-checkbox-${value ? 'intermediate' : 'blank-outline'}\"></span>`;\n}\n\nexport const CheckmarkFormatter: Formatter = (_row, _cell, value) => {\n  return value ? `<span class=\"sgi sgi-check\"></span>` : '';\n}\n\nexport const Formatters = {\n  PercentComplete: PercentCompleteFormatter,\n  PercentCompleteBar: PercentCompleteBarFormatter,\n  YesNo: YesNoFormatter,\n  Checkmark: CheckmarkFormatter,\n  Checkbox: CheckboxFormatter\n};\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(Slick, {\n    Formatters\n  });\n}\n\n", "import type { DraggableOption, MouseWheelOption, ResizableOption } from './models/index';\nimport { Utils as Utils_ } from './slick.core';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst Utils = (IIFE_ONLY ? Slick.Utils : Utils_) as typeof Utils_;\n\n/***\n * Interactions, add basic behaviors to any element.\n * All the packages are written in pure vanilla JS and supports both mouse & touch events.\n * @module Interactions\n * @namespace Slick\n */\n\n/**\n * Draggable Class, enables dragging functionality for any element for example cell & row selections.\n * Note that mouse/touch start is on the specified container element but all other events are on the document body.\n * code refs:\n *   https://betterprogramming.pub/perfecting-drag-and-drop-in-pure-vanilla-javascript-a761184b797a\n * available optional options:\n *   - containerElement: container DOM element, defaults to \"document\"\n *   - allowDragFrom: when defined, only allow dragging from an element that matches a specific query selector\n *   - onDragInit: drag initialized callback\n *   - onDragStart: drag started callback\n *   - onDrag: drag callback\n *   - onDragEnd: drag ended callback\n * @param {Object} options\n * @returns - Draggable instance which includes destroy method\n * @class Draggable\n */\nexport function Draggable(options: DraggableOption) {\n  let { containerElement, onDragInit, onDragStart, onDrag, onDragEnd } = options;\n  let element: HTMLElement | null, startX: number, startY: number, deltaX: number, deltaY: number, dragStarted: boolean;\n\n  if (!containerElement) {\n    containerElement = document;\n  }\n  if (!containerElement || typeof containerElement.addEventListener !== 'function') {\n    throw new Error('[Slick.Draggable] You did not provide a valid container html element that will be used for dragging.');\n  }\n\n  let originaldd: { dragSource: HTMLElement | Document | null, dragHandle: HTMLElement | null } = {\n    dragSource: containerElement,\n    dragHandle: null,\n  };\n\n  if (containerElement) {\n    containerElement.addEventListener('mousedown', userPressed as EventListener);\n    containerElement.addEventListener('touchstart', userPressed as EventListener);\n  }\n\n  function executeDragCallbackWhenDefined(callback?: Function, e?: MouseEvent | Touch | TouchEvent, dd?: any) {\n    if (typeof callback === 'function') {\n      callback(e, dd);\n    }\n  }\n\n  function destroy() {\n    if (containerElement) {\n      containerElement.removeEventListener('mousedown', userPressed as EventListener);\n      containerElement.removeEventListener('touchstart', userPressed as EventListener);\n    }\n  }\n\n  function userPressed(event: MouseEvent | TouchEvent) {\n    element = event.target as HTMLElement;\n    const targetEvent: MouseEvent | Touch = (event as TouchEvent)?.touches?.[0] ?? event;\n    const { target } = targetEvent;\n\n    if (!options.allowDragFrom || (options.allowDragFrom && element.matches(options.allowDragFrom))) {\n      originaldd.dragHandle = element as HTMLElement;\n      const winScrollPos = Utils.windowScrollPosition();\n      startX = winScrollPos.left + targetEvent.clientX;\n      startY = winScrollPos.top + targetEvent.clientY;\n      deltaX = targetEvent.clientX - targetEvent.clientX;\n      deltaY = targetEvent.clientY - targetEvent.clientY;\n      originaldd = Object.assign(originaldd, { deltaX, deltaY, startX, startY, target });\n      executeDragCallbackWhenDefined(onDragInit as Function, event, originaldd);\n\n      document.addEventListener('mousemove', userMoved);\n      document.addEventListener('touchmove', userMoved);\n      document.addEventListener('mouseup', userReleased);\n      document.addEventListener('touchend', userReleased);\n      document.addEventListener('touchcancel', userReleased);\n    }\n  }\n\n  function userMoved(event: MouseEvent | TouchEvent) {\n    const targetEvent: MouseEvent | Touch = (event as TouchEvent)?.touches?.[0] ?? event;\n    deltaX = targetEvent.clientX - startX;\n    deltaY = targetEvent.clientY - startY;\n    const { target } = targetEvent;\n\n    if (!dragStarted) {\n      originaldd = Object.assign(originaldd, { deltaX, deltaY, startX, startY, target });\n      executeDragCallbackWhenDefined(onDragStart, event, originaldd);\n      dragStarted = true;\n    }\n\n    originaldd = Object.assign(originaldd, { deltaX, deltaY, startX, startY, target });\n    executeDragCallbackWhenDefined(onDrag, event, originaldd);\n  }\n\n  function userReleased(event: MouseEvent | TouchEvent) {\n    const { target } = event;\n    originaldd = Object.assign(originaldd, { target });\n    executeDragCallbackWhenDefined(onDragEnd, event, originaldd);\n    document.removeEventListener('mousemove', userMoved);\n    document.removeEventListener('touchmove', userMoved);\n    document.removeEventListener('mouseup', userReleased);\n    document.removeEventListener('touchend', userReleased);\n    document.removeEventListener('touchcancel', userReleased);\n    dragStarted = false;\n  }\n\n  // public API\n  return { destroy };\n}\n\n/**\n * MouseWheel Class, add mousewheel listeners and calculate delta values and return them in the callback function.\n * available optional options:\n *   - element: optional DOM element to attach mousewheel values, if undefined we'll attach it to the \"window\" object\n *   - onMouseWheel: mousewheel callback\n * @param {Object} options\n * @returns - MouseWheel instance which includes destroy method\n * @class MouseWheel\n */\nexport function MouseWheel(options: MouseWheelOption) {\n  let { element, onMouseWheel } = options;\n\n  function destroy() {\n    element.removeEventListener('wheel', wheelHandler as EventListener);\n    element.removeEventListener('mousewheel', wheelHandler as EventListener);\n  }\n\n  function init() {\n    element.addEventListener('wheel', wheelHandler as EventListener);\n    element.addEventListener('mousewheel', wheelHandler as EventListener);\n  }\n\n  // copy over the same event handler code used in jquery.mousewheel\n  function wheelHandler(event: WheelEvent & { axis: number; wheelDelta: number; wheelDeltaX: number; wheelDeltaY: number; HORIZONTAL_AXIS: number; }) {\n    const orgEvent = event || window.event\n    let delta = 0, deltaX = 0, deltaY = 0;\n\n    // Old school scrollwheel delta\n    if (orgEvent.wheelDelta) {\n      delta = orgEvent.wheelDelta / 120;\n    }\n    if (orgEvent.detail) {\n      delta = -orgEvent.detail / 3;\n    }\n\n    // New school multidimensional scroll (touchpads) deltas\n    deltaY = delta;\n\n    // Gecko\n    if (orgEvent.axis !== undefined && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {\n      deltaY = 0;\n      deltaX = -1 * delta;\n    }\n\n    // WebKit\n    if (orgEvent.wheelDeltaY !== undefined) {\n      deltaY = orgEvent.wheelDeltaY / 120;\n    }\n    if (orgEvent.wheelDeltaX !== undefined) {\n      deltaX = -1 * orgEvent.wheelDeltaX / 120;\n    }\n\n    if (typeof onMouseWheel === 'function') {\n      onMouseWheel(event, delta, deltaX, deltaY);\n    }\n  }\n\n  // initialize Slick.MouseWheel by attaching mousewheel event\n  init();\n\n  // public API\n  return { destroy };\n}\n\n/**\n * Resizable Class, enables resize functionality for any element\n * Code mostly comes from these 2 resources:\n *   https://spin.atomicobject.com/2019/11/21/creating-a-resizable-html-element/\n *   https://htmldom.dev/make-a-resizable-element/\n * available optional options:\n *   - resizeableElement: resizable DOM element\n *   - resizeableHandleElement: resizable DOM element\n *   - onResizeStart: resize start callback\n *   - onResize: resizing callback\n *   - onResizeEnd: resize ended callback\n * @param {Object} options\n * @returns - Resizable instance which includes destroy method\n * @class Resizable\n */\nexport function Resizable(options: ResizableOption) {\n  const { resizeableElement, resizeableHandleElement, onResizeStart, onResize, onResizeEnd } = options;\n  if (!resizeableHandleElement || typeof resizeableHandleElement.addEventListener !== 'function') {\n    throw new Error('[Slick.Resizable] You did not provide a valid html element that will be used for the handle to resize.');\n  }\n\n  function destroy() {\n    if (typeof resizeableHandleElement?.removeEventListener === 'function') {\n      resizeableHandleElement.removeEventListener('mousedown', resizeStartHandler);\n      resizeableHandleElement.removeEventListener('touchstart', resizeStartHandler);\n    }\n  }\n\n  function executeResizeCallbackWhenDefined(callback?: Function, e?: MouseEvent | TouchEvent | Touch) {\n    if (typeof callback === 'function') {\n      callback(e, { resizeableElement, resizeableHandleElement });\n    }\n  }\n\n  function resizeStartHandler(e: MouseEvent | TouchEvent) {\n    e.preventDefault();\n    const event = (e as TouchEvent).touches ? (e as TouchEvent).changedTouches[0] : e;\n    executeResizeCallbackWhenDefined(onResizeStart, event);\n    document.addEventListener('mousemove', resizingHandler);\n    document.addEventListener('mouseup', resizeEndHandler);\n    document.addEventListener('touchmove', resizingHandler);\n    document.addEventListener('touchend', resizeEndHandler);\n  }\n\n  function resizingHandler(e: MouseEvent | TouchEvent) {\n    if (e.preventDefault && e.type !== 'touchmove') {\n      e.preventDefault();\n    }\n    const event = (e as TouchEvent).touches ? (e as TouchEvent).changedTouches[0] : e;\n    if (typeof onResize === 'function') {\n      onResize(event, { resizeableElement, resizeableHandleElement });\n      onResize(event, { resizeableElement, resizeableHandleElement });\n    }\n  }\n\n  /** Remove all mouse/touch handlers */\n  function resizeEndHandler(e: MouseEvent | TouchEvent) {\n    const event = (e as TouchEvent).touches ? (e as TouchEvent).changedTouches[0] : e;\n    executeResizeCallbackWhenDefined(onResizeEnd, event);\n    document.removeEventListener('mousemove', resizingHandler);\n    document.removeEventListener('mouseup', resizeEndHandler);\n    document.removeEventListener('touchmove', resizingHandler);\n    document.removeEventListener('touchend', resizeEndHandler);\n  }\n\n  // add event listeners on the draggable element\n  resizeableHandleElement.addEventListener('mousedown', resizeStartHandler);\n  resizeableHandleElement.addEventListener('touchstart', resizeStartHandler);\n\n  // public API\n  return { destroy };\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(Slick, {\n    Draggable,\n    MouseWheel,\n    Resizable,\n  });\n}\n\n", "import SortableInstance from 'sortablejs';\n\nimport type {\n  AutoSize,\n  CellViewportRange,\n  Column,\n  ColumnSort,\n  CssStyleHash,\n  CustomDataView,\n  DragPosition,\n  DragRowMove,\n  Editor,\n  EditController,\n  Formatter,\n  FormatterOverrideCallback,\n  FormatterResultObject,\n  GridOption,\n  InteractionBase,\n  OnActiveCellChangedEventArgs,\n  OnAddNewRowEventArgs,\n  OnAutosizeColumnsEventArgs,\n  OnBeforeUpdateColumnsEventArgs,\n  OnBeforeAppendCellEventArgs,\n  OnBeforeCellEditorDestroyEventArgs,\n  OnBeforeColumnsResizeEventArgs,\n  OnBeforeEditCellEventArgs,\n  OnBeforeHeaderCellDestroyEventArgs,\n  OnBeforeHeaderRowCellDestroyEventArgs,\n  OnBeforeFooterRowCellDestroyEventArgs,\n  OnBeforeSetColumnsEventArgs,\n  OnCellChangeEventArgs,\n  OnCellCssStylesChangedEventArgs,\n  OnColumnsDragEventArgs,\n  OnColumnsReorderedEventArgs,\n  OnColumnsResizedEventArgs,\n  OnColumnsResizeDblClickEventArgs,\n  OnCompositeEditorChangeEventArgs,\n  OnClickEventArgs,\n  OnDblClickEventArgs,\n  OnFooterContextMenuEventArgs,\n  OnFooterRowCellRenderedEventArgs,\n  OnHeaderCellRenderedEventArgs,\n  OnFooterClickEventArgs,\n  OnHeaderClickEventArgs,\n  OnHeaderContextMenuEventArgs,\n  OnHeaderMouseEventArgs,\n  OnHeaderRowCellRenderedEventArgs,\n  OnKeyDownEventArgs,\n  OnValidationErrorEventArgs,\n  OnRenderedEventArgs,\n  OnSelectedRowsChangedEventArgs,\n  OnSetOptionsEventArgs,\n  OnScrollEventArgs,\n  MultiColumnSort,\n  PagingInfo,\n  Plugin,\n  SingleColumnSort,\n  SlickGridEventData,\n} from './models/index';\nimport {\n  BindingEventService as BindingEventService_,\n  ColAutosizeMode as ColAutosizeMode_,\n  GlobalEditorLock as GlobalEditorLock_,\n  GridAutosizeColsMode as GridAutosizeColsMode_,\n  keyCode as keyCode_,\n  preClickClassName as preClickClassName_,\n  RowSelectionMode as RowSelectionMode_,\n  SlickEvent as SlickEvent_,\n  SlickEventData as SlickEventData_,\n  SlickRange as SlickRange_,\n  Utils as Utils_,\n  ValueFilterMode as ValueFilterMode_,\n  WidthEvalMode as WidthEvalMode_,\n} from './slick.core';\nimport { Draggable as Draggable_, MouseWheel as MouseWheel_, Resizable as Resizable_ } from './slick.interactions';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst BindingEventService = (IIFE_ONLY ? Slick.BindingEventService : BindingEventService_) as typeof BindingEventService_;\nconst ColAutosizeMode = (IIFE_ONLY ? Slick.ColAutosizeMode : ColAutosizeMode_);\nconst SlickEvent = (IIFE_ONLY ? Slick.Event : SlickEvent_) as typeof SlickEvent_;\nconst SlickEventData = (IIFE_ONLY ? Slick.EventData : SlickEventData_) as typeof SlickEventData_;\nconst GlobalEditorLock = (IIFE_ONLY ? Slick.GlobalEditorLock : GlobalEditorLock_) as typeof GlobalEditorLock_;\nconst GridAutosizeColsMode = (IIFE_ONLY ? Slick.GridAutosizeColsMode : GridAutosizeColsMode_);\nconst keyCode = (IIFE_ONLY ? Slick.keyCode : keyCode_);\nconst preClickClassName = (IIFE_ONLY ? Slick.preClickClassName : preClickClassName_);\nconst SlickRange = (IIFE_ONLY ? Slick.Range : SlickRange_) as typeof SlickRange_;\nconst RowSelectionMode = (IIFE_ONLY ? Slick.RowSelectionMode : RowSelectionMode_);\nconst ValueFilterMode = (IIFE_ONLY ? Slick.ValueFilterMode : ValueFilterMode_);\nconst Utils = (IIFE_ONLY ? Slick.Utils : Utils_) as typeof Utils_;\nconst WidthEvalMode = (IIFE_ONLY ? Slick.WidthEvalMode : WidthEvalMode_);\nconst Draggable = (IIFE_ONLY ? Slick.Draggable : Draggable_);\nconst MouseWheel = (IIFE_ONLY ? Slick.MouseWheel : MouseWheel_);\nconst Resizable = (IIFE_ONLY ? Slick.Resizable : Resizable_);\n\n/**\n * @license\n * (c) 2009-present Michael Leibman\n * michael{dot}leibman{at}gmail{dot}com\n * http://github.com/mleibman/slickgrid\n *\n * Distributed under MIT license.\n * All rights reserved.\n *\n * SlickGrid v4.0.1\n *\n * NOTES:\n *     Cell/row DOM manipulations are done directly bypassing JS DOM manipulation methods.\n *     This increases the speed dramatically, but can only be done safely because there are no event handlers\n *     or data associated with any cell/row DOM nodes.  Cell editors must make sure they implement .destroy()\n *     and do proper cleanup.\n */\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n// SlickGrid class implementation (available as SlickGrid)\n\nexport class SlickGrid {\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // Public API\n  slickGridVersion = '4.0.1';\n\n  // Events\n  onActiveCellChanged = new SlickEvent<OnActiveCellChangedEventArgs>();\n  onActiveCellPositionChanged = new SlickEvent<SlickGridEventData>();\n  onAddNewRow = new SlickEvent<OnAddNewRowEventArgs>();\n  onAutosizeColumns = new SlickEvent<OnAutosizeColumnsEventArgs>();\n  onBeforeAppendCell = new SlickEvent<OnBeforeAppendCellEventArgs>();\n  onBeforeCellEditorDestroy = new SlickEvent<OnBeforeCellEditorDestroyEventArgs>();\n  onBeforeColumnsResize = new SlickEvent<OnBeforeColumnsResizeEventArgs>();\n  onBeforeDestroy = new SlickEvent<SlickGridEventData>();\n  onBeforeEditCell = new SlickEvent<OnBeforeEditCellEventArgs>();\n  onBeforeFooterRowCellDestroy = new SlickEvent<OnBeforeFooterRowCellDestroyEventArgs>();\n  onBeforeHeaderCellDestroy = new SlickEvent<OnBeforeHeaderCellDestroyEventArgs>();\n  onBeforeHeaderRowCellDestroy = new SlickEvent<OnBeforeHeaderRowCellDestroyEventArgs>();\n  onBeforeSetColumns = new SlickEvent<OnBeforeSetColumnsEventArgs>();\n  onBeforeSort = new SlickEvent<SingleColumnSort | MultiColumnSort>();\n  onBeforeUpdateColumns = new SlickEvent<OnBeforeUpdateColumnsEventArgs>();\n  onCellChange = new SlickEvent<OnCellChangeEventArgs>();\n  onCellCssStylesChanged = new SlickEvent<OnCellCssStylesChangedEventArgs>();\n  onClick = new SlickEvent<OnClickEventArgs>();\n  onColumnsReordered = new SlickEvent<OnColumnsReorderedEventArgs>();\n  onColumnsDrag = new SlickEvent<OnColumnsDragEventArgs>();\n  onColumnsResized = new SlickEvent<OnColumnsResizedEventArgs>();\n  onColumnsResizeDblClick = new SlickEvent<OnColumnsResizeDblClickEventArgs>();\n  onCompositeEditorChange = new SlickEvent<OnCompositeEditorChangeEventArgs>();\n  onContextMenu = new SlickEvent<SlickGridEventData>();\n  onDrag = new SlickEvent<DragRowMove>();\n  onDblClick = new SlickEvent<OnDblClickEventArgs>();\n  onDragInit = new SlickEvent<DragRowMove>();\n  onDragStart = new SlickEvent<DragRowMove>();\n  onDragEnd = new SlickEvent<DragRowMove>();\n  onFooterClick = new SlickEvent<OnFooterClickEventArgs>();\n  onFooterContextMenu = new SlickEvent<OnFooterContextMenuEventArgs>();\n  onFooterRowCellRendered = new SlickEvent<OnFooterRowCellRenderedEventArgs>();\n  onHeaderCellRendered = new SlickEvent<OnHeaderCellRenderedEventArgs>();\n  onHeaderClick = new SlickEvent<OnHeaderClickEventArgs>();\n  onHeaderContextMenu = new SlickEvent<OnHeaderContextMenuEventArgs>();\n  onHeaderMouseEnter = new SlickEvent<OnHeaderMouseEventArgs>();\n  onHeaderMouseLeave = new SlickEvent<OnHeaderMouseEventArgs>();\n  onHeaderRowCellRendered = new SlickEvent<OnHeaderRowCellRenderedEventArgs>();\n  onHeaderRowMouseEnter = new SlickEvent<OnHeaderMouseEventArgs>();\n  onHeaderRowMouseLeave = new SlickEvent<OnHeaderMouseEventArgs>();\n  onKeyDown = new SlickEvent<OnKeyDownEventArgs>();\n  onMouseEnter = new SlickEvent<OnHeaderMouseEventArgs>();\n  onMouseLeave = new SlickEvent<OnHeaderMouseEventArgs>();\n  onRendered = new SlickEvent<OnRenderedEventArgs>();\n  onScroll = new SlickEvent<OnScrollEventArgs>();\n  onSelectedRowsChanged = new SlickEvent<OnSelectedRowsChangedEventArgs>();\n  onSetOptions = new SlickEvent<OnSetOptionsEventArgs>();\n  onSort = new SlickEvent<SingleColumnSort | MultiColumnSort>();\n  onValidationError = new SlickEvent<OnValidationErrorEventArgs>();\n  onViewportChanged = new SlickEvent<SlickGridEventData>();\n\n  // ---\n  // protected variables\n\n  // shared across all grids on the page\n  protected scrollbarDimensions?: { height: number; width: number; };\n  protected maxSupportedCssHeight!: number;  // browser's breaking point\n\n  protected canvas: HTMLCanvasElement | null = null;\n  protected canvas_context: CanvasRenderingContext2D | null = null;\n\n  // settings\n  protected _options!: GridOption;\n  protected _defaults: GridOption = {\n    alwaysShowVerticalScroll: false,\n    alwaysAllowHorizontalScroll: false,\n    explicitInitialization: false,\n    rowHeight: 25,\n    defaultColumnWidth: 80,\n    enableAddRow: false,\n    leaveSpaceForNewRows: false,\n    editable: false,\n    autoEdit: true,\n    autoCommitEdit: false,\n    suppressActiveCellChangeOnEdit: false,\n    enableCellNavigation: true,\n    enableColumnReorder: true,\n    asyncEditorLoading: false,\n    asyncEditorLoadDelay: 100,\n    forceFitColumns: false,\n    enableAsyncPostRender: false,\n    asyncPostRenderDelay: 50,\n    enableAsyncPostRenderCleanup: false,\n    asyncPostRenderCleanupDelay: 40,\n    auto: false,\n    editorLock: GlobalEditorLock,\n    showColumnHeader: true,\n    showHeaderRow: false,\n    headerRowHeight: 25,\n    createFooterRow: false,\n    showFooterRow: false,\n    footerRowHeight: 25,\n    createPreHeaderPanel: false,\n    showPreHeaderPanel: false,\n    preHeaderPanelHeight: 25,\n    showTopPanel: false,\n    topPanelHeight: 25,\n    formatterFactory: null,\n    editorFactory: null,\n    cellFlashingCssClass: 'flashing',\n    selectedCellCssClass: 'selected',\n    multiSelect: true,\n    enableTextSelectionOnCells: false,\n    dataItemColumnValueExtractor: null,\n    frozenBottom: false,\n    frozenColumn: -1,\n    frozenRow: -1,\n    frozenRightViewportMinWidth: 100,\n    fullWidthRows: false,\n    multiColumnSort: false,\n    numberedMultiColumnSort: false,\n    tristateMultiColumnSort: false,\n    sortColNumberInSeparateSpan: false,\n    defaultFormatter: this.defaultFormatter,\n    forceSyncScrolling: false,\n    addNewRowCssClass: 'new-row',\n    preserveCopiedSelectionOnPaste: false,\n    showCellSelection: true,\n    viewportClass: null,\n    minRowBuffer: 3,\n    emulatePagingWhenScrolling: true, // when scrolling off bottom of viewport, place new row at top of viewport\n    editorCellNavOnLRKeys: false,\n    enableMouseWheelScrollHandler: true,\n    doPaging: true,\n    autosizeColsMode: GridAutosizeColsMode.LegacyOff,\n    autosizeColPaddingPx: 4,\n    scrollRenderThrottling: 50,\n    autosizeTextAvgToMWidthRatio: 0.75,\n    viewportSwitchToScrollModeWidthPercent: undefined,\n    viewportMinWidthPx: undefined,\n    viewportMaxWidthPx: undefined,\n    suppressCssChangesOnHiddenInit: false,\n    ffMaxSupportedCssHeight: 6000000,\n    maxSupportedCssHeight: 1000000000,\n    sanitizer: undefined,  // sanitize function, built in basic sanitizer is: Slick.RegexSanitizer(dirtyHtml)\n    logSanitizedHtml: false // log to console when sanitised - recommend true for testing of dev and production\n  };\n\n  protected _columnDefaults: Partial<Column> = {\n    name: '',\n    resizable: true,\n    sortable: false,\n    minWidth: 30,\n    maxWidth: undefined,\n    rerenderOnResize: false,\n    headerCssClass: null,\n    defaultSortAsc: true,\n    focusable: true,\n    selectable: true,\n    hidden: false\n  };\n\n  protected _columnAutosizeDefaults: AutoSize = {\n    ignoreHeaderText: false,\n    colValueArray: undefined,\n    allowAddlPercent: undefined,\n    formatterOverride: undefined,\n    autosizeMode: ColAutosizeMode.ContentIntelligent,\n    rowSelectionModeOnInit: undefined,\n    rowSelectionMode: RowSelectionMode.FirstNRows,\n    rowSelectionCount: 100,\n    valueFilterMode: ValueFilterMode.None,\n    widthEvalMode: WidthEvalMode.Auto,\n    sizeToRemaining: undefined,\n    widthPx: undefined,\n    contentSizePx: 0,\n    headerWidthPx: 0,\n    colDataTypeOf: undefined\n  };\n\n  // scroller\n  protected th!: number;   // virtual height\n  protected h!: number;    // real scrollable height\n  protected ph!: number;   // page height\n  protected n!: number;    // number of pages\n  protected cj!: number;   // \"jumpiness\" coefficient\n\n  protected page = 0;       // current page\n  protected offset = 0;     // current page offset\n  protected vScrollDir = 1;\n  protected _bindingEventService = new BindingEventService();\n  protected initialized = false;\n  protected _container!: HTMLElement;\n  protected uid = `slickgrid_${Math.round(1000000 * Math.random())}`;\n  protected _focusSink!: HTMLElement;\n  protected _focusSink2!: HTMLElement;\n  protected _groupHeaders: HTMLElement[] = [];\n  protected _headerScroller: HTMLElement[] = [];\n  protected _headers: HTMLElement[] = [];\n  protected _headerRows!: HTMLElement[];\n  protected _headerRowScroller!: HTMLElement[];\n  protected _headerRowSpacerL!: HTMLElement;\n  protected _headerRowSpacerR!: HTMLElement;\n  protected _footerRow!: HTMLElement[];\n  protected _footerRowScroller!: HTMLElement[];\n  protected _footerRowSpacerL!: HTMLElement;\n  protected _footerRowSpacerR!: HTMLElement;\n  protected _preHeaderPanel!: HTMLElement;\n  protected _preHeaderPanelScroller!: HTMLElement;\n  protected _preHeaderPanelSpacer!: HTMLElement;\n  protected _preHeaderPanelR!: HTMLElement;\n  protected _preHeaderPanelScrollerR!: HTMLElement;\n  protected _preHeaderPanelSpacerR!: HTMLElement;\n  protected _topPanelScrollers!: HTMLElement[];\n  protected _topPanels!: HTMLElement[];\n  protected _viewport!: HTMLElement[];\n  protected _canvas!: HTMLElement[];\n  protected _style;\n  protected _boundAncestors: HTMLElement[] = [];\n  protected stylesheet;\n  protected columnCssRulesL;\n  protected columnCssRulesR;\n  protected viewportH = 0;\n  protected viewportW = 0;\n  protected canvasWidth = 0;\n  protected canvasWidthL = 0;\n  protected canvasWidthR = 0;\n  protected headersWidth = 0;\n  protected headersWidthL = 0;\n  protected headersWidthR = 0;\n  protected viewportHasHScroll = false;\n  protected viewportHasVScroll = false;\n  protected headerColumnWidthDiff = 0;\n  protected headerColumnHeightDiff = 0; // border+padding\n  protected cellWidthDiff = 0;\n  protected cellHeightDiff = 0;\n  protected absoluteColumnMinWidth!: number;\n  protected hasFrozenRows = false;\n  protected frozenRowsHeight = 0;\n  protected actualFrozenRow = -1;\n  protected paneTopH = 0;\n  protected paneBottomH = 0;\n  protected viewportTopH = 0;\n  protected viewportBottomH = 0;\n  protected topPanelH = 0;\n  protected headerRowH = 0;\n  protected footerRowH = 0;\n\n  protected tabbingDirection = 1;\n  protected _activeCanvasNode!: HTMLElement;\n  protected _activeViewportNode!: HTMLElement;\n  protected activePosX!: number;\n  protected activeRow!: number;\n  protected activeCell!: number;\n  protected activeCellNode: HTMLElement | null = null;\n  protected currentEditor: Editor | null = null;\n  protected serializedEditorValue;\n  protected editController?: EditController;\n\n  protected rowsCache: any = {};\n  protected renderedRows = 0;\n  protected numVisibleRows = 0;\n  protected prevScrollTop = 0;\n  protected scrollTop = 0;\n  protected lastRenderedScrollTop = 0;\n  protected lastRenderedScrollLeft = 0;\n  protected prevScrollLeft = 0;\n  protected scrollLeft = 0;\n\n  protected selectionModel;\n  protected selectedRows: number[] = [];\n\n  protected plugins: Plugin[] = [];\n  protected cellCssClasses: CssStyleHash = {};\n\n  protected columnsById = {};\n  protected sortColumns: ColumnSort[] = [];\n  protected columnPosLeft: number[] = [];\n  protected columnPosRight: number[] = [];\n\n  protected pagingActive = false;\n  protected pagingIsLastPage = false;\n\n  protected scrollThrottle!: { enqueue: () => void; dequeue: () => void; };\n\n  // async call handles\n  protected h_editorLoader: any = null;\n  protected h_render = null;\n  protected h_postrender: any = null;\n  protected h_postrenderCleanup: any = null;\n  protected postProcessedRows = {};\n  protected postProcessToRow: number = null as any;\n  protected postProcessFromRow: number = null as any;\n  protected postProcessedCleanupQueue: Array<{\n    actionType: string;\n    groupId: number;\n    node: HTMLElement | HTMLElement[];\n    columnIdx?: number;\n    rowIdx?: number;\n  }> = [];\n  protected postProcessgroupId = 0;\n\n  // perf counters\n  protected counter_rows_rendered = 0;\n  protected counter_rows_removed = 0;\n\n  protected _paneHeaderL!: HTMLElement;\n  protected _paneHeaderR!: HTMLElement;\n  protected _paneTopL!: HTMLElement;\n  protected _paneTopR!: HTMLElement;\n  protected _paneBottomL!: HTMLElement;\n  protected _paneBottomR!: HTMLElement;\n  protected _headerScrollerL!: HTMLElement;\n  protected _headerScrollerR!: HTMLElement;\n  protected _headerL!: HTMLElement;\n  protected _headerR!: HTMLElement;\n  protected _groupHeadersL!: HTMLElement;\n  protected _groupHeadersR!: HTMLElement;\n  protected _headerRowScrollerL!: HTMLElement;\n  protected _headerRowScrollerR!: HTMLElement;\n  protected _footerRowScrollerL!: HTMLElement;\n  protected _footerRowScrollerR!: HTMLElement;\n  protected _headerRowL!: HTMLElement;\n  protected _headerRowR!: HTMLElement;\n  protected _footerRowL!: HTMLElement;\n  protected _footerRowR!: HTMLElement;\n  protected _topPanelScrollerL!: HTMLElement;\n  protected _topPanelScrollerR!: HTMLElement;\n  protected _topPanelL!: HTMLElement;\n  protected _topPanelR!: HTMLElement;\n  protected _viewportTopL!: HTMLElement;\n  protected _viewportTopR!: HTMLElement;\n  protected _viewportBottomL!: HTMLElement;\n  protected _viewportBottomR!: HTMLElement;\n  protected _canvasTopL!: HTMLElement;\n  protected _canvasTopR!: HTMLElement;\n  protected _canvasBottomL!: HTMLElement;\n  protected _canvasBottomR!: HTMLElement;\n  protected _viewportScrollContainerX!: HTMLElement;\n  protected _viewportScrollContainerY!: HTMLElement;\n  protected _headerScrollContainer!: HTMLElement;\n  protected _headerRowScrollContainer!: HTMLElement;\n  protected _footerRowScrollContainer!: HTMLElement;\n\n  // store css attributes if display:none is active in container or parent\n  protected cssShow = { position: 'absolute', visibility: 'hidden', display: 'block' };\n  protected _hiddenParents: HTMLElement[] = [];\n  protected oldProps: Array<Partial<CSSStyleDeclaration>> = [];\n  protected enforceFrozenRowHeightRecalc = false;\n  protected columnResizeDragging = false;\n  protected slickDraggableInstance: InteractionBase | null = null;\n  protected slickMouseWheelInstances: Array<InteractionBase> = [];\n  protected slickResizableInstances: Array<InteractionBase> = [];\n  protected sortableSideLeftInstance: SortableInstance;\n  protected sortableSideRightInstance: SortableInstance;\n  protected logMessageCount = 0;\n  protected logMessageMaxCount = 30;\n\n  /**\n   * Creates a new instance of the grid.\n   * @class SlickGrid\n   * @constructor\n   * @param {Node} container - Container node to create the grid in.\n   * @param {Array|Object} data - An array of objects for databinding.\n   * @param {Array<Column>} columns - An array of column definitions.\n   * @param {Object} [options] - Grid this._options.\n   **/\n  constructor(protected container: HTMLElement | string, protected data: CustomDataView | any[], protected columns: Column[], protected options: Partial<GridOption>) {\n    this.initialize();\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // Initialization\n\n  /** Initializes the grid. */\n  init() {\n    this.finishInitialization();\n  }\n\n  protected initialize() {\n    if (typeof this.container === 'string') {\n      this._container = document.querySelector(this.container) as HTMLElement;\n    } else {\n      this._container = this.container;\n    }\n\n    if (!this._container) {\n      throw new Error(`SlickGrid requires a valid container, ${this.container} does not exist in the DOM.`);\n    }\n\n    // calculate these only once and share between grid instances\n    this._options = Utils.extend(true, {}, this._defaults, this.options);\n    this.scrollThrottle = this.actionThrottle(this.render.bind(this), this._options.scrollRenderThrottling);\n    this.maxSupportedCssHeight = this.maxSupportedCssHeight || this.getMaxSupportedCssHeight();\n    this.validateAndEnforceOptions();\n    this._columnDefaults.width = this._options.defaultColumnWidth;\n\n    if (!this._options.suppressCssChangesOnHiddenInit) {\n      this.cacheCssForHiddenInit();\n    }\n\n    this.updateColumnProps();\n\n    // validate loaded JavaScript modules against requested options\n    if (this._options.enableColumnReorder && (!Sortable || !Sortable.create)) {\n      throw new Error('SlickGrid requires Sortable.js module to be loaded');\n    }\n\n    this.editController = {\n      commitCurrentEdit: this.commitCurrentEdit.bind(this),\n      cancelCurrentEdit: this.cancelCurrentEdit.bind(this),\n    };\n\n    Utils.emptyElement(this._container);\n    this._container.style.overflow = 'hidden';\n    this._container.style.outline = String(0);\n    this._container.classList.add(this.uid);\n    this._container.classList.add('ui-widget');\n\n    const containerStyles = window.getComputedStyle(this._container);\n    if (!(/relative|absolute|fixed/).test(containerStyles.position)) {\n      this._container.style.position = 'relative';\n    }\n\n    this._focusSink = Utils.createDomElement('div', { tabIndex: 0, style: { position: 'fixed', width: '0px', height: '0px', top: '0px', left: '0px', outline: '0px' } }, this._container);\n\n    // Containers used for scrolling frozen columns and rows\n    this._paneHeaderL = Utils.createDomElement('div', { className: 'slick-pane slick-pane-header slick-pane-left', tabIndex: 0 }, this._container);\n    this._paneHeaderR = Utils.createDomElement('div', { className: 'slick-pane slick-pane-header slick-pane-right', tabIndex: 0 }, this._container);\n    this._paneTopL = Utils.createDomElement('div', { className: 'slick-pane slick-pane-top slick-pane-left', tabIndex: 0 }, this._container);\n    this._paneTopR = Utils.createDomElement('div', { className: 'slick-pane slick-pane-top slick-pane-right', tabIndex: 0 }, this._container);\n    this._paneBottomL = Utils.createDomElement('div', { className: 'slick-pane slick-pane-bottom slick-pane-left', tabIndex: 0 }, this._container);\n    this._paneBottomR = Utils.createDomElement('div', { className: 'slick-pane slick-pane-bottom slick-pane-right', tabIndex: 0 }, this._container);\n\n    if (this._options.createPreHeaderPanel) {\n      this._preHeaderPanelScroller = Utils.createDomElement('div', { className: 'slick-preheader-panel ui-state-default slick-state-default', style: { overflow: 'hidden', position: 'relative' } }, this._paneHeaderL);\n      this._preHeaderPanelScroller.appendChild(document.createElement('div'));\n      this._preHeaderPanel = Utils.createDomElement('div', null, this._preHeaderPanelScroller);\n      this._preHeaderPanelSpacer = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._preHeaderPanelScroller);\n\n      this._preHeaderPanelScrollerR = Utils.createDomElement('div', { className: 'slick-preheader-panel ui-state-default slick-state-default', style: { overflow: 'hidden', position: 'relative' } }, this._paneHeaderR);\n      this._preHeaderPanelR = Utils.createDomElement('div', null, this._preHeaderPanelScrollerR);\n      this._preHeaderPanelSpacerR = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._preHeaderPanelScrollerR);\n\n      if (!this._options.showPreHeaderPanel) {\n        Utils.hide(this._preHeaderPanelScroller);\n        Utils.hide(this._preHeaderPanelScrollerR);\n      }\n    }\n\n    // Append the header scroller containers\n    this._headerScrollerL = Utils.createDomElement('div', { className: 'slick-header ui-state-default slick-state-default slick-header-left' }, this._paneHeaderL);\n    this._headerScrollerR = Utils.createDomElement('div', { className: 'slick-header ui-state-default slick-state-default slick-header-right' }, this._paneHeaderR);\n\n    // Cache the header scroller containers\n    this._headerScroller.push(this._headerScrollerL);\n    this._headerScroller.push(this._headerScrollerR);\n\n    // Append the columnn containers to the headers\n    this._headerL = Utils.createDomElement('div', { className: 'slick-header-columns slick-header-columns-left', style: { left: '-1000px' } }, this._headerScrollerL);\n    this._headerR = Utils.createDomElement('div', { className: 'slick-header-columns slick-header-columns-right', style: { left: '-1000px' } }, this._headerScrollerR);\n\n    // Cache the header columns\n    this._headers = [this._headerL, this._headerR];\n\n    this._headerRowScrollerL = Utils.createDomElement('div', { className: 'slick-headerrow ui-state-default slick-state-default' }, this._paneTopL);\n    this._headerRowScrollerR = Utils.createDomElement('div', { className: 'slick-headerrow ui-state-default slick-state-default' }, this._paneTopR);\n\n    this._headerRowScroller = [this._headerRowScrollerL, this._headerRowScrollerR];\n\n    this._headerRowSpacerL = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._headerRowScrollerL);\n    this._headerRowSpacerR = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._headerRowScrollerR);\n\n    this._headerRowL = Utils.createDomElement('div', { className: 'slick-headerrow-columns slick-headerrow-columns-left' }, this._headerRowScrollerL);\n    this._headerRowR = Utils.createDomElement('div', { className: 'slick-headerrow-columns slick-headerrow-columns-right' }, this._headerRowScrollerR);\n\n    this._headerRows = [this._headerRowL, this._headerRowR];\n\n    // Append the top panel scroller\n    this._topPanelScrollerL = Utils.createDomElement('div', { className: 'slick-top-panel-scroller ui-state-default slick-state-default' }, this._paneTopL);\n    this._topPanelScrollerR = Utils.createDomElement('div', { className: 'slick-top-panel-scroller ui-state-default slick-state-default' }, this._paneTopR);\n\n    this._topPanelScrollers = [this._topPanelScrollerL, this._topPanelScrollerR];\n\n    // Append the top panel\n    this._topPanelL = Utils.createDomElement('div', { className: 'slick-top-panel', style: { width: '10000px' } }, this._topPanelScrollerL);\n    this._topPanelR = Utils.createDomElement('div', { className: 'slick-top-panel', style: { width: '10000px' } }, this._topPanelScrollerR);\n\n    this._topPanels = [this._topPanelL, this._topPanelR];\n\n    if (!this._options.showColumnHeader) {\n      this._headerScroller.forEach((el) => {\n        Utils.hide(el);\n      });\n    }\n\n    if (!this._options.showTopPanel) {\n      this._topPanelScrollers.forEach((scroller) => {\n        Utils.hide(scroller);\n      })\n    }\n\n    if (!this._options.showHeaderRow) {\n      this._headerRowScroller.forEach((scroller) => {\n        Utils.hide(scroller);\n      })\n    }\n\n    // Append the viewport containers\n    this._viewportTopL = Utils.createDomElement('div', { className: 'slick-viewport slick-viewport-top slick-viewport-left', tabIndex: 0 }, this._paneTopL);\n    this._viewportTopR = Utils.createDomElement('div', { className: 'slick-viewport slick-viewport-top slick-viewport-right', tabIndex: 0 }, this._paneTopR);\n    this._viewportBottomL = Utils.createDomElement('div', { className: 'slick-viewport slick-viewport-bottom slick-viewport-left', tabIndex: 0 }, this._paneBottomL);\n    this._viewportBottomR = Utils.createDomElement('div', { className: 'slick-viewport slick-viewport-bottom slick-viewport-right', tabIndex: 0 }, this._paneBottomR);\n\n    // Cache the viewports\n    this._viewport = [this._viewportTopL, this._viewportTopR, this._viewportBottomL, this._viewportBottomR];\n    if (this._options.viewportClass) {\n      this._viewport.forEach((view) => {\n        view.classList.add(...(this._options.viewportClass || '').split(' '));\n      });\n    }\n\n    // Default the active viewport to the top left\n    this._activeViewportNode = this._viewportTopL;\n\n    // Append the canvas containers\n    this._canvasTopL = Utils.createDomElement('div', { className: 'grid-canvas grid-canvas-top grid-canvas-left', tabIndex: 0 }, this._viewportTopL);\n    this._canvasTopR = Utils.createDomElement('div', { className: 'grid-canvas grid-canvas-top grid-canvas-right', tabIndex: 0 }, this._viewportTopR);\n    this._canvasBottomL = Utils.createDomElement('div', { className: 'grid-canvas grid-canvas-bottom grid-canvas-left', tabIndex: 0 }, this._viewportBottomL);\n    this._canvasBottomR = Utils.createDomElement('div', { className: 'grid-canvas grid-canvas-bottom grid-canvas-right', tabIndex: 0 }, this._viewportBottomR);\n\n    // Cache the canvases\n    this._canvas = [this._canvasTopL, this._canvasTopR, this._canvasBottomL, this._canvasBottomR];\n\n    this.scrollbarDimensions = this.scrollbarDimensions || this.measureScrollbar();\n\n    // Default the active canvas to the top left\n    this._activeCanvasNode = this._canvasTopL;\n\n    // pre-header\n    if (this._preHeaderPanelSpacer) {\n      Utils.width(this._preHeaderPanelSpacer, this.getCanvasWidth() + this.scrollbarDimensions.width);\n    }\n\n    this._headers.forEach((el) => {\n      Utils.width(el, this.getHeadersWidth());\n    })\n\n    Utils.width(this._headerRowSpacerL, this.getCanvasWidth() + this.scrollbarDimensions.width);\n    Utils.width(this._headerRowSpacerR, this.getCanvasWidth() + this.scrollbarDimensions.width);\n\n    // footer Row\n    if (this._options.createFooterRow) {\n      this._footerRowScrollerR = Utils.createDomElement('div', { className: 'slick-footerrow ui-state-default slick-state-default' }, this._paneTopR);\n      this._footerRowScrollerL = Utils.createDomElement('div', { className: 'slick-footerrow ui-state-default slick-state-default' }, this._paneTopL);\n\n      this._footerRowScroller = [this._footerRowScrollerL, this._footerRowScrollerR];\n\n      this._footerRowSpacerL = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._footerRowScrollerL);\n      Utils.width(this._footerRowSpacerL, this.getCanvasWidth() + this.scrollbarDimensions.width);\n      this._footerRowSpacerR = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._footerRowScrollerR);\n      Utils.width(this._footerRowSpacerR, this.getCanvasWidth() + this.scrollbarDimensions.width);\n\n\n      this._footerRowL = Utils.createDomElement('div', { className: 'slick-footerrow-columns slick-footerrow-columns-left' }, this._footerRowScrollerL);\n      this._footerRowR = Utils.createDomElement('div', { className: 'slick-footerrow-columns slick-footerrow-columns-right' }, this._footerRowScrollerR);\n\n      this._footerRow = [this._footerRowL, this._footerRowR];\n\n      if (!this._options.showFooterRow) {\n        this._footerRowScroller.forEach((scroller) => {\n          Utils.hide(scroller);\n        });\n      }\n    }\n\n    this._focusSink2 = this._focusSink.cloneNode(true) as HTMLDivElement;\n    this._container.appendChild(this._focusSink2);\n\n    if (!this._options.explicitInitialization) {\n      this.finishInitialization();\n    }\n  }\n\n  protected finishInitialization() {\n    if (!this.initialized) {\n      this.initialized = true;\n\n      this.getViewportWidth();\n      this.getViewportHeight();\n\n      // header columns and cells may have different padding/border skewing width calculations (box-sizing, hello?)\n      // calculate the diff so we can set consistent sizes\n      this.measureCellPaddingAndBorder();\n\n      // for usability reasons, all text selection in SlickGrid is disabled\n      // with the exception of input and textarea elements (selection must\n      // be enabled there so that editors work as expected); note that\n      // selection in grid cells (grid body) is already unavailable in\n      // all browsers except IE\n      this.disableSelection(this._headers); // disable all text selection in header (including input and textarea)\n\n      if (!this._options.enableTextSelectionOnCells) {\n        // disable text selection in grid cells except in input and textarea elements\n        // (this is IE-specific, because selectstart event will only fire in IE)\n        this._viewport.forEach((view) => {\n          this._bindingEventService.bind(view, 'selectstart', (event) => {\n            if (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement) {\n              return;\n            }\n          });\n        })\n      }\n\n      this.setFrozenOptions();\n      this.setPaneVisibility();\n      this.setScroller();\n      this.setOverflow();\n\n      this.updateColumnCaches();\n      this.createColumnHeaders();\n      this.createColumnFooter();\n      this.setupColumnSort();\n      this.createCssRules();\n      this.resizeCanvas();\n      this.bindAncestorScrollEvents();\n\n      this._bindingEventService.bind(this._container, 'resize', this.resizeCanvas.bind(this));\n      this._viewport.forEach((view) => {\n        this._bindingEventService.bind(view, 'scroll', this.handleScroll.bind(this));\n      });\n\n      if (this._options.enableMouseWheelScrollHandler) {\n        this._viewport.forEach((view) => {\n          this.slickMouseWheelInstances.push(MouseWheel({\n            element: view,\n            onMouseWheel: this.handleMouseWheel.bind(this)\n          }));\n        });\n      }\n\n      this._headerScroller.forEach((el) => {\n        this._bindingEventService.bind(el, 'contextmenu', this.handleHeaderContextMenu.bind(this) as EventListener);\n        this._bindingEventService.bind(el, 'click', this.handleHeaderClick.bind(this) as EventListener);\n      });\n\n      this._headerRowScroller.forEach((scroller) => {\n        this._bindingEventService.bind(scroller, 'scroll', this.handleHeaderRowScroll.bind(this) as EventListener);\n      });\n\n      if (this._options.createFooterRow) {\n        this._footerRow.forEach((footer) => {\n          this._bindingEventService.bind(footer, 'contextmenu', this.handleFooterContextMenu.bind(this) as EventListener);\n          this._bindingEventService.bind(footer, 'click', this.handleFooterClick.bind(this) as EventListener);\n        });\n\n        this._footerRowScroller.forEach((scroller) => {\n          this._bindingEventService.bind(scroller, 'scroll', this.handleFooterRowScroll.bind(this) as EventListener);\n        });\n      }\n\n      if (this._options.createPreHeaderPanel) {\n        this._bindingEventService.bind(this._preHeaderPanelScroller, 'scroll', this.handlePreHeaderPanelScroll.bind(this) as EventListener);\n      }\n\n      this._bindingEventService.bind(this._focusSink, 'keydown', this.handleKeyDown.bind(this) as EventListener);\n      this._bindingEventService.bind(this._focusSink2, 'keydown', this.handleKeyDown.bind(this) as EventListener);\n\n      this._canvas.forEach((element) => {\n        this._bindingEventService.bind(element, 'keydown', this.handleKeyDown.bind(this) as EventListener);\n        this._bindingEventService.bind(element, 'click', this.handleClick.bind(this) as EventListener);\n        this._bindingEventService.bind(element, 'dblclick', this.handleDblClick.bind(this) as EventListener);\n        this._bindingEventService.bind(element, 'contextmenu', this.handleContextMenu.bind(this) as EventListener);\n        this._bindingEventService.bind(element, 'mouseover', this.handleCellMouseOver.bind(this) as EventListener);\n        this._bindingEventService.bind(element, 'mouseout', this.handleCellMouseOut.bind(this) as EventListener);\n      });\n\n      if (Draggable) {\n        this.slickDraggableInstance = Draggable({\n          containerElement: this._container,\n          allowDragFrom: 'div.slick-cell',\n          onDragInit: this.handleDragInit.bind(this),\n          onDragStart: this.handleDragStart.bind(this),\n          onDrag: this.handleDrag.bind(this),\n          onDragEnd: this.handleDragEnd.bind(this)\n        });\n      }\n\n      if (!this._options.suppressCssChangesOnHiddenInit) {\n        this.restoreCssFromHiddenInit();\n      }\n    }\n  }\n\n  cacheCssForHiddenInit() {\n    // handle display:none on container or container parents\n    this._hiddenParents = Utils.parents(this._container, ':hidden') as HTMLElement[];\n    for (const el of this._hiddenParents) {\n      let old: Partial<CSSStyleDeclaration> = {};\n      for (const name in this.cssShow) {\n        old[name] = el.style[name];\n        el.style[name] = this.cssShow[name];\n      }\n      this.oldProps.push(old);\n    }\n  }\n\n  restoreCssFromHiddenInit() {\n    // finish handle display:none on container or container parents\n    // - put values back the way they were\n    let i = 0;\n    for (const el of this._hiddenParents) {\n      let old = this.oldProps[i++];\n      for (const name in this.cssShow) {\n        el.style[name] = old[name];\n      }\n    }\n  }\n\n  protected hasFrozenColumns() {\n    return this._options.frozenColumn > -1;\n  }\n\n  /** Register an external Plugin */\n  registerPlugin(plugin: Plugin) {\n    this.plugins.unshift(plugin);\n    plugin.init(this);\n  }\n\n  /** Unregister (destroy) an external Plugin */\n  unregisterPlugin(plugin: Plugin) {\n    for (let i = this.plugins.length; i >= 0; i--) {\n      if (this.plugins[i] === plugin) {\n        this.plugins[i]?.destroy();\n        this.plugins.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  /** Get a Plugin (addon) by its name */\n  getPluginByName(name: string) {\n    for (let i = this.plugins.length - 1; i >= 0; i--) {\n      if (this.plugins[i]?.pluginName === name) {\n        return this.plugins[i];\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Unregisters a current selection model and registers a new one. See the definition of SelectionModel for more information.\n   * @param {Object} selectionModel A SelectionModel.\n   */\n  setSelectionModel(model: any) {\n    if (this.selectionModel) {\n      this.selectionModel.onSelectedRangesChanged.unsubscribe(this.handleSelectedRangesChanged.bind(this));\n      if (this.selectionModel.destroy) {\n        this.selectionModel.destroy();\n      }\n    }\n\n    this.selectionModel = model;\n    if (this.selectionModel) {\n      this.selectionModel.init(this);\n      this.selectionModel.onSelectedRangesChanged.subscribe(this.handleSelectedRangesChanged.bind(this));\n    }\n  }\n\n  /** Returns the current SelectionModel. See here for more information about SelectionModels. */\n  getSelectionModel() {\n    return this.selectionModel;\n  }\n\n  /** Get Grid Canvas Node DOM Element */\n  getCanvasNode(columnIdOrIdx: number | string, rowIndex: number) {\n    return this._getContainerElement(this.getCanvases(), columnIdOrIdx, rowIndex);\n  }\n\n  /** Get the canvas DOM element */\n  getActiveCanvasNode(e: Event | SlickEventData_) {\n    if (e === undefined) {\n      return this._activeCanvasNode;\n    }\n\n    if (e instanceof SlickEventData) {\n      e = e.getNativeEvent();\n    }\n\n    this._activeCanvasNode = (e as any)?.target.closest('.grid-canvas');\n    return this._activeCanvasNode;\n  }\n\n  /** Get the canvas DOM element */\n  getCanvases() {\n    return this._canvas;\n  }\n\n  /** Get the Viewport DOM node element */\n  getViewportNode(columnIdOrIdx: number | string, rowIndex: number) {\n    return this._getContainerElement(this.getViewports(), columnIdOrIdx, rowIndex);\n  }\n\n  /** Get all the Viewport node elements */\n  getViewports() {\n    return this._viewport;\n  }\n\n  getActiveViewportNode(e: Event | SlickEventData_) {\n    this.setActiveViewportNode(e);\n\n    return this._activeViewportNode;\n  }\n\n  /** Sets an active viewport node */\n  setActiveViewportNode(e: Event | SlickEventData_) {\n    if (e instanceof SlickEventData) {\n      e = e.getNativeEvent();\n    }\n    this._activeViewportNode = (e as any)?.target.closest('.slick-viewport');\n    return this._activeViewportNode;\n  }\n\n  protected _getContainerElement(targetContainers: HTMLElement[], columnIdOrIdx: number | string, rowIndex?: number) {\n    if (!targetContainers) { return; }\n    if (!columnIdOrIdx) { columnIdOrIdx = 0; }\n    if (!rowIndex) { rowIndex = 0; }\n\n    let idx = (typeof columnIdOrIdx === 'number' ? columnIdOrIdx : this.getColumnIndex(columnIdOrIdx));\n\n    let isBottomSide = this.hasFrozenRows && rowIndex >= this.actualFrozenRow + (this._options.frozenBottom ? 0 : 1);\n    let isRightSide = this.hasFrozenColumns() && idx > this._options.frozenColumn;\n\n    return targetContainers[(isBottomSide ? 2 : 0) + (isRightSide ? 1 : 0)];\n  }\n\n  protected measureScrollbar() {\n    let className = '';\n    this._viewport.forEach(v => className += v.className);\n    let outerdiv = Utils.createDomElement('div', { className, style: { position: 'absolute', top: '-10000px', left: '-10000px', overflow: 'auto', width: '100px', height: '100px' } }, document.body);\n    let innerdiv = Utils.createDomElement('div', { style: { width: '200px', height: '200px', overflow: 'auto' } }, outerdiv);\n    let dim = {\n      width: outerdiv.offsetWidth - outerdiv.clientWidth,\n      height: outerdiv.offsetHeight - outerdiv.clientHeight\n    };\n    innerdiv.remove();\n    outerdiv.remove();\n    return dim;\n  }\n\n  /** Get the headers width in pixel */\n  getHeadersWidth() {\n    this.headersWidth = this.headersWidthL = this.headersWidthR = 0;\n    let includeScrollbar = !this._options.autoHeight;\n\n    let i = 0;\n    let ii = this.columns.length;\n    for (i = 0; i < ii; i++) {\n      if (!this.columns[i] || this.columns[i].hidden) continue;\n\n      let width = this.columns[i].width;\n\n      if ((this._options.frozenColumn) > -1 && (i > this._options.frozenColumn)) {\n        this.headersWidthR += width || 0;\n      } else {\n        this.headersWidthL += width || 0;\n      }\n    }\n\n    if (includeScrollbar) {\n      if ((this._options.frozenColumn) > -1 && (i > this._options.frozenColumn)) {\n        this.headersWidthR += this.scrollbarDimensions?.width ?? 0;\n      } else {\n        this.headersWidthL += this.scrollbarDimensions?.width ?? 0;\n      }\n    }\n\n    if (this.hasFrozenColumns()) {\n      this.headersWidthL = this.headersWidthL + 1000;\n\n      this.headersWidthR = Math.max(this.headersWidthR, this.viewportW) + this.headersWidthL;\n      this.headersWidthR += this.scrollbarDimensions?.width ?? 0;\n    } else {\n      this.headersWidthL += this.scrollbarDimensions?.width ?? 0;\n      this.headersWidthL = Math.max(this.headersWidthL, this.viewportW) + 1000;\n    }\n\n    this.headersWidth = this.headersWidthL + this.headersWidthR;\n    return Math.max(this.headersWidth, this.viewportW) + 1000;\n  }\n\n  protected getHeadersWidthL() {\n    this.headersWidthL = 0;\n\n    this.columns.forEach((column, i) => {\n      if (column.hidden) return;\n\n      if (!((this._options.frozenColumn) > -1 && (i > this._options.frozenColumn))) {\n        this.headersWidthL += column.width || 0;\n      }\n    });\n\n    if (this.hasFrozenColumns()) {\n      this.headersWidthL += 1000;\n    } else {\n      this.headersWidthL += this.scrollbarDimensions?.width ?? 0;\n      this.headersWidthL = Math.max(this.headersWidthL, this.viewportW) + 1000;\n    }\n\n    return this.headersWidthL;\n  }\n\n  protected getHeadersWidthR() {\n    this.headersWidthR = 0;\n\n    this.columns.forEach((column, i) => {\n      if (column.hidden) return;\n      if ((this._options.frozenColumn) > -1 && (i > this._options.frozenColumn)) {\n        this.headersWidthR += column.width || 0;\n      }\n    });\n\n    if (this.hasFrozenColumns()) {\n      this.headersWidthR = Math.max(this.headersWidthR, this.viewportW) + this.getHeadersWidthL();\n      this.headersWidthR += this.scrollbarDimensions?.width ?? 0;\n    }\n\n    return this.headersWidthR;\n  }\n\n  /** Get the grid canvas width */\n  getCanvasWidth(): number {\n    let availableWidth = this.viewportHasVScroll ? this.viewportW - (this.scrollbarDimensions?.width ?? 0) : this.viewportW;\n    let i = this.columns.length;\n\n    this.canvasWidthL = this.canvasWidthR = 0;\n\n    while (i--) {\n      if (!this.columns[i] || this.columns[i].hidden) continue;\n\n      if (this.hasFrozenColumns() && (i > this._options.frozenColumn)) {\n        this.canvasWidthR += this.columns[i].width || 0;\n      } else {\n        this.canvasWidthL += this.columns[i].width || 0;\n      }\n    }\n    let totalRowWidth = this.canvasWidthL + this.canvasWidthR;\n    if (this._options.fullWidthRows) {\n      let extraWidth = Math.max(totalRowWidth, availableWidth) - totalRowWidth;\n      if (extraWidth > 0) {\n        totalRowWidth += extraWidth;\n        if (this.hasFrozenColumns()) {\n          this.canvasWidthR += extraWidth;\n        } else {\n          this.canvasWidthL += extraWidth;\n        }\n      }\n    }\n    return totalRowWidth;\n  }\n\n  protected updateCanvasWidth(forceColumnWidthsUpdate?: boolean) {\n    let oldCanvasWidth = this.canvasWidth;\n    let oldCanvasWidthL = this.canvasWidthL;\n    let oldCanvasWidthR = this.canvasWidthR;\n    let widthChanged;\n    this.canvasWidth = this.getCanvasWidth();\n\n    widthChanged = this.canvasWidth !== oldCanvasWidth || this.canvasWidthL !== oldCanvasWidthL || this.canvasWidthR !== oldCanvasWidthR;\n\n    if (widthChanged || this.hasFrozenColumns() || this.hasFrozenRows) {\n      Utils.width(this._canvasTopL, this.canvasWidthL);\n\n      this.getHeadersWidth();\n\n      Utils.width(this._headerL, this.headersWidthL);\n      Utils.width(this._headerR, this.headersWidthR);\n\n      if (this.hasFrozenColumns()) {\n        const cWidth = Utils.width(this._container) || 0;\n        if (cWidth > 0 && this.canvasWidthL > cWidth) {\n          throw new Error('[SlickGrid] Frozen columns cannot be wider than the actual grid container width. '\n            + 'Make sure to have less columns freezed or make your grid container wider');\n        }\n        Utils.width(this._canvasTopR, this.canvasWidthR);\n\n        Utils.width(this._paneHeaderL, this.canvasWidthL);\n        Utils.setStyleSize(this._paneHeaderR, 'left', this.canvasWidthL);\n        Utils.setStyleSize(this._paneHeaderR, 'width', this.viewportW - this.canvasWidthL);\n\n        Utils.width(this._paneTopL, this.canvasWidthL);\n        Utils.setStyleSize(this._paneTopR, 'left', this.canvasWidthL);\n        Utils.width(this._paneTopR, this.viewportW - this.canvasWidthL);\n\n        Utils.width(this._headerRowScrollerL, this.canvasWidthL);\n        Utils.width(this._headerRowScrollerR, this.viewportW - this.canvasWidthL);\n\n        Utils.width(this._headerRowL, this.canvasWidthL);\n        Utils.width(this._headerRowR, this.canvasWidthR);\n\n        if (this._options.createFooterRow) {\n          Utils.width(this._footerRowScrollerL, this.canvasWidthL);\n          Utils.width(this._footerRowScrollerR, this.viewportW - this.canvasWidthL);\n\n          Utils.width(this._footerRowL, this.canvasWidthL);\n          Utils.width(this._footerRowR, this.canvasWidthR);\n        }\n        if (this._options.createPreHeaderPanel) {\n          Utils.width(this._preHeaderPanel, this.canvasWidth);\n        }\n        Utils.width(this._viewportTopL, this.canvasWidthL);\n        Utils.width(this._viewportTopR, this.viewportW - this.canvasWidthL);\n\n        if (this.hasFrozenRows) {\n          Utils.width(this._paneBottomL, this.canvasWidthL);\n          Utils.setStyleSize(this._paneBottomR, 'left', this.canvasWidthL);\n\n          Utils.width(this._viewportBottomL, this.canvasWidthL);\n          Utils.width(this._viewportBottomR, this.viewportW - this.canvasWidthL);\n\n          Utils.width(this._canvasBottomL, this.canvasWidthL);\n          Utils.width(this._canvasBottomR, this.canvasWidthR);\n        }\n      } else {\n        Utils.width(this._paneHeaderL, '100%');\n        Utils.width(this._paneTopL, '100%');\n        Utils.width(this._headerRowScrollerL, '100%');\n        Utils.width(this._headerRowL, this.canvasWidth);\n\n        if (this._options.createFooterRow) {\n          Utils.width(this._footerRowScrollerL, '100%');\n          Utils.width(this._footerRowL, this.canvasWidth);\n        }\n\n        if (this._options.createPreHeaderPanel) {\n          Utils.width(this._preHeaderPanel, this.canvasWidth);\n        }\n        Utils.width(this._viewportTopL, '100%');\n\n        if (this.hasFrozenRows) {\n          Utils.width(this._viewportBottomL, '100%');\n          Utils.width(this._canvasBottomL, this.canvasWidthL);\n        }\n      }\n    }\n\n    this.viewportHasHScroll = (this.canvasWidth >= this.viewportW - (this.scrollbarDimensions?.width ?? 0));\n\n    Utils.width(this._headerRowSpacerL, this.canvasWidth + (this.viewportHasVScroll ? (this.scrollbarDimensions?.width ?? 0) : 0));\n    Utils.width(this._headerRowSpacerR, this.canvasWidth + (this.viewportHasVScroll ? (this.scrollbarDimensions?.width ?? 0) : 0));\n\n    if (this._options.createFooterRow) {\n      Utils.width(this._footerRowSpacerL, this.canvasWidth + (this.viewportHasVScroll ? (this.scrollbarDimensions?.width ?? 0) : 0));\n      Utils.width(this._footerRowSpacerR, this.canvasWidth + (this.viewportHasVScroll ? (this.scrollbarDimensions?.width ?? 0) : 0));\n    }\n\n    if (widthChanged || forceColumnWidthsUpdate) {\n      this.applyColumnWidths();\n    }\n  }\n\n  protected disableSelection(target: HTMLElement[]) {\n    target.forEach((el) => {\n      el.setAttribute('unselectable', 'on');\n      (el.style as any).mozUserSelect = 'none';\n      this._bindingEventService.bind(el, 'selectstart', () => false);\n    });\n  }\n\n  protected getMaxSupportedCssHeight() {\n    let supportedHeight = 1000000;\n    // FF reports the height back but still renders blank after ~6M px\n    //let testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? 6000000 : 1000000000;\n    const testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? this._options.ffMaxSupportedCssHeight : this._options.maxSupportedCssHeight;\n    const div = Utils.createDomElement('div', { style: { display: 'hidden' } }, document.body);\n\n    while (true) {\n      const test = supportedHeight * 2;\n      Utils.height(div, test);\n      const height = Utils.height(div);\n\n      if (test > testUpTo || height !== test) {\n        break;\n      } else {\n        supportedHeight = test;\n      }\n    }\n\n    div.remove();\n    return supportedHeight;\n  }\n\n  /** Get grid unique identifier */\n  getUID() {\n    return this.uid;\n  }\n\n  /** Get Header Column Width Difference in pixel */\n  getHeaderColumnWidthDiff() {\n    return this.headerColumnWidthDiff;\n  }\n\n  /** Get scrollbar dimensions */\n  getScrollbarDimensions() {\n    return this.scrollbarDimensions;\n  }\n\n  /** Get the displayed scrollbar dimensions */\n  getDisplayedScrollbarDimensions() {\n    return {\n      width: this.viewportHasVScroll ? (this.scrollbarDimensions?.width ?? 0) : 0,\n      height: this.viewportHasHScroll ? (this.scrollbarDimensions?.height ?? 0) : 0\n    };\n  }\n\n  /** Get the absolute column minimum width */\n  getAbsoluteColumnMinWidth(): number {\n    return this.absoluteColumnMinWidth;\n  }\n\n  // TODO:  this is static.  need to handle page mutation.\n  protected bindAncestorScrollEvents() {\n    let elem: HTMLElement | null = (this.hasFrozenRows && !this._options.frozenBottom) ? this._canvasBottomL : this._canvasTopL;\n    while ((elem = elem!.parentNode as HTMLElement) !== document.body && elem != null) {\n      // bind to scroll containers only\n      if (elem == this._viewportTopL || elem.scrollWidth !== elem.clientWidth || elem.scrollHeight !== elem.clientHeight) {\n        this._boundAncestors.push(elem);\n        this._bindingEventService.bind(elem, 'scroll', this.handleActiveCellPositionChange.bind(this));\n      }\n    }\n  }\n\n  protected unbindAncestorScrollEvents() {\n    this._boundAncestors.forEach((ancestor) => {\n      this._bindingEventService.unbindByEventName(ancestor, 'scroll');\n    });\n    this._boundAncestors = [];\n  }\n\n  /**\n   * Updates an existing column definition and a corresponding header DOM element with the new title and tooltip.\n   * @param {Number|String} columnId Column id.\n   * @param {String} title New column name.\n   * @param {String} [toolTip] New column tooltip.\n   */\n  updateColumnHeader(columnId: number | string, title: string, toolTip?: string) {\n    if (!this.initialized) { return; }\n    let idx = this.getColumnIndex(columnId);\n    if (idx == null) {\n      return;\n    }\n\n    let columnDef = this.columns[idx];\n    let header: any = this.getColumnByIndex(idx);\n    if (header) {\n      if (title !== undefined) {\n        this.columns[idx].name = title;\n      }\n      if (toolTip !== undefined) {\n        this.columns[idx].toolTip = toolTip;\n      }\n\n      this.trigger(this.onBeforeHeaderCellDestroy, {\n        node: header,\n        column: columnDef,\n        grid: this\n      });\n\n      header.setAttribute('title', toolTip || '');\n      if (title !== undefined) {\n        header.children[0].innerHTML = this.sanitizeHtmlString(title);\n      }\n\n      this.trigger(this.onHeaderCellRendered, {\n        node: header,\n        column: columnDef,\n        grid: this\n      });\n    }\n  }\n\n  /**\n   * Get the Header DOM element\n   * @param {Column} columnDef - column definition\n   */\n  getHeader(columnDef: Column) {\n    if (!columnDef) {\n      return this.hasFrozenColumns() ? this._headers : this._headerL;\n    }\n    let idx = this.getColumnIndex(columnDef.id);\n    return this.hasFrozenColumns() ? ((idx <= this._options.frozenColumn) ? this._headerL : this._headerR) : this._headerL;\n  }\n\n  /**\n   * Get a specific Header Column DOM element\n   * @param {Number|String} [columnIdOrIdx] - column Id or index\n   */\n  getHeaderColumn(columnIdOrIdx: number | string) {\n    let idx = (typeof columnIdOrIdx === 'number' ? columnIdOrIdx : this.getColumnIndex(columnIdOrIdx));\n    let targetHeader = this.hasFrozenColumns() ? ((idx <= this._options.frozenColumn) ? this._headerL : this._headerR) : this._headerL;\n    let targetIndex = this.hasFrozenColumns() ? ((idx <= this._options.frozenColumn) ? idx : idx - this._options.frozenColumn - 1) : idx;\n\n    return targetHeader.children[targetIndex];\n  }\n\n  /** Get the Header Row DOM element */\n  getHeaderRow() {\n    return this.hasFrozenColumns() ? this._headerRows : this._headerRows[0];\n  }\n\n  /** Get the Footer DOM element */\n  getFooterRow() {\n    return this.hasFrozenColumns() ? this._footerRow : this._footerRow[0];\n  }\n\n  /** @alias `getPreHeaderPanelLeft` */\n  getPreHeaderPanel() {\n    return this._preHeaderPanel;\n  }\n\n  /** Get the Pre-Header Panel Left DOM node element */\n  getPreHeaderPanelLeft() {\n    return this._preHeaderPanel;\n  }\n\n  /** Get the Pre-Header Panel Right DOM node element */\n  getPreHeaderPanelRight() {\n    return this._preHeaderPanelR;\n  }\n\n  /**\n   * Get Header Row Column DOM element by its column Id\n   * @param {Number|String} [columnIdOrIdx] - column Id or index\n   */\n  getHeaderRowColumn(columnIdOrIdx: number | string) {\n    let idx = (typeof columnIdOrIdx === 'number' ? columnIdOrIdx : this.getColumnIndex(columnIdOrIdx));\n    let headerRowTarget;\n\n    if (this.hasFrozenColumns()) {\n      if (idx <= this._options.frozenColumn) {\n        headerRowTarget = this._headerRowL;\n      } else {\n        headerRowTarget = this._headerRowR;\n        idx -= this._options.frozenColumn + 1;\n      }\n    } else {\n      headerRowTarget = this._headerRowL;\n    }\n\n    return headerRowTarget.children[idx];\n  }\n\n  /** Get the Footer Row Column DOM element */\n  getFooterRowColumn(columnIdOrIdx: number | string) {\n    let idx = (typeof columnIdOrIdx === 'number' ? columnIdOrIdx : this.getColumnIndex(columnIdOrIdx));\n    let footerRowTarget;\n\n    if (this.hasFrozenColumns()) {\n      if (idx <= this._options.frozenColumn) {\n        footerRowTarget = this._footerRowL;\n      } else {\n        footerRowTarget = this._footerRowR;\n\n        idx -= this._options.frozenColumn + 1;\n      }\n    } else {\n      footerRowTarget = this._footerRowL;\n    }\n\n    return footerRowTarget.children[idx];\n  }\n\n  protected createColumnFooter() {\n    if (this._options.createFooterRow) {\n      this._footerRow.forEach((footer) => {\n        const columnElements = footer.querySelectorAll('.slick-footerrow-column');\n        columnElements.forEach((column) => {\n          const columnDef = Utils.storage.get(column, 'column');\n          this.trigger(this.onBeforeFooterRowCellDestroy, {\n            node: column,\n            column: columnDef,\n            grid: this\n          });\n        });\n      });\n\n      Utils.emptyElement(this._footerRowL);\n      Utils.emptyElement(this._footerRowR);\n\n      for (let i = 0; i < this.columns.length; i++) {\n        let m = this.columns[i];\n        if (!m || m.hidden) continue;\n\n        const footerRowCell = Utils.createDomElement('div', { className: `ui-state-default slick-state-default slick-footerrow-column l${i} r${i}` }, this.hasFrozenColumns() && (i > this._options.frozenColumn) ? this._footerRowR : this._footerRowL);\n        const className = this.hasFrozenColumns() && i <= this._options.frozenColumn ? 'frozen' : null;\n        if (className) {\n          footerRowCell.classList.add(className);\n        }\n\n        Utils.storage.put(footerRowCell, 'column', m);\n\n        this.trigger(this.onFooterRowCellRendered, {\n          node: footerRowCell,\n          column: m,\n          grid: this\n        });\n      }\n    }\n  }\n\n  protected handleHeaderMouseHoverOn(e: Event | SlickEventData_) {\n    (e as any)?.target.classList.add('ui-state-hover', 'slick-state-hover');\n  }\n\n  protected handleHeaderMouseHoverOff(e: Event | SlickEventData_) {\n    (e as any)?.target.classList.remove('ui-state-hover', 'slick-state-hover');\n  }\n\n  protected createColumnHeaders() {\n    this._headers.forEach((header) => {\n      const columnElements = header.querySelectorAll('.slick-header-column')\n      columnElements.forEach((column) => {\n        let columnDef = Utils.storage.get(column, 'column');\n        if (columnDef) {\n          this.trigger(this.onBeforeHeaderCellDestroy, {\n            node: column,\n            column: columnDef,\n            grid: this\n          });\n        }\n      });\n    })\n\n    Utils.emptyElement(this._headerL);\n    Utils.emptyElement(this._headerR);\n\n    this.getHeadersWidth();\n\n    Utils.width(this._headerL, this.headersWidthL);\n    Utils.width(this._headerR, this.headersWidthR);\n\n    this._headerRows.forEach((row) => {\n      const columnElements = row.querySelectorAll('.slick-headerrow-column');\n      columnElements.forEach((column) => {\n        const columnDef = Utils.storage.get(column, 'column');\n        if (columnDef) {\n          this.trigger(this.onBeforeHeaderRowCellDestroy, {\n            node: this,\n            column: columnDef,\n            grid: this\n          });\n        }\n      });\n    });\n\n    Utils.emptyElement(this._headerRowL);\n    Utils.emptyElement(this._headerRowR);\n\n    if (this._options.createFooterRow) {\n      const footerRowColumnElements = this._footerRowL.querySelectorAll('.slick-footerrow-column');\n      footerRowColumnElements.forEach((column) => {\n        let columnDef = Utils.storage.get(column, 'column');\n        if (columnDef) {\n          this.trigger(this.onBeforeFooterRowCellDestroy, {\n            node: this,\n            column: columnDef,\n            grid: this\n          });\n        }\n      });\n      Utils.emptyElement(this._footerRowL);\n\n      if (this.hasFrozenColumns()) {\n        const footerRowColumnElements = this._footerRowR.querySelectorAll('.slick-footerrow-column');\n        footerRowColumnElements.forEach((column) => {\n          let columnDef = Utils.storage.get(column, 'column');\n          if (columnDef) {\n            this.trigger(this.onBeforeFooterRowCellDestroy, {\n              node: this,\n              column: columnDef,\n              grid: this\n            });\n          }\n        });\n        Utils.emptyElement(this._footerRowR);\n      }\n    }\n\n    for (let i = 0; i < this.columns.length; i++) {\n      const m: Column = this.columns[i];\n      const headerTarget = this.hasFrozenColumns() ? ((i <= this._options.frozenColumn) ? this._headerL : this._headerR) : this._headerL;\n      const headerRowTarget = this.hasFrozenColumns() ? ((i <= this._options.frozenColumn) ? this._headerRowL : this._headerRowR) : this._headerRowL;\n\n      const header = Utils.createDomElement('div', { id: `${this.uid + m.id}`, dataset: { id: String(m.id) }, className: 'ui-state-default slick-state-default slick-header-column', title: m.toolTip || '' }, headerTarget);\n      Utils.createDomElement('span', { className: 'slick-column-name', innerHTML: this.sanitizeHtmlString(m.name as string) }, header);\n      Utils.width(header, m.width! - this.headerColumnWidthDiff);\n\n      let classname = m.headerCssClass || null;\n      if (classname) {\n        header.classList.add(...classname.split(' '));\n      }\n      classname = this.hasFrozenColumns() && i <= this._options.frozenColumn ? 'frozen' : null;\n      if (classname) {\n        header.classList.add(classname);\n      }\n\n      this._bindingEventService.bind(header, 'mouseenter', this.handleHeaderMouseEnter.bind(this) as EventListener);\n      this._bindingEventService.bind(header, 'mouseleave', this.handleHeaderMouseLeave.bind(this) as EventListener);\n\n      Utils.storage.put(header, 'column', m);\n\n      if (this._options.enableColumnReorder || m.sortable) {\n        this._bindingEventService.bind(header, 'mouseenter', this.handleHeaderMouseHoverOn.bind(this) as EventListener);\n        this._bindingEventService.bind(header, 'mouseleave', this.handleHeaderMouseHoverOff.bind(this) as EventListener);\n      }\n\n      if (m.hasOwnProperty('headerCellAttrs') && m.headerCellAttrs instanceof Object) {\n        for (let key in m.headerCellAttrs) {\n          if (m.headerCellAttrs.hasOwnProperty(key)) {\n            header.setAttribute(key, m.headerCellAttrs[key]);\n          }\n        }\n      }\n\n      if (m.sortable) {\n        header.classList.add('slick-header-sortable');\n        Utils.createDomElement('div', { className: `slick-sort-indicator ${this._options.numberedMultiColumnSort && !this._options.sortColNumberInSeparateSpan ? ' slick-sort-indicator-numbered' : ''}` }, header);\n        if (this._options.numberedMultiColumnSort && this._options.sortColNumberInSeparateSpan) {\n          Utils.createDomElement('div', { className: 'slick-sort-indicator-numbered' }, header);\n        }\n      }\n\n      this.trigger(this.onHeaderCellRendered, {\n        node: header,\n        column: m,\n        grid: this\n      });\n\n      if (this._options.showHeaderRow) {\n        const headerRowCell = Utils.createDomElement('div', { className: `ui-state-default slick-state-default slick-headerrow-column l${i} r${i}` }, headerRowTarget);\n        const classname = this.hasFrozenColumns() && i <= this._options.frozenColumn ? 'frozen' : null;\n        if (classname) {\n          headerRowCell.classList.add(classname);\n        }\n\n        this._bindingEventService.bind(headerRowCell, 'mouseenter', this.handleHeaderRowMouseEnter.bind(this) as EventListener);\n        this._bindingEventService.bind(headerRowCell, 'mouseleave', this.handleHeaderRowMouseLeave.bind(this) as EventListener);\n\n        Utils.storage.put(headerRowCell, 'column', m);\n\n        this.trigger(this.onHeaderRowCellRendered, {\n          node: headerRowCell,\n          column: m,\n          grid: this\n        });\n      }\n      if (this._options.createFooterRow && this._options.showFooterRow) {\n        const footerRowTarget = this.hasFrozenColumns() ? ((i <= this._options.frozenColumn) ? this._footerRow[0] : this._footerRow[1]) : this._footerRow[0];\n        const footerRowCell = Utils.createDomElement('div', { className: `ui-state-default slick-state-default slick-footerrow-column l${i} r${i}` }, footerRowTarget);\n        Utils.storage.put(footerRowCell, 'column', m)\n\n        this.trigger(this.onFooterRowCellRendered, {\n          node: footerRowCell,\n          column: m,\n          grid: this\n        });\n      }\n    }\n\n    this.setSortColumns(this.sortColumns);\n    this.setupColumnResize();\n    if (this._options.enableColumnReorder) {\n      if (typeof this._options.enableColumnReorder == 'function') {\n        this._options.enableColumnReorder(this, this._headers, this.headerColumnWidthDiff, this.setColumns, this.setupColumnResize, this.columns, this.getColumnIndex, this.uid, this.trigger);\n      } else {\n        this.setupColumnReorder();\n      }\n    }\n  }\n\n  protected setupColumnSort() {\n    this._headers.forEach((header) => {\n      this._bindingEventService.bind(header, 'click', (e: any) => {\n        if (this.columnResizeDragging) {\n          return;\n        }\n\n        if (e.target.classList.contains('slick-resizable-handle')) {\n          return;\n        }\n\n        let coll = e.target.closest('.slick-header-column');\n        if (!coll) {\n          return;\n        }\n\n        let column = Utils.storage.get(coll, 'column');\n        if (column.sortable) {\n          if (!this.getEditorLock().commitCurrentEdit()) {\n            return;\n          }\n\n          let previousSortColumns = this.sortColumns.slice();\n          let sortColumn: ColumnSort | null = null;\n          let i = 0;\n          for (; i < this.sortColumns.length; i++) {\n            if (this.sortColumns[i].columnId == column.id) {\n              sortColumn = this.sortColumns[i];\n              sortColumn.sortAsc = !sortColumn.sortAsc;\n              break;\n            }\n          }\n          let hadSortCol = !!sortColumn;\n\n          if (this._options.tristateMultiColumnSort) {\n            if (!sortColumn) {\n              sortColumn = { columnId: column.id, sortAsc: column.defaultSortAsc };\n            }\n            if (hadSortCol && sortColumn.sortAsc) {\n              // three state: remove sort rather than go back to ASC\n              this.sortColumns.splice(i, 1);\n              sortColumn = null;\n            }\n            if (!this._options.multiColumnSort) {\n              this.sortColumns = [];\n            }\n            if (sortColumn && (!hadSortCol || !this._options.multiColumnSort)) {\n              this.sortColumns.push(sortColumn);\n            }\n          } else {\n            // legacy behaviour\n            if (e.metaKey && this._options.multiColumnSort) {\n              if (sortColumn) {\n                this.sortColumns.splice(i, 1);\n              }\n            } else {\n              if ((!e.shiftKey && !e.metaKey) || !this._options.multiColumnSort) {\n                this.sortColumns = [];\n              }\n\n              if (!sortColumn) {\n                sortColumn = { columnId: column.id, sortAsc: column.defaultSortAsc };\n                this.sortColumns.push(sortColumn);\n              } else if (this.sortColumns.length === 0) {\n                this.sortColumns.push(sortColumn);\n              }\n            }\n          }\n\n          let onSortArgs;\n          if (!this._options.multiColumnSort) {\n            onSortArgs = {\n              multiColumnSort: false,\n              previousSortColumns: previousSortColumns,\n              columnId: (this.sortColumns.length > 0 ? column.id : null),\n              sortCol: (this.sortColumns.length > 0 ? column : null),\n              sortAsc: (this.sortColumns.length > 0 ? this.sortColumns[0].sortAsc : true)\n            };\n          } else {\n            onSortArgs = {\n              multiColumnSort: true,\n              previousSortColumns: previousSortColumns,\n              sortCols: this.sortColumns.map((col) => {\n                return { columnId: this.columns[this.getColumnIndex(col.columnId)].id, sortCol: this.columns[this.getColumnIndex(col.columnId)], sortAsc: col.sortAsc };\n              })\n            };\n          }\n\n          if (this.trigger(this.onBeforeSort, onSortArgs, e).getReturnValue() !== false) {\n            this.setSortColumns(this.sortColumns);\n            this.trigger(this.onSort, onSortArgs, e);\n          }\n        }\n      });\n    });\n  }\n\n  protected currentPositionInHeader(id: number | string) {\n    let currentPosition = 0;\n    this._headers.forEach((header) => {\n      const columnElements = header.querySelectorAll('.slick-header-column')\n      columnElements.forEach((column, i) => {\n        if (column.id == id) {\n          currentPosition = i;\n        }\n      });\n    });\n\n    return currentPosition;\n  }\n\n  protected remove(arr: any[], elem: HTMLElement) {\n    let index = arr.lastIndexOf(elem);\n    if (index > -1) {\n      arr.splice(index, 1);\n      this.remove(arr, elem);\n    }\n  }\n\n  protected setupColumnReorder() {\n    if (this.sortableSideLeftInstance) {\n      this.sortableSideLeftInstance.destroy();\n      this.sortableSideRightInstance.destroy();\n    }\n\n    let columnScrollTimer: any = null;\n\n    const scrollColumnsRight = () => this._viewportScrollContainerX.scrollLeft = this._viewportScrollContainerX.scrollLeft + 10;\n    const scrollColumnsLeft = () => this._viewportScrollContainerX.scrollLeft = this._viewportScrollContainerX.scrollLeft - 10;\n\n    let canDragScroll;\n    let sortableOptions = {\n      animation: 50,\n      direction: 'horizontal',\n      chosenClass: 'slick-header-column-active',\n      ghostClass: 'slick-sortable-placeholder',\n      draggable: '.slick-header-column',\n      dragoverBubble: false,\n      revertClone: true,\n      scroll: !this.hasFrozenColumns(), // enable auto-scroll\n      onStart: (e: any) => {\n        canDragScroll = !this.hasFrozenColumns() ||\n          Utils.offset(e.item)!.left > Utils.offset(this._viewportScrollContainerX)!.left;\n\n        if (canDragScroll && e.originalEvent.pageX > this._container.clientWidth) {\n          if (!(columnScrollTimer)) {\n            columnScrollTimer = setInterval(scrollColumnsRight, 100);\n          }\n        } else if (canDragScroll && e.originalEvent.pageX < Utils.offset(this._viewportScrollContainerX)!.left) {\n          if (!(columnScrollTimer)) {\n            columnScrollTimer = setInterval(scrollColumnsLeft, 100);\n          }\n        } else {\n          clearInterval(columnScrollTimer);\n          columnScrollTimer = null;\n        }\n      },\n      onEnd: (e: any) => {\n        let cancel = false;\n        clearInterval(columnScrollTimer);\n        columnScrollTimer = null;\n        let limit;\n\n        if (cancel || !this.getEditorLock().commitCurrentEdit()) {\n          return;\n        }\n\n        let reorderedIds = this.sortableSideLeftInstance?.toArray();\n        reorderedIds = reorderedIds.concat(this.sortableSideRightInstance?.toArray());\n\n        let reorderedColumns: Column[] = [];\n        for (let i = 0; i < reorderedIds.length; i++) {\n          reorderedColumns.push(this.columns[this.getColumnIndex(reorderedIds[i])]);\n        }\n        this.setColumns(reorderedColumns);\n\n        this.trigger(this.onColumnsReordered, { impactedColumns: this.getImpactedColumns(limit) });\n        e.stopPropagation();\n        this.setupColumnResize();\n      }\n    };\n\n    this.sortableSideLeftInstance = Sortable.create(this._headerL, sortableOptions);\n    this.sortableSideRightInstance = Sortable.create(this._headerR, sortableOptions);\n  }\n\n  protected getHeaderChildren() {\n    const a = Array.from(this._headers[0].children);\n    const b = Array.from(this._headers[1].children);\n    return a.concat(b) as HTMLElement[];\n  }\n\n  protected getImpactedColumns(limit?: { start: number; end: number; }) {\n    let impactedColumns: Column[] = [];\n\n    if (limit) {\n      for (let i = limit.start; i <= limit.end; i++) {\n        impactedColumns.push(this.columns[i]);\n      }\n    } else {\n      impactedColumns = this.columns;\n    }\n\n    return impactedColumns;\n  }\n\n  protected handleResizeableHandleDoubleClick(evt: MouseEvent & { target: HTMLDivElement; }) {\n    const triggeredByColumn = evt.target.parentElement!.id.replace(this.uid, '');\n    this.trigger(this.onColumnsResizeDblClick, { triggeredByColumn: triggeredByColumn });\n  }\n\n  protected setupColumnResize() {\n    if (typeof Resizable === 'undefined') {\n      throw new Error(`Slick.Resizable is undefined, make sure to import \"slick.interactions.js\"`);\n    }\n\n    let j: number, k: number, c: Column, pageX: number, minPageX: number, maxPageX: number, firstResizable: any, lastResizable: any;\n    let frozenLeftColMaxWidth = 0;\n\n    const children: HTMLElement[] = this.getHeaderChildren();\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      const handles = child.querySelectorAll('.slick-resizable-handle');\n      handles.forEach((handle) => handle.remove());\n\n      if (i >= this.columns.length || !this.columns[i] || this.columns[i].hidden) {\n        continue;\n      }\n\n      if (this.columns[i].resizable) {\n        if (firstResizable === undefined) {\n          firstResizable = i;\n        }\n        lastResizable = i;\n      }\n    }\n\n    if (firstResizable === undefined) {\n      return;\n    }\n\n    for (let i = 0; i < children.length; i++) {\n      const colElm = children[i];\n\n      if (i >= this.columns.length || !this.columns[i] || this.columns[i].hidden) {\n        continue;\n      }\n      if (i < firstResizable || (this._options.forceFitColumns && i >= lastResizable)) {\n        continue;\n      }\n\n      const resizeableHandle = Utils.createDomElement('div', { className: 'slick-resizable-handle', role: 'separator', ariaOrientation: 'horizontal' }, colElm);\n      this._bindingEventService.bind(resizeableHandle, 'dblclick', this.handleResizeableHandleDoubleClick.bind(this) as EventListener);\n\n      this.slickResizableInstances.push(\n        Resizable({\n          resizeableElement: colElm as HTMLElement,\n          resizeableHandleElement: resizeableHandle,\n          onResizeStart: (e: any, resizeElms: any) => {\n            let targetEvent = e.touches ? e.touches[0] : e;\n            if (!this.getEditorLock().commitCurrentEdit()) {\n              return false;\n            }\n            pageX = targetEvent.pageX;\n            frozenLeftColMaxWidth = 0;\n            resizeElms.resizeableElement.classList.add('slick-header-column-active');\n            let shrinkLeewayOnRight: number | null = null;\n            let stretchLeewayOnRight: number | null = null;\n            // lock each column's width option to current width\n            for (let pw = 0; pw < children.length; pw++) {\n              if (pw >= this.columns.length || !this.columns[pw] || this.columns[pw].hidden) {\n                continue;\n              }\n              this.columns[pw].previousWidth = children[pw].offsetWidth;\n            }\n            if (this._options.forceFitColumns) {\n              shrinkLeewayOnRight = 0;\n              stretchLeewayOnRight = 0;\n              // colums on right affect maxPageX/minPageX\n              for (j = i + 1; j < this.columns.length; j++) {\n                c = this.columns[j];\n                if (c && c.resizable && !c.hidden) {\n                  if (stretchLeewayOnRight !== null) {\n                    if (c.maxWidth) {\n                      stretchLeewayOnRight += c.maxWidth - (c.previousWidth || 0);\n                    } else {\n                      stretchLeewayOnRight = null;\n                    }\n                  }\n                  shrinkLeewayOnRight += (c.previousWidth || 0) - Math.max(c.minWidth || 0, this.absoluteColumnMinWidth);\n                }\n              }\n            }\n            let shrinkLeewayOnLeft = 0;\n            let stretchLeewayOnLeft: number | null = 0;\n            for (j = 0; j <= i; j++) {\n              // columns on left only affect minPageX\n              c = this.columns[j];\n              if (c && c.resizable && !c.hidden) {\n                if (stretchLeewayOnLeft !== null) {\n                  if (c.maxWidth) {\n                    stretchLeewayOnLeft += c.maxWidth - (c.previousWidth || 0);\n                  } else {\n                    stretchLeewayOnLeft = null;\n                  }\n                }\n                shrinkLeewayOnLeft += (c.previousWidth || 0) - Math.max(c.minWidth || 0, this.absoluteColumnMinWidth);\n              }\n            }\n            if (shrinkLeewayOnRight === null) {\n              shrinkLeewayOnRight = 100000;\n            }\n            if (shrinkLeewayOnLeft === null) {\n              shrinkLeewayOnLeft = 100000;\n            }\n            if (stretchLeewayOnRight === null) {\n              stretchLeewayOnRight = 100000;\n            }\n            if (stretchLeewayOnLeft === null) {\n              stretchLeewayOnLeft = 100000;\n            }\n            maxPageX = pageX + Math.min(shrinkLeewayOnRight, stretchLeewayOnLeft);\n            minPageX = pageX - Math.min(shrinkLeewayOnLeft, stretchLeewayOnRight);\n          },\n          onResize: (e: any, resizeElms: any) => {\n            let targetEvent = e.touches ? e.touches[0] : e;\n            this.columnResizeDragging = true;\n            let actualMinWidth, d = Math.min(maxPageX, Math.max(minPageX, targetEvent.pageX)) - pageX, x;\n            let newCanvasWidthL = 0, newCanvasWidthR = 0;\n            let viewportWidth = this.viewportHasVScroll ? this.viewportW - (this.scrollbarDimensions?.width ?? 0) : this.viewportW;\n\n            if (d < 0) { // shrink column\n              x = d;\n\n              for (j = i; j >= 0; j--) {\n                c = this.columns[j];\n                if (c && c.resizable && !c.hidden) {\n                  actualMinWidth = Math.max(c.minWidth || 0, this.absoluteColumnMinWidth);\n                  if (x && c.previousWidth + x < actualMinWidth) {\n                    x += (c.previousWidth || 0) - actualMinWidth;\n                    c.width = actualMinWidth;\n                  } else {\n                    c.width = c.previousWidth + x;\n                    x = 0;\n                  }\n                }\n              }\n\n              for (k = 0; k <= i; k++) {\n                c = this.columns[k];\n                if (!c || c.hidden) { continue; }\n\n                if (this.hasFrozenColumns() && (k > this._options.frozenColumn)) {\n                  newCanvasWidthR += c.width || 0;\n                } else {\n                  newCanvasWidthL += c.width || 0;\n                }\n              }\n\n              if (this._options.forceFitColumns) {\n                x = -d;\n                for (j = i + 1; j < this.columns.length; j++) {\n                  c = this.columns[j];\n                  if (!c || c.hidden) { continue; }\n                  if (c.resizable) {\n                    if (x && c.maxWidth && (c.maxWidth - (c.previousWidth || 0) < x)) {\n                      x -= c.maxWidth - (c.previousWidth || 0);\n                      c.width = c.maxWidth;\n                    } else {\n                      c.width = c.previousWidth + x;\n                      x = 0;\n                    }\n\n                    if (this.hasFrozenColumns() && (j > this._options.frozenColumn)) {\n                      newCanvasWidthR += c.width || 0;\n                    } else {\n                      newCanvasWidthL += c.width || 0;\n                    }\n                  }\n                }\n              } else {\n                for (j = i + 1; j < this.columns.length; j++) {\n                  c = this.columns[j];\n                  if (!c || c.hidden) { continue; }\n\n                  if (this.hasFrozenColumns() && (j > this._options.frozenColumn)) {\n                    newCanvasWidthR += c.width || 0;\n                  } else {\n                    newCanvasWidthL += c.width || 0;\n                  }\n                }\n              }\n\n              if (this._options.forceFitColumns) {\n                x = -d;\n                for (j = i + 1; j < this.columns.length; j++) {\n                  c = this.columns[j];\n                  if (!c || c.hidden) { continue; }\n                  if (c.resizable) {\n                    if (x && c.maxWidth && (c.maxWidth - (c.previousWidth || 0) < x)) {\n                      x -= c.maxWidth - (c.previousWidth || 0);\n                      c.width = c.maxWidth;\n                    } else {\n                      c.width = (c.previousWidth || 0) + x;\n                      x = 0;\n                    }\n                  }\n                }\n              }\n            } else { // stretch column\n              x = d;\n\n              newCanvasWidthL = 0;\n              newCanvasWidthR = 0;\n\n              for (j = i; j >= 0; j--) {\n                c = this.columns[j];\n                if (!c || c.hidden) { continue; }\n                if (c.resizable) {\n                  if (x && c.maxWidth && (c.maxWidth - (c.previousWidth || 0) < x)) {\n                    x -= c.maxWidth - (c.previousWidth || 0);\n                    c.width = c.maxWidth;\n                  } else {\n                    let newWidth = (c.previousWidth || 0) + x;\n                    let resizedCanvasWidthL = this.canvasWidthL + x;\n\n                    if (this.hasFrozenColumns() && (j <= this._options.frozenColumn)) {\n                      // if we're on the left frozen side, we need to make sure that our left section width never goes over the total viewport width\n                      if (newWidth > frozenLeftColMaxWidth && resizedCanvasWidthL < (viewportWidth - this._options.frozenRightViewportMinWidth)) {\n                        frozenLeftColMaxWidth = newWidth; // keep max column width ref, if we go over the limit this number will stop increasing\n                      }\n                      c.width = ((resizedCanvasWidthL + this._options.frozenRightViewportMinWidth) > viewportWidth) ? frozenLeftColMaxWidth : newWidth;\n                    } else {\n                      c.width = newWidth;\n                    }\n                    x = 0;\n                  }\n                }\n              }\n\n              for (k = 0; k <= i; k++) {\n                c = this.columns[k];\n                if (!c || c.hidden) { continue; }\n\n                if (this.hasFrozenColumns() && (k > this._options.frozenColumn)) {\n                  newCanvasWidthR += c.width || 0;\n                } else {\n                  newCanvasWidthL += c.width || 0;\n                }\n              }\n\n              if (this._options.forceFitColumns) {\n                x = -d;\n                for (j = i + 1; j < this.columns.length; j++) {\n                  c = this.columns[j];\n                  if (!c || c.hidden) { continue; }\n                  if (c.resizable) {\n                    actualMinWidth = Math.max(c.minWidth || 0, this.absoluteColumnMinWidth);\n                    if (x && (c.previousWidth || 0) + x < actualMinWidth) {\n                      x += (c.previousWidth || 0) - actualMinWidth;\n                      c.width = actualMinWidth;\n                    } else {\n                      c.width = (c.previousWidth || 0) + x;\n                      x = 0;\n                    }\n\n                    if (this.hasFrozenColumns() && (j > this._options.frozenColumn)) {\n                      newCanvasWidthR += c.width || 0;\n                    } else {\n                      newCanvasWidthL += c.width || 0;\n                    }\n                  }\n                }\n              } else {\n                for (j = i + 1; j < this.columns.length; j++) {\n                  c = this.columns[j];\n                  if (!c || c.hidden) { continue; }\n\n                  if (this.hasFrozenColumns() && (j > this._options.frozenColumn)) {\n                    newCanvasWidthR += c.width || 0;\n                  } else {\n                    newCanvasWidthL += c.width || 0;\n                  }\n                }\n              }\n            }\n\n            if (this.hasFrozenColumns() && newCanvasWidthL !== this.canvasWidthL) {\n              Utils.width(this._headerL, newCanvasWidthL + 1000);\n              Utils.setStyleSize(this._paneHeaderR, 'left', newCanvasWidthL);\n            }\n\n            this.applyColumnHeaderWidths();\n            if (this._options.syncColumnCellResize) {\n              this.applyColumnWidths();\n            }\n            this.trigger(this.onColumnsDrag, {\n              triggeredByColumn: resizeElms.resizeableElement,\n              resizeHandle: resizeElms.resizeableHandleElement\n            });\n          },\n          onResizeEnd: (_e: Event, resizeElms: any) => {\n            resizeElms.resizeableElement.classList.remove('slick-header-column-active');\n\n            let triggeredByColumn = resizeElms.resizeableElement.id.replace(this.uid, '');\n            if (this.trigger(this.onBeforeColumnsResize, { triggeredByColumn: triggeredByColumn }).getReturnValue() === true) {\n              this.applyColumnHeaderWidths();\n            }\n            let newWidth;\n            for (j = 0; j < this.columns.length; j++) {\n              c = this.columns[j];\n              if (!c || c.hidden) { continue; }\n              newWidth = children[j].offsetWidth;\n\n              if (c.previousWidth !== newWidth && c.rerenderOnResize) {\n                this.invalidateAllRows();\n              }\n            }\n            this.updateCanvasWidth(true);\n            this.render();\n            this.trigger(this.onColumnsResized, { triggeredByColumn: triggeredByColumn });\n            setTimeout(() => { this.columnResizeDragging = false; }, 300);\n          }\n        })\n      );\n    }\n  }\n\n  protected getVBoxDelta(el: HTMLElement) {\n    let p = ['borderTopWidth', 'borderBottomWidth', 'paddingTop', 'paddingBottom'];\n    let styles = getComputedStyle(el);\n    let delta = 0;\n    p.forEach((val) => delta += Utils.toFloat(styles[val]));\n    return delta;\n  }\n\n  protected setFrozenOptions() {\n    this._options.frozenColumn = (this._options.frozenColumn >= 0 && this._options.frozenColumn < this.columns.length)\n      ? parseInt(this._options.frozenColumn as unknown as string)\n      : -1;\n\n    if (this._options.frozenRow > -1) {\n      this.hasFrozenRows = true;\n      this.frozenRowsHeight = (this._options.frozenRow) * this._options.rowHeight;\n      let dataLength = this.getDataLength();\n\n      this.actualFrozenRow = (this._options.frozenBottom)\n        ? (dataLength - this._options.frozenRow)\n        : this._options.frozenRow;\n    } else {\n      this.hasFrozenRows = false;\n    }\n  }\n\n  protected setPaneVisibility() {\n    if (this.hasFrozenColumns()) {\n      Utils.show(this._paneHeaderR);\n      Utils.show(this._paneTopR);\n\n      if (this.hasFrozenRows) {\n        Utils.show(this._paneBottomL);\n        Utils.show(this._paneBottomR);\n      } else {\n        Utils.hide(this._paneBottomR);\n        Utils.hide(this._paneBottomL);\n      }\n    } else {\n      Utils.hide(this._paneHeaderR);\n      Utils.hide(this._paneTopR);\n      Utils.hide(this._paneBottomR);\n\n      if (this.hasFrozenRows) {\n        Utils.show(this._paneBottomL);\n      } else {\n        Utils.hide(this._paneBottomR);\n        Utils.hide(this._paneBottomL);\n      }\n    }\n  }\n\n  protected setOverflow() {\n    this._viewportTopL.style['overflow-x'] = (this.hasFrozenColumns()) ? (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'hidden' : 'scroll') : (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'hidden' : 'auto');\n    this._viewportTopL.style['overflow-y'] = (!this.hasFrozenColumns() && this._options.alwaysShowVerticalScroll) ? 'scroll' : ((this.hasFrozenColumns()) ? (this.hasFrozenRows ? 'hidden' : 'hidden') : (this.hasFrozenRows ? 'scroll' : 'auto'));\n\n    this._viewportTopR.style['overflow-x'] = (this.hasFrozenColumns()) ? (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'hidden' : 'scroll') : (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'hidden' : 'auto');\n    this._viewportTopR.style['overflow-y'] = this._options.alwaysShowVerticalScroll ? 'scroll' : ((this.hasFrozenColumns()) ? (this.hasFrozenRows ? 'scroll' : 'auto') : (this.hasFrozenRows ? 'scroll' : 'auto'));\n\n    this._viewportBottomL.style['overflow-x'] = (this.hasFrozenColumns()) ? (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'scroll' : 'auto') : (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'auto' : 'auto');\n    this._viewportBottomL.style['overflow-y'] = (!this.hasFrozenColumns() && this._options.alwaysShowVerticalScroll) ? 'scroll' : ((this.hasFrozenColumns()) ? (this.hasFrozenRows ? 'hidden' : 'hidden') : (this.hasFrozenRows ? 'scroll' : 'auto'));\n\n    this._viewportBottomR.style['overflow-x'] = (this.hasFrozenColumns()) ? (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'scroll' : 'auto') : (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'auto' : 'auto');\n    this._viewportBottomR.style['overflow-y'] = this._options.alwaysShowVerticalScroll ? 'scroll' : ((this.hasFrozenColumns()) ? (this.hasFrozenRows ? 'auto' : 'auto') : (this.hasFrozenRows ? 'auto' : 'auto'));\n\n    if (this._options.viewportClass) {\n      this._viewportTopL.classList.add(...this._options.viewportClass.split(' '));\n      this._viewportTopR.classList.add(...this._options.viewportClass.split(' '));\n      this._viewportBottomL.classList.add(...this._options.viewportClass.split(' '));\n      this._viewportBottomR.classList.add(...this._options.viewportClass.split(' '));\n    }\n  }\n\n  protected setScroller() {\n    if (this.hasFrozenColumns()) {\n      this._headerScrollContainer = this._headerScrollerR;\n      this._headerRowScrollContainer = this._headerRowScrollerR;\n      this._footerRowScrollContainer = this._footerRowScrollerR;\n\n      if (this.hasFrozenRows) {\n        if (this._options.frozenBottom) {\n          this._viewportScrollContainerX = this._viewportBottomR;\n          this._viewportScrollContainerY = this._viewportTopR;\n        } else {\n          this._viewportScrollContainerX = this._viewportScrollContainerY = this._viewportBottomR;\n        }\n      } else {\n        this._viewportScrollContainerX = this._viewportScrollContainerY = this._viewportTopR;\n      }\n    } else {\n      this._headerScrollContainer = this._headerScrollerL;\n      this._headerRowScrollContainer = this._headerRowScrollerL;\n      this._footerRowScrollContainer = this._footerRowScrollerL;\n\n      if (this.hasFrozenRows) {\n        if (this._options.frozenBottom) {\n          this._viewportScrollContainerX = this._viewportBottomL;\n          this._viewportScrollContainerY = this._viewportTopL;\n        } else {\n          this._viewportScrollContainerX = this._viewportScrollContainerY = this._viewportBottomL;\n        }\n      } else {\n        this._viewportScrollContainerX = this._viewportScrollContainerY = this._viewportTopL;\n      }\n    }\n  }\n\n  protected measureCellPaddingAndBorder() {\n    const h = ['borderLeftWidth', 'borderRightWidth', 'paddingLeft', 'paddingRight'];\n    const v = ['borderTopWidth', 'borderBottomWidth', 'paddingTop', 'paddingBottom'];\n    const header = this._headers[0];\n\n    this.headerColumnWidthDiff = this.headerColumnHeightDiff = 0;\n    this.cellWidthDiff = this.cellHeightDiff = 0;\n\n    let el = Utils.createDomElement('div', { className: 'ui-state-default slick-state-default slick-header-column', style: { visibility: 'hidden' }, textContent: '-' }, header);\n    let style = getComputedStyle(el);\n    if (style['box-sizing'] !== 'border-box' && style['-moz-box-sizing'] !== 'border-box' && style['-webkit-box-sizing'] !== 'border-box') {\n      h.forEach((val) => this.headerColumnWidthDiff += Utils.toFloat(style[val]));\n      v.forEach((val) => this.headerColumnHeightDiff += Utils.toFloat(style[val]));\n    }\n    el.remove();\n\n    const r = Utils.createDomElement('div', { className: 'slick-row' }, this._canvas[0]);\n    el = Utils.createDomElement('div', { className: 'slick-cell', id: '', style: { visibility: 'hidden' }, textContent: '-' }, r);\n    style = getComputedStyle(el);\n    if (style['box-sizing'] !== 'border-box' && style['-moz-box-sizing'] !== 'border-box' && style['-webkit-box-sizing'] !== 'border-box') {\n      h.forEach((val) => this.cellWidthDiff += Utils.toFloat(style[val]));\n      v.forEach((val) => this.cellHeightDiff += Utils.toFloat(style[val]));\n    }\n    r.remove();\n\n    this.absoluteColumnMinWidth = Math.max(this.headerColumnWidthDiff, this.cellWidthDiff);\n  }\n\n  protected createCssRules() {\n    const template = Utils.createDomElement('template', { innerHTML: '<style type=\"text/css\" rel=\"stylesheet\" />' });\n    this._style = template.content.firstChild;\n    document.head.appendChild(this._style);\n\n    let rowHeight = (this._options.rowHeight - this.cellHeightDiff);\n    let rules = [\n      `.${this.uid} .slick-group-header-column { left: 1000px; }`,\n      `.${this.uid} .slick-header-column { left: 1000px; }`,\n      `.${this.uid} .slick-top-panel { height: ${this._options.topPanelHeight}px; }`,\n      `.${this.uid} .slick-preheader-panel { height: ${this._options.preHeaderPanelHeight}px; }`,\n      `.${this.uid} .slick-headerrow-columns { height: ${this._options.headerRowHeight}px; }`,\n      `.${this.uid} .slick-footerrow-columns { height: ${this._options.footerRowHeight}px; }`,\n      `.${this.uid} .slick-cell { height: ${rowHeight}px; }`,\n      `.${this.uid} .slick-row { height: ${this._options.rowHeight}px; }`\n    ];\n\n    for (let i = 0; i < this.columns.length; i++) {\n      if (!this.columns[i] || this.columns[i].hidden) continue;\n\n      rules.push(`.${this.uid} .l${i} { }`);\n      rules.push(`.${this.uid} .r${i} { }`);\n    }\n\n    if (this._style.styleSheet) { // IE\n      this._style.styleSheet.cssText = rules.join(' ');\n    } else {\n      this._style.appendChild(document.createTextNode(rules.join(' ')));\n    }\n  }\n\n  protected getColumnCssRules(idx: number) {\n    let i: number;\n    if (!this.stylesheet) {\n      let sheets: any = document.styleSheets;\n      for (i = 0; i < sheets.length; i++) {\n        if ((sheets[i].ownerNode || sheets[i].owningElement) == this._style) {\n          this.stylesheet = sheets[i];\n          break;\n        }\n      }\n\n      if (!this.stylesheet) {\n        throw new Error('SlickGrid Cannot find stylesheet.');\n      }\n\n      // find and cache column CSS rules\n      this.columnCssRulesL = [];\n      this.columnCssRulesR = [];\n      let cssRules = (this.stylesheet.cssRules || this.stylesheet.rules);\n      let matches, columnIdx;\n      for (i = 0; i < cssRules.length; i++) {\n        let selector = cssRules[i].selectorText;\n        if (matches = /\\.l\\d+/.exec(selector)) {\n          columnIdx = parseInt(matches[0].substr(2, matches[0].length - 2), 10);\n          this.columnCssRulesL[columnIdx] = cssRules[i];\n        } else if (matches = /\\.r\\d+/.exec(selector)) {\n          columnIdx = parseInt(matches[0].substr(2, matches[0].length - 2), 10);\n          this.columnCssRulesR[columnIdx] = cssRules[i];\n        }\n      }\n    }\n\n    return {\n      left: this.columnCssRulesL[idx],\n      right: this.columnCssRulesR[idx]\n    };\n  }\n\n  protected removeCssRules() {\n    this._style.remove();\n    this.stylesheet = null;\n  }\n\n  /**\n   * Destroy (dispose) of SlickGrid\n   * @param {boolean} shouldDestroyAllElements - do we want to destroy (nullify) all DOM elements as well? This help in avoiding mem leaks\n   */\n  destroy(shouldDestroyAllElements?: boolean) {\n    this._bindingEventService.unbindAll();\n    this.slickDraggableInstance = this.destroyAllInstances(this.slickDraggableInstance) as null;\n    this.slickMouseWheelInstances = this.destroyAllInstances(this.slickMouseWheelInstances) as InteractionBase[];\n    this.slickResizableInstances = this.destroyAllInstances(this.slickResizableInstances) as InteractionBase[];\n    this.getEditorLock().cancelCurrentEdit();\n\n    this.trigger(this.onBeforeDestroy, {});\n\n    let i = this.plugins.length;\n    while (i--) {\n      this.unregisterPlugin(this.plugins[i]);\n    }\n\n    if (this._options.enableColumnReorder && typeof this.sortableSideLeftInstance?.destroy === 'function') {\n      this.sortableSideLeftInstance.destroy();\n      this.sortableSideRightInstance.destroy();\n    }\n\n    this.unbindAncestorScrollEvents();\n    this._bindingEventService.unbindByEventName(this._container, 'resize');\n    this.removeCssRules();\n\n    this._canvas.forEach((element) => {\n      this._bindingEventService.unbindByEventName(element, 'keydown');\n      this._bindingEventService.unbindByEventName(element, 'click');\n      this._bindingEventService.unbindByEventName(element, 'dblclick');\n      this._bindingEventService.unbindByEventName(element, 'contextmenu');\n      this._bindingEventService.unbindByEventName(element, 'mouseover');\n      this._bindingEventService.unbindByEventName(element, 'mouseout');\n    });\n    this._viewport.forEach((view) => {\n      this._bindingEventService.unbindByEventName(view, 'scroll');\n    });\n\n    this._headerScroller.forEach((el) => {\n      this._bindingEventService.unbindByEventName(el, 'contextmenu');\n      this._bindingEventService.unbindByEventName(el, 'click');\n    });\n\n    this._headerRowScroller.forEach((scroller) => {\n      this._bindingEventService.unbindByEventName(scroller, 'scroll');\n    });\n\n    if (this._footerRow) {\n      this._footerRow.forEach((footer) => {\n        this._bindingEventService.unbindByEventName(footer, 'contextmenu')\n        this._bindingEventService.unbindByEventName(footer, 'click');\n      });\n    }\n\n    if (this._footerRowScroller) {\n      this._footerRowScroller.forEach((scroller) => {\n        this._bindingEventService.unbindByEventName(scroller, 'scroll');\n      });\n    }\n\n    if (this._preHeaderPanelScroller) {\n      this._bindingEventService.unbindByEventName(this._preHeaderPanelScroller, 'scroll');\n    }\n\n    this._bindingEventService.unbindByEventName(this._focusSink, 'keydown');\n    this._bindingEventService.unbindByEventName(this._focusSink2, 'keydown');\n\n    const resizeHandles = this._container.querySelectorAll('.slick-resizable-handle');\n    [].forEach.call(resizeHandles, (handle) => {\n      this._bindingEventService.unbindByEventName(handle, 'dblclick');\n    });\n\n    const headerColumns = this._container.querySelectorAll('.slick-header-column');\n    [].forEach.call(headerColumns, (column) => {\n      this._bindingEventService.unbindByEventName(column, 'mouseenter');\n      this._bindingEventService.unbindByEventName(column, 'mouseleave');\n\n      this._bindingEventService.unbindByEventName(column, 'mouseenter');\n      this._bindingEventService.unbindByEventName(column, 'mouseleave');\n    });\n\n    Utils.emptyElement(this._container);\n    this._container.classList.remove(this.uid);\n\n    if (shouldDestroyAllElements) {\n      this.destroyAllElements();\n    }\n  }\n\n  /**\n   * call destroy method, when exists, on all the instance(s) it found\n   * @params instances - can be a single instance or a an array of instances\n   */\n  protected destroyAllInstances(inputInstances: null | InteractionBase | Array<InteractionBase>) {\n    if (inputInstances) {\n      const instances = Array.isArray(inputInstances) ? inputInstances : [inputInstances];\n      let instance;\n      while ((instance = instances.pop()) != null) {\n        if (instance && typeof instance.destroy === 'function') {\n          instance.destroy();\n        }\n      }\n    }\n    // reset instance(s)\n    inputInstances = (Array.isArray(inputInstances) ? [] : null);\n    return inputInstances;\n  }\n\n  protected destroyAllElements() {\n    this._activeCanvasNode = null as any;\n    this._activeViewportNode = null as any;\n    this._boundAncestors = null as any;\n    this._canvas = null as any;\n    this._canvasTopL = null as any;\n    this._canvasTopR = null as any;\n    this._canvasBottomL = null as any;\n    this._canvasBottomR = null as any;\n    this._container = null as any;\n    this._focusSink = null as any;\n    this._focusSink2 = null as any;\n    this._groupHeaders = null as any;\n    this._groupHeadersL = null as any;\n    this._groupHeadersR = null as any;\n    this._headerL = null as any;\n    this._headerR = null as any;\n    this._headers = null as any;\n    this._headerRows = null as any;\n    this._headerRowL = null as any;\n    this._headerRowR = null as any;\n    this._headerRowSpacerL = null as any;\n    this._headerRowSpacerR = null as any;\n    this._headerRowScrollContainer = null as any;\n    this._headerRowScroller = null as any;\n    this._headerRowScrollerL = null as any;\n    this._headerRowScrollerR = null as any;\n    this._headerScrollContainer = null as any;\n    this._headerScroller = null as any;\n    this._headerScrollerL = null as any;\n    this._headerScrollerR = null as any;\n    this._hiddenParents = null as any;\n    this._footerRow = null as any;\n    this._footerRowL = null as any;\n    this._footerRowR = null as any;\n    this._footerRowSpacerL = null as any;\n    this._footerRowSpacerR = null as any;\n    this._footerRowScroller = null as any;\n    this._footerRowScrollerL = null as any;\n    this._footerRowScrollerR = null as any;\n    this._footerRowScrollContainer = null as any;\n    this._preHeaderPanel = null as any;\n    this._preHeaderPanelR = null as any;\n    this._preHeaderPanelScroller = null as any;\n    this._preHeaderPanelScrollerR = null as any;\n    this._preHeaderPanelSpacer = null as any;\n    this._preHeaderPanelSpacerR = null as any;\n    this._topPanels = null as any;\n    this._topPanelScrollers = null as any;\n    this._style = null as any;\n    this._topPanelScrollerL = null as any;\n    this._topPanelScrollerR = null as any;\n    this._topPanelL = null as any;\n    this._topPanelR = null as any;\n    this._paneHeaderL = null as any;\n    this._paneHeaderR = null as any;\n    this._paneTopL = null as any;\n    this._paneTopR = null as any;\n    this._paneBottomL = null as any;\n    this._paneBottomR = null as any;\n    this._viewport = null as any;\n    this._viewportTopL = null as any;\n    this._viewportTopR = null as any;\n    this._viewportBottomL = null as any;\n    this._viewportBottomR = null as any;\n    this._viewportScrollContainerX = null as any;\n    this._viewportScrollContainerY = null as any;\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // Column Autosizing\n  //////////////////////////////////////////////////////////////////////////////////////////////\n\n  /** Proportionally resize a specific column by its name, index or Id */\n  autosizeColumn(columnOrIndexOrId: number | string, isInit?: boolean) {\n    let colDef: Column | null = null;\n    let colIndex = -1;\n    if (typeof columnOrIndexOrId === 'number') {\n      colDef = this.columns[columnOrIndexOrId];\n      colIndex = columnOrIndexOrId;\n    }\n    else if (typeof columnOrIndexOrId === 'string') {\n      for (let i = 0; i < this.columns.length; i++) {\n        if (this.columns[i].id === columnOrIndexOrId) { colDef = this.columns[i]; colIndex = i; }\n      }\n    }\n    if (!colDef) {\n      return;\n    }\n    const gridCanvas = this.getCanvasNode(0, 0) as HTMLElement;\n    this.getColAutosizeWidth(colDef, colIndex, gridCanvas, isInit || false, colIndex);\n  }\n\n  protected treatAsLocked(autoSize: AutoSize = {}) {\n    // treat as locked (don't resize) if small and header is the widest part\n    return !autoSize.ignoreHeaderText\n      && !autoSize.sizeToRemaining\n      && (autoSize.contentSizePx === autoSize.headerWidthPx)\n      && ((autoSize.widthPx ?? 0) < 100)\n      ;\n  }\n\n  /** Proportionately resizes all columns to fill available horizontal space. This does not take the cell contents into consideration. */\n  autosizeColumns(autosizeMode?: string, isInit?: boolean) {\n    this.cacheCssForHiddenInit();\n    this.internalAutosizeColumns(autosizeMode, isInit);\n    this.restoreCssFromHiddenInit();\n  }\n\n  protected internalAutosizeColumns(autosizeMode?: string, isInit?: boolean) {\n    //LogColWidths();\n    autosizeMode = autosizeMode || this._options.autosizeColsMode;\n    if (autosizeMode === GridAutosizeColsMode.LegacyForceFit || autosizeMode === GridAutosizeColsMode.LegacyOff) {\n      this.legacyAutosizeColumns();\n      return;\n    }\n\n    if (autosizeMode === GridAutosizeColsMode.None) {\n      return;\n    }\n\n    // test for brower canvas support, canvas_context!=null if supported\n    this.canvas = document.createElement('canvas');\n    if (this.canvas?.getContext) { this.canvas_context = this.canvas.getContext('2d'); }\n\n    // pass in the grid canvas\n    let gridCanvas = this.getCanvasNode(0, 0) as HTMLElement;\n    let viewportWidth = this.viewportHasVScroll ? this.viewportW - (this.scrollbarDimensions?.width ?? 0) : this.viewportW;\n\n    // iterate columns to get autosizes\n    let i: number, c: Column, colWidth: number, reRender = false, totalWidth = 0, totalWidthLessSTR = 0, strColsMinWidth = 0, totalMinWidth = 0, totalLockedColWidth = 0;\n    for (i = 0; i < this.columns.length; i++) {\n      c = this.columns[i];\n      this.getColAutosizeWidth(c, i, gridCanvas, isInit || false, i);\n      totalLockedColWidth += (c.autoSize?.autosizeMode === ColAutosizeMode.Locked ? (c.width || 0) : (this.treatAsLocked(c.autoSize) ? c.autoSize?.widthPx || 0 : 0));\n      totalMinWidth += (c.autoSize?.autosizeMode === ColAutosizeMode.Locked ? (c.width || 0) : (this.treatAsLocked(c.autoSize) ? c.autoSize?.widthPx || 0 : c.minWidth || 0));\n      totalWidth += (c.autoSize?.widthPx || 0);\n      totalWidthLessSTR += (c.autoSize?.sizeToRemaining ? 0 : c.autoSize?.widthPx || 0);\n      strColsMinWidth += (c.autoSize?.sizeToRemaining ? c.minWidth || 0 : 0);\n    }\n    let strColTotalGuideWidth = totalWidth - totalWidthLessSTR;\n\n    if (autosizeMode === GridAutosizeColsMode.FitViewportToCols) {\n      // - if viewport with is outside MinViewportWidthPx and MaxViewportWidthPx, then the viewport is set to\n      //   MinViewportWidthPx or MaxViewportWidthPx and the FitColsToViewport algorithm is used\n      // - viewport is resized to fit columns\n      let setWidth = totalWidth + (this.scrollbarDimensions?.width ?? 0);\n      autosizeMode = GridAutosizeColsMode.IgnoreViewport;\n\n      if (this._options.viewportMaxWidthPx && setWidth > this._options.viewportMaxWidthPx) {\n        setWidth = this._options.viewportMaxWidthPx;\n        autosizeMode = GridAutosizeColsMode.FitColsToViewport;\n      } else if (this._options.viewportMinWidthPx && setWidth < this._options.viewportMinWidthPx) {\n        setWidth = this._options.viewportMinWidthPx;\n        autosizeMode = GridAutosizeColsMode.FitColsToViewport;\n      } else {\n        // falling back to IgnoreViewport will size the columns as-is, with render checking\n        //for (i = 0; i < columns.length; i++) { columns[i].width = columns[i].autoSize.widthPx; }\n      }\n      Utils.width(this._container, setWidth);\n    }\n\n    if (autosizeMode === GridAutosizeColsMode.FitColsToViewport) {\n      if (strColTotalGuideWidth > 0 && totalWidthLessSTR < viewportWidth - strColsMinWidth) {\n        // if addl space remains in the viewport and there are SizeToRemaining cols, just the SizeToRemaining cols expand proportionally to fill viewport\n        for (i = 0; i < this.columns.length; i++) {\n          c = this.columns[i];\n          if (!c || c.hidden) continue;\n\n          let totalSTRViewportWidth = viewportWidth - totalWidthLessSTR;\n          if (c.autoSize?.sizeToRemaining) {\n            colWidth = totalSTRViewportWidth * (c.autoSize?.widthPx || 0) / strColTotalGuideWidth;\n          } else {\n            colWidth = (c.autoSize?.widthPx || 0);\n          }\n          if (c.rerenderOnResize && (c.width || 0) !== colWidth) {\n            reRender = true;\n          }\n          c.width = colWidth;\n        }\n      } else if ((this._options.viewportSwitchToScrollModeWidthPercent && totalWidthLessSTR + strColsMinWidth > viewportWidth * this._options.viewportSwitchToScrollModeWidthPercent / 100)\n        || (totalMinWidth > viewportWidth)) {\n        // if the total columns width is wider than the viewport by switchToScrollModeWidthPercent, switch to IgnoreViewport mode\n        autosizeMode = GridAutosizeColsMode.IgnoreViewport;\n      } else {\n        // otherwise (ie. no SizeToRemaining cols or viewport smaller than columns) all cols other than 'Locked' scale in proportion to fill viewport\n        // and SizeToRemaining get minWidth\n        let unallocatedColWidth = totalWidthLessSTR - totalLockedColWidth;\n        let unallocatedViewportWidth = viewportWidth - totalLockedColWidth - strColsMinWidth;\n        for (i = 0; i < this.columns.length; i++) {\n          c = this.columns[i];\n          if (!c || c.hidden) continue;\n\n          colWidth = c.width || 0;\n          if (c.autoSize?.autosizeMode !== ColAutosizeMode.Locked && !this.treatAsLocked(c.autoSize)) {\n            if (c.autoSize?.sizeToRemaining) {\n              colWidth = c.minWidth || 0;\n            } else {\n              // size width proportionally to free space (we know we have enough room due to the earlier calculations)\n              colWidth = unallocatedViewportWidth / unallocatedColWidth * (c.autoSize?.widthPx || 0) - 1;\n              if (colWidth < (c.minWidth || 0)) {\n                colWidth = c.minWidth || 0;\n              }\n\n              // remove the just allocated widths from the allocation pool\n              unallocatedColWidth -= (c.autoSize?.widthPx || 0);\n              unallocatedViewportWidth -= colWidth;\n            }\n          }\n          if (this.treatAsLocked(c.autoSize)) {\n            colWidth = (c.autoSize?.widthPx || 0);\n            if (colWidth < (c.minWidth || 0)) {\n              colWidth = c.minWidth || 0;\n            }\n          }\n          if (c.rerenderOnResize && c.width !== colWidth) {\n            reRender = true;\n          }\n          c.width = colWidth;\n        }\n      }\n    }\n\n    if (autosizeMode === GridAutosizeColsMode.IgnoreViewport) {\n      // just size columns as-is\n      for (i = 0; i < this.columns.length; i++) {\n        if (!this.columns[i] || this.columns[i].hidden) continue;\n\n        colWidth = this.columns[i].autoSize?.widthPx || 0;\n        if (this.columns[i].rerenderOnResize && this.columns[i].width !== colWidth) {\n          reRender = true;\n        }\n        this.columns[i].width = colWidth;\n      }\n    }\n\n    this.reRenderColumns(reRender);\n  }\n\n  protected LogColWidths() {\n    let s = 'Col Widths:';\n    for (let i = 0; i < this.columns.length; i++) { s += ' ' + (this.columns[i].hidden ? 'H' : this.columns[i].width); }\n    console.log(s);\n  }\n\n  protected getColAutosizeWidth(columnDef: Column, colIndex: number, gridCanvas: HTMLElement, isInit: boolean, colArrayIndex: number) {\n    let autoSize = columnDef.autoSize as AutoSize;\n\n    // set to width as default\n    autoSize.widthPx = columnDef.width;\n    if (autoSize.autosizeMode === ColAutosizeMode.Locked\n      || autoSize.autosizeMode === ColAutosizeMode.Guide) {\n      return;\n    }\n\n    let dl = this.getDataLength(); //getDataItem();\n    const isoDateRegExp = new RegExp(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z/);\n\n    // ContentIntelligent takes settings from column data type\n    if (autoSize.autosizeMode === ColAutosizeMode.ContentIntelligent) {\n      // default to column colDataTypeOf (can be used if initially there are no data rows)\n      let colDataTypeOf = autoSize.colDataTypeOf;\n      let colDataItem;\n      if (dl > 0) {\n        let tempRow = this.getDataItem(0);\n        if (tempRow) {\n          colDataItem = tempRow[columnDef.field];\n\n          // check for dates in hiding\n          if (isoDateRegExp.test(colDataItem)) { colDataItem = Date.parse(colDataItem); }\n\n          colDataTypeOf = typeof colDataItem;\n          if (colDataTypeOf === 'object') {\n            if (colDataItem instanceof Date) { colDataTypeOf = 'date'; }\n            if (typeof moment !== 'undefined' && colDataItem instanceof moment) { colDataTypeOf = 'moment'; }\n          }\n        }\n      }\n      if (colDataTypeOf === 'boolean') {\n        autoSize.colValueArray = [true, false];\n      }\n      if (colDataTypeOf === 'number') {\n        autoSize.valueFilterMode = ValueFilterMode.GetGreatestAndSub;\n        autoSize.rowSelectionMode = RowSelectionMode.AllRows;\n      }\n      if (colDataTypeOf === 'string') {\n        autoSize.valueFilterMode = ValueFilterMode.GetLongestText;\n        autoSize.rowSelectionMode = RowSelectionMode.AllRows;\n        autoSize.allowAddlPercent = 5;\n      }\n      if (colDataTypeOf === 'date') {\n        autoSize.colValueArray = [new Date(2009, 8, 30, 12, 20, 20)]; // Sep 30th 2009, 12:20:20 AM\n      }\n      if (colDataTypeOf === 'moment' && typeof moment !== 'undefined') {\n        autoSize.colValueArray = [moment([2009, 8, 30, 12, 20, 20])]; // Sep 30th 2009, 12:20:20 AM\n      }\n    }\n\n    // at this point, the autosizeMode is effectively 'Content', so proceed to get size\n    let colWidth = autoSize.contentSizePx = this.getColContentSize(columnDef, colIndex, gridCanvas, isInit, colArrayIndex);\n\n    if (colWidth === 0) {\n      colWidth = autoSize.widthPx || 0;\n    }\n\n    let addlPercentMultiplier = (autoSize.allowAddlPercent ? (1 + autoSize.allowAddlPercent / 100) : 1);\n    colWidth = colWidth * addlPercentMultiplier + this._options.autosizeColPaddingPx;\n    if (columnDef.minWidth && colWidth < columnDef.minWidth) { colWidth = columnDef.minWidth; }\n    if (columnDef.maxWidth && colWidth > columnDef.maxWidth) { colWidth = columnDef.maxWidth; }\n\n    if (autoSize.autosizeMode === ColAutosizeMode.ContentExpandOnly || ((columnDef?.editor as any)?.ControlFillsColumn)) {\n      // only use content width if it's wider than the default column width (this is used for dropdowns and other fixed width controls)\n      if (colWidth < (columnDef.width || 0)) {\n        colWidth = columnDef.width || 0;\n      }\n    }\n    autoSize.widthPx = colWidth;\n  }\n\n  protected getColContentSize(columnDef: Column, colIndex: number, gridCanvas: HTMLElement, isInit: boolean, colArrayIndex: number) {\n    let autoSize = columnDef.autoSize as AutoSize;\n    let widthAdjustRatio = 1;\n\n    // at this point, the autosizeMode is effectively 'Content', so proceed to get size\n\n    // get header width, if we are taking notice of it\n    let i: number;\n    let tempVal: any, maxLen = 0;\n    let maxColWidth = 0;\n    autoSize.headerWidthPx = 0;\n    if (!autoSize.ignoreHeaderText) {\n      autoSize.headerWidthPx = this.getColHeaderWidth(columnDef);\n    }\n    if (autoSize.headerWidthPx === 0) {\n      autoSize.headerWidthPx = (columnDef.width ? columnDef.width\n        : (columnDef.maxWidth ? columnDef.maxWidth\n          : (columnDef.minWidth ? columnDef.minWidth : 20)\n        )\n      );\n    }\n\n    if (autoSize.colValueArray) {\n      // if an array of values are specified, just pass them in instead of data\n      maxColWidth = this.getColWidth(columnDef, gridCanvas, autoSize.colValueArray);\n      return Math.max(autoSize.headerWidthPx, maxColWidth);\n    }\n\n    // select rows to evaluate using rowSelectionMode and rowSelectionCount\n    let rowInfo: any = {};\n    rowInfo.colIndex = colIndex;\n    rowInfo.rowCount = this.getDataLength();\n    rowInfo.startIndex = 0;\n    rowInfo.endIndex = rowInfo.rowCount - 1;\n    rowInfo.valueArr = null;\n    rowInfo.getRowVal = (i) => this.getDataItem(i)[columnDef.field];\n\n    let rowSelectionMode = (isInit ? autoSize.rowSelectionModeOnInit : undefined) || autoSize.rowSelectionMode;\n\n    if (rowSelectionMode === RowSelectionMode.FirstRow) { rowInfo.endIndex = 0; }\n    if (rowSelectionMode === RowSelectionMode.LastRow) { rowInfo.endIndex = rowInfo.startIndex = rowInfo.rowCount - 1; }\n    if (rowSelectionMode === RowSelectionMode.FirstNRows) { rowInfo.endIndex = Math.min(autoSize.rowSelectionCount || 0, rowInfo.rowCount) - 1; }\n\n    // now use valueFilterMode to further filter selected rows\n    if (autoSize.valueFilterMode === ValueFilterMode.DeDuplicate) {\n      let rowsDict = {};\n      for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\n        rowsDict[rowInfo.getRowVal(i)] = true;\n      }\n      if (Object.keys) {\n        rowInfo.valueArr = Object.keys(rowsDict);\n      } else {\n        rowInfo.valueArr = [];\n        for (let v in rowsDict) rowInfo.valueArr.push(v);\n      }\n      rowInfo.startIndex = 0;\n      rowInfo.endIndex = rowInfo.length - 1;\n    }\n\n    if (autoSize.valueFilterMode === ValueFilterMode.GetGreatestAndSub) {\n      // get greatest abs value in data\n      let maxVal, maxAbsVal = 0;\n      for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\n        tempVal = rowInfo.getRowVal(i);\n        if (Math.abs(tempVal) > maxAbsVal) { maxVal = tempVal; maxAbsVal = Math.abs(tempVal); }\n      }\n      // now substitute a '9' for all characters (to get widest width) and convert back to a number\n      maxVal = '' + maxVal;\n      maxVal = Array(maxVal.length + 1).join('9');\n      maxVal = +maxVal;\n\n      rowInfo.valueArr = [maxVal];\n      rowInfo.startIndex = rowInfo.endIndex = 0;\n    }\n\n    if (autoSize.valueFilterMode === ValueFilterMode.GetLongestTextAndSub) {\n      // get greatest abs value in data\n      for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\n        tempVal = rowInfo.getRowVal(i);\n        if ((tempVal || '').length > maxLen) { maxLen = tempVal.length; }\n      }\n      // now substitute a 'm' for all characters\n      tempVal = Array(maxLen + 1).join('m');\n      widthAdjustRatio = this._options.autosizeTextAvgToMWidthRatio;\n\n      rowInfo.maxLen = maxLen;\n      rowInfo.valueArr = [tempVal];\n      rowInfo.startIndex = rowInfo.endIndex = 0;\n    }\n\n    if (autoSize.valueFilterMode === ValueFilterMode.GetLongestText) {\n      // get greatest abs value in data\n      maxLen = 0; let maxIndex = 0;\n      for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\n        tempVal = rowInfo.getRowVal(i);\n        if ((tempVal || '').length > maxLen) { maxLen = tempVal.length; maxIndex = i; }\n      }\n      // now substitute a 'c' for all characters\n      tempVal = rowInfo.getRowVal(maxIndex);\n      rowInfo.maxLen = maxLen;\n      rowInfo.valueArr = [tempVal];\n      rowInfo.startIndex = rowInfo.endIndex = 0;\n    }\n\n    // !!! HACK !!!!\n    if (rowInfo.maxLen && rowInfo.maxLen > 30 && colArrayIndex > 1) { autoSize.sizeToRemaining = true; }\n    maxColWidth = this.getColWidth(columnDef, gridCanvas, rowInfo) * widthAdjustRatio;\n    return Math.max(autoSize.headerWidthPx, maxColWidth);\n  }\n\n  protected getColWidth(columnDef: Column, gridCanvas: HTMLElement, rowInfo: any) {\n    const rowEl = Utils.createDomElement('div', { className: 'slick-row ui-widget-content' }, gridCanvas);\n    const cellEl = Utils.createDomElement('div', { className: 'slick-cell' }, rowEl);\n\n    cellEl.style['position'] = 'absolute';\n    cellEl.style['visibility'] = 'hidden';\n    cellEl.style['text-overflow'] = 'initial';\n    cellEl.style['white-space'] = 'nowrap';\n\n    let i: number, len: number, max = 0, maxText = '', formatterResult: string | FormatterResultObject, val: any;\n\n    // get mode - if text only display, use canvas otherwise html element\n    let useCanvas = (columnDef.autoSize!.widthEvalMode === WidthEvalMode.TextOnly);\n\n    if (columnDef.autoSize?.widthEvalMode === WidthEvalMode.Auto) {\n      let noFormatter = !columnDef.formatterOverride && !columnDef.formatter;\n      let formatterIsText = ((columnDef?.formatterOverride as { ReturnsTextOnly: boolean })?.ReturnsTextOnly)\n        || (!columnDef.formatterOverride && (columnDef.formatter as any)?.ReturnsTextOnly);\n      useCanvas = noFormatter || formatterIsText;\n    }\n\n    // use canvas - very fast, but text-only\n    if (this.canvas_context && useCanvas) {\n      const style = getComputedStyle(cellEl);\n      this.canvas_context.font = style['font-size'] + ' ' + style['font-family'];\n      for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\n        // row is either an array or values or a single value\n        val = (rowInfo.valueArr ? rowInfo.valueArr[i] : rowInfo.getRowVal(i));\n        if (columnDef.formatterOverride) {\n          // use formatterOverride as first preference\n          formatterResult = (columnDef.formatterOverride as FormatterOverrideCallback)(i, rowInfo.colIndex, val, columnDef, this.getDataItem(i), this);\n        } else if (columnDef.formatter) {\n          // otherwise, use formatter\n          formatterResult = columnDef.formatter(i, rowInfo.colIndex, val, columnDef, this.getDataItem(i), this);\n        } else {\n          // otherwise, use plain text\n          formatterResult = '' + val;\n        }\n        len = formatterResult ? this.canvas_context.measureText(formatterResult as string).width : 0;\n        if (len > max) {\n          max = len;\n          maxText = formatterResult as string;\n        }\n      }\n\n      cellEl.innerHTML = maxText;\n      len = cellEl.offsetWidth;\n\n      rowEl.remove();\n      return len;\n    }\n\n    for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\n      val = (rowInfo.valueArr ? rowInfo.valueArr[i] : rowInfo.getRowVal(i));\n      if (columnDef.formatterOverride) {\n        // use formatterOverride as first preference\n        formatterResult = (columnDef.formatterOverride as FormatterOverrideCallback)(i, rowInfo.colIndex, val, columnDef, this.getDataItem(i), this);\n      } else if (columnDef.formatter) {\n        // otherwise, use formatter\n        formatterResult = columnDef.formatter(i, rowInfo.colIndex, val, columnDef, this.getDataItem(i), this);\n      } else {\n        // otherwise, use plain text\n        formatterResult = '' + val;\n      }\n      this.applyFormatResultToCellNode(formatterResult, cellEl);\n      len = cellEl.offsetWidth;\n      if (len > max) { max = len; }\n    }\n\n    rowEl.remove();\n    return max;\n  }\n\n  protected getColHeaderWidth(columnDef: Column) {\n    let width = 0;\n    //if (columnDef && (!columnDef.resizable || columnDef._autoCalcWidth === true)) return;\n    let headerColElId = this.getUID() + columnDef.id;\n    let headerColEl = document.getElementById(headerColElId) as HTMLElement;\n    let dummyHeaderColElId = `${headerColElId}_`;\n    let clone = headerColEl.cloneNode(true) as HTMLElement;\n    if (headerColEl) {\n      // headers have been created, use clone technique\n      clone.id = dummyHeaderColElId;\n      clone.style.cssText = 'position: absolute; visibility: hidden;right: auto;text-overflow: initial;white-space: nowrap;';\n      headerColEl.parentNode!.insertBefore(clone, headerColEl);\n      width = clone.offsetWidth;\n      clone.parentNode!.removeChild(clone);\n    } else {\n      // headers have not yet been created, create a new node\n      let header = this.getHeader(columnDef) as HTMLElement;\n      headerColEl = Utils.createDomElement('div', { id: dummyHeaderColElId, className: 'ui-state-default slick-state-default slick-header-column' }, header);\n      Utils.createDomElement('span', { className: 'slick-column-name', innerHTML: this.sanitizeHtmlString(String(columnDef.name)) }, headerColEl);\n      clone.style.cssText = 'position: absolute; visibility: hidden;right: auto;text-overflow: initial;white-space: nowrap;';\n      if (columnDef.headerCssClass) {\n        headerColEl.classList.add(...(columnDef.headerCssClass || '').split(' '));\n      }\n      width = headerColEl.offsetWidth;\n      header.removeChild(headerColEl);\n    }\n    return width;\n  }\n\n  protected legacyAutosizeColumns() {\n    let i, c: Column | undefined,\n      widths: number[] = [],\n      shrinkLeeway = 0,\n      total = 0,\n      prevTotal = 0,\n      availWidth = this.viewportHasVScroll ? this.viewportW - (this.scrollbarDimensions?.width ?? 0) : this.viewportW;\n\n    for (i = 0; i < this.columns.length; i++) {\n      c = this.columns[i];\n      if (!c || c.hidden) continue;\n      widths.push(c.width || 0);\n      total += c.width || 0;\n      if (c.resizable) {\n        shrinkLeeway += (c.width || 0) - Math.max((c.minWidth || 0), this.absoluteColumnMinWidth);\n      }\n    }\n\n    // shrink\n    prevTotal = total;\n    while (total > availWidth && shrinkLeeway) {\n      let shrinkProportion = (total - availWidth) / shrinkLeeway;\n      for (i = 0; i < this.columns.length && total > availWidth; i++) {\n        c = this.columns[i];\n        if (!c || c.hidden) continue;\n        let width = widths[i];\n        if (!c.resizable || width <= c.minWidth! || width <= this.absoluteColumnMinWidth) {\n          continue;\n        }\n        let absMinWidth = Math.max(c.minWidth!, this.absoluteColumnMinWidth);\n        let shrinkSize = Math.floor(shrinkProportion * (width - absMinWidth)) || 1;\n        shrinkSize = Math.min(shrinkSize, width - absMinWidth);\n        total -= shrinkSize;\n        shrinkLeeway -= shrinkSize;\n        widths[i] -= shrinkSize;\n      }\n      if (prevTotal <= total) {  // avoid infinite loop\n        break;\n      }\n      prevTotal = total;\n    }\n\n    // grow\n    prevTotal = total;\n    while (total < availWidth) {\n      let growProportion = availWidth / total;\n      for (i = 0; i < this.columns.length && total < availWidth; i++) {\n        c = this.columns[i];\n        if (!c || c.hidden) continue;\n        let currentWidth = widths[i];\n        let growSize;\n\n        if (!c.resizable || c.maxWidth! <= currentWidth) {\n          growSize = 0;\n        } else {\n          growSize = Math.min(Math.floor(growProportion * currentWidth) - currentWidth, (c.maxWidth! - currentWidth) || 1000000) || 1;\n        }\n        total += growSize;\n        widths[i] += (total <= availWidth ? growSize : 0);\n      }\n      if (prevTotal >= total) {  // avoid infinite loop\n        break;\n      }\n      prevTotal = total;\n    }\n\n    let reRender = false;\n    for (i = 0; i < this.columns.length; i++) {\n      if (!c || c.hidden) continue;\n\n      if (this.columns[i].rerenderOnResize && this.columns[i].width !== widths[i]) {\n        reRender = true;\n      }\n      this.columns[i].width = widths[i];\n    }\n\n    this.reRenderColumns(reRender);\n  }\n\n  /**\n   * Apply Columns Widths in the UI and optionally invalidate & re-render the columns when specified\n   * @param {Boolean} shouldReRender - should we invalidate and re-render the grid?\n   */\n  reRenderColumns(reRender?: boolean) {\n    this.applyColumnHeaderWidths();\n    this.updateCanvasWidth(true);\n\n    this.trigger(this.onAutosizeColumns, { columns: this.columns });\n\n    if (reRender) {\n      this.invalidateAllRows();\n      this.render();\n    }\n  }\n\n  getVisibleColumns() {\n    return this.columns.filter(c => !c.hidden);\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // General\n  //////////////////////////////////////////////////////////////////////////////////////////////\n\n  protected trigger<ArgType = any>(evt: SlickEvent_, args?: ArgType, e?: Event | SlickEventData_) {\n    let event: SlickEventData_ = (e || new SlickEventData(e, args)) as SlickEventData_;\n    const eventArgs = (args || {}) as ArgType & { grid: SlickGrid; };\n    eventArgs.grid = this;\n    return evt.notify(eventArgs, event, this);\n  }\n\n  /** Get Editor lock */\n  getEditorLock() {\n    return this._options.editorLock;\n  }\n\n  /** Get Editor Controller */\n  getEditController() {\n    return this.editController;\n  }\n\n  /**\n   * Returns the index of a column with a given id. Since columns can be reordered by the user, this can be used to get the column definition independent of the order:\n   * @param id A column id.\n   */\n  getColumnIndex(id: number | string) {\n    return this.columnsById[id];\n  }\n\n  protected applyColumnHeaderWidths() {\n    if (!this.initialized) {\n      return;\n    }\n\n    let columnIndex = 0;\n    let vc = this.getVisibleColumns();\n    this._headers.forEach((header) => {\n      for (let i = 0; i < header.children.length; i++, columnIndex++) {\n        const h = header.children[i] as HTMLElement;\n        const col = vc[columnIndex] || {};\n        const width = (col.width || 0) - this.headerColumnWidthDiff;\n        if (Utils.width(h) !== width) {\n          Utils.width(h, width);\n        }\n      }\n    });\n\n    this.updateColumnCaches();\n  }\n\n  protected applyColumnWidths() {\n    let x = 0, w = 0, rule: any;\n    for (let i = 0; i < this.columns.length; i++) {\n      if (!(this.columns[i] && this.columns[i].hidden)) {\n        w = this.columns[i].width || 0;\n\n        rule = this.getColumnCssRules(i);\n        rule.left.style.left = `${x}px`;\n        rule.right.style.right = (((this._options.frozenColumn !== -1 && i > this._options.frozenColumn) ? this.canvasWidthR : this.canvasWidthL) - x - w) + 'px';\n\n        // If this column is frozen, reset the css left value since the\n        // column starts in a new viewport.\n        if (this._options.frozenColumn !== i) {\n          x += this.columns[i].width!;\n        }\n      }\n      if (this._options.frozenColumn == i) {\n        x = 0;\n      }\n    }\n  }\n\n  /**\n   * Accepts a columnId string and an ascending boolean. Applies a sort glyph in either ascending or descending form to the header of the column. Note that this does not actually sort the column. It only adds the sort glyph to the header.\n   * @param columnId\n   * @param ascending\n   */\n  setSortColumn(columnId: number | string, ascending: boolean) {\n    this.setSortColumns([{ columnId, sortAsc: ascending }]);\n  }\n\n  /**\n   * Get column by index\n   * @param {Number} id - column index\n   * @returns\n   */\n  getColumnByIndex(id: number) {\n    let result: HTMLElement | undefined;\n    this._headers.every((header) => {\n      const length = header.children.length;\n      if (id < length) {\n        result = header.children[id] as HTMLElement;\n        return false;\n      }\n      id -= length;\n      return true;\n    });\n\n    return result;\n  }\n\n  /**\n   * Accepts an array of objects in the form [ { columnId: [string], sortAsc: [boolean] }, ... ]. When called, this will apply a sort glyph in either ascending or descending form to the header of each column specified in the array. Note that this does not actually sort the column. It only adds the sort glyph to the header\n   * @param {ColumnSort[]} cols - column sort\n   */\n  setSortColumns(cols: ColumnSort[]) {\n    this.sortColumns = cols;\n\n    const numberCols = this._options.numberedMultiColumnSort && this.sortColumns.length > 1;\n    this._headers.forEach((header) => {\n      let indicators = header.querySelectorAll('.slick-header-column-sorted');\n      indicators.forEach((indicator) => {\n        indicator.classList.remove('slick-header-column-sorted');\n      });\n\n      indicators = header.querySelectorAll('.slick-sort-indicator');\n      indicators.forEach((indicator) => {\n        indicator.classList.remove('slick-sort-indicator-asc');\n        indicator.classList.remove('slick-sort-indicator-desc');\n      });\n      indicators = header.querySelectorAll('.slick-sort-indicator-numbered');\n      indicators.forEach((el) => {\n        el.textContent = '';\n      });\n    });\n\n    let i = 1;\n    this.sortColumns.forEach((col) => {\n      if (col.sortAsc == null) {\n        col.sortAsc = true;\n      }\n\n      const columnIndex = this.getColumnIndex(col.columnId);\n      if (columnIndex != null) {\n        const column = this.getColumnByIndex(columnIndex);\n        if (column) {\n          column.classList.add('slick-header-column-sorted');\n          let indicator = column.querySelector('.slick-sort-indicator') as HTMLElement;\n          indicator.classList.add(col.sortAsc ? 'slick-sort-indicator-asc' : 'slick-sort-indicator-desc');\n\n          if (numberCols) {\n            indicator = column.querySelector('.slick-sort-indicator-numbered') as HTMLElement;\n            indicator.textContent = String(i);\n          }\n        }\n      }\n      i++;\n    });\n  }\n\n  /** Get sorted columns **/\n  getSortColumns(): ColumnSort[] {\n    return this.sortColumns;\n  }\n\n  protected handleSelectedRangesChanged(e: SlickEventData_, ranges: SlickRange_[]) {\n    const ne = e.getNativeEvent();\n    let previousSelectedRows = this.selectedRows.slice(0); // shallow copy previously selected rows for later comparison\n    this.selectedRows = [];\n    let hash: CssStyleHash = {};\n    for (let i = 0; i < ranges.length; i++) {\n      for (let j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {\n        if (!hash[j]) {  // prevent duplicates\n          this.selectedRows.push(j);\n          hash[j] = {};\n        }\n        for (let k = ranges[i].fromCell; k <= ranges[i].toCell; k++) {\n          if (this.canCellBeSelected(j, k)) {\n            hash[j][this.columns[k].id] = this._options.selectedCellCssClass;\n          }\n        }\n      }\n    }\n\n    this.setCellCssStyles(this._options.selectedCellCssClass || '', hash);\n\n    if (this.simpleArrayEquals(previousSelectedRows, this.selectedRows)) {\n      let caller = ne?.detail?.caller ?? 'click';\n      let newSelectedAdditions = this.getSelectedRows().filter((i) => previousSelectedRows.indexOf(i) < 0);\n      let newSelectedDeletions = previousSelectedRows.filter((i) => this.getSelectedRows().indexOf(i) < 0);\n\n      this.trigger(this.onSelectedRowsChanged, {\n        rows: this.getSelectedRows(),\n        previousSelectedRows,\n        caller,\n        changedSelectedRows: newSelectedAdditions,\n        changedUnselectedRows: newSelectedDeletions\n      }, e);\n    }\n  }\n\n  // compare 2 simple arrays (integers or strings only, do not use to compare object arrays)\n  simpleArrayEquals(arr1, arr2) {\n    return Array.isArray(arr1) && Array.isArray(arr2) && arr2.sort().toString() !== arr1.sort().toString();\n  }\n\n  /** Returns an array of column definitions. */\n  getColumns() {\n    return this.columns;\n  }\n\n  protected updateColumnCaches() {\n    // Pre-calculate cell boundaries.\n    this.columnPosLeft = [];\n    this.columnPosRight = [];\n    let x = 0;\n    for (let i = 0, ii = this.columns.length; i < ii; i++) {\n      if (!this.columns[i] || this.columns[i].hidden) continue;\n\n      this.columnPosLeft[i] = x;\n      this.columnPosRight[i] = x + (this.columns[i].width || 0);\n\n      if (this._options.frozenColumn === i) {\n        x = 0;\n      } else {\n        x += this.columns[i].width || 0;\n      }\n    }\n  }\n\n  protected updateColumnProps() {\n    this.columnsById = {};\n    for (let i = 0; i < this.columns.length; i++) {\n      if (this.columns[i].width) {\n        this.columns[i].widthRequest = this.columns[i].width;\n      }\n\n      let m: Column = this.columns[i] = Utils.extend({}, this._columnDefaults, this.columns[i]);\n      m.autoSize = Utils.extend({}, this._columnAutosizeDefaults, m.autoSize);\n\n      this.columnsById[m.id] = i;\n      if (m.minWidth && ((m.width || 0) < m.minWidth)) {\n        m.width = m.minWidth;\n      }\n      if (m.maxWidth && ((m.width || 0) > m.maxWidth)) {\n        m.width = m.maxWidth;\n      }\n    }\n  }\n\n  /**\n   * Sets grid columns. Column headers will be recreated and all rendered rows will be removed. To rerender the grid (if necessary), call render().\n   * @param columnDefinitions An array of column definitions.\n   */\n  setColumns(columnDefinitions: Column[]) {\n    this.trigger(this.onBeforeSetColumns, { previousColumns: this.columns, newColumns: columnDefinitions, grid: this });\n    this.columns = columnDefinitions;\n    this.updateColumnsInternal();\n  }\n\n  protected updateColumns() {\n    this.trigger(this.onBeforeUpdateColumns, { columns: this.columns, grid: this });\n    this.updateColumnsInternal();\n  }\n\n  protected updateColumnsInternal() {\n    this.updateColumnProps();\n    this.updateColumnCaches();\n\n    if (this.initialized) {\n      this.setPaneVisibility();\n      this.setOverflow();\n\n      this.invalidateAllRows();\n      this.createColumnHeaders();\n      this.createColumnFooter();\n      this.removeCssRules();\n      this.createCssRules();\n      this.resizeCanvas();\n      this.updateCanvasWidth();\n      this.applyColumnHeaderWidths();\n      this.applyColumnWidths();\n      this.handleScroll();\n      if (this.getSelectionModel() && this.getSelectionModel().refreshSelections) {\n        this.getSelectionModel().refreshSelections();\n      }\n    }\n  }\n\n  /** Returns an object containing all of the Grid options set on the grid. See a list of Grid Options here.  */\n  getOptions() {\n    return this._options;\n  }\n\n  /**\n   * Extends grid options with a given hash. If an there is an active edit, the grid will attempt to commit the changes and only continue if the attempt succeeds.\n   * @param {Object} options - an object with configuration options.\n   * @param {Boolean} [suppressRender] - do we want to supress the grid re-rendering? (defaults to false)\n   * @param {Boolean} [suppressColumnSet] - do we want to supress the columns set, via \"setColumns()\" method? (defaults to false)\n   * @param {Boolean} [suppressSetOverflow] - do we want to suppress the call to `setOverflow`\n   */\n  setOptions(args: Partial<GridOption>, suppressRender?: boolean, suppressColumnSet?: boolean, suppressSetOverflow?: boolean): void {\n    if (!this.getEditorLock().commitCurrentEdit()) {\n      return;\n    }\n\n    this.makeActiveCellNormal();\n\n    if (args.showColumnHeader !== undefined) {\n      this.setColumnHeaderVisibility(args.showColumnHeader);\n    }\n\n    if (this._options.enableAddRow !== args.enableAddRow) {\n      this.invalidateRow(this.getDataLength());\n    }\n\n    let originalOptions = Utils.extend(true, {}, this._options);\n    this._options = Utils.extend(this._options, args);\n    this.trigger(this.onSetOptions, { optionsBefore: originalOptions, optionsAfter: this._options });\n\n    this.validateAndEnforceOptions();\n    this.setFrozenOptions();\n\n    // when user changed frozen row option, we need to force a recalculation of each viewport heights\n    if (args.frozenBottom !== undefined) {\n      this.enforceFrozenRowHeightRecalc = true;\n    }\n\n    this._viewport.forEach((view) => {\n      view.style['overflow-y'] = this._options.autoHeight ? 'hidden' : 'auto';\n    });\n    if (!suppressRender) {\n      this.render();\n    }\n\n    this.setScroller();\n    if (!suppressSetOverflow) {\n      this.setOverflow();\n    }\n\n    if (!suppressColumnSet) {\n      this.setColumns(this.columns);\n    }\n\n    if (this._options.enableMouseWheelScrollHandler && this._viewport && (!this.slickMouseWheelInstances || this.slickMouseWheelInstances.length === 0)) {\n      this._viewport.forEach((view) => {\n        this.slickMouseWheelInstances.push(MouseWheel({\n          element: view,\n          onMouseWheel: this.handleMouseWheel.bind(this)\n        }));\n      });\n    } else if (this._options.enableMouseWheelScrollHandler === false) {\n      this.destroyAllInstances(this.slickMouseWheelInstances); // remove scroll handler when option is disable\n    }\n  }\n\n  validateAndEnforceOptions() {\n    if (this._options.autoHeight) {\n      this._options.leaveSpaceForNewRows = false;\n    }\n    if (this._options.forceFitColumns) {\n      this._options.autosizeColsMode = GridAutosizeColsMode.LegacyForceFit;\n      console.log('forceFitColumns option is deprecated - use autosizeColsMode');\n    }\n  }\n\n  /**\n   * Sets a new source for databinding and removes all rendered rows. Note that this doesn't render the new rows - you can follow it with a call to render() to do that.\n   * @param {CustomDataView|Array<*>} newData New databinding source using a regular JavaScript array.. or a custom object exposing getItem(index) and getLength() functions.\n   * @param {Number} [scrollToTop] If true, the grid will reset the vertical scroll position to the top of the grid.\n   */\n  setData(newData: CustomDataView | any[], scrollToTop?: number) {\n    this.data = newData;\n    this.invalidateAllRows();\n    this.updateRowCount();\n    if (scrollToTop) {\n      this.scrollTo(0);\n    }\n  }\n\n  /** Returns an array of every data object, unless you're using DataView in which case it returns a DataView object. */\n  getData<T extends CustomDataView | any[] = any>(): T {\n    return this.data as T;\n  }\n\n  /** Returns the size of the databinding source. */\n  getDataLength() {\n    if ((this.data as CustomDataView).getLength) {\n      return (this.data as CustomDataView).getLength();\n    } else {\n      return (this.data as any[])?.length ?? 0;\n    }\n  }\n\n  protected getDataLengthIncludingAddNew() {\n    return this.getDataLength() + (!this._options.enableAddRow ? 0\n      : (!this.pagingActive || this.pagingIsLastPage ? 1 : 0)\n    );\n  }\n\n  /**\n   * Returns the databinding item at a given position.\n   * @param index Item row index.\n   */\n  getDataItem(i: number) {\n    if ((this.data as CustomDataView).getItem) {\n      return (this.data as CustomDataView).getItem(i);\n    } else {\n      return (this.data as CustomDataView)[i];\n    }\n  }\n\n  /** Get Top Panel DOM element */\n  getTopPanel() {\n    return this._topPanels[0];\n  }\n\n  /** Get Top Panels (left/right) DOM element */\n  getTopPanels() {\n    return this._topPanels;\n  }\n\n  protected togglePanelVisibility(option: 'showTopPanel' | 'showHeaderRow' | 'showColumnHeader' | 'showFooterRow' | 'showPreHeaderPanel', container: HTMLElement | HTMLElement[], visible?: boolean, animate?: boolean) {\n    let animated = (animate === false) ? false : true;\n\n    if (this._options[option] !== visible) {\n      this._options[option] = visible;\n      if (visible) {\n        if (animated) {\n          Utils.slideDown(container, this.resizeCanvas.bind(this));\n          return;\n        }\n        Utils.show(container);\n        this.resizeCanvas();\n      } else {\n        if (animated) {\n          Utils.slideUp(container, this.resizeCanvas.bind(this));\n          return;\n        }\n        Utils.hide(container);\n        this.resizeCanvas();\n      }\n    }\n  }\n\n  /**\n   * Set the Top Panel Visibility and optionally enable/disable animation (enabled by default)\n   * @param {Boolean} [visible] - optionally set if top panel is visible or not\n   * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\n   */\n  setTopPanelVisibility(visible?: boolean, animate?: boolean) {\n    this.togglePanelVisibility('showTopPanel', this._topPanelScrollers, visible, animate);\n  }\n\n  /**\n   * Set the Header Row Visibility and optionally enable/disable animation (enabled by default)\n   * @param {Boolean} [visible] - optionally set if header row panel is visible or not\n   * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\n   */\n  setHeaderRowVisibility(visible?: boolean, animate?: boolean) {\n    this.togglePanelVisibility('showHeaderRow', this._headerRowScroller, visible, animate);\n  }\n\n  /**\n   * Set the Column Header Visibility and optionally enable/disable animation (enabled by default)\n   * @param {Boolean} [visible] - optionally set if column header is visible or not\n   * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\n   */\n  setColumnHeaderVisibility(visible?: boolean, animate?: boolean) {\n    this.togglePanelVisibility('showColumnHeader', this._headerScroller, visible, animate);\n  }\n\n  /**\n   * Set the Footer Visibility and optionally enable/disable animation (enabled by default)\n   * @param {Boolean} [visible] - optionally set if footer row panel is visible or not\n   * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\n   */\n  setFooterRowVisibility(visible?: boolean, animate?: boolean) {\n    this.togglePanelVisibility('showFooterRow', this._footerRowScroller, visible, animate);\n  }\n\n  /**\n   * Set the Pre-Header Visibility and optionally enable/disable animation (enabled by default)\n   * @param {Boolean} [visible] - optionally set if pre-header panel is visible or not\n   * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\n   */\n  setPreHeaderPanelVisibility(visible?: boolean, animate?: boolean) {\n    this.togglePanelVisibility('showPreHeaderPanel', [this._preHeaderPanelScroller, this._preHeaderPanelScrollerR], visible, animate);\n  }\n\n  /** Get Grid Canvas Node DOM Element */\n  getContainerNode() {\n    return this._container;\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // Rendering / Scrolling\n\n  protected getRowTop(row: number) {\n    return this._options.rowHeight * row - this.offset;\n  }\n\n  protected getRowFromPosition(y: number) {\n    return Math.floor((y + this.offset) / this._options.rowHeight);\n  }\n\n  /** Scroll to an Y position in the grid */\n  scrollTo(y: number) {\n    y = Math.max(y, 0);\n    y = Math.min(y, (this.th || 0) - (Utils.height(this._viewportScrollContainerY) as number) + ((this.viewportHasHScroll || this.hasFrozenColumns()) ? (this.scrollbarDimensions?.height ?? 0) : 0));\n\n    let oldOffset = this.offset;\n    this.offset = Math.round(this.page * (this.cj || 0));\n    this.page = Math.min((this.n || 0) - 1, Math.floor(y / (this.ph || 0)));\n    let newScrollTop = (y - this.offset) as number;\n\n    if (this.offset !== oldOffset) {\n      let range = this.getVisibleRange(newScrollTop);\n      this.cleanupRows(range);\n      this.updateRowPositions();\n    }\n\n    if (this.prevScrollTop !== newScrollTop) {\n      this.vScrollDir = (this.prevScrollTop + oldOffset < newScrollTop + this.offset) ? 1 : -1;\n      this.lastRenderedScrollTop = (this.scrollTop = this.prevScrollTop = newScrollTop);\n\n      if (this.hasFrozenColumns()) {\n        this._viewportTopL.scrollTop = newScrollTop;\n      }\n\n      if (this.hasFrozenRows) {\n        this._viewportBottomL.scrollTop = this._viewportBottomR.scrollTop = newScrollTop;\n      }\n\n      if (this._viewportScrollContainerY) {\n        this._viewportScrollContainerY.scrollTop = newScrollTop;\n      }\n\n      this.trigger(this.onViewportChanged, {});\n    }\n  }\n\n  protected defaultFormatter(_row: number, _cell: number, value: any) {\n    if (value == null) {\n      return '';\n    } else {\n      return (value + '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n    }\n  }\n\n  protected getFormatter(row: number, column: Column): Formatter {\n    let rowMetadata = (this.data as CustomDataView)?.getItemMetadata?.(row);\n\n    // look up by id, then index\n    let columnOverrides = rowMetadata?.columns &&\n      (rowMetadata.columns[column.id] || rowMetadata.columns[this.getColumnIndex(column.id)]);\n\n    return ((columnOverrides?.formatter) ||\n      (rowMetadata?.formatter) ||\n      column.formatter ||\n      (this._options.formatterFactory?.getFormatter(column)) ||\n      this._options.defaultFormatter) as Formatter;\n  }\n\n  protected getEditor(row: number, cell: number): Editor | undefined {\n    let column = this.columns[cell];\n    let rowMetadata = (this.data as CustomDataView)?.getItemMetadata?.(row);\n    let columnMetadata = rowMetadata?.columns;\n\n    if (columnMetadata?.[column.id]?.editor !== undefined) {\n      return columnMetadata[column.id].editor as Editor;\n    }\n    if (columnMetadata?.[cell]?.editor !== undefined) {\n      return columnMetadata[cell].editor as Editor;\n    }\n\n    return column.editor || (this._options?.editorFactory?.getEditor(column));\n  }\n\n  protected getDataItemValueForColumn(item: any, columnDef: Column) {\n    if (this._options.dataItemColumnValueExtractor) {\n      return this._options.dataItemColumnValueExtractor(item, columnDef);\n    }\n    return item[columnDef.field];\n  }\n\n  protected appendRowHtml(stringArrayL: string[], stringArrayR: string[], row: number, range: CellViewportRange, dataLength: number) {\n    let d = this.getDataItem(row);\n    let dataLoading = row < dataLength && !d;\n    let rowCss = 'slick-row' +\n      (this.hasFrozenRows && row <= this._options.frozenRow ? ' frozen' : '') +\n      (dataLoading ? ' loading' : '') +\n      (row === this.activeRow && this._options.showCellSelection ? ' active' : '') +\n      (row % 2 == 1 ? ' odd' : ' even');\n\n    if (!d) {\n      rowCss += ' ' + this._options.addNewRowCssClass;\n    }\n\n    let metadata = (this.data as CustomDataView)?.getItemMetadata?.(row);\n\n    if (metadata && metadata.cssClasses) {\n      rowCss += ' ' + metadata.cssClasses;\n    }\n\n    let frozenRowOffset = this.getFrozenRowOffset(row);\n\n    let rowHtml = `<div class=\"ui-widget-content ${rowCss}\" style=\"top:${(this.getRowTop(row) - frozenRowOffset)}px\">`;\n\n    stringArrayL.push(rowHtml);\n\n    if (this.hasFrozenColumns()) {\n      stringArrayR.push(rowHtml);\n    }\n\n    let colspan: number | string, m: Column;\n    for (let i = 0, ii = this.columns.length; i < ii; i++) {\n      m = this.columns[i];\n      if (!m || m.hidden) continue;\n\n      colspan = 1;\n      if (metadata && metadata.columns) {\n        let columnData = metadata.columns[m.id] || metadata.columns[i];\n        colspan = columnData?.colspan || 1;\n        if (colspan === '*') {\n          colspan = ii - i;\n        }\n      }\n\n      // Do not render cells outside of the viewport.\n      if (this.columnPosRight[Math.min(ii - 1, i + (colspan as number) - 1)] > range.leftPx) {\n        if (!m.alwaysRenderColumn && this.columnPosLeft[i] > range.rightPx) {\n          // All columns to the right are outside the range.\n          break;\n        }\n\n        if (this.hasFrozenColumns() && (i > this._options.frozenColumn)) {\n          this.appendCellHtml(stringArrayR, row, i, (colspan as number), d);\n        } else {\n          this.appendCellHtml(stringArrayL, row, i, (colspan as number), d);\n        }\n      } else if (m.alwaysRenderColumn || (this.hasFrozenColumns() && i <= this._options.frozenColumn)) {\n        this.appendCellHtml(stringArrayL, row, i, (colspan as number), d);\n      }\n\n      if ((colspan as number) > 1) {\n        i += ((colspan as number) - 1);\n      }\n    }\n\n    stringArrayL.push('</div>');\n\n    if (this.hasFrozenColumns()) {\n      stringArrayR.push('</div>');\n    }\n  }\n\n  protected appendCellHtml(stringArray: string[], row: number, cell: number, colspan: number, item: any) {\n    // stringArray: stringBuilder containing the HTML parts\n    // row, cell: row and column index\n    // colspan: HTML colspan\n    // item: grid data for row\n\n    let m = this.columns[cell];\n    let cellCss = 'slick-cell l' + cell + ' r' + Math.min(this.columns.length - 1, cell + colspan - 1) + (m.cssClass ? ' ' + m.cssClass : '');\n\n    if (this.hasFrozenColumns() && cell <= this._options.frozenColumn) {\n      cellCss += (' frozen');\n    }\n\n    if (row === this.activeRow && cell === this.activeCell && this._options.showCellSelection) {\n      cellCss += (' active');\n    }\n\n    // TODO:  merge them together in the setter\n    for (let key in this.cellCssClasses) {\n      if (this.cellCssClasses[key][row] && this.cellCssClasses[key][row][m.id]) {\n        cellCss += (' ' + this.cellCssClasses[key][row][m.id]);\n      }\n    }\n\n    let value = null, formatterResult: FormatterResultObject | string = '';\n    if (item) {\n      value = this.getDataItemValueForColumn(item, m);\n      formatterResult = this.getFormatter(row, m)(row, cell, value, m, item, this);\n      if (formatterResult === null || formatterResult === undefined) {\n        formatterResult = '';\n      }\n    }\n\n    // get addl css class names from object type formatter return and from string type return of onBeforeAppendCell\n    // we will only use the event result as CSS classes when it is a string type (undefined event always return a true boolean which is not a valid css class)\n    const evt = this.trigger(this.onBeforeAppendCell, { row, cell, value, dataContext: item });\n    let appendCellResult = evt.getReturnValue();\n    var addlCssClasses = typeof appendCellResult === 'string' ? appendCellResult : '';\n    if ((formatterResult as FormatterResultObject)?.addClasses) {\n      addlCssClasses += (addlCssClasses ? ' ' : '') + (formatterResult as FormatterResultObject).addClasses;\n    }\n    let toolTip = (formatterResult as FormatterResultObject)?.toolTip ? \"title='\" + (formatterResult as FormatterResultObject).toolTip + \"'\" : '';\n\n    let customAttrStr = '';\n    if (m.hasOwnProperty('cellAttrs') && m.cellAttrs instanceof Object) {\n      for (let key in m.cellAttrs) {\n        if (m.cellAttrs.hasOwnProperty(key)) {\n          customAttrStr += ` ${key}=\"${m.cellAttrs[key]}\" `;\n        }\n      }\n    }\n\n    stringArray.push(`<div class=\"${cellCss + (addlCssClasses ? ' ' + addlCssClasses : '')}\" ${toolTip + customAttrStr}>`);\n\n    // if there is a corresponding row (if not, this is the Add New row or this data hasn't been loaded yet)\n    if (item) {\n      stringArray.push((Object.prototype.toString.call(formatterResult) !== '[object Object]' ? formatterResult : (formatterResult as FormatterResultObject).text) as string);\n    }\n\n    stringArray.push('</div>');\n\n    this.rowsCache[row].cellRenderQueue.push(cell);\n    this.rowsCache[row].cellColSpans[cell] = colspan;\n  }\n\n  protected cleanupRows(rangeToKeep: { bottom: number; top: number; }) {\n    for (let rowId in this.rowsCache) {\n      let i = +rowId;\n      let removeFrozenRow = true;\n\n      if (this.hasFrozenRows\n        && ((this._options.frozenBottom && (i as unknown as number) >= this.actualFrozenRow) // Frozen bottom rows\n          || (!this._options.frozenBottom && (i as unknown as number) <= this.actualFrozenRow) // Frozen top rows\n        )\n      ) {\n        removeFrozenRow = false;\n      }\n\n      if (((i = parseInt(rowId, 10)) !== this.activeRow)\n        && (i < rangeToKeep.top || i > rangeToKeep.bottom)\n        && (removeFrozenRow)\n      ) {\n        this.removeRowFromCache(i);\n      }\n    }\n    if (this._options.enableAsyncPostRenderCleanup) { this.startPostProcessingCleanup(); }\n  }\n\n  /** Invalidate all grid rows and re-render the grid rows */\n  invalidate() {\n    this.updateRowCount();\n    this.invalidateAllRows();\n    this.render();\n  }\n\n  /** Invalidate all grid rows */\n  invalidateAllRows() {\n    if (this.currentEditor) {\n      this.makeActiveCellNormal();\n    }\n    for (let row in this.rowsCache) {\n      this.removeRowFromCache(row);\n    }\n    if (this._options.enableAsyncPostRenderCleanup) { this.startPostProcessingCleanup(); }\n  }\n\n  /** Invalidate a specific set of row numbers */\n  invalidateRows(rows: number[]) {\n    let i, rl;\n    if (!rows || !rows.length) {\n      return;\n    }\n    this.vScrollDir = 0;\n    rl = rows.length;\n    for (i = 0; i < rl; i++) {\n      if (this.currentEditor && this.activeRow === rows[i]) {\n        this.makeActiveCellNormal();\n      }\n      if (this.rowsCache[rows[i]]) {\n        this.removeRowFromCache(rows[i]);\n      }\n    }\n    if (this._options.enableAsyncPostRenderCleanup) { this.startPostProcessingCleanup(); }\n  }\n\n  /** Invalidate a specific row number */\n  invalidateRow(row?: number) {\n    if (!row && row !== 0) { return; }\n    this.invalidateRows([row]);\n  }\n\n  protected queuePostProcessedRowForCleanup(cacheEntry: any, postProcessedRow: any, rowIdx: number) {\n    this.postProcessgroupId++;\n\n    // store and detach node for later async cleanup\n    for (let columnIdx in postProcessedRow) {\n      if (postProcessedRow.hasOwnProperty(columnIdx)) {\n        this.postProcessedCleanupQueue.push({\n          actionType: 'C',\n          groupId: this.postProcessgroupId,\n          node: cacheEntry.cellNodesByColumnIdx[+columnIdx],\n          columnIdx: +columnIdx,\n          rowIdx\n        });\n      }\n    }\n    this.postProcessedCleanupQueue.push({\n      actionType: 'R',\n      groupId: this.postProcessgroupId,\n      node: cacheEntry.rowNode\n    });\n    cacheEntry.rowNode.forEach((node) => {\n      node.remove();\n    });\n  }\n\n  protected queuePostProcessedCellForCleanup(cellnode: HTMLElement, columnIdx: number, rowIdx: number) {\n    this.postProcessedCleanupQueue.push({\n      actionType: 'C',\n      groupId: this.postProcessgroupId,\n      node: cellnode,\n      columnIdx,\n      rowIdx\n    });\n    cellnode.remove();\n  }\n\n  protected removeRowFromCache(row) {\n    let cacheEntry = this.rowsCache[row];\n    if (!cacheEntry) {\n      return;\n    }\n\n    if (this._options.enableAsyncPostRenderCleanup && this.postProcessedRows[row]) {\n      this.queuePostProcessedRowForCleanup(cacheEntry, this.postProcessedRows[row], row);\n    } else {\n      cacheEntry.rowNode.forEach((node) => {\n        if (node.parentElement) {\n          node.parentElement.removeChild(node);\n        }\n      });\n    }\n\n    delete this.rowsCache[row];\n    delete this.postProcessedRows[row];\n    this.renderedRows--;\n    this.counter_rows_removed++;\n  }\n\n  /** Apply a Formatter Result to a Cell DOM Node */\n  applyFormatResultToCellNode(formatterResult: FormatterResultObject | string, cellNode: HTMLElement, suppressRemove?: boolean) {\n    if (formatterResult === null || formatterResult === undefined) { formatterResult = ''; }\n    if (Object.prototype.toString.call(formatterResult) !== '[object Object]') {\n      cellNode.innerHTML = this.sanitizeHtmlString(formatterResult as string);\n      return;\n    }\n    cellNode.innerHTML = this.sanitizeHtmlString((formatterResult as FormatterResultObject).text);\n    if ((formatterResult as FormatterResultObject).removeClasses && !suppressRemove) {\n      const classes = (formatterResult as FormatterResultObject).removeClasses!.split(' ');\n      classes.forEach((c) => cellNode.classList.remove(c));\n    }\n    if ((formatterResult as FormatterResultObject).addClasses) {\n      const classes = (formatterResult as FormatterResultObject).addClasses!.split(' ');\n      classes.forEach((c) => cellNode.classList.add(c));\n    }\n    if ((formatterResult as FormatterResultObject).toolTip) {\n      cellNode.setAttribute('title', (formatterResult as FormatterResultObject).toolTip!);\n    }\n  }\n\n  /**\n   * Update a specific cell by its row and column index\n   * @param {Number} row - grid row number\n   * @param {Number} cell - grid cell column number\n   */\n  updateCell(row: number, cell: number) {\n    let cellNode = this.getCellNode(row, cell);\n    if (!cellNode) {\n      return;\n    }\n\n    let m = this.columns[cell], d = this.getDataItem(row);\n    if (this.currentEditor && this.activeRow === row && this.activeCell === cell) {\n      this.currentEditor.loadValue(d);\n    } else {\n      let formatterResult = d ? this.getFormatter(row, m)(row, cell, this.getDataItemValueForColumn(d, m), m, d, this) : '';\n      this.applyFormatResultToCellNode(formatterResult, cellNode);\n      this.invalidatePostProcessingResults(row);\n    }\n  }\n\n  /**\n   * Update a specific row by its row index\n   * @param {Number} row - grid row number\n   */\n  updateRow(row: number) {\n    let cacheEntry = this.rowsCache[row];\n    if (!cacheEntry) {\n      return;\n    }\n\n    this.ensureCellNodesInRowsCache(row);\n\n    let formatterResult, d = this.getDataItem(row);\n\n    for (let colIdx in cacheEntry.cellNodesByColumnIdx) {\n      if (!cacheEntry.cellNodesByColumnIdx.hasOwnProperty(colIdx)) {\n        continue;\n      }\n\n      const columnIdx = +colIdx;\n      let m = this.columns[columnIdx],\n\n        node = cacheEntry.cellNodesByColumnIdx[columnIdx];\n\n      if (row === this.activeRow && columnIdx === this.activeCell && this.currentEditor) {\n        this.currentEditor.loadValue(d);\n      } else if (d) {\n        formatterResult = this.getFormatter(row, m)(row, columnIdx, this.getDataItemValueForColumn(d, m), m, d, this);\n        this.applyFormatResultToCellNode(formatterResult, node);\n      } else {\n        node.innerHTML = '';\n      }\n    }\n\n    this.invalidatePostProcessingResults(row);\n  }\n\n  protected getViewportHeight() {\n    if (!this._options.autoHeight || this._options.frozenColumn !== -1) {\n      this.topPanelH = (this._options.showTopPanel) ? this._options.topPanelHeight + this.getVBoxDelta(this._topPanelScrollers[0]) : 0;\n      this.headerRowH = (this._options.showHeaderRow) ? this._options.headerRowHeight + this.getVBoxDelta(this._headerRowScroller[0]) : 0;\n      this.footerRowH = (this._options.showFooterRow) ? this._options.footerRowHeight + this.getVBoxDelta(this._footerRowScroller[0]) : 0;\n    }\n\n    if (this._options.autoHeight) {\n      let fullHeight = this._paneHeaderL.offsetHeight;\n      fullHeight += (this._options.showHeaderRow) ? this._options.headerRowHeight + this.getVBoxDelta(this._headerRowScroller[0]) : 0;\n      fullHeight += (this._options.showFooterRow) ? this._options.footerRowHeight + this.getVBoxDelta(this._footerRowScroller[0]) : 0;\n      fullHeight += (this.getCanvasWidth() > this.viewportW) ? (this.scrollbarDimensions?.height ?? 0) : 0;\n\n      this.viewportH = this._options.rowHeight\n        * this.getDataLengthIncludingAddNew()\n        + ((this._options.frozenColumn == -1) ? fullHeight : 0);\n    } else {\n      const columnNamesH = (this._options.showColumnHeader) ? Utils.toFloat(Utils.height(this._headerScroller[0]) as number) + this.getVBoxDelta(this._headerScroller[0]) : 0;\n      const preHeaderH = (this._options.createPreHeaderPanel && this._options.showPreHeaderPanel) ? this._options.preHeaderPanelHeight + this.getVBoxDelta(this._preHeaderPanelScroller) : 0;\n\n      const style = getComputedStyle(this._container);\n      this.viewportH = Utils.toFloat(style.height)\n        - Utils.toFloat(style.paddingTop)\n        - Utils.toFloat(style.paddingBottom)\n        - columnNamesH\n        - this.topPanelH\n        - this.headerRowH\n        - this.footerRowH\n        - preHeaderH;\n    }\n\n    this.numVisibleRows = Math.ceil(this.viewportH / this._options.rowHeight);\n    return this.viewportH;\n  }\n\n  protected getViewportWidth() {\n    this.viewportW = parseFloat(Utils.innerSize(this._container, 'width') as unknown as string);\n    return this.viewportW;\n  }\n\n  /** Execute a Resize of the Canvas */\n  resizeCanvas() {\n    if (!this.initialized) { return; }\n    this.paneTopH = 0;\n    this.paneBottomH = 0;\n    this.viewportTopH = 0;\n    this.viewportBottomH = 0;\n\n    this.getViewportWidth();\n    this.getViewportHeight();\n\n    // Account for Frozen Rows\n    if (this.hasFrozenRows) {\n      if (this._options.frozenBottom) {\n        this.paneTopH = this.viewportH - this.frozenRowsHeight - (this.scrollbarDimensions?.height ?? 0);\n        this.paneBottomH = this.frozenRowsHeight + (this.scrollbarDimensions?.height ?? 0);\n      } else {\n        this.paneTopH = this.frozenRowsHeight;\n        this.paneBottomH = this.viewportH - this.frozenRowsHeight;\n      }\n    } else {\n      this.paneTopH = this.viewportH;\n    }\n\n    // The top pane includes the top panel and the header row\n    this.paneTopH += this.topPanelH + this.headerRowH + this.footerRowH;\n\n    if (this.hasFrozenColumns() && this._options.autoHeight) {\n      this.paneTopH += (this.scrollbarDimensions?.height ?? 0);\n    }\n\n    // The top viewport does not contain the top panel or header row\n    this.viewportTopH = this.paneTopH - this.topPanelH - this.headerRowH - this.footerRowH;\n\n    if (this._options.autoHeight) {\n      if (this.hasFrozenColumns()) {\n        const style = getComputedStyle(this._headerScrollerL);\n        Utils.height(this._container, this.paneTopH + Utils.toFloat(style.height));\n      }\n\n      this._paneTopL.style.position = 'relative';\n    }\n\n    Utils.setStyleSize(this._paneTopL, 'top', Utils.height(this._paneHeaderL) || (this._options.showHeaderRow ? this._options.headerRowHeight : 0) + (this._options.showPreHeaderPanel ? this._options.preHeaderPanelHeight : 0));\n    Utils.height(this._paneTopL, this.paneTopH);\n\n    let paneBottomTop = this._paneTopL.offsetTop + this.paneTopH;\n\n    if (!this._options.autoHeight) {\n      Utils.height(this._viewportTopL, this.viewportTopH);\n    }\n\n    if (this.hasFrozenColumns()) {\n      Utils.setStyleSize(this._paneTopR, 'top', Utils.height(this._paneHeaderL) as number);\n      Utils.height(this._paneTopR, this.paneTopH);\n      Utils.height(this._viewportTopR, this.viewportTopH);\n\n      if (this.hasFrozenRows) {\n        Utils.setStyleSize(this._paneBottomL, 'top', paneBottomTop);\n        Utils.height(this._paneBottomL, this.paneBottomH);\n        Utils.setStyleSize(this._paneBottomR, 'top', paneBottomTop);\n        Utils.height(this._paneBottomR, this.paneBottomH);\n        Utils.height(this._viewportBottomR, this.paneBottomH);\n      }\n    } else {\n      if (this.hasFrozenRows) {\n        Utils.width(this._paneBottomL, '100%');\n        Utils.height(this._paneBottomL, this.paneBottomH);\n        Utils.setStyleSize(this._paneBottomL, 'top', paneBottomTop);\n      }\n    }\n\n    if (this.hasFrozenRows) {\n      Utils.height(this._viewportBottomL, this.paneBottomH);\n\n      if (this._options.frozenBottom) {\n        Utils.height(this._canvasBottomL, this.frozenRowsHeight);\n\n        if (this.hasFrozenColumns()) {\n          Utils.height(this._canvasBottomR, this.frozenRowsHeight);\n        }\n      } else {\n        Utils.height(this._canvasTopL, this.frozenRowsHeight);\n\n        if (this.hasFrozenColumns()) {\n          Utils.height(this._canvasTopR, this.frozenRowsHeight);\n        }\n      }\n    } else {\n      Utils.height(this._viewportTopR, this.viewportTopH);\n    }\n\n    if (!this.scrollbarDimensions || !this.scrollbarDimensions.width) {\n      this.scrollbarDimensions = this.measureScrollbar();\n    }\n\n    if (this._options.autosizeColsMode === GridAutosizeColsMode.LegacyForceFit) {\n      this.autosizeColumns();\n    }\n\n    this.updateRowCount();\n    this.handleScroll();\n    // Since the width has changed, force the render() to reevaluate virtually rendered cells.\n    this.lastRenderedScrollLeft = -1;\n    this.render();\n  }\n\n  /** Update paging information status from the View */\n  updatePagingStatusFromView(pagingInfo: PagingInfo) {\n    this.pagingActive = (pagingInfo.pageSize !== 0);\n    this.pagingIsLastPage = (pagingInfo.pageNum == pagingInfo.totalPages - 1);\n  }\n\n  /** Update the dataset row count */\n  updateRowCount() {\n    if (!this.initialized) { return; }\n\n    let dataLength = this.getDataLength();\n    let dataLengthIncludingAddNew = this.getDataLengthIncludingAddNew();\n    let numberOfRows = 0;\n    let oldH = ((this.hasFrozenRows && !this._options.frozenBottom) ? Utils.height(this._canvasBottomL) : Utils.height(this._canvasTopL)) as number;\n\n    if (this.hasFrozenRows) {\n      numberOfRows = this.getDataLength() - this._options.frozenRow;\n    } else {\n      numberOfRows = dataLengthIncludingAddNew + (this._options.leaveSpaceForNewRows ? this.numVisibleRows - 1 : 0);\n    }\n\n    let tempViewportH = Utils.height(this._viewportScrollContainerY) as number;\n    let oldViewportHasVScroll = this.viewportHasVScroll;\n    // with autoHeight, we do not need to accommodate the vertical scroll bar\n    this.viewportHasVScroll = this._options.alwaysShowVerticalScroll || !this._options.autoHeight && (numberOfRows * this._options.rowHeight > tempViewportH);\n\n    this.makeActiveCellNormal();\n\n    // remove the rows that are now outside of the data range\n    // this helps avoid redundant calls to .removeRow() when the size of the data decreased by thousands of rows\n    let r1 = dataLength - 1;\n    for (let i in this.rowsCache) {\n      if (Number(i) > r1) {\n        this.removeRowFromCache(i);\n      }\n    }\n    if (this._options.enableAsyncPostRenderCleanup) {\n      this.startPostProcessingCleanup();\n    }\n\n    if (this.activeCellNode && this.activeRow > r1) {\n      this.resetActiveCell();\n    }\n\n    oldH = this.h;\n    if (this._options.autoHeight) {\n      this.h = this._options.rowHeight * numberOfRows;\n    } else {\n      this.th = Math.max(this._options.rowHeight * numberOfRows, tempViewportH - (this.scrollbarDimensions?.height ?? 0));\n      if (this.th < this.maxSupportedCssHeight) {\n        // just one page\n        this.h = this.ph = this.th;\n        this.n = 1;\n        this.cj = 0;\n      } else {\n        // break into pages\n        this.h = this.maxSupportedCssHeight;\n        this.ph = this.h / 100;\n        this.n = Math.floor(this.th / this.ph);\n        this.cj = (this.th - this.h) / (this.n - 1);\n      }\n    }\n\n    if (this.h !== oldH || this.enforceFrozenRowHeightRecalc) {\n      if (this.hasFrozenRows && !this._options.frozenBottom) {\n        Utils.height(this._canvasBottomL, this.h);\n\n        if (this.hasFrozenColumns()) {\n          Utils.height(this._canvasBottomR, this.h);\n        }\n      } else {\n        Utils.height(this._canvasTopL, this.h);\n        Utils.height(this._canvasTopR, this.h);\n      }\n\n      this.scrollTop = this._viewportScrollContainerY.scrollTop;\n      this.enforceFrozenRowHeightRecalc = false; // reset enforce flag\n    }\n\n    let oldScrollTopInRange = (this.scrollTop + this.offset <= this.th - tempViewportH);\n\n    if (this.th == 0 || this.scrollTop == 0) {\n      this.page = this.offset = 0;\n    } else if (oldScrollTopInRange) {\n      // maintain virtual position\n      this.scrollTo(this.scrollTop + this.offset);\n    } else {\n      // scroll to bottom\n      this.scrollTo(this.th - tempViewportH + (this.scrollbarDimensions?.height ?? 0));\n    }\n\n    if (this.h !== oldH && this._options.autoHeight) {\n      this.resizeCanvas();\n    }\n\n    if (this._options.autosizeColsMode === GridAutosizeColsMode.LegacyForceFit && oldViewportHasVScroll !== this.viewportHasVScroll) {\n      this.autosizeColumns();\n    }\n    this.updateCanvasWidth(false);\n  }\n\n  /** @alias `getVisibleRange` */\n  getViewport(viewportTop?: number, viewportLeft?: number) {\n    return this.getVisibleRange(viewportTop, viewportLeft);\n  }\n\n  getVisibleRange(viewportTop?: number, viewportLeft?: number) {\n    if (viewportTop == null) {\n      viewportTop = this.scrollTop;\n    }\n    if (viewportLeft == null) {\n      viewportLeft = this.scrollLeft;\n    }\n\n    return {\n      top: this.getRowFromPosition(viewportTop),\n      bottom: this.getRowFromPosition(viewportTop + this.viewportH) + 1,\n      leftPx: viewportLeft,\n      rightPx: viewportLeft + this.viewportW\n    };\n  }\n\n  /** Get rendered range */\n  getRenderedRange(viewportTop?: number, viewportLeft?: number) {\n    let range = this.getVisibleRange(viewportTop, viewportLeft);\n    let buffer = Math.round(this.viewportH / this._options.rowHeight);\n    let minBuffer = this._options.minRowBuffer as number;\n\n    if (this.vScrollDir == -1) {\n      range.top -= buffer;\n      range.bottom += minBuffer;\n    } else if (this.vScrollDir == 1) {\n      range.top -= minBuffer;\n      range.bottom += buffer;\n    } else {\n      range.top -= minBuffer;\n      range.bottom += minBuffer;\n    }\n\n    range.top = Math.max(0, range.top);\n    range.bottom = Math.min(this.getDataLengthIncludingAddNew() - 1, range.bottom);\n\n    range.leftPx -= this.viewportW;\n    range.rightPx += this.viewportW;\n\n    range.leftPx = Math.max(0, range.leftPx);\n    range.rightPx = Math.min(this.canvasWidth, range.rightPx);\n\n    return range;\n  }\n\n  protected ensureCellNodesInRowsCache(row: number) {\n    const cacheEntry = this.rowsCache[row];\n    if (cacheEntry) {\n      if (cacheEntry.cellRenderQueue.length) {\n        const rowNode = cacheEntry.rowNode;\n        let children = Array.from(rowNode[0].children);\n        if (rowNode.length > 1) {\n          children = children.concat(Array.from(rowNode[1].children));\n        }\n\n        let i = children.length - 1;\n        while (cacheEntry.cellRenderQueue.length) {\n          const columnIdx = cacheEntry.cellRenderQueue.pop();\n          cacheEntry.cellNodesByColumnIdx[columnIdx] = children[i--];\n        }\n      }\n    }\n  }\n\n  protected cleanUpCells(range: CellViewportRange, row: number) {\n    // Ignore frozen rows\n    if (this.hasFrozenRows\n      && ((this._options.frozenBottom && row > this.actualFrozenRow) // Frozen bottom rows\n        || (row <= this.actualFrozenRow)                     // Frozen top rows\n      )\n    ) {\n      return;\n    }\n\n    let totalCellsRemoved = 0;\n    let cacheEntry = this.rowsCache[row];\n\n    // Remove cells outside the range.\n    let cellsToRemove: number[] = [];\n    for (let cellNodeIdx in cacheEntry.cellNodesByColumnIdx) {\n      // I really hate it when people mess with Array.prototype.\n      if (!cacheEntry.cellNodesByColumnIdx.hasOwnProperty(cellNodeIdx)) {\n        continue;\n      }\n\n      // This is a string, so it needs to be cast back to a number.\n      const i = +cellNodeIdx;\n\n      // Ignore frozen columns\n      if (i <= this._options.frozenColumn) {\n        continue;\n      }\n\n      // Ignore alwaysRenderedColumns\n      if (Array.isArray(this.columns) && this.columns[i] && this.columns[i].alwaysRenderColumn) {\n        continue;\n      }\n\n      let colspan = cacheEntry.cellColSpans[i];\n      if (this.columnPosLeft[i] > range.rightPx ||\n        this.columnPosRight[Math.min(this.columns.length - 1, (i as unknown as number) + colspan - 1)] < range.leftPx) {\n        if (!(row == this.activeRow && Number(i) == this.activeCell)) {\n          cellsToRemove.push((i as unknown as number));\n        }\n      }\n    }\n\n    let cellToRemove, cellNode;\n    while ((cellToRemove = cellsToRemove.pop()) != null) {\n      cellNode = cacheEntry.cellNodesByColumnIdx[cellToRemove];\n\n      if (this._options.enableAsyncPostRenderCleanup && this.postProcessedRows[row]?.[cellToRemove]) {\n        this.queuePostProcessedCellForCleanup(cellNode, cellToRemove, row);\n      } else {\n        cellNode.parentElement.removeChild(cellNode);\n      }\n\n      delete cacheEntry.cellColSpans[cellToRemove];\n      delete cacheEntry.cellNodesByColumnIdx[cellToRemove];\n      if (this.postProcessedRows[row]) {\n        delete this.postProcessedRows[row][cellToRemove];\n      }\n      totalCellsRemoved++;\n    }\n  }\n\n  protected cleanUpAndRenderCells(range: CellViewportRange) {\n    let cacheEntry;\n    let stringArray: string[] = [];\n    let processedRows: number[] = [];\n    let cellsAdded: number;\n    let totalCellsAdded = 0;\n    let colspan;\n\n    for (let row = range.top as number, btm = range.bottom as number; row <= btm; row++) {\n      cacheEntry = this.rowsCache[row];\n      if (!cacheEntry) {\n        continue;\n      }\n\n      // cellRenderQueue populated in renderRows() needs to be cleared first\n      this.ensureCellNodesInRowsCache(row);\n\n      this.cleanUpCells(range, row);\n\n      // Render missing cells.\n      cellsAdded = 0;\n\n      let metadata = (this.data as CustomDataView)?.getItemMetadata?.(row) ?? {};\n      metadata = metadata?.columns as any;\n\n      let d = this.getDataItem(row);\n\n      // TODO:  shorten this loop (index? heuristics? binary search?)\n      for (let i = 0, ii = this.columns.length; i < ii; i++) {\n        if (!this.columns[i] || this.columns[i].hidden) continue;\n\n        // Cells to the right are outside the range.\n        if (this.columnPosLeft[i] > range.rightPx) {\n          break;\n        }\n\n        // Already rendered.\n        if ((colspan = cacheEntry.cellColSpans[i]) != null) {\n          i += (colspan > 1 ? colspan - 1 : 0);\n          continue;\n        }\n\n        colspan = 1;\n        if (metadata) {\n          let columnData = metadata[this.columns[i].id] || metadata[i];\n          colspan = (columnData && columnData.colspan) || 1;\n          if (colspan === '*') {\n            colspan = ii - i;\n          }\n        }\n\n        if (this.columnPosRight[Math.min(ii - 1, i + colspan - 1)] > range.leftPx) {\n          this.appendCellHtml(stringArray, row, i, colspan, d);\n          cellsAdded++;\n        }\n\n        i += (colspan > 1 ? colspan - 1 : 0);\n      }\n\n      if (cellsAdded) {\n        totalCellsAdded += cellsAdded;\n        processedRows.push(row);\n      }\n    }\n\n    if (!stringArray.length) {\n      return;\n    }\n\n    let x = Utils.createDomElement('div', { innerHTML: this.sanitizeHtmlString(stringArray.join('')) });\n    let processedRow: number | null | undefined;\n    let node;\n    while ((processedRow = processedRows.pop()) != null) {\n      cacheEntry = this.rowsCache[processedRow];\n      let columnIdx;\n      while ((columnIdx = cacheEntry.cellRenderQueue.pop()) != null) {\n        node = x.lastChild;\n\n        if (this.hasFrozenColumns() && (columnIdx > this._options.frozenColumn)) {\n          cacheEntry.rowNode[1].appendChild(node);\n        } else {\n          cacheEntry.rowNode[0].appendChild(node);\n        }\n        cacheEntry.cellNodesByColumnIdx[columnIdx] = node;\n      }\n    }\n  }\n\n  protected renderRows(range: { top: number; bottom: number; leftPx: number; rightPx: number; }) {\n    let stringArrayL = [],\n      stringArrayR = [],\n      rows: number[] = [],\n      needToReselectCell = false,\n      dataLength = this.getDataLength();\n\n    for (let i = range.top as number, ii = range.bottom as number; i <= ii; i++) {\n      if (this.rowsCache[i] || (this.hasFrozenRows && this._options.frozenBottom && i == this.getDataLength())) {\n        continue;\n      }\n      this.renderedRows++;\n      rows.push(i);\n\n      // Create an entry right away so that appendRowHtml() can\n      // start populating it.\n      this.rowsCache[i] = {\n        rowNode: null,\n\n        // ColSpans of rendered cells (by column idx).\n        // Can also be used for checking whether a cell has been rendered.\n        cellColSpans: [],\n\n        // Cell nodes (by column idx).  Lazy-populated by ensureCellNodesInRowsCache().\n        cellNodesByColumnIdx: [],\n\n        // Column indices of cell nodes that have been rendered, but not yet indexed in\n        // cellNodesByColumnIdx.  These are in the same order as cell nodes added at the\n        // end of the row.\n        cellRenderQueue: []\n      };\n\n      this.appendRowHtml(stringArrayL, stringArrayR, i, range, dataLength);\n      if (this.activeCellNode && this.activeRow === i) {\n        needToReselectCell = true;\n      }\n      this.counter_rows_rendered++;\n    }\n\n    if (!rows.length) { return; }\n\n    let x = Utils.createDomElement('div', { innerHTML: this.sanitizeHtmlString(stringArrayL.join('')) });\n    let xRight = Utils.createDomElement('div', { innerHTML: this.sanitizeHtmlString(stringArrayR.join('')) });\n\n    for (let i = 0, ii = rows.length; i < ii; i++) {\n      if ((this.hasFrozenRows) && (rows[i] >= this.actualFrozenRow)) {\n        if (this.hasFrozenColumns()) {\n          this.rowsCache[rows[i]].rowNode = [x.firstChild, xRight.firstChild];\n          this._canvasBottomL.appendChild(x.firstChild as ChildNode);\n          this._canvasBottomR.appendChild(xRight.firstChild as ChildNode);\n        } else {\n          this.rowsCache[rows[i]].rowNode = [x.firstChild as ChildNode];\n          this._canvasBottomL.appendChild(x.firstChild as ChildNode);\n        }\n      } else if (this.hasFrozenColumns()) {\n        this.rowsCache[rows[i]].rowNode = [x.firstChild, xRight.firstChild];\n        this._canvasTopL.appendChild(x.firstChild as ChildNode);\n        this._canvasTopR.appendChild(xRight.firstChild as ChildNode);\n      } else {\n        this.rowsCache[rows[i]].rowNode = [x.firstChild as ChildNode];\n        this._canvasTopL.appendChild(x.firstChild as ChildNode);\n      }\n    }\n\n    if (needToReselectCell) {\n      this.activeCellNode = this.getCellNode(this.activeRow, this.activeCell);\n    }\n  }\n\n  protected startPostProcessing() {\n    if (!this._options.enableAsyncPostRender) {\n      return;\n    }\n    clearTimeout(this.h_postrender);\n    this.h_postrender = setTimeout(this.asyncPostProcessRows, this._options.asyncPostRenderDelay);\n  }\n\n  protected startPostProcessingCleanup() {\n    if (!this._options.enableAsyncPostRenderCleanup) {\n      return;\n    }\n    clearTimeout(this.h_postrenderCleanup);\n    this.h_postrenderCleanup = setTimeout(this.asyncPostProcessCleanupRows, this._options.asyncPostRenderCleanupDelay);\n  }\n\n  protected invalidatePostProcessingResults(row: number) {\n    // change status of columns to be re-rendered\n    for (let columnIdx in this.postProcessedRows[row]) {\n      if (this.postProcessedRows[row].hasOwnProperty(columnIdx)) {\n        this.postProcessedRows[row][columnIdx] = 'C';\n      }\n    }\n    this.postProcessFromRow = Math.min(this.postProcessFromRow as number, row);\n    this.postProcessToRow = Math.max(this.postProcessToRow as number, row);\n    this.startPostProcessing();\n  }\n\n  protected updateRowPositions() {\n    for (let row in this.rowsCache) {\n      let rowNumber = row ? parseInt(row) : 0;\n      Utils.setStyleSize(this.rowsCache[rowNumber].rowNode[0], 'top', this.getRowTop(rowNumber));\n    }\n  }\n\n  /** (re)Render the grid */\n  render() {\n    if (!this.initialized) { return; }\n\n    this.scrollThrottle.dequeue();\n\n    let visible = this.getVisibleRange();\n    let rendered = this.getRenderedRange();\n\n    // remove rows no longer in the viewport\n    this.cleanupRows(rendered);\n\n    // add new rows & missing cells in existing rows\n    if (this.lastRenderedScrollLeft !== this.scrollLeft) {\n      if (this.hasFrozenRows) {\n        let renderedFrozenRows = Utils.extend(true, {}, rendered);\n\n        if (this._options.frozenBottom) {\n          renderedFrozenRows.top = this.actualFrozenRow;\n          renderedFrozenRows.bottom = this.getDataLength();\n        } else {\n          renderedFrozenRows.top = 0;\n          renderedFrozenRows.bottom = this._options.frozenRow;\n        }\n        this.cleanUpAndRenderCells(renderedFrozenRows);\n      }\n      this.cleanUpAndRenderCells(rendered);\n    }\n\n    // render missing rows\n    this.renderRows(rendered);\n\n    // Render frozen rows\n    if (this.hasFrozenRows) {\n      if (this._options.frozenBottom) {\n        this.renderRows({\n          top: this.actualFrozenRow, bottom: this.getDataLength() - 1, leftPx: rendered.leftPx, rightPx: rendered.rightPx\n        });\n      } else {\n        this.renderRows({\n          top: 0, bottom: this._options.frozenRow - 1, leftPx: rendered.leftPx, rightPx: rendered.rightPx\n        });\n      }\n    }\n\n    this.postProcessFromRow = visible.top;\n    this.postProcessToRow = Math.min(this.getDataLengthIncludingAddNew() - 1, visible.bottom);\n    this.startPostProcessing();\n\n    this.lastRenderedScrollTop = this.scrollTop;\n    this.lastRenderedScrollLeft = this.scrollLeft;\n    this.h_render = null;\n    this.trigger(this.onRendered, { startRow: visible.top, endRow: visible.bottom, grid: this });\n  }\n\n  protected handleHeaderRowScroll() {\n    let scrollLeft = this._headerRowScrollContainer.scrollLeft;\n    if (scrollLeft !== this._viewportScrollContainerX.scrollLeft) {\n      this._viewportScrollContainerX.scrollLeft = scrollLeft;\n    }\n  }\n\n  protected handleFooterRowScroll() {\n    let scrollLeft = this._footerRowScrollContainer.scrollLeft;\n    if (scrollLeft !== this._viewportScrollContainerX.scrollLeft) {\n      this._viewportScrollContainerX.scrollLeft = scrollLeft;\n    }\n  }\n\n  protected handlePreHeaderPanelScroll() {\n    this.handleElementScroll(this._preHeaderPanelScroller);\n  }\n\n  protected handleElementScroll(element: HTMLElement) {\n    let scrollLeft = element.scrollLeft;\n    if (scrollLeft !== this._viewportScrollContainerX.scrollLeft) {\n      this._viewportScrollContainerX.scrollLeft = scrollLeft;\n    }\n  }\n\n  protected handleScroll() {\n    this.scrollTop = this._viewportScrollContainerY.scrollTop;\n    this.scrollLeft = this._viewportScrollContainerX.scrollLeft;\n    return this._handleScroll(false);\n  }\n\n  protected _handleScroll(isMouseWheel: boolean) {\n    let maxScrollDistanceY = this._viewportScrollContainerY.scrollHeight - this._viewportScrollContainerY.clientHeight;\n    let maxScrollDistanceX = this._viewportScrollContainerY.scrollWidth - this._viewportScrollContainerY.clientWidth;\n\n    // Protect against erroneous clientHeight/Width greater than scrollHeight/Width.\n    // Sometimes seen in Chrome.\n    maxScrollDistanceY = Math.max(0, maxScrollDistanceY);\n    maxScrollDistanceX = Math.max(0, maxScrollDistanceX);\n\n    // Ceiling the max scroll values\n    if (this.scrollTop > maxScrollDistanceY) {\n      this.scrollTop = maxScrollDistanceY;\n    }\n    if (this.scrollLeft > maxScrollDistanceX) {\n      this.scrollLeft = maxScrollDistanceX;\n    }\n\n    let vScrollDist = Math.abs(this.scrollTop - this.prevScrollTop);\n    let hScrollDist = Math.abs(this.scrollLeft - this.prevScrollLeft);\n\n    if (hScrollDist) {\n      this.prevScrollLeft = this.scrollLeft;\n\n      // adjust scroll position of all div containers when scrolling the grid\n      this._viewportScrollContainerX.scrollLeft = this.scrollLeft;\n      this._headerScrollContainer.scrollLeft = this.scrollLeft;\n      this._topPanelScrollers[0].scrollLeft = this.scrollLeft;\n      if (this._options.createFooterRow) {\n        this._footerRowScrollContainer.scrollLeft = this.scrollLeft;\n      }\n      if (this._options.createPreHeaderPanel) {\n        if (this.hasFrozenColumns()) {\n          this._preHeaderPanelScrollerR.scrollLeft = this.scrollLeft;\n        } else {\n          this._preHeaderPanelScroller.scrollLeft = this.scrollLeft;\n        }\n      }\n\n      if (this.hasFrozenColumns()) {\n        if (this.hasFrozenRows) {\n          this._viewportTopR.scrollLeft = this.scrollLeft;\n        }\n        this._headerRowScrollerR.scrollLeft = this.scrollLeft; // right header row scrolling with frozen grid\n      } else {\n        if (this.hasFrozenRows) {\n          this._viewportTopL.scrollLeft = this.scrollLeft;\n        }\n        this._headerRowScrollerL.scrollLeft = this.scrollLeft; // left header row scrolling with regular grid\n      }\n    }\n\n    // autoheight suppresses vertical scrolling, but editors can create a div larger than\n    // the row vertical size, which can lead to a vertical scroll bar appearing temporarily\n    // while the editor is displayed. this is not part of the grid scrolling, so we should ignore it\n    if (vScrollDist && !this._options.autoHeight) {\n      this.vScrollDir = this.prevScrollTop < this.scrollTop ? 1 : -1;\n      this.prevScrollTop = this.scrollTop;\n\n      if (isMouseWheel) {\n        this._viewportScrollContainerY.scrollTop = this.scrollTop;\n      }\n\n      if (this.hasFrozenColumns()) {\n        if (this.hasFrozenRows && !this._options.frozenBottom) {\n          this._viewportBottomL.scrollTop = this.scrollTop;\n        } else {\n          this._viewportTopL.scrollTop = this.scrollTop;\n        }\n      }\n\n      // switch virtual pages if needed\n      if (vScrollDist < this.viewportH) {\n        this.scrollTo(this.scrollTop + this.offset);\n      } else {\n        let oldOffset = this.offset;\n        if (this.h == this.viewportH) {\n          this.page = 0;\n        } else {\n          this.page = Math.min(this.n - 1, Math.floor(this.scrollTop * ((this.th - this.viewportH) / (this.h - this.viewportH)) * (1 / this.ph)));\n        }\n        this.offset = Math.round(this.page * this.cj);\n        if (oldOffset !== this.offset) {\n          this.invalidateAllRows();\n        }\n      }\n    }\n\n    if (hScrollDist || vScrollDist) {\n      let dx = Math.abs(this.lastRenderedScrollLeft - this.scrollLeft);\n      let dy = Math.abs(this.lastRenderedScrollTop - this.scrollTop);\n      if (dx > 20 || dy > 20) {\n        // if rendering is forced or scrolling is small enough to be \"easy\", just render\n        if (this._options.forceSyncScrolling || (dy < this.viewportH && dx < this.viewportW)) {\n          this.render();\n        } else {\n          // otherwise, perform \"difficult\" renders at a capped frequency\n          this.scrollThrottle.enqueue();\n        }\n\n        this.trigger(this.onViewportChanged, {});\n      }\n    }\n\n    this.trigger(this.onScroll, { scrollLeft: this.scrollLeft, scrollTop: this.scrollTop });\n\n    if (hScrollDist || vScrollDist) { return true; }\n    return false;\n  }\n\n  /**\n   * limits the frequency at which the provided action is executed.\n   * call enqueue to execute the action - it will execute either immediately or, if it was executed less than minPeriod_ms in the past, as soon as minPeriod_ms has expired.\n   * call dequeue to cancel any pending action.\n   */\n  protected actionThrottle(action: () => void, minPeriod_ms: number) {\n    let blocked = false;\n    let queued = false;\n\n    const enqueue = () => {\n      if (!blocked) {\n        blockAndExecute();\n      } else {\n        queued = true;\n      }\n    }\n\n    const dequeue = () => {\n      queued = false;\n    }\n\n    const blockAndExecute = () => {\n      blocked = true;\n      setTimeout(unblock, minPeriod_ms);\n      action.call(this);\n    }\n\n    const unblock = () => {\n      if (queued) {\n        dequeue();\n        blockAndExecute();\n      } else {\n        blocked = false;\n      }\n    }\n\n    return {\n      enqueue: enqueue.bind(this),\n      dequeue: dequeue.bind(this)\n    };\n  }\n\n  protected asyncPostProcessRows() {\n    let dataLength = this.getDataLength();\n    while (this.postProcessFromRow <= this.postProcessToRow) {\n      let row = (this.vScrollDir >= 0) ? this.postProcessFromRow++ : this.postProcessToRow--;\n      let cacheEntry = this.rowsCache[row];\n      if (!cacheEntry || row >= dataLength) {\n        continue;\n      }\n\n      if (!this.postProcessedRows[row]) {\n        this.postProcessedRows[row] = {};\n      }\n\n      this.ensureCellNodesInRowsCache(row);\n      for (let colIdx in cacheEntry.cellNodesByColumnIdx) {\n        if (!cacheEntry.cellNodesByColumnIdx.hasOwnProperty(colIdx)) {\n          continue;\n        }\n\n        const columnIdx = +colIdx;\n\n        let m = this.columns[columnIdx];\n        let processedStatus = this.postProcessedRows[row][columnIdx]; // C=cleanup and re-render, R=rendered\n        if (m.asyncPostRender && processedStatus !== 'R') {\n          let node = cacheEntry.cellNodesByColumnIdx[columnIdx];\n          if (node) {\n            m.asyncPostRender(node, row, this.getDataItem(row), m, (processedStatus === 'C'));\n          }\n          this.postProcessedRows[row][columnIdx] = 'R';\n        }\n      }\n\n      this.h_postrender = setTimeout(this.asyncPostProcessRows, this._options.asyncPostRenderDelay);\n      return;\n    }\n  }\n\n  protected asyncPostProcessCleanupRows() {\n    if (this.postProcessedCleanupQueue.length > 0) {\n      let groupId = this.postProcessedCleanupQueue[0].groupId;\n\n      // loop through all queue members with this groupID\n      while (this.postProcessedCleanupQueue.length > 0 && this.postProcessedCleanupQueue[0].groupId == groupId) {\n        let entry = this.postProcessedCleanupQueue.shift();\n        if (entry?.actionType === 'R') {\n          (entry.node as HTMLElement[]).forEach((node) => {\n            node.remove();\n          });\n        }\n        if (entry?.actionType === 'C') {\n          let column = this.columns[entry.columnIdx ?? ''];\n          if (column.asyncPostRenderCleanup && entry.node) {\n            // cleanup must also remove element\n            column.asyncPostRenderCleanup(entry.node, entry.rowIdx, column);\n          }\n        }\n      }\n\n      // call this function again after the specified delay\n      this.h_postrenderCleanup = setTimeout(this.asyncPostProcessCleanupRows, this._options.asyncPostRenderCleanupDelay);\n    }\n  }\n\n  protected updateCellCssStylesOnRenderedRows(addedHash?: CssStyleHash | null, removedHash?: CssStyleHash | null) {\n    let node: HTMLElement | null, columnId: number | string, addedRowHash, removedRowHash;\n    for (let row in this.rowsCache) {\n      removedRowHash = removedHash?.[row];\n      addedRowHash = addedHash?.[row];\n\n      if (removedRowHash) {\n        for (columnId in removedRowHash) {\n          if (!addedRowHash || removedRowHash[columnId] !== addedRowHash[columnId]) {\n            node = this.getCellNode(+row, this.getColumnIndex(columnId));\n            if (node) {\n              node.classList.remove(removedRowHash[columnId]);\n            }\n          }\n        }\n      }\n\n      if (addedRowHash) {\n        for (columnId in addedRowHash) {\n          if (!removedRowHash || removedRowHash[columnId] !== addedRowHash[columnId]) {\n            node = this.getCellNode(+row, this.getColumnIndex(columnId));\n            if (node) {\n              node.classList.add(addedRowHash[columnId]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Adds an \"overlay\" of CSS classes to cell DOM elements. SlickGrid can have many such overlays associated with different keys and they are frequently used by plugins. For example, SlickGrid uses this method internally to decorate selected cells with selectedCellCssClass (see options).\n   * @param key A unique key you can use in calls to setCellCssStyles and removeCellCssStyles. If a hash with that key has already been set, an exception will be thrown.\n   * @param hash A hash of additional cell CSS classes keyed by row number and then by column id. Multiple CSS classes can be specified and separated by space.\n   * @example\n   * `{\n   * \t 0: { number_column: SlickEvent; title_column: SlickEvent;\t},\n   * \t 4: { percent_column: SlickEvent; }\n   * }`\n   */\n  addCellCssStyles(key: string, hash: CssStyleHash) {\n    if (this.cellCssClasses[key]) {\n      throw new Error(`SlickGrid addCellCssStyles: cell CSS hash with key \"${key}\" already exists.`);\n    }\n\n    this.cellCssClasses[key] = hash;\n    this.updateCellCssStylesOnRenderedRows(hash, null);\n    this.trigger(this.onCellCssStylesChanged, { key, hash, grid: this });\n  }\n\n  /**\n   * Removes an \"overlay\" of CSS classes from cell DOM elements. See setCellCssStyles for more.\n   * @param key A string key.\n   */\n  removeCellCssStyles(key: string) {\n    if (!this.cellCssClasses[key]) {\n      return;\n    }\n\n    this.updateCellCssStylesOnRenderedRows(null, this.cellCssClasses[key]);\n    delete this.cellCssClasses[key];\n    this.trigger(this.onCellCssStylesChanged, { key, hash: null, grid: this });\n  }\n\n  /**\n   * Sets CSS classes to specific grid cells by calling removeCellCssStyles(key) followed by addCellCssStyles(key, hash). key is name for this set of styles so you can reference it later - to modify it or remove it, for example. hash is a per-row-index, per-column-name nested hash of CSS classes to apply.\n   * Suppose you have a grid with columns:\n   * [\"login\", \"name\", \"birthday\", \"age\", \"likes_icecream\", \"favorite_cake\"]\n   * ...and you'd like to highlight the \"birthday\" and \"age\" columns for people whose birthday is today, in this case, rows at index 0 and 9. (The first and tenth row in the grid).\n   * @param {String} key A string key. Will overwrite any data already associated with this key.\n   * @param {Object} hash A hash of additional cell CSS classes keyed by row number and then by column id. Multiple CSS classes can be specified and separated by space.\n   */\n  setCellCssStyles(key: string, hash: CssStyleHash) {\n    const prevHash = this.cellCssClasses[key];\n\n    this.cellCssClasses[key] = hash;\n    this.updateCellCssStylesOnRenderedRows(hash, prevHash);\n    this.trigger(this.onCellCssStylesChanged, { key, hash, grid: this });\n  }\n\n  /**\n   * Accepts a key name, returns the group of CSS styles defined under that name. See setCellCssStyles for more info.\n   * @param {String} key A string.\n   */\n  getCellCssStyles(key: string): CssStyleHash {\n    return this.cellCssClasses[key];\n  }\n\n  /**\n   * Flashes the cell twice by toggling the CSS class 4 times.\n   * @param {number} row A row index.\n   * @param {number} cell A column index.\n   * @param {number} [speed] (optional) - The milliseconds delay between the toggling calls. Defaults to 100 ms.\n   */\n  flashCell(row: number, cell: number, speed?: number) {\n    speed = speed || 250;\n\n    const toggleCellClass = (cellNode: HTMLElement, times: number) => {\n      if (times < 1) {\n        return;\n      }\n\n      setTimeout(() => {\n        if (times % 2 == 0) {\n          cellNode.classList.add(this._options.cellFlashingCssClass || '');\n        } else {\n          cellNode.classList.remove(this._options.cellFlashingCssClass || '');\n        }\n        toggleCellClass(cellNode, times - 1);\n      }, speed);\n    }\n\n    if (this.rowsCache[row]) {\n      const cellNode = this.getCellNode(row, cell);\n      if (cellNode) {\n        toggleCellClass(cellNode, 5);\n      }\n    }\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // Interactivity\n\n  protected handleMouseWheel(e: MouseEvent, _delta: number, deltaX: number, deltaY: number) {\n    this.scrollTop = Math.max(0, this._viewportScrollContainerY.scrollTop - (deltaY * this._options.rowHeight));\n    this.scrollLeft = this._viewportScrollContainerX.scrollLeft + (deltaX * 10);\n    let handled = this._handleScroll(true);\n    if (handled) {\n      e.preventDefault();\n    }\n  }\n\n  protected handleDragInit(e: DragEvent, dd: DragPosition) {\n    let cell = this.getCellFromEvent(e);\n    if (!cell || !this.cellExists(cell.row, cell.cell)) {\n      return false;\n    }\n\n    let retval = this.trigger(this.onDragInit, dd, e);\n    if (retval.isImmediatePropagationStopped()) {\n      return retval.getReturnValue();\n    }\n\n    // if nobody claims to be handling drag'n'drop by stopping immediate propagation,\n    // cancel out of it\n    return false;\n  }\n\n  protected handleDragStart(e: DragEvent, dd: DragPosition) {\n    let cell = this.getCellFromEvent(e);\n    if (!cell || !this.cellExists(cell.row, cell.cell)) {\n      return false;\n    }\n\n    let retval = this.trigger(this.onDragStart, dd, e);\n    if (retval.isImmediatePropagationStopped()) {\n      return retval.getReturnValue();\n    }\n\n    return false;\n  }\n\n  protected handleDrag(e: DragEvent, dd: DragPosition) {\n    return this.trigger(this.onDrag, dd, e).getReturnValue();\n  }\n\n  protected handleDragEnd(e: DragEvent, dd: DragPosition) {\n    this.trigger(this.onDragEnd, dd, e);\n  }\n\n  protected handleKeyDown(e: KeyboardEvent) {\n    const retval = this.trigger(this.onKeyDown, { row: this.activeRow, cell: this.activeCell }, e);\n    let handled: boolean | undefined | void = retval.isImmediatePropagationStopped();\n\n    if (!handled) {\n      if (!e.shiftKey && !e.altKey) {\n        if (this._options.editable && this.currentEditor?.keyCaptureList) {\n          if (this.currentEditor.keyCaptureList.indexOf((e as any).which) > -1) {\n            return;\n          }\n        }\n        if (e.which == keyCode.HOME) {\n          handled = (e.ctrlKey) ? this.navigateTop() : this.navigateRowStart();\n        } else if (e.which == keyCode.END) {\n          handled = (e.ctrlKey) ? this.navigateBottom() : this.navigateRowEnd();\n        }\n      }\n    }\n    if (!handled) {\n      if (!e.shiftKey && !e.altKey && !e.ctrlKey) {\n        // editor may specify an array of keys to bubble\n        if (this._options.editable && this.currentEditor?.keyCaptureList) {\n          if (this.currentEditor.keyCaptureList.indexOf((e as any).which) > -1) {\n            return;\n          }\n        }\n        if (e.which == keyCode.ESCAPE) {\n          if (!this.getEditorLock().isActive()) {\n            return; // no editing mode to cancel, allow bubbling and default processing (exit without cancelling the event)\n          }\n          this.cancelEditAndSetFocus();\n        } else if (e.which == keyCode.PAGE_DOWN) {\n          this.navigatePageDown();\n          handled = true;\n        } else if (e.which == keyCode.PAGE_UP) {\n          this.navigatePageUp();\n          handled = true;\n        } else if (e.which == keyCode.LEFT) {\n          handled = this.navigateLeft();\n        } else if (e.which == keyCode.RIGHT) {\n          handled = this.navigateRight();\n        } else if (e.which == keyCode.UP) {\n          handled = this.navigateUp();\n        } else if (e.which == keyCode.DOWN) {\n          handled = this.navigateDown();\n        } else if (e.which == keyCode.TAB) {\n          handled = this.navigateNext();\n        } else if (e.which == keyCode.ENTER) {\n          if (this._options.editable) {\n            if (this.currentEditor) {\n              // adding new row\n              if (this.activeRow === this.getDataLength()) {\n                this.navigateDown();\n              } else {\n                this.commitEditAndSetFocus();\n              }\n            } else {\n              if (this.getEditorLock().commitCurrentEdit()) {\n                this.makeActiveCellEditable(undefined, undefined, e);\n              }\n            }\n          }\n          handled = true;\n        }\n      } else if (e.which == keyCode.TAB && e.shiftKey && !e.ctrlKey && !e.altKey) {\n        handled = this.navigatePrev();\n      }\n    }\n\n    if (handled) {\n      // the event has been handled so don't let parent element (bubbling/propagation) or browser (default) handle it\n      e.stopPropagation();\n      e.preventDefault();\n      try {\n        (e as any).originalEvent.keyCode = 0; // prevent default behaviour for special keys in IE browsers (F3, F5, etc.)\n      }\n      // ignore exceptions - setting the original event's keycode throws access denied exception for \"Ctrl\"\n      // (hitting control key only, nothing else), \"Shift\" (maybe others)\n      catch (error) { }\n    }\n  }\n\n  protected handleClick(evt: any) {\n\n    let e = evt;\n    if (e instanceof SlickEventData) {\n      e = evt.getNativeEvent();\n    } else {\n      evt = undefined;\n    }\n\n    if (!this.currentEditor) {\n      // if this click resulted in some cell child node getting focus,\n      // don't steal it back - keyboard events will still bubble up\n      // IE9+ seems to default DIVs to tabIndex=0 instead of -1, so check for cell clicks directly.\n      if (e.target !== document.activeElement || e.target.classList.contains('slick-cell')) {\n        let selection = this.getTextSelection(); //store text-selection and restore it after\n        this.setFocus();\n        this.setTextSelection(selection as Range);\n      }\n    }\n\n    let cell = this.getCellFromEvent(e);\n    if (!cell || (this.currentEditor !== null && this.activeRow == cell.row && this.activeCell == cell.cell)) {\n      return;\n    }\n\n    evt = this.trigger(this.onClick, { row: cell.row, cell: cell.cell }, evt || e);\n    if (evt.isImmediatePropagationStopped()) {\n      return;\n    }\n\n    // this optimisation causes trouble - MLeibman #329\n    //if ((activeCell !== cell.cell || activeRow !== cell.row) && canCellBeActive(cell.row, cell.cell)) {\n    if (this.canCellBeActive(cell.row, cell.cell)) {\n      if (!this.getEditorLock().isActive() || this.getEditorLock().commitCurrentEdit()) {\n        this.scrollRowIntoView(cell.row, false);\n\n        let preClickModeOn = (e.target && e.target.className === preClickClassName);\n        let column = this.columns[cell.cell];\n        let suppressActiveCellChangedEvent = !!(this._options.editable && column && column.editor && this._options.suppressActiveCellChangeOnEdit);\n        this.setActiveCellInternal(this.getCellNode(cell.row, cell.cell), null, preClickModeOn, suppressActiveCellChangedEvent, e);\n      }\n    }\n  }\n\n  protected handleContextMenu(e: Event & { target: HTMLElement; }) {\n    let cell = e.target.closest('.slick-cell');\n    if (!cell) {\n      return;\n    }\n\n    // are we editing this cell?\n    if (this.activeCellNode === cell && this.currentEditor !== null) {\n      return;\n    }\n\n    this.trigger(this.onContextMenu, {}, e);\n  }\n\n  protected handleDblClick(e: MouseEvent) {\n    let cell = this.getCellFromEvent(e);\n    if (!cell || (this.currentEditor !== null && this.activeRow == cell.row && this.activeCell == cell.cell)) {\n      return;\n    }\n\n    this.trigger(this.onDblClick, { row: cell.row, cell: cell.cell }, e);\n    if (e.defaultPrevented) {\n      return;\n    }\n\n    if (this._options.editable) {\n      this.gotoCell(cell.row, cell.cell, true, e);\n    }\n  }\n\n  protected handleHeaderMouseEnter(e: MouseEvent & { target: HTMLElement; }) {\n    const c = Utils.storage.get(e.target.closest('.slick-header-column'), 'column');\n    if (!c) {\n      return;\n    }\n    this.trigger(this.onHeaderMouseEnter, {\n      column: c,\n      grid: this\n    }, e);\n  }\n\n  protected handleHeaderMouseLeave(e: MouseEvent & { target: HTMLElement; }) {\n    const c = Utils.storage.get(e.target.closest('.slick-header-column'), 'column');\n    if (!c) {\n      return;\n    }\n    this.trigger(this.onHeaderMouseLeave, {\n      column: c,\n      grid: this\n    }, e);\n  }\n\n  protected handleHeaderRowMouseEnter(e: MouseEvent & { target: HTMLElement; }) {\n    const c = Utils.storage.get(e.target.closest('.slick-headerrow-column'), 'column');\n    if (!c) {\n      return;\n    }\n    this.trigger(this.onHeaderRowMouseEnter, {\n      column: c,\n      grid: this\n    }, e);\n  }\n\n  protected handleHeaderRowMouseLeave(e: MouseEvent & { target: HTMLElement; }) {\n    const c = Utils.storage.get(e.target.closest('.slick-headerrow-column'), 'column');\n    if (!c) {\n      return;\n    }\n    this.trigger(this.onHeaderRowMouseLeave, {\n      column: c,\n      grid: this\n    }, e);\n  }\n\n  protected handleHeaderContextMenu(e: MouseEvent & { target: HTMLElement; }) {\n    let header = e.target.closest('.slick-header-column');\n    let column = header && Utils.storage.get(header, 'column');\n    this.trigger(this.onHeaderContextMenu, { column: column }, e);\n  }\n\n  protected handleHeaderClick(e: MouseEvent & { target: HTMLElement; }) {\n    if (this.columnResizeDragging) {\n      return;\n    }\n\n    let header = e.target.closest('.slick-header-column');\n    let column = header && Utils.storage.get(header, 'column');\n    if (column) {\n      this.trigger(this.onHeaderClick, { column: column }, e);\n    }\n  }\n\n  protected handleFooterContextMenu(e: MouseEvent & { target: HTMLElement; }) {\n    let footer = e.target.closest('.slick-footerrow-column');\n    let column = footer && Utils.storage.get(footer, 'column');\n    this.trigger(this.onFooterContextMenu, { column: column }, e);\n  }\n\n  protected handleFooterClick(e: MouseEvent & { target: HTMLElement; }) {\n    let footer = e.target.closest('.slick-footerrow-column');\n    let column = footer && Utils.storage.get(footer, 'column');\n    this.trigger(this.onFooterClick, { column: column }, e);\n  }\n\n  protected handleCellMouseOver(e: MouseEvent & { target: HTMLElement; }) {\n    this.trigger(this.onMouseEnter, {}, e);\n  }\n\n  protected handleCellMouseOut(e: MouseEvent & { target: HTMLElement; }) {\n    this.trigger(this.onMouseLeave, {}, e);\n  }\n\n  protected cellExists(row: number, cell: number) {\n    return !(row < 0 || row >= this.getDataLength() || cell < 0 || cell >= this.columns.length);\n  }\n\n  /**\n   * Returns a hash containing row and cell indexes. Coordinates are relative to the top left corner of the grid beginning with the first row (not including the column headers).\n   * @param x An x coordinate.\n   * @param y A y coordinate.\n   */\n  getCellFromPoint(x: number, y: number) {\n    let row = this.getRowFromPosition(y);\n    let cell = 0;\n\n    let w = 0;\n    for (let i = 0; i < this.columns.length && w < x; i++) {\n      if (!this.columns[i] || this.columns[i].hidden) continue;\n\n      w += this.columns[i].width as number;\n      cell++;\n    }\n\n    if (cell < 0) {\n      cell = 0;\n    }\n\n    return { row, cell: (cell - 1) };\n  }\n\n  protected getCellFromNode(cellNode: HTMLElement) {\n    // read column number from .l<columnNumber> CSS class\n    let cls = /l\\d+/.exec(cellNode.className);\n    if (!cls) {\n      throw new Error(`SlickGrid getCellFromNode: cannot get cell - ${cellNode.className}`);\n    }\n    return parseInt(cls[0].substr(1, cls[0].length - 1), 10);\n  }\n\n  protected getRowFromNode(rowNode: HTMLElement): number | null {\n    for (let row in this.rowsCache) {\n      for (let i in this.rowsCache[row].rowNode) {\n        if (this.rowsCache[row].rowNode[i] === rowNode) {\n          return (row ? parseInt(row) : 0);\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get frozen (pinned) row offset\n   * @param {Number} row - grid row number\n   */\n  getFrozenRowOffset(row: number) {\n    //let offset = ( hasFrozenRows ) ? ( this._options.frozenBottom ) ? ( row >= actualFrozenRow ) ? ( h < viewportTopH ) ? ( actualFrozenRow * this._options.rowHeight ) : h : 0 : ( row >= actualFrozenRow ) ? frozenRowsHeight : 0 : 0; // WTF?\n    let offset = 0;\n    if (this.hasFrozenRows) {\n      if (this._options.frozenBottom) {\n        if (row >= this.actualFrozenRow) {\n          if (this.h < this.viewportTopH) {\n            offset = (this.actualFrozenRow * this._options.rowHeight);\n          } else {\n            offset = this.h;\n          }\n        } else {\n          offset = 0;\n        }\n      }\n      else {\n        if (row >= this.actualFrozenRow) {\n          offset = this.frozenRowsHeight;\n        } else {\n          offset = 0;\n        }\n      }\n    } else {\n      offset = 0;\n    }\n\n    return offset;\n  }\n\n  /**\n   * Returns a hash containing row and cell indexes from a standard W3C event.\n   * @param {*} event A standard W3C event.\n   */\n  getCellFromEvent(e: Event | SlickEventData_) {\n    if (e instanceof SlickEventData) {\n      e = e.getNativeEvent();\n    }\n\n    let targetEvent: any = (e as TouchEvent).touches ? (e as TouchEvent).touches[0] : e;\n    let row: number | null;\n    let cell: number | null;\n\n    let cellNode = (e as Event & { target: HTMLElement }).target.closest('.slick-cell');\n    if (!cellNode) {\n      return null;\n    }\n\n    row = this.getRowFromNode(cellNode.parentNode as HTMLElement);\n\n    if (this.hasFrozenRows) {\n      let rowOffset = 0;\n      let c = Utils.offset(Utils.parents(cellNode, '.grid-canvas')[0] as HTMLElement);\n      let isBottom = Utils.parents(cellNode, '.grid-canvas-bottom').length;\n\n      if (isBottom) {\n        rowOffset = (this._options.frozenBottom) ? Utils.height(this._canvasTopL) as number : this.frozenRowsHeight;\n      }\n\n      row = this.getCellFromPoint(targetEvent.clientX - c!.left, targetEvent.clientY - c!.top + rowOffset + document.documentElement.scrollTop).row;\n    }\n\n    cell = this.getCellFromNode(cellNode as HTMLElement);\n\n    if (row == null || cell == null) {\n      return null;\n    } else {\n      return { row, cell };\n    }\n  }\n\n  /**\n   * Returns an object representing information about a cell's position. All coordinates are absolute and take into consideration the visibility and scrolling position of all ancestors.\n   * @param row A row number.\n   * @param cell A column number.\n   */\n  getCellNodeBox(row: number, cell: number) {\n    if (!this.cellExists(row, cell)) {\n      return null;\n    }\n\n    let frozenRowOffset = this.getFrozenRowOffset(row);\n\n    let y1 = this.getRowTop(row) - frozenRowOffset;\n    let y2 = y1 + this._options.rowHeight - 1;\n    let x1 = 0;\n    for (let i = 0; i < cell; i++) {\n      if (!this.columns[i] || this.columns[i].hidden) continue;\n\n      x1 += (this.columns[i].width || 0);\n\n      if (this._options.frozenColumn == i) {\n        x1 = 0;\n      }\n    }\n    let x2 = x1 + (this.columns[cell]?.width || 0);\n\n    return {\n      top: y1,\n      left: x1,\n      bottom: y2,\n      right: x2\n    };\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // Cell switching\n\n  /**  Resets active cell. */\n  resetActiveCell() {\n    this.setActiveCellInternal(null, false);\n  }\n\n  /** @alias `setFocus` */\n  focus() {\n    this.setFocus();\n  }\n\n  protected setFocus() {\n    if (this.tabbingDirection == -1) {\n      this._focusSink.focus();\n    } else {\n      this._focusSink2.focus();\n    }\n  }\n\n  /** Scroll to a specific cell and make it into the view */\n  scrollCellIntoView(row: number, cell: number, doPaging?: boolean) {\n    this.scrollRowIntoView(row, doPaging);\n\n    if (cell <= this._options.frozenColumn) {\n      return;\n    }\n\n    let colspan = this.getColspan(row, cell);\n    this.internalScrollColumnIntoView(this.columnPosLeft[cell], this.columnPosRight[cell + (colspan > 1 ? colspan - 1 : 0)]);\n  }\n\n  protected internalScrollColumnIntoView(left: number, right: number) {\n    let scrollRight = this.scrollLeft + (Utils.width(this._viewportScrollContainerX) as number) - (this.viewportHasVScroll ? (this.scrollbarDimensions?.width ?? 0) : 0);\n\n    if (left < this.scrollLeft) {\n      this._viewportScrollContainerX.scrollLeft = left;\n      this.handleScroll();\n      this.render();\n    } else if (right > scrollRight) {\n      this._viewportScrollContainerX.scrollLeft = Math.min(left, right - this._viewportScrollContainerX.clientWidth);\n      this.handleScroll();\n      this.render();\n    }\n  }\n\n  /**\n   * Scroll to a specific column and show it into the viewport\n   * @param {Number} cell - cell column number\n   */\n  scrollColumnIntoView(cell: number) {\n    this.internalScrollColumnIntoView(this.columnPosLeft[cell], this.columnPosRight[cell]);\n  }\n\n  protected setActiveCellInternal(newCell: HTMLElement | null, opt_editMode?: boolean | null, preClickModeOn?: boolean | null, suppressActiveCellChangedEvent?: boolean, e?: Event | SlickEvent_) {\n    if (this.activeCellNode !== null) {\n      this.makeActiveCellNormal();\n      this.activeCellNode.classList.remove('active');\n      if (this.rowsCache[this.activeRow]) {\n        this.rowsCache[this.activeRow].rowNode.forEach((node) => node.classList.remove('active'));\n      }\n    }\n\n    // let activeCellChanged = (this.activeCellNode !== newCell);\n    this.activeCellNode = newCell;\n\n    if (this.activeCellNode != null) {\n      let activeCellOffset = Utils.offset(this.activeCellNode);\n      let rowOffset = Math.floor(Utils.offset(Utils.parents(this.activeCellNode, '.grid-canvas')[0] as HTMLElement)!.top);\n      let isBottom = Utils.parents(this.activeCellNode, '.grid-canvas-bottom').length;\n\n      if (this.hasFrozenRows && isBottom) {\n        rowOffset -= (this._options.frozenBottom)\n          ? Utils.height(this._canvasTopL) as number\n          : this.frozenRowsHeight;\n      }\n\n      let cell = this.getCellFromPoint(activeCellOffset!.left, Math.ceil(activeCellOffset!.top) - rowOffset);\n      this.activeRow = cell.row;\n      this.activeCell = this.activePosX = this.activeCell = this.activePosX = this.getCellFromNode(this.activeCellNode);\n\n      if (opt_editMode == null) {\n        opt_editMode = (this.activeRow == this.getDataLength()) || this._options.autoEdit;\n      }\n\n      if (this._options.showCellSelection) {\n        this.activeCellNode.classList.add('active');\n        if (this.rowsCache[this.activeRow]) {\n          this.rowsCache[this.activeRow].rowNode.forEach((node) => {\n            node.classList.add('active');\n          });\n        }\n      }\n\n      if (this._options.editable && opt_editMode && this.isCellPotentiallyEditable(this.activeRow, this.activeCell)) {\n        clearTimeout(this.h_editorLoader);\n\n        if (this._options.asyncEditorLoading) {\n          this.h_editorLoader = setTimeout(() => {\n            this.makeActiveCellEditable(undefined, preClickModeOn, e);\n          }, this._options.asyncEditorLoadDelay);\n        } else {\n          this.makeActiveCellEditable(undefined, preClickModeOn, e);\n        }\n      }\n    } else {\n      this.activeRow = this.activeCell = null as any;\n    }\n\n    // this optimisation causes trouble - MLeibman #329\n    //if (activeCellChanged) {\n    if (!suppressActiveCellChangedEvent) {\n      this.trigger<OnActiveCellChangedEventArgs | null>(this.onActiveCellChanged, this.getActiveCell() as OnActiveCellChangedEventArgs);\n    }\n    //}\n  }\n\n  protected clearTextSelection() {\n    if ((document as any).selection?.empty) {\n      try {\n        //IE fails here if selected element is not in dom\n        (document as any).selection.empty();\n      } catch (e) { }\n    } else if (window.getSelection) {\n      let sel = window.getSelection();\n      if (sel?.removeAllRanges) {\n        sel.removeAllRanges();\n      }\n    }\n  }\n\n  protected isCellPotentiallyEditable(row: number, cell: number) {\n    let dataLength = this.getDataLength();\n    // is the data for this row loaded?\n    if (row < dataLength && !this.getDataItem(row)) {\n      return false;\n    }\n\n    // are we in the Add New row? Can we create new from this cell?\n    if (this.columns[cell].cannotTriggerInsert && row >= dataLength) {\n      return false;\n    }\n\n    // does this cell have an editor?\n    if (!this.columns[cell] || this.columns[cell].hidden || !this.getEditor(row, cell)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected makeActiveCellNormal() {\n    if (!this.currentEditor) {\n      return;\n    }\n    this.trigger(this.onBeforeCellEditorDestroy, { editor: this.currentEditor });\n    this.currentEditor.destroy();\n    this.currentEditor = null;\n\n    if (this.activeCellNode) {\n      let d = this.getDataItem(this.activeRow);\n      this.activeCellNode.classList.remove('editable');\n      this.activeCellNode.classList.remove('invalid');\n      if (d) {\n        let column = this.columns[this.activeCell];\n        let formatter = this.getFormatter(this.activeRow, column);\n        let formatterResult = formatter(this.activeRow, this.activeCell, this.getDataItemValueForColumn(d, column), column, d, this);\n        this.applyFormatResultToCellNode(formatterResult, this.activeCellNode);\n        this.invalidatePostProcessingResults(this.activeRow);\n      }\n    }\n\n    // if there previously was text selected on a page (such as selected text in the edit cell just removed),\n    // IE can't set focus to anything else correctly\n    if (navigator.userAgent.toLowerCase().match(/msie/)) {\n      this.clearTextSelection();\n    }\n\n    this.getEditorLock().deactivate(this.editController);\n  }\n\n\n  editActiveCell(editor?: Editor, preClickModeOn?: boolean | null, e?: Event) {\n    this.makeActiveCellEditable(editor, preClickModeOn, e);\n  }\n\n  protected makeActiveCellEditable(editor?: Editor, preClickModeOn?: boolean | null, e?: Event | SlickEvent_) {\n    if (!this.activeCellNode) {\n      return;\n    }\n    if (!this._options.editable) {\n      throw new Error('SlickGrid makeActiveCellEditable : should never get called when this._options.editable is false');\n    }\n\n    // cancel pending async call if there is one\n    clearTimeout(this.h_editorLoader);\n\n    if (!this.isCellPotentiallyEditable(this.activeRow, this.activeCell)) {\n      return;\n    }\n\n    let columnDef = this.columns[this.activeCell];\n    let item = this.getDataItem(this.activeRow);\n\n    if (this.trigger(this.onBeforeEditCell, { row: this.activeRow, cell: this.activeCell, item: item, column: columnDef, target: 'grid' }).getReturnValue() === false) {\n      this.setFocus();\n      return;\n    }\n\n    this.getEditorLock().activate(this.editController);\n    this.activeCellNode.classList.add('editable');\n\n    let useEditor: any = editor || this.getEditor(this.activeRow, this.activeCell);\n\n    // don't clear the cell if a custom editor is passed through\n    if (!editor && !useEditor.suppressClearOnEdit) {\n      this.activeCellNode.innerHTML = '';\n    }\n\n    let metadata = (this.data as CustomDataView)?.getItemMetadata?.(this.activeRow);\n    metadata = metadata?.columns as any;\n    let columnMetaData = metadata && (metadata[columnDef.id] || metadata[this.activeCell]);\n\n    this.currentEditor = new useEditor({\n      grid: this,\n      gridPosition: this.absBox(this._container),\n      position: this.absBox(this.activeCellNode),\n      container: this.activeCellNode,\n      column: columnDef,\n      columnMetaData: columnMetaData,\n      item: item || {},\n      event: e,\n      commitChanges: this.commitEditAndSetFocus.bind(this),\n      cancelChanges: this.cancelEditAndSetFocus.bind(this)\n    });\n\n    if (item && this.currentEditor) {\n      this.currentEditor.loadValue(item);\n      if (preClickModeOn && this.currentEditor?.preClick) {\n        this.currentEditor.preClick();\n      }\n    }\n\n    this.serializedEditorValue = this.currentEditor?.serializeValue();\n\n    if (this.currentEditor?.position) {\n      this.handleActiveCellPositionChange();\n    }\n  }\n\n  protected commitEditAndSetFocus() {\n    // if the commit fails, it would do so due to a validation error\n    // if so, do not steal the focus from the editor\n    if (this.getEditorLock().commitCurrentEdit()) {\n      this.setFocus();\n      if (this._options.autoEdit && !this._options.autoCommitEdit) {\n        this.navigateDown();\n      }\n    }\n  }\n\n  protected cancelEditAndSetFocus() {\n    if (this.getEditorLock().cancelCurrentEdit()) {\n      this.setFocus();\n    }\n  }\n\n  protected absBox(elem: HTMLElement) {\n    let box = {\n      top: elem.offsetTop,\n      left: elem.offsetLeft,\n      bottom: 0,\n      right: 0,\n      width: elem.offsetWidth,\n      height: elem.offsetWidth,\n      visible: true\n    };\n    box.bottom = box.top + box.height;\n    box.right = box.left + box.width;\n\n    // walk up the tree\n    let offsetParent = elem.offsetParent;\n    while ((elem = elem.parentNode as HTMLElement) !== document.body) {\n      if (!elem || !elem.parentNode) {\n        break;\n      }\n\n      const styles = getComputedStyle(elem);\n      if (box.visible && elem.scrollHeight !== elem.offsetHeight && styles['overflowY'] !== 'visible') {\n        box.visible = box.bottom > elem.scrollTop && box.top < elem.scrollTop + elem.clientHeight;\n      }\n\n      if (box.visible && elem.scrollWidth !== elem.offsetWidth && styles['overflowX'] !== 'visible') {\n        box.visible = box.right > elem.scrollLeft && box.left < elem.scrollLeft + elem.clientWidth;\n      }\n\n      box.left -= elem.scrollLeft;\n      box.top -= elem.scrollTop;\n\n      if (elem === offsetParent) {\n        box.left += elem.offsetLeft;\n        box.top += elem.offsetTop;\n        offsetParent = elem.offsetParent;\n      }\n\n      box.bottom = box.top + box.height;\n      box.right = box.left + box.width;\n    }\n\n    return box;\n  }\n\n  /** Returns an object representing information about the active cell's position. All coordinates are absolute and take into consideration the visibility and scrolling position of all ancestors. */\n  getActiveCellPosition() {\n    return this.absBox(this.activeCellNode as HTMLElement);\n  }\n\n  /** Get the Grid Position */\n  getGridPosition() {\n    return this.absBox(this._container);\n  }\n\n  protected handleActiveCellPositionChange() {\n    if (!this.activeCellNode) {\n      return;\n    }\n\n    this.trigger(this.onActiveCellPositionChanged, {});\n\n    if (this.currentEditor) {\n      let cellBox = this.getActiveCellPosition();\n      if (this.currentEditor.show && this.currentEditor.hide) {\n        if (!cellBox.visible) {\n          this.currentEditor.hide();\n        } else {\n          this.currentEditor.show();\n        }\n      }\n\n      if (this.currentEditor.position) {\n        this.currentEditor.position(cellBox);\n      }\n    }\n  }\n\n  /** Returns the active cell editor. If there is no actively edited cell, null is returned.   */\n  getCellEditor() {\n    return this.currentEditor;\n  }\n\n  /**\n   * Returns an object representing the coordinates of the currently active cell:\n   * @example\t`{ row: activeRow, cell: activeCell }`\n   */\n  getActiveCell() {\n    if (!this.activeCellNode) {\n      return null;\n    }\n    return { row: this.activeRow, cell: this.activeCell };\n  }\n\n  /** Returns the DOM element containing the currently active cell. If no cell is active, null is returned. */\n  getActiveCellNode() {\n    return this.activeCellNode;\n  }\n\n  //This get/set methods are used for keeping text-selection. These don't consider IE because they don't loose text-selection.\n  //Fix for firefox selection. See https://github.com/mleibman/SlickGrid/pull/746/files\n  protected getTextSelection() {\n    let textSelection: Range | null = null;\n    if (window.getSelection) {\n      let selection = window.getSelection();\n      if ((selection?.rangeCount ?? 0) > 0) {\n        textSelection = selection!.getRangeAt(0);\n      }\n    }\n    return textSelection;\n  }\n\n  protected setTextSelection(selection: Range) {\n    if (window.getSelection && selection) {\n      let target = window.getSelection();\n      if (target) {\n        target.removeAllRanges();\n        target.addRange(selection);\n      }\n    }\n  }\n\n  /**\n   * Scroll to a specific row and make it into the view\n   * @param {Number} row - grid row number\n   * @param {Boolean} doPaging - scroll when pagination is enabled\n   */\n  scrollRowIntoView(row: number, doPaging?: boolean) {\n    if (!this.hasFrozenRows ||\n      (!this._options.frozenBottom && row > this.actualFrozenRow - 1) ||\n      (this._options.frozenBottom && row < this.actualFrozenRow - 1)) {\n\n      let viewportScrollH = Utils.height(this._viewportScrollContainerY) as number;\n\n      // if frozen row on top\n      // subtract number of frozen row\n      let rowNumber = (this.hasFrozenRows && !this._options.frozenBottom ? row - this._options.frozenRow : row);\n\n      let rowAtTop = rowNumber * this._options.rowHeight;\n      let rowAtBottom = (rowNumber + 1) * this._options.rowHeight\n        - viewportScrollH\n        + (this.viewportHasHScroll ? (this.scrollbarDimensions?.height ?? 0) : 0);\n\n      // need to page down?\n      if ((rowNumber + 1) * this._options.rowHeight > this.scrollTop + viewportScrollH + this.offset) {\n        this.scrollTo(doPaging ? rowAtTop : rowAtBottom);\n        this.render();\n      }\n      // or page up?\n      else if (rowNumber * this._options.rowHeight < this.scrollTop + this.offset) {\n        this.scrollTo(doPaging ? rowAtBottom : rowAtTop);\n        this.render();\n      }\n    }\n  }\n\n  /**\n   * Scroll to the top row and make it into the view\n   * @param {Number} row - grid row number\n   */\n  scrollRowToTop(row: number) {\n    this.scrollTo(row * this._options.rowHeight as number);\n    this.render();\n  }\n\n  protected scrollPage(dir: number) {\n    let deltaRows = dir * this.numVisibleRows;\n    /// First fully visible row crosses the line with\n    /// y == bottomOfTopmostFullyVisibleRow\n    let bottomOfTopmostFullyVisibleRow = this.scrollTop + this._options.rowHeight - 1;\n    this.scrollTo((this.getRowFromPosition(bottomOfTopmostFullyVisibleRow) + deltaRows) * this._options.rowHeight);\n    this.render();\n\n    if (this._options.enableCellNavigation && this.activeRow != null) {\n      let row = this.activeRow + deltaRows;\n      let dataLengthIncludingAddNew = this.getDataLengthIncludingAddNew();\n      if (row >= dataLengthIncludingAddNew) {\n        row = dataLengthIncludingAddNew - 1;\n      }\n      if (row < 0) {\n        row = 0;\n      }\n\n      let cell = 0;\n      let prevCell: number | null = null;\n      let prevActivePosX = this.activePosX;\n      while (cell <= this.activePosX) {\n        if (this.canCellBeActive(row, cell)) {\n          prevCell = cell;\n        }\n        cell += this.getColspan(row, cell);\n      }\n\n      if (prevCell !== null) {\n        this.setActiveCellInternal(this.getCellNode(row, prevCell));\n        this.activePosX = prevActivePosX;\n      } else {\n        this.resetActiveCell();\n      }\n    }\n  }\n\n  /** Navigate (scroll) by a page down */\n  navigatePageDown() {\n    this.scrollPage(1);\n  }\n\n  /** Navigate (scroll) by a page up */\n  navigatePageUp() {\n    this.scrollPage(-1);\n  }\n\n  /** Navigate to the top of the grid */\n  navigateTop() {\n    this.navigateToRow(0);\n  }\n\n  /** Navigate to the bottom of the grid */\n  navigateBottom() {\n    this.navigateToRow(this.getDataLength() - 1);\n  }\n\n  protected navigateToRow(row: number) {\n    let num_rows = this.getDataLength();\n    if (!num_rows) { return true; }\n\n    if (row < 0) {\n      row = 0;\n    } else if (row >= num_rows) {\n      row = num_rows - 1;\n    }\n\n    this.scrollCellIntoView(row, 0, true);\n    if (this._options.enableCellNavigation && this.activeRow != null) {\n      let cell = 0;\n      let prevCell: number | null = null;\n      let prevActivePosX = this.activePosX;\n      while (cell <= this.activePosX) {\n        if (this.canCellBeActive(row, cell)) {\n          prevCell = cell;\n        }\n        cell += this.getColspan(row, cell);\n      }\n\n      if (prevCell !== null) {\n        this.setActiveCellInternal(this.getCellNode(row, prevCell));\n        this.activePosX = prevActivePosX;\n      } else {\n        this.resetActiveCell();\n      }\n    }\n    return true;\n  }\n\n  protected getColspan(row: number, cell: number): number {\n    let metadata = (this.data as CustomDataView)?.getItemMetadata?.(row);\n    if (!metadata || !metadata.columns) {\n      return 1;\n    }\n\n    let columnData = metadata.columns[this.columns[cell].id] || metadata.columns[cell];\n    let colspan = (columnData && columnData.colspan);\n    if (colspan === '*') {\n      colspan = this.columns.length - cell;\n    } else {\n      colspan = colspan || 1;\n    }\n\n    return colspan as number;\n  }\n\n  protected findFirstFocusableCell(row: number) {\n    let cell = 0;\n    while (cell < this.columns.length) {\n      if (this.canCellBeActive(row, cell)) {\n        return cell;\n      }\n      cell += this.getColspan(row, cell);\n    }\n    return null;\n  }\n\n  protected findLastFocusableCell(row: number) {\n    let cell = 0;\n    let lastFocusableCell: number | null = null;\n    while (cell < this.columns.length) {\n      if (this.canCellBeActive(row, cell)) {\n        lastFocusableCell = cell;\n      }\n      cell += this.getColspan(row, cell);\n    }\n    return lastFocusableCell;\n  }\n\n  protected gotoRight(row: number, cell: number, _posX?: number) {\n    if (cell >= this.columns.length) {\n      return null;\n    }\n\n    do {\n      cell += this.getColspan(row, cell);\n    }\n    while (cell < this.columns.length && !this.canCellBeActive(row, cell));\n\n    if (cell < this.columns.length) {\n      return {\n        row,\n        cell,\n        posX: cell\n      };\n    }\n    return null;\n  }\n\n  protected gotoLeft(row: number, cell: number, _posX?: number) {\n    if (cell <= 0) {\n      return null;\n    }\n\n    let firstFocusableCell = this.findFirstFocusableCell(row);\n    if (firstFocusableCell === null || firstFocusableCell >= cell) {\n      return null;\n    }\n\n    let prev = {\n      row,\n      cell: firstFocusableCell,\n      posX: firstFocusableCell\n    };\n    let pos;\n    while (true) {\n      pos = this.gotoRight(prev.row, prev.cell, prev.posX);\n      if (!pos) {\n        return null;\n      }\n      if (pos.cell >= cell) {\n        return prev;\n      }\n      prev = pos;\n    }\n  }\n\n  protected gotoDown(row: number, cell: number, posX: number) {\n    let prevCell;\n    let dataLengthIncludingAddNew = this.getDataLengthIncludingAddNew();\n    while (true) {\n      if (++row >= dataLengthIncludingAddNew) {\n        return null;\n      }\n\n      prevCell = cell = 0;\n      while (cell <= posX) {\n        prevCell = cell;\n        cell += this.getColspan(row, cell);\n      }\n\n      if (this.canCellBeActive(row, prevCell)) {\n        return {\n          row,\n          cell: prevCell,\n          posX\n        };\n      }\n    }\n  }\n\n  protected gotoUp(row: number, cell: number, posX: number) {\n    let prevCell;\n    while (true) {\n      if (--row < 0) {\n        return null;\n      }\n\n      prevCell = cell = 0;\n      while (cell <= posX) {\n        prevCell = cell;\n        cell += this.getColspan(row, cell);\n      }\n\n      if (this.canCellBeActive(row, prevCell)) {\n        return {\n          row,\n          cell: prevCell,\n          posX\n        };\n      }\n    }\n  }\n\n  protected gotoNext(row: number, cell: number, posX?: number) {\n    if (row == null && cell == null) {\n      row = cell = posX = 0;\n      if (this.canCellBeActive(row, cell)) {\n        return {\n          row,\n          cell,\n          posX: cell\n        };\n      }\n    }\n\n    let pos = this.gotoRight(row, cell, posX);\n    if (pos) {\n      return pos;\n    }\n\n    let firstFocusableCell: number | null = null;\n    let dataLengthIncludingAddNew = this.getDataLengthIncludingAddNew();\n\n    // if at last row, cycle through columns rather than get stuck in the last one\n    if (row === dataLengthIncludingAddNew - 1) { row--; }\n\n    while (++row < dataLengthIncludingAddNew) {\n      firstFocusableCell = this.findFirstFocusableCell(row);\n      if (firstFocusableCell !== null) {\n        return {\n          row,\n          cell: firstFocusableCell,\n          posX: firstFocusableCell\n        };\n      }\n    }\n    return null;\n  }\n\n  protected gotoPrev(row: number, cell: number, posX?: number) {\n    if (row == null && cell == null) {\n      row = this.getDataLengthIncludingAddNew() - 1;\n      cell = posX = this.columns.length - 1;\n      if (this.canCellBeActive(row, cell)) {\n        return {\n          row,\n          cell,\n          posX: cell\n        };\n      }\n    }\n\n    let pos;\n    let lastSelectableCell;\n    while (!pos) {\n      pos = this.gotoLeft(row, cell, posX);\n      if (pos) {\n        break;\n      }\n      if (--row < 0) {\n        return null;\n      }\n\n      cell = 0;\n      lastSelectableCell = this.findLastFocusableCell(row);\n      if (lastSelectableCell !== null) {\n        pos = {\n          row,\n          cell: lastSelectableCell,\n          posX: lastSelectableCell\n        };\n      }\n    }\n    return pos;\n  }\n\n  protected gotoRowStart(row: number, _cell: number, _posX?: number) {\n    let newCell = this.findFirstFocusableCell(row);\n    if (newCell === null) return null;\n\n    return {\n      row,\n      cell: newCell,\n      posX: newCell\n    };\n  }\n\n  protected gotoRowEnd(row: number, _cell: number, _posX?: number) {\n    let newCell = this.findLastFocusableCell(row);\n    if (newCell === null) return null;\n\n    return {\n      row,\n      cell: newCell,\n      posX: newCell\n    };\n  }\n\n  /** Switches the active cell one cell right skipping unselectable cells. Unline navigateNext, navigateRight stops at the last cell of the row. Returns a boolean saying whether it was able to complete or not. */\n  navigateRight() {\n    return this.navigate('right');\n  }\n\n  /** Switches the active cell one cell left skipping unselectable cells. Unline navigatePrev, navigateLeft stops at the first cell of the row. Returns a boolean saying whether it was able to complete or not. */\n  navigateLeft() {\n    return this.navigate('left');\n  }\n\n  /** Switches the active cell one row down skipping unselectable cells. Returns a boolean saying whether it was able to complete or not. */\n  navigateDown() {\n    return this.navigate('down');\n  }\n\n  /** Switches the active cell one row up skipping unselectable cells. Returns a boolean saying whether it was able to complete or not. */\n  navigateUp() {\n    return this.navigate('up');\n  }\n\n  /** Tabs over active cell to the next selectable cell. Returns a boolean saying whether it was able to complete or not. */\n  navigateNext() {\n    return this.navigate('next');\n  }\n\n  /** Tabs over active cell to the previous selectable cell. Returns a boolean saying whether it was able to complete or not. */\n  navigatePrev() {\n    return this.navigate('prev');\n  }\n\n  /** Navigate to the start row in the grid */\n  navigateRowStart() {\n    return this.navigate('home');\n  }\n\n  /** Navigate to the end row in the grid */\n  navigateRowEnd() {\n    return this.navigate('end');\n  }\n\n  /**\n   * @param {string} dir Navigation direction.\n   * @return {boolean} Whether navigation resulted in a change of active cell.\n   */\n  protected navigate(dir: 'up' | 'down' | 'left' | 'right' | 'prev' | 'next' | 'home' | 'end') {\n    if (!this._options.enableCellNavigation) {\n      return false;\n    }\n\n    if (!this.activeCellNode && dir !== 'prev' && dir !== 'next') {\n      return false;\n    }\n\n    if (!this.getEditorLock().commitCurrentEdit()) {\n      return true;\n    }\n    this.setFocus();\n\n    let tabbingDirections = {\n      'up': -1,\n      'down': 1,\n      'left': -1,\n      'right': 1,\n      'prev': -1,\n      'next': 1,\n      'home': -1,\n      'end': 1\n    };\n    this.tabbingDirection = tabbingDirections[dir];\n\n    let stepFunctions = {\n      'up': this.gotoUp,\n      'down': this.gotoDown,\n      'left': this.gotoLeft,\n      'right': this.gotoRight,\n      'prev': this.gotoPrev,\n      'next': this.gotoNext,\n      'home': this.gotoRowStart,\n      'end': this.gotoRowEnd\n    };\n    let stepFn = stepFunctions[dir];\n    let pos = stepFn.call(this, this.activeRow, this.activeCell, this.activePosX);\n    if (pos) {\n      if (this.hasFrozenRows && this._options.frozenBottom && pos.row == this.getDataLength()) {\n        return;\n      }\n\n      let isAddNewRow = (pos.row == this.getDataLength());\n\n      if ((!this._options.frozenBottom && pos.row >= this.actualFrozenRow)\n        || (this._options.frozenBottom && pos.row < this.actualFrozenRow)\n      ) {\n        this.scrollCellIntoView(pos.row, pos.cell, !isAddNewRow && this._options.emulatePagingWhenScrolling);\n      }\n      this.setActiveCellInternal(this.getCellNode(pos.row, pos.cell));\n      this.activePosX = pos.posX;\n      return true;\n    } else {\n      this.setActiveCellInternal(this.getCellNode(this.activeRow, this.activeCell));\n      return false;\n    }\n  }\n\n  /**\n   * Returns a DOM element containing a cell at a given row and cell.\n   * @param row A row index.\n   * @param cell A column index.\n   */\n  getCellNode(row: number, cell: number): HTMLElement | null {\n    if (this.rowsCache[row]) {\n      this.ensureCellNodesInRowsCache(row);\n      try {\n        if (this.rowsCache[row].cellNodesByColumnIdx.length > cell) {\n          return this.rowsCache[row].cellNodesByColumnIdx[cell];\n        }\n        else {\n          return null;\n        }\n      } catch (e) {\n        return this.rowsCache[row].cellNodesByColumnIdx[cell];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Sets an active cell.\n   * @param {number} row - A row index.\n   * @param {number} cell - A column index.\n   * @param {boolean} [optionEditMode] Option Edit Mode is Auto-Edit?\n   * @param {boolean} [preClickModeOn] Pre-Click Mode is Enabled?\n   * @param {boolean} [suppressActiveCellChangedEvent] Are we suppressing Active Cell Changed Event (defaults to false)\n   */\n  setActiveCell(row: number, cell: number, opt_editMode?: boolean, preClickModeOn?: boolean, suppressActiveCellChangedEvent?: boolean) {\n    if (!this.initialized) { return; }\n    if (row > this.getDataLength() || row < 0 || cell >= this.columns.length || cell < 0) {\n      return;\n    }\n\n    if (!this._options.enableCellNavigation) {\n      return;\n    }\n\n    this.scrollCellIntoView(row, cell, false);\n    this.setActiveCellInternal(this.getCellNode(row, cell), opt_editMode, preClickModeOn, suppressActiveCellChangedEvent);\n  }\n\n  /**\n   * Sets an active cell.\n   * @param {number} row - A row index.\n   * @param {number} cell - A column index.\n   * @param {boolean} [suppressScrollIntoView] - optionally suppress the ScrollIntoView that happens by default (defaults to false)\n   */\n  setActiveRow(row: number, cell: number, suppressScrollIntoView?: boolean) {\n    if (!this.initialized) { return; }\n    if (row > this.getDataLength() || row < 0 || cell >= this.columns.length || cell < 0) {\n      return;\n    }\n\n    this.activeRow = row;\n    if (!suppressScrollIntoView) {\n      this.scrollCellIntoView(row, cell || 0, false);\n    }\n  }\n\n  /**\n   * Returns true if you can click on a given cell and make it the active focus.\n   * @param {number} row A row index.\n   * @param {number} col A column index.\n   */\n  canCellBeActive(row: number, cell: number) {\n    if (!this.options.enableCellNavigation || row >= this.getDataLengthIncludingAddNew() ||\n      row < 0 || cell >= this.columns.length || cell < 0) {\n      return false;\n    }\n\n    if (!this.columns[cell] || this.columns[cell].hidden) {\n      return false;\n    }\n\n    let rowMetadata = (this.data as CustomDataView)?.getItemMetadata?.(row);\n    if (rowMetadata && rowMetadata.focusable !== undefined) {\n      return !!rowMetadata.focusable;\n    }\n\n    let columnMetadata = rowMetadata?.columns;\n    if (columnMetadata && columnMetadata[this.columns[cell].id] && columnMetadata[this.columns[cell].id].focusable !== undefined) {\n      return !!columnMetadata[this.columns[cell].id].focusable;\n    }\n    if (columnMetadata && columnMetadata[cell] && columnMetadata[cell].focusable !== undefined) {\n      return !!columnMetadata[cell].focusable;\n    }\n\n    return !!(this.columns[cell].focusable);\n  }\n\n  /**\n   * Returns true if selecting the row causes this particular cell to have the selectedCellCssClass applied to it. A cell can be selected if it exists and if it isn't on an empty / \"Add New\" row and if it is not marked as \"unselectable\" in the column definition.\n   * @param {number} row A row index.\n   * @param {number} col A column index.\n   */\n  canCellBeSelected(row: number, cell: number) {\n    if (row >= this.getDataLength() || row < 0 || cell >= this.columns.length || cell < 0) {\n      return false;\n    }\n\n    if (!this.columns[cell] || this.columns[cell].hidden) {\n      return false;\n    }\n\n    let rowMetadata = (this.data as CustomDataView)?.getItemMetadata?.(row);\n    if (rowMetadata && rowMetadata.selectable !== undefined) {\n      return !!rowMetadata.selectable;\n    }\n\n    let columnMetadata = rowMetadata?.columns && (rowMetadata.columns[this.columns[cell].id] || rowMetadata.columns[cell]);\n    if (columnMetadata && columnMetadata.selectable !== undefined) {\n      return !!columnMetadata.selectable;\n    }\n\n    return !!this.columns[cell].selectable;\n  }\n\n  /**\n   * Accepts a row integer and a cell integer, scrolling the view to the row where row is its row index, and cell is its cell index. Optionally accepts a forceEdit boolean which, if true, will attempt to initiate the edit dialogue for the field in the specified cell.\n   * Unlike setActiveCell, this scrolls the row into the viewport and sets the keyboard focus.\n   * @param {Number} row A row index.\n   * @param {Number} cell A column index.\n   * @param {Boolean} [forceEdit] If true, will attempt to initiate the edit dialogue for the field in the specified cell.\n   */\n  gotoCell(row: number, cell: number, forceEdit?: boolean, e?: Event | SlickEvent_) {\n    if (!this.initialized) { return; }\n    if (!this.canCellBeActive(row, cell)) {\n      return;\n    }\n\n    if (!this.getEditorLock().commitCurrentEdit()) {\n      return;\n    }\n\n    this.scrollCellIntoView(row, cell, false);\n\n    let newCell = this.getCellNode(row, cell);\n\n    // if selecting the 'add new' row, start editing right away\n    let column = this.columns[cell];\n    let suppressActiveCellChangedEvent = !!(this._options.editable && column?.editor && this._options.suppressActiveCellChangeOnEdit);\n    this.setActiveCellInternal(newCell, (forceEdit || (row === this.getDataLength()) || this._options.autoEdit), null, suppressActiveCellChangedEvent, e);\n\n    // if no editor was created, set the focus back on the grid\n    if (!this.currentEditor) {\n      this.setFocus();\n    }\n  }\n\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // IEditor implementation for the editor lock\n\n  protected commitCurrentEdit() {\n    const self = this as SlickGrid;\n    let item = self.getDataItem(self.activeRow);\n    let column = self.columns[self.activeCell];\n\n    if (self.currentEditor) {\n      if (self.currentEditor.isValueChanged()) {\n        const validationResults = self.currentEditor.validate();\n\n        if (validationResults.valid) {\n          const row = self.activeRow;\n          const cell = self.activeCell;\n          const editor = self.currentEditor;\n          const serializedValue = self.currentEditor.serializeValue();\n          const prevSerializedValue = self.serializedEditorValue;\n\n          if (self.activeRow < self.getDataLength()) {\n            const editCommand = {\n              row,\n              cell,\n              editor,\n              serializedValue,\n              prevSerializedValue,\n              execute: () => {\n                editor.applyValue(item, serializedValue);\n                self.updateRow(row);\n                self.trigger(self.onCellChange, { command: 'execute', row, cell, item, column });\n              },\n              undo: () => {\n                editor.applyValue(item, prevSerializedValue);\n                self.updateRow(row);\n                self.trigger(self.onCellChange, { command: 'undo', row, cell, item, column, });\n              }\n            };\n\n            if (self.options.editCommandHandler) {\n              self.makeActiveCellNormal();\n              self.options.editCommandHandler(item, column, editCommand);\n            } else {\n              editCommand.execute();\n              self.makeActiveCellNormal();\n            }\n\n          } else {\n            const newItem = {};\n            self.currentEditor.applyValue(newItem, self.currentEditor.serializeValue());\n            self.makeActiveCellNormal();\n            self.trigger(self.onAddNewRow, { item: newItem, column: column });\n          }\n\n          // check whether the lock has been re-acquired by event handlers\n          return !self.getEditorLock().isActive();\n        } else {\n          // Re-add the CSS class to trigger transitions, if any.\n          if (self.activeCellNode) {\n            self.activeCellNode.classList.remove('invalid');\n            Utils.width(self.activeCellNode);// force layout\n            self.activeCellNode.classList.add('invalid');\n          }\n\n          self.trigger(self.onValidationError, {\n            editor: self.currentEditor,\n            cellNode: self.activeCellNode,\n            validationResults: validationResults,\n            row: self.activeRow,\n            cell: self.activeCell,\n            column: column\n          });\n\n          self.currentEditor.focus();\n          return false;\n        }\n      }\n\n      self.makeActiveCellNormal();\n    }\n    return true;\n  }\n\n  protected cancelCurrentEdit() {\n    this.makeActiveCellNormal();\n    return true;\n  }\n\n  protected rowsToRanges(rows: number[]) {\n    let ranges: SlickRange_[] = [];\n    let lastCell = this.columns.length - 1;\n    for (let i = 0; i < rows.length; i++) {\n      ranges.push(new SlickRange(rows[i], 0, rows[i], lastCell));\n    }\n    return ranges;\n  }\n\n  /** Returns an array of row indices corresponding to the currently selected rows. */\n  getSelectedRows() {\n    if (!this.selectionModel) {\n      throw new Error('SlickGrid Selection model is not set');\n    }\n    return this.selectedRows.slice(0);\n  }\n\n  /**\n   * Accepts an array of row indices and applies the current selectedCellCssClass to the cells in the row, respecting whether cells have been flagged as selectable.\n   * @param {Array<number>} rowsArray - an array of row numbers.\n   * @param {String} [caller] - an optional string to identify who called the method\n   */\n  setSelectedRows(rows: number[], caller?: string) {\n    if (!this.selectionModel) {\n      throw new Error('SlickGrid Selection model is not set');\n    }\n    if (this && this.getEditorLock && !this.getEditorLock().isActive()) {\n      this.selectionModel.setSelectedRanges(this.rowsToRanges(rows), caller || 'SlickGrid.setSelectedRows');\n    }\n  }\n\n  /** html sanitizer to avoid scripting attack */\n  sanitizeHtmlString(dirtyHtml: string, suppressLogging?: boolean) {\n    if (!this._options.sanitizer || typeof dirtyHtml !== 'string') {\n      return dirtyHtml;\n    }\n\n    let cleanHtml = this._options.sanitizer(dirtyHtml);\n\n    if (!suppressLogging && this._options.logSanitizedHtml && this.logMessageCount <= this.logMessageMaxCount && cleanHtml !== dirtyHtml) {\n      console.log(`sanitizer altered html: ${dirtyHtml} --> ${cleanHtml}`);\n      if (this.logMessageCount === this.logMessageMaxCount) {\n        console.log(`sanitizer: silencing messages after first ${this.logMessageMaxCount}`);\n      }\n      this.logMessageCount++;\n    }\n    return cleanHtml;\n  }\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(Slick, {\n    Grid: SlickGrid,\n  });\n}\n", "import { BindingEventService as BindingEventService_, Event as SlickEvent_, Utils as Utils_ } from '../slick.core';\nimport type { Column, ColumnPickerOption, DOMMouseOrTouchEvent, GridOption } from '../models/index';\nimport type { SlickGrid } from '../slick.grid';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n/***\n * A control to add a Column Picker (right+click on any column header to reveal the column picker)\n * NOTE: this is the old 'complex' column pciker that hides columns by removing them from the grid\n *        for a more modern version that uses the column.hidden property and is a lot simpler, use slick.columnmenu.js\n *\n * USAGE:\n *\n * Add the slick.columnpicker.(js|css) files and register it with the grid.\n *\n * Available options, by defining a columnPicker object:\n *\n *  let options = {\n *    enableCellNavigation: true,\n *    columnPicker: {\n *      columnTitle: \"Columns\",                 // default to empty string\n *\n *      // the last 2 checkboxes titles\n *      hideForceFitButton: false,              // show/hide checkbox near the end \"Force Fit Columns\" (default:false)\n *      hideSyncResizeButton: false,            // show/hide checkbox near the end \"Synchronous Resize\" (default:false)\n *      forceFitTitle: \"Force fit columns\",     // default to \"Force fit columns\"\n *      headerColumnValueExtractor: \"Extract the column label\" // default to column.name\n *      syncResizeTitle: \"Synchronous resize\",  // default to \"Synchronous resize\"\n *    }\n *  };\n */\n\nexport class SlickColumnPicker {\n  protected _gridUid: string;\n  protected _columnTitleElm!: HTMLElement;\n  protected _listElm!: HTMLElement;\n  protected _menuElm!: HTMLElement;\n  protected _columnCheckboxes: HTMLInputElement[] = [];\n  protected _bindingEventService = new BindingEventService();\n  protected _gridOptions: GridOption;\n  protected _defaults: ColumnPickerOption = {\n    fadeSpeed: 250,\n\n    // the last 2 checkboxes titles\n    hideForceFitButton: false,\n    hideSyncResizeButton: false,\n    forceFitTitle: 'Force fit columns',\n    syncResizeTitle: 'Synchronous resize',\n    headerColumnValueExtractor: (columnDef: Column) => columnDef.name || ''\n  };\n\n  // public events\n  onColumnsChanged = new SlickEvent<{ columnId: number | string; showing: boolean; allColumns: Column[]; columns: Column[]; grid: SlickGrid; }>();\n\n  constructor(protected columns: Column[], protected readonly grid: SlickGrid, gridOptions: GridOption) {\n    this._gridUid = grid.getUID();\n    this._gridOptions = Utils.extend({}, this._defaults, gridOptions);\n    this.init(this.grid);\n  }\n\n  init(grid: SlickGrid) {\n    grid.onHeaderContextMenu.subscribe(this.handleHeaderContextMenu.bind(this));\n    grid.onColumnsReordered.subscribe(this.updateColumnOrder.bind(this));\n\n    this._menuElm = document.createElement('div');\n    this._menuElm.className = `slick-columnpicker ${this._gridUid}`;\n    this._menuElm.style.display = 'none';\n    document.body.appendChild(this._menuElm);\n\n    const buttonElm = document.createElement('button');\n    buttonElm.type = 'button';\n    buttonElm.className = 'close';\n    buttonElm.dataset.dismiss = 'slick-columnpicker';\n    buttonElm.ariaLabel = 'Close';\n\n    const spanCloseElm = document.createElement('span');\n    spanCloseElm.className = 'close';\n    spanCloseElm.ariaHidden = 'true';\n    spanCloseElm.innerHTML = '&times;';\n    buttonElm.appendChild(spanCloseElm);\n    this._menuElm.appendChild(buttonElm);\n\n    // user could pass a title on top of the columns list\n    if (this._gridOptions.columnPickerTitle || (this._gridOptions.columnPicker && this._gridOptions.columnPicker.columnTitle)) {\n      const columnTitle = this._gridOptions.columnPickerTitle || this._gridOptions.columnPicker?.columnTitle;\n      this._columnTitleElm = document.createElement('div');\n      this._columnTitleElm.className = 'slick-gridmenu-custom';\n      this._columnTitleElm.textContent = columnTitle || '';\n      this._menuElm.appendChild(this._columnTitleElm);\n    }\n\n    this._bindingEventService.bind(this._menuElm, 'click', this.updateColumn.bind(this) as EventListener);\n\n    this._listElm = document.createElement('span');\n    this._listElm.className = 'slick-columnpicker-list';\n\n    // Hide the menu on outside click.\n    this._bindingEventService.bind(document.body, 'mousedown', this.handleBodyMouseDown.bind(this) as EventListener);\n\n    // destroy the picker if user leaves the page\n    this._bindingEventService.bind(document.body, 'beforeunload', this.destroy.bind(this));\n  }\n\n  destroy() {\n    this.grid.onHeaderContextMenu.unsubscribe(this.handleHeaderContextMenu.bind(this));\n    this.grid.onColumnsReordered.unsubscribe(this.updateColumnOrder.bind(this));\n    this._bindingEventService.unbindAll();\n    this._listElm?.remove();\n    this._menuElm?.remove();\n  }\n\n  protected handleBodyMouseDown(e: DOMMouseOrTouchEvent<HTMLElement>) {\n    if ((this._menuElm !== e.target && !(this._menuElm && this._menuElm.contains(e.target))) || e.target.className === 'close') {\n      this._menuElm.setAttribute('aria-expanded', 'false');\n      this._menuElm.style.display = 'none';\n    }\n  }\n\n  protected handleHeaderContextMenu(e: DOMMouseOrTouchEvent<HTMLDivElement>) {\n    e.preventDefault();\n    Utils.emptyElement(this._listElm);\n    this.updateColumnOrder();\n    this._columnCheckboxes = [];\n\n    let columnId, columnLabel, excludeCssClass;\n    for (let i = 0; i < this.columns.length; i++) {\n      columnId = this.columns[i].id;\n      excludeCssClass = this.columns[i].excludeFromColumnPicker ? 'hidden' : '';\n\n      const liElm = document.createElement('li');\n      liElm.className = excludeCssClass;\n      liElm.ariaLabel = this.columns[i]?.name || '';\n\n      const checkboxElm = document.createElement('input');\n      checkboxElm.type = 'checkbox';\n      checkboxElm.id = `${this._gridUid}colpicker-${columnId}`;\n      checkboxElm.dataset.columnid = String(this.columns[i].id);\n      liElm.appendChild(checkboxElm);\n\n      this._columnCheckboxes.push(checkboxElm);\n\n      if (this.grid.getColumnIndex(columnId) != null && !this.columns[i].hidden) {\n        checkboxElm.checked = true;\n      }\n\n      if (this._gridOptions && this._gridOptions.columnPicker && this._gridOptions.columnPicker.headerColumnValueExtractor) {\n        columnLabel = this._gridOptions.columnPicker.headerColumnValueExtractor(this.columns[i], this._gridOptions);\n      } else {\n        columnLabel = this._defaults.headerColumnValueExtractor(this.columns[i], this._gridOptions);\n      }\n\n      const labelElm = document.createElement('label');\n      labelElm.htmlFor = `${this._gridUid}colpicker-${columnId}`;\n      labelElm.innerHTML = columnLabel;\n      liElm.appendChild(labelElm);\n      this._listElm.appendChild(liElm);\n    }\n\n    if (this._gridOptions.columnPicker && (!this._gridOptions.columnPicker.hideForceFitButton || !this._gridOptions.columnPicker.hideSyncResizeButton)) {\n      this._listElm.appendChild(document.createElement('hr'));\n    }\n\n    if (!(this._gridOptions.columnPicker && this._gridOptions.columnPicker.hideForceFitButton)) {\n      let forceFitTitle = (this._gridOptions.columnPicker && this._gridOptions.columnPicker.forceFitTitle) || this._gridOptions.forceFitTitle;\n\n      const liElm = document.createElement('li');\n      liElm.ariaLabel = forceFitTitle || '';\n      this._listElm.appendChild(liElm);\n\n      const forceFitCheckboxElm = document.createElement('input');\n      forceFitCheckboxElm.type = 'checkbox';\n      forceFitCheckboxElm.id = `${this._gridUid}colpicker-forcefit`;\n      forceFitCheckboxElm.dataset.option = 'autoresize';\n      liElm.appendChild(forceFitCheckboxElm);\n\n      const labelElm = document.createElement('label');\n      labelElm.htmlFor = `${this._gridUid}colpicker-forcefit`;\n      labelElm.textContent = forceFitTitle || '';\n      liElm.appendChild(labelElm);\n\n      if (this.grid.getOptions().forceFitColumns) {\n        forceFitCheckboxElm.checked = true;\n      }\n    }\n\n    if (!(this._gridOptions.columnPicker?.hideSyncResizeButton)) {\n      let syncResizeTitle = (this._gridOptions.columnPicker?.syncResizeTitle) || this._gridOptions.syncResizeTitle;\n\n      const liElm = document.createElement('li');\n      liElm.ariaLabel = syncResizeTitle || '';\n      this._listElm.appendChild(liElm);\n\n      const syncResizeCheckboxElm = document.createElement('input');\n      syncResizeCheckboxElm.type = 'checkbox';\n      syncResizeCheckboxElm.id = `${this._gridUid}colpicker-syncresize`;\n      syncResizeCheckboxElm.dataset.option = 'syncresize';\n      liElm.appendChild(syncResizeCheckboxElm);\n\n      const labelElm = document.createElement('label');\n      labelElm.htmlFor = `${this._gridUid}colpicker-syncresize`;\n      labelElm.textContent = syncResizeTitle || '';\n      liElm.appendChild(labelElm);\n\n      if (this.grid.getOptions().syncColumnCellResize) {\n        syncResizeCheckboxElm.checked = true;\n      }\n    }\n\n    this.repositionMenu(e);\n  }\n\n  protected repositionMenu(event: DOMMouseOrTouchEvent<HTMLDivElement>) {\n    const targetEvent: MouseEvent | Touch = (event as TouchEvent)?.touches?.[0] ?? event;\n    this._menuElm.style.top = `${targetEvent.pageY - 10}px`;\n    this._menuElm.style.left = `${targetEvent.pageX - 10}px`;\n    this._menuElm.style.maxHeight = `${window.innerHeight - targetEvent.clientY}px`;\n    this._menuElm.style.display = 'block';\n    this._menuElm.setAttribute('aria-expanded', 'true');\n    this._menuElm.appendChild(this._listElm);\n  }\n\n  protected updateColumnOrder() {\n    // Because columns can be reordered, we have to update the `columns`\n    // to reflect the new order, however we can't just take `grid.getColumns()`,\n    // as it does not include columns currently hidden by the picker.\n    // We create a new `columns` structure by leaving currently-hidden\n    // columns in their original ordinal position and interleaving the results\n    // of the current column sort.\n    let current = this.grid.getColumns().slice(0);\n    let ordered = new Array(this.columns.length);\n    for (let i = 0; i < ordered.length; i++) {\n      if (this.grid.getColumnIndex(this.columns[i].id) === undefined) {\n        // If the column doesn't return a value from getColumnIndex,\n        // it is hidden. Leave it in this position.\n        ordered[i] = this.columns[i];\n      } else {\n        // Otherwise, grab the next visible column.\n        ordered[i] = current.shift();\n      }\n    }\n    this.columns = ordered;\n  }\n\n  /** Update the Titles of each sections (command, customTitle, ...) */\n  updateAllTitles(pickerOptions: { columnTitle: string; }) {\n    if (this._columnTitleElm && this._columnTitleElm.innerHTML) {\n      this._columnTitleElm.innerHTML = pickerOptions.columnTitle;\n    }\n  }\n\n  protected updateColumn(e: DOMMouseOrTouchEvent<HTMLInputElement>) {\n    if (e.target.dataset.option === 'autoresize') {\n      // when calling setOptions, it will resize with ALL Columns (even the hidden ones)\n      // we can avoid this problem by keeping a reference to the visibleColumns before setOptions and then setColumns after\n      const previousVisibleColumns = this.getVisibleColumns();\n      const isChecked: boolean = e.target.checked || false;\n      this.grid.setOptions({ forceFitColumns: isChecked });\n      this.grid.setColumns(previousVisibleColumns);\n      return;\n    }\n\n    if (e.target.dataset.option === 'syncresize') {\n      if (e.target.checked) {\n        this.grid.setOptions({ syncColumnCellResize: true });\n      } else {\n        this.grid.setOptions({ syncColumnCellResize: false });\n      }\n      return;\n    }\n\n    if (e.target.type === 'checkbox') {\n      const isChecked = e.target.checked;\n      const columnId = e.target.dataset.columnid || '';\n      let visibleColumns: Column[] = [];\n      this._columnCheckboxes.forEach((columnCheckbox, idx) => {\n        if (this.columns[idx].hidden !== undefined) { this.columns[idx].hidden = !columnCheckbox.checked; }\n        if (columnCheckbox.checked) {\n          visibleColumns.push(this.columns[idx]);\n        }\n      });\n\n      if (!visibleColumns.length) {\n        e.target.checked = true;\n        return;\n      }\n\n      this.grid.setColumns(visibleColumns);\n      this.onColumnsChanged.notify({ columnId: columnId, showing: isChecked, allColumns: this.columns, columns: visibleColumns, grid: this.grid });\n    }\n  }\n\n  setColumnVisibiliy(idxOrId: number | string, show: boolean) {\n    const idx = typeof idxOrId === 'number' ? idxOrId : this.getColumnIndexbyId(idxOrId);\n    let visibleColumns = this.getVisibleColumns();\n    const col = this.columns[idx];\n    if (show) {\n      col.hidden = false;\n      visibleColumns.splice(idx, 0, col);\n    } else {\n      let newVisibleColumns: Column[] = [];\n      for (let i = 0; i < visibleColumns.length; i++) {\n        if (visibleColumns[i].id !== col.id) { newVisibleColumns.push(visibleColumns[i]); }\n      }\n      visibleColumns = newVisibleColumns;\n    }\n\n    this.grid.setColumns(visibleColumns);\n    this.onColumnsChanged.notify({ columnId: col.id, showing: show, allColumns: this.columns, columns: visibleColumns, grid: this.grid });\n  }\n\n  getAllColumns() {\n    return this.columns;\n  }\n\n  getColumnbyId(id: number | string) {\n    for (let i = 0; i < this.columns.length; i++) {\n      if (this.columns[i].id === id) { return this.columns[i]; }\n    }\n    return null;\n  }\n\n  getColumnIndexbyId(id: number | string) {\n    for (let i = 0; i < this.columns.length; i++) {\n      if (this.columns[i].id === id) { return i; }\n    }\n    return -1;\n  }\n\n  /** visible columns, we can simply get them directly from the grid */\n  getVisibleColumns() {\n    return this.grid.getColumns();\n  }\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  window.Slick.Controls = window.Slick.Controls || {};\n  window.Slick.Controls.ColumnPicker = SlickColumnPicker;\n}\n", "import type { Column, DOMMouseOrTouchEvent, GridMenuCommandItemCallbackArgs, GridMenuEventWithElementCallbackArgs, GridMenuItem, GridMenuOption, GridOption, onGridMenuColumnsChangedCallbackArgs } from '../models/index';\nimport { BindingEventService as BindingEventService_, Event as SlickEvent_, Utils as Utils_ } from '../slick.core';\nimport type { SlickGrid } from '../slick.grid';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n/**\n * A control to add a Grid Menu (hambuger menu on top-right of the grid)\n *\n * USAGE:\n *\n * Add the slick.gridmenu.(js|css) files and register it with the grid.\n *\n * To specify a menu in a column header, extend the column definition like so:\n * let gridMenuControl = new Slick.Controls.GridMenu(columns, grid, options);\n *\n * Available grid options, by defining a gridMenu object:\n *\n *  let options = {\n *    enableCellNavigation: true,\n *    gridMenu: {\n *      customTitle: \"Custom Menus\",                // default to empty string\n *      columnTitle: \"Columns\",                     // default to empty string\n *      iconImage: \"some-image.png\",                // this is the Grid Menu icon (hamburger icon)\n *      iconCssClass: \"fa fa-bars\",                 // you can provide iconImage OR iconCssClass\n *      leaveOpen: false,                           // do we want to leave the Grid Menu open after a command execution? (false by default)\n *      menuWidth: 18,                              // width (icon) that will be use to resize the column header container (18 by default)\n *      contentMinWidth: 0,\t\t\t\t\t\t\t            // defaults to 0 (auto), minimum width of grid menu content (command, column list)\n *      marginBottom: 15,                           // defaults to 15, margin to use at the bottom of the grid when using max-height (default)\n *      resizeOnShowHeaderRow: false,               // false by default\n *      showButton: true,                           // true by default - it allows the user to control if the\n *                                                          // default gridMenu button (located on the top right corner by default CSS)\n *                                                          // should be created or omitted\n *      useClickToRepositionMenu: true,             // true by default\n *\n *      // the last 2 checkboxes titles\n *      hideForceFitButton: false,                  // show/hide checkbox near the end \"Force Fit Columns\"\n *      hideSyncResizeButton: false,                // show/hide checkbox near the end \"Synchronous Resize\"\n *      forceFitTitle: \"Force fit columns\",         // default to \"Force fit columns\"\n *      syncResizeTitle: \"Synchronous resize\",      // default to \"Synchronous resize\"\n *\n *      customItems: [\n *        {\n *          // custom menu item options\n *        },\n *        {\n *          // custom menu item options\n *        }\n *      ]\n *    }\n *  };\n *\n *\n * Available menu options:\n *     hideForceFitButton:        Hide the \"Force fit columns\" button (defaults to false)\n *     hideSyncResizeButton:      Hide the \"Synchronous resize\" button (defaults to false)\n *     forceFitTitle:             Text of the title \"Force fit columns\"\n *     contentMinWidth:\t\t\t\t\t\tminimum width of grid menu content (command, column list), defaults to 0 (auto)\n *     height:                    Height of the Grid Menu content, when provided it will be used instead of the max-height (defaults to undefined)\n *     menuWidth:                 Grid menu button width (defaults to 18)\n *     resizeOnShowHeaderRow:     Do we want to resize on the show header row event\n *     syncResizeTitle:           Text of the title \"Synchronous resize\"\n *     useClickToRepositionMenu:  Use the Click offset to reposition the Grid Menu (defaults to true), when set to False it will use the icon offset to reposition the grid menu\n *     menuUsabilityOverride:     Callback method that user can override the default behavior of enabling/disabling the menu from being usable (must be combined with a custom formatter)\n *     marginBottom:              Margin to use at the bottom of the grid menu, only in effect when height is undefined (defaults to 15)\n *\n * Available custom menu item options:\n *    action:                     Optionally define a callback function that gets executed when item is chosen (and/or use the onCommand event)\n *    title:                      Menu item text.\n *    divider:                    Whether the current item is a divider, not an actual command.\n *    disabled:                   Whether the item/command is disabled.\n *    hidden:                     Whether the item/command is hidden.\n *    tooltip:                    Item tooltip.\n *    command:                    A command identifier to be passed to the onCommand event handlers.\n *    cssClass:                   A CSS class to be added to the menu item container.\n *    iconCssClass:               A CSS class to be added to the menu item icon.\n *    iconImage:                  A url to the icon image.\n *    textCssClass:               A CSS class to be added to the menu item text.\n *    itemVisibilityOverride:     Callback method that user can override the default behavior of showing/hiding an item from the list\n *    itemUsabilityOverride:      Callback method that user can override the default behavior of enabling/disabling an item from the list\n *\n *\n * The plugin exposes the following events:\n *\n *    onAfterMenuShow:   Fired after the menu is shown.  You can customize the menu or dismiss it by returning false.\n *      * ONLY works with a JS event (as per slick.core code), so we cannot notify when it's a button event (when grid menu is attached to an external button, not the hamburger menu)\n *        Event args:\n *            grid:     Reference to the grid.\n *            column:   Column definition.\n *            menu:     Menu options.  Note that you can change the menu items here.\n *\n *    onBeforeMenuShow:   Fired before the menu is shown.  You can customize the menu or dismiss it by returning false.\n *      * ONLY works with a JS event (as per slick.core code), so we cannot notify when it's a button event (when grid menu is attached to an external button, not the hamburger menu)\n *        Event args:\n *            grid:     Reference to the grid.\n *            column:   Column definition.\n *            menu:     Menu options.  Note that you can change the menu items here.\n *\n *    onMenuClose:      Fired when the menu is closing.\n *        Event args:\n *            grid:     Reference to the grid.\n *            column:   Column definition.\n *            menu:     Menu options.  Note that you can change the menu items here.\n *\n *    onCommand:    Fired on menu item click for buttons with 'command' specified.\n *        Event args:\n *            grid:     Reference to the grid.\n *            column:   Column definition.\n *            command:  Button command identified.\n *            button:   Button options.  Note that you can change the button options in your\n *                      event handler, and the column header will be automatically updated to\n *                      reflect them.  This is useful if you want to implement something like a\n *                      toggle button.\n */\n\nexport class SlickGridMenu {\n  protected _gridOptions: GridOption;\n  protected _gridUid: string;\n  protected _isMenuOpen = false;\n  protected _gridMenuOptions: GridMenuOption | null = null;\n  protected _columnTitleElm!: HTMLElement;\n  protected _customTitleElm!: HTMLElement;\n  protected _customMenuElm!: HTMLElement;\n  protected _headerElm: HTMLDivElement | null = null;\n  protected _listElm!: HTMLElement;\n  protected _buttonElm!: HTMLElement;\n  protected _menuElm!: HTMLElement;\n  protected columnCheckboxes: HTMLInputElement[] = [];\n  protected _defaults = {\n    showButton: true,\n    hideForceFitButton: false,\n    hideSyncResizeButton: false,\n    forceFitTitle: 'Force fit columns',\n    marginBottom: 15,\n    menuWidth: 18,\n    contentMinWidth: 0,\n    resizeOnShowHeaderRow: false,\n    syncResizeTitle: 'Synchronous resize',\n    useClickToRepositionMenu: true,\n    headerColumnValueExtractor: function (columnDef) {\n      return columnDef.name;\n    }\n  };\n  protected _bindingEventService: BindingEventService_;\n\n  // public events\n  onAfterMenuShow = new SlickEvent<GridMenuEventWithElementCallbackArgs>();\n  onBeforeMenuShow = new SlickEvent<GridMenuEventWithElementCallbackArgs>();\n  onMenuClose = new SlickEvent<GridMenuEventWithElementCallbackArgs>();\n  onCommand = new SlickEvent<GridMenuCommandItemCallbackArgs>();\n  onColumnsChanged = new SlickEvent<onGridMenuColumnsChangedCallbackArgs>();\n\n  constructor(protected columns: Column[], protected readonly grid: SlickGrid, gridOptions: GridOption) {\n    this._gridUid = grid.getUID();\n    this._gridOptions = gridOptions;\n    this._gridMenuOptions = Utils.extend({}, gridOptions.gridMenu);\n    this._bindingEventService = new BindingEventService();\n\n    // when a grid optionally changes from a regular grid to a frozen grid, we need to destroy & recreate the grid menu\n    // we do this change because the Grid Menu is on the left container for a regular grid, it is however on the right container for a frozen grid\n    grid.onSetOptions.subscribe((_e, args) => {\n      if (args && args.optionsBefore && args.optionsAfter) {\n        let switchedFromRegularToFrozen = args.optionsBefore.frozenColumn >= 0 && args.optionsAfter.frozenColumn === -1;\n        let switchedFromFrozenToRegular = args.optionsBefore.frozenColumn === -1 && args.optionsAfter.frozenColumn >= 0;\n        if (switchedFromRegularToFrozen || switchedFromFrozenToRegular) {\n          this.recreateGridMenu();\n        }\n      }\n    });\n    this.init(this.grid);\n  }\n\n  init(grid: SlickGrid) {\n    this._gridOptions = grid.getOptions();\n    this.createGridMenu();\n\n    // subscribe to the grid, when it's destroyed, we should also destroy the Grid Menu\n    grid.onBeforeDestroy.subscribe(this.destroy.bind(this));\n  }\n\n  setOptions(newOptions: GridMenuOption) {\n    this._gridMenuOptions = Utils.extend({}, this._gridMenuOptions, newOptions);\n  }\n\n  protected createGridMenu() {\n    let gridMenuWidth = (this._gridMenuOptions?.menuWidth) || this._defaults.menuWidth;\n    if (this._gridOptions && this._gridOptions.hasOwnProperty('frozenColumn') && this._gridOptions.frozenColumn >= 0) {\n      this._headerElm = document.querySelector(`.${this._gridUid} .slick-header-right`);\n    } else {\n      this._headerElm = document.querySelector(`.${this._gridUid} .slick-header-left`);\n    }\n    this._headerElm!.style.width = `calc(100% - ${gridMenuWidth}px)`;\n\n    // if header row is enabled, we need to resize its width also\n    let enableResizeHeaderRow = (this._gridMenuOptions?.resizeOnShowHeaderRow != undefined) ? this._gridMenuOptions.resizeOnShowHeaderRow : this._defaults.resizeOnShowHeaderRow;\n    if (enableResizeHeaderRow && this._gridOptions.showHeaderRow) {\n      const headerRow = document.querySelector<HTMLDivElement>(`.${this._gridUid}.slick-headerrow`);\n      if (headerRow) {\n        headerRow.style.width = `calc(100% - ${gridMenuWidth}px)`;\n      }\n    }\n\n    let showButton = (this._gridMenuOptions?.showButton !== undefined) ? this._gridMenuOptions.showButton : this._defaults.showButton;\n    if (showButton) {\n      this._buttonElm = document.createElement('button');\n      this._buttonElm.className = 'slick-gridmenu-button';\n      this._buttonElm.ariaLabel = 'Grid Menu';\n\n      if (this._gridMenuOptions?.iconCssClass) {\n        this._buttonElm.classList.add(...this._gridMenuOptions.iconCssClass.split(' '));\n      } else {\n        const iconImageElm = document.createElement('img');\n        iconImageElm.src = (this._gridMenuOptions?.iconImage) ? this._gridMenuOptions.iconImage : '../images/drag-handle.png';\n        this._buttonElm.appendChild(iconImageElm);\n      }\n\n      this._headerElm!.parentElement!.insertBefore(this._buttonElm, this._headerElm!.parentElement!.firstChild);\n\n      // add on click handler for the Grid Menu itself\n      this._bindingEventService.bind(this._buttonElm, 'click', this.showGridMenu.bind(this) as EventListener);\n    }\n\n    this._menuElm = document.createElement('div');\n    this._menuElm.className = `slick-gridmenu ${this._gridUid}`;\n    this._menuElm.style.display = 'none';\n    document.body.appendChild(this._menuElm);\n\n    const buttonElm = document.createElement('button');\n    buttonElm.type = 'button';\n    buttonElm.className = 'close';\n    buttonElm.dataset.dismiss = 'slick-gridmenu';\n    buttonElm.ariaLabel = 'Close';\n\n    const spanCloseElm = document.createElement('span');\n    spanCloseElm.className = 'close';\n    spanCloseElm.ariaHidden = 'true';\n    spanCloseElm.innerHTML = '&times;';\n    buttonElm.appendChild(spanCloseElm);\n    this._menuElm.appendChild(buttonElm);\n\n    this._customMenuElm = document.createElement('div');\n    this._customMenuElm.className = 'slick-gridmenu-custom';\n    this._customMenuElm.role = 'menu';\n\n    this._menuElm.appendChild(this._customMenuElm);\n\n    this.populateCustomMenus(this._gridMenuOptions || {}, this._customMenuElm);\n    this.populateColumnPicker();\n\n    // Hide the menu on outside click.\n    this._bindingEventService.bind(document.body, 'mousedown', this.handleBodyMouseDown.bind(this) as EventListener);\n\n    // destroy the picker if user leaves the page\n    this._bindingEventService.bind(document.body, 'beforeunload', this.destroy.bind(this));\n  }\n\n  /** Destroy the plugin by unsubscribing every events & also delete the menu DOM elements */\n  destroy() {\n    this.onAfterMenuShow.unsubscribe();\n    this.onBeforeMenuShow.unsubscribe();\n    this.onMenuClose.unsubscribe();\n    this.onCommand.unsubscribe();\n    this.onColumnsChanged.unsubscribe();\n    this.grid.onColumnsReordered.unsubscribe(this.updateColumnOrder.bind(this));\n    this.grid.onBeforeDestroy.unsubscribe();\n    this.grid.onSetOptions.unsubscribe();\n    this._bindingEventService.unbindAll();\n    this._menuElm?.remove();\n    this.deleteMenu();\n  }\n\n  /** Delete the menu DOM element but without unsubscribing any events */\n  deleteMenu() {\n    this._bindingEventService.unbindAll();\n    const gridMenuElm = document.querySelector<HTMLDivElement>(`div.slick-gridmenu.${this._gridUid}`);\n    if (gridMenuElm) {\n      gridMenuElm.style.display = 'none';\n    }\n    if (this._headerElm) {\n      // put back original width (fixes width and frozen+gridMenu on left header)\n      this._headerElm.style.width = '100%';\n    }\n    this._buttonElm?.remove();\n    this._menuElm?.remove();\n  }\n\n  protected populateCustomMenus(gridMenuOptions: GridMenuOption, customMenuElm) {\n    // Construct the custom menu items.\n    if (!gridMenuOptions || !gridMenuOptions.customItems) {\n      return;\n    }\n\n    // user could pass a title on top of the custom section\n    if (this._gridMenuOptions?.customTitle) {\n      this._customTitleElm = document.createElement('div');\n      this._customTitleElm.className = 'title';\n      this._customTitleElm.innerHTML = this._gridMenuOptions.customTitle;\n      customMenuElm.appendChild(this._customTitleElm);\n    }\n\n    for (let i = 0, ln = gridMenuOptions.customItems.length; i < ln; i++) {\n      let addClickListener = true;\n      let item = gridMenuOptions.customItems[i];\n      let callbackArgs = {\n        grid: this.grid,\n        menu: this._menuElm,\n        columns: this.columns,\n        visibleColumns: this.getVisibleColumns()\n      };\n\n      // run each override functions to know if the item is visible and usable\n      let isItemVisible = this.runOverrideFunctionWhenExists((item as GridMenuItem).itemVisibilityOverride, callbackArgs);\n      let isItemUsable = this.runOverrideFunctionWhenExists((item as GridMenuItem).itemUsabilityOverride, callbackArgs);\n\n      // if the result is not visible then there's no need to go further\n      if (!isItemVisible) {\n        continue;\n      }\n\n      // when the override is defined, we need to use its result to update the disabled property\n      // so that \"handleMenuItemCommandClick\" has the correct flag and won't trigger a command clicked event\n      if (Object.prototype.hasOwnProperty.call(item, 'itemUsabilityOverride')) {\n        (item as GridMenuItem).disabled = isItemUsable ? false : true;\n      }\n\n      const liElm = document.createElement('div');\n      liElm.className = 'slick-gridmenu-item';\n      liElm.role = 'menuitem';\n\n      if ((item as GridMenuItem).divider || item === 'divider') {\n        liElm.classList.add('slick-gridmenu-item-divider');\n        addClickListener = false;\n      }\n      if ((item as GridMenuItem).disabled) {\n        liElm.classList.add('slick-gridmenu-item-disabled');\n      }\n\n      if ((item as GridMenuItem).hidden) {\n        liElm.classList.add('slick-gridmenu-item-hidden');\n      }\n\n      if ((item as GridMenuItem).cssClass) {\n        liElm.classList.add(...(item as GridMenuItem).cssClass!.split(' '));\n      }\n\n      if ((item as GridMenuItem).tooltip) {\n        liElm.title = (item as GridMenuItem).tooltip || '';\n      }\n\n      const iconElm = document.createElement('div');\n      iconElm.className = 'slick-gridmenu-icon';\n\n      liElm.appendChild(iconElm);\n\n      if ((item as GridMenuItem).iconCssClass) {\n        iconElm.classList.add(...(item as GridMenuItem).iconCssClass!.split(' '));\n      }\n\n      if ((item as GridMenuItem).iconImage) {\n        iconElm.style.backgroundImage = `url(${(item as GridMenuItem).iconImage})`;\n      }\n\n      const textElm = document.createElement('span');\n      textElm.className = 'slick-gridmenu-content';\n      textElm.innerHTML = (item as GridMenuItem).title || '';\n\n      liElm.appendChild(textElm);\n\n      if ((item as GridMenuItem).textCssClass) {\n        textElm.classList.add(...(item as GridMenuItem).textCssClass!.split(' '));\n      }\n\n      customMenuElm.appendChild(liElm);\n\n      if (addClickListener) {\n        this._bindingEventService.bind(liElm, 'click', this.handleMenuItemClick.bind(this, item) as EventListener);\n      }\n    }\n  }\n\n  /** Build the column picker, the code comes almost untouched from the file \"slick.columnpicker.js\" */\n  protected populateColumnPicker() {\n    this.grid.onColumnsReordered.subscribe(this.updateColumnOrder.bind(this));\n\n    // user could pass a title on top of the columns list\n    if (this._gridMenuOptions?.columnTitle) {\n      this._columnTitleElm = document.createElement('div');\n      this._columnTitleElm.className = 'title';\n      this._columnTitleElm.innerHTML = this._gridMenuOptions.columnTitle;\n      this._menuElm.appendChild(this._columnTitleElm);\n    }\n\n    this._bindingEventService.bind(this._menuElm, 'click', this.updateColumn.bind(this) as EventListener);\n    this._listElm = document.createElement('span');\n    this._listElm.className = 'slick-gridmenu-list';\n    this._listElm.role = 'menu';\n  }\n\n  /** Delete and then Recreate the Grid Menu (for example when we switch from regular to a frozen grid) */\n  recreateGridMenu() {\n    this.deleteMenu();\n    this.init(this.grid);\n  }\n\n  showGridMenu(e: DOMMouseOrTouchEvent<HTMLButtonElement>) {\n    let targetEvent = e.touches ? e.touches[0] : e;\n    e.preventDefault();\n\n    // empty both the picker list & the command list\n    Utils.emptyElement(this._listElm);\n    Utils.emptyElement(this._customMenuElm);\n\n    this.populateCustomMenus(this._gridMenuOptions || {}, this._customMenuElm);\n    this.updateColumnOrder();\n    this.columnCheckboxes = [];\n\n    let callbackArgs = {\n      grid: this.grid,\n      menu: this._menuElm,\n      allColumns: this.columns,\n      visibleColumns: this.getVisibleColumns()\n    };\n\n    // run the override function (when defined), if the result is false it won't go further\n    if (this._gridMenuOptions && !this.runOverrideFunctionWhenExists(this._gridMenuOptions.menuUsabilityOverride, callbackArgs)) {\n      return;\n    }\n\n    // notify of the onBeforeMenuShow only works when\n    // this mean that we cannot notify when the grid menu is attach to a button event\n    if (typeof e.stopPropagation === 'function') {\n      if (this.onBeforeMenuShow.notify(callbackArgs, e, this).getReturnValue() == false) {\n        return;\n      }\n    }\n\n    let columnId, columnLabel, excludeCssClass;\n    for (let i = 0; i < this.columns.length; i++) {\n      columnId = this.columns[i].id;\n      excludeCssClass = this.columns[i].excludeFromGridMenu ? 'hidden' : '';\n\n      const liElm = document.createElement('li');\n      liElm.className = excludeCssClass;\n      liElm.ariaLabel = this.columns[i]?.name || '';\n\n      const checkboxElm = document.createElement('input');\n      checkboxElm.type = 'checkbox';\n      checkboxElm.id = `${this._gridUid}-gridmenu-colpicker-${columnId}`;\n      checkboxElm.dataset.columnid = String(this.columns[i].id);\n      liElm.appendChild(checkboxElm);\n\n      if (this.grid.getColumnIndex(this.columns[i].id) != null && !this.columns[i].hidden) {\n        checkboxElm.checked = true;\n      }\n\n      this.columnCheckboxes.push(checkboxElm);\n\n      // get the column label from the picker value extractor (user can optionally provide a custom extractor)\n      if (this._gridMenuOptions?.headerColumnValueExtractor) {\n        columnLabel = this._gridMenuOptions.headerColumnValueExtractor(this.columns[i], this._gridOptions);\n      } else {\n        columnLabel = this._defaults.headerColumnValueExtractor(this.columns[i]);\n      }\n\n      const labelElm = document.createElement('label');\n      labelElm.htmlFor = `${this._gridUid}-gridmenu-colpicker-${columnId}`;\n      labelElm.innerHTML = columnLabel;\n      liElm.appendChild(labelElm);\n      this._listElm.appendChild(liElm);\n    }\n\n    if (this._gridMenuOptions && (!this._gridMenuOptions.hideForceFitButton || !this._gridMenuOptions.hideSyncResizeButton)) {\n      this._listElm.appendChild(document.createElement('hr'));\n    }\n\n    if (!(this._gridMenuOptions?.hideForceFitButton)) {\n      let forceFitTitle = (this._gridMenuOptions?.forceFitTitle) || this._defaults.forceFitTitle;\n\n      const liElm = document.createElement('li');\n      liElm.ariaLabel = forceFitTitle;\n      liElm.role = 'menuitem';\n      this._listElm.appendChild(liElm);\n\n      const forceFitCheckboxElm = document.createElement('input');\n      forceFitCheckboxElm.type = 'checkbox';\n      forceFitCheckboxElm.id = `${this._gridUid}-gridmenu-colpicker-forcefit`;\n      forceFitCheckboxElm.dataset.option = 'autoresize';\n      liElm.appendChild(forceFitCheckboxElm);\n\n      const labelElm = document.createElement('label');\n      labelElm.htmlFor = `${this._gridUid}-gridmenu-colpicker-forcefit`;\n      labelElm.textContent = forceFitTitle;\n      liElm.appendChild(labelElm);\n\n      if (this.grid.getOptions().forceFitColumns) {\n        forceFitCheckboxElm.checked = true;\n      }\n    }\n\n    if (!(this._gridMenuOptions?.hideSyncResizeButton)) {\n      let syncResizeTitle = (this._gridMenuOptions?.syncResizeTitle) || this._defaults.syncResizeTitle;\n\n      const liElm = document.createElement('li');\n      liElm.ariaLabel = syncResizeTitle;\n      this._listElm.appendChild(liElm);\n\n      const syncResizeCheckboxElm = document.createElement('input');\n      syncResizeCheckboxElm.type = 'checkbox';\n      syncResizeCheckboxElm.id = `${this._gridUid}-gridmenu-colpicker-syncresize`;\n      syncResizeCheckboxElm.dataset.option = 'syncresize';\n      liElm.appendChild(syncResizeCheckboxElm);\n\n      const labelElm = document.createElement('label');\n      labelElm.htmlFor = `${this._gridUid}-gridmenu-colpicker-syncresize`;\n      labelElm.textContent = syncResizeTitle;\n      liElm.appendChild(labelElm);\n\n      if (this.grid.getOptions().syncColumnCellResize) {\n        syncResizeCheckboxElm.checked = true;\n      }\n    }\n\n    let buttonElm = (e.target.nodeName === 'BUTTON' ? e.target : e.target.querySelector('button')) as HTMLButtonElement; // get button element\n    if (!buttonElm) {\n      buttonElm = e.target.parentElement as HTMLButtonElement; // external grid menu might fall in this last case if wrapped in a span/div\n    }\n\n    // we need to display the menu to properly calculate its width but we can however make it invisible\n    this._menuElm.style.display = 'block';\n    this._menuElm.style.opacity = '0';\n\n    let menuIconOffset = Utils.offset(buttonElm); // get button offset position\n    let menuWidth = this._menuElm.offsetWidth;\n    let useClickToRepositionMenu = (this._gridMenuOptions?.useClickToRepositionMenu !== undefined) ? this._gridMenuOptions.useClickToRepositionMenu : this._defaults.useClickToRepositionMenu;\n    let contentMinWidth = (this._gridMenuOptions?.contentMinWidth) ? this._gridMenuOptions.contentMinWidth : this._defaults.contentMinWidth;\n    let currentMenuWidth = (contentMinWidth > menuWidth) ? contentMinWidth : menuWidth + 5;\n    let nextPositionTop = (useClickToRepositionMenu && targetEvent.pageY > 0) ? targetEvent.pageY : menuIconOffset!.top + 10;\n    let nextPositionLeft = (useClickToRepositionMenu && targetEvent.pageX > 0) ? targetEvent.pageX : menuIconOffset!.left + 10;\n    let menuMarginBottom = (this._gridMenuOptions?.marginBottom !== undefined) ? this._gridMenuOptions.marginBottom : this._defaults.marginBottom;\n\n    this._menuElm.style.top = `${nextPositionTop + 10}px`;\n    this._menuElm.style.left = `${nextPositionLeft - currentMenuWidth + 10}px`;\n\n    if (contentMinWidth > 0) {\n      this._menuElm.style.minWidth = `${contentMinWidth}px`;\n    }\n\n    // set \"height\" when defined OR ELSE use the \"max-height\" with available window size and optional margin bottom\n    if (this._gridMenuOptions?.height !== undefined) {\n      this._menuElm.style.height = `${this._gridMenuOptions.height}px`;\n    } else {\n      this._menuElm.style.maxHeight = `${window.innerHeight - targetEvent.clientY - menuMarginBottom}px`;\n    }\n\n    this._menuElm.style.display = 'block';\n    this._menuElm.style.opacity = '1'; // restore menu visibility\n    this._menuElm.appendChild(this._listElm);\n    this._isMenuOpen = true;\n\n    if (typeof e.stopPropagation === 'function') {\n      if (this.onAfterMenuShow.notify(callbackArgs, e, this).getReturnValue() == false) {\n        return;\n      }\n    }\n  }\n\n  protected handleBodyMouseDown(event: DOMMouseOrTouchEvent<HTMLElement>) {\n    if ((this._menuElm !== event.target && !(this._menuElm?.contains(event.target)) && this._isMenuOpen) || event.target.className === 'close') {\n      this.hideMenu(event);\n    }\n  }\n\n  protected handleMenuItemClick(item: any, e: DOMMouseOrTouchEvent<HTMLButtonElement>) {\n    const command = item.command || '';\n\n    if (item.disabled || item.divider || item === 'divider') {\n      return;\n    }\n\n    if (command != null && command != '') {\n      let callbackArgs = {\n        grid: this.grid,\n        command: command,\n        item: item,\n        allColumns: this.columns,\n        visibleColumns: this.getVisibleColumns()\n      };\n      this.onCommand.notify(callbackArgs, e, this);\n\n      // execute action callback when defined\n      if (typeof item.action === 'function') {\n        item.action.call(this, e, callbackArgs);\n      }\n    }\n\n    // does the user want to leave open the Grid Menu after executing a command?\n    let leaveOpen = !!(this._gridMenuOptions?.leaveOpen);\n    if (!leaveOpen && !e.defaultPrevented) {\n      this.hideMenu(e);\n    }\n\n    // Stop propagation so that it doesn't register as a header click event.\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  hideMenu(e: DOMMouseOrTouchEvent<HTMLElement>) {\n    if (this._menuElm) {\n      Utils.hide(this._menuElm);\n      this._isMenuOpen = false;\n\n      let callbackArgs = {\n        grid: this.grid,\n        menu: this._menuElm,\n        allColumns: this.columns,\n        visibleColumns: this.getVisibleColumns()\n      };\n      if (this.onMenuClose.notify(callbackArgs, e, this).getReturnValue() == false) {\n        return;\n      }\n    }\n  }\n\n  /** Update the Titles of each sections (command, customTitle, ...) */\n  updateAllTitles(gridMenuOptions: GridMenuOption) {\n    if (this._customTitleElm && this._customTitleElm.innerHTML) {\n      this._customTitleElm.innerHTML = gridMenuOptions.customTitle || '';\n    }\n    if (this._columnTitleElm?.innerHTML) {\n      this._columnTitleElm.innerHTML = gridMenuOptions.columnTitle || '';\n    }\n  }\n\n  protected updateColumnOrder() {\n    // Because columns can be reordered, we have to update the `columns`\n    // to reflect the new order, however we can't just take `grid.getColumns()`,\n    // as it does not include columns currently hidden by the picker.\n    // We create a new `columns` structure by leaving currently-hidden\n    // columns in their original ordinal position and interleaving the results\n    // of the current column sort.\n    let current = this.grid.getColumns().slice(0);\n    let ordered = new Array(this.columns.length);\n    for (let i = 0; i < ordered.length; i++) {\n      if (this.grid.getColumnIndex(this.columns[i].id) === undefined) {\n        // If the column doesn't return a value from getColumnIndex,\n        // it is hidden. Leave it in this position.\n        ordered[i] = this.columns[i];\n      } else {\n        // Otherwise, grab the next visible column.\n        ordered[i] = current.shift();\n      }\n    }\n    this.columns = ordered;\n  }\n\n  protected updateColumn(e: DOMMouseOrTouchEvent<HTMLInputElement>) {\n    if (e.target.dataset.option === 'autoresize') {\n      // when calling setOptions, it will resize with ALL Columns (even the hidden ones)\n      // we can avoid this problem by keeping a reference to the visibleColumns before setOptions and then setColumns after\n      let previousVisibleColumns = this.getVisibleColumns();\n      let isChecked = e.target.checked;\n      this.grid.setOptions({ forceFitColumns: isChecked });\n      this.grid.setColumns(previousVisibleColumns);\n      return;\n    }\n\n    if (e.target.dataset.option === 'syncresize') {\n      this.grid.setOptions({ syncColumnCellResize: !!(e.target.checked) });\n      return;\n    }\n\n    if (e.target.type === 'checkbox') {\n      const isChecked = e.target.checked;\n      const columnId = e.target.dataset.columnid || '';\n      let visibleColumns: Column[] = [];\n      this.columnCheckboxes.forEach((columnCheckbox, idx) => {\n        if (columnCheckbox.checked) {\n          if (this.columns[idx].hidden) { this.columns[idx].hidden = false; }\n          visibleColumns.push(this.columns[idx]);\n        }\n      });\n\n      if (!visibleColumns.length) {\n        e.target.checked = true;\n        return;\n      }\n\n      const callbackArgs = {\n        columnId,\n        showing: isChecked,\n        grid: this.grid,\n        allColumns: this.columns,\n        columns: visibleColumns,\n        visibleColumns: this.getVisibleColumns()\n      };\n      this.grid.setColumns(visibleColumns);\n      this.onColumnsChanged.notify(callbackArgs, e, this);\n    }\n  }\n\n  getAllColumns() {\n    return this.columns;\n  }\n\n  /** visible columns, we can simply get them directly from the grid */\n  getVisibleColumns() {\n    return this.grid.getColumns();\n  }\n\n  /**\n   * Method that user can pass to override the default behavior.\n   * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\n   * @param overrideFn: override function callback\n   * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\n   */\n  protected runOverrideFunctionWhenExists(overrideFn, args) {\n    if (typeof overrideFn === 'function') {\n      return overrideFn.call(this, args);\n    }\n    return true;\n  }\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  window.Slick.Controls = window.Slick.Controls || {};\n  window.Slick.Controls.GridMenu = SlickGridMenu;\n}\n\n", "import { PagingInfo } from '../models/index';\nimport { BindingEventService as BindingEventService_, GlobalEditorLock as GlobalEditorLock_, Utils as Utils_ } from '../slick.core';\nimport { SlickDataView } from '../slick.dataview';\nimport { SlickGrid } from '../slick.grid';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\nconst GlobalEditorLock = IIFE_ONLY ? Slick.GlobalEditorLock : GlobalEditorLock_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\nexport interface GridPagerOption {\n  showAllText: string;\n  showPageText: string;\n  showCountText: string;\n  showCount: boolean;\n  pagingOptions: Array<{ data: number; name: string; ariaLabel: string; }>;\n  showPageSizes: boolean;\n}\n\nexport class SlickGridPager {\n  // the container might be a string, a jQuery object or a native element\n  protected _container: HTMLElement;\n  protected _statusElm!: HTMLElement;\n  protected _bindingEventService: BindingEventService_;\n  protected _options!: GridPagerOption;\n  protected _defaults = {\n    showAllText: 'Showing all {rowCount} rows',\n    showPageText: 'Showing page {pageNum} of {pageCount}',\n    showCountText: 'From {countBegin} to {countEnd} of {rowCount} rows',\n    showCount: false,\n    pagingOptions: [\n      { data: 0, name: 'All', ariaLabel: 'Show All Pages' },\n      { data: -1, name: 'Auto', ariaLabel: 'Auto Page Size' },\n      { data: 25, name: '25', ariaLabel: 'Show 25 rows per page' },\n      { data: 50, name: '50', ariaLabel: 'Show 50 rows per page' },\n      { data: 100, name: '100', ariaLabel: 'Show 100 rows per page' },\n    ],\n    showPageSizes: false\n  };\n\n  constructor(protected readonly dataView: SlickDataView, protected readonly grid: SlickGrid, selectorOrElm: HTMLElement | string, options?: Partial<GridPagerOption>) {\n    this._container = this.getContainerElement(selectorOrElm);\n    this._options = Utils.extend(true, {}, this._defaults, options);\n    this._bindingEventService = new BindingEventService();\n    this.init();\n  }\n\n  init() {\n    this.constructPagerUI();\n    this.updatePager(this.dataView.getPagingInfo());\n    this.dataView.onPagingInfoChanged.subscribe((_e, pagingInfo) => {\n      this.updatePager(pagingInfo);\n    });\n  }\n\n  /** Destroy function when element is destroyed */\n  destroy() {\n    this.setPageSize(0);\n    this._bindingEventService.unbindAll();\n    this._container.innerHTML = '';\n  }\n\n  protected getNavState() {\n    let cannotLeaveEditMode = !GlobalEditorLock.commitCurrentEdit();\n    let pagingInfo = this.dataView.getPagingInfo();\n    let lastPage = pagingInfo.totalPages - 1;\n\n    return {\n      canGotoFirst: !cannotLeaveEditMode && pagingInfo.pageSize !== 0 && pagingInfo.pageNum > 0,\n      canGotoLast: !cannotLeaveEditMode && pagingInfo.pageSize !== 0 && pagingInfo.pageNum !== lastPage,\n      canGotoPrev: !cannotLeaveEditMode && pagingInfo.pageSize !== 0 && pagingInfo.pageNum > 0,\n      canGotoNext: !cannotLeaveEditMode && pagingInfo.pageSize !== 0 && pagingInfo.pageNum < lastPage,\n      pagingInfo: pagingInfo\n    };\n  }\n\n  protected setPageSize(n: number) {\n    this.dataView.setRefreshHints({\n      isFilterUnchanged: true\n    });\n    this.dataView.setPagingOptions({ pageSize: n });\n  }\n\n  protected gotoFirst() {\n    if (this.getNavState().canGotoFirst) {\n      this.dataView.setPagingOptions({ pageNum: 0 });\n    }\n  }\n\n  protected gotoLast() {\n    let state = this.getNavState();\n    if (state.canGotoLast) {\n      this.dataView.setPagingOptions({ pageNum: state.pagingInfo.totalPages - 1 });\n    }\n  }\n\n  protected gotoPrev() {\n    let state = this.getNavState();\n    if (state.canGotoPrev) {\n      this.dataView.setPagingOptions({ pageNum: state.pagingInfo.pageNum - 1 });\n    }\n  }\n\n  protected gotoNext() {\n    let state = this.getNavState();\n    if (state.canGotoNext) {\n      this.dataView.setPagingOptions({ pageNum: state.pagingInfo.pageNum + 1 });\n    }\n  }\n\n  protected getContainerElement(selectorOrElm: HTMLElement | string) {\n    // the container might be a string, a jQuery object or a native element\n    return typeof selectorOrElm === 'string'\n      ? document.querySelector(selectorOrElm)\n      : typeof selectorOrElm === 'object' && selectorOrElm[0]\n        ? selectorOrElm[0]\n        : selectorOrElm;\n  }\n\n  protected constructPagerUI() {\n    // the container might be a string, a jQuery object or a native element\n    const container = this.getContainerElement(this._container);\n    if (!container || (container.jquery && !container[0])) return;\n\n    const navElm = document.createElement('span');\n    navElm.className = 'slick-pager-nav';\n\n    const settingsElm = document.createElement('span');\n    settingsElm.className = 'slick-pager-settings';\n\n    this._statusElm = document.createElement('span');\n    this._statusElm.className = 'slick-pager-status';\n\n    const pagerSettingsElm = document.createElement('span');\n    pagerSettingsElm.className = 'slick-pager-settings-expanded';\n    pagerSettingsElm.textContent = 'Show: ';\n\n    for (let o = 0; o < this._options.pagingOptions.length; o++) {\n      let p = this._options.pagingOptions[o];\n\n      const anchorElm = document.createElement('a');\n      anchorElm.textContent = p.name;\n      anchorElm.ariaLabel = p.ariaLabel;\n      anchorElm.dataset.val = String(p.data);\n      pagerSettingsElm.appendChild(anchorElm);\n\n      this._bindingEventService.bind(anchorElm, 'click', ((e: any) => {\n        let pagesize = e.target.dataset.val;\n        if (pagesize !== undefined) {\n          if (Number(pagesize) === -1) {\n            let vp = this.grid.getViewport();\n            this.setPageSize(vp.bottom - vp.top);\n          } else {\n            this.setPageSize(parseInt(pagesize));\n          }\n        }\n      }));\n    }\n\n    pagerSettingsElm.style.display = this._options.showPageSizes ? 'block' : 'none';\n\n    settingsElm.appendChild(pagerSettingsElm);\n\n    // light bulb icon\n    const displayPaginationContainer = document.createElement('span');\n    const displayIconElm = document.createElement('span');\n    displayPaginationContainer.className = 'sgi-container';\n    displayIconElm.ariaLabel = 'Show Pagination Options';\n    displayIconElm.role = 'button';\n    displayIconElm.className = 'sgi sgi-lightbulb';\n    displayPaginationContainer.appendChild(displayIconElm);\n\n    this._bindingEventService.bind(displayIconElm, 'click', () => {\n      const styleDisplay = pagerSettingsElm.style.display;\n      pagerSettingsElm.style.display = styleDisplay === 'none' ? 'inline-flex' : 'none';\n    });\n    settingsElm.appendChild(displayPaginationContainer);\n\n    const pageButtons = [\n      { key: 'start', ariaLabel: 'First Page', callback: this.gotoFirst },\n      { key: 'left', ariaLabel: 'Previous Page', callback: this.gotoPrev },\n      { key: 'right', ariaLabel: 'Next Page', callback: this.gotoNext },\n      { key: 'end', ariaLabel: 'Last Page', callback: this.gotoLast },\n    ];\n\n    pageButtons.forEach(pageBtn => {\n      const iconElm = document.createElement('span');\n      iconElm.className = 'sgi-container';\n\n      const innerIconElm = document.createElement('span');\n      innerIconElm.role = 'button';\n      innerIconElm.ariaLabel = pageBtn.ariaLabel;\n      innerIconElm.className = `sgi sgi-chevron-${pageBtn.key}`;\n      this._bindingEventService.bind(innerIconElm, 'click', pageBtn.callback.bind(this));\n\n      iconElm.appendChild(innerIconElm);\n      navElm.appendChild(iconElm);\n    });\n\n    const slickPagerElm = document.createElement('div');\n    slickPagerElm.className = 'slick-pager';\n\n    slickPagerElm.appendChild(navElm);\n    slickPagerElm.appendChild(this._statusElm);\n    slickPagerElm.appendChild(settingsElm);\n\n    container.appendChild(slickPagerElm);\n  }\n\n  protected updatePager(pagingInfo: PagingInfo) {\n    if (!this._container || ((this._container as any).jquery && !this._container[0])) return;\n    let state = this.getNavState();\n\n    // remove disabled class on all icons\n    this._container.querySelectorAll('.slick-pager-nav span')\n      .forEach(pagerIcon => pagerIcon.classList.remove('sgi-state-disabled'));\n\n    // add back disabled class to only necessary icons\n    if (!state.canGotoFirst) {\n      this._container!.querySelector('.sgi-chevron-start')!.classList.add('sgi-state-disabled');\n    }\n    if (!state.canGotoLast) {\n      this._container!.querySelector('.sgi-chevron-end')!.classList.add('sgi-state-disabled');\n    }\n    if (!state.canGotoNext) {\n      this._container!.querySelector('.sgi-chevron-right')!.classList.add('sgi-state-disabled');\n    }\n    if (!state.canGotoPrev) {\n      this._container!.querySelector('.sgi-chevron-left')!.classList.add('sgi-state-disabled');\n    }\n\n    if (pagingInfo.pageSize === 0) {\n      this._statusElm.textContent = (this._options.showAllText.replace('{rowCount}', pagingInfo.totalRows + '').replace('{pageCount}', pagingInfo.totalPages + ''));\n    } else {\n      this._statusElm.textContent = (this._options.showPageText.replace('{pageNum}', pagingInfo.pageNum + 1 + '').replace('{pageCount}', pagingInfo.totalPages + ''));\n    }\n\n    if (this._options.showCount && pagingInfo.pageSize !== 0) {\n      let pageBegin = pagingInfo.pageNum * pagingInfo.pageSize;\n      let currentText = this._statusElm.textContent;\n\n      if (currentText) {\n        currentText += ' - ';\n      }\n\n      this._statusElm.textContent =\n        currentText +\n        this._options.showCountText\n          .replace('{rowCount}', String(pagingInfo.totalRows))\n          .replace('{countBegin}', String(pageBegin + 1))\n          .replace('{countEnd}', String(Math.min(pageBegin + pagingInfo.pageSize, pagingInfo.totalRows)));\n    }\n  }\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  window.Slick.Controls = window.Slick.Controls || {};\n  window.Slick.Controls.Pager = SlickGridPager;\n}\n\n", "import type { AutoTooltipOption, Column } from '../models/index';\nimport { Utils as Utils_ } from '../slick.core';\nimport type { SlickGrid } from '../slick.grid';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst Utils = (IIFE_ONLY ? Slick.Utils : Utils_) as typeof Utils_;\n\n/**\n * AutoTooltips plugin to show/hide tooltips when columns are too narrow to fit content.\n */\nexport class SlickAutoTooltips {\n  // --\n  // public API\n  pluginName = 'AutoTooltips' as const;\n\n  // --\n  // protected props\n  protected _grid!: SlickGrid;\n  protected _options?: AutoTooltipOption\n  protected _defaults: AutoTooltipOption = {\n    enableForCells: true,\n    enableForHeaderCells: false,\n    maxToolTipLength: undefined,\n    replaceExisting: true\n  };\n\n  /**\n   * Constructor of the SlickGrid 3rd party plugin, it can optionally receive options\n   * @param {boolean} [options.enableForCells=true]        - Enable tooltip for grid cells\n   * @param {boolean} [options.enableForHeaderCells=false] - Enable tooltip for header cells\n   * @param {number}  [options.maxToolTipLength=null]      - The maximum length for a tooltip\n   * @param {boolean} [options.replaceExisting=null]       - Allow preventing custom tooltips from being overwritten by auto tooltips\n   */\n  constructor(options?: AutoTooltipOption) {\n    this._options = options;\n  }\n\n  /**\n   * Initialize plugin.\n   */\n  init(grid: SlickGrid) {\n    this._options = Utils.extend(true, {}, this._defaults, this._options);\n    this._grid = grid;\n    if (this._options?.enableForCells) {\n      this._grid.onMouseEnter.subscribe(this.handleMouseEnter.bind(this));\n    }\n    if (this._options?.enableForHeaderCells) {\n      this._grid.onHeaderMouseEnter.subscribe(this.handleHeaderMouseEnter.bind(this));\n    }\n  }\n\n  /**\n   * Destroy plugin.\n   */\n  destroy() {\n    if (this._options?.enableForCells) {\n      this._grid.onMouseEnter.unsubscribe(this.handleMouseEnter.bind(this));\n    }\n    if (this._options?.enableForHeaderCells) {\n      this._grid.onHeaderMouseEnter.unsubscribe(this.handleHeaderMouseEnter.bind(this));\n    }\n  }\n\n  /**\n   * Handle mouse entering grid cell to add/remove tooltip.\n   * @param {MouseEvent} event - The event\n   */\n  protected handleMouseEnter(event: MouseEvent) {\n    const cell = this._grid.getCellFromEvent(event);\n    if (cell) {\n      let node: HTMLElement | null = this._grid.getCellNode(cell.row, cell.cell);\n      let text;\n      if (this._options && node && (!node.title || this._options?.replaceExisting)) {\n        if (node.clientWidth < node.scrollWidth) {\n          text = node.textContent?.trim() ?? '';\n          if (this._options && (this._options.maxToolTipLength && text.length > this._options.maxToolTipLength)) {\n            text = text.substring(0, this._options.maxToolTipLength - 3) + '...';\n          }\n        } else {\n          text = '';\n        }\n        node = null;\n      }\n    }\n  }\n\n  /**\n   * Handle mouse entering header cell to add/remove tooltip.\n   * @param {MouseEvent} event   - The event\n   * @param {object} args.column - The column definition\n   */\n  protected handleHeaderMouseEnter(event: MouseEvent, args: { column: Column; }) {\n    const column = args.column;\n    let node: HTMLDivElement | null;\n    const targetElm = (event.target as HTMLDivElement);\n\n    if (targetElm) {\n      node = targetElm.closest<HTMLDivElement>('.slick-header-column');\n      if (node && !(column?.toolTip)) {\n        node.title = (targetElm.clientWidth < node.clientWidth) ? column?.name ?? '' : '';\n      }\n    }\n    node = null;\n  }\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      AutoTooltips: SlickAutoTooltips\n    }\n  });\n}\n", "import type { CssStyleHash } from '../models/index';\nimport { SlickEvent as SlickEvent_, keyCode as keyCode_, Utils as Utils_, SlickRange } from '../slick.core';\nimport type { SlickGrid } from '../slick.grid';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst keyCode = (IIFE_ONLY ? Slick.keyCode : keyCode_);\nconst SlickEvent = (IIFE_ONLY ? Slick.Event : SlickEvent_);\nconst Utils = (IIFE_ONLY ? Slick.Utils : Utils_) as typeof Utils_;\n\n/**\n * This manager enables users to copy/paste cell data\n */\nexport class SlickCellCopyManager {\n  // --\n  // public API\n  pluginName = 'CellCopyManager' as const;\n  onCopyCells = new SlickEvent<{ ranges: SlickRange }>();\n  onCopyCancelled = new SlickEvent<{ ranges: SlickRange }>();\n  onPasteCells = new SlickEvent<{ from: SlickRange; to: SlickRange; }>();\n\n  // --\n  // protected props\n  protected _grid!: SlickGrid;\n  protected _copiedRanges?: SlickRange | null;\n\n  init(grid: SlickGrid) {\n    this._grid = grid;\n    this._grid.onKeyDown.subscribe(this.handleKeyDown.bind(this));\n  }\n\n  destroy() {\n    this._grid.onKeyDown.unsubscribe(this.handleKeyDown.bind(this));\n  }\n\n  protected handleKeyDown(e: KeyboardEvent) {\n    let ranges;\n    if (!this._grid.getEditorLock().isActive()) {\n      if (e.which == keyCode.ESCAPE) {\n        if (this._copiedRanges) {\n          e.preventDefault();\n          this.clearCopySelection();\n          this.onCopyCancelled.notify({ ranges: this._copiedRanges });\n          this._copiedRanges = null;\n        }\n      }\n\n      if (e.which == 67 && (e.ctrlKey || e.metaKey)) {\n        ranges = this._grid.getSelectionModel().getSelectedRanges();\n        if (ranges.length !== 0) {\n          e.preventDefault();\n          this._copiedRanges = ranges;\n          this.markCopySelection(ranges);\n          this.onCopyCells.notify({ ranges });\n        }\n      }\n\n      if (e.which == 86 && (e.ctrlKey || e.metaKey)) {\n        if (this._copiedRanges) {\n          e.preventDefault();\n          ranges = this._grid.getSelectionModel().getSelectedRanges();\n          this.onPasteCells.notify({ from: this._copiedRanges, to: ranges });\n          if (!this._grid.getOptions().preserveCopiedSelectionOnPaste) {\n            this.clearCopySelection();\n            this._copiedRanges = null;\n          }\n        }\n      }\n    }\n  }\n\n  protected markCopySelection(ranges: SlickRange[]) {\n    let columns = this._grid.getColumns();\n    let hash: CssStyleHash = {};\n    for (let i = 0; i < ranges.length; i++) {\n      for (let j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {\n        hash[j] = {};\n        for (let k = ranges[i].fromCell; k <= ranges[i].toCell; k++) {\n          hash[j][columns[k].id] = 'copied';\n        }\n      }\n    }\n    this._grid.setCellCssStyles('copy-manager', hash);\n  }\n\n  protected clearCopySelection() {\n    this._grid.removeCellCssStyles('copy-manager');\n  }\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      CellCopyManager: SlickCellCopyManager\n    }\n  });\n}\n", "import type { CellRange, Column, CssStyleHash, ExcelCopyBufferOption, ExternalCopyClipCommand } from '../models/index';\nimport type { SlickGrid } from '../slick.grid';\nimport { SlickEvent as SlickEvent_, Utils as Utils_ } from '../slick.core';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst SlickEvent = (IIFE_ONLY ? Slick.Event : SlickEvent_) as typeof SlickEvent_;\nconst Utils = (IIFE_ONLY ? Slick.Utils : Utils_) as typeof Utils_;\n\nconst CLEAR_COPY_SELECTION_DELAY = 2000;\nconst CLIPBOARD_PASTE_DELAY = 100;\n\n/***\n  This manager enables users to copy/paste data from/to an external Spreadsheet application\n  such as MS-Excel\u00AE or OpenOffice-Spreadsheet.\n\n  Since it is not possible to access directly the clipboard in javascript, the plugin uses\n  a trick to do it's job. After detecting the keystroke, we dynamically create a textarea\n  where the browser copies/pastes the serialized data.\n\n  options:\n    copiedCellStyle : sets the css className used for copied cells. default : \"copied\"\n    copiedCellStyleLayerKey : sets the layer key for setting css values of copied cells. default : \"copy-manager\"\n    dataItemColumnValueExtractor : option to specify a custom column value extractor function\n    dataItemColumnValueSetter : option to specify a custom column value setter function\n    clipboardCommandHandler : option to specify a custom handler for paste actions\n    includeHeaderWhenCopying : set to true and the plugin will take the name property from each column (which is usually what appears in your header) and put that as the first row of the text that's copied to the clipboard\n    bodyElement: option to specify a custom DOM element which to will be added the hidden textbox. It's useful if the grid is inside a modal dialog.\n    onCopyInit: optional handler to run when copy action initializes\n    onCopySuccess: optional handler to run when copy action is complete\n    newRowCreator: function to add rows to table if paste overflows bottom of table, if this function is not provided new rows will be ignored.\n    readOnlyMode: suppresses paste\n    headerColumnValueExtractor : option to specify a custom column header value extractor function\n*/\nexport class SlickCellExternalCopyManager {\n  // --\n  // public API\n  pluginName = 'CellExternalCopyManager' as const;\n\n  // --\n  // protected props\n  protected _grid!: SlickGrid;\n  protected _bodyElement: HTMLElement;\n  protected _copiedRanges: CellRange[] | null = null;\n  protected _clearCopyTI?: NodeJS.Timeout;\n  protected _clipCommand!: ExternalCopyClipCommand;\n  protected _copiedCellStyle: string;\n  protected _copiedCellStyleLayerKey: string;\n  protected _onCopyInit?: () => void;\n  protected _onCopySuccess?: (rowCount: number) => void;\n  protected _options: ExcelCopyBufferOption;\n\n  protected keyCodes = {\n    'C': 67,\n    'V': 86,\n    'ESC': 27,\n    'INSERT': 45\n  };\n\n  onCopyCells = new SlickEvent();\n  onCopyCancelled = new SlickEvent();\n  onPasteCells = new SlickEvent();\n\n  constructor(options: ExcelCopyBufferOption) {\n    this._options = options || {};\n    this._copiedCellStyleLayerKey = this._options.copiedCellStyleLayerKey || 'copy-manager';\n    this._copiedCellStyle = this._options.copiedCellStyle || 'copied';\n    this._bodyElement = this._options.bodyElement || document.body;\n    this._onCopyInit = this._options.onCopyInit || undefined;\n    this._onCopySuccess = this._options.onCopySuccess || undefined;\n  }\n\n  init(grid: SlickGrid) {\n    this._grid = grid;\n    this._grid.onKeyDown.subscribe(this.handleKeyDown.bind(this));\n\n    // we need a cell selection model\n    const cellSelectionModel = grid.getSelectionModel();\n    if (!cellSelectionModel) {\n      throw new Error('Selection model is mandatory for this plugin. Please set a selection model on the grid before adding this plugin: grid.setSelectionModel(new Slick.CellSelectionModel())');\n    }\n    // we give focus on the grid when a selection is done on it.\n    // without this, if the user selects a range of cell without giving focus on a particular cell, the grid doesn't get the focus and key stroke handles (ctrl+c) don't work\n    cellSelectionModel.onSelectedRangesChanged.subscribe(() => {\n      if (!this._grid.getEditorLock().isActive()) {\n        this._grid.focus();\n      }\n    });\n  }\n\n  destroy() {\n    this._grid.onKeyDown.unsubscribe(this.handleKeyDown.bind(this));\n  }\n\n  protected getHeaderValueForColumn(columnDef: Column) {\n    if (this._options.headerColumnValueExtractor) {\n      let val = this._options.headerColumnValueExtractor(columnDef);\n\n      if (val) { return val; }\n    }\n\n    return columnDef.name;\n  }\n\n  protected getDataItemValueForColumn(item: any, columnDef: Column, event: Event): string {\n    if (typeof this._options.dataItemColumnValueExtractor === 'function') {\n      const val = this._options.dataItemColumnValueExtractor(item, columnDef) as string | null;\n      if (val) {\n        return val;\n      }\n    }\n\n    let retVal = '';\n\n    // if a custom getter is not defined, we call serializeValue of the editor to serialize\n    if (columnDef?.editor) {\n      const tmpP = document.createElement('p');\n      const editor = new (columnDef.editor as any)({\n        container: tmpP,  // a dummy container\n        column: columnDef,\n        event,\n        position: { top: 0, left: 0 },  // a dummy position required by some editors\n        grid: this._grid,\n      });\n      editor.loadValue(item);\n      retVal = editor.serializeValue();\n      editor.destroy();\n      tmpP.remove();\n    } else {\n      retVal = item[columnDef.field || ''];\n    }\n\n    return retVal;\n  }\n\n  protected setDataItemValueForColumn(item: any, columnDef: Column, value: string): null | string | void {\n    if (columnDef.denyPaste) {\n      return null;\n    }\n\n    if (this._options.dataItemColumnValueSetter) {\n      return this._options.dataItemColumnValueSetter(item, columnDef, value) as string;\n    }\n\n    // if a custom setter is not defined, we call applyValue of the editor to unserialize\n    if (columnDef.editor) {\n      const tmpDiv = document.createElement('div');\n      const editor = new (columnDef.editor as any)({\n        container: tmpDiv, // a dummy container\n        column: columnDef,\n        position: { top: 0, left: 0 },  // a dummy position required by some editors\n        grid: this._grid\n      });\n      editor.loadValue(item);\n      editor.applyValue(item, value);\n      editor.destroy();\n      tmpDiv.remove();\n    } else {\n      item[columnDef.field] = value;\n    }\n  }\n\n\n  protected _createTextBox(innerText: string) {\n    let ta = document.createElement('textarea');\n    ta.style.position = 'absolute';\n    ta.style.left = '-1000px';\n    ta.style.top = document.body.scrollTop + 'px';\n    ta.value = innerText;\n    this._bodyElement.appendChild(ta);\n    ta.select();\n\n    return ta;\n  }\n\n  protected _decodeTabularData(grid: SlickGrid, ta: HTMLTextAreaElement) {\n    const columns = grid.getColumns();\n    const clipText = ta.value;\n    const clipRows = clipText.split(/[\\n\\f\\r]/);\n    // trim trailing CR if present\n    if (clipRows[clipRows.length - 1] === '') {\n      clipRows.pop();\n    }\n\n    let j = 0;\n    const clippedRange: any[] = [];\n\n    this._bodyElement.removeChild(ta);\n    for (let i = 0; i < clipRows.length; i++) {\n      if (clipRows[i] !== '') {\n        clippedRange[j++] = clipRows[i].split('\\t');\n      } else {\n        clippedRange[j++] = [''];\n      }\n    }\n    const selectedCell = grid.getActiveCell();\n    const ranges = grid.getSelectionModel().getSelectedRanges();\n    const selectedRange = ranges && ranges.length ? ranges[0] : null;   // pick only one selection\n    let activeRow: number;\n    let activeCell: number;\n\n    if (selectedRange) {\n      activeRow = selectedRange.fromRow;\n      activeCell = selectedRange.fromCell;\n    } else if (selectedCell) {\n      activeRow = selectedCell.row;\n      activeCell = selectedCell.cell;\n    } else {\n      // we don't know where to paste\n      return;\n    }\n\n    let oneCellToMultiple = false;\n    let destH = clippedRange.length;\n    let destW = clippedRange.length ? clippedRange[0].length : 0;\n    if (clippedRange.length == 1 && clippedRange[0].length == 1 && selectedRange) {\n      oneCellToMultiple = true;\n      destH = selectedRange.toRow - selectedRange.fromRow + 1;\n      destW = selectedRange.toCell - selectedRange.fromCell + 1;\n    }\n    const availableRows = (grid.getData() as any[]).length - (activeRow || 0);\n    let addRows = 0;\n\n    // ignore new rows if we don't have a \"newRowCreator\"\n    if (availableRows < destH && typeof this._options.newRowCreator === 'function') {\n      const d = grid.getData<any[]>();\n      for (addRows = 1; addRows <= destH - availableRows; addRows++) {\n        d.push({});\n      }\n      grid.setData(d);\n      grid.render();\n    }\n\n    const overflowsBottomOfGrid = (activeRow || 0) + destH > grid.getDataLength();\n    if (this._options.newRowCreator && overflowsBottomOfGrid) {\n      let newRowsNeeded = (activeRow || 0) + destH - grid.getDataLength();\n      this._options.newRowCreator(newRowsNeeded);\n    }\n\n    this._clipCommand = {\n      isClipboardCommand: true,\n      clippedRange,\n      oldValues: [],\n      cellExternalCopyManager: this,\n      _options: this._options,\n      setDataItemValueForColumn: this.setDataItemValueForColumn.bind(this),\n      markCopySelection: this.markCopySelection.bind(this),\n      oneCellToMultiple,\n      activeRow,\n      activeCell,\n      destH,\n      destW,\n      maxDestY: grid.getDataLength(),\n      maxDestX: grid.getColumns().length,\n      h: 0,\n      w: 0,\n\n      execute: () => {\n        this._clipCommand.h = 0;\n        for (let y = 0; y < this._clipCommand.destH; y++) {\n          this._clipCommand.oldValues[y] = [];\n          this._clipCommand.w = 0;\n          this._clipCommand.h++;\n          for (let x = 0; x < this._clipCommand.destW; x++) {\n            this._clipCommand.w++;\n            let desty = activeRow + y;\n            let destx = activeCell + x;\n\n            if (desty < this._clipCommand.maxDestY && destx < this._clipCommand.maxDestX) {\n              let dt = grid.getDataItem(desty);\n              this._clipCommand.oldValues[y][x] = dt[columns[destx]['field']];\n              if (oneCellToMultiple)\n                this._clipCommand.setDataItemValueForColumn(dt, columns[destx], clippedRange[0][0]);\n              else\n                this._clipCommand.setDataItemValueForColumn(dt, columns[destx], clippedRange[y] ? clippedRange[y][x] : '');\n              grid.updateCell(desty, destx);\n              grid.onCellChange.notify({\n                row: desty,\n                cell: destx,\n                item: dt,\n                grid,\n                column: {} as Column\n              });\n\n            }\n          }\n        }\n\n        const bRange = {\n          fromCell: activeCell,\n          fromRow: activeRow,\n          toCell: activeCell + this._clipCommand.w - 1,\n          toRow: activeRow + this._clipCommand.h - 1\n        };\n\n        this.markCopySelection([bRange]);\n        grid.getSelectionModel().setSelectedRanges([bRange]);\n        this.onPasteCells.notify({ ranges: [bRange] });\n      },\n\n      undo: () => {\n        for (let y = 0; y < this._clipCommand.destH; y++) {\n          for (let x = 0; x < this._clipCommand.destW; x++) {\n            let desty = activeRow + y;\n            let destx = activeCell + x;\n\n            if (desty < this._clipCommand.maxDestY && destx < this._clipCommand.maxDestX) {\n              let dt = grid.getDataItem(desty);\n              if (oneCellToMultiple)\n                this._clipCommand.setDataItemValueForColumn(dt, columns[destx], this._clipCommand.oldValues[0][0]);\n              else\n                this._clipCommand.setDataItemValueForColumn(dt, columns[destx], this._clipCommand.oldValues[y][x]);\n              grid.updateCell(desty, destx);\n              grid.onCellChange.notify({\n                row: desty,\n                cell: destx,\n                item: dt,\n                grid: grid,\n                column: {} as Column\n              });\n            }\n          }\n        }\n\n        const bRange = {\n          fromCell: activeCell,\n          fromRow: activeRow,\n          toCell: activeCell + this._clipCommand.w - 1,\n          toRow: activeRow + this._clipCommand.h - 1\n        };\n\n        this.markCopySelection([bRange]);\n        grid.getSelectionModel().setSelectedRanges([bRange]);\n        if (typeof this._options.onPasteCells === 'function') {\n          this.onPasteCells.notify({ ranges: [bRange] });\n        }\n\n        if (addRows > 1) {\n          let d = grid.getData();\n          for (; addRows > 1; addRows--)\n            d.splice(d.length - 1, 1);\n          grid.setData(d);\n          grid.render();\n        }\n      }\n    };\n\n    if (typeof this._options.clipboardCommandHandler === 'function') {\n      this._options.clipboardCommandHandler(this._clipCommand);\n    }\n    else {\n      this._clipCommand.execute();\n    }\n  }\n\n  protected handleKeyDown(e: KeyboardEvent): boolean | void {\n    let ranges: CellRange[];\n    if (!this._grid.getEditorLock().isActive() || this._grid.getOptions().autoEdit) {\n      if (e.which == this.keyCodes.ESC) {\n        if (this._copiedRanges) {\n          e.preventDefault();\n          this.clearCopySelection();\n          this.onCopyCancelled.notify({ ranges: this._copiedRanges });\n          this._copiedRanges = null;\n        }\n      }\n\n      if ((e.which === this.keyCodes.C || e.which === this.keyCodes.INSERT) && (e.ctrlKey || e.metaKey) && !e.shiftKey) {    // CTRL+C or CTRL+INS\n        if (typeof this._onCopyInit === 'function') {\n          this._onCopyInit.call(this);\n        }\n        ranges = this._grid.getSelectionModel().getSelectedRanges();\n        if (ranges.length !== 0) {\n          this._copiedRanges = ranges;\n          this.markCopySelection(ranges);\n          this.onCopyCells.notify({ ranges: ranges });\n\n          let columns = this._grid.getColumns();\n          let clipText = '';\n\n          for (let rg = 0; rg < ranges.length; rg++) {\n            let range = ranges[rg];\n            let clipTextRows: string[] = [];\n            for (let i = range.fromRow; i < range.toRow + 1; i++) {\n              let clipTextCells: string[] = [];\n              let dt = this._grid.getDataItem(i);\n\n              if (clipTextRows.length === 0 && this._options.includeHeaderWhenCopying) {\n                let clipTextHeaders: string[] = [];\n                for (let j = range.fromCell; j < range.toCell + 1; j++) {\n                  if (columns[j].name!.length > 0 && !columns[j].hidden) {\n                    clipTextHeaders.push(this.getHeaderValueForColumn(columns[j]));\n                  }\n                }\n                clipTextRows.push(clipTextHeaders.join('\\t'));\n              }\n\n              for (let j = range.fromCell; j < range.toCell + 1; j++) {\n                if (columns[j].name!.length > 0 && !columns[j].hidden) {\n                  clipTextCells.push(this.getDataItemValueForColumn(dt, columns[j], e));\n                }\n              }\n              clipTextRows.push(clipTextCells.join('\\t'));\n            }\n            clipText += clipTextRows.join('\\r\\n') + '\\r\\n';\n          }\n\n          if ((window as any).clipboardData) {\n            (window as any).clipboardData.setData('Text', clipText);\n            return true;\n          }\n          else {\n            const focusEl = document.activeElement as HTMLElement;\n            const ta = this._createTextBox(clipText);\n            ta.focus();\n\n            setTimeout(() => {\n              this._bodyElement.removeChild(ta);\n              // restore focus when possible\n              focusEl\n                ? focusEl.focus()\n                : console.log('No element to restore focus to after copy?');\n            }, this._options?.clipboardPasteDelay ?? CLIPBOARD_PASTE_DELAY);\n\n            if (typeof this._onCopySuccess === 'function') {\n              let rowCount = 0;\n              // If it's cell selection, use the toRow/fromRow fields\n              if (ranges.length === 1) {\n                rowCount = (ranges[0].toRow + 1) - ranges[0].fromRow;\n              } else {\n                rowCount = ranges.length;\n              }\n              this._onCopySuccess(rowCount);\n            }\n\n            return false;\n          }\n        }\n      }\n\n      if (!this._options.readOnlyMode && (\n        (e.which === this.keyCodes.V && (e.ctrlKey || e.metaKey) && !e.shiftKey)\n        || (e.which === this.keyCodes.INSERT && e.shiftKey && !e.ctrlKey)\n      )) {    // CTRL+V or Shift+INS\n        const ta = this._createTextBox('');\n        setTimeout(() => this._decodeTabularData(this._grid, ta), 100);\n        return false;\n      }\n    }\n  }\n\n  protected markCopySelection(ranges: CellRange[]) {\n    this.clearCopySelection();\n\n    let columns = this._grid.getColumns();\n    let hash: CssStyleHash = {};\n    for (let i = 0; i < ranges.length; i++) {\n      for (let j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {\n        hash[j] = {};\n        for (let k = ranges[i].fromCell; k <= ranges[i].toCell && k < columns.length; k++) {\n          hash[j][columns[k].id] = this._copiedCellStyle;\n        }\n      }\n    }\n    this._grid.setCellCssStyles(this._copiedCellStyleLayerKey, hash);\n    clearTimeout(this._clearCopyTI as NodeJS.Timeout);\n    this._clearCopyTI = setTimeout(() => {\n      this.clearCopySelection();\n    }, this._options?.clearCopySelectionDelay || CLEAR_COPY_SELECTION_DELAY);\n  }\n\n  clearCopySelection() {\n    this._grid.removeCellCssStyles(this._copiedCellStyleLayerKey);\n  }\n\n  setIncludeHeaderWhenCopying(includeHeaderWhenCopying: boolean) {\n    this._options.includeHeaderWhenCopying = includeHeaderWhenCopying;\n  }\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      CellExternalCopyManager: SlickCellExternalCopyManager\n    }\n  });\n}\n", "import {\n  BindingEventService as BindingEventService_,\n  SlickEvent as SlickEvent_,\n  SlickEventData as SlickEventData_,\n  SlickEventHandler as SlickEventHandler_,\n  Utils as Utils_\n} from '../slick.core';\nimport type {\n  CellMenuOption,\n  DOMMouseOrTouchEvent,\n  GridOption,\n  MenuCommandItem,\n  MenuCommandItemCallbackArgs,\n  MenuFromCellCallbackArgs,\n  MenuOptionItem,\n  MenuOptionItemCallbackArgs\n} from '../models/index';\nimport type { SlickGrid } from '../slick.grid';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst SlickEventData = IIFE_ONLY ? Slick.EventData : SlickEventData_;\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : SlickEventHandler_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n/**\n * A plugin to add Menu on a Cell click (click on the cell that has the cellMenu object defined)\n * The \"cellMenu\" is defined in a Column Definition object\n * Similar to the ContextMenu plugin (could be used in combo),\n * except that it subscribes to the cell \"onClick\" event (regular mouse click or touch).\n *\n * A general use of this plugin is for an Action Dropdown Menu to do certain things on the row that was clicked\n * You can use it to change the cell data property through a list of Options AND/OR through a list of Commands.\n *\n * USAGE:\n *\n * Add the slick.cellMenu.(js|css) files and register it with the grid.\n *\n * To specify a menu in a column header, extend the column definition like so:\n * var cellMenuPlugin = new Slick.Plugins.CellMenu(columns, grid, options);\n *\n * Available cellMenu options, by defining a cellMenu object:\n *\n *  var columns = [\n *    {\n *      id: \"action\", name: \"Action\", field: \"action\", formatter: fakeButtonFormatter,\n *      cellMenu: {\n *        optionTitle: \"Change Effort Driven\",\n *        optionItems: [\n *          { option: true, title: \"True\", iconCssClass: 'checkmark' },\n *          { option: false, title: \"False\" }\n *        ],\n *        commandTitle: \"Commands\",\n *        commandItems: [\n *          { command: \"delete-row\", title: \"Delete Row\", iconCssClass: \"sgi sgi-close\", cssClass: 'bold', textCssClass: \"red\" },\n *          { divider: true },\n *          \"divider\" // you can pass \"divider\" as a string or an object\n *          { command: \"help\", title: \"Help\", iconCssClass: \"icon-help\" },\n *          { command: \"help\", title: \"Disabled Command\", disabled: true },\n *        ],\n *      }\n *    }\n *  ];\n *\n *\n * Available cellMenu properties:\n *    commandTitle:               Title of the Command section (optional)\n *    commandItems:               Array of Command item objects (command/title pair)\n *    optionTitle:                Title of the Option section (optional)\n *    optionItems:                Array of Options item objects (option/title pair)\n *    hideCloseButton:            Hide the Close button on top right (defaults to false)\n *    hideCommandSection:         Hide the Commands section even when the commandItems array is filled (defaults to false)\n *    hideMenuOnScroll:           Do we want to hide the Cell Menu when a scrolling event occurs (defaults to true)?\n *    hideOptionSection:          Hide the Options section even when the optionItems array is filled (defaults to false)\n *    maxHeight:                  Maximum height that the drop menu will have, can be a number (250) or text (\"none\")\n *    width:                      Width that the drop menu will have, can be a number (250) or text (defaults to \"auto\")\n *    autoAdjustDrop:             Auto-align dropup or dropdown menu to the left or right depending on grid viewport available space (defaults to true)\n *    autoAdjustDropOffset:       Optionally add an offset to the auto-align of the drop menu (defaults to 0)\n *    autoAlignSide:              Auto-align drop menu to the left or right depending on grid viewport available space (defaults to true)\n *    autoAlignSideOffset:        Optionally add an offset to the left/right side auto-align (defaults to 0)\n *    menuUsabilityOverride:      Callback method that user can override the default behavior of enabling/disabling the menu from being usable (must be combined with a custom formatter)\n *\n *\n * Available menu Command/Option item properties:\n *    action:                     Optionally define a callback function that gets executed when item is chosen (and/or use the onCommand event)\n *    command:                    A command identifier to be passed to the onCommand event handlers (when using \"commandItems\").\n *    option:                     An option to be passed to the onOptionSelected event handlers (when using \"optionItems\").\n *    title:                      Menu item text label.\n *    divider:                    Boolean which tells if the current item is a divider, not an actual command. You could also pass \"divider\" instead of an object\n *    disabled:                   Whether the item/command is disabled.\n *    hidden:                     Whether the item/command is hidden.\n *    tooltip:                    Item tooltip.\n *    cssClass:                   A CSS class to be added to the menu item container.\n *    iconCssClass:               A CSS class to be added to the menu item icon.\n *    textCssClass:               A CSS class to be added to the menu item text.\n *    iconImage:                  A url to the icon image.\n *    itemVisibilityOverride:     Callback method that user can override the default behavior of showing/hiding an item from the list\n *    itemUsabilityOverride:      Callback method that user can override the default behavior of enabling/disabling an item from the list\n *\n *\n * The plugin exposes the following events:\n *\n *    onAfterMenuShow: Fired after the menu is shown.  You can customize the menu or dismiss it by returning false.\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *\n *    onBeforeMenuShow: Fired before the menu is shown.  You can customize the menu or dismiss it by returning false.\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *\n *    onBeforeMenuClose: Fired when the menu is closing.\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *            menu:         Menu DOM element\n *\n *    onCommand: Fired on menu option clicked from the Command items list\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *            command:      Menu command identified.\n *            item:         Menu item selected\n *            column:    Cell Column definition\n *            dataContext:  Cell Data Context (data object)\n *\n *    onOptionSelected: Fired on menu option clicked from the Option items list\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *            option:       Menu option selected.\n *            item:         Menu item selected\n *            column:    Cell Column definition\n *            dataContext:  Cell Data Context (data object)\n *\n *\n * @param options {Object} Cell Menu Options\n * @class Slick.Plugins.CellMenu\n */\nexport class SlickCellMenu {\n  // --\n  // public API\n  pluginName = 'CellMenu' as const;\n  onAfterMenuShow = new SlickEvent<MenuFromCellCallbackArgs>();\n  onBeforeMenuShow = new SlickEvent<MenuFromCellCallbackArgs>();\n  onBeforeMenuClose = new SlickEvent<MenuFromCellCallbackArgs>();\n  onCommand = new SlickEvent<MenuCommandItemCallbackArgs>();\n  onOptionSelected = new SlickEvent<MenuOptionItemCallbackArgs>();\n\n  // --\n  // protected props\n  protected _cellMenuProperties: CellMenuOption;\n  protected _currentCell = -1;\n  protected _currentRow = -1;\n  protected _grid!: SlickGrid;\n  protected _gridOptions!: GridOption;\n  protected _gridUid = '';\n  protected _handler = new EventHandler();\n  protected _commandTitleElm?: HTMLSpanElement;\n  protected _optionTitleElm?: HTMLSpanElement;\n  protected _menuElm?: HTMLDivElement | null;\n  protected _bindingEventService = new BindingEventService();\n  protected _defaults: CellMenuOption = {\n    autoAdjustDrop: true,     // dropup/dropdown\n    autoAlignSide: true,      // left/right\n    autoAdjustDropOffset: 0,\n    autoAlignSideOffset: 0,\n    hideMenuOnScroll: true,\n    maxHeight: 'none',\n    width: 'auto',\n  };\n\n  constructor(optionProperties: Partial<CellMenuOption>) {\n    this._cellMenuProperties = Utils.extend({}, this._defaults, optionProperties);\n  }\n\n  protected init(grid: SlickGrid) {\n    this._grid = grid;\n    this._gridOptions = grid.getOptions();\n    this._gridUid = (grid && grid.getUID) ? grid.getUID() : '';\n    this._handler.subscribe(this._grid.onClick, this.handleCellClick.bind(this));\n    if (this._cellMenuProperties.hideMenuOnScroll) {\n      this._handler.subscribe(this._grid.onScroll, this.destroyMenu.bind(this));\n    }\n  }\n\n  setOptions(newOptions: Partial<CellMenuOption>) {\n    this._cellMenuProperties = Utils.extend({}, this._cellMenuProperties, newOptions);\n  }\n\n  destroy() {\n    this.onAfterMenuShow.unsubscribe();\n    this.onBeforeMenuShow.unsubscribe();\n    this.onBeforeMenuClose.unsubscribe();\n    this.onCommand.unsubscribe();\n    this.onOptionSelected.unsubscribe();\n    this._handler.unsubscribeAll();\n    this._bindingEventService.unbindAll();\n    this._menuElm?.remove();\n    this._commandTitleElm = null as any;\n    this._optionTitleElm = null as any;\n    this._menuElm = null as any;\n  }\n\n  protected createMenu(e: DOMMouseOrTouchEvent<HTMLDivElement>) {\n    let cell = this._grid.getCellFromEvent(e);\n    this._currentCell = cell?.cell ?? 0;\n    this._currentRow = cell?.row ?? 0;\n    let columnDef = this._grid.getColumns()[this._currentCell];\n    let dataContext = this._grid.getDataItem(this._currentRow);\n\n    let commandItems = this._cellMenuProperties.commandItems || [];\n    let optionItems = this._cellMenuProperties.optionItems || [];\n\n    // make sure there's at least something to show before creating the Cell Menu\n    if (!columnDef || !columnDef.cellMenu || (!commandItems.length && !optionItems.length)) {\n      return;\n    }\n\n    // delete any prior Cell Menu\n    this.destroyMenu();\n\n    // Let the user modify the menu or cancel altogether,\n    // or provide alternative menu implementation.\n    if (this.onBeforeMenuShow.notify({\n      cell: this._currentCell,\n      row: this._currentRow,\n      grid: this._grid\n    }, e, this).getReturnValue() == false) {\n      return;\n    }\n\n    // create a new cell menu\n    let maxHeight = isNaN(this._cellMenuProperties.maxHeight as number) ? this._cellMenuProperties.maxHeight : `${this._cellMenuProperties.maxHeight ?? 0}px`;\n    let width = isNaN(this._cellMenuProperties.width as number) ? this._cellMenuProperties.width : `${this._cellMenuProperties.maxWidth ?? 0}px`;\n\n    this._menuElm = document.createElement('div');\n    this._menuElm.className = `slick-cell-menu ${this._gridUid}`;\n    this._menuElm.role = 'menu';\n    if (width) {\n      this._menuElm.style.width = width as string;\n    }\n    if (maxHeight) {\n      this._menuElm.style.maxHeight = maxHeight as string;\n    }\n    this._menuElm.style.top = `${e.pageY + 5}px`;\n    this._menuElm.style.left = `${e.pageX}px`;\n    this._menuElm.style.display = 'none';\n\n    const closeButtonElm = document.createElement('button');\n    closeButtonElm.type = 'button';\n    closeButtonElm.className = 'close';\n    closeButtonElm.dataset.dismiss = 'slick-cell-menu';\n    closeButtonElm.ariaLabel = 'Close';\n\n    const spanCloseElm = document.createElement('span');\n    spanCloseElm.className = 'close';\n    spanCloseElm.ariaHidden = 'true';\n    spanCloseElm.innerHTML = '&times;';\n    closeButtonElm.appendChild(spanCloseElm);\n\n    // -- Option List section\n    if (!this._cellMenuProperties.hideOptionSection && optionItems.length > 0) {\n      const optionMenuElm = document.createElement('div');\n      optionMenuElm.className = 'slick-cell-menu-option-list';\n      optionMenuElm.role = 'menu';\n\n      if (!this._cellMenuProperties.hideCloseButton) {\n        this._bindingEventService.bind(closeButtonElm, 'click', this.handleCloseButtonClicked.bind(this) as EventListener);\n        this._menuElm.appendChild(closeButtonElm);\n      }\n      this._menuElm.appendChild(optionMenuElm)\n\n      this.populateOptionItems(\n        this._cellMenuProperties,\n        optionMenuElm,\n        optionItems,\n        { cell: this._currentCell, row: this._currentRow, column: columnDef, dataContext: dataContext, grid: this._grid }\n      );\n    }\n\n    // -- Command List section\n    if (!this._cellMenuProperties.hideCommandSection && commandItems.length > 0) {\n      const commandMenuElm = document.createElement('div');\n      commandMenuElm.className = 'slick-cell-menu-command-list';\n      commandMenuElm.role = 'menu';\n\n      if (!this._cellMenuProperties.hideCloseButton && (optionItems.length === 0 || this._cellMenuProperties.hideOptionSection)) {\n        this._bindingEventService.bind(closeButtonElm, 'click', this.handleCloseButtonClicked.bind(this) as EventListener);\n        this._menuElm.appendChild(closeButtonElm);\n      }\n\n      this._menuElm.appendChild(commandMenuElm);\n      this.populateCommandItems(\n        this._cellMenuProperties,\n        commandMenuElm,\n        commandItems,\n        { cell: this._currentCell, row: this._currentRow, column: columnDef, dataContext: dataContext, grid: this._grid }\n      );\n    }\n\n    this._menuElm.style.display = 'block';\n    document.body.appendChild(this._menuElm);\n\n    if (this.onAfterMenuShow.notify({\n      cell: this._currentCell,\n      row: this._currentRow,\n      grid: this._grid\n    }, e, this).getReturnValue() == false) {\n      return;\n    }\n\n    return this._menuElm;\n  }\n\n  protected handleCloseButtonClicked(e: DOMMouseOrTouchEvent<HTMLButtonElement>) {\n    if (!e.defaultPrevented) {\n      this.destroyMenu(e);\n    }\n  }\n\n  destroyMenu(e?: Event, args?: { cell: number; row: number; }) {\n    this._menuElm = this._menuElm || document.querySelector(`.slick-cell-menu.${this._gridUid}`);\n\n    if (this._menuElm?.remove) {\n      if (this.onBeforeMenuClose.notify({\n        cell: args?.cell ?? 0,\n        row: args?.row ?? 0,\n        grid: this._grid,\n      }, e, this).getReturnValue() == false) {\n        return;\n      }\n      this._menuElm.remove();\n      this._menuElm = null as any;\n    }\n  }\n\n  /**\n   * Reposition the menu drop (up/down) and the side (left/right)\n   * @param {*} event\n   */\n  repositionMenu(e: DOMMouseOrTouchEvent<HTMLDivElement>) {\n    if (this._menuElm && e.target) {\n      const parentElm = e.target.closest('.slick-cell') as HTMLDivElement;\n      const parentOffset = (parentElm && Utils.offset(parentElm));\n      let menuOffsetLeft = parentElm ? parentOffset?.left ?? 0 : e.pageX;\n      let menuOffsetTop = parentElm ? parentOffset?.top ?? 0 : e.pageY;\n      const parentCellWidth = parentElm.offsetWidth || 0;\n      const menuHeight = this._menuElm && this._menuElm.offsetHeight || 0;\n      const menuWidth = this._menuElm && this._menuElm.offsetWidth || this._cellMenuProperties.width || 0;\n      const rowHeight = this._gridOptions.rowHeight;\n      const dropOffset = this._cellMenuProperties.autoAdjustDropOffset;\n      const sideOffset = this._cellMenuProperties.autoAlignSideOffset;\n\n      // if autoAdjustDrop is enable, we first need to see what position the drop will be located (defaults to bottom)\n      // without necessary toggling it's position just yet, we just want to know the future position for calculation\n      if (this._cellMenuProperties.autoAdjustDrop) {\n        // since we reposition menu below slick cell, we need to take it in consideration and do our calculation from that element\n        const spaceBottom = Utils.calculateAvailableSpace(parentElm).bottom;\n        const spaceTop = Utils.calculateAvailableSpace(parentElm).top;\n        const spaceBottomRemaining = spaceBottom + dropOffset - rowHeight;\n        const spaceTopRemaining = spaceTop - dropOffset + rowHeight;\n        const dropPosition = (spaceBottomRemaining < menuHeight && spaceTopRemaining > spaceBottomRemaining) ? 'top' : 'bottom';\n        if (dropPosition === 'top') {\n          this._menuElm.classList.remove('dropdown');\n          this._menuElm.classList.add('dropup');\n          menuOffsetTop = menuOffsetTop - menuHeight - dropOffset;\n        } else {\n          this._menuElm.classList.remove('dropup');\n          this._menuElm.classList.add('dropdown');\n          menuOffsetTop = menuOffsetTop + rowHeight + dropOffset;\n        }\n      }\n\n      // when auto-align is set, it will calculate whether it has enough space in the viewport to show the drop menu on the right (default)\n      // if there isn't enough space on the right, it will automatically align the drop menu to the left (defaults to the right)\n      // to simulate an align left, we actually need to know the width of the drop menu\n      if (this._cellMenuProperties.autoAlignSide) {\n        let gridPos = this._grid.getGridPosition();\n        let dropSide = ((menuOffsetLeft + (+menuWidth)) >= gridPos.width) ? 'left' : 'right';\n        if (dropSide === 'left') {\n          this._menuElm.classList.remove('dropright');\n          this._menuElm.classList.add('dropleft');\n          menuOffsetLeft = (menuOffsetLeft - (+menuWidth - parentCellWidth) - sideOffset);\n        } else {\n          this._menuElm.classList.remove('dropleft');\n          this._menuElm.classList.add('dropright');\n          menuOffsetLeft = menuOffsetLeft + sideOffset;\n        }\n      }\n\n      // ready to reposition the menu\n      this._menuElm.style.top = `${menuOffsetTop}px`;\n      this._menuElm.style.left = `${menuOffsetLeft}px`;\n    }\n  }\n\n  protected handleCellClick(e: DOMMouseOrTouchEvent<HTMLDivElement>, args: MenuCommandItemCallbackArgs) {\n    if (e instanceof SlickEventData) {\n      e = (e as SlickEventData_).getNativeEvent();\n    }\n\n    let cell = this._grid.getCellFromEvent(e);\n    if (cell) {\n      let dataContext = this._grid.getDataItem(cell.row);\n      let columnDef = this._grid.getColumns()[cell.cell];\n\n      // prevent event from bubbling but only on column that has a cell menu defined\n      if (columnDef && columnDef.cellMenu) {\n        e.preventDefault();\n      }\n\n      // merge the cellMenu of the column definition with the default properties\n      this._cellMenuProperties = Utils.extend({}, this._cellMenuProperties, columnDef.cellMenu);\n\n      // run the override function (when defined), if the result is false it won't go further\n      args = args || {};\n      args.column = columnDef;\n      args.dataContext = dataContext;\n      args.grid = this._grid;\n      if (!this.runOverrideFunctionWhenExists<typeof args>(this._cellMenuProperties.menuUsabilityOverride, args)) {\n        return;\n      }\n\n      // create the DOM element\n      this._menuElm = this.createMenu(e);\n\n      // reposition the menu to where the user clicked\n      if (this._menuElm) {\n        this.repositionMenu(e);\n        this._menuElm.setAttribute('aria-expanded', 'true');\n        this._menuElm.style.display = 'block';\n      }\n\n      // Hide the menu on outside click.\n      this._bindingEventService.bind(document.body, 'mousedown', this.handleBodyMouseDown.bind(this) as EventListener);\n    }\n  }\n\n  protected handleBodyMouseDown(e: DOMMouseOrTouchEvent<HTMLDivElement>) {\n    if (this._menuElm != e.target && !(this._menuElm && this._menuElm.contains(e.target))) {\n      if (!e.defaultPrevented) {\n        this.closeMenu(e, { cell: this._currentCell, row: this._currentRow, grid: this._grid });\n      }\n    }\n  }\n\n  closeMenu(e: DOMMouseOrTouchEvent<HTMLDivElement>, args: MenuFromCellCallbackArgs) {\n    if (this._menuElm) {\n      if (this.onBeforeMenuClose.notify({\n        cell: args?.cell,\n        row: args?.row,\n        grid: this._grid,\n      }, e, this).getReturnValue() == false) {\n        return;\n      }\n      if (this._menuElm && this._menuElm.remove) {\n        this._menuElm.remove();\n        this._menuElm = null;\n      }\n    }\n  }\n\n  /** Construct the Option Items section. */\n  protected populateOptionItems(cellMenu: CellMenuOption, optionMenuElm: HTMLElement, optionItems: Array<MenuOptionItem | 'divider'>, args: any) {\n    if (!args || !optionItems || !cellMenu) {\n      return;\n    }\n\n    // user could pass a title on top of the Options section\n    if (cellMenu && cellMenu.optionTitle) {\n      this._optionTitleElm = document.createElement('div');\n      this._optionTitleElm.className = 'title';\n      this._optionTitleElm.textContent = cellMenu.optionTitle;\n      optionMenuElm.appendChild(this._optionTitleElm);\n    }\n\n    for (let i = 0, ln = optionItems.length; i < ln; i++) {\n      let addClickListener = true;\n      let item = optionItems[i];\n\n      // run each override functions to know if the item is visible and usable\n      let isItemVisible = this.runOverrideFunctionWhenExists<typeof args>((item as MenuOptionItem).itemVisibilityOverride, args);\n      let isItemUsable = this.runOverrideFunctionWhenExists<typeof args>((item as MenuOptionItem).itemUsabilityOverride, args);\n\n      // if the result is not visible then there's no need to go further\n      if (!isItemVisible) {\n        continue;\n      }\n\n      // when the override is defined, we need to use its result to update the disabled property\n      // so that \"handleMenuItemOptionClick\" has the correct flag and won't trigger an option clicked event\n      if (Object.prototype.hasOwnProperty.call(item, 'itemUsabilityOverride')) {\n        (item as MenuOptionItem).disabled = isItemUsable ? false : true;\n      }\n\n      const liElm = document.createElement('div');\n      liElm.className = 'slick-cell-menu-item';\n      liElm.role = 'menuitem';\n\n      if ((item as MenuOptionItem).divider || item === 'divider') {\n        liElm.classList.add('slick-cell-menu-item-divider');\n        addClickListener = false;\n      }\n\n      // if the item is disabled then add the disabled css class\n      if ((item as MenuOptionItem).disabled || !isItemUsable) {\n        liElm.classList.add('slick-cell-menu-item-disabled');\n      }\n\n      // if the item is hidden then add the hidden css class\n      if ((item as MenuOptionItem).hidden) {\n        liElm.classList.add('slick-cell-menu-item-hidden');\n      }\n\n      if ((item as MenuOptionItem).cssClass) {\n        liElm.classList.add(...(item as MenuOptionItem).cssClass!.split(' '));\n      }\n\n      if ((item as MenuOptionItem).tooltip) {\n        liElm.title = (item as MenuOptionItem).tooltip || '';\n      }\n\n      const iconElm = document.createElement('div');\n      iconElm.className = 'slick-cell-menu-icon';\n\n      liElm.appendChild(iconElm);\n\n      if ((item as MenuOptionItem).iconCssClass) {\n        iconElm.classList.add(...(item as MenuOptionItem).iconCssClass!.split(' '));\n      }\n\n      if ((item as MenuOptionItem).iconImage) {\n        iconElm.style.backgroundImage = `url(${(item as MenuOptionItem).iconImage})`;\n      }\n\n      const textElm = document.createElement('span');\n      textElm.className = 'slick-cell-menu-content';\n      textElm.textContent = (item as MenuOptionItem).title || '';\n\n      liElm.appendChild(textElm);\n\n      if ((item as MenuOptionItem).textCssClass) {\n        textElm.classList.add(...(item as MenuOptionItem).textCssClass!.split(' '));\n      }\n\n      optionMenuElm.appendChild(liElm);\n\n      if (addClickListener) {\n        this._bindingEventService.bind(liElm, 'click', this.handleMenuItemOptionClick.bind(this, item) as EventListener);\n      }\n    }\n  }\n\n  /** Construct the Command Items section. */\n  protected populateCommandItems(cellMenu: CellMenuOption, commandMenuElm: HTMLElement, commandItems: Array<MenuCommandItem | 'divider'>, args: any) {\n    if (!args || !commandItems || !cellMenu) {\n      return;\n    }\n\n    // user could pass a title on top of the Commands section\n    if (cellMenu?.commandTitle) {\n      this._commandTitleElm = document.createElement('div');\n      this._commandTitleElm.className = 'title';\n      this._commandTitleElm.textContent = cellMenu.commandTitle;\n      commandMenuElm.appendChild(this._commandTitleElm);\n    }\n\n    for (let i = 0, ln = commandItems.length; i < ln; i++) {\n      let addClickListener = true;\n      let item = commandItems[i];\n\n      // run each override functions to know if the item is visible and usable\n      let isItemVisible = this.runOverrideFunctionWhenExists<typeof args>((item as MenuCommandItem).itemVisibilityOverride, args);\n      let isItemUsable = this.runOverrideFunctionWhenExists<typeof args>((item as MenuCommandItem).itemUsabilityOverride, args);\n\n      // if the result is not visible then there's no need to go further\n      if (!isItemVisible) {\n        continue;\n      }\n\n      // when the override is defined, we need to use its result to update the disabled property\n      // so that \"handleMenuItemCommandClick\" has the correct flag and won't trigger a command clicked event\n      if (Object.prototype.hasOwnProperty.call(item, 'itemUsabilityOverride')) {\n        (item as MenuCommandItem).disabled = isItemUsable ? false : true;\n      }\n\n      const liElm = document.createElement('div');\n      liElm.className = 'slick-cell-menu-item';\n      liElm.role = 'menuitem';\n\n      if ((item as MenuCommandItem).divider || item === 'divider') {\n        liElm.classList.add('slick-cell-menu-item-divider');\n        addClickListener = false;\n      }\n\n      // if the item is disabled then add the disabled css class\n      if ((item as MenuCommandItem).disabled || !isItemUsable) {\n        liElm.classList.add('slick-cell-menu-item-disabled');\n      }\n\n      // if the item is hidden then add the hidden css class\n      if ((item as MenuCommandItem).hidden) {\n        liElm.classList.add('slick-cell-menu-item-hidden');\n      }\n\n      if ((item as MenuCommandItem).cssClass) {\n        liElm.classList.add(...(item as MenuCommandItem).cssClass!.split(' '));\n      }\n\n      if ((item as MenuCommandItem).tooltip) {\n        liElm.title = (item as MenuCommandItem).tooltip || '';\n      }\n\n      const iconElm = document.createElement('div');\n      iconElm.className = 'slick-cell-menu-icon';\n\n      liElm.appendChild(iconElm);\n\n      if ((item as MenuCommandItem).iconCssClass) {\n        iconElm.classList.add(...(item as MenuCommandItem).iconCssClass!.split(' '));\n      }\n\n      if ((item as MenuCommandItem).iconImage) {\n        iconElm.style.backgroundImage = `url(${(item as MenuCommandItem).iconImage})`;\n      }\n\n      const textElm = document.createElement('span');\n      textElm.className = 'slick-cell-menu-content';\n      textElm.textContent = (item as MenuCommandItem).title || '';\n\n      liElm.appendChild(textElm);\n\n      if ((item as MenuCommandItem).textCssClass) {\n        textElm.classList.add(...(item as MenuCommandItem).textCssClass!.split(' '));\n      }\n\n      commandMenuElm.appendChild(liElm);\n\n      if (addClickListener) {\n        this._bindingEventService.bind(liElm, 'click', this.handleMenuItemCommandClick.bind(this, item) as EventListener);\n      }\n    }\n  }\n\n  protected handleMenuItemCommandClick(item: MenuCommandItem | 'divider', e: DOMMouseOrTouchEvent<HTMLDivElement>) {\n    if (!item || (item as MenuCommandItem).disabled || (item as MenuCommandItem).divider || item === 'divider') {\n      return;\n    }\n\n    const command = item.command || '';\n    const row = this._currentRow;\n    const cell = this._currentCell;\n    let columnDef = this._grid.getColumns()[cell];\n    let dataContext = this._grid.getDataItem(row);\n\n    if (command !== null && command !== '') {\n      // user could execute a callback through 2 ways\n      // via the onCommand event and/or an action callback\n      let callbackArgs = {\n        cell,\n        row,\n        grid: this._grid,\n        command,\n        item,\n        column: columnDef,\n        dataContext,\n      };\n      this.onCommand.notify(callbackArgs, e, this);\n\n      // execute action callback when defined\n      if (typeof item.action === 'function') {\n        item.action.call(this, e, callbackArgs);\n      }\n\n      if (!e.defaultPrevented) {\n        this.closeMenu(e, { cell, row, grid: this._grid });\n      }\n    }\n  }\n\n  protected handleMenuItemOptionClick(item: MenuOptionItem | 'divider', e: DOMMouseOrTouchEvent<HTMLDivElement>) {\n    if (!item || (item as MenuOptionItem).disabled || (item as MenuOptionItem).divider || item === 'divider') {\n      return;\n    }\n    if (!this._grid.getEditorLock().commitCurrentEdit()) {\n      return;\n    }\n\n    const option = item.option !== undefined ? item.option : '';\n    const row = this._currentRow;\n    const cell = this._currentCell;\n    const columnDef = this._grid.getColumns()[cell];\n    const dataContext = this._grid.getDataItem(row);\n\n    if (option !== undefined) {\n      // user could execute a callback through 2 ways\n      // via the onOptionSelected event and/or an action callback\n      const callbackArgs = {\n        cell,\n        row,\n        grid: this._grid,\n        option,\n        item,\n        column: columnDef,\n        dataContext\n      };\n      this.onOptionSelected.notify(callbackArgs, e, this);\n\n      // execute action callback when defined\n      if (typeof item.action === 'function') {\n        item.action.call(this, e, callbackArgs);\n      }\n\n      if (!e.defaultPrevented) {\n        this.closeMenu(e, { cell, row, grid: this._grid });\n      }\n    }\n  }\n\n  /**\n   * Method that user can pass to override the default behavior.\n   * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\n   * @param overrideFn: override function callback\n   * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\n   */\n  protected runOverrideFunctionWhenExists<T = any>(overrideFn: ((args: any) => boolean) | undefined, args: T): boolean {\n    if (typeof overrideFn === 'function') {\n      return overrideFn.call(this, args);\n    }\n    return true;\n  }\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      Plugins: {\n        CellMenu: SlickCellMenu\n      }\n    }\n  });\n}\n", "import { Utils as Utils_ } from '../slick.core';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n/***\n   * Displays an overlay on top of a given cell range.\n   *\n   * TODO:\n   * Currently, it blocks mouse events to DOM nodes behind it.\n   * Use FF and WebKit-specific \"pointer-events\" CSS style, or some kind of event forwarding.\n   * Could also construct the borders separately using 4 individual DIVs.\n   *\n   * @param {Grid} grid\n   * @param {Object} options\n   */\nexport function CellRangeDecorator(grid, options) {\n    var _elem;\n    var _defaults = {\n      selectionCssClass: 'slick-range-decorator',\n      selectionCss: {\n        \"zIndex\": \"9999\",\n        \"border\": \"2px dashed red\"\n      },\n      offset: { top: -1, left: -1, height: -2, width: -2 }\n    };\n\n  options = Utils.extend(true, {}, _defaults, options);\n\n    function show(range) {\n      if (!_elem) {\n        _elem = document.createElement('div')\n        _elem.className = options.selectionCssClass;\n        Object.keys(options.selectionCss).forEach((cssStyleKey) => {\n          _elem.style[cssStyleKey] = options.selectionCss[cssStyleKey];\n        });\n        _elem.style.position = 'absolute';\n        const canvasNode = grid.getActiveCanvasNode();\n        if (canvasNode) {\n          canvasNode.appendChild(_elem);\n        }\n      }\n\n      var from = grid.getCellNodeBox(range.fromRow, range.fromCell);\n      var to = grid.getCellNodeBox(range.toRow, range.toCell);\n\n      if (from && to && options && options.offset) {\n        _elem.style.top = `${from.top + options.offset.top}px`;\n        _elem.style.left = `${from.left + options.offset.left}px`;\n        _elem.style.height = `${to.bottom - from.top + options.offset.height}px`;\n        _elem.style.width = `${to.right - from.left + options.offset.width}px`;\n      }\n\n      return _elem;\n    }\n\n    function destroy() {\n      hide();\n    }\n\n    function hide() {\n      if (_elem) {\n        _elem.remove();\n        _elem = null;\n      }\n    }\n\n  Utils.extend(this, {\n      \"pluginName\": \"CellRangeDecorator\",\n      \"show\": show,\n      \"hide\": hide,\n      \"destroy\": destroy\n    });\n  }\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      CellRangeDecorator\n    }\n  });\n}\n", "import { Event as SlickEvent_, EventHandler as EventHandler_, Range as SlickRange_, Utils as Utils_ } from '../slick.core';\nimport { Draggable as Draggable_ } from '../slick.interactions';\nimport { CellRangeDecorator as CellRangeDecorator_ } from './slick.cellrangedecorator';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : EventHandler_;\nconst SlickRange = IIFE_ONLY ? Slick.Range : SlickRange_;\nconst Draggable = IIFE_ONLY ? Slick.Draggable : Draggable_;\nconst CellRangeDecorator = IIFE_ONLY ? Slick.CellRangeDecorator : CellRangeDecorator_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\nexport function CellRangeSelector(options) {\n    var _grid;\n    var _currentlySelectedRange;\n    var _canvas;\n    var _gridOptions;\n    var _activeCanvas;\n    var _dragging;\n    var _decorator;\n    var _self = this;\n  var _handler = new EventHandler();\n    var _defaults = {\n      autoScroll: true,\n      minIntervalToShowNextCell: 30,\n      maxIntervalToShowNextCell: 600, // better to a multiple of minIntervalToShowNextCell\n      accelerateInterval: 5,          // increase 5ms when cursor 1px outside the viewport.\n      selectionCss: {\n        \"border\": \"2px dashed blue\"\n      }\n    };\n\n    // Frozen row & column variables\n    var _rowOffset;\n    var _columnOffset;\n    var _isRightCanvas;\n    var _isBottomCanvas;\n\n    // autoScroll related variables\n    var _activeViewport;\n    var _viewportWidth;\n    var _viewportHeight;\n    var _draggingMouseOffset;\n    var _moveDistanceForOneCell;\n    var _autoScrollTimerId;\n    var _xDelayForNextCell;\n    var _yDelayForNextCell;\n    var _isRowMoveRegistered = false;\n\n    // Scrollings\n    var _scrollTop = 0;\n    var _scrollLeft = 0;\n\n    function init(grid) {\n      if (typeof Draggable === \"undefined\") {\n        throw new Error('Slick.Draggable is undefined, make sure to import \"slick.interactions.js\"');\n      }\n\n      options = Utils.extend(true, {}, _defaults, options);\n      _decorator = options.cellDecorator || new CellRangeDecorator(grid, options);\n      _grid = grid;\n      _canvas = _grid.getCanvasNode();\n      _gridOptions = _grid.getOptions();\n      _handler\n        .subscribe(_grid.onScroll, handleScroll)\n        .subscribe(_grid.onDragInit, handleDragInit)\n        .subscribe(_grid.onDragStart, handleDragStart)\n        .subscribe(_grid.onDrag, handleDrag)\n        .subscribe(_grid.onDragEnd, handleDragEnd);\n    }\n\n    function destroy() {\n      _handler.unsubscribeAll();\n      _activeCanvas = null;\n      _activeViewport = null;\n      _canvas = null;\n      if (_decorator && _decorator.destroy) {\n        _decorator.destroy();\n      }\n    }\n\n    function getCellDecorator() {\n      return _decorator;\n    }\n\n    function handleScroll(e, args) {\n      _scrollTop = args.scrollTop;\n      _scrollLeft = args.scrollLeft;\n    }\n\n    function handleDragInit(e) {\n      // Set the active canvas node because the decorator needs to append its\n      // box to the correct canvas\n      _activeCanvas = _grid.getActiveCanvasNode(e);\n      _activeViewport = _grid.getActiveViewportNode(e);\n\n      var scrollbarDimensions = _grid.getDisplayedScrollbarDimensions()\n      _viewportWidth = _activeViewport.offsetWidth - scrollbarDimensions.width;\n      _viewportHeight = _activeViewport.offsetHeight - scrollbarDimensions.height;\n\n      _moveDistanceForOneCell = {\n        x: _grid.getAbsoluteColumnMinWidth() / 2,\n        y: _grid.getOptions().rowHeight / 2\n      }\n      _isRowMoveRegistered = hasRowMoveManager();\n\n      _rowOffset = 0;\n      _columnOffset = 0;\n      _isBottomCanvas = _activeCanvas.classList.contains('grid-canvas-bottom');\n\n      if (_gridOptions.frozenRow > -1 && _isBottomCanvas) {\n        const canvasSelector = `.${_grid.getUID()} .grid-canvas-${_gridOptions.frozenBottom ? 'bottom' : 'top'}`;\n        const canvasElm = document.querySelector(canvasSelector);\n        if (canvasElm) {\n          _rowOffset = canvasElm.clientHeight || 0;\n        }\n      }\n\n      _isRightCanvas = _activeCanvas.classList.contains('grid-canvas-right');\n\n      if (_gridOptions.frozenColumn > -1 && _isRightCanvas) {\n        const canvasLeftElm = document.querySelector(`.${_grid.getUID()} .grid-canvas-left`);\n        if (canvasLeftElm) {\n          _columnOffset = canvasLeftElm.clientWidth || 0;\n        }\n      }\n\n      // prevent the grid from cancelling drag'n'drop by default\n      e.stopImmediatePropagation();\n      e.preventDefault();\n    }\n\n    function handleDragStart(e, dd) {\n      var cell = _grid.getCellFromEvent(e);\n      if (_self.onBeforeCellRangeSelected.notify(cell) !== false) {\n        if (_grid.canCellBeSelected(cell.row, cell.cell)) {\n          _dragging = true;\n          e.stopImmediatePropagation();\n        }\n      }\n      if (!_dragging) {\n        return;\n      }\n\n      _grid.focus();\n\n      let canvasOffset = Utils.offset(_canvas);\n\n      let startX = dd.startX - (canvasOffset.left || 0);\n      if (_gridOptions.frozenColumn >= 0 && _isRightCanvas) {\n        startX += _scrollLeft;\n      }\n\n      let startY = dd.startY - (canvasOffset.top || 0);\n      if (_gridOptions.frozenRow >= 0 && _isBottomCanvas) {\n        startY += _scrollTop;\n      }\n\n      var start = _grid.getCellFromPoint(startX, startY);\n\n      dd.range = { start: start, end: {} };\n      _currentlySelectedRange = dd.range;\n      return _decorator.show(new SlickRange(start.row, start.cell));\n    }\n\n    function handleDrag(evt, dd) {\n      if (!_dragging && !_isRowMoveRegistered) {\n        return;\n      }\n      if (!_isRowMoveRegistered) {\n        evt.stopImmediatePropagation();\n      }\n\n      const e = evt.getNativeEvent();\n      if (options.autoScroll) {\n        _draggingMouseOffset = getMouseOffsetViewport(e, dd);\n        if (_draggingMouseOffset.isOutsideViewport) {\n          return handleDragOutsideViewport();\n        }\n      }\n      stopIntervalTimer();\n      handleDragTo(e, dd);\n    }\n\n    function getMouseOffsetViewport(e, dd) {\n      var targetEvent = e.touches ? e.touches[0] : e;\n      var viewportLeft = _activeViewport.scrollLeft;\n      var viewportTop = _activeViewport.scrollTop;\n      var viewportRight = viewportLeft + _viewportWidth;\n      var viewportBottom = viewportTop + _viewportHeight;\n\n      var viewportOffset = Utils.offset(_activeViewport);\n      var viewportOffsetLeft = viewportOffset.left || 0;\n      var viewportOffsetTop = viewportOffset.top || 0;\n      var viewportOffsetRight = viewportOffsetLeft + _viewportWidth;\n      var viewportOffsetBottom = viewportOffsetTop + _viewportHeight;\n\n      var result = {\n        e: e,\n        dd: dd,\n        viewport: {\n          left: viewportLeft,\n          top: viewportTop,\n          right: viewportRight,\n          bottom: viewportBottom,\n          offset: {\n            left: viewportOffsetLeft,\n            top: viewportOffsetTop,\n            right: viewportOffsetRight,\n            bottom: viewportOffsetBottom\n          }\n        },\n        // Consider the viewport as the origin, the `offset` is based on the coordinate system:\n        // the cursor is on the viewport's left/bottom when it is less than 0, and on the right/top when greater than 0.\n        offset: {\n          x: 0,\n          y: 0\n        },\n        isOutsideViewport: false\n      }\n      // ... horizontal\n      if (targetEvent.pageX < viewportOffsetLeft) {\n        result.offset.x = targetEvent.pageX - viewportOffsetLeft;\n      } else if (targetEvent.pageX > viewportOffsetRight) {\n        result.offset.x = targetEvent.pageX - viewportOffsetRight;\n      }\n      // ... vertical\n      if (targetEvent.pageY < viewportOffsetTop) {\n        result.offset.y = viewportOffsetTop - targetEvent.pageY;\n      } else if (targetEvent.pageY > viewportOffsetBottom) {\n        result.offset.y = viewportOffsetBottom - targetEvent.pageY;\n      }\n      result.isOutsideViewport = !!result.offset.x || !!result.offset.y;\n      return result;\n    }\n\n    function handleDragOutsideViewport() {\n      _xDelayForNextCell = options.maxIntervalToShowNextCell - Math.abs(_draggingMouseOffset.offset.x) * options.accelerateInterval;\n      _yDelayForNextCell = options.maxIntervalToShowNextCell - Math.abs(_draggingMouseOffset.offset.y) * options.accelerateInterval;\n      // only one timer is created to handle the case that cursor outside the viewport\n      if (!_autoScrollTimerId) {\n        var xTotalDelay = 0;\n        var yTotalDelay = 0;\n        _autoScrollTimerId = setInterval(function () {\n          var xNeedUpdate = false;\n          var yNeedUpdate = false;\n          // ... horizontal\n          if (_draggingMouseOffset.offset.x) {\n            xTotalDelay += options.minIntervalToShowNextCell;\n            xNeedUpdate = xTotalDelay >= _xDelayForNextCell;\n          } else {\n            xTotalDelay = 0;\n          }\n          // ... vertical\n          if (_draggingMouseOffset.offset.y) {\n            yTotalDelay += options.minIntervalToShowNextCell;\n            yNeedUpdate = yTotalDelay >= _yDelayForNextCell;\n          } else {\n            yTotalDelay = 0;\n          }\n          if (xNeedUpdate || yNeedUpdate) {\n            if (xNeedUpdate) {\n              xTotalDelay = 0;\n            }\n            if (yNeedUpdate) {\n              yTotalDelay = 0;\n            }\n            handleDragToNewPosition(xNeedUpdate, yNeedUpdate);\n          }\n        }, options.minIntervalToShowNextCell);\n      }\n    }\n\n    function handleDragToNewPosition(xNeedUpdate, yNeedUpdate) {\n      var pageX = _draggingMouseOffset.e.pageX;\n      var pageY = _draggingMouseOffset.e.pageY;\n      var mouseOffsetX = _draggingMouseOffset.offset.x;\n      var mouseOffsetY = _draggingMouseOffset.offset.y;\n      var viewportOffset = _draggingMouseOffset.viewport.offset;\n      // ... horizontal\n      if (xNeedUpdate && mouseOffsetX) {\n        if (mouseOffsetX > 0) {\n          pageX = viewportOffset.right + _moveDistanceForOneCell.x;\n        } else {\n          pageX = viewportOffset.left - _moveDistanceForOneCell.x;\n        }\n      }\n      // ... vertical\n      if (yNeedUpdate && mouseOffsetY) {\n        if (mouseOffsetY > 0) {\n          pageY = viewportOffset.top - _moveDistanceForOneCell.y;\n        } else {\n          pageY = viewportOffset.bottom + _moveDistanceForOneCell.y;\n        }\n      }\n      handleDragTo({\n        pageX: pageX,\n        pageY: pageY\n      }, _draggingMouseOffset.dd);\n    }\n\n    function stopIntervalTimer() {\n      clearInterval(_autoScrollTimerId);\n      _autoScrollTimerId = null;\n    }\n\n    function handleDragTo(e, dd) {\n      let targetEvent = e.touches ? e.touches[0] : e;\n      let canvasOffset = Utils.offset(_activeCanvas);\n      let end = _grid.getCellFromPoint(\n        targetEvent.pageX - (canvasOffset && canvasOffset.left || 0) + _columnOffset,\n        targetEvent.pageY - (canvasOffset && canvasOffset.top || 0) + _rowOffset\n      );\n\n      // ... frozen column(s),\n      if ( _gridOptions.frozenColumn >= 0 && (!_isRightCanvas && (end.cell > _gridOptions.frozenColumn)) || (_isRightCanvas && (end.cell <= _gridOptions.frozenColumn)) ) {\n        return;\n      }\n\n      // ... or frozen row(s)\n      if ( _gridOptions.frozenRow >= 0 && (!_isBottomCanvas && (end.row >= _gridOptions.frozenRow)) || (_isBottomCanvas && (end.row < _gridOptions.frozenRow)) ) {\n        return;\n      }\n\n      // scrolling the viewport to display the target `end` cell if it is not fully displayed\n      if (options.autoScroll && _draggingMouseOffset) {\n        var endCellBox = _grid.getCellNodeBox(end.row, end.cell);\n        if (!endCellBox) {\n          return;\n        }\n        var viewport = _draggingMouseOffset.viewport;\n        if (endCellBox.left < viewport.left || endCellBox.right > viewport.right\n          || endCellBox.top < viewport.top || endCellBox.bottom > viewport.bottom) {\n          _grid.scrollCellIntoView(end.row, end.cell);\n        }\n      }\n\n      // ... or regular grid (without any frozen options)\n      if (!_grid.canCellBeSelected(end.row, end.cell)) {\n        return;\n      }\n\n      if (dd && dd.range) {\n        dd.range.end = end;\n\n        var range = new SlickRange(dd.range.start.row, dd.range.start.cell, end.row, end.cell);\n        _decorator.show(range);\n        _self.onCellRangeSelecting.notify({\n          range: range\n        });\n      }\n    }\n\n    function hasRowMoveManager() {\n      return !!(_grid.getPluginByName('RowMoveManager') || _grid.getPluginByName('CrossGridRowMoveManager'));\n    }\n\n    function handleDragEnd(e, dd) {\n      if (!_dragging) {\n        return;\n      }\n\n      _dragging = false;\n      e.stopImmediatePropagation();\n\n      stopIntervalTimer();\n      _decorator.hide();\n      _self.onCellRangeSelected.notify({\n        range: new SlickRange(\n          dd.range.start.row,\n          dd.range.start.cell,\n          dd.range.end.row,\n          dd.range.end.cell\n        )\n      });\n    }\n\n    function getCurrentRange() {\n      return _currentlySelectedRange;\n    }\n\n  Utils.extend(this, {\n      \"init\": init,\n      \"destroy\": destroy,\n      \"pluginName\": \"CellRangeSelector\",\n\n      \"getCellDecorator\": getCellDecorator,\n      \"getCurrentRange\": getCurrentRange,\n\n    \"onBeforeCellRangeSelected\": new SlickEvent(),\n    \"onCellRangeSelected\": new SlickEvent(),\n    \"onCellRangeSelecting\": new SlickEvent()\n    });\n  }\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(Slick, {\n    CellRangeSelector\n  });\n}\n", "import { Event as SlickEvent_, EventData as EventData_, Range as Range_, Utils as Utils_ } from '../slick.core';\nimport { CellRangeSelector as CellRangeSelector_ } from './slick.cellrangeselector';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst EventData = IIFE_ONLY ? Slick.EventData : EventData_;\nconst SlickRange = IIFE_ONLY ? Slick.Range : Range_; // test\nconst CellRangeSelector = IIFE_ONLY ? Slick.CellRangeSelector : CellRangeSelector_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\nexport function CellSelectionModel(options) {\n    var _grid;\n    var _ranges = [];\n    var _self = this;\n    var _selector;\n\n    if (typeof options === \"undefined\" || typeof options.cellRangeSelector === \"undefined\") {\n      _selector = new CellRangeSelector({\n        \"selectionCss\": {\n          \"border\": \"2px solid black\"\n        }\n      });\n    } else {\n      _selector = options.cellRangeSelector;\n    }\n\n    var _options;\n    var _defaults = {\n      selectActiveCell: true\n    };\n\n    function init(grid) {\n      _options = Utils.extend(true, {}, _defaults, options);\n      _grid = grid;\n      _grid.onActiveCellChanged.subscribe(handleActiveCellChange);\n      _grid.onKeyDown.subscribe(handleKeyDown);\n      grid.registerPlugin(_selector);\n      _selector.onCellRangeSelected.subscribe(handleCellRangeSelected);\n      _selector.onBeforeCellRangeSelected.subscribe(handleBeforeCellRangeSelected);\n    }\n\n    function destroy() {\n      _grid.onActiveCellChanged.unsubscribe(handleActiveCellChange);\n      _grid.onKeyDown.unsubscribe(handleKeyDown);\n      _selector.onCellRangeSelected.unsubscribe(handleCellRangeSelected);\n      _selector.onBeforeCellRangeSelected.unsubscribe(handleBeforeCellRangeSelected);\n      _grid.unregisterPlugin(_selector);\n      if (_selector && _selector.destroy) {\n        _selector.destroy();\n      }\n    }\n\n    function removeInvalidRanges(ranges) {\n      var result = [];\n\n      for (var i = 0; i < ranges.length; i++) {\n        var r = ranges[i];\n        if (_grid.canCellBeSelected(r.fromRow, r.fromCell) && _grid.canCellBeSelected(r.toRow, r.toCell)) {\n          result.push(r);\n        }\n      }\n\n      return result;\n    }\n\n    function rangesAreEqual(range1, range2) {\n      var areDifferent = (range1.length !== range2.length);\n      if (!areDifferent) {\n        for (var i = 0; i < range1.length; i++) {\n          if (\n            range1[i].fromCell !== range2[i].fromCell\n            || range1[i].fromRow !== range2[i].fromRow\n            || range1[i].toCell !== range2[i].toCell\n            || range1[i].toRow !== range2[i].toRow\n          ) {\n            areDifferent = true;\n            break;\n          }\n        }\n      }\n      return !areDifferent;\n    }\n\n    function setSelectedRanges(ranges, caller) {\n      // simple check for: empty selection didn't change, prevent firing onSelectedRangesChanged\n      if ((!_ranges || _ranges.length === 0) && (!ranges || ranges.length === 0)) { return; }\n\n      // if range has not changed, don't fire onSelectedRangesChanged\n      var rangeHasChanged = !rangesAreEqual(_ranges, ranges);\n\n      _ranges = removeInvalidRanges(ranges);\n      if (rangeHasChanged) {\n        // provide extra \"caller\" argument through SlickEventData to avoid breaking pubsub event that only accepts an array of selected range\n        var eventData = new EventData(null, _ranges);\n        Object.defineProperty(eventData, 'detail', { writable: true, configurable: true, value: { caller: caller || \"SlickCellSelectionModel.setSelectedRanges\" } });\n        _self.onSelectedRangesChanged.notify(_ranges, eventData);\n      }\n    }\n\n    function getSelectedRanges() {\n      return _ranges;\n    }\n\n    function refreshSelections() {\n      setSelectedRanges(getSelectedRanges());\n    }\n\n    function handleBeforeCellRangeSelected(e) {\n      if (_grid.getEditorLock().isActive()) {\n        e.stopPropagation();\n        return false;\n      }\n    }\n\n    function handleCellRangeSelected(e, args) {\n      _grid.setActiveCell(args.range.fromRow, args.range.fromCell, false, false, true);\n      setSelectedRanges([args.range]);\n    }\n\n    function handleActiveCellChange(e, args) {\n      if (_options.selectActiveCell && args.row != null && args.cell != null) {\n        setSelectedRanges([new SlickRange(args.row, args.cell)]);\n      }\n      else if (!_options.selectActiveCell) {\n        // clear the previous selection once the cell changes\n        setSelectedRanges([]);\n      }\n    }\n\n    function handleKeyDown(e) {\n      /***\n       * \u041Aey codes\n       * 37 left\n       * 38 up\n       * 39 right\n       * 40 down\n       */\n      var ranges, last;\n      var active = _grid.getActiveCell();\n      var metaKey = e.ctrlKey || e.metaKey;\n\n      if (active && e.shiftKey && !metaKey && !e.altKey &&\n        (e.which == 37 || e.which == 39 || e.which == 38 || e.which == 40)) {\n\n        ranges = getSelectedRanges().slice();\n        if (!ranges.length)\n          ranges.push(new SlickRange(active.row, active.cell));\n\n        // keyboard can work with last range only\n        last = ranges.pop();\n\n        // can't handle selection out of active cell\n        if (!last.contains(active.row, active.cell))\n          last = new SlickRange(active.row, active.cell);\n\n        var dRow = last.toRow - last.fromRow,\n          dCell = last.toCell - last.fromCell,\n          // walking direction\n          dirRow = active.row == last.fromRow ? 1 : -1,\n          dirCell = active.cell == last.fromCell ? 1 : -1;\n\n        if (e.which == 37) {\n          dCell -= dirCell;\n        } else if (e.which == 39) {\n          dCell += dirCell;\n        } else if (e.which == 38) {\n          dRow -= dirRow;\n        } else if (e.which == 40) {\n          dRow += dirRow;\n        }\n\n        // define new selection range\n        var new_last = new SlickRange(active.row, active.cell, active.row + dirRow * dRow, active.cell + dirCell * dCell);\n        if (removeInvalidRanges([new_last]).length) {\n          ranges.push(new_last);\n          var viewRow = dirRow > 0 ? new_last.toRow : new_last.fromRow;\n          var viewCell = dirCell > 0 ? new_last.toCell : new_last.fromCell;\n          _grid.scrollRowIntoView(viewRow);\n          _grid.scrollCellIntoView(viewRow, viewCell);\n        }\n        else\n          ranges.push(last);\n\n        setSelectedRanges(ranges);\n\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    }\n\n  Utils.extend(this, {\n      \"getSelectedRanges\": getSelectedRanges,\n      \"setSelectedRanges\": setSelectedRanges,\n\n      \"refreshSelections\": refreshSelections,\n\n      \"init\": init,\n      \"destroy\": destroy,\n      \"pluginName\": \"CellSelectionModel\",\n\n    \"onSelectedRangesChanged\": new SlickEvent()\n    });\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      CellSelectionModel\n    }\n  });\n}\n", "import { BindingEventService as BindingEventService_, EventHandler as EventHandler_, Utils as Utils_ } from '../slick.core';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : EventHandler_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\nexport function CheckboxSelectColumn(options) {\n    let _dataView;\n    let _grid;\n    let _isUsingDataView = false;\n    let _selectableOverride = null;\n    let _headerRowNode;\n    let _selectAll_UID = createUID();\n  let _handler = new EventHandler();\n    let _selectedRowsLookup = {};\n    let _defaults = {\n      columnId: \"_checkbox_selector\",\n      cssClass: null,\n      hideSelectAllCheckbox: false,\n      toolTip: \"Select/Deselect All\",\n      width: 30,\n      applySelectOnAllPages: false, // defaults to false, when that is enabled the \"Select All\" will be applied to all pages (when using Pagination)\n      hideInColumnTitleRow: false,\n      hideInFilterHeaderRow: true\n    };\n    let _isSelectAllChecked = false;\n\n  let _bindingEventService = new BindingEventService();\n  let _options = Utils.extend(true, {}, _defaults, options);\n\n    // user could override the checkbox icon logic from within the options or after instantiating the plugin\n    if (typeof _options.selectableOverride === 'function') {\n      selectableOverride(_options.selectableOverride);\n    }\n\n    function init(grid) {\n      _grid = grid;\n      _isUsingDataView = !Array.isArray(grid.getData());\n      if (_isUsingDataView) {\n        _dataView = grid.getData();\n      }\n      _handler\n        .subscribe(_grid.onSelectedRowsChanged, handleSelectedRowsChanged)\n        .subscribe(_grid.onClick, handleClick)\n        .subscribe(_grid.onKeyDown, handleKeyDown);\n\n      if (_isUsingDataView && _dataView && _options.applySelectOnAllPages) {\n        _handler\n          .subscribe(_dataView.onSelectedRowIdsChanged, handleDataViewSelectedIdsChanged)\n          .subscribe(_dataView.onPagingInfoChanged, handleDataViewSelectedIdsChanged)\n      }\n\n      if (!_options.hideInFilterHeaderRow) {\n        addCheckboxToFilterHeaderRow(grid);\n      }\n      if (!_options.hideInColumnTitleRow) {\n        _handler.subscribe(_grid.onHeaderClick, handleHeaderClick);\n      }\n    }\n\n    function destroy() {\n      _handler.unsubscribeAll();\n      _bindingEventService.unbindAll();\n    }\n\n    function getOptions() {\n      return _options;\n    }\n\n    function setOptions(options) {\n      _options = Utils.extend(true, {}, _options, options);\n\n      if (_options.hideSelectAllCheckbox) {\n        hideSelectAllFromColumnHeaderTitleRow();\n        hideSelectAllFromColumnHeaderFilterRow();\n      } else {\n        if (!_options.hideInColumnTitleRow) {\n          renderSelectAllCheckbox(_isSelectAllChecked);\n          _handler.subscribe(_grid.onHeaderClick, handleHeaderClick);\n        } else {\n          hideSelectAllFromColumnHeaderTitleRow();\n        }\n\n        if (!_options.hideInFilterHeaderRow) {\n          let selectAllContainerElm = _headerRowNode.querySelector(\"#filter-checkbox-selectall-container\");\n          if (selectAllContainerElm) {\n            selectAllContainerElm.style.display = 'flex';\n            const selectAllInputElm = selectAllContainerElm.querySelector('input[type=\"checkbox\"]');\n            if (selectAllInputElm) {\n              selectAllInputElm.checked = _isSelectAllChecked;\n            }\n          }\n        } else {\n          hideSelectAllFromColumnHeaderFilterRow();\n        }\n      }\n    }\n\n    function hideSelectAllFromColumnHeaderTitleRow() {\n      _grid.updateColumnHeader(_options.columnId, \"\", \"\");\n    }\n\n    function hideSelectAllFromColumnHeaderFilterRow() {\n      const selectAllContainerElm = _headerRowNode && _headerRowNode.querySelector('#filter-checkbox-selectall-container');\n      if (selectAllContainerElm) {\n        selectAllContainerElm.style.display = 'none';\n      }\n    }\n\n    function handleSelectedRowsChanged() {\n      let selectedRows = _grid.getSelectedRows();\n      let lookup = {}, row, i, k;\n      let disabledCount = 0;\n      if (typeof _selectableOverride === 'function') {\n        for (k = 0; k < _grid.getDataLength(); k++) {\n          // If we are allowed to select the row\n          let dataItem = _grid.getDataItem(k);\n          if (!checkSelectableOverride(i, dataItem, _grid)) {\n            disabledCount++;\n          }\n        }\n      }\n\n      let removeList = [];\n      for (i = 0; i < selectedRows.length; i++) {\n        row = selectedRows[i];\n\n        // If we are allowed to select the row\n        let rowItem = _grid.getDataItem(row);\n        if (checkSelectableOverride(i, rowItem, _grid)) {\n          lookup[row] = true;\n          if (lookup[row] !== _selectedRowsLookup[row]) {\n            _grid.invalidateRow(row);\n            delete _selectedRowsLookup[row];\n          }\n        }\n        else {\n          removeList.push(row);\n        }\n      }\n      for (i in _selectedRowsLookup) {\n        _grid.invalidateRow(i);\n      }\n      _selectedRowsLookup = lookup;\n      _grid.render();\n      _isSelectAllChecked = selectedRows && selectedRows.length + disabledCount >= _grid.getDataLength();\n\n      if (!_isUsingDataView || !_options.applySelectOnAllPages) {\n        if (!_options.hideInColumnTitleRow && !_options.hideSelectAllCheckbox) {\n          renderSelectAllCheckbox(_isSelectAllChecked);\n        }\n        if (!_options.hideInFilterHeaderRow) {\n          const selectAllElm = _headerRowNode && _headerRowNode.querySelector(`#header-filter-selector${_selectAll_UID}`);\n          if (selectAllElm) {\n            selectAllElm.checked = _isSelectAllChecked;\n          }\n        }\n      }\n\n      // Remove items that shouln't of been selected in the first place (Got here Ctrl + click)\n      if (removeList.length > 0) {\n        for (i = 0; i < removeList.length; i++) {\n          let remIdx = selectedRows.indexOf(removeList[i]);\n          selectedRows.splice(remIdx, 1);\n        }\n        _grid.setSelectedRows(selectedRows, \"click.cleanup\");\n      }\n    }\n\n    function handleDataViewSelectedIdsChanged() {\n      let selectedIds = _dataView.getAllSelectedFilteredIds();\n      let filteredItems = _dataView.getFilteredItems();\n      let disabledCount = 0;\n\n      if (typeof _selectableOverride === 'function' && selectedIds.length > 0) {\n        for (let k = 0; k < _dataView.getItemCount(); k++) {\n          // If we are allowed to select the row\n          let dataItem = _dataView.getItemByIdx(k);\n          let idProperty = _dataView.getIdPropertyName();\n          let dataItemId = dataItem[idProperty];\n          let foundItemIdx = filteredItems.findIndex(function (item) {\n            return item[idProperty] === dataItemId;\n          });\n          if (foundItemIdx >= 0 && !checkSelectableOverride(k, dataItem, _grid)) {\n            disabledCount++;\n          }\n        }\n      }\n      _isSelectAllChecked = (selectedIds && selectedIds.length) + disabledCount >= filteredItems.length;\n\n      if (!_options.hideInColumnTitleRow && !_options.hideSelectAllCheckbox) {\n        renderSelectAllCheckbox(_isSelectAllChecked);\n      }\n      if (!_options.hideInFilterHeaderRow) {\n        const selectAllElm = _headerRowNode && _headerRowNode.querySelector(`#header-filter-selector${_selectAll_UID}`);\n        if (selectAllElm) {\n          selectAllElm.checked = _isSelectAllChecked;\n        }\n      }\n    }\n\n    function handleKeyDown(e, args) {\n      if (e.which == 32) {\n        if (_grid.getColumns()[args.cell].id === _options.columnId) {\n          // if editing, try to commit\n          if (!_grid.getEditorLock().isActive() || _grid.getEditorLock().commitCurrentEdit()) {\n            toggleRowSelection(args.row);\n          }\n          e.preventDefault();\n          e.stopImmediatePropagation();\n        }\n      }\n    }\n\n    function handleClick(e, args) {\n      // clicking on a row select checkbox\n      if (_grid.getColumns()[args.cell].id === _options.columnId && e.target.type === 'checkbox') {\n        // if editing, try to commit\n        if (_grid.getEditorLock().isActive() && !_grid.getEditorLock().commitCurrentEdit()) {\n          e.preventDefault();\n          e.stopImmediatePropagation();\n          return;\n        }\n\n        toggleRowSelection(args.row);\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n      }\n    }\n\n    function toggleRowSelection(row) {\n      let dataContext = _grid.getDataItem(row);\n      if (!checkSelectableOverride(row, dataContext, _grid)) {\n        return;\n      }\n\n      if (_selectedRowsLookup[row]) {\n        const newSelectedRows = _grid.getSelectedRows().filter((n) => n !== row);\n        _grid.setSelectedRows(newSelectedRows, 'click.toggle');\n      } else {\n        _grid.setSelectedRows(_grid.getSelectedRows().concat(row), \"click.toggle\");\n      }\n      _grid.setActiveCell(row, getCheckboxColumnCellIndex());\n    }\n\n    function selectRows(rowArray) {\n      let i, l = rowArray.length, addRows = [];\n      for (i = 0; i < l; i++) {\n        if (!_selectedRowsLookup[rowArray[i]]) {\n          addRows[addRows.length] = rowArray[i];\n        }\n      }\n      _grid.setSelectedRows(_grid.getSelectedRows().concat(addRows), \"SlickCheckboxSelectColumn.selectRows\");\n    }\n\n    function deSelectRows(rowArray) {\n      let i, l = rowArray.length, removeRows = [];\n      for (i = 0; i < l; i++) {\n        if (_selectedRowsLookup[rowArray[i]]) {\n          removeRows[removeRows.length] = rowArray[i];\n        }\n      }\n\n      _grid.setSelectedRows(_grid.getSelectedRows().filter((n) => removeRows.indexOf(n) < 0), 'SlickCheckboxSelectColumn.deSelectRows');\n    }\n\n    function handleHeaderClick(e, args) {\n      if (args.column.id == _options.columnId && e.target.type === 'checkbox') {\n        // if editing, try to commit\n        if (_grid.getEditorLock().isActive() && !_grid.getEditorLock().commitCurrentEdit()) {\n          e.preventDefault();\n          e.stopImmediatePropagation();\n          return;\n        }\n\n        let isAllSelected = e.target.checked;\n        let caller = isAllSelected ? 'click.selectAll' : 'click.unselectAll';\n        let rows = [];\n\n        if (isAllSelected) {\n          for (let i = 0; i < _grid.getDataLength(); i++) {\n            // Get the row and check it's a selectable row before pushing it onto the stack\n            let rowItem = _grid.getDataItem(i);\n            if (!rowItem.__group && !rowItem.__groupTotals && checkSelectableOverride(i, rowItem, _grid)) {\n              rows.push(i);\n            }\n          }\n          isAllSelected = true;\n        }\n        if (_isUsingDataView && _dataView && _options.applySelectOnAllPages) {\n          let ids = [];\n          let filteredItems = _dataView.getFilteredItems();\n          for (let j = 0; j < filteredItems.length; j++) {\n            // Get the row and check it's a selectable ID (it could be in a different page) before pushing it onto the stack\n            let dataviewRowItem = filteredItems[j];\n            if (checkSelectableOverride(j, dataviewRowItem, _grid)) {\n              ids.push(dataviewRowItem[_dataView.getIdPropertyName()]);\n            }\n          }\n          _dataView.setSelectedIds(ids, { isRowBeingAdded: isAllSelected });\n        }\n        _grid.setSelectedRows(rows, caller);\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n      }\n    }\n\n    let _checkboxColumnCellIndex = null;\n\n    function getCheckboxColumnCellIndex() {\n      if (_checkboxColumnCellIndex === null) {\n        _checkboxColumnCellIndex = 0;\n        let colArr = _grid.getColumns();\n        for (let i = 0; i < colArr.length; i++) {\n          if (colArr[i].id == _options.columnId) {\n            _checkboxColumnCellIndex = i;\n          }\n        }\n      }\n      return _checkboxColumnCellIndex;\n    }\n\n    function getColumnDefinition() {\n      return {\n        id: _options.columnId,\n        name: (_options.hideSelectAllCheckbox || _options.hideInColumnTitleRow) ? \"\" : \"<input id='header-selector\" + _selectAll_UID + \"' type='checkbox'><label for='header-selector\" + _selectAll_UID + \"'></label>\",\n        toolTip: (_options.hideSelectAllCheckbox || _options.hideInColumnTitleRow) ? \"\" : _options.toolTip,\n        field: \"sel\",\n        width: _options.width,\n        resizable: false,\n        sortable: false,\n        cssClass: _options.cssClass,\n        hideSelectAllCheckbox: _options.hideSelectAllCheckbox,\n        formatter: checkboxSelectionFormatter,\n        // exclude from all menus, defaults to true unless the option is provided differently by the user\n        excludeFromColumnPicker: typeof _options.excludeFromColumnPicker !== 'undefined' ? _options.excludeFromColumnPicker : true,\n        excludeFromGridMenu: typeof _options.excludeFromGridMenu !== 'undefined' ? _options.excludeFromGridMenu : true,\n        excludeFromHeaderMenu: typeof _options.excludeFromHeaderMenu !== 'undefined' ? _options.excludeFromHeaderMenu : true,\n      };\n    }\n\n    function addCheckboxToFilterHeaderRow(grid) {\n      _handler.subscribe(grid.onHeaderRowCellRendered, function (e, args) {\n        if (args.column.field === \"sel\") {\n          Utils.emptyElement(args.node);\n          const spanElm = document.createElement('span');\n          spanElm.id = 'filter-checkbox-selectall-container';\n\n          const inputElm = document.createElement('input');\n          inputElm.type = 'checkbox';\n          inputElm.id = `header-filter-selector${_selectAll_UID}`;\n\n          const labelElm = document.createElement('label');\n          labelElm.htmlFor = `header-filter-selector${_selectAll_UID}`;\n\n          spanElm.appendChild(inputElm);\n          spanElm.appendChild(labelElm);\n          args.node.appendChild(spanElm);\n          _headerRowNode = args.node;\n\n          _bindingEventService.bind(spanElm, 'click', ((e) => handleHeaderClick(e, args)));\n        }\n      });\n    }\n\n    function createUID() {\n      return Math.round(10000000 * Math.random());\n    }\n\n    function checkboxSelectionFormatter(row, cell, value, columnDef, dataContext, grid) {\n      let UID = createUID() + row;\n\n      if (dataContext) {\n        if (!checkSelectableOverride(row, dataContext, grid)) {\n          return null;\n        } else {\n          return _selectedRowsLookup[row]\n            ? \"<input id='selector\" + UID + \"' type='checkbox' checked='checked'><label for='selector\" + UID + \"'></label>\"\n            : \"<input id='selector\" + UID + \"' type='checkbox'><label for='selector\" + UID + \"'></label>\";\n        }\n      }\n      return null;\n    }\n\n    function checkSelectableOverride(row, dataContext, grid) {\n      if (typeof _selectableOverride === 'function') {\n        return _selectableOverride(row, dataContext, grid);\n      }\n      return true;\n    }\n\n    function renderSelectAllCheckbox(isSelectAllChecked) {\n      if (isSelectAllChecked) {\n        _grid.updateColumnHeader(_options.columnId, \"<input id='header-selector\" + _selectAll_UID + \"' type='checkbox' checked='checked'><label for='header-selector\" + _selectAll_UID + \"'></label>\", _options.toolTip);\n      } else {\n        _grid.updateColumnHeader(_options.columnId, \"<input id='header-selector\" + _selectAll_UID + \"' type='checkbox'><label for='header-selector\" + _selectAll_UID + \"'></label>\", _options.toolTip);\n      }\n    }\n\n    /**\n     * Method that user can pass to override the default behavior or making every row a selectable row.\n     * In order word, user can choose which rows to be selectable or not by providing his own logic.\n     * @param overrideFn: override function callback\n     */\n    function selectableOverride(overrideFn) {\n      _selectableOverride = overrideFn;\n    }\n\n\n  Utils.extend(this, {\n      \"init\": init,\n      \"destroy\": destroy,\n      \"pluginName\": \"CheckboxSelectColumn\",\n\n      \"deSelectRows\": deSelectRows,\n      \"selectRows\": selectRows,\n      \"getColumnDefinition\": getColumnDefinition,\n      \"getOptions\": getOptions,\n      \"selectableOverride\": selectableOverride,\n      \"setOptions\": setOptions,\n    });\n  }\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      CheckboxSelectColumn\n    }\n  });\n}\n\n", "import {\n  BindingEventService as BindingEventService_,\n  SlickEvent as SlickEvent_,\n  SlickEventData as SlickEventData_,\n  SlickEventHandler as SlickEventHandler_,\n  Utils as Utils_\n} from '../slick.core';\nimport type {\n  ContextMenuOption,\n  DOMMouseOrTouchEvent,\n  GridOption,\n  MenuCommandItem,\n  MenuCommandItemCallbackArgs,\n  MenuFromCellCallbackArgs,\n  MenuOptionItem,\n  MenuOptionItemCallbackArgs\n} from '../models/index';\nimport type { SlickGrid } from '../slick.grid';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst SlickEventData = IIFE_ONLY ? Slick.EventData : SlickEventData_;\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : SlickEventHandler_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n/**\n * A plugin to add Context Menu (mouse right+click), it subscribes to the cell \"onContextMenu\" event.\n * The \"contextMenu\" is defined in the Grid Options object\n * You can use it to change a data property (only 1) through a list of Options AND/OR through a list of Commands.\n * A good example of a Command would be an Export to CSV, that can be run from anywhere in the grid by doing a mouse right+click\n *\n * Note:\n *   There is only 1 list of Options, so typically that would be use for 1 column\n *   if you plan to use different Options for different columns, then the CellMenu plugin might be better suited.\n *\n * USAGE:\n *\n * Add the slick.contextmenu.(js|css) files and register it with the grid.\n *\n * To specify a menu in a column header, extend the column definition like so:\n * var contextMenuPlugin = new Slick.Plugins.ContextMenu(columns, grid, options);\n *\n * Available grid options, by defining a contextMenu object:\n *\n *  var options = {\n *    enableCellNavigation: true,\n *    contextMenu: {\n *      optionTitle: 'Change Priority',\n *      optionShownOverColumnIds: [\"priority\"],\n *      optionItems: [\n *        { option: 0, title: 'none', cssClass: 'italic' },\n *        { divider: true },\n *        \"divider\" // just the string is also accepted\n *        { option: 1, iconCssClass: 'fa fa-fire grey', title: 'Low' },\n *        { option: 3, iconCssClass: 'fa fa-fire red', title: 'High' },\n *        { option: 2, iconCssClass: 'fa fa-fire orange', title: 'Medium' },\n *        { option: 4, iconCssClass: 'fa fa-fire', title: 'Extreme', disabled: true },\n *      ],\n *      commandTitle: 'Commands',\n *      commandShownOverColumnIds: [\"title\", \"complete\", \"start\", \"finish\", \"effortDriven\"],\n *      commandItems: [\n *        { command: 'export-excel', title: 'Export to CSV', iconCssClass: 'fa fa-file-excel-o', cssClass: '' },\n *        { command: 'delete-row', title: 'Delete Row', cssClass: 'bold', textCssClass: 'red' },\n *        { command: 'help', title: 'Help', iconCssClass: 'fa fa-question-circle',},\n *        { divider: true },\n *      ],\n *    }\n *  };\n *\n *\n * Available contextMenu properties:\n *    commandTitle:               Title of the Command section (optional)\n *    commandItems:               Array of Command item objects (command/title pair)\n *    commandShownOverColumnIds:  Define which column to show the Commands list. If not defined (defaults), the menu will be shown over all columns\n *    optionTitle:                Title of the Option section (optional)\n *    optionItems:                Array of Options item objects (option/title pair)\n *    optionShownOverColumnIds:   Define which column to show the Options list. If not defined (defaults), the menu will be shown over all columns\n *    hideCloseButton:            Hide the Close button on top right (defaults to false)\n *    hideCommandSection:         Hide the Commands section even when the commandItems array is filled (defaults to false)\n *    hideMenuOnScroll:           Do we want to hide the Cell Menu when a scrolling event occurs (defaults to false)?\n *    hideOptionSection:          Hide the Options section even when the optionItems array is filled (defaults to false)\n *    maxHeight:                  Maximum height that the drop menu will have, can be a number (250) or text (\"none\")\n *    width:                      Width that the drop menu will have, can be a number (250) or text (defaults to \"auto\")\n *    autoAdjustDrop:             Auto-align dropup or dropdown menu to the left or right depending on grid viewport available space (defaults to true)\n *    autoAdjustDropOffset:       Optionally add an offset to the auto-align of the drop menu (defaults to -4)\n *    autoAlignSide:              Auto-align drop menu to the left or right depending on grid viewport available space (defaults to true)\n *    autoAlignSideOffset:        Optionally add an offset to the left/right side auto-align (defaults to 0)\n *    menuUsabilityOverride:      Callback method that user can override the default behavior of enabling/disabling the menu from being usable (must be combined with a custom formatter)\n *\n *\n * Available menu Command/Option item properties:\n *    action:                     Optionally define a callback function that gets executed when item is chosen (and/or use the onCommand event)\n *    command:                    A command identifier to be passed to the onCommand event handlers (when using \"commandItems\").\n *    option:                     An option to be passed to the onOptionSelected event handlers (when using \"optionItems\").\n *    title:                      Menu item text.\n *    divider:                    Boolean which tell if the current item is a divider, not an actual command. You could also pass \"divider\" instead of an object\n *    disabled:                   Whether the item/command is disabled.\n *    hidden:                     Whether the item/command is hidden.\n *    tooltip:                    Item tooltip.\n *    cssClass:                   A CSS class to be added to the menu item container.\n *    iconCssClass:               A CSS class to be added to the menu item icon.\n *    textCssClass:               A CSS class to be added to the menu item text.\n *    iconImage:                  A url to the icon image.\n *    itemVisibilityOverride:     Callback method that user can override the default behavior of showing/hiding an item from the list\n *    itemUsabilityOverride:      Callback method that user can override the default behavior of enabling/disabling an item from the list\n *\n * The plugin exposes the following events:\n *\n *    onAfterMenuShow: Fired after the menu is shown.  You can customize the menu or dismiss it by returning false.\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *\n *    onBeforeMenuShow: Fired before the menu is shown.  You can customize the menu or dismiss it by returning false.\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *\n *    onBeforeMenuClose: Fired when the menu is closing.\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *            menu:         Menu DOM element\n *\n *    onCommand: Fired on menu option clicked from the Command items list\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *            command:      Menu command identified.\n *            item:         Menu item selected\n *            column:    Cell Column definition\n *            dataContext:  Cell Data Context (data object)\n *            value:        Value of the cell we triggered the context menu from\n *\n *    onOptionSelected: Fired on menu option clicked from the Option items list\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *            option:       Menu option selected.\n *            item:         Menu item selected\n *            column:    Cell Column definition\n *            dataContext:  Cell Data Context (data object)\n *\n *\n * @param options {Object} Context Menu Options\n * @class Slick.Plugins.ContextMenu\n */\nexport class SlickContextMenu {\n  // --\n  // public API\n  pluginName = 'ContextMenu' as const;\n  onAfterMenuShow = new SlickEvent<MenuFromCellCallbackArgs>();\n  onBeforeMenuShow = new SlickEvent<MenuFromCellCallbackArgs>();\n  onBeforeMenuClose = new SlickEvent<MenuFromCellCallbackArgs>();\n  onCommand = new SlickEvent<MenuCommandItemCallbackArgs>();\n  onOptionSelected = new SlickEvent<MenuOptionItemCallbackArgs>();\n\n  // --\n  // protected props\n  protected _contextMenuProperties: ContextMenuOption;\n  protected _currentCell = -1;\n  protected _currentRow = -1;\n  protected _grid!: SlickGrid;\n  protected _gridOptions!: GridOption;\n  protected _gridUid = '';\n  protected _handler = new EventHandler();\n  protected _commandTitleElm?: HTMLSpanElement;\n  protected _optionTitleElm?: HTMLSpanElement;\n  protected _menuElm?: HTMLDivElement | null;\n  protected _bindingEventService = new BindingEventService();\n  protected _defaults: ContextMenuOption = {\n    autoAdjustDrop: true,     // dropup/dropdown\n    autoAlignSide: true,      // left/right\n    autoAdjustDropOffset: -4,\n    autoAlignSideOffset: 0,\n    hideMenuOnScroll: false,\n    maxHeight: 'none',\n    width: 'auto',\n    optionShownOverColumnIds: [],\n    commandShownOverColumnIds: [],\n  };\n\n  constructor(optionProperties: Partial<ContextMenuOption>) {\n    this._contextMenuProperties = Utils.extend({}, this._defaults, optionProperties);\n  }\n\n  init(grid: SlickGrid) {\n    this._grid = grid;\n    this._gridOptions = grid.getOptions();\n    this._gridUid = (grid && grid.getUID) ? grid.getUID() : '';\n    this._handler.subscribe(this._grid.onContextMenu, this.handleOnContextMenu.bind(this));\n    if (this._contextMenuProperties.hideMenuOnScroll) {\n      this._handler.subscribe(this._grid.onScroll, this.destroyMenu.bind(this));\n    }\n  }\n\n  setOptions(newOptions: Partial<ContextMenuOption>) {\n    this._contextMenuProperties = Utils.extend({}, this._contextMenuProperties, newOptions);\n\n    // on the array properties, we want to make sure to overwrite them and not just extending them\n    if (newOptions.commandShownOverColumnIds) {\n      this._contextMenuProperties.commandShownOverColumnIds = newOptions.commandShownOverColumnIds;\n    }\n    if (newOptions.optionShownOverColumnIds) {\n      this._contextMenuProperties.optionShownOverColumnIds = newOptions.optionShownOverColumnIds;\n    }\n  }\n\n  destroy() {\n    this.onAfterMenuShow.unsubscribe();\n    this.onBeforeMenuShow.unsubscribe();\n    this.onBeforeMenuClose.unsubscribe();\n    this.onCommand.unsubscribe();\n    this.onOptionSelected.unsubscribe();\n    this._handler.unsubscribeAll();\n    this._bindingEventService.unbindAll();\n    this._menuElm?.remove();\n    this._commandTitleElm = null as any;\n    this._optionTitleElm = null as any;\n    this._menuElm = null as any;\n  }\n\n  protected createMenu(e: DOMMouseOrTouchEvent<HTMLDivElement>) {\n    if (e instanceof SlickEventData) {\n      e = (e as SlickEventData_).getNativeEvent();\n    }\n\n    let targetEvent = e.touches ? e.touches[0] : e;\n    let cell = this._grid.getCellFromEvent(e);\n    this._currentCell = cell?.cell ?? 0;\n    this._currentRow = cell?.row ?? 0;\n    let columnDef = this._grid.getColumns()[this._currentCell];\n    let dataContext = this._grid.getDataItem(this._currentRow);\n\n    let isColumnOptionAllowed = this.checkIsColumnAllowed(this._contextMenuProperties.optionShownOverColumnIds ?? [], columnDef.id);\n    let isColumnCommandAllowed = this.checkIsColumnAllowed(this._contextMenuProperties.commandShownOverColumnIds ?? [], columnDef.id);\n    let commandItems = this._contextMenuProperties.commandItems || [];\n    let optionItems = this._contextMenuProperties.optionItems || [];\n\n    // make sure there's at least something to show before creating the Context Menu\n    if (!columnDef || (!isColumnCommandAllowed && !isColumnOptionAllowed) || (!commandItems.length && !optionItems.length)) {\n      return;\n    }\n\n    // delete any prior context menu\n    this.destroyMenu(e);\n\n    // Let the user modify the menu or cancel altogether,\n    // or provide alternative menu implementation.\n    if (this.onBeforeMenuShow.notify({\n      cell: this._currentCell,\n      row: this._currentRow,\n      grid: this._grid\n    }, e, this).getReturnValue() == false) {\n      return;\n    }\n\n    // create a new context menu\n    let maxHeight = isNaN(this._contextMenuProperties.maxHeight as number) ? this._contextMenuProperties.maxHeight : `${this._contextMenuProperties.maxHeight ?? 0}px`;\n    let width = isNaN(this._contextMenuProperties.width as number) ? this._contextMenuProperties.width : `${this._contextMenuProperties.maxWidth ?? 0}px`;\n\n    this._menuElm = document.createElement('div');\n    this._menuElm.className = `slick-context-menu ${this._gridUid}`;\n    this._menuElm.role = 'menu';\n    if (width) {\n      this._menuElm.style.width = width as string;\n    }\n    if (maxHeight) {\n      this._menuElm.style.maxHeight = maxHeight as string;\n    }\n    this._menuElm.style.top = `${targetEvent.pageY}px`;\n    this._menuElm.style.left = `${targetEvent.pageX}px`;\n    this._menuElm.style.display = 'none';\n\n    const closeButtonElm = document.createElement('button');\n    closeButtonElm.type = 'button';\n    closeButtonElm.className = 'close';\n    closeButtonElm.dataset.dismiss = 'slick-context-menu';\n    closeButtonElm.ariaLabel = 'Close';\n\n    const spanCloseElm = document.createElement('span');\n    spanCloseElm.className = 'close';\n    spanCloseElm.ariaHidden = 'true';\n    spanCloseElm.innerHTML = '&times;';\n    closeButtonElm.appendChild(spanCloseElm);\n\n    // -- Option List section\n    if (!this._contextMenuProperties.hideOptionSection && isColumnOptionAllowed && optionItems.length > 0) {\n      const optionMenuElm = document.createElement('div');\n      optionMenuElm.className = 'slick-context-menu-option-list';\n      optionMenuElm.role = 'menu';\n\n      if (!this._contextMenuProperties.hideCloseButton) {\n        this._bindingEventService.bind(closeButtonElm, 'click', this.handleCloseButtonClicked.bind(this));\n        this._menuElm.appendChild(closeButtonElm);\n      }\n      this._menuElm.appendChild(optionMenuElm)\n\n      this.populateOptionItems(\n        this._contextMenuProperties,\n        optionMenuElm,\n        optionItems,\n        { cell: this._currentCell, row: this._currentRow, column: columnDef, dataContext: dataContext, grid: this._grid }\n      );\n    }\n\n    // -- Command List section\n    if (!this._contextMenuProperties.hideCommandSection && isColumnCommandAllowed && commandItems.length > 0) {\n      const commandMenuElm = document.createElement('div');\n      commandMenuElm.className = 'slick-context-menu-command-list';\n      commandMenuElm.role = 'menu';\n\n      if (!this._contextMenuProperties.hideCloseButton && (!isColumnOptionAllowed || optionItems.length === 0 || this._contextMenuProperties.hideOptionSection)) {\n        this._bindingEventService.bind(closeButtonElm, 'click', this.handleCloseButtonClicked.bind(this));\n        this._menuElm.appendChild(closeButtonElm);\n      }\n\n      this._menuElm.appendChild(commandMenuElm);\n      this.populateCommandItems(\n        this._contextMenuProperties,\n        commandMenuElm,\n        commandItems,\n        { cell: this._currentCell, row: this._currentRow, column: columnDef, dataContext: dataContext, grid: this._grid }\n      );\n    }\n\n    this._menuElm.style.display = 'block';\n    document.body.appendChild(this._menuElm);\n\n    if (this.onAfterMenuShow.notify({\n      cell: this._currentCell,\n      row: this._currentRow,\n      grid: this._grid\n    }, e, this).getReturnValue() == false) {\n      return;\n    }\n\n    return this._menuElm;\n  }\n\n  protected handleCloseButtonClicked(e) {\n    if (!e.defaultPrevented) {\n      this.destroyMenu(e);\n    }\n  }\n\n  destroyMenu(e?: Event, args?: { cell: number; row: number; }) {\n    this._menuElm = this._menuElm || document.querySelector(`.slick-context-menu.${this._gridUid}`);\n\n    if (this._menuElm?.remove) {\n      if (this.onBeforeMenuClose.notify({\n        cell: args?.cell ?? 0,\n        row: args?.row ?? 0,\n        grid: this._grid,\n      }, e, this).getReturnValue() == false) {\n        return;\n      }\n      this._menuElm.remove();\n      this._menuElm = null;\n    }\n  }\n\n  protected checkIsColumnAllowed(columnIds: Array<number | string>, columnId: number | string) {\n    let isAllowedColumn = false;\n\n    if (columnIds?.length > 0) {\n      for (let o = 0, ln = columnIds.length; o < ln; o++) {\n        if (columnIds[o] === columnId) {\n          isAllowedColumn = true;\n        }\n      }\n    } else {\n      isAllowedColumn = true;\n    }\n    return isAllowedColumn;\n  }\n\n  protected handleOnContextMenu(e: DOMMouseOrTouchEvent<HTMLDivElement>, args: MenuCommandItemCallbackArgs) {\n    if (e instanceof SlickEventData) {\n      e = (e as SlickEventData_).getNativeEvent();\n    }\n    e.preventDefault();\n    let cell = this._grid.getCellFromEvent(e);\n\n    if (cell) {\n\n      let columnDef = this._grid.getColumns()[cell.cell];\n      let dataContext = this._grid.getDataItem(cell.row);\n\n      // run the override function (when defined), if the result is false it won't go further\n      args = args || {};\n      args.cell = cell.cell;\n      args.row = cell.row;\n      args.column = columnDef;\n      args.dataContext = dataContext;\n      args.grid = this._grid;\n\n      if (!this.runOverrideFunctionWhenExists(this._contextMenuProperties.menuUsabilityOverride, args)) {\n        return;\n      }\n\n      // create the DOM element\n      this._menuElm = this.createMenu(e);\n\n      // reposition the menu to where the user clicked\n      if (this._menuElm) {\n        this.repositionMenu(e);\n        this._menuElm.style.display = 'block';\n      }\n\n      this._bindingEventService.bind(document.body, 'click', (e) => {\n        if (!e.defaultPrevented) {\n          this.destroyMenu(e, { cell: this._currentCell, row: this._currentRow });\n        }\n      });\n    }\n  }\n\n  /** Construct the Option Items section. */\n  protected populateOptionItems(contextMenu: ContextMenuOption, optionMenuElm: HTMLElement, optionItems: Array<MenuOptionItem | 'divider'>, args: any) {\n    if (!args || !optionItems || !contextMenu) {\n      return;\n    }\n\n    // user could pass a title on top of the Options section\n    if (contextMenu?.optionTitle) {\n      this._optionTitleElm = document.createElement('div');\n      this._optionTitleElm.className = 'title';\n      this._optionTitleElm.textContent = contextMenu.optionTitle;\n      optionMenuElm.appendChild(this._optionTitleElm);\n    }\n\n    for (let i = 0, ln = optionItems.length; i < ln; i++) {\n      let addClickListener = true;\n      let item = optionItems[i];\n\n      // run each override functions to know if the item is visible and usable\n      let isItemVisible = this.runOverrideFunctionWhenExists<typeof args>((item as MenuOptionItem).itemVisibilityOverride, args);\n      let isItemUsable = this.runOverrideFunctionWhenExists<typeof args>((item as MenuOptionItem).itemUsabilityOverride, args);\n\n      // if the result is not visible then there's no need to go further\n      if (!isItemVisible) {\n        continue;\n      }\n\n      // when the override is defined, we need to use its result to update the disabled property\n      // so that \"handleMenuItemOptionClick\" has the correct flag and won't trigger an option clicked event\n      if (Object.prototype.hasOwnProperty.call(item, 'itemUsabilityOverride')) {\n        (item as MenuOptionItem).disabled = isItemUsable ? false : true;\n      }\n\n      const liElm = document.createElement('div');\n      liElm.className = 'slick-context-menu-item';\n      liElm.role = 'menuitem';\n\n      if ((item as MenuOptionItem).divider || item === 'divider') {\n        liElm.classList.add('slick-context-menu-item-divider');\n        addClickListener = false;\n      }\n\n      // if the item is disabled then add the disabled css class\n      if ((item as MenuOptionItem).disabled || !isItemUsable) {\n        liElm.classList.add('slick-context-menu-item-disabled');\n      }\n\n      // if the item is hidden then add the hidden css class\n      if ((item as MenuOptionItem).hidden) {\n        liElm.classList.add('slick-context-menu-item-hidden');\n      }\n\n      if ((item as MenuOptionItem).cssClass) {\n        liElm.classList.add(...(item as MenuOptionItem).cssClass!.split(' '));\n      }\n\n      if ((item as MenuOptionItem).tooltip) {\n        liElm.title = (item as MenuOptionItem).tooltip || '';\n      }\n\n      const iconElm = document.createElement('div');\n      iconElm.role = 'button';\n      iconElm.className = 'slick-context-menu-icon';\n\n      liElm.appendChild(iconElm);\n\n      if ((item as MenuOptionItem).iconCssClass) {\n        iconElm.classList.add(...(item as MenuOptionItem).iconCssClass!.split(' '));\n      }\n\n      if ((item as MenuOptionItem).iconImage) {\n        iconElm.style.backgroundImage = `url(${(item as MenuOptionItem).iconImage})`;\n      }\n\n      const textElm = document.createElement('span');\n      textElm.className = 'slick-context-menu-content';\n      textElm.textContent = (item as MenuOptionItem).title || '';\n\n      liElm.appendChild(textElm);\n\n      if ((item as MenuOptionItem).textCssClass) {\n        textElm.classList.add(...(item as MenuOptionItem).textCssClass!.split(' '));\n      }\n\n      optionMenuElm.appendChild(liElm);\n\n      if (addClickListener) {\n        this._bindingEventService.bind(liElm, 'click', this.handleMenuItemOptionClick.bind(this, item) as EventListener);\n      }\n    }\n  }\n\n  /** Construct the Command Items section. */\n  protected populateCommandItems(contextMenu: ContextMenuOption, commandMenuElm: HTMLElement, commandItems: Array<MenuCommandItem | 'divider'>, args: any) {\n    if (!args || !commandItems || !contextMenu) {\n      return;\n    }\n\n    // user could pass a title on top of the Commands section\n    if (contextMenu && contextMenu.commandTitle) {\n      this._commandTitleElm = document.createElement('div');\n      this._commandTitleElm.className = 'title';\n      this._commandTitleElm.textContent = contextMenu.commandTitle;\n      commandMenuElm.appendChild(this._commandTitleElm);\n    }\n\n    for (let i = 0, ln = commandItems.length; i < ln; i++) {\n      let addClickListener = true;\n      let item = commandItems[i];\n\n      // run each override functions to know if the item is visible and usable\n      let isItemVisible = this.runOverrideFunctionWhenExists<typeof args>((item as MenuCommandItem).itemVisibilityOverride, args);\n      let isItemUsable = this.runOverrideFunctionWhenExists<typeof args>((item as MenuCommandItem).itemUsabilityOverride, args);\n\n      // if the result is not visible then there's no need to go further\n      if (!isItemVisible) {\n        continue;\n      }\n\n      // when the override is defined, we need to use its result to update the disabled property\n      // so that \"handleMenuItemCommandClick\" has the correct flag and won't trigger a command clicked event\n      if (Object.prototype.hasOwnProperty.call(item, 'itemUsabilityOverride')) {\n        (item as MenuCommandItem).disabled = isItemUsable ? false : true;\n      }\n\n      const liElm = document.createElement('div');\n      liElm.className = 'slick-context-menu-item';\n      liElm.role = 'menuitem';\n\n      if ((item as MenuCommandItem).divider || item === 'divider') {\n        liElm.classList.add('slick-context-menu-item-divider');\n        addClickListener = false;\n      }\n\n      // if the item is disabled then add the disabled css class\n      if ((item as MenuCommandItem).disabled || !isItemUsable) {\n        liElm.classList.add('slick-context-menu-item-disabled');\n      }\n\n      // if the item is hidden then add the hidden css class\n      if ((item as MenuCommandItem).hidden) {\n        liElm.classList.add('slick-context-menu-item-hidden');\n      }\n\n      if ((item as MenuCommandItem).cssClass) {\n        liElm.classList.add(...(item as MenuCommandItem).cssClass!.split(' '));\n      }\n\n      if ((item as MenuCommandItem).tooltip) {\n        liElm.title = (item as MenuCommandItem).tooltip || '';\n      }\n\n      const iconElm = document.createElement('div');\n      iconElm.className = 'slick-context-menu-icon';\n\n      liElm.appendChild(iconElm);\n\n      if ((item as MenuCommandItem).iconCssClass) {\n        iconElm.classList.add(...(item as MenuCommandItem).iconCssClass!.split(' '));\n      }\n\n      if ((item as MenuCommandItem).iconImage) {\n        iconElm.style.backgroundImage = `url(${(item as MenuCommandItem).iconImage})`;\n      }\n\n      const textElm = document.createElement('span');\n      textElm.className = 'slick-context-menu-content';\n      textElm.textContent = (item as MenuCommandItem).title || '';\n\n      liElm.appendChild(textElm);\n\n      if ((item as MenuCommandItem).textCssClass) {\n        textElm.classList.add(...(item as MenuCommandItem).textCssClass!.split(' '));\n      }\n\n      commandMenuElm.appendChild(liElm);\n\n      if (addClickListener) {\n        this._bindingEventService.bind(liElm, 'click', this.handleMenuItemCommandClick.bind(this, item) as EventListener);\n      }\n    }\n  }\n\n  protected handleMenuItemCommandClick(item: MenuCommandItem | 'divider', e: DOMMouseOrTouchEvent<HTMLDivElement>) {\n    if (!item || (item as MenuCommandItem).disabled || (item as MenuCommandItem).divider) {\n      return;\n    }\n\n    const command = (item as MenuCommandItem).command || '';\n    const row = this._currentRow;\n    const cell = this._currentCell;\n    let columnDef = this._grid.getColumns()[cell];\n    let dataContext = this._grid.getDataItem(row);\n    let cellValue;\n\n    if (Object.prototype.hasOwnProperty.call(dataContext, columnDef && columnDef.field)) {\n      cellValue = dataContext[columnDef.field];\n    }\n\n    if (command !== null && command !== '') {\n      // user could execute a callback through 2 ways\n      // via the onCommand event and/or an action callback\n      let callbackArgs = {\n        cell,\n        row,\n        grid: this._grid,\n        command,\n        item: item as MenuCommandItem,\n        column: columnDef,\n        dataContext,\n        value: cellValue\n      };\n      this.onCommand.notify(callbackArgs, e, this);\n\n      // execute action callback when defined\n      if (typeof (item as MenuCommandItem).action === 'function') {\n        (item as any).action.call(this, e, callbackArgs);\n      }\n    }\n  }\n\n  protected handleMenuItemOptionClick(item: MenuOptionItem | 'divider', e: DOMMouseOrTouchEvent<HTMLDivElement>) {\n    if ((item as MenuOptionItem).disabled || (item as MenuOptionItem).divider) {\n      return;\n    }\n    if (!this._grid.getEditorLock().commitCurrentEdit()) {\n      return;\n    }\n\n    const option = (item as MenuOptionItem).option !== undefined ? (item as MenuOptionItem).option : '';\n    const row = this._currentRow;\n    const cell = this._currentCell;\n    const columnDef = this._grid.getColumns()[cell];\n    const dataContext = this._grid.getDataItem(row);\n\n    if (option !== undefined) {\n      // user could execute a callback through 2 ways\n      // via the onOptionSelected event and/or an action callback\n      let callbackArgs = {\n        cell,\n        row,\n        grid: this._grid,\n        option,\n        item: item as MenuOptionItem,\n        column: columnDef,\n        dataContext,\n      };\n      this.onOptionSelected.notify(callbackArgs, e, this);\n\n      // execute action callback when defined\n      if (typeof (item as MenuOptionItem).action === 'function') {\n        (item as any).action.call(this, e, callbackArgs);\n      }\n    }\n  }\n\n  /**\n   * Reposition the menu drop (up/down) and the side (left/right)\n   * @param {*} event\n   */\n  protected repositionMenu(e: DOMMouseOrTouchEvent<HTMLDivElement>) {\n    if (this._menuElm && e.target) {\n      const targetEvent = e.touches ? e.touches[0] : e;\n      const parentElm = e.target.closest('.slick-cell') as HTMLDivElement;\n      const parentOffset = (parentElm && Utils.offset(parentElm));\n      let menuOffsetLeft = targetEvent.pageX;\n      let menuOffsetTop = parentElm ? parentOffset?.top ?? 0 : targetEvent.pageY;\n      const menuHeight = this._menuElm?.offsetHeight || 0;\n      const menuWidth = this._menuElm?.offsetWidth || this._contextMenuProperties.width || 0;\n      let rowHeight = this._gridOptions.rowHeight;\n      let dropOffset = this._contextMenuProperties.autoAdjustDropOffset;\n      let sideOffset = this._contextMenuProperties.autoAlignSideOffset;\n\n      // if autoAdjustDrop is enable, we first need to see what position the drop will be located\n      // without necessary toggling it's position just yet, we just want to know the future position for calculation\n      if (this._contextMenuProperties.autoAdjustDrop) {\n        // since we reposition menu below slick cell, we need to take it in consideration and do our calculation from that element\n        let spaceBottom = Utils.calculateAvailableSpace(parentElm).bottom;\n        let spaceTop = Utils.calculateAvailableSpace(parentElm).top;\n        let spaceBottomRemaining = spaceBottom + dropOffset - rowHeight;\n        let spaceTopRemaining = spaceTop - dropOffset + rowHeight;\n        let dropPosition = (spaceBottomRemaining < menuHeight && spaceTopRemaining > spaceBottomRemaining) ? 'top' : 'bottom';\n        if (dropPosition === 'top') {\n          this._menuElm.classList.remove('dropdown');\n          this._menuElm.classList.add('dropup');\n          menuOffsetTop = menuOffsetTop - menuHeight - dropOffset;\n        } else {\n          this._menuElm.classList.remove('dropup');\n          this._menuElm.classList.add('dropdown');\n          menuOffsetTop = menuOffsetTop + rowHeight + dropOffset;\n        }\n      }\n\n      // when auto-align is set, it will calculate whether it has enough space in the viewport to show the drop menu on the right (default)\n      // if there isn't enough space on the right, it will automatically align the drop menu to the left\n      // to simulate an align left, we actually need to know the width of the drop menu\n      if (this._contextMenuProperties.autoAlignSide) {\n        let gridPos = this._grid.getGridPosition();\n        let dropSide = ((menuOffsetLeft + (+menuWidth)) >= gridPos.width) ? 'left' : 'right';\n        if (dropSide === 'left') {\n          this._menuElm.classList.remove('dropright');\n          this._menuElm.classList.add('dropleft');\n          menuOffsetLeft = (menuOffsetLeft - (+menuWidth) - sideOffset);\n        } else {\n          this._menuElm.classList.remove('dropleft');\n          this._menuElm.classList.add('dropright');\n          menuOffsetLeft = menuOffsetLeft + sideOffset;\n        }\n      }\n\n      // ready to reposition the menu\n      this._menuElm.style.top = `${menuOffsetTop}px`;\n      this._menuElm.style.left = `${menuOffsetLeft}px`;\n    }\n  }\n\n  /**\n   * Method that user can pass to override the default behavior.\n   * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\n   * @param overrideFn: override function callback\n   * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\n   */\n  protected runOverrideFunctionWhenExists<T = any>(overrideFn: ((args: any) => boolean) | undefined, args: T): boolean {\n    if (typeof overrideFn === 'function') {\n      return overrideFn.call(this, args);\n    }\n    return true;\n  }\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      Plugins: {\n        ContextMenu: SlickContextMenu\n      }\n    }\n  });\n}\n\n", "import { Event as SlickEvent_, EventHandler as EventHandler_, Utils as Utils_ } from '../slick.core';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : EventHandler_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n/**\n * Row Move Manager options:\n *    cssClass:                 A CSS class to be added to the menu item container.\n *    columnId:                 Column definition id (defaults to \"_move\")\n *    cancelEditOnDrag:         Do we want to cancel any Editing while dragging a row (defaults to false)\n *    disableRowSelection:      Do we want to disable the row selection? (defaults to false)\n *    hideRowMoveShadow:        Do we want to hide the row move shadow clone? (defaults to true)\n *    rowMoveShadowMarginTop:   When row move shadow is shown, optional margin-top (defaults to 0)\n *    rowMoveShadowMarginLeft:  When row move shadow is shown, optional margin-left (defaults to 0)\n *    rowMoveShadowOpacity:     When row move shadow is shown, what is its opacity? (defaults to 0.95)\n *    rowMoveShadowScale:       When row move shadow is shown, what is its size scale? (default to 0.75)\n *    singleRowMove:            Do we want a single row move? Setting this to false means that it's a multple row move (defaults to false)\n *    width:                    Width of the column\n *    usabilityOverride:        Callback method that user can override the default behavior of the row being moveable or not\n *\n */\n\nexport function CrossGridRowMoveManager(options) {\n    var _grid;\n    var _canvas;\n    var _toGrid;\n    var _toCanvas;\n    var _dragging;\n    var _self = this;\n    var _usabilityOverride = null;\n  var _handler = new EventHandler();\n    var _defaults = {\n      columnId: \"_move\",\n      cssClass: null,\n      cancelEditOnDrag: false,\n      disableRowSelection: false,\n      hideRowMoveShadow: true,\n      rowMoveShadowMarginTop: 0,\n      rowMoveShadowMarginLeft: 0,\n      rowMoveShadowOpacity: 0.95,\n      rowMoveShadowScale: 0.75,\n      singleRowMove: false,\n      width: 40,\n    };\n\n    // user could override the expandable icon logic from within the options or after instantiating the plugin\n    if (options && typeof options.usabilityOverride === 'function') {\n      usabilityOverride(options.usabilityOverride);\n    }\n\n    function init(grid) {\n      options = Utils.extend(true, {}, _defaults, options);\n      _grid = grid;\n      _canvas = _grid.getCanvasNode();\n\n      _toGrid = options.toGrid;\n      _toCanvas = _toGrid.getCanvasNode();\n      _handler\n        .subscribe(_grid.onDragInit, handleDragInit)\n        .subscribe(_grid.onDragStart, handleDragStart)\n        .subscribe(_grid.onDrag, handleDrag)\n        .subscribe(_grid.onDragEnd, handleDragEnd);\n    }\n\n    function destroy() {\n      _handler.unsubscribeAll();\n    }\n\n    function setOptions(newOptions) {\n      options = Utils.extend({}, options, newOptions);\n    }\n\n    function handleDragInit(e) {\n      // prevent the grid from cancelling drag'n'drop by default\n      e.stopImmediatePropagation();\n    }\n\n    function handleDragStart(e, dd) {\n      var cell = _grid.getCellFromEvent(e);\n      var currentRow = cell && cell.row;\n      var dataContext = _grid.getDataItem(currentRow);\n\n      if (!checkUsabilityOverride(currentRow, dataContext, _grid)) {\n        return;\n      }\n\n      if (options.cancelEditOnDrag && _grid.getEditorLock().isActive()) {\n        _grid.getEditorLock().cancelCurrentEdit();\n      }\n\n      if (_grid.getEditorLock().isActive() || !isHandlerColumn(cell.cell)) {\n        return false;\n      }\n\n      _dragging = true;\n      e.stopImmediatePropagation();\n\n      // optionally create a shadow element of the row so that we can see all the time which row exactly we're dragging\n      if (!options.hideRowMoveShadow) {\n        const cellNodeElm = _grid.getCellNode(cell.row, cell.cell);\n        const slickRowElm = cellNodeElm && cellNodeElm.closest('.slick-row');\n        if (slickRowElm) {\n          dd.clonedSlickRow = slickRowElm.cloneNode(true);\n          dd.clonedSlickRow.classList.add('slick-reorder-shadow-row');\n          dd.clonedSlickRow.style.display = 'none';\n          dd.clonedSlickRow.style.marginLeft = Number(options.rowMoveShadowMarginLeft || 0) + 'px';\n          dd.clonedSlickRow.style.marginTop = Number(options.rowMoveShadowMarginTop || 0) + 'px';\n          dd.clonedSlickRow.style.opacity = `${options.rowMoveShadowOpacity || 0.95}`;\n          dd.clonedSlickRow.style.transform = `scale(${options.rowMoveShadowScale || 0.75})`;\n          _canvas.appendChild(dd.clonedSlickRow);\n        }\n      }\n\n      var selectedRows = options.singleRowMove ? [cell.row] : _grid.getSelectedRows();\n\n      if (selectedRows.length === 0 || !selectedRows.some(selectedRow => selectedRow === cell.row)) {\n        selectedRows = [cell.row];\n        if (!options.disableRowSelection) {\n          _grid.setSelectedRows(selectedRows);\n        }\n      }\n\n      selectedRows.sort(function(a,b) { return a-b; });\n\n      var rowHeight = _grid.getOptions().rowHeight;\n\n      dd.fromGrid = _grid;\n      dd.toGrid = _toGrid;\n      dd.selectedRows = selectedRows;\n\n      dd.selectionProxy = document.createElement('div');\n      dd.selectionProxy.className = 'slick-reorder-proxy';\n      dd.selectionProxy.style.display = 'none';\n      dd.selectionProxy.style.position = 'absolute';\n      dd.selectionProxy.style.zIndex = '99999';\n      dd.selectionProxy.style.width = `${_toCanvas.clientWidth}px`;\n      dd.selectionProxy.style.height = `${rowHeight * selectedRows.length}px`;\n      _toCanvas.appendChild(dd.selectionProxy);\n\n      dd.guide = document.createElement('div');\n      dd.guide.className = 'slick-reorder-guide';\n      dd.guide.style.position = 'absolute';\n      dd.guide.style.zIndex = '99999';\n      dd.guide.style.width = `${_toCanvas.clientWidth}px`;\n      dd.guide.style.top = `-1000px`;\n      _toCanvas.appendChild(dd.guide);\n\n      dd.insertBefore = -1;\n    }\n\n    function handleDrag(evt, dd) {\n      if (!_dragging) {\n        return;\n      }\n\n      evt.stopImmediatePropagation();\n      const e = evt.getNativeEvent();\n\n      var targetEvent = e.touches ? e.touches[0] : e;\n      const top = targetEvent.pageY - (Utils.offset(_toCanvas).top || 0);\n      dd.selectionProxy.style.top = `${top - 5}px`;\n      dd.selectionProxy.style.display = 'block';\n\n      // if the row move shadow is enabled, we'll also make it follow the mouse cursor\n      if (dd.clonedSlickRow) {\n        dd.clonedSlickRow.style.top = `${top - 6}px`;\n        dd.clonedSlickRow.style.display = 'block';\n      }\n\n      var insertBefore = Math.max(0, Math.min(Math.round(top / _toGrid.getOptions().rowHeight), _toGrid.getDataLength()));\n      if (insertBefore !== dd.insertBefore) {\n        var eventData = {\n          \"fromGrid\": _grid,\n          \"toGrid\": _toGrid,\n          \"rows\": dd.selectedRows,\n          \"insertBefore\": insertBefore\n        };\n\n        if (_self.onBeforeMoveRows.notify(eventData).getReturnValue() === false) {\n          dd.canMove = false;\n        } else {\n          dd.canMove = true;\n        }\n\n        // if there's a UsabilityOverride defined, we also need to verify that the condition is valid\n        if (_usabilityOverride && dd.canMove) {\n          var insertBeforeDataContext = _toGrid.getDataItem(insertBefore);\n          dd.canMove = checkUsabilityOverride(insertBefore, insertBeforeDataContext, _toGrid);\n        }\n\n        // if the new target is possible we'll display the dark blue bar (representin the acceptability) at the target position\n        // else it won't show up (it will be off the screen)\n        if (!dd.canMove) {\n          dd.guide.style.top = '-1000px';\n        } else {\n          dd.guide.style.top = `${insertBefore * (_toGrid.getOptions().rowHeight || 0)}px`;\n        }\n\n        dd.insertBefore = insertBefore;\n      }\n    }\n\n    function handleDragEnd(e, dd) {\n      if (!_dragging) {\n        return;\n      }\n      _dragging = false;\n      e.stopImmediatePropagation();\n\n      dd.guide.remove();\n      dd.selectionProxy.remove();\n      if (dd.clonedSlickRow) {\n        dd.clonedSlickRow.remove();\n        dd.clonedSlickRow = null;\n      }\n\n      if (dd.canMove) {\n        var eventData = {\n          \"fromGrid\": _grid,\n          \"toGrid\": _toGrid,\n          \"rows\": dd.selectedRows,\n          \"insertBefore\": dd.insertBefore\n        };\n        // TODO:  _grid.remapCellCssClasses ?\n        _self.onMoveRows.notify(eventData);\n      }\n    }\n\n    function getColumnDefinition() {\n      return {\n        id: options.columnId || \"_move\",\n        name: \"\",\n        field: \"move\",\n        width: options.width || 40,\n        behavior: \"selectAndMove\",\n        selectable: false,\n        resizable: false,\n        cssClass: options.cssClass,\n        formatter: moveIconFormatter\n      };\n    }\n\n    function moveIconFormatter(row, cell, value, columnDef, dataContext, grid) {\n      if (!checkUsabilityOverride(row, dataContext, grid)) {\n        return null;\n      } else {\n        return { addClasses: \"cell-reorder dnd\", text: \"\" };\n      }\n    }\n\n    function checkUsabilityOverride(row, dataContext, grid) {\n      if (typeof _usabilityOverride === 'function') {\n        return _usabilityOverride(row, dataContext, grid);\n      }\n      return true;\n    }\n\n    /**\n     * Method that user can pass to override the default behavior or making every row moveable.\n     * In order word, user can choose which rows to be an available as moveable (or not) by providing his own logic show/hide icon and usability.\n     * @param overrideFn: override function callback\n     */\n    function usabilityOverride(overrideFn) {\n      _usabilityOverride = overrideFn;\n    }\n\n    function isHandlerColumn(columnIndex) {\n      return /move|selectAndMove/.test(_grid.getColumns()[columnIndex].behavior);\n    }\n\n  Utils.extend(this, {\n    \"onBeforeMoveRows\": new SlickEvent(),\n    \"onMoveRows\": new SlickEvent(),\n\n      \"init\": init,\n      \"destroy\": destroy,\n      \"getColumnDefinition\": getColumnDefinition,\n      \"setOptions\": setOptions,\n      \"usabilityOverride\": usabilityOverride,\n      \"isHandlerColumn\": isHandlerColumn,\n      \"pluginName\": \"CrossGridRowMoveManager\"\n    });\n  }\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      CrossGridRowMoveManager\n    }\n  });\n}\n\n", "import { EventHandler as EventHandler_, Utils as Utils_ } from '../slick.core';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : EventHandler_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n/**\n * A plugin to add Custom Tooltip when hovering a cell, it subscribes to the cell \"onMouseEnter\" and \"onMouseLeave\" events.\n * The \"customTooltip\" is defined in the Column Definition OR Grid Options (the first found will have priority over the second)\n *\n * USAGE:\n *\n * Add the slick.customTooltip.(js|css) files and register it with the grid.\n *\n * To specify a tooltip when hovering a cell, extend the column definition like so:\n * var customTooltipPlugin = new Slick.Plugins.CustomTooltip(columns, grid options);\n *\n * Available plugin options (same options are available in both column definition and/or grid options)\n *\n * Example 1  - via Column Definition\n *  var columns = [\n *    {\n *      id: \"action\", name: \"Action\", field: \"action\", formatter: fakeButtonFormatter,\n *      customTooltip: {\n *        formatter: tooltipTaskFormatter,\n *        usabilityOverride: (args) => !!(args.dataContext.id % 2) // show it only every second row\n *      }\n *    }\n *  ];\n *\n *  OR Example 2 - via Grid Options (for all columns), NOTE: the column definition tooltip options will win over the options defined in the grid options\n *  var gridOptions = {\n *    enableCellNavigation: true,\n *    customTooltip: {\n *      formatter: tooltipTaskFormatter,\n *      usabilityOverride: (args) => !!(args.dataContext.id % 2) // show it only every second row\n *    },\n *  };\n *\n * Available options that can be defined from either a column definition or in grid options (column definition options as precendence)\n *   asyncParamsPropName:                 defaults to \"__params\", optionally change the property name that will be used to merge the data returned by the async method into the `dataContext` object\n *   asyncProcess:                        Async Post method returning a Promise, it must return an object with 1 or more properties. internally the data that will automatically be merged into the `dataContext` object under the `__params` property so that you can use it in your `asyncPostFormatter` formatter.\n *   asyncPostFormatter:                  Formatter to execute once the async process is completed, to displayed the actual text result (used when dealing with an Async API to get data to display later in the tooltip)\n *   hideArrow:                           defaults to False, should we hide the tooltip pointer arrow?\n *   className:                           defaults to \"slick-custom-tooltip\"\n *   formatter:                           Formatter to execute for displaying the data that will show in the tooltip. NOTE: when using `asyncProcess`, this formatter will be executed first and prior to the actual async process.\n *   headerFormatter:                     Formatter to execute when custom tooltip is over a header column\n *   headerRowFormatter:                  Formatter to execute when custom tooltip is over a heade row column (e.g. filter)\n *   maxHeight:                           optional maximum height number (in pixel) of the tooltip container\n *   maxWidth:                            optional maximum width number (in pixel) of the tooltip container\n *   offsetLeft:                          defaults to 0, optional left offset, it must be a positive/negative number (in pixel) that will be added to the offset position calculation of the tooltip container.\n *   offsetRight:                         defaults to 0, optional right offset, it must be a positive/negative number (in pixel) that will be added to the offset position calculation of the tooltip container.\n *   offsetTopBottom:                     defaults to 4, optional top or bottom offset (depending on which side it shows), it must be a positive/negative number (in pixel) that will be added to the offset position calculation of the tooltip container.\n *   position:                            defaults to \"auto\" (available options: 'auto' | 'top' | 'bottom' | 'left-align' | 'right-align'), allows to align the tooltip to the best logical position in the window, by default it will show on top left but if it calculates that it doesn't have enough space it will use bottom (same goes for each side align)\n *   regularTooltipWhiteSpace:            defaults to `pre-line`, optionally change the style `white-space` when displaying regular text tooltip. NOTE: when using a formatter it will use the `whiteSpace` setting instead\n *   whiteSpace:                          defaults to `normal`, optionally change the style `white-space` when displaying tooltip with formatter (tooltip or regular formatter)\n *   useRegularTooltip:                   defaults to False, when set to True it will try parse through the regular cell formatter and try to find a `title` attribute to show as a regular tooltip (also note: this has precedence over customTooltip formatter defined)\n *   useRegularTooltipFromFormatterOnly:  defaults to False, optionally force to retrieve the `title` from the Formatter result instead of the cell itself.\n *                                            for example, when used in combo with the AutoTooltip plugin we might want to force the tooltip to read the `title` attribute from the formatter result first instead of the cell itself,\n *                                            make the cell as a 2nd read, in other words check the formatter prior to the cell which the AutoTooltip might have filled.\n *   renderRegularTooltipAsHtml:          defaults to false, regular \"title\" tooltip won't be rendered as html unless specified via this flag (also \"\\r\\n\" will be replaced by <br>)\n *   tooltipTextMaxLength:                defaults to 700 (characters), when defined the text will be truncated to the max length characters provided\n *   usabilityOverride:                   callback method that user can override the default behavior of showing the tooltip. If it returns False, then the tooltip won't show\n *\n * @param options {Object} Custom Tooltip Options\n * @class Slick.Plugins.CustomTooltip\n * @varructor\n */\n\n/**\n   * CustomTooltip plugin to show/hide tooltips when columns are too narrow to fit content.\n   * @varructor\n   * @param {boolean} [options.className=\"slick-custom-tooltip\"]  - custom tooltip class name\n   * @param {boolean} [options.offsetTop=5]                       - tooltip offset from the top\n   */\nexport function CustomTooltip(options) {\n    var _cancellablePromise;\n    var _cellNodeElm;\n    var _dataView;\n    var _grid;\n    var _gridOptions;\n    var _tooltipElm;\n    var _defaults = {\n      className: 'slick-custom-tooltip',\n      offsetLeft: 0,\n      offsetRight: 0,\n      offsetTopBottom: 4,\n      hideArrow: false,\n      tooltipTextMaxLength: 700,\n      regularTooltipWhiteSpace: 'pre-line',\n      whiteSpace: 'normal',\n    };\n  var _eventHandler = new EventHandler();\n    var _cellTooltipOptions = {};\n    var _options;\n\n    /**\n     * Initialize plugin.\n     */\n    function init(grid) {\n      _grid = grid;\n      var _data = grid && grid.getData() || [];\n      _dataView = Array.isArray(_data) ? null : _data;\n      _gridOptions = grid.getOptions() || {};\n      _options = Utils.extend(true, {}, _defaults, _gridOptions.customTooltip, options);\n      _eventHandler\n        .subscribe(grid.onMouseEnter, handleOnMouseEnter)\n        .subscribe(grid.onHeaderMouseEnter, handleOnHeaderMouseEnter)\n        .subscribe(grid.onHeaderRowMouseEnter, handleOnHeaderRowMouseEnter)\n        .subscribe(grid.onMouseLeave, hideTooltip)\n        .subscribe(grid.onHeaderMouseLeave, hideTooltip)\n        .subscribe(grid.onHeaderRowMouseLeave, hideTooltip);\n    }\n\n    /**\n     * Destroy plugin.\n     */\n    function destroy() {\n      hideTooltip();\n      _eventHandler.unsubscribeAll();\n    }\n\n    /**\n     * Handle mouse entering grid header title to show tooltip.\n     * @param {jQuery.Event} e - The event\n     */\n    function handleOnHeaderMouseEnter(e, args) {\n      handleOnHeaderMouseEnterByType(e, args, 'slick-header-column');\n    }\n\n    /**\n     * Handle mouse entering grid cell header-row (filter) to show tooltip.\n     * @param {jQuery.Event} e - The event\n     */\n    function handleOnHeaderRowMouseEnter(e, args) {\n      handleOnHeaderMouseEnterByType(e, args, 'slick-headerrow-column');\n    }\n\n    /** depending on the selector type, execute the necessary handler code */\n    function handleOnHeaderMouseEnterByType(e, args, selector) {\n      // before doing anything, let's remove any previous tooltip before\n      // and cancel any opened Promise/Observable when using async\n      hideTooltip();\n\n      var cell = {\n        row: -1, // negative row to avoid pulling any dataContext while rendering\n        cell: _grid.getColumns().findIndex(function (col) { return args && args.column && args.column.id === col.id })\n      };\n      var columnDef = args.column;\n      var item = {};\n      var isHeaderRowType = selector === 'slick-headerrow-column';\n\n      // run the override function (when defined), if the result is false it won't go further\n      if (!args) {\n        args = {};\n      }\n      args.cell = cell.cell;\n      args.row = cell.row;\n      args.columnDef = columnDef;\n      args.dataContext = item;\n      args.grid = _grid;\n      args.type = isHeaderRowType ? 'header-row' : 'header';\n\n      _cellTooltipOptions = Utils.extend(true, {}, _options, columnDef.customTooltip);\n      if ((columnDef && columnDef.disableTooltip) || !runOverrideFunctionWhenExists(_cellTooltipOptions.usabilityOverride, args)) {\n        return;\n      }\n\n      if (columnDef && e.target) {\n        _cellNodeElm = findClosestHeaderNode(e.target, selector);\n        var formatter = isHeaderRowType ? _cellTooltipOptions.headerRowFormatter : _cellTooltipOptions.headerFormatter;\n\n        if (_cellTooltipOptions.useRegularTooltip || !formatter) {\n          var formatterOrText = !isHeaderRowType ? columnDef.name : _cellTooltipOptions.useRegularTooltip ? null : formatter;\n          renderRegularTooltip(formatterOrText, cell, null, columnDef, item);\n        } else if (_cellNodeElm && typeof formatter === 'function') {\n          renderTooltipFormatter(formatter, cell, null, columnDef, item);\n        }\n      }\n    }\n\n    function findClosestHeaderNode(elm, selector) {\n      if (typeof elm.closest === 'function') {\n        return elm.closest('.' + selector);\n      }\n      return elm.classList.contains(selector)\n        ? elm : elm.parentElement.classList.contains(selector)\n          ? elm.parentElement : null;\n    }\n\n    /**\n     * Handle mouse entering grid cell to show tooltip.\n     * @param {jQuery.Event} e - The event\n     */\n    function handleOnMouseEnter(e, args) {\n      // before doing anything, let's remove any previous tooltip before\n      // and cancel any opened Promise/Observable when using async\n      hideTooltip();\n\n      if (_grid && e) {\n        var cell = _grid.getCellFromEvent(e);\n\n        if (cell) {\n          var item = _dataView ? _dataView.getItem(cell.row) : _grid.getDataItem(cell.row);\n          var columnDef = _grid.getColumns()[cell.cell];\n          _cellNodeElm = _grid.getCellNode(cell.row, cell.cell);\n          _cellTooltipOptions = Utils.extend(true, {}, _options, columnDef.customTooltip);\n\n          if (item && columnDef) {\n            // run the override function (when defined), if the result is false it won't go further\n            if (!args) {\n              args = {};\n            }\n            args.cell = cell.cell;\n            args.row = cell.row;\n            args.columnDef = columnDef;\n            args.dataContext = item;\n            args.grid = _grid;\n            args.type = 'cell';\n            if ((columnDef && columnDef.disableTooltip) || !runOverrideFunctionWhenExists(_cellTooltipOptions.usabilityOverride, args)) {\n              return;\n            }\n\n            var value = item.hasOwnProperty(columnDef.field) ? item[columnDef.field] : null;\n\n            if (_cellTooltipOptions.useRegularTooltip || !_cellTooltipOptions.formatter) {\n              renderRegularTooltip(columnDef.formatter, cell, value, columnDef, item);\n            } else {\n              if (typeof _cellTooltipOptions.formatter === 'function') {\n                renderTooltipFormatter(_cellTooltipOptions.formatter, cell, value, columnDef, item);\n              }\n              if (typeof _cellTooltipOptions.asyncProcess === 'function') {\n                var asyncProcess = _cellTooltipOptions.asyncProcess(cell.row, cell.cell, value, columnDef, item, _grid);\n                if (!_cellTooltipOptions.asyncPostFormatter) {\n                  throw new Error('[SlickGrid] when using \"asyncProcess\", you must also provide an \"asyncPostFormatter\" formatter');\n                }\n\n                if (asyncProcess instanceof Promise) {\n                  // create a new cancellable promise which will resolve, unless it's cancelled, with the udpated `dataContext` object that includes the `__params`\n                  _cancellablePromise = cancellablePromise(asyncProcess);\n                  _cancellablePromise.promise\n                    .then(function (asyncResult) {\n                      asyncProcessCallback(asyncResult, cell, value, columnDef, item)\n                    })\n                    .catch(function (error) {\n                      // we will throw back any errors, unless it's a cancelled promise which in that case will be disregarded (thrown by the promise wrapper cancel() call)\n                      if (!(error.isPromiseCancelled)) {\n                        throw error;\n                      }\n                    });\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    function findFirstElementAttribute(inputElm, attributes) {\n      if (inputElm) {\n        var outputAttrData;\n        attributes.forEach(function (attribute) {\n          var attrData = inputElm.getAttribute(attribute);\n          if (attrData) {\n            outputAttrData = attrData;\n          }\n        });\n        return outputAttrData;\n      }\n      return null;\n    }\n\n    /**\n     * Parse the cell formatter and assume it might be html\n     * then create a temporary html element to easily retrieve the first [title=\"\"] attribute text content\n     * also clear the \"title\" attribute from the grid div text content so that it won't show also as a 2nd browser tooltip\n     */\n    function renderRegularTooltip(formatterOrText, cell, value, columnDef, item) {\n      var tmpDiv = document.createElement('div');\n      tmpDiv.innerHTML = parseFormatterAndSanitize(formatterOrText, cell, value, columnDef, item);\n      var tooltipText = columnDef.toolTip || '';\n      var tmpTitleElm;\n\n      if (!tooltipText) {\n        if ((_cellNodeElm && (_cellNodeElm.clientWidth < _cellNodeElm.scrollWidth)) && !_cellTooltipOptions.useRegularTooltipFromFormatterOnly) {\n          tooltipText = (_cellNodeElm.textContent || '').trim() || '';\n          if (_cellTooltipOptions.tooltipTextMaxLength && (tooltipText.length > _cellTooltipOptions.tooltipTextMaxLength)) {\n            tooltipText = tooltipText.substring(0, _cellTooltipOptions.tooltipTextMaxLength - 3) + '...';\n          }\n          tmpTitleElm = _cellNodeElm;\n        } else {\n          if (_cellTooltipOptions.useRegularTooltipFromFormatterOnly) {\n            tmpTitleElm = tmpDiv.querySelector('[title], [data-slick-tooltip]');\n          } else {\n            tmpTitleElm = findFirstElementAttribute(_cellNodeElm, ['title', 'data-slick-tooltip']) ? _cellNodeElm : tmpDiv.querySelector('[title], [data-slick-tooltip]');\n            if ((!tmpTitleElm || !findFirstElementAttribute(tmpTitleElm, ['title', 'data-slick-tooltip'])) && _cellNodeElm) {\n              tmpTitleElm = _cellNodeElm.querySelector('[title], [data-slick-tooltip]');\n            }\n          }\n          if (!tooltipText || (typeof formatterOrText === 'function' && _cellTooltipOptions.useRegularTooltipFromFormatterOnly)) {\n            tooltipText = findFirstElementAttribute(tmpTitleElm, ['title', 'data-slick-tooltip']) || '';\n          }\n        }\n      }\n\n      if (tooltipText !== '') {\n        renderTooltipFormatter(formatterOrText, cell, value, columnDef, item, tooltipText);\n      }\n\n      // also clear any \"title\" attribute to avoid showing a 2nd browser tooltip\n      swapAndClearTitleAttribute(tmpTitleElm, tooltipText);\n    }\n\n    /**\n   * swap and copy the \"title\" attribute into a new custom attribute then clear the \"title\" attribute\n   * from the grid div text content so that it won't show also as a 2nd browser tooltip\n   */\n    function swapAndClearTitleAttribute(inputTitleElm, tooltipText) {\n      // the title attribute might be directly on the slick-cell container element (when formatter returns a result object)\n      // OR in a child element (most commonly as a custom formatter)\n      var titleElm = inputTitleElm || (_cellNodeElm && ((_cellNodeElm.hasAttribute('title') && _cellNodeElm.getAttribute('title')) ? _cellNodeElm : _cellNodeElm.querySelector('[title]')));\n\n      // flip tooltip text from `title` to `data-slick-tooltip`\n      if (titleElm) {\n        titleElm.setAttribute('data-slick-tooltip', tooltipText || '');\n        if (titleElm.hasAttribute('title')) {\n          titleElm.setAttribute('title', '');\n        }\n      }\n    }\n\n    function asyncProcessCallback(asyncResult, cell, value, columnDef, dataContext) {\n      hideTooltip();\n      var itemWithAsyncData = Utils.extend(true, {}, dataContext, { [_cellTooltipOptions.asyncParamsPropName || '__params']: asyncResult });\n      renderTooltipFormatter(_cellTooltipOptions.asyncPostFormatter, cell, value, columnDef, itemWithAsyncData);\n    }\n\n\n    function calculateAvailableSpaceTop(element) {\n      var availableSpace = 0;\n      var pageScrollTop = Utils.windowScrollPosition().top;\n      var elmOffset = getHtmlElementOffset(element);\n      if (elmOffset) {\n        var elementOffsetTop = elmOffset.top;\n        availableSpace = elementOffsetTop - pageScrollTop;\n      }\n      return availableSpace;\n    }\n\n    function cancellablePromise(inputPromise) {\n      var hasCancelled = false;\n\n      if (inputPromise instanceof Promise) {\n        return {\n          promise: inputPromise.then(function (result) {\n            if (hasCancelled) {\n              throw { isPromiseCancelled: true };\n            }\n            return result;\n          }),\n          cancel: function () {\n            hasCancelled = true;\n          }\n        };\n      }\n      return inputPromise;\n    }\n\n    function getHtmlElementOffset(element) {\n      if (!element) {\n        return undefined;\n      }\n      var rect = element.getBoundingClientRect();\n      var top = 0;\n      var left = 0;\n      var bottom = 0;\n      var right = 0;\n\n      if (rect.top !== undefined && rect.left !== undefined) {\n        top = rect.top + window.pageYOffset;\n        left = rect.left + window.pageXOffset;\n        right = rect.right;\n        bottom = rect.bottom;\n      }\n      return { top: top, left: left, bottom: bottom, right: right };\n    }\n\n    /**\n     * hide (remove) tooltip from the DOM,\n     * when using async process, it will also cancel any opened Promise/Observable that might still be opened/pending.\n     */\n    function hideTooltip() {\n      if (_cancellablePromise && _cancellablePromise.cancel) {\n        _cancellablePromise.cancel();\n      }\n      var prevTooltip = document.body.querySelector('.' + _cellTooltipOptions.className + '.' + _grid.getUID());\n      if (prevTooltip && prevTooltip.remove) {\n        prevTooltip.remove();\n      }\n    }\n\n    /**\n     * Reposition the Tooltip to be top-left position over the cell.\n     * By default we use an \"auto\" mode which will allow to position the Tooltip to the best logical position in the window, also when we mention position, we are talking about the relative position against the grid cell.\n     * We can assume that in 80% of the time the default position is top-right, the default is \"auto\" but we can also override it and use a specific position.\n     * Most of the time positioning of the tooltip will be to the \"top-right\" of the cell is ok but if our column is completely on the right side then we'll want to change the position to \"left\" align.\n     * Same goes for the top/bottom position, Most of the time positioning the tooltip to the \"top\" but if we are hovering a cell at the top of the grid and there's no room to display it then we might need to reposition to \"bottom\" instead.\n     */\n    function reposition(cell) {\n      if (_tooltipElm) {\n        _cellNodeElm = _cellNodeElm || _grid.getCellNode(cell.row, cell.cell);\n        var cellPosition = getHtmlElementOffset(_cellNodeElm);\n        var cellContainerWidth = _cellNodeElm.offsetWidth;\n        var calculatedTooltipHeight = _tooltipElm.getBoundingClientRect().height;\n        var calculatedTooltipWidth = _tooltipElm.getBoundingClientRect().width;\n        var calculatedBodyWidth = document.body.offsetWidth || window.innerWidth;\n\n        // first calculate the default (top/left) position\n        var newPositionTop = cellPosition.top - _tooltipElm.offsetHeight - (_cellTooltipOptions.offsetTopBottom || 0);\n        var newPositionLeft = (cellPosition && cellPosition.left || 0) - (_cellTooltipOptions.offsetRight || 0);\n\n        // user could explicitely use a \"left-align\" arrow position, (when user knows his column is completely on the right in the grid)\n        // or when using \"auto\" and we detect not enough available space then we'll position to the \"left\" of the cell\n        var position = _cellTooltipOptions.position || 'auto';\n        if (position === 'center') {\n          newPositionLeft += (cellContainerWidth / 2) - (calculatedTooltipWidth / 2) + (_cellTooltipOptions.offsetRight || 0);\n          _tooltipElm.classList.remove('arrow-left-align');\n          _tooltipElm.classList.remove('arrow-right-align');\n          _tooltipElm.classList.add('arrow-center-align');\n\n        } else if (position === 'right-align' || ((position === 'auto' || position !== 'left-align') && (newPositionLeft + calculatedTooltipWidth) > calculatedBodyWidth)) {\n          newPositionLeft -= (calculatedTooltipWidth - cellContainerWidth - (_cellTooltipOptions.offsetLeft || 0));\n          _tooltipElm.classList.remove('arrow-center-align');\n          _tooltipElm.classList.remove('arrow-left-align');\n          _tooltipElm.classList.add('arrow-right-align');\n        } else {\n          _tooltipElm.classList.remove('arrow-center-align');\n          _tooltipElm.classList.remove('arrow-right-align');\n          _tooltipElm.classList.add('arrow-left-align');\n        }\n\n        // do the same calculation/reposition with top/bottom (default is top of the cell or in other word starting from the cell going down)\n        if (position === 'bottom' || (position === 'auto' && calculatedTooltipHeight > calculateAvailableSpaceTop(_cellNodeElm))) {\n          newPositionTop = cellPosition.top + (_gridOptions.rowHeight || 0) + (_cellTooltipOptions.offsetTopBottom || 0);\n          _tooltipElm.classList.remove('arrow-down');\n          _tooltipElm.classList.add('arrow-up');\n        } else {\n          _tooltipElm.classList.add('arrow-down');\n          _tooltipElm.classList.remove('arrow-up');\n        }\n\n        // reposition the tooltip over the cell (90% of the time this will end up using a position on the \"right\" of the cell)\n        _tooltipElm.style.top = newPositionTop + 'px';\n        _tooltipElm.style.left = newPositionLeft + 'px';\n      }\n    }\n\n    /**\n     * Parse the Custom Formatter (when provided) or return directly the text when it is already a string.\n     * We will also sanitize the text in both cases before returning it so that it can be used safely.\n     */\n    function parseFormatterAndSanitize(formatterOrText, cell, value, columnDef, item) {\n      if (typeof formatterOrText === 'function') {\n        var tooltipText = formatterOrText(cell.row, cell.cell, value, columnDef, item, _grid);\n        var formatterText = (typeof tooltipText === 'object' && tooltipText && tooltipText.text) ? tooltipText.text : (typeof tooltipText === 'string' ? tooltipText : '');\n        return _grid.sanitizeHtmlString(formatterText);\n      } else if (typeof formatterOrText === 'string') {\n        return _grid.sanitizeHtmlString(formatterOrText);\n      }\n      return '';\n    }\n\n\n    function renderTooltipFormatter(formatter, cell, value, columnDef, item, tooltipText, inputTitleElm) {\n      // create the tooltip DOM element with the text returned by the Formatter\n      _tooltipElm = document.createElement('div');\n      _tooltipElm.className = _cellTooltipOptions.className;\n      _tooltipElm.classList.add(_grid.getUID());\n      _tooltipElm.classList.add('l' + cell.cell);\n      _tooltipElm.classList.add('r' + cell.cell);\n      var outputText = tooltipText || parseFormatterAndSanitize(formatter, cell, value, columnDef, item) || '';\n      outputText = (_cellTooltipOptions.tooltipTextMaxLength && outputText.length > _cellTooltipOptions.tooltipTextMaxLength) ? outputText.substring(0, _cellTooltipOptions.tooltipTextMaxLength - 3) + '...' : outputText;\n\n      let finalOutputText = '';\n      if (!tooltipText || (_cellTooltipOptions && _cellTooltipOptions.renderRegularTooltipAsHtml)) {\n        finalOutputText = _grid.sanitizeHtmlString(outputText);\n        _tooltipElm.innerHTML = finalOutputText;\n        _tooltipElm.style.whiteSpace = (_cellTooltipOptions && _cellTooltipOptions.whiteSpace) || _defaults.whiteSpace;\n      } else {\n        finalOutputText = outputText || '';\n        _tooltipElm.textContent = finalOutputText;\n        _tooltipElm.style.whiteSpace = (_cellTooltipOptions && _cellTooltipOptions.regularTooltipWhiteSpace) || _defaults.regularTooltipWhiteSpace; // use `pre` so that sequences of white space are collapsed. Lines are broken at newline characters\n      }\n\n      // optional max height/width of the tooltip container\n      if (_cellTooltipOptions.maxHeight) {\n        _tooltipElm.style.maxHeight = _cellTooltipOptions.maxHeight + 'px';\n      }\n      if (_cellTooltipOptions.maxWidth) {\n        _tooltipElm.style.maxWidth = _cellTooltipOptions.maxWidth + 'px';\n      }\n\n      // when do have text to show, then append the new tooltip to the html body & reposition the tooltip\n      if (finalOutputText) {\n        document.body.appendChild(_tooltipElm);\n\n        // reposition the tooltip on top of the cell that triggered the mouse over event\n        reposition(cell);\n\n        // user could optionally hide the tooltip arrow (we can simply update the CSS variables, that's the only way we have to update CSS pseudo)\n        if (!_cellTooltipOptions.hideArrow) {\n          _tooltipElm.classList.add('tooltip-arrow');\n        }\n\n        // also clear any \"title\" attribute to avoid showing a 2nd browser tooltip\n        swapAndClearTitleAttribute(inputTitleElm, outputText);\n      }\n    }\n\n    /**\n     * Method that user can pass to override the default behavior.\n     * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\n     * @param overrideFn: override function callback\n     * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\n     */\n    function runOverrideFunctionWhenExists(overrideFn, args) {\n      if (typeof overrideFn === 'function') {\n        return overrideFn.call(this, args);\n      }\n      return true;\n    }\n\n    function setOptions(newOptions) {\n      _options = Utils.extend({}, _options, newOptions);\n    }\n\n    // Public API\n  Utils.extend(this, {\n      \"init\": init,\n      \"destroy\": destroy,\n      \"hide\": hideTooltip,\n      \"setOptions\": setOptions,\n      \"pluginName\": \"CustomTooltip\"\n    });\n  }\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      Plugins: {\n        CustomTooltip\n      }\n    }\n  });\n}\n\n", "import { BindingEventService as BindingEventService_, Event as SlickEvent_, EventHandler as EventHandler_, Utils as Utils_ } from '../slick.core';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : EventHandler_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n/**\n *\n * Draggable Grouping contributed by:  Muthukumar Selvarasu\n *  muthukumar{dot}se{at}gmail{dot}com\n *  github.com/muthukumarse/Slickgrid\n *\n * NOTES:\n *     This plugin provides the Draggable Grouping feature\n * A plugin to add Draggable Grouping feature.\n *\n * USAGE:\n *\n * Add the plugin .js & .css files and register it with the grid.\n *\n *\n * The plugin expose the following methods:\n *    destroy: used to destroy the plugin\n *    setDroppedGroups: provide option to set default grouping on loading\n *    clearDroppedGroups: provide option to clear grouping\n *    getSetupColumnReorder: its function to setup draggable feature agains Header Column, should be passed on grid option. Also possible to pass custom function\n *\n *\n * The plugin expose the following event(s):\n *    onGroupChanged: pass the grouped columns to who subscribed.\n *\n * @param options {Object} Options:\n *    deleteIconCssClass:  an extra CSS class to add to the delete button (default undefined), if deleteIconCssClass && deleteIconImage undefined then slick-groupby-remove-image class will be added\n *    deleteIconImage:     a url to the delete button image (default undefined)\n *    groupIconCssClass:   an extra CSS class to add to the grouping field hint  (default undefined)\n *    groupIconImage:      a url to the grouping field hint image (default undefined)\n *    dropPlaceHolderText:      option to specify set own placeholder note text\n *\n */\n\nexport function DraggableGrouping(options) {\n    var _grid;\n    var _gridUid;\n    var _gridColumns;\n    var _dataView;\n    var _dropzoneElm;\n    var _droppableInstance;\n    var dropzonePlaceholder;\n    var groupToggler;\n    var _defaults = {\n    };\n  var onGroupChanged = new SlickEvent();\n  var _bindingEventService = new BindingEventService();\n  var _handler = new EventHandler();\n    var _sortableLeftInstance;\n    var _sortableRightInstance;\n\n    /**\n     * Initialize plugin.\n     */\n    function init(grid) {\n      options = Utils.extend(true, {}, _defaults, options);\n      _grid = grid;\n      _gridUid = _grid.getUID();\n      _gridColumns = _grid.getColumns();\n      _dataView = _grid.getData();\n      _dropzoneElm = grid.getPreHeaderPanel();\n      _dropzoneElm.classList.add('slick-dropzone');\n\n      var dropPlaceHolderText = options.dropPlaceHolderText || 'Drop a column header here to group by the column';\n\n      dropzonePlaceholder = document.createElement('div')\n      dropzonePlaceholder.className = 'slick-placeholder';\n      dropzonePlaceholder.textContent = dropPlaceHolderText;\n\n      groupToggler = document.createElement('div');\n      groupToggler.className = 'slick-group-toggle-all expanded';\n      groupToggler.style.display = 'none';\n\n      _dropzoneElm.appendChild(dropzonePlaceholder);\n      _dropzoneElm.appendChild(groupToggler);\n\n      setupColumnDropbox();\n\n\n      _handler.subscribe(_grid.onHeaderCellRendered, function (e, args) {\n        var column = args.column;\n        var node = args.node;\n        if (!Utils.isEmptyObject(column.grouping) && node) {\n          node.style.cursor = 'pointer'; // add the pointer cursor on each column title\n\n          // also optionally add an icon beside each column title that can be dragged\n          if (options.groupIconCssClass || options.groupIconImage) {\n            const groupableIconElm = document.createElement('span');\n            groupableIconElm.className = 'slick-column-groupable';\n            if (options.groupIconCssClass) {\n              groupableIconElm.classList.add(...options.groupIconCssClass.split(' '));\n            }\n            if (options.groupIconImage) {\n              groupableIconElm.style.background = \"url(\" + options.groupIconImage + \") no-repeat center center\";\n            }\n            node.appendChild(groupableIconElm);\n          }\n        }\n      });\n\n      for (var i = 0; i < _gridColumns.length; i++) {\n        var columnId = _gridColumns[i].field;\n        _grid.updateColumnHeader(columnId);\n      }\n\n    }\n\n    function setupColumnReorder(grid, headers, _headerColumnWidthDiff, setColumns, setupColumnResize, _columns, getColumnIndex, _uid, trigger) {\n      const dropzoneElm = grid.getPreHeaderPanel();\n\n      var sortableOptions = {\n        animation: 50,\n        // chosenClass: 'slick-header-column-active',\n        ghostClass: \"slick-sortable-placeholder\",\n        draggable: '.slick-header-column',\n        dataIdAttr: 'data-id',\n        group: {\n          name: 'shared',\n          pull: 'clone',\n          put: false,\n        },\n        revertClone: true,\n        // filter: function (_e, target) {\n        //   // block column from being able to be dragged if it's already a grouped column\n        //   // NOTE: need to disable for now since it also blocks the column reordering\n        //   return columnsGroupBy.some(c => c.id === target.getAttribute('data-id'));\n        // },\n        onStart: function () {\n          dropzoneElm.classList.add('slick-dropzone-hover');\n          dropzoneElm.classList.add('slick-dropzone-placeholder-hover');\n          const draggablePlaceholderElm = dropzoneElm.querySelector('.slick-placeholder');\n\n          draggablePlaceholderElm.style.display = 'inline-block';\n          groupToggler.style.display = 'none';\n\n          const droppedGroupingElms = dropzoneElm.querySelectorAll('.slick-dropped-grouping');\n          droppedGroupingElms.forEach(droppedGroupingElm => droppedGroupingElm.style.display = 'none');\n        },\n        onEnd: function (e) {\n          const draggablePlaceholderElm = dropzoneElm.querySelector('.slick-placeholder');\n          dropzoneElm.classList.remove('slick-dropzone-hover');\n          draggablePlaceholderElm.classList.remove('slick-dropzone-placeholder-hover');\n\n\n          if (dropzonePlaceholder) {\n            dropzonePlaceholder.style.display = 'none';\n          }\n          if (draggablePlaceholderElm) {\n            draggablePlaceholderElm.parentElement && draggablePlaceholderElm.parentElement.classList.remove('slick-dropzone-placeholder-hover');\n          }\n\n          const droppedGroupingElms = dropzoneElm.querySelectorAll('.slick-dropped-grouping');\n          droppedGroupingElms.forEach(droppedGroupingElm => droppedGroupingElm.style.display = 'inline-flex');\n\n          if (droppedGroupingElms.length) {\n            if (draggablePlaceholderElm) {\n              draggablePlaceholderElm.style.display = 'none';\n            }\n            groupToggler.style.display = 'inline-block';\n          }\n\n          if (!grid.getEditorLock().commitCurrentEdit()) {\n            return;\n          }\n\n          const reorderedIds = _sortableLeftInstance && _sortableLeftInstance.toArray() || [];\n\n        // when frozen columns are used, headers has more than one entry and we need the ids from all of them.\n        // though there is only really a left and right header, this will work even if that should change.\n          if (headers.length > 1) {\n            const ids = _sortableRightInstance && _sortableRightInstance.toArray() || [];\n\n          // Note: the loop below could be simplified with:\n          // reorderedIds.push.apply(reorderedIds,ids);\n          // However, the loop is more in keeping with way-backward compatibility\n            for (const id of ids) {\n              reorderedIds.push(id);\n            }\n          }\n\n          const finalReorderedColumns = [];\n          const reorderedColumns = grid.getColumns();\n          for (const reorderedId of reorderedIds) {\n            finalReorderedColumns.push(reorderedColumns[getColumnIndex(reorderedId)]);\n          }\n          setColumns(finalReorderedColumns);\n          trigger(grid.onColumnsReordered, { grid });\n          e.stopPropagation();\n          setupColumnResize();\n        }\n      }\n\n      _sortableLeftInstance = Sortable.create(document.querySelector(`.${grid.getUID()} .slick-header-columns.slick-header-columns-left`), sortableOptions);\n      _sortableRightInstance = Sortable.create(document.querySelector(`.${grid.getUID()} .slick-header-columns.slick-header-columns-right`), sortableOptions);\n\n      return {\n        sortableLeftInstance: _sortableLeftInstance,\n        sortableRightInstance: _sortableRightInstance\n      };\n    }\n\n    /**\n     * Destroy plugin.\n     */\n    function destroy() {\n      if (_sortableLeftInstance && _sortableLeftInstance.el) {\n        _sortableLeftInstance.destroy();\n      }\n      if (_sortableRightInstance && _sortableRightInstance.el) {\n        _sortableRightInstance.destroy();\n      }\n      onGroupChanged.unsubscribe();\n      _handler.unsubscribeAll();\n      _bindingEventService.unbindAll();\n      Utils.emptyElement(document.querySelector(`.${_gridUid} .slick-preheader-panel`));\n    }\n\n    function addDragOverDropzoneListeners() {\n      const draggablePlaceholderElm = _dropzoneElm.querySelector('.slick-placeholder');\n\n      if (draggablePlaceholderElm) {\n        _bindingEventService.bind(draggablePlaceholderElm, 'dragover', (e) => e.preventDefault);\n        _bindingEventService.bind(draggablePlaceholderElm, 'dragenter', () => _dropzoneElm.classList.add('slick-dropzone-hover'));\n        _bindingEventService.bind(draggablePlaceholderElm, 'dragleave', () => _dropzoneElm.classList.remove('slick-dropzone-hover'));\n      }\n    }\n\n    function setupColumnDropbox() {\n      const dropzoneElm = _dropzoneElm;\n\n      _droppableInstance = Sortable.create(dropzoneElm, {\n        group: 'shared',\n        // chosenClass: 'slick-header-column-active',\n        ghostClass: 'slick-droppable-sortitem-hover',\n        draggable: '.slick-dropped-grouping',\n        dragoverBubble: true,\n        onAdd: (evt) => {\n          const el = evt.item;\n          const elId = el.getAttribute('id');\n          if (elId && elId.replace(_gridUid, '')) {\n            handleGroupByDrop(dropzoneElm, (Sortable.utils).clone(evt.item));\n          }\n          evt.clone.style.opacity = '.5';\n          el.parentNode && el.parentNode.removeChild(el);\n        },\n        onUpdate: () => {\n          const sortArray = _droppableInstance && _droppableInstance.toArray() || [];\n          let newGroupingOrder = [];\n          for (var i = 0, l = sortArray.length; i < l; i++) {\n            for (var a = 0, b = columnsGroupBy.length; a < b; a++) {\n              if (columnsGroupBy[a].id == sortArray[i]) {\n                newGroupingOrder.push(columnsGroupBy[a]);\n                break;\n              }\n            }\n          }\n          columnsGroupBy = newGroupingOrder;\n          updateGroupBy(\"sort-group\");\n        },\n      });\n\n      // Sortable doesn't have onOver, we need to implement it ourselves\n      addDragOverDropzoneListeners();\n\n      if (groupToggler) {\n        _bindingEventService.bind(groupToggler, 'click', ((event) => {\n          const target = event.target;\n          toggleGroupToggler(target, target && target.classList.contains('expanded'));\n        }));\n      }\n    }\n\n\n    var columnsGroupBy = [];\n\n    function handleGroupByDrop(containerElm, headerColumnElm) {\n      const headerColDataId = headerColumnElm.getAttribute('data-id');\n      const columnId = headerColDataId && headerColDataId.replace(_gridUid, '');\n      let columnAllowed = true;\n      for (const colGroupBy of columnsGroupBy) {\n        if (colGroupBy.id === columnId) {\n          columnAllowed = false;\n        }\n      }\n\n      if (columnAllowed) {\n        for (const col of _gridColumns) {\n          if (col.id === columnId) {\n            if (col.grouping && !Utils.isEmptyObject(col.grouping)) {\n              const columnNameElm = headerColumnElm.querySelector('.slick-column-name');\n              const entryElm = document.createElement('div');\n              entryElm.id = `${_gridUid}_${col.id}_entry`;\n              entryElm.className = 'slick-dropped-grouping';\n              entryElm.dataset.id = `${col.id}`;\n\n              const groupTextElm = document.createElement('div');\n              groupTextElm.className = 'slick-dropped-grouping-title';\n              groupTextElm.style.display = 'inline-flex';\n              groupTextElm.textContent = columnNameElm ? columnNameElm.textContent : headerColumnElm.textContent;\n              entryElm.appendChild(groupTextElm);\n\n              // delete icon\n              const groupRemoveIconElm = document.createElement('div');\n              groupRemoveIconElm.className = 'slick-groupby-remove';\n              if (options.deleteIconCssClass) {\n                groupRemoveIconElm.classList.add(...options.deleteIconCssClass.split(' '));\n              }\n              if (options.deleteIconImage) {\n                groupRemoveIconElm.classList.add(...options.deleteIconImage.split(' '));\n              }\n              if (!options.deleteIconCssClass) {\n                groupRemoveIconElm.classList.add('slick-groupby-remove-icon');\n              }\n              if (!options.deleteIconCssClass && !options.deleteIconImage) {\n                groupRemoveIconElm.classList.add('slick-groupby-remove-image');\n              }\n\n              // sorting icons when enabled\n              if (options && options.hideGroupSortIcons !== true && col.sortable) {\n                if (col.grouping && col.grouping.sortAsc === undefined) {\n                  col.grouping.sortAsc = true;\n                }\n              }\n\n              entryElm.appendChild(groupRemoveIconElm);\n              entryElm.appendChild(document.createElement('div'));\n              containerElm.appendChild(entryElm);\n\n              addColumnGroupBy(col);\n              addGroupByRemoveClickHandler(col.id, groupRemoveIconElm, headerColumnElm, entryElm);\n            }\n          }\n        }\n        groupToggler.style.display = 'inline-block';\n      }\n    }\n\n    function addColumnGroupBy(column) {\n      columnsGroupBy.push(column);\n      updateGroupBy(\"add-group\");\n    }\n\n    function addGroupByRemoveClickHandler(id, groupRemoveIconElm, headerColumnElm, entry) {\n      _bindingEventService.bind(groupRemoveIconElm, 'click', () => {\n        const boundedElms = _bindingEventService.boundedEvents.filter(boundedEvent => boundedEvent.element === groupRemoveIconElm);\n        for (const boundedEvent of boundedElms) {\n          _bindingEventService.unbind(boundedEvent.element, 'click', boundedEvent.listener);\n        }\n        removeGroupBy(id, headerColumnElm, entry);\n      });\n    }\n\n    function setDroppedGroups(groupingInfo) {\n      const groupingInfos = Array.isArray(groupingInfo) ? groupingInfo : [groupingInfo];\n      dropzonePlaceholder.style.display = 'none';\n      for (const groupInfo of groupingInfos) {\n        const columnElm = _grid.getHeaderColumn(groupInfo);\n        handleGroupByDrop(_dropzoneElm, columnElm);\n      }\n    }\n\n    function clearDroppedGroups() {\n      columnsGroupBy = [];\n      updateGroupBy('clear-all');\n      const allDroppedGroupingElms = _dropzoneElm.querySelectorAll('.slick-dropped-grouping');\n      groupToggler.style.display = 'none';\n\n      for (const groupElm of Array.from(allDroppedGroupingElms)) {\n        const groupRemoveBtnElm = _dropzoneElm.querySelector('.slick-groupby-remove');\n        groupRemoveBtnElm && groupRemoveBtnElm.remove();\n        groupElm && groupElm.remove();\n      }\n\n      // show placeholder text & hide the \"Toggle All\" when that later feature is enabled\n      dropzonePlaceholder.style.display = 'inline-block';\n    }\n\n    function removeFromArray(arr) {\n      var what, a = arguments,\n        L = a.length,\n        ax;\n      while (L > 1 && arr.length) {\n        what = a[--L];\n        while ((ax = arr.indexOf(what)) != -1) {\n          arr.splice(ax, 1);\n        }\n      }\n      return arr;\n    }\n\n    function removeGroupBy(id, _column, entry) {\n      entry.remove();\n      var groupby = [];\n      _gridColumns.forEach(function (e) {\n        groupby[e.id] = e;\n      });\n      removeFromArray(columnsGroupBy, groupby[id]);\n      if (columnsGroupBy.length === 0) {\n        dropzonePlaceholder.style = 'block';\n        groupToggler.style.display = 'none';\n      }\n      updateGroupBy(\"remove-group\");\n    }\n\n    function toggleGroupToggler(targetElm, collapsing = true, shouldExecuteDataViewCommand = true) {\n      if (targetElm) {\n        if (collapsing === true) {\n          targetElm.classList.add('collapsed');\n          targetElm.classList.remove('expanded');\n          if (shouldExecuteDataViewCommand) {\n            _dataView.collapseAllGroups();\n          }\n        } else {\n          targetElm.classList.remove('collapsed');\n          targetElm.classList.add('expanded');\n          if (shouldExecuteDataViewCommand) {\n            _dataView.expandAllGroups();\n          }\n        }\n      }\n    }\n\n    function updateGroupBy(originator) {\n      if (columnsGroupBy.length === 0) {\n        _dataView.setGrouping([]);\n        onGroupChanged.notify({ caller: originator, groupColumns: [] });\n        return;\n      }\n      var groupingArray = [];\n      columnsGroupBy.forEach(function (element) {\n        groupingArray.push(element.grouping);\n      });\n      _dataView.setGrouping(groupingArray);\n      /*\n      collapseAllGroups();\n      */\n      onGroupChanged.notify({ caller: originator, groupColumns: groupingArray });\n    }\n\n  // Public API\n  Utils.extend(this, {\n    \"init\": init,\n    \"destroy\": destroy,\n    \"pluginName\": \"DraggableGrouping\",\n\n    \"onGroupChanged\": onGroupChanged,\n    \"setDroppedGroups\": setDroppedGroups,\n    \"clearDroppedGroups\": clearDroppedGroups,\n    \"getSetupColumnReorder\": setupColumnReorder,\n  });\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      DraggableGrouping\n    }\n  });\n}\n\n", "import type { Column, DOMEvent, HeaderButtonItem, HeaderButtonOnCommandArgs, HeaderButtonOption, OnHeaderCellRenderedEventArgs } from '../models/index';\nimport { BindingEventService as BindingEventService_, Event as SlickEvent_, EventHandler as EventHandler_, Utils as Utils_ } from '../slick.core';\nimport type { SlickGrid } from '../slick.grid';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : EventHandler_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n/***\n   * A plugin to add custom buttons to column headers.\n   *\n   * USAGE:\n   *\n   * Add the plugin .js & .css files and register it with the grid.\n   *\n   * To specify a custom button in a column header, extend the column definition like so:\n   *\n   *   let columns = [\n   *     {\n   *       id: 'myColumn',\n   *       name: 'My column',\n   *\n   *       // This is the relevant part\n   *       header: {\n   *          buttons: [\n   *              {\n   *                // button options\n   *              },\n   *              {\n   *                // button options\n   *              }\n   *          ]\n   *       }\n   *     }\n   *   ];\n   *\n   * Available button options:\n   *    cssClass:     CSS class to add to the button.\n   *    image:        Relative button image path.\n   *    disabled:     Whether the item is disabled.\n   *    tooltip:      Button tooltip.\n   *    showOnHover:  Only show the button on hover.\n   *    handler:      Button click handler.\n   *    command:      A command identifier to be passed to the onCommand event handlers.\n   *\n   * Available menu item options:\n   *    action:                   Optionally define a callback function that gets executed when item is chosen (and/or use the onCommand event)\n   *    command:                  A command identifier to be passed to the onCommand event handlers.\n   *    cssClass:                 CSS class to add to the button.\n   *    handler:                  Button click handler.\n   *    image:                    Relative button image path.\n   *    showOnHover:              Only show the button on hover.\n   *    tooltip:                  Button tooltip.\n   *    itemVisibilityOverride:   Callback method that user can override the default behavior of showing/hiding an item from the list\n   *    itemUsabilityOverride:    Callback method that user can override the default behavior of enabling/disabling an item from the list\n   *\n   * The plugin exposes the following events:\n   *    onCommand:    Fired on button click for buttons with 'command' specified.\n   *        Event args:\n   *            grid:     Reference to the grid.\n   *            column:   Column definition.\n   *            command:  Button command identified.\n   *            button:   Button options.  Note that you can change the button options in your\n   *                      event handler, and the column header will be automatically updated to\n   *                      reflect them.  This is useful if you want to implement something like a\n   *                      toggle button.\n   *\n   *\n   * @param options {Object} Options:\n   *    buttonCssClass:   a CSS class to use for buttons (default 'slick-header-button')\n   * @class Slick.Plugins.HeaderButtons\n   * @constructor\n   */\nexport class SlickHeaderButtons {\n  // --\n  // public API\n  pluginName = 'HeaderButtons' as const;\n  onCommand = new SlickEvent<HeaderButtonOnCommandArgs>();\n\n  // --\n  // protected props\n  protected _grid;\n  protected _handler = new EventHandler();\n  protected _bindingEventService = new BindingEventService();\n  protected _defaults: HeaderButtonOption = {\n    buttonCssClass: 'slick-header-button'\n  };\n  protected _options: HeaderButtonOption;\n\n  constructor(options: Partial<HeaderButtonOption>) {\n    this._options = Utils.extend(true, {}, this._defaults, options);\n  }\n\n  init(grid: SlickGrid) {\n    this._grid = grid;\n    this._handler\n      .subscribe(this._grid.onHeaderCellRendered, this.handleHeaderCellRendered.bind(this))\n      .subscribe(this._grid.onBeforeHeaderCellDestroy, this.handleBeforeHeaderCellDestroy.bind(this));\n\n    // Force the grid to re-render the header now that the events are hooked up.\n    this._grid.setColumns(this._grid.getColumns());\n  }\n\n  destroy() {\n    this._handler.unsubscribeAll();\n    this._bindingEventService.unbindAll();\n  }\n\n  protected handleHeaderCellRendered(_e: Event, args: OnHeaderCellRenderedEventArgs) {\n    const column = args.column;\n\n    if (column.header?.buttons) {\n      // Append buttons in reverse order since they are floated to the right.\n      let i = column.header.buttons.length;\n      while (i--) {\n        let button = column.header.buttons[i];\n\n        // run each override functions to know if the item is visible and usable\n        let isItemVisible = this.runOverrideFunctionWhenExists<typeof args>(button.itemVisibilityOverride, args);\n        let isItemUsable = this.runOverrideFunctionWhenExists<typeof args>(button.itemUsabilityOverride, args);\n\n        // if the result is not visible then there's no need to go further\n        if (!isItemVisible) {\n          continue;\n        }\n\n        // when the override is defined, we need to use its result to update the disabled property\n        // so that \"handleMenuItemCommandClick\" has the correct flag and won't trigger a command clicked event\n        if (Object.prototype.hasOwnProperty.call(button, 'itemUsabilityOverride')) {\n          button.disabled = isItemUsable ? false : true;\n        }\n\n        const btn = document.createElement('div');\n        btn.className = this._options.buttonCssClass || '';\n        btn.ariaLabel = 'Header Button';\n        btn.role = 'button';\n\n        if (button.disabled) {\n          btn.classList.add('slick-header-button-disabled');\n        }\n\n        if (button.showOnHover) {\n          btn.classList.add('slick-header-button-hidden');\n        }\n\n        if (button.image) {\n          btn.style.backgroundImage = `url(${button.image})`;\n        }\n\n        if (button.cssClass) {\n          btn.classList.add(...button.cssClass.split(' '));\n        }\n\n        if (button.tooltip) {\n          btn.title = button.tooltip;\n        }\n\n        if (button.handler && !button.disabled) {\n          this._bindingEventService.bind(btn, 'click', button.handler);\n        }\n\n        this._bindingEventService.bind(btn, 'click', this.handleButtonClick.bind(this, button, args.column) as EventListener);\n        args.node.appendChild(btn);\n      }\n    }\n  }\n\n\n  protected handleBeforeHeaderCellDestroy(_e: Event, args: { column: Column; node: HTMLElement; }) {\n    let column = args.column;\n\n    if (column.header && column.header.buttons) {\n      // Removing buttons via jQuery will also clean up any event handlers and data.\n      // NOTE: If you attach event handlers directly or using a different framework,\n      //       you must also clean them up here to avoid memory leaks.\n      const buttonCssClass = (this._options.buttonCssClass || '').replace(/(\\s+)/g, '.');\n      if (buttonCssClass) {\n        args.node.querySelectorAll(`.${buttonCssClass}`).forEach(elm => elm.remove());\n      }\n    }\n  }\n\n  protected handleButtonClick(button: HeaderButtonItem, columnDef: Column, e: DOMEvent<HTMLDivElement>) {\n    const command = button.command || '';\n    const callbackArgs = {\n      grid: this._grid,\n      column: columnDef,\n      button: button\n    } as HeaderButtonOnCommandArgs;\n\n    if (command) {\n      callbackArgs.command = command;\n    }\n\n    // execute action callback when defined\n    if (typeof button.action === 'function') {\n      button.action.call(this, e, callbackArgs);\n    }\n\n    if (command && !button.disabled) {\n      this.onCommand.notify(callbackArgs, e, this);\n\n      // Update the header in case the user updated the button definition in the handler.\n      this._grid.updateColumnHeader(columnDef.id);\n    }\n\n    // Stop propagation so that it doesn't register as a header click event.\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  /**\n   * Method that user can pass to override the default behavior.\n   * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\n   * @param overrideFn: override function callback\n   * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\n   */\n  protected runOverrideFunctionWhenExists<T = any>(overrideFn: ((args: any) => boolean) | undefined, args: T): boolean {\n    if (typeof overrideFn === 'function') {\n      return overrideFn.call(this, args);\n    }\n    return true;\n  }\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      Plugins: {\n        HeaderButtons: SlickHeaderButtons\n      }\n    }\n  });\n}\n\n", "import { BindingEventService as BindingEventService_, Event as SlickEvent_, SlickEventHandler as SlickEventHandler_, Utils as Utils_ } from '../slick.core';\nimport type { Column, DOMEvent, HeaderMenuCommandItemCallbackArgs, HeaderMenuItems, HeaderMenuOption, MenuCommandItem, MenuCommandItemCallbackArgs, OnHeaderCellRenderedEventArgs } from '../models/index';\nimport type { SlickGrid } from '../slick.grid';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst SlickEventHandler = IIFE_ONLY ? Slick.EventHandler : SlickEventHandler_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n/**\n * A plugin to add drop-down menus to column headers.\n *\n * USAGE:\n *\n * Add the plugin .js & .css files and register it with the grid.\n *\n * To specify a menu in a column header, extend the column definition like so:\n *\n *   let columns = [\n *     {\n *       id: 'myColumn',\n *       name: 'My column',\n *\n *       // This is the relevant part\n *       header: {\n *          menu: {\n *              items: [\n *                {\n *                  // menu item options\n *                },\n *                {\n *                  // menu item options\n *                }\n *              ]\n *          }\n *       }\n *     }\n *   ];\n *\n *\n * Available menu options:\n *    autoAlign:              Auto-align drop menu to the left when not enough viewport space to show on the right\n *    autoAlignOffset:        When drop menu is aligned to the left, it might not be perfectly aligned with the header menu icon, if that is the case you can add an offset (positive/negative number to move right/left)\n *    buttonCssClass:         an extra CSS class to add to the menu button (default 'caret')\n *    buttonImage:            a url to the menu button image\n *    menuUsabilityOverride:  Callback method that user can override the default behavior of enabling/disabling the menu from being usable (must be combined with a custom formatter)\n *    minWidth:               Minimum width that the drop menu will have\n *\n *\n * Available menu item options:\n *    action:                   Optionally define a callback function that gets executed when item is chosen (and/or use the onCommand event)\n *    title:                    Menu item text.\n *    divider:                  Whether the current item is a divider, not an actual command.\n *    disabled:                 Whether the item/command is disabled.\n *    hidden:                   Whether the item/command is hidden.\n *    tooltip:                  Item tooltip.\n *    command:                  A command identifier to be passed to the onCommand event handlers.\n *    cssClass:                 A CSS class to be added to the menu item container.\n *    iconCssClass:             A CSS class to be added to the menu item icon.\n *    iconImage:                A url to the icon image.\n *    textCssClass:             A CSS class to be added to the menu item text.\n *    itemVisibilityOverride:   Callback method that user can override the default behavior of showing/hiding an item from the list\n *    itemUsabilityOverride:    Callback method that user can override the default behavior of enabling/disabling an item from the list\n *\n *\n * The plugin exposes the following events:\n\n  *    onAfterMenuShow:   Fired after the menu is shown.  You can customize the menu or dismiss it by returning false.\n  *        Event args:\n  *            grid:     Reference to the grid.\n  *            column:   Column definition.\n  *            menu:     Menu options.  Note that you can change the menu items here.\n  *\n  *    onBeforeMenuShow:   Fired before the menu is shown.  You can customize the menu or dismiss it by returning false.\n  *        Event args:\n  *            grid:     Reference to the grid.\n  *            column:   Column definition.\n  *            menu:     Menu options.  Note that you can change the menu items here.\n  *\n  *    onCommand:    Fired on menu item click for buttons with 'command' specified.\n  *        Event args:\n  *            grid:     Reference to the grid.\n  *            column:   Column definition.\n  *            command:  Button command identified.\n  *            button:   Button options.  Note that you can change the button options in your\n  *                      event handler, and the column header will be automatically updated to\n  *                      reflect them.  This is useful if you want to implement something like a\n  *                      toggle button.\n  *\n  *\n  * @param options {Object} Options:\n  *    buttonCssClass:   an extra CSS class to add to the menu button (default 'caret')\n  *    buttonImage:      a url to the menu button image\n  * @class Slick.Plugins.HeaderButtons\n  */\nexport class SlickHeaderMenu {\n  // --\n  // public API\n  pluginName = 'HeaderMenu' as const;\n  onAfterMenuShow = new SlickEvent<HeaderMenuCommandItemCallbackArgs>();\n  onBeforeMenuShow = new SlickEvent<HeaderMenuCommandItemCallbackArgs>();\n  onCommand = new SlickEvent<MenuCommandItemCallbackArgs>();\n\n  // --\n  // protected props\n  protected _grid!: SlickGrid;\n  protected _handler = new SlickEventHandler();\n  protected _bindingEventService = new BindingEventService();\n  protected _defaults = {\n    buttonCssClass: null,\n    buttonImage: null,\n    minWidth: 100,\n    autoAlign: true,\n    autoAlignOffset: 0\n  };\n  protected _activeHeaderColumnElm;\n  protected _menuElm;\n  protected _options: HeaderMenuOption;\n\n  constructor(options: Partial<HeaderMenuOption>) {\n    this._options = Utils.extend(true, {}, this._defaults, options);\n  }\n\n  protected init(grid: SlickGrid) {\n    this._grid = grid;\n    this._handler\n      .subscribe(this._grid.onHeaderCellRendered, this.handleHeaderCellRendered.bind(this))\n      .subscribe(this._grid.onBeforeHeaderCellDestroy, this.handleBeforeHeaderCellDestroy.bind(this));\n\n    // Force the grid to re-render the header now that the events are hooked up.\n    this._grid.setColumns(this._grid.getColumns());\n\n    // Hide the menu on outside click.\n    this._bindingEventService.bind(document.body, 'mousedown', this.handleBodyMouseDown.bind(this) as EventListener);\n  }\n\n  setOptions(newOptions: Partial<HeaderMenuOption>) {\n    this._options = Utils.extend(true, {}, this._options, newOptions);\n  }\n\n  protected getGridUidSelector() {\n    const gridUid = this._grid.getUID() || '';\n    return gridUid ? `.${gridUid}` : '';\n  }\n\n  destroy() {\n    this._handler.unsubscribeAll();\n    this._bindingEventService.unbindAll();\n    this._menuElm = this._menuElm || document.body.querySelector(`.slick-header-menu${this.getGridUidSelector()}`);\n    this._menuElm?.remove();\n    this._activeHeaderColumnElm = undefined;\n  }\n\n  protected handleBodyMouseDown(e: DOMEvent<HTMLElement>) {\n    if ((this._menuElm !== e.target && !(this._menuElm && this._menuElm.contains(e.target))) || e.target.className === 'close') {\n      this.hideMenu();\n    }\n  }\n\n  hideMenu() {\n    if (this._menuElm) {\n      this._menuElm.remove();\n      this._menuElm = undefined;\n    }\n    this._activeHeaderColumnElm?.classList.remove('slick-header-column-active');\n  }\n\n  protected handleHeaderCellRendered(_e: Event, args: OnHeaderCellRenderedEventArgs) {\n    let column = args.column;\n    let menu = column?.header?.menu as HeaderMenuItems;\n\n    if (menu) {\n      // run the override function (when defined), if the result is false it won't go further\n      if (!this.runOverrideFunctionWhenExists<typeof args>(this._options.menuUsabilityOverride, args)) {\n        return;\n      }\n\n      const elm = document.createElement('div');\n      elm.className = 'slick-header-menubutton';\n      elm.ariaLabel = 'Header Menu';\n      elm.role = 'button';\n\n      if (!this._options.buttonCssClass && !this._options.buttonImage) {\n        this._options.buttonCssClass = 'caret'; // default when nothing is provided\n      }\n\n      if (this._options.buttonCssClass) {\n        // sgi icon with mask requires inner span to work properly\n        const icon = document.createElement('span');\n        icon.classList.add(...this._options.buttonCssClass.split(' '));\n        elm.appendChild(icon);\n      }\n\n      if (this._options.buttonImage) {\n        elm.style.backgroundImage = `url(${this._options.buttonImage})`;\n      }\n\n      if (this._options.tooltip) {\n        elm.title = this._options.tooltip;\n      }\n\n      this._bindingEventService.bind(elm, 'click', ((e: MouseEvent) => this.showMenu(e, menu, args.column)) as EventListener);\n      args.node.appendChild(elm);\n    }\n  }\n\n  protected handleBeforeHeaderCellDestroy(_e, args) {\n    let column = args.column;\n\n    if (column.header?.menu) {\n      args.node.querySelectorAll('.slick-header-menubutton').forEach(elm => elm.remove());\n    }\n  }\n\n\n  protected showMenu(event: MouseEvent, menu: HeaderMenuItems, columnDef: Column) {\n    // Let the user modify the menu or cancel altogether,\n    // or provide alternative menu implementation.\n    const callbackArgs = {\n      grid: this._grid,\n      column: columnDef,\n      menu\n    } as unknown as HeaderMenuCommandItemCallbackArgs;\n    if (this.onBeforeMenuShow.notify(callbackArgs, event, this).getReturnValue() == false) {\n      return;\n    }\n\n    if (!this._menuElm) {\n      this._menuElm = document.createElement('div');\n      this._menuElm.className = 'slick-header-menu';\n      this._menuElm.role = 'menu';\n      this._menuElm.style.minWidth = `${this._options.minWidth}px`;\n      this._menuElm.setAttribute('aria-expanded', 'true');\n      const containerNode = this._grid.getContainerNode();\n      if (containerNode) {\n        containerNode.appendChild(this._menuElm);\n      }\n    }\n\n    // make sure the menu element is an empty div before adding all list of commands\n    Utils.emptyElement(this._menuElm);\n\n    // Construct the menu items.\n    for (let i = 0; i < menu.items.length; i++) {\n      let item = menu.items[i];\n\n      // run each override functions to know if the item is visible and usable\n      let isItemVisible = this.runOverrideFunctionWhenExists((item as MenuCommandItem).itemVisibilityOverride, callbackArgs);\n      let isItemUsable = this.runOverrideFunctionWhenExists((item as MenuCommandItem).itemUsabilityOverride, callbackArgs);\n\n      // if the result is not visible then there's no need to go further\n      if (!isItemVisible) {\n        continue;\n      }\n\n      // when the override is defined, we need to use its result to update the disabled property\n      // so that \"handleMenuItemCommandClick\" has the correct flag and won't trigger a command clicked event\n      if (Object.prototype.hasOwnProperty.call(item, 'itemUsabilityOverride')) {\n        (item as MenuCommandItem).disabled = isItemUsable ? false : true;\n      }\n\n      const menuItem = document.createElement('div');\n      menuItem.className = 'slick-header-menuitem';\n      menuItem.role = 'menuitem';\n\n      if ((item as MenuCommandItem).divider || item === 'divider') {\n        menuItem.classList.add('slick-header-menuitem-divider');\n        continue;\n      }\n\n      if ((item as MenuCommandItem).disabled) {\n        menuItem.classList.add('slick-header-menuitem-disabled');\n      }\n\n      if ((item as MenuCommandItem).hidden) {\n        menuItem.classList.add('slick-header-menuitem-hidden');\n      }\n\n      if ((item as MenuCommandItem).cssClass) {\n        menuItem.classList.add(...item.cssClass!.split(' '));\n      }\n\n      if ((item as MenuCommandItem).tooltip) {\n        menuItem.title = (item as MenuCommandItem).tooltip || '';\n      }\n\n      const iconElm = document.createElement('div');\n      iconElm.className = 'slick-header-menuicon';\n      menuItem.appendChild(iconElm);\n\n      if ((item as MenuCommandItem).iconCssClass) {\n        iconElm.classList.add(...(item as MenuCommandItem).iconCssClass!.split(' '));\n      }\n\n      if ((item as MenuCommandItem).iconImage) {\n        iconElm.style.backgroundImage = 'url(' + (item as MenuCommandItem).iconImage + ')';\n      }\n\n      const textElm = document.createElement('span');\n      textElm.className = 'slick-header-menucontent';\n      textElm.textContent = (item as MenuCommandItem).title || '';\n      menuItem.appendChild(textElm);\n\n      if ((item as MenuCommandItem).textCssClass) {\n        textElm.classList.add(...(item as MenuCommandItem).textCssClass!.split(' '));\n      }\n\n      this._menuElm.appendChild(menuItem);\n      this._bindingEventService.bind(menuItem, 'click', this.handleMenuItemClick.bind(this, item, columnDef) as EventListener);\n    }\n\n    const buttonElm = event.target as HTMLButtonElement;\n    const btnOffset = Utils.offset(buttonElm);\n    const menuOffset = Utils.offset(this._menuElm);\n    let leftPos = (btnOffset && btnOffset.left) || 0;\n\n\n    // when auto-align is set, it will calculate whether it has enough space in the viewport to show the drop menu on the right (default)\n    // if there isn't enough space on the right, it will automatically align the drop menu to the left\n    // to simulate an align left, we actually need to know the width of the drop menu\n    if (this._options.autoAlign) {\n      const gridPos = this._grid.getGridPosition();\n      if (leftPos + this._menuElm.offsetWidth >= gridPos.width) {\n        leftPos = leftPos + buttonElm.clientWidth - this._menuElm.clientWidth + (this._options.autoAlignOffset || 0);\n      }\n    }\n\n    this._menuElm.style.top = `${(buttonElm.clientHeight || (btnOffset && btnOffset.top) || 0) + (this._options?.menuOffsetTop || 0)}px`;\n    this._menuElm.style.left = `${leftPos - (menuOffset?.left ?? 0)}px`;\n\n    // Mark the header as active to keep the highlighting.\n    this._activeHeaderColumnElm = this._menuElm.closest('.slick-header-column');\n    if (this._activeHeaderColumnElm) {\n      this._activeHeaderColumnElm.classList.add('slick-header-column-active');\n    }\n\n    if (this.onAfterMenuShow.notify(callbackArgs, event, this).getReturnValue() == false) {\n      return;\n    }\n\n    // Stop propagation so that it doesn't register as a header click event.\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  protected handleMenuItemClick(item: MenuCommandItem | 'divider', columnDef: Column, e: DOMEvent<HTMLDivElement>): boolean | void {\n    const command = (item as MenuCommandItem).command || '';\n\n    if ((item as MenuCommandItem).disabled || (item as MenuCommandItem).divider || item === 'divider') {\n      return false;\n    }\n\n    if (command !== null && command !== '') {\n      let callbackArgs = {\n        grid: this._grid,\n        column: columnDef,\n        command,\n        item,\n      };\n      this.onCommand.notify(callbackArgs, e, this);\n\n      // execute action callback when defined\n      if (typeof item.action === 'function') {\n        item.action.call(this, e, callbackArgs);\n      }\n    }\n\n    if (!e.defaultPrevented) {\n      this.hideMenu();\n    }\n\n    // Stop propagation so that it doesn't register as a header click event.\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  /**\n   * Method that user can pass to override the default behavior.\n   * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\n   * @param overrideFn: override function callback\n   * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\n   */\n  protected runOverrideFunctionWhenExists<T = any>(overrideFn: ((args: any) => boolean) | undefined, args: T): boolean {\n    if (typeof overrideFn === 'function') {\n      return overrideFn.call(this, args);\n    }\n    return true;\n  }\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      Plugins: {\n        HeaderMenu: SlickHeaderMenu\n      }\n    }\n  });\n}\n\n", "import { BindingEventService as BindingEventService_, Event as SlickEvent_, Utils as Utils_ } from '../slick.core';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n\n/***\n * A Resizer plugin that can be used to auto-resize a grid and/or resize with fixed dimensions.\n * When fixed height is defined, it will auto-resize only the width and vice versa with the width defined.\n * You can also choose to use the flag \"enableAutoSizeColumns\" if you want to the plugin to\n * automatically call the grid \"autosizeColumns()\" method after each resize.\n *\n * USAGE:\n *\n * Add the \"slick.resizer.js\" file and register it with the grid.\n *\n * You can specify certain options as arguments when instantiating the plugin like so:\n * var resizer = new Slick.Plugins.Resizer({\n *   container: '#gridContainer',\n *   rightPadding: 15,\n *   bottomPadding: 20,\n *   minHeight: 180,\n *   minWidth: 300,\n * });\n * grid.registerPlugin(resizer);\n *\n *\n * The plugin exposes the following events:\n *\n *    onGridAfterResize:  Fired after the grid got resized.  You can customize the menu or dismiss it by returning false.\n *        Event args:\n *            grid:       Reference to the grid.\n *            dimensions: Resized grid dimensions used\n *\n *    onGridBeforeResize:   Fired before the grid gets resized.  You can customize the menu or dismiss it by returning false.\n *        Event args:\n *            grid:     Reference to the grid.\n *\n *\n * @param {Object} options available plugin options that can be passed in the constructor:\n *   container:      (REQUIRED) DOM element selector of the page container, basically what element in the page will be used to calculate the available space\n *   gridContainer:             DOM element selector of the grid container, optional but when provided it will be resized with same size as the grid (typically a container holding the grid and extra custom footer/pagination)\n *   applyResizeToContainer:    Defaults to false, do we want to apply the resized dimentions to the grid container as well?\n *   rightPadding:              Defaults to 0, right side padding to remove from the total dimension\n *   bottomPadding:             Defaults to 20, bottom padding to remove from the total dimension\n *   minHeight:                 Defaults to 180, minimum height of the grid\n *   minWidth:                  Defaults to 300, minimum width of the grid\n *   maxHeight:                 Maximum height of the grid\n *   maxWidth:                  Maximum width of the grid\n *   calculateAvailableSizeBy:  Defaults to \"window\", which DOM element (\"container\" or \"window\") are we using to calculate the available size for the grid?\n *\n * @class Slick.Plugins.Resizer\n * @constructor\n */\n\nexport function Resizer(_options, fixedDimensions) {\n    // global variables, height/width are in pixels\n    let DATAGRID_MIN_HEIGHT = 180;\n    let DATAGRID_MIN_WIDTH = 300;\n    let DATAGRID_BOTTOM_PADDING = 20;\n\n    let _self = this;\n    let _fixedHeight;\n    let _fixedWidth;\n    let _grid;\n    let _gridOptions;\n    let _gridUid;\n    let _lastDimensions;\n    let _timer;\n    let _resizePaused = false;\n    let _gridDomElm;\n    let _pageContainerElm;\n    let _gridContainerElm;\n    let _defaults = {\n      bottomPadding: 20,\n      applyResizeToContainer: false,\n      minHeight: 180,\n      minWidth: 300,\n      rightPadding: 0\n    };\n\n    let options = {};\n  let _bindingEventService = new BindingEventService();\n\n    function setOptions(_newOptions){\n      options = Utils.extend(true, {}, _defaults, options, _newOptions);\n    }\n\n    function init(grid) {\n      setOptions(_options);\n      _grid = grid;\n      _gridOptions = _grid.getOptions();\n      _gridUid = _grid.getUID();\n      _gridDomElm = _grid.getContainerNode();\n\n      if (typeof _options.container === 'string') {\n        _pageContainerElm = typeof _options.container === 'string' ? document.querySelector(_options.container) : _options.container;\n      } else {\n        _pageContainerElm = _options.container;\n      }\n\n      if (options.gridContainer) {\n        _gridContainerElm = options.gridContainer;\n      }\n\n      if (fixedDimensions) {\n        _fixedHeight = fixedDimensions.height;\n        _fixedWidth = fixedDimensions.width;\n      }\n\n      if (_gridOptions) {\n        bindAutoResizeDataGrid();\n      }\n    }\n\n    /** Bind an auto resize trigger on the datagrid, if that is enable then it will resize itself to the available space\n    * Options: we could also provide a % factor to resize on each height/width independently\n    */\n    function bindAutoResizeDataGrid(newSizes) {\n      const gridElmOffset = Utils.offset(_gridDomElm);\n\n      // if we can't find the grid to resize, return without binding anything\n      if (_gridDomElm !== undefined || gridElmOffset !== undefined) {\n        // -- 1st resize the datagrid size at first load (we need this because the .on event is not triggered on first load)\n        // -- also we add a slight delay (in ms) so that we resize after the grid render is done\n        resizeGrid(0, newSizes, null);\n\n        // -- 2nd bind a trigger on the Window DOM element, so that it happens also when resizing after first load\n        // -- bind auto-resize to Window object only if it exist\n        _bindingEventService.bind(window, 'resize', function (event) {\n          _self.onGridBeforeResize.notify({ grid: _grid }, event, _self);\n\n          // unless the resizer is paused, let's go and resize the grid\n          if (!_resizePaused) {\n            // for some yet unknown reason, calling the resize twice removes any stuttering/flickering\n            // when changing the height and makes it much smoother experience\n            resizeGrid(0, newSizes, event);\n            resizeGrid(0, newSizes, event);\n          }\n        });\n      }\n    }\n\n   /**\n    * Calculate the datagrid new height/width from the available space, also consider that a % factor might be applied to calculation\n    */\n    function calculateGridNewDimensions() {\n      const gridElmOffset = Utils.offset(_gridDomElm);\n\n      if (!window || _pageContainerElm === undefined || _gridDomElm === undefined || gridElmOffset === undefined) {\n        return null;\n      }\n\n      // calculate bottom padding\n      let bottomPadding = (options && options.bottomPadding !== undefined) ? options.bottomPadding : DATAGRID_BOTTOM_PADDING;\n\n      let gridHeight = 0;\n      let gridOffsetTop = 0;\n\n      // which DOM element are we using to calculate the available size for the grid?\n      // defaults to \"window\"\n      if (options.calculateAvailableSizeBy === 'container') {\n        // uses the container's height to calculate grid height without any top offset\n        gridHeight = Utils.innerSize(_pageContainerElm, 'height') || 0;\n      } else {\n        // uses the browser's window height with its top offset to calculate grid height\n        gridHeight = window.innerHeight || 0;\n        gridOffsetTop = (gridElmOffset !== undefined) ? gridElmOffset.top : 0;\n      }\n\n      let availableHeight = gridHeight - gridOffsetTop - bottomPadding;\n      let availableWidth = Utils.innerSize(_pageContainerElm, 'width') || window.innerWidth || 0;\n      let maxHeight = options && options.maxHeight || undefined;\n      let minHeight = (options && options.minHeight !== undefined) ? options.minHeight : DATAGRID_MIN_HEIGHT;\n      let maxWidth = options && options.maxWidth || undefined;\n      let minWidth = (options && options.minWidth !== undefined) ? options.minWidth : DATAGRID_MIN_WIDTH;\n\n      let newHeight = availableHeight;\n      let newWidth = (options && options.rightPadding) ? availableWidth - options.rightPadding : availableWidth;\n\n      // optionally (when defined), make sure that grid height & width are within their thresholds\n      if (newHeight < minHeight) {\n        newHeight = minHeight;\n      }\n      if (maxHeight && newHeight > maxHeight) {\n        newHeight = maxHeight;\n      }\n      if (newWidth < minWidth) {\n        newWidth = minWidth;\n      }\n      if (maxWidth && newWidth > maxWidth) {\n        newWidth = maxWidth;\n      }\n\n      // return the new dimensions unless a fixed height/width was defined\n      return {\n        height: _fixedHeight || newHeight,\n        width: _fixedWidth || newWidth\n      };\n    }\n\n    /** Destroy function when element is destroyed */\n    function destroy() {\n      _self.onGridBeforeResize.unsubscribe();\n      _self.onGridAfterResize.unsubscribe();\n      _bindingEventService.unbindAll();\n    }\n\n    /**\n    * Return the last resize dimensions used by the service\n    * @return {object} last dimensions (height: number, width: number)\n    */\n    function getLastResizeDimensions() {\n      return _lastDimensions;\n    }\n\n    /**\n     * Provide the possibility to pause the resizer for some time, until user decides to re-enabled it later if he wish to.\n     * @param {boolean} isResizePaused are we pausing the resizer?\n     */\n    function pauseResizer(isResizePaused) {\n      _resizePaused = isResizePaused;\n    }\n\n    /**\n     * Resize the datagrid to fit the browser height & width.\n     * @param {number} delay to wait before resizing, defaults to 0 (in milliseconds)\n     * @param {object} newSizes can optionally be passed (height: number, width: number)\n     * @param {object} event that triggered the resize, defaults to null\n     * @return If the browser supports it, we can return a Promise that would resolve with the new dimensions\n     */\n    function resizeGrid(delay, newSizes, event) {\n      // because of the javascript async nature, we might want to delay the resize a little bit\n      delay = delay || 0;\n\n      // return a Promise when supported by the browser\n      if (typeof Promise === 'function') {\n        return new Promise(function (resolve) {\n          if (delay > 0) {\n            clearTimeout(_timer);\n            _timer = setTimeout(function () {\n              resolve(resizeGridCallback(newSizes, event));\n            }, delay);\n          } else {\n            resolve(resizeGridCallback(newSizes, event));\n          }\n        });\n      } else {\n        // OR no return when Promise isn't supported\n        if (delay > 0) {\n          clearTimeout(_timer);\n          _timer = setTimeout(function () {\n            resizeGridCallback(newSizes, event);\n          }, delay);\n        } else {\n          resizeGridCallback(newSizes, event);\n        }\n      }\n    }\n\n    function resizeGridCallback(newSizes, event) {\n      let lastDimensions = resizeGridWithDimensions(newSizes);\n      _self.onGridAfterResize.notify({ grid: _grid, dimensions: lastDimensions }, event, _self);\n      return lastDimensions;\n    }\n\n    function resizeGridWithDimensions(newSizes) {\n      // calculate the available sizes with minimum height defined as a varant\n      let availableDimensions = calculateGridNewDimensions();\n\n      if ((newSizes || availableDimensions) && _gridDomElm) {\n        try {\n          // get the new sizes, if new sizes are passed (not 0), we will use them else use available space\n          // basically if user passes 1 of the dimension, let say he passes just the height,\n          // we will use the height as a fixed height but the width will be resized by it's available space\n          let newHeight = (newSizes && newSizes.height) ? newSizes.height : availableDimensions.height;\n          let newWidth = (newSizes && newSizes.width) ? newSizes.width : availableDimensions.width;\n\n          // apply these new height/width to the datagrid\n          if (!_gridOptions.autoHeight) {\n            _gridDomElm.style.height = `${newHeight}px`;\n          }\n          _gridDomElm.style.width = `${newWidth}px`;\n          if (_gridContainerElm) {\n            _gridContainerElm.style.width = `${newWidth}px`;\n          }\n\n          // resize the slickgrid canvas on all browser except some IE versions\n          // exclude all IE below IE11\n          // IE11 wants to be a better standard (W3C) follower (finally) they even changed their appName output to also have 'Netscape'\n          if (new RegExp('MSIE [6-8]').exec(navigator.userAgent) === null && _grid && _grid.resizeCanvas) {\n            _grid.resizeCanvas();\n          }\n\n          // also call the grid auto-size columns so that it takes available when going bigger\n          if (_gridOptions && _gridOptions.enableAutoSizeColumns && _grid.autosizeColumns) {\n            // make sure that the grid still exist (by looking if the Grid UID is found in the DOM tree) to avoid SlickGrid error \"missing stylesheet\"\n            if (_gridUid && document.querySelector(`.${_gridUid}`)) {\n              _grid.autosizeColumns();\n            }\n          }\n\n          // keep last resized dimensions & resolve them to the Promise\n          _lastDimensions = {\n            height: newHeight,\n            width: newWidth\n          };\n        } catch (e) {\n          destroy();\n        }\n      }\n\n      return _lastDimensions;\n    }\n\n  Utils.extend(this, {\n      \"init\": init,\n      \"destroy\": destroy,\n      \"pluginName\": \"Resizer\",\n      \"bindAutoResizeDataGrid\": bindAutoResizeDataGrid,\n      \"getLastResizeDimensions\": getLastResizeDimensions,\n      \"pauseResizer\": pauseResizer,\n      \"resizeGrid\": resizeGrid,\n      \"setOptions\": setOptions,\n\n    \"onGridAfterResize\": new SlickEvent(),\n    \"onGridBeforeResize\": new SlickEvent()\n    });\n  }\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      Plugins: {\n        Resizer\n      }\n    }\n  });\n}\n\n", "import { Event as SlickEvent_, EventHandler as EventHandler_, Utils as Utils_ } from '../slick.core';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : EventHandler_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n\n/***\n * A plugin to add row detail panel\n * Original StackOverflow question & article making this possible (thanks to violet313)\n * https://stackoverflow.com/questions/10535164/can-slickgrids-row-height-be-dynamically-altered#29399927\n * http://violet313.org/slickgrids/#intro\n *\n * USAGE:\n * Add the slick.rowDetailView.(js|css) files and register the plugin with the grid.\n *\n * AVAILABLE ROW DETAIL OPTIONS:\n *    cssClass:               A CSS class to be added to the row detail\n *    expandedClass:          Extra classes to be added to the expanded Toggle\n *    expandableOverride:     callback method that user can override the default behavior of making every row an expandable row (the logic to show or not the expandable icon).\n *    collapsedClass:         Extra classes to be added to the collapse Toggle\n *    loadOnce:               Defaults to false, when set to True it will load the data once and then reuse it.\n *    preTemplate:            Template that will be used before the async process (typically used to show a spinner/loading)\n *    postTemplate:           Template that will be loaded once the async function finishes\n *    process:                Async server function call\n *    panelRows:              Row count to use for the template panel\n *    singleRowExpand:        Defaults to false, limit expanded row to 1 at a time.\n *    useRowClick:            Boolean flag, when True will open the row detail on a row click (from any column), default to False\n *    keyPrefix:              Defaults to '_', prefix used for all the plugin metadata added to the item object (meta e.g.: padding, collapsed, parent)\n *    collapseAllOnSort:      Defaults to true, which will collapse all row detail views when user calls a sort. Unless user implements a sort to deal with padding\n *    saveDetailViewOnScroll: Defaults to true, which will save the row detail view in a cache when it detects that it will become out of the viewport buffer\n *    useSimpleViewportCalc:  Defaults to false, which will use simplified calculation of out or back of viewport visibility\n *\n * AVAILABLE PUBLIC METHODS:\n *    init:                 initiliaze the plugin\n *    expandableOverride:   callback method that user can override the default behavior of making every row an expandable row (the logic to show or not the expandable icon).\n *    destroy:              destroy the plugin and it's events\n *    collapseAll:          collapse all opened row detail panel\n *    collapseDetailView:   collapse a row by passing the item object (row detail)\n *    expandDetailView:     expand a row by passing the item object (row detail)\n *    getColumnDefinition:  get the column definitions\n *    getExpandedRows:      get all the expanded rows\n *    getFilterItem:        takes in the item we are filtering and if it is an expanded row returns it's parents row to filter on\n *    getOptions:           get current plugin options\n *    resizeDetailView:     resize a row detail view, it will auto-calculate the number of rows it needs\n *    saveDetailView:       save a row detail view content by passing the row object\n *    setOptions:           set or change some of the plugin options\n *\n * THE PLUGIN EXPOSES THE FOLLOWING SLICK EVENTS:\n *    onAsyncResponse:  This event must be used with the \"notify\" by the end user once the Asynchronous Server call returns the item detail\n *      Event args:\n *        item:         Item detail returned from the async server call\n *        detailView:   An explicit view to use instead of template (Optional)\n *\n *    onAsyncEndUpdate: Fired when the async response finished\n *      Event args:\n *        grid:         Reference to the grid.\n *        item:         Item data context\n *\n *    onBeforeRowDetailToggle: Fired before the row detail gets toggled\n *      Event args:\n *        grid:         Reference to the grid.\n *        item:         Item data context\n *\n *    onAfterRowDetailToggle: Fired after the row detail gets toggled\n *      Event args:\n *        grid:         Reference to the grid.\n *        item:         Item data context\n *        expandedRows: Array of the Expanded Rows\n *\n *    onRowOutOfViewportRange: Fired after a row becomes out of viewport range (user can't see the row anymore)\n *      Event args:\n *        grid:         Reference to the grid.\n *        item:         Item data context\n *        rowId:        Id of the Row object (datacontext) in the Grid\n *        rowIndex:     Index of the Row in the Grid\n *        expandedRows: Array of the Expanded Rows\n *        rowIdsOutOfViewport: Array of the Out of viewport Range Rows\n *\n *    onRowBackToViewportRange: Fired after the row detail gets toggled\n *      Event args:\n *        grid:         Reference to the grid.\n *        item:         Item data context\n *        rowId:        Id of the Row object (datacontext) in the Grid\n *        rowIndex:     Index of the Row in the Grid\n *        expandedRows: Array of the Expanded Rows\n *        rowIdsOutOfViewport: Array of the Out of viewport Range Rows\n */\n\n/** Constructor of the Row Detail View Plugin */\nexport function RowDetailView(options) {\n    var _grid;\n    var _gridOptions;\n    var _gridUid;\n    var _dataView;\n    var _dataViewIdProperty = 'id';\n    var _expandableOverride = null;\n    var _self = this;\n    var _lastRange = null;\n    var _expandedRows = [];\n  var _handler = new EventHandler();\n    var _outsideRange = 5;\n    var _visibleRenderedCellCount = 0;\n    var _defaults = {\n      columnId: '_detail_selector',\n      cssClass: 'detailView-toggle',\n      expandedClass: null,\n      collapsedClass: null,\n      keyPrefix: '_',\n      loadOnce: false,\n      collapseAllOnSort: true,\n      saveDetailViewOnScroll: true,\n      singleRowExpand: false,\n      useSimpleViewportCalc: false,\n      alwaysRenderColumn: true,\n      toolTip: '',\n      width: 30,\n      maxRows: null\n    };\n    var _keyPrefix = _defaults.keyPrefix;\n    var _gridRowBuffer = 0;\n    var _rowIdsOutOfViewport = [];\n  var _options = Utils.extend(true, {}, _defaults, options);\n\n    // user could override the expandable icon logic from within the options or after instantiating the plugin\n    if (typeof _options.expandableOverride === 'function') {\n      expandableOverride(_options.expandableOverride);\n    }\n\n    /**\n     * Initialize the plugin, which requires user to pass the SlickGrid Grid object\n     * @param grid: SlickGrid Grid object\n     */\n    function init(grid) {\n      if (!grid) {\n        throw new Error('RowDetailView Plugin requires the Grid instance to be passed as argument to the \"init()\" method');\n      }\n      _grid = grid;\n      _gridUid = grid.getUID();\n      _gridOptions = grid.getOptions() || {};\n      _dataView = _grid.getData();\n      _keyPrefix = _options && _options.keyPrefix || '_';\n\n      // Update the minRowBuffer so that the view doesn't disappear when it's at top of screen + the original default 3\n      _gridRowBuffer = _grid.getOptions().minRowBuffer;\n      _grid.getOptions().minRowBuffer = _options.panelRows + 3;\n\n      _handler\n        .subscribe(_grid.onClick, handleClick)\n        .subscribe(_grid.onScroll, handleScroll);\n\n      // Sort will, by default, Collapse all of the open items (unless user implements his own onSort which deals with open row and padding)\n      if (_options.collapseAllOnSort) {\n        _handler.subscribe(_grid.onSort, collapseAll);\n        _expandedRows = [];\n        _rowIdsOutOfViewport = [];\n      }\n\n      _handler.subscribe(_grid.getData().onRowCountChanged, function () {\n        _grid.updateRowCount();\n        _grid.render();\n      });\n\n      _handler.subscribe(_grid.getData().onRowsChanged, function (e, a) {\n        _grid.invalidateRows(a.rows);\n        _grid.render();\n      });\n\n      // subscribe to the onAsyncResponse so that the plugin knows when the user server side calls finished\n      subscribeToOnAsyncResponse();\n\n      // after data is set, let's get the DataView Id Property name used (defaults to \"id\")\n      _handler.subscribe(_dataView.onSetItemsCalled, function () {\n        _dataViewIdProperty = _dataView && _dataView.getIdPropertyName() || 'id';\n      });\n\n      // if we use the alternative & simpler calculation of the out of viewport range\n      // we will need to know how many rows are rendered on the screen and we need to wait for grid to be rendered\n      // unfortunately there is no triggered event for knowing when grid is finished, so we use 250ms delay and it's typically more than enough\n      if (_options.useSimpleViewportCalc) {\n        _handler.subscribe(_grid.onRendered, function (e, args) {\n          if (args && args.endRow) {\n            _visibleRenderedCellCount = args.endRow - args.startRow;\n          }\n        });\n      }\n    }\n\n    /** destroy the plugin and it's events */\n    function destroy() {\n      _handler.unsubscribeAll();\n      _self.onAsyncResponse.unsubscribe();\n      _self.onAsyncEndUpdate.unsubscribe();\n      _self.onAfterRowDetailToggle.unsubscribe();\n      _self.onBeforeRowDetailToggle.unsubscribe();\n      _self.onRowOutOfViewportRange.unsubscribe();\n      _self.onRowBackToViewportRange.unsubscribe();\n    }\n\n    /** Get current plugin options */\n    function getOptions() {\n      return _options;\n    }\n\n    /** set or change some of the plugin options */\n    function setOptions(options) {\n      _options = Utils.extend(true, {}, _options, options);\n      if (_options && _options.singleRowExpand) {\n        collapseAll();\n      }\n    }\n\n    /** Find a value in an array and return the index when (or -1 when not found) */\n    function arrayFindIndex(sourceArray, value) {\n      if (sourceArray) {\n        for (var i = 0; i < sourceArray.length; i++) {\n          if (sourceArray[i] === value) {\n            return i;\n          }\n        }\n      }\n      return -1;\n    }\n\n    /** Handle mouse click event */\n    function handleClick(e, args) {\n      var dataContext = _grid.getDataItem(args.row);\n      if (!checkExpandableOverride(args.row, dataContext, _grid)) {\n        return;\n      }\n\n      // clicking on a row select checkbox\n      if (_options.useRowClick || _grid.getColumns()[args.cell]['id'] === _options.columnId && e.target.classList.contains(_options.cssClass || '')) {\n        // if editing, try to commit\n        if (_grid.getEditorLock().isActive() && !_grid.getEditorLock().commitCurrentEdit()) {\n          e.preventDefault();\n          e.stopImmediatePropagation();\n          return;\n        }\n\n        // trigger an event before toggling\n        _self.onBeforeRowDetailToggle.notify({\n          'grid': _grid,\n          'item': dataContext\n        }, e, _self);\n\n        toggleRowSelection(args.row, dataContext);\n\n        // trigger an event after toggling\n        _self.onAfterRowDetailToggle.notify({\n          'grid': _grid,\n          'item': dataContext,\n          'expandedRows': _expandedRows,\n        }, e, _self);\n\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n      }\n    }\n\n    /** If we scroll save detail views that go out of cache range */\n    function handleScroll() {\n      if (_options.useSimpleViewportCalc) {\n        calculateOutOfRangeViewsSimplerVersion();\n      } else {\n        calculateOutOfRangeViews();\n      }\n    }\n\n    /** Calculate when expanded rows become out of view range */\n    function calculateOutOfRangeViews() {\n      if (_grid) {\n        var renderedRange = _grid.getRenderedRange();\n        // Only check if we have expanded rows\n        if (_expandedRows.length > 0) {\n          // Assume scroll direction is down by default.\n          var scrollDir = 'DOWN';\n          if (_lastRange) {\n            // Some scrolling isn't anything as the range is the same\n            if (_lastRange.top === renderedRange.top && _lastRange.bottom === renderedRange.bottom) {\n              return;\n            }\n\n            // If our new top is smaller we are scrolling up\n            if (_lastRange.top > renderedRange.top ||\n              // Or we are at very top but our bottom is increasing\n              (_lastRange.top === 0 && renderedRange.top === 0) && _lastRange.bottom > renderedRange.bottom) {\n              scrollDir = 'UP';\n            }\n          }\n        }\n\n        _expandedRows.forEach(function (row) {\n          var rowIndex = _dataView.getRowById(row[_dataViewIdProperty]);\n\n          var rowPadding = row[_keyPrefix + 'sizePadding'];\n          var rowOutOfRange = arrayFindIndex(_rowIdsOutOfViewport, row[_dataViewIdProperty]) >= 0;\n\n          if (scrollDir === 'UP') {\n            // save the view when asked\n            if (_options.saveDetailViewOnScroll) {\n              // If the bottom item within buffer range is an expanded row save it.\n              if (rowIndex >= renderedRange.bottom - _gridRowBuffer) {\n                saveDetailView(row);\n              }\n            }\n\n            // If the row expanded area is within the buffer notify that it is back in range\n            if (rowOutOfRange && rowIndex - _outsideRange < renderedRange.top && rowIndex >= renderedRange.top) {\n              notifyBackToViewportWhenDomExist(row, row[_dataViewIdProperty]);\n            }\n\n            // if our first expanded row is about to go off the bottom\n            else if (!rowOutOfRange && (rowIndex + rowPadding) > renderedRange.bottom) {\n              notifyOutOfViewport(row, row[_dataViewIdProperty]);\n            }\n          }\n          else if (scrollDir === 'DOWN') {\n            // save the view when asked\n            if (_options.saveDetailViewOnScroll) {\n              // If the top item within buffer range is an expanded row save it.\n              if (rowIndex <= renderedRange.top + _gridRowBuffer) {\n                saveDetailView(row);\n              }\n            }\n\n            // If row index is i higher than bottom with some added value (To ignore top rows off view) and is with view and was our of range\n            if (rowOutOfRange && (rowIndex + rowPadding + _outsideRange) > renderedRange.bottom && rowIndex < rowIndex + rowPadding) {\n              notifyBackToViewportWhenDomExist(row, row[_dataViewIdProperty]);\n            }\n\n            // if our row is outside top of and the buffering zone but not in the array of outOfVisable range notify it\n            else if (!rowOutOfRange && rowIndex < renderedRange.top) {\n              notifyOutOfViewport(row, row[_dataViewIdProperty]);\n            }\n          }\n        });\n        _lastRange = renderedRange;\n      }\n    }\n\n    /** This is an alternative & more simpler version of the Calculate when expanded rows become out of view range */\n    function calculateOutOfRangeViewsSimplerVersion() {\n      if (_grid) {\n        var renderedRange = _grid.getRenderedRange();\n\n        _expandedRows.forEach(function (row) {\n          var rowIndex = _dataView.getRowById(row[_dataViewIdProperty]);\n          var isOutOfVisibility = checkIsRowOutOfViewportRange(rowIndex, renderedRange);\n          if (!isOutOfVisibility && arrayFindIndex(_rowIdsOutOfViewport, row[_dataViewIdProperty]) >= 0) {\n            notifyBackToViewportWhenDomExist(row, row[_dataViewIdProperty]);\n          } else if (isOutOfVisibility) {\n            notifyOutOfViewport(row, row[_dataViewIdProperty]);\n          }\n        });\n      }\n    }\n\n    /**\n     * Check if the row became out of visible range (when user can't see it anymore)\n     * @param rowIndex\n     * @param renderedRange from SlickGrid\n     */\n    function checkIsRowOutOfViewportRange(rowIndex, renderedRange) {\n      if (Math.abs(renderedRange.bottom - _gridRowBuffer - rowIndex) > _visibleRenderedCellCount * 2) {\n        return true;\n      }\n      return false;\n    }\n\n    /** Send a notification, through \"onRowOutOfViewportRange\", that is out of the viewport range */\n    function notifyOutOfViewport(item, rowId) {\n      var rowIndex = item.rowIndex || _dataView.getRowById(item[_dataViewIdProperty]);\n\n      _self.onRowOutOfViewportRange.notify({\n        'grid': _grid,\n        'item': item,\n        'rowId': rowId,\n        'rowIndex': rowIndex,\n        'expandedRows': _expandedRows,\n        'rowIdsOutOfViewport': syncOutOfViewportArray(rowId, true)\n      }, null, _self);\n    }\n\n    /** Send a notification, through \"onRowBackToViewportRange\", that a row came back to the viewport */\n    function notifyBackToViewportWhenDomExist(item, rowId) {\n      var rowIndex = item.rowIndex || _dataView.getRowById(item[_dataViewIdProperty]);\n\n      setTimeout(function () {\n        // make sure View Row DOM Element really exist before notifying that it's a row that is visible again\n        if (document.querySelector(`.${_gridUid} .cellDetailView_${item[_dataViewIdProperty]}`)) {\n          _self.onRowBackToViewportRange.notify({\n            'grid': _grid,\n            'item': item,\n            'rowId': rowId,\n            'rowIndex': rowIndex,\n            'expandedRows': _expandedRows,\n            'rowIdsOutOfViewport': syncOutOfViewportArray(rowId, false)\n          }, null, _self);\n        }\n      }, 100);\n    }\n\n    /**\n     * This function will sync the out of viewport array whenever necessary.\n     * The sync can add a row (when necessary, no need to add again if it already exist) or delete a row from the array.\n     * @param rowId: number\n     * @param isAdding: are we adding or removing a row?\n     */\n    function syncOutOfViewportArray(rowId, isAdding) {\n      var arrayRowIndex = arrayFindIndex(_rowIdsOutOfViewport, rowId);\n\n      if (isAdding && arrayRowIndex < 0) {\n        _rowIdsOutOfViewport.push(rowId);\n      } else if (!isAdding && arrayRowIndex >= 0) {\n        _rowIdsOutOfViewport.splice(arrayRowIndex, 1);\n      }\n      return _rowIdsOutOfViewport;\n    }\n\n    // Toggle between showing and hiding a row\n    function toggleRowSelection(rowNumber, dataContext) {\n      if (!checkExpandableOverride(rowNumber, dataContext, _grid)) {\n        return;\n      }\n\n      _dataView.beginUpdate();\n      handleAccordionShowHide(dataContext);\n      _dataView.endUpdate();\n    }\n\n    /** Collapse all of the open items */\n    function collapseAll() {\n      _dataView.beginUpdate();\n      for (var i = _expandedRows.length - 1; i >= 0; i--) {\n        collapseDetailView(_expandedRows[i], true);\n      }\n      _dataView.endUpdate();\n    }\n\n    /** Colapse an Item so it is not longer seen */\n    function collapseDetailView(item, isMultipleCollapsing) {\n      if (!isMultipleCollapsing) {\n        _dataView.beginUpdate();\n      }\n      // Save the details on the collapse assuming onetime loading\n      if (_options.loadOnce) {\n        saveDetailView(item);\n      }\n\n      item[_keyPrefix + 'collapsed'] = true;\n      for (var idx = 1; idx <= item[_keyPrefix + 'sizePadding']; idx++) {\n        _dataView.deleteItem(item[_dataViewIdProperty] + '.' + idx);\n      }\n      item[_keyPrefix + 'sizePadding'] = 0;\n      _dataView.updateItem(item[_dataViewIdProperty], item);\n\n      // Remove the item from the expandedRows\n      _expandedRows = _expandedRows.filter(function (r) {\n        return r[_dataViewIdProperty] !== item[_dataViewIdProperty];\n      });\n\n      if (!isMultipleCollapsing) {\n        _dataView.endUpdate();\n      }\n    }\n\n    /** Expand a row given the dataview item that is to be expanded */\n    function expandDetailView(item) {\n      if (_options && _options.singleRowExpand) {\n        collapseAll();\n      }\n\n      item[_keyPrefix + 'collapsed'] = false;\n      _expandedRows.push(item);\n\n      // In the case something went wrong loading it the first time such a scroll of screen before loaded\n      if (!item[_keyPrefix + 'detailContent']) item[_keyPrefix + 'detailViewLoaded'] = false;\n\n      // display pre-loading template\n      if (!item[_keyPrefix + 'detailViewLoaded'] || _options.loadOnce !== true) {\n        item[_keyPrefix + 'detailContent'] = _options.preTemplate(item);\n      } else {\n        _self.onAsyncResponse.notify({\n          'item': item,\n          'itemDetail': item,\n          'detailView': item[_keyPrefix + 'detailContent']\n        }, undefined, this);\n        applyTemplateNewLineHeight(item);\n        _dataView.updateItem(item[_dataViewIdProperty], item);\n\n        return;\n      }\n\n      applyTemplateNewLineHeight(item);\n      _dataView.updateItem(item[_dataViewIdProperty], item);\n\n      // async server call\n      _options.process(item);\n    }\n\n    /** Saves the current state of the detail view */\n    function saveDetailView(item) {\n      const view = document.querySelector(`.${_gridUid} .innerDetailView_${item[_dataViewIdProperty]}`);\n      if (view) {\n        const html = view.innerHTML;\n        if (html !== undefined) {\n          item[`${_keyPrefix}detailContent`] = html;\n        }\n      }\n    }\n\n    /**\n     * subscribe to the onAsyncResponse so that the plugin knows when the user server side calls finished\n     * the response has to be as \"args.item\" (or \"args.itemDetail\") with it's data back\n     */\n    function subscribeToOnAsyncResponse() {\n      _self.onAsyncResponse.subscribe(function (e, args) {\n        if (!args || (!args.item && !args.itemDetail)) {\n          throw 'Slick.RowDetailView plugin requires the onAsyncResponse() to supply \"args.item\" property.';\n        }\n\n        // we accept item/itemDetail, just get the one which has data\n        var itemDetail = args.item || args.itemDetail;\n\n        // If we just want to load in a view directly we can use detailView property to do so\n        if (args.detailView) {\n          itemDetail[_keyPrefix + 'detailContent'] = args.detailView;\n        } else {\n          itemDetail[_keyPrefix + 'detailContent'] = _options.postTemplate(itemDetail);\n        }\n\n        itemDetail[_keyPrefix + 'detailViewLoaded'] = true;\n        _dataView.updateItem(itemDetail[_dataViewIdProperty], itemDetail);\n\n        // trigger an event once the post template is finished loading\n        _self.onAsyncEndUpdate.notify({\n          'grid': _grid,\n          'item': itemDetail,\n          'itemDetail': itemDetail\n        }, e, _self);\n      });\n    }\n\n    /** When row is getting toggled, we will handle the action of collapsing/expanding */\n    function handleAccordionShowHide(item) {\n      if (item) {\n        if (!item[_keyPrefix + 'collapsed']) {\n          collapseDetailView(item);\n        } else {\n          expandDetailView(item);\n        }\n      }\n    }\n\n    //////////////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////////////\n\n    /** Get the Row Detail padding (which are the rows dedicated to the detail panel) */\n    var getPaddingItem = function (parent, offset) {\n      var item = {};\n\n      for (var prop in _grid.getData()) {\n        item[prop] = null;\n      }\n      item[_dataViewIdProperty] = parent[_dataViewIdProperty] + '.' + offset;\n\n      // additional hidden padding metadata fields\n      item[_keyPrefix + 'collapsed'] = true;\n      item[_keyPrefix + 'isPadding'] = true;\n      item[_keyPrefix + 'parent'] = parent;\n      item[_keyPrefix + 'offset'] = offset;\n\n      return item;\n    };\n\n    //////////////////////////////////////////////////////////////\n    // create the detail ctr node. this belongs to the dev & can be custom-styled as per\n    //////////////////////////////////////////////////////////////\n    function applyTemplateNewLineHeight(item) {\n      // the height is calculated by the template row count (how many line of items does the template view have)\n      var rowCount = _options.panelRows;\n\n      // calculate padding requirements based on detail-content..\n      // ie. worst-case: create an invisible dom node now & find it's height.\n      var lineHeight = 13; // we know cuz we wrote the custom css init ;)\n      item[_keyPrefix + 'sizePadding'] = Math.ceil(((rowCount * 2) * lineHeight) / _gridOptions.rowHeight);\n      item[_keyPrefix + 'height'] = (item[_keyPrefix + 'sizePadding'] * _gridOptions.rowHeight);\n      var idxParent = _dataView.getIdxById(item[_dataViewIdProperty]);\n      for (var idx = 1; idx <= item[_keyPrefix + 'sizePadding']; idx++) {\n        _dataView.insertItem(idxParent + idx, getPaddingItem(item, idx));\n      }\n    }\n\n    /** Get the Column Definition of the first column dedicated to toggling the Row Detail View */\n    function getColumnDefinition() {\n      return {\n        id: _options.columnId,\n        name: '',\n        toolTip: _options.toolTip,\n        field: 'sel',\n        width: _options.width,\n        resizable: false,\n        sortable: false,\n        alwaysRenderColumn: _options.alwaysRenderColumn,\n        cssClass: _options.cssClass,\n        formatter: detailSelectionFormatter\n      };\n    }\n\n    /** return the currently expanded rows */\n    function getExpandedRows() {\n      return _expandedRows;\n    }\n\n    /** The Formatter of the toggling icon of the Row Detail */\n    function detailSelectionFormatter(row, cell, value, columnDef, dataContext, grid) {\n      if (!checkExpandableOverride(row, dataContext, grid)) {\n        return null;\n      } else {\n        if (dataContext[_keyPrefix + 'collapsed'] == undefined) {\n          dataContext[_keyPrefix + 'collapsed'] = true;\n          dataContext[_keyPrefix + 'sizePadding'] = 0;     //the required number of pading rows\n          dataContext[_keyPrefix + 'height'] = 0;     //the actual height in pixels of the detail field\n          dataContext[_keyPrefix + 'isPadding'] = false;\n          dataContext[_keyPrefix + 'parent'] = undefined;\n          dataContext[_keyPrefix + 'offset'] = 0;\n        }\n\n        if (dataContext[_keyPrefix + 'isPadding']) {\n          // render nothing\n        }\n        else if (dataContext[_keyPrefix + 'collapsed']) {\n          var collapsedClasses = _options.cssClass + ' expand ';\n          if (_options.collapsedClass) {\n            collapsedClasses += _options.collapsedClass;\n          }\n          return '<div class=\"' + collapsedClasses + '\"></div>';\n        }\n        else {\n          var html = [];\n          var rowHeight = _gridOptions.rowHeight;\n\n          var outterHeight = dataContext[_keyPrefix + 'sizePadding'] * _gridOptions.rowHeight;\n          if (_options.maxRows !== null && dataContext[_keyPrefix + 'sizePadding'] > _options.maxRows) {\n            outterHeight = _options.maxRows * rowHeight;\n            dataContext[_keyPrefix + 'sizePadding'] = _options.maxRows;\n          }\n\n          //V313HAX:\n          //putting in an extra closing div after the closing toggle div and ommiting a\n          //final closing div for the detail ctr div causes the slickgrid renderer to\n          //insert our detail div as a new column ;) ~since it wraps whatever we provide\n          //in a generic div column container. so our detail becomes a child directly of\n          //the row not the cell. nice =)  ~no need to apply a css change to the parent\n          //slick-cell to escape the cell overflow clipping.\n\n          //sneaky extra </div> inserted here-----------------v\n          var expandedClasses = _options.cssClass + ' collapse ';\n          if (_options.expandedClass) expandedClasses += _options.expandedClass;\n          html.push('<div class=\"' + expandedClasses + '\"></div></div>');\n\n          html.push('<div class=\"dynamic-cell-detail cellDetailView_', dataContext[_dataViewIdProperty], '\" ');   //apply custom css to detail\n          html.push('style=\"height:', outterHeight, 'px;'); //set total height of padding\n          html.push('top:', rowHeight, 'px\">');             //shift detail below 1st row\n          html.push('<div class=\"detail-container detailViewContainer_', dataContext[_dataViewIdProperty], '\">'); //sub ctr for custom styling\n          html.push('<div class=\"innerDetailView_', dataContext[_dataViewIdProperty], '\">', dataContext[_keyPrefix + 'detailContent'], '</div></div>');\n          // &omit a final closing detail container </div> that would come next\n\n          return html.join('');\n        }\n      }\n      return null;\n    }\n\n    /** Resize the Row Detail View */\n    function resizeDetailView(item) {\n      if (!item) {\n        return;\n      }\n\n      // Grad each of the DOM elements\n      var mainContainer = document.querySelector('.' + _gridUid + ' .detailViewContainer_' + item[_dataViewIdProperty]);\n      var cellItem = document.querySelector('.' + _gridUid + ' .cellDetailView_' + item[_dataViewIdProperty]);\n      var inner = document.querySelector('.' + _gridUid + ' .innerDetailView_' + item[_dataViewIdProperty]);\n\n      if (!mainContainer || !cellItem || !inner) {\n        return;\n      }\n\n      for (var idx = 1; idx <= item[_keyPrefix + 'sizePadding']; idx++) {\n        _dataView.deleteItem(item[_dataViewIdProperty] + '.' + idx);\n      }\n\n      var rowHeight = _gridOptions.rowHeight; // height of a row\n      var lineHeight = 13; // we know cuz we wrote the custom css innit ;)\n\n      // remove the height so we can calculate the height\n      mainContainer.style.minHeight = null;\n\n      // Get the scroll height for the main container so we know the actual size of the view\n      var itemHeight = mainContainer.scrollHeight;\n\n      // Now work out how many rows\n      var rowCount = Math.ceil(itemHeight / rowHeight);\n\n      item[_keyPrefix + 'sizePadding'] = Math.ceil(((rowCount * 2) * lineHeight) / rowHeight);\n      item[_keyPrefix + 'height'] = itemHeight;\n\n      var outterHeight = (item[_keyPrefix + 'sizePadding'] * rowHeight);\n      if (_options.maxRows !== null && item[_keyPrefix + 'sizePadding'] > _options.maxRows) {\n        outterHeight = _options.maxRows * rowHeight;\n        item[_keyPrefix + 'sizePadding'] = _options.maxRows;\n      }\n\n      // If the padding is now more than the original minRowBuff we need to increase it\n      if (_grid.getOptions().minRowBuffer < item[_keyPrefix + 'sizePadding']) {\n        // Update the minRowBuffer so that the view doesn't disappear when it's at top of screen + the original default 3\n        _grid.getOptions().minRowBuffer = item[_keyPrefix + 'sizePadding'] + 3;\n      }\n\n      mainContainer.setAttribute('style', 'min-height: ' + item[_keyPrefix + 'height'] + 'px');\n      if (cellItem) cellItem.setAttribute('style', 'height: ' + outterHeight + 'px; top:' + rowHeight + 'px');\n\n      var idxParent = _dataView.getIdxById(item[_dataViewIdProperty]);\n      for (var idx = 1; idx <= item[_keyPrefix + 'sizePadding']; idx++) {\n        _dataView.insertItem(idxParent + idx, getPaddingItem(item, idx));\n      }\n\n      // Lastly save the updated state\n      saveDetailView(item);\n    }\n\n    /** Takes in the item we are filtering and if it is an expanded row returns it's parents row to filter on */\n    function getFilterItem(item) {\n      if (item[_keyPrefix + 'isPadding'] && item[_keyPrefix + 'parent']) {\n        item = item[_keyPrefix + 'parent'];\n      }\n      return item;\n    }\n\n    function checkExpandableOverride(row, dataContext, grid) {\n      if (typeof _expandableOverride === 'function') {\n        return _expandableOverride(row, dataContext, grid);\n      }\n      return true;\n    }\n\n    /**\n     * Method that user can pass to override the default behavior or making every row an expandable row.\n     * In order word, user can choose which rows to be an available row detail (or not) by providing his own logic.\n     * @param overrideFn: override function callback\n     */\n    function expandableOverride(overrideFn) {\n      _expandableOverride = overrideFn;\n    }\n\n  Utils.extend(this, {\n      \"init\": init,\n      \"destroy\": destroy,\n      \"pluginName\": \"RowDetailView\",\n\n      \"collapseAll\": collapseAll,\n      \"collapseDetailView\": collapseDetailView,\n      \"expandDetailView\": expandDetailView,\n      \"expandableOverride\": expandableOverride,\n      \"getColumnDefinition\": getColumnDefinition,\n      \"getExpandedRows\": getExpandedRows,\n      \"getFilterItem\": getFilterItem,\n      \"getOptions\": getOptions,\n      \"resizeDetailView\": resizeDetailView,\n      \"saveDetailView\": saveDetailView,\n      \"setOptions\": setOptions,\n\n      // events\n    \"onAsyncResponse\": new SlickEvent(),\n    \"onAsyncEndUpdate\": new SlickEvent(),\n    \"onAfterRowDetailToggle\": new SlickEvent(),\n    \"onBeforeRowDetailToggle\": new SlickEvent(),\n    \"onRowOutOfViewportRange\": new SlickEvent(),\n    \"onRowBackToViewportRange\": new SlickEvent()\n    });\n  }\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      Plugins: {\n        RowDetailView\n      }\n    }\n  });\n}\n\n", "import { Event as SlickEvent_, EventHandler as EventHandler_, Utils as Utils_ } from '../slick.core';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : EventHandler_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n/**\n * Row Move Manager options:\n *    cssClass:                 A CSS class to be added to the menu item container.\n *    columnId:                 Column definition id (defaults to \"_move\")\n *    cancelEditOnDrag:         Do we want to cancel any Editing while dragging a row (defaults to false)\n *    disableRowSelection:      Do we want to disable the row selection? (defaults to false)\n *    hideRowMoveShadow:        Do we want to hide the row move shadow clone? (defaults to true)\n *    rowMoveShadowMarginTop:   When row move shadow is shown, optional margin-top (defaults to 0)\n *    rowMoveShadowMarginLeft:  When row move shadow is shown, optional margin-left (defaults to 0)\n *    rowMoveShadowOpacity:     When row move shadow is shown, what is its opacity? (defaults to 0.95)\n *    rowMoveShadowScale:       When row move shadow is shown, what is its size scale? (default to 0.75)\n *    singleRowMove:            Do we want a single row move? Setting this to false means that it's a multple row move (defaults to false)\n *    width:                    Width of the column\n *    usabilityOverride:        Callback method that user can override the default behavior of the row being moveable or not\n *\n */\n\nexport function RowMoveManager(options) {\n    var _grid;\n    var _canvas;\n    var _dragging;\n    var _self = this;\n    var _usabilityOverride = null;\n  var _handler = new EventHandler();\n    var _defaults = {\n      columnId: \"_move\",\n      cssClass: null,\n      cancelEditOnDrag: false,\n      disableRowSelection: false,\n      hideRowMoveShadow: true,\n      rowMoveShadowMarginTop: 0,\n      rowMoveShadowMarginLeft: 0,\n      rowMoveShadowOpacity: 0.95,\n      rowMoveShadowScale: 0.75,\n      singleRowMove: false,\n      width: 40,\n    };\n\n    // user could override the expandable icon logic from within the options or after instantiating the plugin\n    if (options && typeof options.usabilityOverride === 'function') {\n      usabilityOverride(options.usabilityOverride);\n    }\n\n    function init(grid) {\n      options = Utils.extend(true, {}, _defaults, options);\n      _grid = grid;\n      _canvas = _grid.getCanvasNode();\n      _handler\n        .subscribe(_grid.onDragInit, handleDragInit)\n        .subscribe(_grid.onDragStart, handleDragStart)\n        .subscribe(_grid.onDrag, handleDrag)\n        .subscribe(_grid.onDragEnd, handleDragEnd);\n  }\n\n  function destroy() {\n      _handler.unsubscribeAll();\n    }\n\n    function setOptions(newOptions) {\n      options = Utils.extend({}, options, newOptions);\n    }\n\n    function handleDragInit(e) {\n      // prevent the grid from cancelling drag'n'drop by default\n      e.stopImmediatePropagation();\n    }\n\n    function handleDragStart(e, dd) {\n      var cell = _grid.getCellFromEvent(e);\n      var currentRow = cell && cell.row;\n      var dataContext = _grid.getDataItem(currentRow);\n\n      if (!checkUsabilityOverride(currentRow, dataContext, _grid)) {\n        return;\n      }\n\n      if (options.cancelEditOnDrag && _grid.getEditorLock().isActive()) {\n        _grid.getEditorLock().cancelCurrentEdit();\n      }\n\n      if (_grid.getEditorLock().isActive() || !isHandlerColumn(cell.cell)) {\n        return false;\n      }\n\n      _dragging = true;\n      e.stopImmediatePropagation();\n\n      // optionally create a shadow element of the row so that we can see all the time which row exactly we're dragging\n      if (!options.hideRowMoveShadow) {\n        const cellNodeElm = _grid.getCellNode(cell.row, cell.cell);\n        const slickRowElm = cellNodeElm && cellNodeElm.closest('.slick-row');\n        if (slickRowElm) {\n          dd.clonedSlickRow = slickRowElm.cloneNode(true);\n          dd.clonedSlickRow.classList.add('slick-reorder-shadow-row');\n          dd.clonedSlickRow.style.display = 'none';\n          dd.clonedSlickRow.style.marginLeft = Number(options.rowMoveShadowMarginLeft || 0) + 'px';\n          dd.clonedSlickRow.style.marginTop = Number(options.rowMoveShadowMarginTop || 0) + 'px';\n          dd.clonedSlickRow.style.opacity = `${options.rowMoveShadowOpacity || 0.95}`;\n          dd.clonedSlickRow.style.transform = `scale(${options.rowMoveShadowScale || 0.75})`;\n          _canvas.appendChild(dd.clonedSlickRow);\n        }\n      }\n\n      var selectedRows = options.singleRowMove ? [cell.row] : _grid.getSelectedRows();\n\n      if (selectedRows.length === 0 || !selectedRows.some(selectedRow => selectedRow === cell.row)) {\n        selectedRows = [cell.row];\n        if (!options.disableRowSelection) {\n          _grid.setSelectedRows(selectedRows);\n        }\n      }\n\n      var rowHeight = _grid.getOptions().rowHeight;\n\n      dd.selectedRows = selectedRows;\n\n      dd.selectionProxy = document.createElement('div');\n      dd.selectionProxy.className = 'slick-reorder-proxy';\n      dd.selectionProxy.style.display = 'none';\n      dd.selectionProxy.style.position = 'absolute';\n      dd.selectionProxy.style.zIndex = '99999';\n      dd.selectionProxy.style.width = `${_canvas.clientWidth}px`;\n      dd.selectionProxy.style.height = `${rowHeight * selectedRows.length}px`;\n      _canvas.appendChild(dd.selectionProxy);\n\n      dd.guide = document.createElement('div');\n      dd.guide.className = 'slick-reorder-guide';\n      dd.guide.style.position = 'absolute';\n      dd.guide.style.zIndex = '99999';\n      dd.guide.style.width = `${_canvas.clientWidth}px`;\n      dd.guide.style.top = `-1000px`;\n      _canvas.appendChild(dd.guide);\n\n      dd.insertBefore = -1;\n    }\n\n    function handleDrag(evt, dd) {\n      if (!_dragging) {\n        return;\n      }\n\n      evt.stopImmediatePropagation();\n      const e = evt.getNativeEvent();\n\n      var targetEvent = e.touches ? e.touches[0] : e;\n      const top = targetEvent.pageY - (Utils.offset(_canvas).top || 0);\n      dd.selectionProxy.style.top = `${top - 5}px`;\n      dd.selectionProxy.style.display = 'block';\n\n      // if the row move shadow is enabled, we'll also make it follow the mouse cursor\n      if (dd.clonedSlickRow) {\n        dd.clonedSlickRow.style.top = `${top - 6}px`;\n        dd.clonedSlickRow.style.display = 'block';\n      }\n\n      var insertBefore = Math.max(0, Math.min(Math.round(top / _grid.getOptions().rowHeight), _grid.getDataLength()));\n      if (insertBefore !== dd.insertBefore) {\n        var eventData = {\n          \"grid\": _grid,\n          \"rows\": dd.selectedRows,\n          \"insertBefore\": insertBefore\n        };\n\n        if (_self.onBeforeMoveRows.notify(eventData).getReturnValue() === false) {\n          dd.canMove = false;\n        } else {\n          dd.canMove = true;\n        }\n\n        // if there's a UsabilityOverride defined, we also need to verify that the condition is valid\n        if (_usabilityOverride && dd.canMove) {\n          var insertBeforeDataContext = _grid.getDataItem(insertBefore);\n          dd.canMove = checkUsabilityOverride(insertBefore, insertBeforeDataContext, _grid);\n        }\n\n        // if the new target is possible we'll display the dark blue bar (representin the acceptability) at the target position\n        // else it won't show up (it will be off the screen)\n        if (!dd.canMove) {\n          dd.guide.style.top = '-1000px';\n        } else {\n          dd.guide.style.top = `${insertBefore * (_grid.getOptions().rowHeight || 0)}px`;\n        }\n\n        dd.insertBefore = insertBefore;\n      }\n    }\n\n    function handleDragEnd(e, dd) {\n      if (!_dragging) {\n        return;\n      }\n      _dragging = false;\n      e.stopImmediatePropagation();\n\n      dd.guide.remove();\n      dd.selectionProxy.remove();\n      if (dd.clonedSlickRow) {\n        dd.clonedSlickRow.remove();\n        dd.clonedSlickRow = null;\n      }\n\n      if (dd.canMove) {\n        var eventData = {\n          \"grid\": _grid,\n          \"rows\": dd.selectedRows,\n          \"insertBefore\": dd.insertBefore\n        };\n        // TODO:  _grid.remapCellCssClasses ?\n        _self.onMoveRows.notify(eventData);\n      }\n    }\n\n    function getColumnDefinition() {\n      return {\n        id: options.columnId || \"_move\",\n        name: \"\",\n        field: \"move\",\n        width: options.width || 40,\n        behavior: \"selectAndMove\",\n        selectable: false,\n        resizable: false,\n        // cssClass: options.cssClass,\n        formatter: moveIconFormatter\n      };\n    }\n\n    function moveIconFormatter(row, cell, value, columnDef, dataContext, grid) {\n      if (!checkUsabilityOverride(row, dataContext, grid)) {\n        return null;\n      } else {\n        return { addClasses: \"cell-reorder dnd \" + options.cssClass || '', text: \"\" };\n      }\n    }\n\n    function checkUsabilityOverride(row, dataContext, grid) {\n      if (typeof _usabilityOverride === 'function') {\n        return _usabilityOverride(row, dataContext, grid);\n      }\n      return true;\n    }\n\n    /**\n     * Method that user can pass to override the default behavior or making every row moveable.\n     * In order word, user can choose which rows to be an available as moveable (or not) by providing his own logic show/hide icon and usability.\n     * @param overrideFn: override function callback\n     */\n    function usabilityOverride(overrideFn) {\n      _usabilityOverride = overrideFn;\n    }\n\n    function isHandlerColumn(columnIndex) {\n      return /move|selectAndMove/.test(_grid.getColumns()[columnIndex].behavior);\n    }\n\n  Utils.extend(this, {\n    \"onBeforeMoveRows\": new SlickEvent(),\n    \"onMoveRows\": new SlickEvent(),\n\n      \"init\": init,\n      \"destroy\": destroy,\n      \"getColumnDefinition\": getColumnDefinition,\n      \"setOptions\": setOptions,\n      \"usabilityOverride\": usabilityOverride,\n      \"isHandlerColumn\": isHandlerColumn,\n      \"pluginName\": \"RowMoveManager\"\n    });\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      RowMoveManager\n    }\n  });\n}\n\n", "import { Event as SlickEvent_, EventData as EventData_, EventHandler as EventHandler_, keyCode as keyCode_, Range as SlickRange_, Utils as Utils_ } from '../slick.core';\nimport { Draggable as Draggable_ } from '../slick.interactions';\nimport { CellRangeDecorator as CellRangeDecorator_ } from './slick.cellrangedecorator';\nimport { CellRangeSelector as CellRangeSelector_ } from './slick.cellrangeselector';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst EventData = IIFE_ONLY ? Slick.EventData : EventData_;\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : EventHandler_;\nconst keyCode = IIFE_ONLY ? Slick.keyCode : keyCode_;\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst SlickRange = IIFE_ONLY ? Slick.Range : SlickRange_;\nconst Draggable = IIFE_ONLY ? Slick.Draggable : Draggable_;\nconst CellRangeDecorator = IIFE_ONLY ? Slick.CellRangeDecorator : CellRangeDecorator_;\nconst CellRangeSelector = IIFE_ONLY ? Slick.CellRangeSelector : CellRangeSelector_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\nexport function RowSelectionModel(options) {\n    var _grid;\n    var _ranges = [];\n    var _self = this;\n  var _handler = new EventHandler();\n    var _inHandler;\n    var _options;\n    var _selector;\n    var _isRowMoveManagerHandler;\n    var _defaults = {\n      selectActiveRow: true,\n      dragToSelect: false,\n      autoScrollWhenDrag: true,\n      cellRangeSelector: undefined\n    };\n\n    function init(grid) {\n      if (typeof Draggable === \"undefined\") {\n        throw new Error('Slick.Draggable is undefined, make sure to import \"slick.interactions.js\"');\n      }\n\n      _options = Utils.extend(true, {}, _defaults, options);\n      _selector = _options.cellRangeSelector;\n      _grid = grid;\n\n      if (!_selector && _options.dragToSelect) {\n        if (!CellRangeDecorator) {\n            throw new Error(\"Slick.CellRangeDecorator is required when option dragToSelect set to true\");\n        }\n        _selector = new CellRangeSelector({\n          selectionCss: {\n            \"border\": \"none\"\n          },\n          autoScroll: _options.autoScrollWhenDrag\n        })\n      }\n\n      _handler.subscribe(_grid.onActiveCellChanged,\n          wrapHandler(handleActiveCellChange));\n      _handler.subscribe(_grid.onKeyDown,\n          wrapHandler(handleKeyDown));\n      _handler.subscribe(_grid.onClick,\n          wrapHandler(handleClick));\n      if (_selector) {\n        grid.registerPlugin(_selector);\n        _selector.onCellRangeSelecting.subscribe(handleCellRangeSelected);\n        _selector.onCellRangeSelected.subscribe(handleCellRangeSelected);\n        _selector.onBeforeCellRangeSelected.subscribe(handleBeforeCellRangeSelected);\n      }\n    }\n\n    function destroy() {\n      _handler.unsubscribeAll();\n      if (_selector) {\n        _selector.onCellRangeSelecting.unsubscribe(handleCellRangeSelected);\n        _selector.onCellRangeSelected.unsubscribe(handleCellRangeSelected);\n        _selector.onBeforeCellRangeSelected.unsubscribe(handleBeforeCellRangeSelected);\n        _grid.unregisterPlugin(_selector);\n        if (_selector.destroy) {\n          _selector.destroy();\n        }\n      }\n    }\n\n    function wrapHandler(handler) {\n      return function () {\n        if (!_inHandler) {\n          _inHandler = true;\n          handler.apply(this, arguments);\n          _inHandler = false;\n        }\n      };\n    }\n\n    function rangesToRows(ranges) {\n      var rows = [];\n      for (var i = 0; i < ranges.length; i++) {\n        for (var j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {\n          rows.push(j);\n        }\n      }\n      return rows;\n    }\n\n    function rowsToRanges(rows) {\n      var ranges = [];\n      var lastCell = _grid.getColumns().length - 1;\n      for (var i = 0; i < rows.length; i++) {\n        ranges.push(new SlickRange(rows[i], 0, rows[i], lastCell));\n      }\n      return ranges;\n    }\n\n    function getRowsRange(from, to) {\n      var i, rows = [];\n      for (i = from; i <= to; i++) {\n        rows.push(i);\n      }\n      for (i = to; i < from; i++) {\n        rows.push(i);\n      }\n      return rows;\n    }\n\n    function getSelectedRows() {\n      return rangesToRows(_ranges);\n    }\n\n    function setSelectedRows(rows) {\n      setSelectedRanges(rowsToRanges(rows), \"SlickRowSelectionModel.setSelectedRows\");\n    }\n\n    function setSelectedRanges(ranges, caller) {\n      // simple check for: empty selection didn't change, prevent firing onSelectedRangesChanged\n      if ((!_ranges || _ranges.length === 0) && (!ranges || ranges.length === 0)) {\n        return;\n      }\n      _ranges = ranges;\n\n      // provide extra \"caller\" argument through SlickEventData to avoid breaking pubsub event that only accepts an array of selected range\n      var eventData = new EventData(null, _ranges);\n      Object.defineProperty(eventData, 'detail', { writable: true, configurable: true, value: { caller: caller || \"SlickRowSelectionModel.setSelectedRanges\" } });\n      _self.onSelectedRangesChanged.notify(_ranges, eventData);\n    }\n\n    function getSelectedRanges() {\n      return _ranges;\n    }\n\n    function refreshSelections() {\n      setSelectedRows(getSelectedRows());\n    }\n\n    function handleActiveCellChange(e, data) {\n      if (_options.selectActiveRow && data.row != null) {\n        setSelectedRanges([new SlickRange(data.row, 0, data.row, _grid.getColumns().length - 1)]);\n      }\n    }\n\n    function handleKeyDown(e) {\n      var activeRow = _grid.getActiveCell();\n      if (_grid.getOptions().multiSelect && activeRow\n        && e.shiftKey && !e.ctrlKey && !e.altKey && !e.metaKey\n        && (e.which == keyCode.UP || e.which == keyCode.DOWN)) {\n        var selectedRows = getSelectedRows();\n        selectedRows.sort(function (x, y) {\n          return x - y;\n        });\n\n        if (!selectedRows.length) {\n          selectedRows = [activeRow.row];\n        }\n\n        var top = selectedRows[0];\n        var bottom = selectedRows[selectedRows.length - 1];\n        var active;\n\n        if (e.which == keyCode.DOWN) {\n          active = activeRow.row < bottom || top == bottom ? ++bottom : ++top;\n        } else {\n          active = activeRow.row < bottom ? --bottom : --top;\n        }\n\n        if (active >= 0 && active < _grid.getDataLength()) {\n          _grid.scrollRowIntoView(active);\n          var tempRanges = rowsToRanges(getRowsRange(top, bottom));\n          setSelectedRanges(tempRanges);\n        }\n\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    }\n\n    function handleClick(e) {\n      var cell = _grid.getCellFromEvent(e);\n      if (!cell || !_grid.canCellBeActive(cell.row, cell.cell)) {\n        return false;\n      }\n\n      if (!_grid.getOptions().multiSelect || (\n          !e.ctrlKey && !e.shiftKey && !e.metaKey)) {\n        return false;\n      }\n\n      var selection = rangesToRows(_ranges);\n      var idx = selection.indexOf(cell.row);\n\n      if (idx === -1 && (e.ctrlKey || e.metaKey)) {\n        selection.push(cell.row);\n        _grid.setActiveCell(cell.row, cell.cell);\n      } else if (idx !== -1 && (e.ctrlKey || e.metaKey)) {\n        selection = selection.filter((o) => o !== cell.row);\n        _grid.setActiveCell(cell.row, cell.cell);\n      } else if (selection.length && e.shiftKey) {\n        var last = selection.pop();\n        var from = Math.min(cell.row, last);\n        var to = Math.max(cell.row, last);\n        selection = [];\n        for (var i = from; i <= to; i++) {\n          if (i !== last) {\n            selection.push(i);\n          }\n        }\n        selection.push(last);\n        _grid.setActiveCell(cell.row, cell.cell);\n      }\n\n      var tempRanges = rowsToRanges(selection);\n      setSelectedRanges(tempRanges);\n      e.stopImmediatePropagation();\n\n      return true;\n    }\n\n    function handleBeforeCellRangeSelected(e, cell) {\n      if (!_isRowMoveManagerHandler) {\n        var rowMoveManager = _grid.getPluginByName('RowMoveManager') || _grid.getPluginByName('CrossGridRowMoveManager');\n        _isRowMoveManagerHandler = rowMoveManager ? rowMoveManager.isHandlerColumn : Utils.noop;\n      }\n      if (_grid.getEditorLock().isActive() || _isRowMoveManagerHandler(cell.cell)) {\n        e.stopPropagation();\n        return false;\n      }\n      _grid.setActiveCell(cell.row, cell.cell);\n    }\n\n    function handleCellRangeSelected(e, args) {\n      if (!_grid.getOptions().multiSelect || !_options.selectActiveRow) {\n        return false;\n      }\n      setSelectedRanges([new SlickRange(args.range.fromRow, 0, args.range.toRow, _grid.getColumns().length - 1)])\n    }\n\n  Utils.extend(this, {\n      \"getSelectedRows\": getSelectedRows,\n      \"setSelectedRows\": setSelectedRows,\n\n      \"getSelectedRanges\": getSelectedRanges,\n      \"setSelectedRanges\": setSelectedRanges,\n\n      \"refreshSelections\": refreshSelections,\n\n      \"init\": init,\n      \"destroy\": destroy,\n      \"pluginName\": \"RowSelectionModel\",\n\n    \"onSelectedRangesChanged\": new SlickEvent()\n    });\n  }\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      RowSelectionModel\n    }\n  });\n}\n\n", "import { Event as SlickEvent_, Utils as Utils_ } from '../slick.core';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n\nvar localStorageWrapper = function () {\n    var localStorage = window.localStorage;\n\n    if (typeof localStorage === 'undefined') {\n      console.error('localStorage is not available. slickgrid statepersistor disabled.');\n    }\n\n    return {\n      get: function(key) {\n        return new Promise((resolve, reject) => {\n          if (!localStorage) {\n            reject(\"missing localStorage\");\n            return\n          }\n          try {\n            var d = localStorage.getItem(key);\n            if (d) {\n              return resolve(JSON.parse(d));\n            }\n            resolve({});\n          } catch (exc) {\n            reject(exc);\n          }\n        });\n      },\n      set: function(key, obj) {\n        if (!localStorage) return;\n        if (typeof obj !== 'undefined') {\n          obj = JSON.stringify(obj);\n        }\n        localStorage.setItem(key, obj);\n      }\n    };\n  };\n\n  var defaults = {\n    key_prefix: \"slickgrid:\",\n    storage: new localStorageWrapper(),\n    scrollRowIntoView: true\n  };\n\nexport function State(options) {\n  options = Utils.extend(true, {}, defaults, options);\n\n    var _grid, _cid,\n      _store = options.storage,\n      onStateChanged = new SlickEvent();\n\n    var userData = {\n      state: null,\n      current: null\n    };\n\n    function init(grid) {\n      _grid = grid;\n      _cid = grid.cid || options.cid;\n      if (_cid) {\n        _grid.onColumnsResized.subscribe(save);\n        _grid.onColumnsReordered.subscribe(save);\n        _grid.onSort.subscribe(save);\n      } else {\n        console.warn(\"grid has no client id. state persisting is disabled.\");\n      }\n    }\n\n    function destroy() {\n      _grid.onSort.unsubscribe(save);\n      _grid.onColumnsReordered.unsubscribe(save);\n      _grid.onColumnsResized.unsubscribe(save);\n      save();\n    }\n\n    function save() {\n      if (_cid && _store) {\n        var state = {\n          sortcols: getSortColumns(),\n          viewport: _grid.getViewport(),\n          columns: getColumns(),\n          userData: null\n        };\n\n        state.userData = userData.current;\n\n        setUserDataFromState(state.userData);\n\n        onStateChanged.notify(state);\n        return _store.set(options.key_prefix + _cid, state);\n      }\n    }\n\n    function restore() {\n      return new Promise((resolve, reject) => {\n        if (!_cid) {\n          reject(\"missing client id\");\n          return;\n        }\n        if (!_store) {\n          reject(\"missing store\");\n          return;\n        }\n\n        _store.get(options.key_prefix + _cid)\n          .then(function success(state) {\n            if (state) {\n              if (state.sortcols) {\n                _grid.setSortColumns(state.sortcols || []);\n              }\n              if (state.viewport && options.scrollRowIntoView) {\n                _grid.scrollRowIntoView(state.viewport.top, true);\n              }\n              if (state.columns) {\n                var defaultColumns = options.defaultColumns;\n                if (defaultColumns) {\n                  var defaultColumnsLookup = {};\n                  defaultColumns.forEach(function (colDef) {\n                    defaultColumnsLookup[colDef.id] = colDef;\n                  });\n\n                  var cols = [];\n                  (state.columns || []).forEach(function (columnDef) {\n                    if (defaultColumnsLookup[columnDef.id]) {\n                      cols.push(Utils.extend(true, {}, defaultColumnsLookup[columnDef.id], {\n                        width: columnDef.width,\n                        headerCssClass: columnDef.headerCssClass\n                      }));\n                    }\n                  });\n\n                  state.columns = cols;\n                }\n\n                _grid.setColumns(state.columns);\n              }\n              setUserDataFromState(state.userData);\n            }\n            resolve(state);\n          })\n          .catch(function (e) {\n            reject(e);\n          })\n      });\n    }\n\n    /**\n     * allows users to add their own data to the grid state\n     * this function does not trigger the save() function, so the actual act of writing the state happens in save()\n     * therefore, it's necessary to call save() function after setting user-data\n     *\n     * @param data\n     * @return {State}\n     */\n    function setUserData(data){\n      userData.current = data;\n\n      return this;\n    }\n\n    /**\n     *\n     * @internal\n     * @param data\n     * @return {State}\n     */\n    function setUserDataFromState(data){\n      userData.state = data;\n      return setUserData(data);\n    }\n\n    /**\n     * returns current value of user-data\n     * @return {Object}\n     */\n    function getUserData(){\n      return userData.current;\n    }\n\n    /**\n\t   * returns user-data found in saved state\n\t   *\n\t   * @return {Object}\n\t   */\n    function getStateUserData(){\n      return userData.state;\n    }\n\n    /**\n     * sets user-data to the value read from state\n     *\n     * @return {State}\n     */\n    function resetUserData(){\n      userData.current = userData.state;\n\n      return this;\n    }\n\n    function getColumns() {\n      return _grid.getColumns().map(function (col) {\n        return {\n          id: col.id,\n          width: col.width\n        };\n      });\n    }\n\n    function getSortColumns() {\n      var sortCols = _grid.getSortColumns();\n      return sortCols;\n    }\n\n    function reset(){\n      _store.set(options.key_prefix + _cid, {});\n      setUserDataFromState(null);\n    }\n    /*\n     *  API\n     */\n  Utils.extend(this, {\n      \"init\": init,\n      \"destroy\": destroy,\n      \"save\": save,\n      \"setUserData\": setUserData,\n      \"resetUserData\": resetUserData,\n      \"getUserData\": getUserData,\n      \"getStateUserData\": getStateUserData,\n      \"restore\": restore,\n      \"onStateChanged\": onStateChanged,\n      \"reset\": reset\n    });\n  }\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      State\n    }\n  });\n}\n\n"],
  "mappings": "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",
  "names": ["parents", "noop", "offset", "SlickGroup", "keyCode", "Utils", "SlickEvent", "SlickEventData", "SlickGroup", "SlickGroupTotals", "Utils", "SlickGroupItemMetadataProvider", "keyCode", "Utils", "Utils", "BindingEventService", "ColAutosizeMode", "SlickEvent", "SlickEventData", "GlobalEditorLock", "GridAutosizeColsMode", "keyCode", "preClickClassName", "SlickRange", "RowSelectionMode", "ValueFilterMode", "Utils", "WidthEvalMode", "Draggable", "MouseWheel", "Resizable", "width", "height", "classname", "i", "offset", "BindingEventService", "SlickEvent", "Utils", "show", "BindingEventService", "SlickEvent", "Utils", "BindingEventService", "GlobalEditorLock", "Utils", "Utils", "keyCode", "SlickEvent", "SlickEvent", "keyCode", "SlickEvent", "SlickEvent", "BindingEventService", "SlickEvent", "SlickEventData", "EventHandler", "Utils", "width", "Utils", "show", "hide", "SlickEvent", "EventHandler", "SlickRange", "Draggable", "CellRangeDecorator", "Utils", "SlickEvent", "EventData", "SlickRange", "CellRangeSelector", "Utils", "BindingEventService", "EventHandler", "Utils", "options", "e", "BindingEventService", "SlickEvent", "SlickEventData", "EventHandler", "Utils", "width", "e", "SlickEvent", "EventHandler", "Utils", "EventHandler", "Utils", "BindingEventService", "SlickEvent", "EventHandler", "Utils", "BindingEventService", "SlickEvent", "EventHandler", "Utils", "BindingEventService", "SlickEvent", "SlickEventHandler", "Utils", "BindingEventService", "SlickEvent", "Utils", "SlickEvent", "EventHandler", "Utils", "options", "offset", "SlickEvent", "EventHandler", "Utils", "EventData", "EventHandler", "keyCode", "SlickEvent", "SlickRange", "Draggable", "CellRangeDecorator", "CellRangeSelector", "Utils", "SlickEvent", "Utils"]
}
