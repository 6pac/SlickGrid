{
  "version": 3,
  "sources": ["../../../../cypress/e2e/example-multi-grid-basic.cy.ts"],
  "sourcesContent": ["/// <reference types=\"Cypress\" />\n\ndescribe('Example - Multi Grid on a Page', () => {\n  const fullTitles = ['Title', 'Duration', '% Complete', 'Start', 'Finish', 'Effort Driven'];\n\n  beforeEach(() => {\n    // create a console.log spy for later use\n    cy.window().then((win) => {\n      cy.spy(win.console, \"log\");\n    });\n  });\n\n  it('should display Example Multi-grid Basic', () => {\n    cy.visit(`${Cypress.config('baseExampleUrl')}/example-multi-grid-basic.html`);\n    cy.get('h2').should('contain', 'Demonstrates:');\n    cy.contains('Two basic Grids with minimal configuration');\n  });\n\n  it('should have exact same Column Titles in both grids', () => {\n    cy.get('#myGrid01')\n      .find('.slick-header-columns')\n      .children()\n      .each(($child, index) => expect($child.text()).to.eq(fullTitles[index]));\n\n    cy.get('#myGrid02')\n      .find('.slick-header-columns')\n      .children()\n      .each(($child, index) => expect($child.text()).to.eq(fullTitles[index]));\n  });\n\n  it('should open the Grid Menu on 1st Grid and expect all Columns to be checked', () => {\n    let gridUid = '';\n    cy.get('#myGrid01')\n      .find('button.slick-gridmenu-button')\n      .click({ force: true });\n\n    cy.get('#myGrid01')\n      .should(($grid) => {\n        const classes = $grid.prop('className').split(' ');\n        gridUid = classes.find(className => /slickgrid_.*/.test(className));\n        expect(gridUid).to.not.be.null;\n      })\n      .then(() => {\n        cy.get(`.slick-gridmenu.${gridUid}`)\n          .find('.slick-gridmenu-list')\n          .children('li')\n          .each(($child, index) => {\n            if (index <= 5) {\n              const $input = $child.children('input');\n              const $label = $child.children('label');\n              expect($input.prop('checked')).to.eq(true);\n              expect($label.text()).to.eq(fullTitles[index]);\n            }\n          });\n      });\n  });\n\n  it('should then hide \"Title\" column from same 1st Grid and expect the column to be removed from 1st Grid', () => {\n    const newColumnList = ['Duration', '% Complete', 'Start', 'Finish', 'Effort Driven'];\n    cy.get('#myGrid01')\n      .get('.slick-gridmenu:visible')\n      .find('.slick-gridmenu-list')\n      .children('li:visible:nth(0)')\n      .children('label')\n      .should('contain', 'Title')\n      .click({ force: true });\n\n    cy.get('#myGrid01')\n      .get('.slick-gridmenu:visible')\n      .find('span.close')\n      .click({ force: true });\n\n    cy.get('#myGrid01')\n      .find('.slick-header-columns')\n      .children()\n      .each(($child, index) => expect($child.text()).to.eq(newColumnList[index]));\n  });\n\n  it('should open the Grid Menu off 2nd Grid and expect all Columns to still be all checked', () => {\n    let gridUid = '';\n    cy.get('#myGrid02')\n      .find('button.slick-gridmenu-button')\n      .click({ force: true });\n\n    cy.get('#myGrid02')\n      .should(($grid) => {\n        const classes = $grid.prop('className').split(' ');\n        gridUid = classes.find(className => /slickgrid_.*/.test(className));\n        expect(gridUid).to.not.be.null;\n      })\n      .then(() => {\n        cy.get(`.slick-gridmenu.${gridUid}`)\n          .find('.slick-gridmenu-list')\n          .children('li')\n          .each(($child, index) => {\n            if (index <= 5) {\n              const $input = $child.children('input');\n              const $label = $child.children('label');\n              expect($input.prop('checked')).to.eq(true);\n              expect($label.text()).to.eq(fullTitles[index]);\n            }\n          });\n      });\n  });\n\n  it('should then hide \"% Complete\" column from this same 2nd Grid and expect the column to be removed from 2nd Grid', () => {\n    const newColumnList = ['Title', 'Duration', 'Start', 'Finish', 'Effort Driven'];\n    cy.get('#myGrid02')\n      .get('.slick-gridmenu:visible')\n      .find('.slick-gridmenu-list')\n      .children('li:visible:nth(2)')\n      .children('label')\n      .should('contain', '% Complete')\n      .click({ force: true });\n\n    cy.get('#myGrid02')\n      .get('.slick-gridmenu:visible')\n      .find('span.close')\n      .click({ force: true });\n\n    cy.get('#myGrid02')\n      .find('.slick-header-columns')\n      .children()\n      .each(($child, index) => expect($child.text()).to.eq(newColumnList[index]));\n  });\n\n  it('should go back to 1st Grid and open its Grid Menu and we expect this grid to stil have the \"Title\" column be hidden (unchecked)', () => {\n    cy.get('#myGrid01')\n      .find('button.slick-gridmenu-button')\n      .click({ force: true });\n\n    cy.get('.slick-gridmenu-list')\n      .children('li')\n      .each(($child, index) => {\n        if (index <= 5) {\n          const $input = $child.children('input');\n          const $label = $child.children('label');\n          if ($label.text() === 'Title') {\n            expect($input.prop('checked')).to.eq(false);\n          } else {\n            expect($input.prop('checked')).to.eq(true);\n          }\n          expect($label.text()).to.eq(fullTitles[index]);\n        }\n      });\n  });\n\n  it('should hide \"Start\" column from 1st Grid and expect to have 2 hidden columns (Title, Start)', () => {\n    const newColumnList = ['Duration', '% Complete', 'Finish', 'Effort Driven'];\n    cy.get('#myGrid01')\n      .get('.slick-gridmenu:visible')\n      .find('.slick-gridmenu-list')\n      .children('li:visible:nth(3)')\n      .children('label')\n      .should('contain', 'Start')\n      .click({ force: true });\n\n    cy.get('#myGrid01')\n      .get('.slick-gridmenu:visible')\n      .find('span.close')\n      .click({ force: true });\n\n    cy.get('#myGrid01')\n      .find('.slick-header-columns')\n      .children()\n      .each(($child, index) => expect($child.text()).to.eq(newColumnList[index]));\n  });\n\n  it('should open Column Picker of 2nd Grid and show the \"% Complete\" column back to visible', () => {\n    cy.get('#myGrid02')\n      .find('.slick-header-column')\n      .first()\n      .trigger('mouseover')\n      .trigger('contextmenu')\n      .invoke('show');\n\n    cy.get('.slick-columnpicker')\n      .find('.slick-columnpicker-list')\n      .children()\n      .each(($child, index) => {\n        if (index <= 5) {\n          expect($child.text()).to.eq(fullTitles[index]);\n        }\n      });\n\n    cy.get('.slick-columnpicker')\n      .find('.slick-columnpicker-list')\n      .children('li:nth-child(3)')\n      .children('label')\n      .should('contain', '% Complete')\n      .click();\n\n    cy.get('#myGrid02')\n      .find('.slick-header-columns')\n      .children()\n      .each(($child, index) => {\n        if (index <= 5) {\n          expect($child.text()).to.eq(fullTitles[index]);\n        }\n      });\n\n    cy.get('#myGrid02')\n      .get('.slick-columnpicker:visible')\n      .find('span.close')\n      .trigger('click')\n      .click();\n  });\n\n  it('should open the Grid Menu on 2nd Grid and expect all Columns to be checked', () => {\n    let gridUid = '';\n    cy.get('#myGrid02')\n      .find('button.slick-gridmenu-button')\n      .click({ force: true });\n\n    cy.get('#myGrid02')\n      .should(($grid) => {\n        const classes = $grid.prop('className').split(' ');\n        gridUid = classes.find(className => /slickgrid_.*/.test(className));\n        expect(gridUid).to.not.be.null;\n      })\n      .then(() => {\n        cy.get(`.slick-gridmenu.${gridUid}`)\n          .find('.slick-gridmenu-list')\n          .children('li')\n          .each(($child, index) => {\n            if (index <= 5) {\n              const $input = $child.children('input');\n              const $label = $child.children('label');\n              expect($input.prop('checked')).to.eq(true);\n              expect($label.text()).to.eq(fullTitles[index]);\n            }\n          });\n      });\n  });\n\n  it('should still expect 1st Grid to be unchanged from previous state and still have only 4 columns shown', () => {\n    const newColumnList = ['Duration', '% Complete', 'Finish', 'Effort Driven'];\n\n    cy.get('#myGrid01')\n      .find('.slick-header-columns')\n      .children()\n      .each(($child, index) => expect($child.text()).to.eq(newColumnList[index]));\n  });\n\n  it('should open the Grid Menu on 1st Grid and also expect to only have 4 columns checked (visible)', () => {\n    let gridUid = '';\n    cy.get('#myGrid01')\n      .find('button.slick-gridmenu-button')\n      .click({ force: true });\n\n    cy.get('#myGrid01')\n      .should(($grid) => {\n        const classes = $grid.prop('className').split(' ');\n        gridUid = classes.find(className => /slickgrid_.*/.test(className));\n        expect(gridUid).to.not.be.null;\n      })\n      .then(() => {\n        cy.get(`.slick-gridmenu.${gridUid}`)\n          .find('.slick-gridmenu-list')\n          .children('li')\n          .each(($child, index) => {\n            if (index <= 5) {\n              const $input = $child.children('input');\n              const $label = $child.children('label');\n              if ($label.text() === 'Title' || $label.text() === 'Start') {\n                expect($input.prop('checked')).to.eq(false);\n              } else {\n                expect($input.prop('checked')).to.eq(true);\n              }\n              expect($label.text()).to.eq(fullTitles[index]);\n            }\n          });\n      });\n\n    cy.get('#myGrid01')\n      .get('.slick-gridmenu:visible')\n      .find('span.close')\n      .click({ force: true });\n  });\n});\n"],
  "mappings": "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",
  "names": []
}
