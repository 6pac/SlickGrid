{
  "version": 3,
  "sources": ["../../src/slick.groupitemmetadataprovider.ts"],
  "sourcesContent": ["import { type SlickEventData, SlickGroup as SlickGroup_, keyCode as keyCode_, Utils as Utils_ } from './slick.core.js';\r\nimport type { Column, GroupItemMetadataProviderOption, GroupingFormatterItem, ItemMetadata, SlickPlugin } from './models/index.js';\r\nimport type { SlickGrid } from './slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst keyCode = IIFE_ONLY ? Slick.keyCode : keyCode_;\r\nconst SlickGroup = IIFE_ONLY ? Slick.Group : SlickGroup_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/**\r\n * Provides item metadata for group (Slick.Group) and totals (Slick.Totals) rows produced by the DataView.\r\n * This metadata overrides the default behavior and formatting of those rows so that they appear and function\r\n * correctly when processed by the grid.\r\n *\r\n * This class also acts as a grid plugin providing event handlers to expand & collapse groups.\r\n * If \"grid.registerPlugin(...)\" is not called, expand & collapse will not work.\r\n *\r\n * @class GroupItemMetadataProvider\r\n * @module Data\r\n * @namespace Slick.Data\r\n * @constructor\r\n * @param inputOptions\r\n */\r\nexport class SlickGroupItemMetadataProvider implements SlickPlugin {\r\n  pluginName = 'GroupItemMetadataProvider' as const;\r\n\r\n  protected _grid!: SlickGrid;\r\n  protected _options: GroupItemMetadataProviderOption;\r\n  protected _defaults: GroupItemMetadataProviderOption = {\r\n    checkboxSelect: false,\r\n    checkboxSelectCssClass: 'slick-group-select-checkbox',\r\n    checkboxSelectPlugin: null,\r\n    groupCssClass: 'slick-group',\r\n    groupTitleCssClass: 'slick-group-title',\r\n    totalsCssClass: 'slick-group-totals',\r\n    groupFocusable: true,\r\n    totalsFocusable: false,\r\n    toggleCssClass: 'slick-group-toggle',\r\n    toggleExpandedCssClass: 'expanded',\r\n    toggleCollapsedCssClass: 'collapsed',\r\n    enableExpandCollapse: true,\r\n    groupFormatter: this.defaultGroupCellFormatter.bind(this),\r\n    totalsFormatter: this.defaultTotalsCellFormatter.bind(this),\r\n    includeHeaderTotals: false\r\n  };\r\n\r\n  constructor(inputOptions?: GroupItemMetadataProviderOption) {\r\n    this._options = Utils.extend<GroupItemMetadataProviderOption>(true, {}, this._defaults, inputOptions);\r\n  }\r\n\r\n  /** Getter of SlickGrid DataView object */\r\n  protected get dataView(): any {\r\n    return this._grid?.getData?.() ?? {} as any;\r\n  }\r\n\r\n  getOptions() {\r\n    return this._options;\r\n  }\r\n\r\n  setOptions(inputOptions: GroupItemMetadataProviderOption) {\r\n    Utils.extend(true, this._options, inputOptions);\r\n  }\r\n\r\n  protected defaultGroupCellFormatter(_row: number, _cell: number, _value: any, _columnDef: Column, item: any) {\r\n    if (!this._options.enableExpandCollapse) {\r\n      return item.title;\r\n    }\r\n\r\n    const indentation = `${item.level * 15}px`;\r\n    const toggleClass = item.collapsed ? this._options.toggleCollapsedCssClass : this._options.toggleExpandedCssClass;\r\n\r\n    // use a DocumentFragment to avoid creating an extra div container\r\n    const containerElm = document.createDocumentFragment();\r\n\r\n    // 1. optional row checkbox span to select the entire group rows\r\n    if (this._options.checkboxSelect) {\r\n      containerElm.appendChild(Utils.createDomElement('span', { className: `${this._options.checkboxSelectCssClass} ${item.selectChecked ? 'checked' : 'unchecked'}` }));\r\n    }\r\n\r\n    // 2. group toggle span\r\n    containerElm.appendChild(Utils.createDomElement('span', {\r\n      className: `${this._options.toggleCssClass} ${toggleClass}`,\r\n      ariaExpanded: String(!item.collapsed),\r\n      style: { marginLeft: indentation }\r\n    }));\r\n\r\n    // 3. group title span\r\n    const groupTitleElm = Utils.createDomElement('span', { className: this._options.groupTitleCssClass || '' });\r\n    groupTitleElm.setAttribute('level', item.level);\r\n    (item.title instanceof HTMLElement)\r\n      ? groupTitleElm.appendChild(item.title)\r\n      : this._grid.applyHtmlCode(groupTitleElm, item.title ?? '');\r\n    containerElm.appendChild(groupTitleElm);\r\n\r\n    return containerElm;\r\n  }\r\n\r\n  protected defaultTotalsCellFormatter(_row: number, _cell: number, _value: any, columnDef: Column, item: any, grid: SlickGrid) {\r\n    return (columnDef?.groupTotalsFormatter?.(item, columnDef, grid)) ?? '';\r\n  }\r\n\r\n\r\n  init(grid: SlickGrid) {\r\n    this._grid = grid;\r\n    this._grid.onClick.subscribe(this.handleGridClick.bind(this));\r\n    this._grid.onKeyDown.subscribe(this.handleGridKeyDown.bind(this));\r\n  }\r\n\r\n  destroy() {\r\n    if (this._grid) {\r\n      this._grid.onClick.unsubscribe(this.handleGridClick.bind(this));\r\n      this._grid.onKeyDown.unsubscribe(this.handleGridKeyDown.bind(this));\r\n    }\r\n  }\r\n\r\n  protected handleGridClick(e: SlickEventData, args: { row: number; cell: number; grid: SlickGrid; }) {\r\n    const target = e.target as HTMLElement;\r\n    const item = this._grid.getDataItem(args.row);\r\n    if (item && item instanceof SlickGroup && target.classList.contains(this._options.toggleCssClass || '')) {\r\n      this.handleDataViewExpandOrCollapse(item);\r\n      e.stopImmediatePropagation();\r\n      e.preventDefault();\r\n    }\r\n    if (item && item instanceof SlickGroup && target.classList.contains(this._options.checkboxSelectCssClass || '')) {\r\n      item.selectChecked = !item.selectChecked;\r\n      target.classList.remove((item.selectChecked ? 'unchecked' : 'checked'));\r\n      target.classList.add((item.selectChecked ? 'checked' : 'unchecked'));\r\n      // get rowIndexes array\r\n      const rowIndexes = this.dataView.mapItemsToRows(item.rows);\r\n      if (item.selectChecked) {\r\n        this._options.checkboxSelectPlugin.selectRows(rowIndexes);\r\n      } else {\r\n        this._options.checkboxSelectPlugin.deSelectRows(rowIndexes);\r\n      }\r\n    }\r\n  }\r\n\r\n  // TODO:  add -/+ handling\r\n  protected handleGridKeyDown(e: SlickEventData) {\r\n    if (this._options.enableExpandCollapse && (e.which === keyCode.SPACE)) {\r\n      const activeCell = this._grid.getActiveCell();\r\n      if (activeCell) {\r\n        const item = this._grid.getDataItem(activeCell.row);\r\n        if (item && item instanceof SlickGroup) {\r\n          this.handleDataViewExpandOrCollapse(item);\r\n          e.stopImmediatePropagation();\r\n          e.preventDefault();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  protected handleDataViewExpandOrCollapse(item: any) {\r\n    const range = this._grid.getRenderedRange();\r\n    this.dataView.setRefreshHints({\r\n      ignoreDiffsBefore: range.top,\r\n      ignoreDiffsAfter: range.bottom + 1\r\n    });\r\n\r\n    if (item.collapsed) {\r\n      this.dataView.expandGroup(item.groupingKey);\r\n    } else {\r\n      this.dataView.collapseGroup(item.groupingKey);\r\n    }\r\n  }\r\n\r\n  getGroupRowMetadata(item: GroupingFormatterItem, _row?: number, _cell?: number): ItemMetadata {\r\n    const groupLevel = item?.level;\r\n    return {\r\n      selectable: false,\r\n      focusable: this._options.groupFocusable,\r\n      cssClasses: `${this._options.groupCssClass} slick-group-level-${groupLevel}`,\r\n      formatter: (this._options.includeHeaderTotals && this._options.totalsFormatter) || undefined,\r\n      columns: {\r\n        0: {\r\n          colspan: this._options.includeHeaderTotals ? '1' : '*',\r\n          formatter: this._options.groupFormatter,\r\n          editor: null\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  getTotalsRowMetadata(item: { group: GroupingFormatterItem }, _row?: number, _cell?: number): ItemMetadata | null {\r\n    const groupLevel = item?.group?.level;\r\n    return {\r\n      selectable: false,\r\n      focusable: this._options.totalsFocusable,\r\n      cssClasses: `${this._options.totalsCssClass} slick-group-level-${groupLevel}`,\r\n      formatter: this._options.totalsFormatter,\r\n      editor: null\r\n    };\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  window.Slick.Data = window.Slick.Data || {};\r\n  window.Slick.Data.GroupItemMetadataProvider = SlickGroupItemMetadataProvider;\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
