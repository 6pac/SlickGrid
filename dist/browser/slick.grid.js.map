{
  "version": 3,
  "sources": ["import-ns:./slick.core.js", "import-ns:./slick.interactions.js", "../../src/slick.grid.js"],
  "sourcesContent": ["// empty string, do nothing", "// empty string, do nothing", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SlickGrid = void 0;\nvar slick_core_1 = require(\"./slick.core\");\nvar slick_interactions_1 = require(\"./slick.interactions\");\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nvar BindingEventService = IIFE_ONLY ? Slick.BindingEventService : slick_core_1.BindingEventService;\nvar ColAutosizeMode = IIFE_ONLY ? Slick.ColAutosizeMode : slick_core_1.ColAutosizeMode;\nvar SlickEvent = IIFE_ONLY ? Slick.Event : slick_core_1.SlickEvent;\nvar SlickEventData = IIFE_ONLY ? Slick.EventData : slick_core_1.SlickEventData;\nvar GlobalEditorLock = IIFE_ONLY ? Slick.GlobalEditorLock : slick_core_1.GlobalEditorLock;\nvar GridAutosizeColsMode = IIFE_ONLY ? Slick.GridAutosizeColsMode : slick_core_1.GridAutosizeColsMode;\nvar keyCode = IIFE_ONLY ? Slick.keyCode : slick_core_1.keyCode;\nvar preClickClassName = IIFE_ONLY ? Slick.preClickClassName : slick_core_1.preClickClassName;\nvar SlickRange = IIFE_ONLY ? Slick.Range : slick_core_1.SlickRange;\nvar RowSelectionMode = IIFE_ONLY ? Slick.RowSelectionMode : slick_core_1.RowSelectionMode;\nvar ValueFilterMode = IIFE_ONLY ? Slick.ValueFilterMode : slick_core_1.ValueFilterMode;\nvar Utils = IIFE_ONLY ? Slick.Utils : slick_core_1.Utils;\nvar WidthEvalMode = IIFE_ONLY ? Slick.WidthEvalMode : slick_core_1.WidthEvalMode;\nvar Draggable = IIFE_ONLY ? Slick.Draggable : slick_interactions_1.Draggable;\nvar MouseWheel = IIFE_ONLY ? Slick.MouseWheel : slick_interactions_1.MouseWheel;\nvar Resizable = IIFE_ONLY ? Slick.Resizable : slick_interactions_1.Resizable;\nvar SlickGrid = /** @class */ (function () {\n    /**\n     * Creates a new instance of the grid.\n     * @class SlickGrid\n     * @constructor\n     * @param {Node} container - Container node to create the grid in.\n     * @param {Array|Object} data - An array of objects for databinding.\n     * @param {Array<C>} columns - An array of column definitions.\n     * @param {Object} [options] - Grid this._options.\n     **/\n    function SlickGrid(container, data, columns, options) {\n        this.container = container;\n        this.data = data;\n        this.columns = columns;\n        this.options = options;\n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // Public API\n        this.slickGridVersion = '4.0.1';\n        /** optional grid state clientId */\n        this.cid = '';\n        // Events\n        this.onActiveCellChanged = new SlickEvent();\n        this.onActiveCellPositionChanged = new SlickEvent();\n        this.onAddNewRow = new SlickEvent();\n        this.onAutosizeColumns = new SlickEvent();\n        this.onBeforeAppendCell = new SlickEvent();\n        this.onBeforeCellEditorDestroy = new SlickEvent();\n        this.onBeforeColumnsResize = new SlickEvent();\n        this.onBeforeDestroy = new SlickEvent();\n        this.onBeforeEditCell = new SlickEvent();\n        this.onBeforeFooterRowCellDestroy = new SlickEvent();\n        this.onBeforeHeaderCellDestroy = new SlickEvent();\n        this.onBeforeHeaderRowCellDestroy = new SlickEvent();\n        this.onBeforeSetColumns = new SlickEvent();\n        this.onBeforeSort = new SlickEvent();\n        this.onBeforeUpdateColumns = new SlickEvent();\n        this.onCellChange = new SlickEvent();\n        this.onCellCssStylesChanged = new SlickEvent();\n        this.onClick = new SlickEvent();\n        this.onColumnsReordered = new SlickEvent();\n        this.onColumnsDrag = new SlickEvent();\n        this.onColumnsResized = new SlickEvent();\n        this.onColumnsResizeDblClick = new SlickEvent();\n        this.onCompositeEditorChange = new SlickEvent();\n        this.onContextMenu = new SlickEvent();\n        this.onDrag = new SlickEvent();\n        this.onDblClick = new SlickEvent();\n        this.onDragInit = new SlickEvent();\n        this.onDragStart = new SlickEvent();\n        this.onDragEnd = new SlickEvent();\n        this.onFooterClick = new SlickEvent();\n        this.onFooterContextMenu = new SlickEvent();\n        this.onFooterRowCellRendered = new SlickEvent();\n        this.onHeaderCellRendered = new SlickEvent();\n        this.onHeaderClick = new SlickEvent();\n        this.onHeaderContextMenu = new SlickEvent();\n        this.onHeaderMouseEnter = new SlickEvent();\n        this.onHeaderMouseLeave = new SlickEvent();\n        this.onHeaderRowCellRendered = new SlickEvent();\n        this.onHeaderRowMouseEnter = new SlickEvent();\n        this.onHeaderRowMouseLeave = new SlickEvent();\n        this.onKeyDown = new SlickEvent();\n        this.onMouseEnter = new SlickEvent();\n        this.onMouseLeave = new SlickEvent();\n        this.onRendered = new SlickEvent();\n        this.onScroll = new SlickEvent();\n        this.onSelectedRowsChanged = new SlickEvent();\n        this.onSetOptions = new SlickEvent();\n        this.OnActivateChangedOptions = new SlickEvent();\n        this.onSort = new SlickEvent();\n        this.onValidationError = new SlickEvent();\n        this.onViewportChanged = new SlickEvent();\n        this.canvas = null;\n        this.canvas_context = null;\n        this._defaults = {\n            alwaysShowVerticalScroll: false,\n            alwaysAllowHorizontalScroll: false,\n            explicitInitialization: false,\n            rowHeight: 25,\n            defaultColumnWidth: 80,\n            enableAddRow: false,\n            leaveSpaceForNewRows: false,\n            editable: false,\n            autoEdit: true,\n            autoCommitEdit: false,\n            suppressActiveCellChangeOnEdit: false,\n            enableCellNavigation: true,\n            enableColumnReorder: true,\n            asyncEditorLoading: false,\n            asyncEditorLoadDelay: 100,\n            forceFitColumns: false,\n            enableAsyncPostRender: false,\n            asyncPostRenderDelay: 50,\n            enableAsyncPostRenderCleanup: false,\n            asyncPostRenderCleanupDelay: 40,\n            auto: false,\n            editorLock: GlobalEditorLock,\n            showColumnHeader: true,\n            showHeaderRow: false,\n            headerRowHeight: 25,\n            createFooterRow: false,\n            showFooterRow: false,\n            footerRowHeight: 25,\n            createPreHeaderPanel: false,\n            showPreHeaderPanel: false,\n            preHeaderPanelHeight: 25,\n            showTopPanel: false,\n            topPanelHeight: 25,\n            formatterFactory: null,\n            editorFactory: null,\n            cellFlashingCssClass: 'flashing',\n            selectedCellCssClass: 'selected',\n            multiSelect: true,\n            enableTextSelectionOnCells: false,\n            dataItemColumnValueExtractor: null,\n            frozenBottom: false,\n            frozenColumn: -1,\n            frozenRow: -1,\n            frozenRightViewportMinWidth: 100,\n            fullWidthRows: false,\n            multiColumnSort: false,\n            numberedMultiColumnSort: false,\n            tristateMultiColumnSort: false,\n            sortColNumberInSeparateSpan: false,\n            defaultFormatter: this.defaultFormatter,\n            forceSyncScrolling: false,\n            addNewRowCssClass: 'new-row',\n            preserveCopiedSelectionOnPaste: false,\n            showCellSelection: true,\n            viewportClass: undefined,\n            minRowBuffer: 3,\n            emulatePagingWhenScrolling: true,\n            editorCellNavOnLRKeys: false,\n            enableMouseWheelScrollHandler: true,\n            doPaging: true,\n            autosizeColsMode: GridAutosizeColsMode.LegacyOff,\n            autosizeColPaddingPx: 4,\n            scrollRenderThrottling: 50,\n            autosizeTextAvgToMWidthRatio: 0.75,\n            viewportSwitchToScrollModeWidthPercent: undefined,\n            viewportMinWidthPx: undefined,\n            viewportMaxWidthPx: undefined,\n            suppressCssChangesOnHiddenInit: false,\n            ffMaxSupportedCssHeight: 6000000,\n            maxSupportedCssHeight: 1000000000,\n            sanitizer: undefined,\n            logSanitizedHtml: false,\n            mixinDefaults: false\n        };\n        this._columnDefaults = {\n            name: '',\n            resizable: true,\n            sortable: false,\n            minWidth: 30,\n            maxWidth: undefined,\n            rerenderOnResize: false,\n            headerCssClass: null,\n            defaultSortAsc: true,\n            focusable: true,\n            selectable: true,\n            hidden: false\n        };\n        this._columnAutosizeDefaults = {\n            ignoreHeaderText: false,\n            colValueArray: undefined,\n            allowAddlPercent: undefined,\n            formatterOverride: undefined,\n            autosizeMode: ColAutosizeMode.ContentIntelligent,\n            rowSelectionModeOnInit: undefined,\n            rowSelectionMode: RowSelectionMode.FirstNRows,\n            rowSelectionCount: 100,\n            valueFilterMode: ValueFilterMode.None,\n            widthEvalMode: WidthEvalMode.Auto,\n            sizeToRemaining: undefined,\n            widthPx: undefined,\n            contentSizePx: 0,\n            headerWidthPx: 0,\n            colDataTypeOf: undefined\n        };\n        this.page = 0; // current page\n        this.offset = 0; // current page offset\n        this.vScrollDir = 1;\n        this._bindingEventService = new BindingEventService();\n        this.initialized = false;\n        this.uid = \"slickgrid_\".concat(Math.round(1000000 * Math.random()));\n        this._groupHeaders = [];\n        this._headerScroller = [];\n        this._headers = [];\n        this._boundAncestors = [];\n        this.viewportH = 0;\n        this.viewportW = 0;\n        this.canvasWidth = 0;\n        this.canvasWidthL = 0;\n        this.canvasWidthR = 0;\n        this.headersWidth = 0;\n        this.headersWidthL = 0;\n        this.headersWidthR = 0;\n        this.viewportHasHScroll = false;\n        this.viewportHasVScroll = false;\n        this.headerColumnWidthDiff = 0;\n        this.headerColumnHeightDiff = 0; // border+padding\n        this.cellWidthDiff = 0;\n        this.cellHeightDiff = 0;\n        this.hasFrozenRows = false;\n        this.frozenRowsHeight = 0;\n        this.actualFrozenRow = -1;\n        this.paneTopH = 0;\n        this.paneBottomH = 0;\n        this.viewportTopH = 0;\n        this.viewportBottomH = 0;\n        this.topPanelH = 0;\n        this.headerRowH = 0;\n        this.footerRowH = 0;\n        this.tabbingDirection = 1;\n        this.activeCellNode = null;\n        this.currentEditor = null;\n        this.rowsCache = {};\n        this.renderedRows = 0;\n        this.numVisibleRows = 0;\n        this.prevScrollTop = 0;\n        this.scrollTop = 0;\n        this.lastRenderedScrollTop = 0;\n        this.lastRenderedScrollLeft = 0;\n        this.prevScrollLeft = 0;\n        this.scrollLeft = 0;\n        this.selectedRows = [];\n        this.plugins = [];\n        this.cellCssClasses = {};\n        this.columnsById = {};\n        this.sortColumns = [];\n        this.columnPosLeft = [];\n        this.columnPosRight = [];\n        this.pagingActive = false;\n        this.pagingIsLastPage = false;\n        // async call handles\n        this.h_editorLoader = null;\n        this.h_render = null;\n        this.h_postrender = null;\n        this.h_postrenderCleanup = null;\n        this.postProcessedRows = {};\n        this.postProcessToRow = null;\n        this.postProcessFromRow = null;\n        this.postProcessedCleanupQueue = [];\n        this.postProcessgroupId = 0;\n        // perf counters\n        this.counter_rows_rendered = 0;\n        this.counter_rows_removed = 0;\n        // store css attributes if display:none is active in container or parent\n        this.cssShow = { position: 'absolute', visibility: 'hidden', display: 'block' };\n        this._hiddenParents = [];\n        this.oldProps = [];\n        this.enforceFrozenRowHeightRecalc = false;\n        this.columnResizeDragging = false;\n        this.slickDraggableInstance = null;\n        this.slickMouseWheelInstances = [];\n        this.slickResizableInstances = [];\n        this.logMessageCount = 0;\n        this.logMessageMaxCount = 30;\n        this.initialize();\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // Initialization\n    /** Initializes the grid. */\n    SlickGrid.prototype.init = function () {\n        this.finishInitialization();\n    };\n    SlickGrid.prototype.initialize = function () {\n        var _this = this;\n        if (typeof this.container === 'string') {\n            this._container = document.querySelector(this.container);\n        }\n        else {\n            this._container = this.container;\n        }\n        if (!this._container) {\n            throw new Error(\"SlickGrid requires a valid container, \".concat(this.container, \" does not exist in the DOM.\"));\n        }\n        // calculate these only once and share between grid instances\n        if (this.options.mixinDefaults) {\n            if (!this.options) {\n                this.options = {};\n            }\n            this._options = Utils.applyDefaults(this.options, this._defaults);\n        }\n        else {\n            this._options = Utils.extend(true, {}, this._defaults, this.options);\n        }\n        this.scrollThrottle = this.actionThrottle(this.render.bind(this), this._options.scrollRenderThrottling);\n        this.maxSupportedCssHeight = this.maxSupportedCssHeight || this.getMaxSupportedCssHeight();\n        this.validateAndEnforceOptions();\n        this._columnDefaults.width = this._options.defaultColumnWidth;\n        if (!this._options.suppressCssChangesOnHiddenInit) {\n            this.cacheCssForHiddenInit();\n        }\n        this.updateColumnProps();\n        // validate loaded JavaScript modules against requested options\n        if (this._options.enableColumnReorder && (!Sortable || !Sortable.create)) {\n            throw new Error('SlickGrid requires Sortable.js module to be loaded');\n        }\n        this.editController = {\n            commitCurrentEdit: this.commitCurrentEdit.bind(this),\n            cancelCurrentEdit: this.cancelCurrentEdit.bind(this),\n        };\n        Utils.emptyElement(this._container);\n        this._container.style.overflow = 'hidden';\n        this._container.style.outline = String(0);\n        this._container.classList.add(this.uid);\n        this._container.classList.add('ui-widget');\n        var containerStyles = window.getComputedStyle(this._container);\n        if (!(/relative|absolute|fixed/).test(containerStyles.position)) {\n            this._container.style.position = 'relative';\n        }\n        this._focusSink = Utils.createDomElement('div', { tabIndex: 0, style: { position: 'fixed', width: '0px', height: '0px', top: '0px', left: '0px', outline: '0px' } }, this._container);\n        // Containers used for scrolling frozen columns and rows\n        this._paneHeaderL = Utils.createDomElement('div', { className: 'slick-pane slick-pane-header slick-pane-left', tabIndex: 0 }, this._container);\n        this._paneHeaderR = Utils.createDomElement('div', { className: 'slick-pane slick-pane-header slick-pane-right', tabIndex: 0 }, this._container);\n        this._paneTopL = Utils.createDomElement('div', { className: 'slick-pane slick-pane-top slick-pane-left', tabIndex: 0 }, this._container);\n        this._paneTopR = Utils.createDomElement('div', { className: 'slick-pane slick-pane-top slick-pane-right', tabIndex: 0 }, this._container);\n        this._paneBottomL = Utils.createDomElement('div', { className: 'slick-pane slick-pane-bottom slick-pane-left', tabIndex: 0 }, this._container);\n        this._paneBottomR = Utils.createDomElement('div', { className: 'slick-pane slick-pane-bottom slick-pane-right', tabIndex: 0 }, this._container);\n        if (this._options.createPreHeaderPanel) {\n            this._preHeaderPanelScroller = Utils.createDomElement('div', { className: 'slick-preheader-panel ui-state-default slick-state-default', style: { overflow: 'hidden', position: 'relative' } }, this._paneHeaderL);\n            this._preHeaderPanelScroller.appendChild(document.createElement('div'));\n            this._preHeaderPanel = Utils.createDomElement('div', null, this._preHeaderPanelScroller);\n            this._preHeaderPanelSpacer = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._preHeaderPanelScroller);\n            this._preHeaderPanelScrollerR = Utils.createDomElement('div', { className: 'slick-preheader-panel ui-state-default slick-state-default', style: { overflow: 'hidden', position: 'relative' } }, this._paneHeaderR);\n            this._preHeaderPanelR = Utils.createDomElement('div', null, this._preHeaderPanelScrollerR);\n            this._preHeaderPanelSpacerR = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._preHeaderPanelScrollerR);\n            if (!this._options.showPreHeaderPanel) {\n                Utils.hide(this._preHeaderPanelScroller);\n                Utils.hide(this._preHeaderPanelScrollerR);\n            }\n        }\n        // Append the header scroller containers\n        this._headerScrollerL = Utils.createDomElement('div', { className: 'slick-header ui-state-default slick-state-default slick-header-left' }, this._paneHeaderL);\n        this._headerScrollerR = Utils.createDomElement('div', { className: 'slick-header ui-state-default slick-state-default slick-header-right' }, this._paneHeaderR);\n        // Cache the header scroller containers\n        this._headerScroller.push(this._headerScrollerL);\n        this._headerScroller.push(this._headerScrollerR);\n        // Append the columnn containers to the headers\n        this._headerL = Utils.createDomElement('div', { className: 'slick-header-columns slick-header-columns-left', style: { left: '-1000px' } }, this._headerScrollerL);\n        this._headerR = Utils.createDomElement('div', { className: 'slick-header-columns slick-header-columns-right', style: { left: '-1000px' } }, this._headerScrollerR);\n        // Cache the header columns\n        this._headers = [this._headerL, this._headerR];\n        this._headerRowScrollerL = Utils.createDomElement('div', { className: 'slick-headerrow ui-state-default slick-state-default' }, this._paneTopL);\n        this._headerRowScrollerR = Utils.createDomElement('div', { className: 'slick-headerrow ui-state-default slick-state-default' }, this._paneTopR);\n        this._headerRowScroller = [this._headerRowScrollerL, this._headerRowScrollerR];\n        this._headerRowSpacerL = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._headerRowScrollerL);\n        this._headerRowSpacerR = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._headerRowScrollerR);\n        this._headerRowL = Utils.createDomElement('div', { className: 'slick-headerrow-columns slick-headerrow-columns-left' }, this._headerRowScrollerL);\n        this._headerRowR = Utils.createDomElement('div', { className: 'slick-headerrow-columns slick-headerrow-columns-right' }, this._headerRowScrollerR);\n        this._headerRows = [this._headerRowL, this._headerRowR];\n        // Append the top panel scroller\n        this._topPanelScrollerL = Utils.createDomElement('div', { className: 'slick-top-panel-scroller ui-state-default slick-state-default' }, this._paneTopL);\n        this._topPanelScrollerR = Utils.createDomElement('div', { className: 'slick-top-panel-scroller ui-state-default slick-state-default' }, this._paneTopR);\n        this._topPanelScrollers = [this._topPanelScrollerL, this._topPanelScrollerR];\n        // Append the top panel\n        this._topPanelL = Utils.createDomElement('div', { className: 'slick-top-panel', style: { width: '10000px' } }, this._topPanelScrollerL);\n        this._topPanelR = Utils.createDomElement('div', { className: 'slick-top-panel', style: { width: '10000px' } }, this._topPanelScrollerR);\n        this._topPanels = [this._topPanelL, this._topPanelR];\n        if (!this._options.showColumnHeader) {\n            this._headerScroller.forEach(function (el) {\n                Utils.hide(el);\n            });\n        }\n        if (!this._options.showTopPanel) {\n            this._topPanelScrollers.forEach(function (scroller) {\n                Utils.hide(scroller);\n            });\n        }\n        if (!this._options.showHeaderRow) {\n            this._headerRowScroller.forEach(function (scroller) {\n                Utils.hide(scroller);\n            });\n        }\n        // Append the viewport containers\n        this._viewportTopL = Utils.createDomElement('div', { className: 'slick-viewport slick-viewport-top slick-viewport-left', tabIndex: 0 }, this._paneTopL);\n        this._viewportTopR = Utils.createDomElement('div', { className: 'slick-viewport slick-viewport-top slick-viewport-right', tabIndex: 0 }, this._paneTopR);\n        this._viewportBottomL = Utils.createDomElement('div', { className: 'slick-viewport slick-viewport-bottom slick-viewport-left', tabIndex: 0 }, this._paneBottomL);\n        this._viewportBottomR = Utils.createDomElement('div', { className: 'slick-viewport slick-viewport-bottom slick-viewport-right', tabIndex: 0 }, this._paneBottomR);\n        // Cache the viewports\n        this._viewport = [this._viewportTopL, this._viewportTopR, this._viewportBottomL, this._viewportBottomR];\n        if (this._options.viewportClass) {\n            this._viewport.forEach(function (view) {\n                var _a;\n                (_a = view.classList).add.apply(_a, (_this._options.viewportClass || '').split(' '));\n            });\n        }\n        // Default the active viewport to the top left\n        this._activeViewportNode = this._viewportTopL;\n        // Append the canvas containers\n        this._canvasTopL = Utils.createDomElement('div', { className: 'grid-canvas grid-canvas-top grid-canvas-left', tabIndex: 0 }, this._viewportTopL);\n        this._canvasTopR = Utils.createDomElement('div', { className: 'grid-canvas grid-canvas-top grid-canvas-right', tabIndex: 0 }, this._viewportTopR);\n        this._canvasBottomL = Utils.createDomElement('div', { className: 'grid-canvas grid-canvas-bottom grid-canvas-left', tabIndex: 0 }, this._viewportBottomL);\n        this._canvasBottomR = Utils.createDomElement('div', { className: 'grid-canvas grid-canvas-bottom grid-canvas-right', tabIndex: 0 }, this._viewportBottomR);\n        // Cache the canvases\n        this._canvas = [this._canvasTopL, this._canvasTopR, this._canvasBottomL, this._canvasBottomR];\n        this.scrollbarDimensions = this.scrollbarDimensions || this.measureScrollbar();\n        // Default the active canvas to the top left\n        this._activeCanvasNode = this._canvasTopL;\n        // pre-header\n        if (this._preHeaderPanelSpacer) {\n            Utils.width(this._preHeaderPanelSpacer, this.getCanvasWidth() + this.scrollbarDimensions.width);\n        }\n        this._headers.forEach(function (el) {\n            Utils.width(el, _this.getHeadersWidth());\n        });\n        Utils.width(this._headerRowSpacerL, this.getCanvasWidth() + this.scrollbarDimensions.width);\n        Utils.width(this._headerRowSpacerR, this.getCanvasWidth() + this.scrollbarDimensions.width);\n        // footer Row\n        if (this._options.createFooterRow) {\n            this._footerRowScrollerR = Utils.createDomElement('div', { className: 'slick-footerrow ui-state-default slick-state-default' }, this._paneTopR);\n            this._footerRowScrollerL = Utils.createDomElement('div', { className: 'slick-footerrow ui-state-default slick-state-default' }, this._paneTopL);\n            this._footerRowScroller = [this._footerRowScrollerL, this._footerRowScrollerR];\n            this._footerRowSpacerL = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._footerRowScrollerL);\n            Utils.width(this._footerRowSpacerL, this.getCanvasWidth() + this.scrollbarDimensions.width);\n            this._footerRowSpacerR = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._footerRowScrollerR);\n            Utils.width(this._footerRowSpacerR, this.getCanvasWidth() + this.scrollbarDimensions.width);\n            this._footerRowL = Utils.createDomElement('div', { className: 'slick-footerrow-columns slick-footerrow-columns-left' }, this._footerRowScrollerL);\n            this._footerRowR = Utils.createDomElement('div', { className: 'slick-footerrow-columns slick-footerrow-columns-right' }, this._footerRowScrollerR);\n            this._footerRow = [this._footerRowL, this._footerRowR];\n            if (!this._options.showFooterRow) {\n                this._footerRowScroller.forEach(function (scroller) {\n                    Utils.hide(scroller);\n                });\n            }\n        }\n        this._focusSink2 = this._focusSink.cloneNode(true);\n        this._container.appendChild(this._focusSink2);\n        if (!this._options.explicitInitialization) {\n            this.finishInitialization();\n        }\n    };\n    SlickGrid.prototype.finishInitialization = function () {\n        var _this = this;\n        if (!this.initialized) {\n            this.initialized = true;\n            this.getViewportWidth();\n            this.getViewportHeight();\n            // header columns and cells may have different padding/border skewing width calculations (box-sizing, hello?)\n            // calculate the diff so we can set consistent sizes\n            this.measureCellPaddingAndBorder();\n            // for usability reasons, all text selection in SlickGrid is disabled\n            // with the exception of input and textarea elements (selection must\n            // be enabled there so that editors work as expected); note that\n            // selection in grid cells (grid body) is already unavailable in\n            // all browsers except IE\n            this.disableSelection(this._headers); // disable all text selection in header (including input and textarea)\n            if (!this._options.enableTextSelectionOnCells) {\n                // disable text selection in grid cells except in input and textarea elements\n                // (this is IE-specific, because selectstart event will only fire in IE)\n                this._viewport.forEach(function (view) {\n                    _this._bindingEventService.bind(view, 'selectstart', function (event) {\n                        if (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement) {\n                            return;\n                        }\n                    });\n                });\n            }\n            this.setFrozenOptions();\n            this.setPaneVisibility();\n            this.setScroller();\n            this.setOverflow();\n            this.updateColumnCaches();\n            this.createColumnHeaders();\n            this.createColumnFooter();\n            this.setupColumnSort();\n            this.createCssRules();\n            this.resizeCanvas();\n            this.bindAncestorScrollEvents();\n            this._bindingEventService.bind(this._container, 'resize', this.resizeCanvas.bind(this));\n            this._viewport.forEach(function (view) {\n                _this._bindingEventService.bind(view, 'scroll', _this.handleScroll.bind(_this));\n            });\n            if (this._options.enableMouseWheelScrollHandler) {\n                this._viewport.forEach(function (view) {\n                    _this.slickMouseWheelInstances.push(MouseWheel({\n                        element: view,\n                        onMouseWheel: _this.handleMouseWheel.bind(_this)\n                    }));\n                });\n            }\n            this._headerScroller.forEach(function (el) {\n                _this._bindingEventService.bind(el, 'contextmenu', _this.handleHeaderContextMenu.bind(_this));\n                _this._bindingEventService.bind(el, 'click', _this.handleHeaderClick.bind(_this));\n            });\n            this._headerRowScroller.forEach(function (scroller) {\n                _this._bindingEventService.bind(scroller, 'scroll', _this.handleHeaderRowScroll.bind(_this));\n            });\n            if (this._options.createFooterRow) {\n                this._footerRow.forEach(function (footer) {\n                    _this._bindingEventService.bind(footer, 'contextmenu', _this.handleFooterContextMenu.bind(_this));\n                    _this._bindingEventService.bind(footer, 'click', _this.handleFooterClick.bind(_this));\n                });\n                this._footerRowScroller.forEach(function (scroller) {\n                    _this._bindingEventService.bind(scroller, 'scroll', _this.handleFooterRowScroll.bind(_this));\n                });\n            }\n            if (this._options.createPreHeaderPanel) {\n                this._bindingEventService.bind(this._preHeaderPanelScroller, 'scroll', this.handlePreHeaderPanelScroll.bind(this));\n            }\n            this._bindingEventService.bind(this._focusSink, 'keydown', this.handleKeyDown.bind(this));\n            this._bindingEventService.bind(this._focusSink2, 'keydown', this.handleKeyDown.bind(this));\n            this._canvas.forEach(function (element) {\n                _this._bindingEventService.bind(element, 'keydown', _this.handleKeyDown.bind(_this));\n                _this._bindingEventService.bind(element, 'click', _this.handleClick.bind(_this));\n                _this._bindingEventService.bind(element, 'dblclick', _this.handleDblClick.bind(_this));\n                _this._bindingEventService.bind(element, 'contextmenu', _this.handleContextMenu.bind(_this));\n                _this._bindingEventService.bind(element, 'mouseover', _this.handleCellMouseOver.bind(_this));\n                _this._bindingEventService.bind(element, 'mouseout', _this.handleCellMouseOut.bind(_this));\n            });\n            if (Draggable) {\n                this.slickDraggableInstance = Draggable({\n                    containerElement: this._container,\n                    allowDragFrom: 'div.slick-cell',\n                    onDragInit: this.handleDragInit.bind(this),\n                    onDragStart: this.handleDragStart.bind(this),\n                    onDrag: this.handleDrag.bind(this),\n                    onDragEnd: this.handleDragEnd.bind(this)\n                });\n            }\n            if (!this._options.suppressCssChangesOnHiddenInit) {\n                this.restoreCssFromHiddenInit();\n            }\n        }\n    };\n    SlickGrid.prototype.cacheCssForHiddenInit = function () {\n        // handle display:none on container or container parents\n        this._hiddenParents = Utils.parents(this._container, ':hidden');\n        for (var _i = 0, _a = this._hiddenParents; _i < _a.length; _i++) {\n            var el = _a[_i];\n            var old = {};\n            for (var name_1 in this.cssShow) {\n                old[name_1] = el.style[name_1];\n                el.style[name_1] = this.cssShow[name_1];\n            }\n            this.oldProps.push(old);\n        }\n    };\n    SlickGrid.prototype.restoreCssFromHiddenInit = function () {\n        // finish handle display:none on container or container parents\n        // - put values back the way they were\n        var i = 0;\n        for (var _i = 0, _a = this._hiddenParents; _i < _a.length; _i++) {\n            var el = _a[_i];\n            var old = this.oldProps[i++];\n            for (var name_2 in this.cssShow) {\n                el.style[name_2] = old[name_2];\n            }\n        }\n    };\n    SlickGrid.prototype.hasFrozenColumns = function () {\n        return this._options.frozenColumn > -1;\n    };\n    /** Register an external Plugin */\n    SlickGrid.prototype.registerPlugin = function (plugin) {\n        this.plugins.unshift(plugin);\n        plugin.init(this);\n    };\n    /** Unregister (destroy) an external Plugin */\n    SlickGrid.prototype.unregisterPlugin = function (plugin) {\n        var _a;\n        for (var i = this.plugins.length; i >= 0; i--) {\n            if (this.plugins[i] === plugin) {\n                (_a = this.plugins[i]) === null || _a === void 0 ? void 0 : _a.destroy();\n                this.plugins.splice(i, 1);\n                break;\n            }\n        }\n    };\n    /** Get a Plugin (addon) by its name */\n    SlickGrid.prototype.getPluginByName = function (name) {\n        var _a;\n        for (var i = this.plugins.length - 1; i >= 0; i--) {\n            if (((_a = this.plugins[i]) === null || _a === void 0 ? void 0 : _a.pluginName) === name) {\n                return this.plugins[i];\n            }\n        }\n        return undefined;\n    };\n    /**\n     * Unregisters a current selection model and registers a new one. See the definition of SelectionModel for more information.\n     * @param {Object} selectionModel A SelectionModel.\n     */\n    SlickGrid.prototype.setSelectionModel = function (model) {\n        if (this.selectionModel) {\n            this.selectionModel.onSelectedRangesChanged.unsubscribe(this.handleSelectedRangesChanged.bind(this));\n            if (this.selectionModel.destroy) {\n                this.selectionModel.destroy();\n            }\n        }\n        this.selectionModel = model;\n        if (this.selectionModel) {\n            this.selectionModel.init(this);\n            this.selectionModel.onSelectedRangesChanged.subscribe(this.handleSelectedRangesChanged.bind(this));\n        }\n    };\n    /** Returns the current SelectionModel. See here for more information about SelectionModels. */\n    SlickGrid.prototype.getSelectionModel = function () {\n        return this.selectionModel;\n    };\n    /** Get Grid Canvas Node DOM Element */\n    SlickGrid.prototype.getCanvasNode = function (columnIdOrIdx, rowIndex) {\n        return this._getContainerElement(this.getCanvases(), columnIdOrIdx, rowIndex);\n    };\n    /** Get the canvas DOM element */\n    SlickGrid.prototype.getActiveCanvasNode = function (e) {\n        if (e === undefined) {\n            return this._activeCanvasNode;\n        }\n        if (e instanceof SlickEventData) {\n            e = e.getNativeEvent();\n        }\n        this._activeCanvasNode = e === null || e === void 0 ? void 0 : e.target.closest('.grid-canvas');\n        return this._activeCanvasNode;\n    };\n    /** Get the canvas DOM element */\n    SlickGrid.prototype.getCanvases = function () {\n        return this._canvas;\n    };\n    /** Get the Viewport DOM node element */\n    SlickGrid.prototype.getViewportNode = function (columnIdOrIdx, rowIndex) {\n        return this._getContainerElement(this.getViewports(), columnIdOrIdx, rowIndex);\n    };\n    /** Get all the Viewport node elements */\n    SlickGrid.prototype.getViewports = function () {\n        return this._viewport;\n    };\n    SlickGrid.prototype.getActiveViewportNode = function (e) {\n        this.setActiveViewportNode(e);\n        return this._activeViewportNode;\n    };\n    /** Sets an active viewport node */\n    SlickGrid.prototype.setActiveViewportNode = function (e) {\n        if (e instanceof SlickEventData) {\n            e = e.getNativeEvent();\n        }\n        this._activeViewportNode = e === null || e === void 0 ? void 0 : e.target.closest('.slick-viewport');\n        return this._activeViewportNode;\n    };\n    SlickGrid.prototype._getContainerElement = function (targetContainers, columnIdOrIdx, rowIndex) {\n        if (!targetContainers) {\n            return;\n        }\n        if (!columnIdOrIdx) {\n            columnIdOrIdx = 0;\n        }\n        if (!rowIndex) {\n            rowIndex = 0;\n        }\n        var idx = (typeof columnIdOrIdx === 'number' ? columnIdOrIdx : this.getColumnIndex(columnIdOrIdx));\n        var isBottomSide = this.hasFrozenRows && rowIndex >= this.actualFrozenRow + (this._options.frozenBottom ? 0 : 1);\n        var isRightSide = this.hasFrozenColumns() && idx > this._options.frozenColumn;\n        return targetContainers[(isBottomSide ? 2 : 0) + (isRightSide ? 1 : 0)];\n    };\n    SlickGrid.prototype.measureScrollbar = function () {\n        var className = '';\n        this._viewport.forEach(function (v) { return className += v.className; });\n        var outerdiv = Utils.createDomElement('div', { className: className, style: { position: 'absolute', top: '-10000px', left: '-10000px', overflow: 'auto', width: '100px', height: '100px' } }, document.body);\n        var innerdiv = Utils.createDomElement('div', { style: { width: '200px', height: '200px', overflow: 'auto' } }, outerdiv);\n        var dim = {\n            width: outerdiv.offsetWidth - outerdiv.clientWidth,\n            height: outerdiv.offsetHeight - outerdiv.clientHeight\n        };\n        innerdiv.remove();\n        outerdiv.remove();\n        return dim;\n    };\n    /** Get the headers width in pixel */\n    SlickGrid.prototype.getHeadersWidth = function () {\n        var _a, _b, _c, _d, _f, _g, _h, _j;\n        this.headersWidth = this.headersWidthL = this.headersWidthR = 0;\n        var includeScrollbar = !this._options.autoHeight;\n        var i = 0;\n        var ii = this.columns.length;\n        for (i = 0; i < ii; i++) {\n            if (!this.columns[i] || this.columns[i].hidden)\n                continue;\n            var width = this.columns[i].width;\n            if ((this._options.frozenColumn) > -1 && (i > this._options.frozenColumn)) {\n                this.headersWidthR += width || 0;\n            }\n            else {\n                this.headersWidthL += width || 0;\n            }\n        }\n        if (includeScrollbar) {\n            if ((this._options.frozenColumn) > -1 && (i > this._options.frozenColumn)) {\n                this.headersWidthR += (_b = (_a = this.scrollbarDimensions) === null || _a === void 0 ? void 0 : _a.width) !== null && _b !== void 0 ? _b : 0;\n            }\n            else {\n                this.headersWidthL += (_d = (_c = this.scrollbarDimensions) === null || _c === void 0 ? void 0 : _c.width) !== null && _d !== void 0 ? _d : 0;\n            }\n        }\n        if (this.hasFrozenColumns()) {\n            this.headersWidthL = this.headersWidthL + 1000;\n            this.headersWidthR = Math.max(this.headersWidthR, this.viewportW) + this.headersWidthL;\n            this.headersWidthR += (_g = (_f = this.scrollbarDimensions) === null || _f === void 0 ? void 0 : _f.width) !== null && _g !== void 0 ? _g : 0;\n        }\n        else {\n            this.headersWidthL += (_j = (_h = this.scrollbarDimensions) === null || _h === void 0 ? void 0 : _h.width) !== null && _j !== void 0 ? _j : 0;\n            this.headersWidthL = Math.max(this.headersWidthL, this.viewportW) + 1000;\n        }\n        this.headersWidth = this.headersWidthL + this.headersWidthR;\n        return Math.max(this.headersWidth, this.viewportW) + 1000;\n    };\n    SlickGrid.prototype.getHeadersWidthL = function () {\n        var _this = this;\n        var _a, _b;\n        this.headersWidthL = 0;\n        this.columns.forEach(function (column, i) {\n            if (column.hidden)\n                return;\n            if (!((_this._options.frozenColumn) > -1 && (i > _this._options.frozenColumn))) {\n                _this.headersWidthL += column.width || 0;\n            }\n        });\n        if (this.hasFrozenColumns()) {\n            this.headersWidthL += 1000;\n        }\n        else {\n            this.headersWidthL += (_b = (_a = this.scrollbarDimensions) === null || _a === void 0 ? void 0 : _a.width) !== null && _b !== void 0 ? _b : 0;\n            this.headersWidthL = Math.max(this.headersWidthL, this.viewportW) + 1000;\n        }\n        return this.headersWidthL;\n    };\n    SlickGrid.prototype.getHeadersWidthR = function () {\n        var _this = this;\n        var _a, _b;\n        this.headersWidthR = 0;\n        this.columns.forEach(function (column, i) {\n            if (column.hidden)\n                return;\n            if ((_this._options.frozenColumn) > -1 && (i > _this._options.frozenColumn)) {\n                _this.headersWidthR += column.width || 0;\n            }\n        });\n        if (this.hasFrozenColumns()) {\n            this.headersWidthR = Math.max(this.headersWidthR, this.viewportW) + this.getHeadersWidthL();\n            this.headersWidthR += (_b = (_a = this.scrollbarDimensions) === null || _a === void 0 ? void 0 : _a.width) !== null && _b !== void 0 ? _b : 0;\n        }\n        return this.headersWidthR;\n    };\n    /** Get the grid canvas width */\n    SlickGrid.prototype.getCanvasWidth = function () {\n        var _a, _b;\n        var availableWidth = this.viewportHasVScroll ? this.viewportW - ((_b = (_a = this.scrollbarDimensions) === null || _a === void 0 ? void 0 : _a.width) !== null && _b !== void 0 ? _b : 0) : this.viewportW;\n        var i = this.columns.length;\n        this.canvasWidthL = this.canvasWidthR = 0;\n        while (i--) {\n            if (!this.columns[i] || this.columns[i].hidden)\n                continue;\n            if (this.hasFrozenColumns() && (i > this._options.frozenColumn)) {\n                this.canvasWidthR += this.columns[i].width || 0;\n            }\n            else {\n                this.canvasWidthL += this.columns[i].width || 0;\n            }\n        }\n        var totalRowWidth = this.canvasWidthL + this.canvasWidthR;\n        if (this._options.fullWidthRows) {\n            var extraWidth = Math.max(totalRowWidth, availableWidth) - totalRowWidth;\n            if (extraWidth > 0) {\n                totalRowWidth += extraWidth;\n                if (this.hasFrozenColumns()) {\n                    this.canvasWidthR += extraWidth;\n                }\n                else {\n                    this.canvasWidthL += extraWidth;\n                }\n            }\n        }\n        return totalRowWidth;\n    };\n    SlickGrid.prototype.updateCanvasWidth = function (forceColumnWidthsUpdate) {\n        var _a, _b, _c, _d, _f, _g, _h, _j, _k, _l;\n        var oldCanvasWidth = this.canvasWidth;\n        var oldCanvasWidthL = this.canvasWidthL;\n        var oldCanvasWidthR = this.canvasWidthR;\n        this.canvasWidth = this.getCanvasWidth();\n        var widthChanged = this.canvasWidth !== oldCanvasWidth || this.canvasWidthL !== oldCanvasWidthL || this.canvasWidthR !== oldCanvasWidthR;\n        if (widthChanged || this.hasFrozenColumns() || this.hasFrozenRows) {\n            Utils.width(this._canvasTopL, this.canvasWidthL);\n            this.getHeadersWidth();\n            Utils.width(this._headerL, this.headersWidthL);\n            Utils.width(this._headerR, this.headersWidthR);\n            if (this.hasFrozenColumns()) {\n                var cWidth = Utils.width(this._container) || 0;\n                if (cWidth > 0 && this.canvasWidthL > cWidth) {\n                    throw new Error('[SlickGrid] Frozen columns cannot be wider than the actual grid container width. '\n                        + 'Make sure to have less columns freezed or make your grid container wider');\n                }\n                Utils.width(this._canvasTopR, this.canvasWidthR);\n                Utils.width(this._paneHeaderL, this.canvasWidthL);\n                Utils.setStyleSize(this._paneHeaderR, 'left', this.canvasWidthL);\n                Utils.setStyleSize(this._paneHeaderR, 'width', this.viewportW - this.canvasWidthL);\n                Utils.width(this._paneTopL, this.canvasWidthL);\n                Utils.setStyleSize(this._paneTopR, 'left', this.canvasWidthL);\n                Utils.width(this._paneTopR, this.viewportW - this.canvasWidthL);\n                Utils.width(this._headerRowScrollerL, this.canvasWidthL);\n                Utils.width(this._headerRowScrollerR, this.viewportW - this.canvasWidthL);\n                Utils.width(this._headerRowL, this.canvasWidthL);\n                Utils.width(this._headerRowR, this.canvasWidthR);\n                if (this._options.createFooterRow) {\n                    Utils.width(this._footerRowScrollerL, this.canvasWidthL);\n                    Utils.width(this._footerRowScrollerR, this.viewportW - this.canvasWidthL);\n                    Utils.width(this._footerRowL, this.canvasWidthL);\n                    Utils.width(this._footerRowR, this.canvasWidthR);\n                }\n                if (this._options.createPreHeaderPanel) {\n                    Utils.width(this._preHeaderPanel, this.canvasWidth);\n                }\n                Utils.width(this._viewportTopL, this.canvasWidthL);\n                Utils.width(this._viewportTopR, this.viewportW - this.canvasWidthL);\n                if (this.hasFrozenRows) {\n                    Utils.width(this._paneBottomL, this.canvasWidthL);\n                    Utils.setStyleSize(this._paneBottomR, 'left', this.canvasWidthL);\n                    Utils.width(this._viewportBottomL, this.canvasWidthL);\n                    Utils.width(this._viewportBottomR, this.viewportW - this.canvasWidthL);\n                    Utils.width(this._canvasBottomL, this.canvasWidthL);\n                    Utils.width(this._canvasBottomR, this.canvasWidthR);\n                }\n            }\n            else {\n                Utils.width(this._paneHeaderL, '100%');\n                Utils.width(this._paneTopL, '100%');\n                Utils.width(this._headerRowScrollerL, '100%');\n                Utils.width(this._headerRowL, this.canvasWidth);\n                if (this._options.createFooterRow) {\n                    Utils.width(this._footerRowScrollerL, '100%');\n                    Utils.width(this._footerRowL, this.canvasWidth);\n                }\n                if (this._options.createPreHeaderPanel) {\n                    Utils.width(this._preHeaderPanel, this.canvasWidth);\n                }\n                Utils.width(this._viewportTopL, '100%');\n                if (this.hasFrozenRows) {\n                    Utils.width(this._viewportBottomL, '100%');\n                    Utils.width(this._canvasBottomL, this.canvasWidthL);\n                }\n            }\n        }\n        this.viewportHasHScroll = (this.canvasWidth >= this.viewportW - ((_b = (_a = this.scrollbarDimensions) === null || _a === void 0 ? void 0 : _a.width) !== null && _b !== void 0 ? _b : 0));\n        Utils.width(this._headerRowSpacerL, this.canvasWidth + (this.viewportHasVScroll ? ((_d = (_c = this.scrollbarDimensions) === null || _c === void 0 ? void 0 : _c.width) !== null && _d !== void 0 ? _d : 0) : 0));\n        Utils.width(this._headerRowSpacerR, this.canvasWidth + (this.viewportHasVScroll ? ((_g = (_f = this.scrollbarDimensions) === null || _f === void 0 ? void 0 : _f.width) !== null && _g !== void 0 ? _g : 0) : 0));\n        if (this._options.createFooterRow) {\n            Utils.width(this._footerRowSpacerL, this.canvasWidth + (this.viewportHasVScroll ? ((_j = (_h = this.scrollbarDimensions) === null || _h === void 0 ? void 0 : _h.width) !== null && _j !== void 0 ? _j : 0) : 0));\n            Utils.width(this._footerRowSpacerR, this.canvasWidth + (this.viewportHasVScroll ? ((_l = (_k = this.scrollbarDimensions) === null || _k === void 0 ? void 0 : _k.width) !== null && _l !== void 0 ? _l : 0) : 0));\n        }\n        if (widthChanged || forceColumnWidthsUpdate) {\n            this.applyColumnWidths();\n        }\n    };\n    SlickGrid.prototype.disableSelection = function (target) {\n        var _this = this;\n        target.forEach(function (el) {\n            el.setAttribute('unselectable', 'on');\n            el.style.mozUserSelect = 'none';\n            _this._bindingEventService.bind(el, 'selectstart', function () { return false; });\n        });\n    };\n    SlickGrid.prototype.getMaxSupportedCssHeight = function () {\n        var supportedHeight = 1000000;\n        // FF reports the height back but still renders blank after ~6M px\n        //let testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? 6000000 : 1000000000;\n        var testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? this._options.ffMaxSupportedCssHeight : this._options.maxSupportedCssHeight;\n        var div = Utils.createDomElement('div', { style: { display: 'hidden' } }, document.body);\n        while (true) {\n            var test = supportedHeight * 2;\n            Utils.height(div, test);\n            var height = Utils.height(div);\n            if (test > testUpTo || height !== test) {\n                break;\n            }\n            else {\n                supportedHeight = test;\n            }\n        }\n        div.remove();\n        return supportedHeight;\n    };\n    /** Get grid unique identifier */\n    SlickGrid.prototype.getUID = function () {\n        return this.uid;\n    };\n    /** Get Header Column Width Difference in pixel */\n    SlickGrid.prototype.getHeaderColumnWidthDiff = function () {\n        return this.headerColumnWidthDiff;\n    };\n    /** Get scrollbar dimensions */\n    SlickGrid.prototype.getScrollbarDimensions = function () {\n        return this.scrollbarDimensions;\n    };\n    /** Get the displayed scrollbar dimensions */\n    SlickGrid.prototype.getDisplayedScrollbarDimensions = function () {\n        var _a, _b, _c, _d;\n        return {\n            width: this.viewportHasVScroll ? ((_b = (_a = this.scrollbarDimensions) === null || _a === void 0 ? void 0 : _a.width) !== null && _b !== void 0 ? _b : 0) : 0,\n            height: this.viewportHasHScroll ? ((_d = (_c = this.scrollbarDimensions) === null || _c === void 0 ? void 0 : _c.height) !== null && _d !== void 0 ? _d : 0) : 0\n        };\n    };\n    /** Get the absolute column minimum width */\n    SlickGrid.prototype.getAbsoluteColumnMinWidth = function () {\n        return this.absoluteColumnMinWidth;\n    };\n    // TODO:  this is static.  need to handle page mutation.\n    SlickGrid.prototype.bindAncestorScrollEvents = function () {\n        var elem = (this.hasFrozenRows && !this._options.frozenBottom) ? this._canvasBottomL : this._canvasTopL;\n        while ((elem = elem.parentNode) !== document.body && elem != null) {\n            // bind to scroll containers only\n            if (elem == this._viewportTopL || elem.scrollWidth !== elem.clientWidth || elem.scrollHeight !== elem.clientHeight) {\n                this._boundAncestors.push(elem);\n                this._bindingEventService.bind(elem, 'scroll', this.handleActiveCellPositionChange.bind(this));\n            }\n        }\n    };\n    SlickGrid.prototype.unbindAncestorScrollEvents = function () {\n        var _this = this;\n        this._boundAncestors.forEach(function (ancestor) {\n            _this._bindingEventService.unbindByEventName(ancestor, 'scroll');\n        });\n        this._boundAncestors = [];\n    };\n    /**\n     * Updates an existing column definition and a corresponding header DOM element with the new title and tooltip.\n     * @param {Number|String} columnId Column id.\n     * @param {String} title New column name.\n     * @param {String} [toolTip] New column tooltip.\n     */\n    SlickGrid.prototype.updateColumnHeader = function (columnId, title, toolTip) {\n        if (!this.initialized) {\n            return;\n        }\n        var idx = this.getColumnIndex(columnId);\n        if (idx == null) {\n            return;\n        }\n        var columnDef = this.columns[idx];\n        var header = this.getColumnByIndex(idx);\n        if (header) {\n            if (title !== undefined) {\n                this.columns[idx].name = title;\n            }\n            if (toolTip !== undefined) {\n                this.columns[idx].toolTip = toolTip;\n            }\n            this.trigger(this.onBeforeHeaderCellDestroy, {\n                node: header,\n                column: columnDef,\n                grid: this\n            });\n            header.setAttribute('title', toolTip || '');\n            if (title !== undefined) {\n                header.children[0].innerHTML = this.sanitizeHtmlString(title);\n            }\n            this.trigger(this.onHeaderCellRendered, {\n                node: header,\n                column: columnDef,\n                grid: this\n            });\n        }\n    };\n    /**\n     * Get the Header DOM element\n     * @param {C} columnDef - column definition\n     */\n    SlickGrid.prototype.getHeader = function (columnDef) {\n        if (!columnDef) {\n            return this.hasFrozenColumns() ? this._headers : this._headerL;\n        }\n        var idx = this.getColumnIndex(columnDef.id);\n        return this.hasFrozenColumns() ? ((idx <= this._options.frozenColumn) ? this._headerL : this._headerR) : this._headerL;\n    };\n    /**\n     * Get a specific Header Column DOM element\n     * @param {Number|String} [columnIdOrIdx] - column Id or index\n     */\n    SlickGrid.prototype.getHeaderColumn = function (columnIdOrIdx) {\n        var idx = (typeof columnIdOrIdx === 'number' ? columnIdOrIdx : this.getColumnIndex(columnIdOrIdx));\n        var targetHeader = this.hasFrozenColumns() ? ((idx <= this._options.frozenColumn) ? this._headerL : this._headerR) : this._headerL;\n        var targetIndex = this.hasFrozenColumns() ? ((idx <= this._options.frozenColumn) ? idx : idx - this._options.frozenColumn - 1) : idx;\n        return targetHeader.children[targetIndex];\n    };\n    /** Get the Header Row DOM element */\n    SlickGrid.prototype.getHeaderRow = function () {\n        return this.hasFrozenColumns() ? this._headerRows : this._headerRows[0];\n    };\n    /** Get the Footer DOM element */\n    SlickGrid.prototype.getFooterRow = function () {\n        return this.hasFrozenColumns() ? this._footerRow : this._footerRow[0];\n    };\n    /** @alias `getPreHeaderPanelLeft` */\n    SlickGrid.prototype.getPreHeaderPanel = function () {\n        return this._preHeaderPanel;\n    };\n    /** Get the Pre-Header Panel Left DOM node element */\n    SlickGrid.prototype.getPreHeaderPanelLeft = function () {\n        return this._preHeaderPanel;\n    };\n    /** Get the Pre-Header Panel Right DOM node element */\n    SlickGrid.prototype.getPreHeaderPanelRight = function () {\n        return this._preHeaderPanelR;\n    };\n    /**\n     * Get Header Row Column DOM element by its column Id\n     * @param {Number|String} [columnIdOrIdx] - column Id or index\n     */\n    SlickGrid.prototype.getHeaderRowColumn = function (columnIdOrIdx) {\n        var idx = (typeof columnIdOrIdx === 'number' ? columnIdOrIdx : this.getColumnIndex(columnIdOrIdx));\n        var headerRowTarget;\n        if (this.hasFrozenColumns()) {\n            if (idx <= this._options.frozenColumn) {\n                headerRowTarget = this._headerRowL;\n            }\n            else {\n                headerRowTarget = this._headerRowR;\n                idx -= this._options.frozenColumn + 1;\n            }\n        }\n        else {\n            headerRowTarget = this._headerRowL;\n        }\n        return headerRowTarget.children[idx];\n    };\n    /** Get the Footer Row Column DOM element */\n    SlickGrid.prototype.getFooterRowColumn = function (columnIdOrIdx) {\n        var idx = (typeof columnIdOrIdx === 'number' ? columnIdOrIdx : this.getColumnIndex(columnIdOrIdx));\n        var footerRowTarget;\n        if (this.hasFrozenColumns()) {\n            if (idx <= this._options.frozenColumn) {\n                footerRowTarget = this._footerRowL;\n            }\n            else {\n                footerRowTarget = this._footerRowR;\n                idx -= this._options.frozenColumn + 1;\n            }\n        }\n        else {\n            footerRowTarget = this._footerRowL;\n        }\n        return footerRowTarget.children[idx];\n    };\n    SlickGrid.prototype.createColumnFooter = function () {\n        var _this = this;\n        if (this._options.createFooterRow) {\n            this._footerRow.forEach(function (footer) {\n                var columnElements = footer.querySelectorAll('.slick-footerrow-column');\n                columnElements.forEach(function (column) {\n                    var columnDef = Utils.storage.get(column, 'column');\n                    _this.trigger(_this.onBeforeFooterRowCellDestroy, {\n                        node: column,\n                        column: columnDef,\n                        grid: _this\n                    });\n                });\n            });\n            Utils.emptyElement(this._footerRowL);\n            Utils.emptyElement(this._footerRowR);\n            for (var i = 0; i < this.columns.length; i++) {\n                var m = this.columns[i];\n                if (!m || m.hidden)\n                    continue;\n                var footerRowCell = Utils.createDomElement('div', { className: \"ui-state-default slick-state-default slick-footerrow-column l\".concat(i, \" r\").concat(i) }, this.hasFrozenColumns() && (i > this._options.frozenColumn) ? this._footerRowR : this._footerRowL);\n                var className = this.hasFrozenColumns() && i <= this._options.frozenColumn ? 'frozen' : null;\n                if (className) {\n                    footerRowCell.classList.add(className);\n                }\n                Utils.storage.put(footerRowCell, 'column', m);\n                this.trigger(this.onFooterRowCellRendered, {\n                    node: footerRowCell,\n                    column: m,\n                    grid: this\n                });\n            }\n        }\n    };\n    SlickGrid.prototype.handleHeaderMouseHoverOn = function (e) {\n        e === null || e === void 0 ? void 0 : e.target.classList.add('ui-state-hover', 'slick-state-hover');\n    };\n    SlickGrid.prototype.handleHeaderMouseHoverOff = function (e) {\n        e === null || e === void 0 ? void 0 : e.target.classList.remove('ui-state-hover', 'slick-state-hover');\n    };\n    SlickGrid.prototype.createColumnHeaders = function () {\n        var _a;\n        var _this = this;\n        this._headers.forEach(function (header) {\n            var columnElements = header.querySelectorAll('.slick-header-column');\n            columnElements.forEach(function (column) {\n                var columnDef = Utils.storage.get(column, 'column');\n                if (columnDef) {\n                    _this.trigger(_this.onBeforeHeaderCellDestroy, {\n                        node: column,\n                        column: columnDef,\n                        grid: _this\n                    });\n                }\n            });\n        });\n        Utils.emptyElement(this._headerL);\n        Utils.emptyElement(this._headerR);\n        this.getHeadersWidth();\n        Utils.width(this._headerL, this.headersWidthL);\n        Utils.width(this._headerR, this.headersWidthR);\n        this._headerRows.forEach(function (row) {\n            var columnElements = row.querySelectorAll('.slick-headerrow-column');\n            columnElements.forEach(function (column) {\n                var columnDef = Utils.storage.get(column, 'column');\n                if (columnDef) {\n                    _this.trigger(_this.onBeforeHeaderRowCellDestroy, {\n                        node: _this,\n                        column: columnDef,\n                        grid: _this\n                    });\n                }\n            });\n        });\n        Utils.emptyElement(this._headerRowL);\n        Utils.emptyElement(this._headerRowR);\n        if (this._options.createFooterRow) {\n            var footerRowColumnElements = this._footerRowL.querySelectorAll('.slick-footerrow-column');\n            footerRowColumnElements.forEach(function (column) {\n                var columnDef = Utils.storage.get(column, 'column');\n                if (columnDef) {\n                    _this.trigger(_this.onBeforeFooterRowCellDestroy, {\n                        node: _this,\n                        column: columnDef,\n                        grid: _this\n                    });\n                }\n            });\n            Utils.emptyElement(this._footerRowL);\n            if (this.hasFrozenColumns()) {\n                var footerRowColumnElements_1 = this._footerRowR.querySelectorAll('.slick-footerrow-column');\n                footerRowColumnElements_1.forEach(function (column) {\n                    var columnDef = Utils.storage.get(column, 'column');\n                    if (columnDef) {\n                        _this.trigger(_this.onBeforeFooterRowCellDestroy, {\n                            node: _this,\n                            column: columnDef,\n                            grid: _this\n                        });\n                    }\n                });\n                Utils.emptyElement(this._footerRowR);\n            }\n        }\n        for (var i = 0; i < this.columns.length; i++) {\n            var m = this.columns[i];\n            var headerTarget = this.hasFrozenColumns() ? ((i <= this._options.frozenColumn) ? this._headerL : this._headerR) : this._headerL;\n            var headerRowTarget = this.hasFrozenColumns() ? ((i <= this._options.frozenColumn) ? this._headerRowL : this._headerRowR) : this._headerRowL;\n            var header = Utils.createDomElement('div', { id: \"\".concat(this.uid + m.id), dataset: { id: String(m.id) }, className: 'ui-state-default slick-state-default slick-header-column', title: m.toolTip || '' }, headerTarget);\n            Utils.createDomElement('span', { className: 'slick-column-name', innerHTML: this.sanitizeHtmlString(m.name) }, header);\n            Utils.width(header, m.width - this.headerColumnWidthDiff);\n            var classname = m.headerCssClass || null;\n            if (classname) {\n                (_a = header.classList).add.apply(_a, classname.split(' '));\n            }\n            classname = this.hasFrozenColumns() && i <= this._options.frozenColumn ? 'frozen' : null;\n            if (classname) {\n                header.classList.add(classname);\n            }\n            this._bindingEventService.bind(header, 'mouseenter', this.handleHeaderMouseEnter.bind(this));\n            this._bindingEventService.bind(header, 'mouseleave', this.handleHeaderMouseLeave.bind(this));\n            Utils.storage.put(header, 'column', m);\n            if (this._options.enableColumnReorder || m.sortable) {\n                this._bindingEventService.bind(header, 'mouseenter', this.handleHeaderMouseHoverOn.bind(this));\n                this._bindingEventService.bind(header, 'mouseleave', this.handleHeaderMouseHoverOff.bind(this));\n            }\n            if (m.hasOwnProperty('headerCellAttrs') && m.headerCellAttrs instanceof Object) {\n                for (var key in m.headerCellAttrs) {\n                    if (m.headerCellAttrs.hasOwnProperty(key)) {\n                        header.setAttribute(key, m.headerCellAttrs[key]);\n                    }\n                }\n            }\n            if (m.sortable) {\n                header.classList.add('slick-header-sortable');\n                Utils.createDomElement('div', { className: \"slick-sort-indicator \".concat(this._options.numberedMultiColumnSort && !this._options.sortColNumberInSeparateSpan ? ' slick-sort-indicator-numbered' : '') }, header);\n                if (this._options.numberedMultiColumnSort && this._options.sortColNumberInSeparateSpan) {\n                    Utils.createDomElement('div', { className: 'slick-sort-indicator-numbered' }, header);\n                }\n            }\n            this.trigger(this.onHeaderCellRendered, {\n                node: header,\n                column: m,\n                grid: this\n            });\n            if (this._options.showHeaderRow) {\n                var headerRowCell = Utils.createDomElement('div', { className: \"ui-state-default slick-state-default slick-headerrow-column l\".concat(i, \" r\").concat(i) }, headerRowTarget);\n                var classname_1 = this.hasFrozenColumns() && i <= this._options.frozenColumn ? 'frozen' : null;\n                if (classname_1) {\n                    headerRowCell.classList.add(classname_1);\n                }\n                this._bindingEventService.bind(headerRowCell, 'mouseenter', this.handleHeaderRowMouseEnter.bind(this));\n                this._bindingEventService.bind(headerRowCell, 'mouseleave', this.handleHeaderRowMouseLeave.bind(this));\n                Utils.storage.put(headerRowCell, 'column', m);\n                this.trigger(this.onHeaderRowCellRendered, {\n                    node: headerRowCell,\n                    column: m,\n                    grid: this\n                });\n            }\n            if (this._options.createFooterRow && this._options.showFooterRow) {\n                var footerRowTarget = this.hasFrozenColumns() ? ((i <= this._options.frozenColumn) ? this._footerRow[0] : this._footerRow[1]) : this._footerRow[0];\n                var footerRowCell = Utils.createDomElement('div', { className: \"ui-state-default slick-state-default slick-footerrow-column l\".concat(i, \" r\").concat(i) }, footerRowTarget);\n                Utils.storage.put(footerRowCell, 'column', m);\n                this.trigger(this.onFooterRowCellRendered, {\n                    node: footerRowCell,\n                    column: m,\n                    grid: this\n                });\n            }\n        }\n        this.setSortColumns(this.sortColumns);\n        this.setupColumnResize();\n        if (this._options.enableColumnReorder) {\n            if (typeof this._options.enableColumnReorder === 'function') {\n                this._options.enableColumnReorder(this, this._headers, this.headerColumnWidthDiff, this.setColumns, this.setupColumnResize, this.columns, this.getColumnIndex, this.uid, this.trigger);\n            }\n            else {\n                this.setupColumnReorder();\n            }\n        }\n    };\n    SlickGrid.prototype.setupColumnSort = function () {\n        var _this = this;\n        this._headers.forEach(function (header) {\n            _this._bindingEventService.bind(header, 'click', function (e) {\n                if (_this.columnResizeDragging) {\n                    return;\n                }\n                if (e.target.classList.contains('slick-resizable-handle')) {\n                    return;\n                }\n                var coll = e.target.closest('.slick-header-column');\n                if (!coll) {\n                    return;\n                }\n                var column = Utils.storage.get(coll, 'column');\n                if (column.sortable) {\n                    if (!_this.getEditorLock().commitCurrentEdit()) {\n                        return;\n                    }\n                    var previousSortColumns = _this.sortColumns.slice();\n                    var sortColumn = null;\n                    var i = 0;\n                    for (; i < _this.sortColumns.length; i++) {\n                        if (_this.sortColumns[i].columnId == column.id) {\n                            sortColumn = _this.sortColumns[i];\n                            sortColumn.sortAsc = !sortColumn.sortAsc;\n                            break;\n                        }\n                    }\n                    var hadSortCol = !!sortColumn;\n                    if (_this._options.tristateMultiColumnSort) {\n                        if (!sortColumn) {\n                            sortColumn = { columnId: column.id, sortAsc: column.defaultSortAsc, sortCol: column };\n                        }\n                        if (hadSortCol && sortColumn.sortAsc) {\n                            // three state: remove sort rather than go back to ASC\n                            _this.sortColumns.splice(i, 1);\n                            sortColumn = null;\n                        }\n                        if (!_this._options.multiColumnSort) {\n                            _this.sortColumns = [];\n                        }\n                        if (sortColumn && (!hadSortCol || !_this._options.multiColumnSort)) {\n                            _this.sortColumns.push(sortColumn);\n                        }\n                    }\n                    else {\n                        // legacy behaviour\n                        if (e.metaKey && _this._options.multiColumnSort) {\n                            if (sortColumn) {\n                                _this.sortColumns.splice(i, 1);\n                            }\n                        }\n                        else {\n                            if ((!e.shiftKey && !e.metaKey) || !_this._options.multiColumnSort) {\n                                _this.sortColumns = [];\n                            }\n                            if (!sortColumn) {\n                                sortColumn = { columnId: column.id, sortAsc: column.defaultSortAsc, sortCol: column };\n                                _this.sortColumns.push(sortColumn);\n                            }\n                            else if (_this.sortColumns.length === 0) {\n                                _this.sortColumns.push(sortColumn);\n                            }\n                        }\n                    }\n                    var onSortArgs = void 0;\n                    if (!_this._options.multiColumnSort) {\n                        onSortArgs = {\n                            multiColumnSort: false,\n                            previousSortColumns: previousSortColumns,\n                            columnId: (_this.sortColumns.length > 0 ? column.id : null),\n                            sortCol: (_this.sortColumns.length > 0 ? column : null),\n                            sortAsc: (_this.sortColumns.length > 0 ? _this.sortColumns[0].sortAsc : true)\n                        };\n                    }\n                    else {\n                        onSortArgs = {\n                            multiColumnSort: true,\n                            previousSortColumns: previousSortColumns,\n                            sortCols: _this.sortColumns.map(function (col) {\n                                return { columnId: _this.columns[_this.getColumnIndex(col.columnId)].id, sortCol: _this.columns[_this.getColumnIndex(col.columnId)], sortAsc: col.sortAsc };\n                            })\n                        };\n                    }\n                    if (_this.trigger(_this.onBeforeSort, onSortArgs, e).getReturnValue() !== false) {\n                        _this.setSortColumns(_this.sortColumns);\n                        _this.trigger(_this.onSort, onSortArgs, e);\n                    }\n                }\n            });\n        });\n    };\n    SlickGrid.prototype.currentPositionInHeader = function (id) {\n        var currentPosition = 0;\n        this._headers.forEach(function (header) {\n            var columnElements = header.querySelectorAll('.slick-header-column');\n            columnElements.forEach(function (column, i) {\n                if (column.id == id) {\n                    currentPosition = i;\n                }\n            });\n        });\n        return currentPosition;\n    };\n    SlickGrid.prototype.remove = function (arr, elem) {\n        var index = arr.lastIndexOf(elem);\n        if (index > -1) {\n            arr.splice(index, 1);\n            this.remove(arr, elem);\n        }\n    };\n    SlickGrid.prototype.setupColumnReorder = function () {\n        var _this = this;\n        if (this.sortableSideLeftInstance) {\n            this.sortableSideLeftInstance.destroy();\n            this.sortableSideRightInstance.destroy();\n        }\n        var columnScrollTimer = null;\n        var scrollColumnsRight = function () { return _this._viewportScrollContainerX.scrollLeft = _this._viewportScrollContainerX.scrollLeft + 10; };\n        var scrollColumnsLeft = function () { return _this._viewportScrollContainerX.scrollLeft = _this._viewportScrollContainerX.scrollLeft - 10; };\n        var canDragScroll;\n        var sortableOptions = {\n            animation: 50,\n            direction: 'horizontal',\n            chosenClass: 'slick-header-column-active',\n            ghostClass: 'slick-sortable-placeholder',\n            draggable: '.slick-header-column',\n            dragoverBubble: false,\n            revertClone: true,\n            scroll: !this.hasFrozenColumns(),\n            onStart: function (e) {\n                canDragScroll = !_this.hasFrozenColumns() ||\n                    Utils.offset(e.item).left > Utils.offset(_this._viewportScrollContainerX).left;\n                if (canDragScroll && e.originalEvent.pageX > _this._container.clientWidth) {\n                    if (!(columnScrollTimer)) {\n                        columnScrollTimer = setInterval(scrollColumnsRight, 100);\n                    }\n                }\n                else if (canDragScroll && e.originalEvent.pageX < Utils.offset(_this._viewportScrollContainerX).left) {\n                    if (!(columnScrollTimer)) {\n                        columnScrollTimer = setInterval(scrollColumnsLeft, 100);\n                    }\n                }\n                else {\n                    clearInterval(columnScrollTimer);\n                    columnScrollTimer = null;\n                }\n            },\n            onEnd: function (e) {\n                var _a, _b;\n                var cancel = false;\n                clearInterval(columnScrollTimer);\n                columnScrollTimer = null;\n                var limit;\n                if (cancel || !_this.getEditorLock().commitCurrentEdit()) {\n                    return;\n                }\n                var reorderedIds = (_a = _this.sortableSideLeftInstance) === null || _a === void 0 ? void 0 : _a.toArray();\n                reorderedIds = reorderedIds.concat((_b = _this.sortableSideRightInstance) === null || _b === void 0 ? void 0 : _b.toArray());\n                var reorderedColumns = [];\n                for (var i = 0; i < reorderedIds.length; i++) {\n                    reorderedColumns.push(_this.columns[_this.getColumnIndex(reorderedIds[i])]);\n                }\n                _this.setColumns(reorderedColumns);\n                _this.trigger(_this.onColumnsReordered, { impactedColumns: _this.getImpactedColumns(limit) });\n                e.stopPropagation();\n                _this.setupColumnResize();\n            }\n        };\n        this.sortableSideLeftInstance = Sortable.create(this._headerL, sortableOptions);\n        this.sortableSideRightInstance = Sortable.create(this._headerR, sortableOptions);\n    };\n    SlickGrid.prototype.getHeaderChildren = function () {\n        var a = Array.from(this._headers[0].children);\n        var b = Array.from(this._headers[1].children);\n        return a.concat(b);\n    };\n    SlickGrid.prototype.getImpactedColumns = function (limit) {\n        var impactedColumns = [];\n        if (limit) {\n            for (var i = limit.start; i <= limit.end; i++) {\n                impactedColumns.push(this.columns[i]);\n            }\n        }\n        else {\n            impactedColumns = this.columns;\n        }\n        return impactedColumns;\n    };\n    SlickGrid.prototype.handleResizeableHandleDoubleClick = function (evt) {\n        var triggeredByColumn = evt.target.parentElement.id.replace(this.uid, '');\n        this.trigger(this.onColumnsResizeDblClick, { triggeredByColumn: triggeredByColumn });\n    };\n    SlickGrid.prototype.setupColumnResize = function () {\n        var _this = this;\n        if (typeof Resizable === 'undefined') {\n            throw new Error(\"Slick.Resizable is undefined, make sure to import \\\"slick.interactions.js\\\"\");\n        }\n        var j, k, c, pageX, minPageX, maxPageX, firstResizable, lastResizable = -1;\n        var frozenLeftColMaxWidth = 0;\n        var children = this.getHeaderChildren();\n        for (var i = 0; i < children.length; i++) {\n            var child = children[i];\n            var handles = child.querySelectorAll('.slick-resizable-handle');\n            handles.forEach(function (handle) { return handle.remove(); });\n            if (i >= this.columns.length || !this.columns[i] || this.columns[i].hidden) {\n                continue;\n            }\n            if (this.columns[i].resizable) {\n                if (firstResizable === undefined) {\n                    firstResizable = i;\n                }\n                lastResizable = i;\n            }\n        }\n        if (firstResizable === undefined) {\n            return;\n        }\n        var _loop_1 = function (i) {\n            var colElm = children[i];\n            if (i >= this_1.columns.length || !this_1.columns[i] || this_1.columns[i].hidden) {\n                return \"continue\";\n            }\n            if (i < firstResizable || (this_1._options.forceFitColumns && i >= lastResizable)) {\n                return \"continue\";\n            }\n            var resizeableHandle = Utils.createDomElement('div', { className: 'slick-resizable-handle', role: 'separator', ariaOrientation: 'horizontal' }, colElm);\n            this_1._bindingEventService.bind(resizeableHandle, 'dblclick', this_1.handleResizeableHandleDoubleClick.bind(this_1));\n            this_1.slickResizableInstances.push(Resizable({\n                resizeableElement: colElm,\n                resizeableHandleElement: resizeableHandle,\n                onResizeStart: function (e, resizeElms) {\n                    var targetEvent = e.touches ? e.touches[0] : e;\n                    if (!_this.getEditorLock().commitCurrentEdit()) {\n                        return false;\n                    }\n                    pageX = targetEvent.pageX;\n                    frozenLeftColMaxWidth = 0;\n                    resizeElms.resizeableElement.classList.add('slick-header-column-active');\n                    var shrinkLeewayOnRight = null;\n                    var stretchLeewayOnRight = null;\n                    // lock each column's width option to current width\n                    for (var pw = 0; pw < children.length; pw++) {\n                        if (pw >= _this.columns.length || !_this.columns[pw] || _this.columns[pw].hidden) {\n                            continue;\n                        }\n                        _this.columns[pw].previousWidth = children[pw].offsetWidth;\n                    }\n                    if (_this._options.forceFitColumns) {\n                        shrinkLeewayOnRight = 0;\n                        stretchLeewayOnRight = 0;\n                        // colums on right affect maxPageX/minPageX\n                        for (j = i + 1; j < _this.columns.length; j++) {\n                            c = _this.columns[j];\n                            if (c && c.resizable && !c.hidden) {\n                                if (stretchLeewayOnRight !== null) {\n                                    if (c.maxWidth) {\n                                        stretchLeewayOnRight += c.maxWidth - (c.previousWidth || 0);\n                                    }\n                                    else {\n                                        stretchLeewayOnRight = null;\n                                    }\n                                }\n                                shrinkLeewayOnRight += (c.previousWidth || 0) - Math.max(c.minWidth || 0, _this.absoluteColumnMinWidth);\n                            }\n                        }\n                    }\n                    var shrinkLeewayOnLeft = 0;\n                    var stretchLeewayOnLeft = 0;\n                    for (j = 0; j <= i; j++) {\n                        // columns on left only affect minPageX\n                        c = _this.columns[j];\n                        if (c && c.resizable && !c.hidden) {\n                            if (stretchLeewayOnLeft !== null) {\n                                if (c.maxWidth) {\n                                    stretchLeewayOnLeft += c.maxWidth - (c.previousWidth || 0);\n                                }\n                                else {\n                                    stretchLeewayOnLeft = null;\n                                }\n                            }\n                            shrinkLeewayOnLeft += (c.previousWidth || 0) - Math.max(c.minWidth || 0, _this.absoluteColumnMinWidth);\n                        }\n                    }\n                    if (shrinkLeewayOnRight === null) {\n                        shrinkLeewayOnRight = 100000;\n                    }\n                    if (shrinkLeewayOnLeft === null) {\n                        shrinkLeewayOnLeft = 100000;\n                    }\n                    if (stretchLeewayOnRight === null) {\n                        stretchLeewayOnRight = 100000;\n                    }\n                    if (stretchLeewayOnLeft === null) {\n                        stretchLeewayOnLeft = 100000;\n                    }\n                    maxPageX = pageX + Math.min(shrinkLeewayOnRight, stretchLeewayOnLeft);\n                    minPageX = pageX - Math.min(shrinkLeewayOnLeft, stretchLeewayOnRight);\n                },\n                onResize: function (e, resizeElms) {\n                    var _a, _b;\n                    var targetEvent = e.touches ? e.touches[0] : e;\n                    _this.columnResizeDragging = true;\n                    var actualMinWidth;\n                    var d = Math.min(maxPageX, Math.max(minPageX, targetEvent.pageX)) - pageX;\n                    var x;\n                    var newCanvasWidthL = 0, newCanvasWidthR = 0;\n                    var viewportWidth = _this.viewportHasVScroll ? _this.viewportW - ((_b = (_a = _this.scrollbarDimensions) === null || _a === void 0 ? void 0 : _a.width) !== null && _b !== void 0 ? _b : 0) : _this.viewportW;\n                    if (d < 0) { // shrink column\n                        x = d;\n                        for (j = i; j >= 0; j--) {\n                            c = _this.columns[j];\n                            if (c && c.resizable && !c.hidden) {\n                                actualMinWidth = Math.max(c.minWidth || 0, _this.absoluteColumnMinWidth);\n                                if (x && (c.previousWidth || 0) + x < actualMinWidth) {\n                                    x += (c.previousWidth || 0) - actualMinWidth;\n                                    c.width = actualMinWidth;\n                                }\n                                else {\n                                    c.width = (c.previousWidth || 0) + x;\n                                    x = 0;\n                                }\n                            }\n                        }\n                        for (k = 0; k <= i; k++) {\n                            c = _this.columns[k];\n                            if (!c || c.hidden) {\n                                continue;\n                            }\n                            if (_this.hasFrozenColumns() && (k > _this._options.frozenColumn)) {\n                                newCanvasWidthR += c.width || 0;\n                            }\n                            else {\n                                newCanvasWidthL += c.width || 0;\n                            }\n                        }\n                        if (_this._options.forceFitColumns) {\n                            x = -d;\n                            for (j = i + 1; j < _this.columns.length; j++) {\n                                c = _this.columns[j];\n                                if (!c || c.hidden) {\n                                    continue;\n                                }\n                                if (c.resizable) {\n                                    if (x && c.maxWidth && (c.maxWidth - (c.previousWidth || 0) < x)) {\n                                        x -= c.maxWidth - (c.previousWidth || 0);\n                                        c.width = c.maxWidth;\n                                    }\n                                    else {\n                                        c.width = (c.previousWidth || 0) + x;\n                                        x = 0;\n                                    }\n                                    if (_this.hasFrozenColumns() && (j > _this._options.frozenColumn)) {\n                                        newCanvasWidthR += c.width || 0;\n                                    }\n                                    else {\n                                        newCanvasWidthL += c.width || 0;\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            for (j = i + 1; j < _this.columns.length; j++) {\n                                c = _this.columns[j];\n                                if (!c || c.hidden) {\n                                    continue;\n                                }\n                                if (_this.hasFrozenColumns() && (j > _this._options.frozenColumn)) {\n                                    newCanvasWidthR += c.width || 0;\n                                }\n                                else {\n                                    newCanvasWidthL += c.width || 0;\n                                }\n                            }\n                        }\n                        if (_this._options.forceFitColumns) {\n                            x = -d;\n                            for (j = i + 1; j < _this.columns.length; j++) {\n                                c = _this.columns[j];\n                                if (!c || c.hidden) {\n                                    continue;\n                                }\n                                if (c.resizable) {\n                                    if (x && c.maxWidth && (c.maxWidth - (c.previousWidth || 0) < x)) {\n                                        x -= c.maxWidth - (c.previousWidth || 0);\n                                        c.width = c.maxWidth;\n                                    }\n                                    else {\n                                        c.width = (c.previousWidth || 0) + x;\n                                        x = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else { // stretch column\n                        x = d;\n                        newCanvasWidthL = 0;\n                        newCanvasWidthR = 0;\n                        for (j = i; j >= 0; j--) {\n                            c = _this.columns[j];\n                            if (!c || c.hidden) {\n                                continue;\n                            }\n                            if (c.resizable) {\n                                if (x && c.maxWidth && (c.maxWidth - (c.previousWidth || 0) < x)) {\n                                    x -= c.maxWidth - (c.previousWidth || 0);\n                                    c.width = c.maxWidth;\n                                }\n                                else {\n                                    var newWidth = (c.previousWidth || 0) + x;\n                                    var resizedCanvasWidthL = _this.canvasWidthL + x;\n                                    if (_this.hasFrozenColumns() && (j <= _this._options.frozenColumn)) {\n                                        // if we're on the left frozen side, we need to make sure that our left section width never goes over the total viewport width\n                                        if (newWidth > frozenLeftColMaxWidth && resizedCanvasWidthL < (viewportWidth - _this._options.frozenRightViewportMinWidth)) {\n                                            frozenLeftColMaxWidth = newWidth; // keep max column width ref, if we go over the limit this number will stop increasing\n                                        }\n                                        c.width = ((resizedCanvasWidthL + _this._options.frozenRightViewportMinWidth) > viewportWidth) ? frozenLeftColMaxWidth : newWidth;\n                                    }\n                                    else {\n                                        c.width = newWidth;\n                                    }\n                                    x = 0;\n                                }\n                            }\n                        }\n                        for (k = 0; k <= i; k++) {\n                            c = _this.columns[k];\n                            if (!c || c.hidden) {\n                                continue;\n                            }\n                            if (_this.hasFrozenColumns() && (k > _this._options.frozenColumn)) {\n                                newCanvasWidthR += c.width || 0;\n                            }\n                            else {\n                                newCanvasWidthL += c.width || 0;\n                            }\n                        }\n                        if (_this._options.forceFitColumns) {\n                            x = -d;\n                            for (j = i + 1; j < _this.columns.length; j++) {\n                                c = _this.columns[j];\n                                if (!c || c.hidden) {\n                                    continue;\n                                }\n                                if (c.resizable) {\n                                    actualMinWidth = Math.max(c.minWidth || 0, _this.absoluteColumnMinWidth);\n                                    if (x && (c.previousWidth || 0) + x < actualMinWidth) {\n                                        x += (c.previousWidth || 0) - actualMinWidth;\n                                        c.width = actualMinWidth;\n                                    }\n                                    else {\n                                        c.width = (c.previousWidth || 0) + x;\n                                        x = 0;\n                                    }\n                                    if (_this.hasFrozenColumns() && (j > _this._options.frozenColumn)) {\n                                        newCanvasWidthR += c.width || 0;\n                                    }\n                                    else {\n                                        newCanvasWidthL += c.width || 0;\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            for (j = i + 1; j < _this.columns.length; j++) {\n                                c = _this.columns[j];\n                                if (!c || c.hidden) {\n                                    continue;\n                                }\n                                if (_this.hasFrozenColumns() && (j > _this._options.frozenColumn)) {\n                                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                                    newCanvasWidthR += c.width || 0;\n                                }\n                                else {\n                                    newCanvasWidthL += c.width || 0;\n                                }\n                            }\n                        }\n                    }\n                    if (_this.hasFrozenColumns() && newCanvasWidthL !== _this.canvasWidthL) {\n                        Utils.width(_this._headerL, newCanvasWidthL + 1000);\n                        Utils.setStyleSize(_this._paneHeaderR, 'left', newCanvasWidthL);\n                    }\n                    _this.applyColumnHeaderWidths();\n                    if (_this._options.syncColumnCellResize) {\n                        _this.applyColumnWidths();\n                    }\n                    _this.trigger(_this.onColumnsDrag, {\n                        triggeredByColumn: resizeElms.resizeableElement,\n                        resizeHandle: resizeElms.resizeableHandleElement\n                    });\n                },\n                onResizeEnd: function (_e, resizeElms) {\n                    resizeElms.resizeableElement.classList.remove('slick-header-column-active');\n                    var triggeredByColumn = resizeElms.resizeableElement.id.replace(_this.uid, '');\n                    if (_this.trigger(_this.onBeforeColumnsResize, { triggeredByColumn: triggeredByColumn }).getReturnValue() === true) {\n                        _this.applyColumnHeaderWidths();\n                    }\n                    var newWidth;\n                    for (j = 0; j < _this.columns.length; j++) {\n                        c = _this.columns[j];\n                        if (!c || c.hidden) {\n                            continue;\n                        }\n                        newWidth = children[j].offsetWidth;\n                        if (c.previousWidth !== newWidth && c.rerenderOnResize) {\n                            _this.invalidateAllRows();\n                        }\n                    }\n                    _this.updateCanvasWidth(true);\n                    _this.render();\n                    _this.trigger(_this.onColumnsResized, { triggeredByColumn: triggeredByColumn });\n                    setTimeout(function () { _this.columnResizeDragging = false; }, 300);\n                }\n            }));\n        };\n        var this_1 = this;\n        for (var i = 0; i < children.length; i++) {\n            _loop_1(i);\n        }\n    };\n    SlickGrid.prototype.getVBoxDelta = function (el) {\n        var p = ['borderTopWidth', 'borderBottomWidth', 'paddingTop', 'paddingBottom'];\n        var styles = getComputedStyle(el);\n        var delta = 0;\n        p.forEach(function (val) { return delta += Utils.toFloat(styles[val]); });\n        return delta;\n    };\n    SlickGrid.prototype.setFrozenOptions = function () {\n        this._options.frozenColumn = (this._options.frozenColumn >= 0 && this._options.frozenColumn < this.columns.length)\n            ? parseInt(this._options.frozenColumn)\n            : -1;\n        if (this._options.frozenRow > -1) {\n            this.hasFrozenRows = true;\n            this.frozenRowsHeight = (this._options.frozenRow) * this._options.rowHeight;\n            var dataLength = this.getDataLength();\n            this.actualFrozenRow = (this._options.frozenBottom)\n                ? (dataLength - this._options.frozenRow)\n                : this._options.frozenRow;\n        }\n        else {\n            this.hasFrozenRows = false;\n        }\n    };\n    SlickGrid.prototype.setPaneVisibility = function () {\n        if (this.hasFrozenColumns()) {\n            Utils.show(this._paneHeaderR);\n            Utils.show(this._paneTopR);\n            if (this.hasFrozenRows) {\n                Utils.show(this._paneBottomL);\n                Utils.show(this._paneBottomR);\n            }\n            else {\n                Utils.hide(this._paneBottomR);\n                Utils.hide(this._paneBottomL);\n            }\n        }\n        else {\n            Utils.hide(this._paneHeaderR);\n            Utils.hide(this._paneTopR);\n            Utils.hide(this._paneBottomR);\n            if (this.hasFrozenRows) {\n                Utils.show(this._paneBottomL);\n            }\n            else {\n                Utils.hide(this._paneBottomR);\n                Utils.hide(this._paneBottomL);\n            }\n        }\n    };\n    SlickGrid.prototype.setOverflow = function () {\n        var _a, _b, _c, _d;\n        this._viewportTopL.style.overflowX = (this.hasFrozenColumns()) ? (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'hidden' : 'scroll') : (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'hidden' : 'auto');\n        this._viewportTopL.style.overflowY = (!this.hasFrozenColumns() && this._options.alwaysShowVerticalScroll) ? 'scroll' : ((this.hasFrozenColumns()) ? (this.hasFrozenRows ? 'hidden' : 'hidden') : (this.hasFrozenRows ? 'scroll' : 'auto'));\n        this._viewportTopR.style.overflowX = (this.hasFrozenColumns()) ? (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'hidden' : 'scroll') : (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'hidden' : 'auto');\n        this._viewportTopR.style.overflowY = this._options.alwaysShowVerticalScroll ? 'scroll' : ((this.hasFrozenColumns()) ? (this.hasFrozenRows ? 'scroll' : 'auto') : (this.hasFrozenRows ? 'scroll' : 'auto'));\n        this._viewportBottomL.style.overflowX = (this.hasFrozenColumns()) ? (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'scroll' : 'auto') : (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'auto' : 'auto');\n        this._viewportBottomL.style.overflowY = (!this.hasFrozenColumns() && this._options.alwaysShowVerticalScroll) ? 'scroll' : ((this.hasFrozenColumns()) ? (this.hasFrozenRows ? 'hidden' : 'hidden') : (this.hasFrozenRows ? 'scroll' : 'auto'));\n        this._viewportBottomR.style.overflowX = (this.hasFrozenColumns()) ? (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'scroll' : 'auto') : (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'auto' : 'auto');\n        this._viewportBottomR.style.overflowY = this._options.alwaysShowVerticalScroll ? 'scroll' : ((this.hasFrozenColumns()) ? (this.hasFrozenRows ? 'auto' : 'auto') : (this.hasFrozenRows ? 'auto' : 'auto'));\n        if (this._options.viewportClass) {\n            (_a = this._viewportTopL.classList).add.apply(_a, this._options.viewportClass.split(' '));\n            (_b = this._viewportTopR.classList).add.apply(_b, this._options.viewportClass.split(' '));\n            (_c = this._viewportBottomL.classList).add.apply(_c, this._options.viewportClass.split(' '));\n            (_d = this._viewportBottomR.classList).add.apply(_d, this._options.viewportClass.split(' '));\n        }\n    };\n    SlickGrid.prototype.setScroller = function () {\n        if (this.hasFrozenColumns()) {\n            this._headerScrollContainer = this._headerScrollerR;\n            this._headerRowScrollContainer = this._headerRowScrollerR;\n            this._footerRowScrollContainer = this._footerRowScrollerR;\n            if (this.hasFrozenRows) {\n                if (this._options.frozenBottom) {\n                    this._viewportScrollContainerX = this._viewportBottomR;\n                    this._viewportScrollContainerY = this._viewportTopR;\n                }\n                else {\n                    this._viewportScrollContainerX = this._viewportScrollContainerY = this._viewportBottomR;\n                }\n            }\n            else {\n                this._viewportScrollContainerX = this._viewportScrollContainerY = this._viewportTopR;\n            }\n        }\n        else {\n            this._headerScrollContainer = this._headerScrollerL;\n            this._headerRowScrollContainer = this._headerRowScrollerL;\n            this._footerRowScrollContainer = this._footerRowScrollerL;\n            if (this.hasFrozenRows) {\n                if (this._options.frozenBottom) {\n                    this._viewportScrollContainerX = this._viewportBottomL;\n                    this._viewportScrollContainerY = this._viewportTopL;\n                }\n                else {\n                    this._viewportScrollContainerX = this._viewportScrollContainerY = this._viewportBottomL;\n                }\n            }\n            else {\n                this._viewportScrollContainerX = this._viewportScrollContainerY = this._viewportTopL;\n            }\n        }\n    };\n    SlickGrid.prototype.measureCellPaddingAndBorder = function () {\n        var _this = this;\n        var h = ['borderLeftWidth', 'borderRightWidth', 'paddingLeft', 'paddingRight'];\n        var v = ['borderTopWidth', 'borderBottomWidth', 'paddingTop', 'paddingBottom'];\n        var header = this._headers[0];\n        this.headerColumnWidthDiff = this.headerColumnHeightDiff = 0;\n        this.cellWidthDiff = this.cellHeightDiff = 0;\n        var el = Utils.createDomElement('div', { className: 'ui-state-default slick-state-default slick-header-column', style: { visibility: 'hidden' }, textContent: '-' }, header);\n        var style = getComputedStyle(el);\n        if (style.boxSizing !== 'border-box') {\n            h.forEach(function (val) { return _this.headerColumnWidthDiff += Utils.toFloat(style[val]); });\n            v.forEach(function (val) { return _this.headerColumnHeightDiff += Utils.toFloat(style[val]); });\n        }\n        el.remove();\n        var r = Utils.createDomElement('div', { className: 'slick-row' }, this._canvas[0]);\n        el = Utils.createDomElement('div', { className: 'slick-cell', id: '', style: { visibility: 'hidden' }, textContent: '-' }, r);\n        style = getComputedStyle(el);\n        if (style.boxSizing !== 'border-box') {\n            h.forEach(function (val) { return _this.cellWidthDiff += Utils.toFloat(style[val]); });\n            v.forEach(function (val) { return _this.cellHeightDiff += Utils.toFloat(style[val]); });\n        }\n        r.remove();\n        this.absoluteColumnMinWidth = Math.max(this.headerColumnWidthDiff, this.cellWidthDiff);\n    };\n    SlickGrid.prototype.createCssRules = function () {\n        var template = Utils.createDomElement('template', { innerHTML: '<style type=\"text/css\" rel=\"stylesheet\" />' });\n        this._style = template.content.firstChild;\n        document.head.appendChild(this._style);\n        var rowHeight = (this._options.rowHeight - this.cellHeightDiff);\n        var rules = [\n            \".\".concat(this.uid, \" .slick-group-header-column { left: 1000px; }\"),\n            \".\".concat(this.uid, \" .slick-header-column { left: 1000px; }\"),\n            \".\".concat(this.uid, \" .slick-top-panel { height: \").concat(this._options.topPanelHeight, \"px; }\"),\n            \".\".concat(this.uid, \" .slick-preheader-panel { height: \").concat(this._options.preHeaderPanelHeight, \"px; }\"),\n            \".\".concat(this.uid, \" .slick-headerrow-columns { height: \").concat(this._options.headerRowHeight, \"px; }\"),\n            \".\".concat(this.uid, \" .slick-footerrow-columns { height: \").concat(this._options.footerRowHeight, \"px; }\"),\n            \".\".concat(this.uid, \" .slick-cell { height: \").concat(rowHeight, \"px; }\"),\n            \".\".concat(this.uid, \" .slick-row { height: \").concat(this._options.rowHeight, \"px; }\")\n        ];\n        for (var i = 0; i < this.columns.length; i++) {\n            if (!this.columns[i] || this.columns[i].hidden)\n                continue;\n            rules.push(\".\".concat(this.uid, \" .l\").concat(i, \" { }\"));\n            rules.push(\".\".concat(this.uid, \" .r\").concat(i, \" { }\"));\n        }\n        if (this._style.styleSheet) { // IE\n            this._style.styleSheet.cssText = rules.join(' ');\n        }\n        else {\n            this._style.appendChild(document.createTextNode(rules.join(' ')));\n        }\n    };\n    SlickGrid.prototype.getColumnCssRules = function (idx) {\n        var i;\n        if (!this.stylesheet) {\n            var sheets = document.styleSheets;\n            for (i = 0; i < sheets.length; i++) {\n                if ((sheets[i].ownerNode || sheets[i].owningElement) == this._style) {\n                    this.stylesheet = sheets[i];\n                    break;\n                }\n            }\n            if (!this.stylesheet) {\n                throw new Error('SlickGrid Cannot find stylesheet.');\n            }\n            // find and cache column CSS rules\n            this.columnCssRulesL = [];\n            this.columnCssRulesR = [];\n            var cssRules = (this.stylesheet.cssRules || this.stylesheet.rules);\n            var matches = void 0, columnIdx = void 0;\n            for (i = 0; i < cssRules.length; i++) {\n                var selector = cssRules[i].selectorText;\n                if (matches = /\\.l\\d+/.exec(selector)) {\n                    columnIdx = parseInt(matches[0].substr(2, matches[0].length - 2), 10);\n                    this.columnCssRulesL[columnIdx] = cssRules[i];\n                }\n                else if (matches = /\\.r\\d+/.exec(selector)) {\n                    columnIdx = parseInt(matches[0].substr(2, matches[0].length - 2), 10);\n                    this.columnCssRulesR[columnIdx] = cssRules[i];\n                }\n            }\n        }\n        return {\n            left: this.columnCssRulesL[idx],\n            right: this.columnCssRulesR[idx]\n        };\n    };\n    SlickGrid.prototype.removeCssRules = function () {\n        this._style.remove();\n        this.stylesheet = null;\n    };\n    /**\n     * Destroy (dispose) of SlickGrid\n     * @param {boolean} shouldDestroyAllElements - do we want to destroy (nullify) all DOM elements as well? This help in avoiding mem leaks\n     */\n    SlickGrid.prototype.destroy = function (shouldDestroyAllElements) {\n        var _this = this;\n        var _a;\n        this._bindingEventService.unbindAll();\n        this.slickDraggableInstance = this.destroyAllInstances(this.slickDraggableInstance);\n        this.slickMouseWheelInstances = this.destroyAllInstances(this.slickMouseWheelInstances);\n        this.slickResizableInstances = this.destroyAllInstances(this.slickResizableInstances);\n        this.getEditorLock().cancelCurrentEdit();\n        this.trigger(this.onBeforeDestroy, {});\n        var i = this.plugins.length;\n        while (i--) {\n            this.unregisterPlugin(this.plugins[i]);\n        }\n        if (this._options.enableColumnReorder && typeof ((_a = this.sortableSideLeftInstance) === null || _a === void 0 ? void 0 : _a.destroy) === 'function') {\n            this.sortableSideLeftInstance.destroy();\n            this.sortableSideRightInstance.destroy();\n        }\n        this.unbindAncestorScrollEvents();\n        this._bindingEventService.unbindByEventName(this._container, 'resize');\n        this.removeCssRules();\n        this._canvas.forEach(function (element) {\n            _this._bindingEventService.unbindByEventName(element, 'keydown');\n            _this._bindingEventService.unbindByEventName(element, 'click');\n            _this._bindingEventService.unbindByEventName(element, 'dblclick');\n            _this._bindingEventService.unbindByEventName(element, 'contextmenu');\n            _this._bindingEventService.unbindByEventName(element, 'mouseover');\n            _this._bindingEventService.unbindByEventName(element, 'mouseout');\n        });\n        this._viewport.forEach(function (view) {\n            _this._bindingEventService.unbindByEventName(view, 'scroll');\n        });\n        this._headerScroller.forEach(function (el) {\n            _this._bindingEventService.unbindByEventName(el, 'contextmenu');\n            _this._bindingEventService.unbindByEventName(el, 'click');\n        });\n        this._headerRowScroller.forEach(function (scroller) {\n            _this._bindingEventService.unbindByEventName(scroller, 'scroll');\n        });\n        if (this._footerRow) {\n            this._footerRow.forEach(function (footer) {\n                _this._bindingEventService.unbindByEventName(footer, 'contextmenu');\n                _this._bindingEventService.unbindByEventName(footer, 'click');\n            });\n        }\n        if (this._footerRowScroller) {\n            this._footerRowScroller.forEach(function (scroller) {\n                _this._bindingEventService.unbindByEventName(scroller, 'scroll');\n            });\n        }\n        if (this._preHeaderPanelScroller) {\n            this._bindingEventService.unbindByEventName(this._preHeaderPanelScroller, 'scroll');\n        }\n        this._bindingEventService.unbindByEventName(this._focusSink, 'keydown');\n        this._bindingEventService.unbindByEventName(this._focusSink2, 'keydown');\n        var resizeHandles = this._container.querySelectorAll('.slick-resizable-handle');\n        [].forEach.call(resizeHandles, function (handle) {\n            _this._bindingEventService.unbindByEventName(handle, 'dblclick');\n        });\n        var headerColumns = this._container.querySelectorAll('.slick-header-column');\n        [].forEach.call(headerColumns, function (column) {\n            _this._bindingEventService.unbindByEventName(column, 'mouseenter');\n            _this._bindingEventService.unbindByEventName(column, 'mouseleave');\n            _this._bindingEventService.unbindByEventName(column, 'mouseenter');\n            _this._bindingEventService.unbindByEventName(column, 'mouseleave');\n        });\n        Utils.emptyElement(this._container);\n        this._container.classList.remove(this.uid);\n        if (shouldDestroyAllElements) {\n            this.destroyAllElements();\n        }\n    };\n    /**\n     * call destroy method, when exists, on all the instance(s) it found\n     * @params instances - can be a single instance or a an array of instances\n     */\n    SlickGrid.prototype.destroyAllInstances = function (inputInstances) {\n        if (inputInstances) {\n            var instances = Array.isArray(inputInstances) ? inputInstances : [inputInstances];\n            var instance = void 0;\n            while ((instance = instances.pop()) != null) {\n                if (instance && typeof instance.destroy === 'function') {\n                    instance.destroy();\n                }\n            }\n        }\n        // reset instance(s)\n        inputInstances = (Array.isArray(inputInstances) ? [] : null);\n        return inputInstances;\n    };\n    SlickGrid.prototype.destroyAllElements = function () {\n        this._activeCanvasNode = null;\n        this._activeViewportNode = null;\n        this._boundAncestors = null;\n        this._canvas = null;\n        this._canvasTopL = null;\n        this._canvasTopR = null;\n        this._canvasBottomL = null;\n        this._canvasBottomR = null;\n        this._container = null;\n        this._focusSink = null;\n        this._focusSink2 = null;\n        this._groupHeaders = null;\n        this._groupHeadersL = null;\n        this._groupHeadersR = null;\n        this._headerL = null;\n        this._headerR = null;\n        this._headers = null;\n        this._headerRows = null;\n        this._headerRowL = null;\n        this._headerRowR = null;\n        this._headerRowSpacerL = null;\n        this._headerRowSpacerR = null;\n        this._headerRowScrollContainer = null;\n        this._headerRowScroller = null;\n        this._headerRowScrollerL = null;\n        this._headerRowScrollerR = null;\n        this._headerScrollContainer = null;\n        this._headerScroller = null;\n        this._headerScrollerL = null;\n        this._headerScrollerR = null;\n        this._hiddenParents = null;\n        this._footerRow = null;\n        this._footerRowL = null;\n        this._footerRowR = null;\n        this._footerRowSpacerL = null;\n        this._footerRowSpacerR = null;\n        this._footerRowScroller = null;\n        this._footerRowScrollerL = null;\n        this._footerRowScrollerR = null;\n        this._footerRowScrollContainer = null;\n        this._preHeaderPanel = null;\n        this._preHeaderPanelR = null;\n        this._preHeaderPanelScroller = null;\n        this._preHeaderPanelScrollerR = null;\n        this._preHeaderPanelSpacer = null;\n        this._preHeaderPanelSpacerR = null;\n        this._topPanels = null;\n        this._topPanelScrollers = null;\n        this._style = null;\n        this._topPanelScrollerL = null;\n        this._topPanelScrollerR = null;\n        this._topPanelL = null;\n        this._topPanelR = null;\n        this._paneHeaderL = null;\n        this._paneHeaderR = null;\n        this._paneTopL = null;\n        this._paneTopR = null;\n        this._paneBottomL = null;\n        this._paneBottomR = null;\n        this._viewport = null;\n        this._viewportTopL = null;\n        this._viewportTopR = null;\n        this._viewportBottomL = null;\n        this._viewportBottomR = null;\n        this._viewportScrollContainerX = null;\n        this._viewportScrollContainerY = null;\n    };\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // Column Autosizing\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    /** Proportionally resize a specific column by its name, index or Id */\n    SlickGrid.prototype.autosizeColumn = function (columnOrIndexOrId, isInit) {\n        var colDef = null;\n        var colIndex = -1;\n        if (typeof columnOrIndexOrId === 'number') {\n            colDef = this.columns[columnOrIndexOrId];\n            colIndex = columnOrIndexOrId;\n        }\n        else if (typeof columnOrIndexOrId === 'string') {\n            for (var i = 0; i < this.columns.length; i++) {\n                if (this.columns[i].id === columnOrIndexOrId) {\n                    colDef = this.columns[i];\n                    colIndex = i;\n                }\n            }\n        }\n        if (!colDef) {\n            return;\n        }\n        var gridCanvas = this.getCanvasNode(0, 0);\n        this.getColAutosizeWidth(colDef, colIndex, gridCanvas, isInit || false, colIndex);\n    };\n    SlickGrid.prototype.treatAsLocked = function (autoSize) {\n        var _a;\n        if (autoSize === void 0) { autoSize = {}; }\n        // treat as locked (don't resize) if small and header is the widest part\n        return !autoSize.ignoreHeaderText\n            && !autoSize.sizeToRemaining\n            && (autoSize.contentSizePx === autoSize.headerWidthPx)\n            && (((_a = autoSize.widthPx) !== null && _a !== void 0 ? _a : 0) < 100);\n    };\n    /** Proportionately resizes all columns to fill available horizontal space. This does not take the cell contents into consideration. */\n    SlickGrid.prototype.autosizeColumns = function (autosizeMode, isInit) {\n        this.cacheCssForHiddenInit();\n        this.internalAutosizeColumns(autosizeMode, isInit);\n        this.restoreCssFromHiddenInit();\n    };\n    SlickGrid.prototype.internalAutosizeColumns = function (autosizeMode, isInit) {\n        var _a, _b, _c, _d, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y;\n        //LogColWidths();\n        autosizeMode = autosizeMode || this._options.autosizeColsMode;\n        if (autosizeMode === GridAutosizeColsMode.LegacyForceFit || autosizeMode === GridAutosizeColsMode.LegacyOff) {\n            this.legacyAutosizeColumns();\n            return;\n        }\n        if (autosizeMode === GridAutosizeColsMode.None) {\n            return;\n        }\n        // test for brower canvas support, canvas_context!=null if supported\n        this.canvas = document.createElement('canvas');\n        if ((_a = this.canvas) === null || _a === void 0 ? void 0 : _a.getContext) {\n            this.canvas_context = this.canvas.getContext('2d');\n        }\n        // pass in the grid canvas\n        var gridCanvas = this.getCanvasNode(0, 0);\n        var viewportWidth = this.viewportHasVScroll ? this.viewportW - ((_c = (_b = this.scrollbarDimensions) === null || _b === void 0 ? void 0 : _b.width) !== null && _c !== void 0 ? _c : 0) : this.viewportW;\n        // iterate columns to get autosizes\n        var i, c, colWidth, reRender = false, totalWidth = 0, totalWidthLessSTR = 0, strColsMinWidth = 0, totalMinWidth = 0, totalLockedColWidth = 0;\n        for (i = 0; i < this.columns.length; i++) {\n            c = this.columns[i];\n            this.getColAutosizeWidth(c, i, gridCanvas, isInit || false, i);\n            totalLockedColWidth += (((_d = c.autoSize) === null || _d === void 0 ? void 0 : _d.autosizeMode) === ColAutosizeMode.Locked ? (c.width || 0) : (this.treatAsLocked(c.autoSize) ? ((_f = c.autoSize) === null || _f === void 0 ? void 0 : _f.widthPx) || 0 : 0));\n            totalMinWidth += (((_g = c.autoSize) === null || _g === void 0 ? void 0 : _g.autosizeMode) === ColAutosizeMode.Locked ? (c.width || 0) : (this.treatAsLocked(c.autoSize) ? ((_h = c.autoSize) === null || _h === void 0 ? void 0 : _h.widthPx) || 0 : c.minWidth || 0));\n            totalWidth += (((_j = c.autoSize) === null || _j === void 0 ? void 0 : _j.widthPx) || 0);\n            totalWidthLessSTR += (((_k = c.autoSize) === null || _k === void 0 ? void 0 : _k.sizeToRemaining) ? 0 : ((_l = c.autoSize) === null || _l === void 0 ? void 0 : _l.widthPx) || 0);\n            strColsMinWidth += (((_m = c.autoSize) === null || _m === void 0 ? void 0 : _m.sizeToRemaining) ? c.minWidth || 0 : 0);\n        }\n        var strColTotalGuideWidth = totalWidth - totalWidthLessSTR;\n        if (autosizeMode === GridAutosizeColsMode.FitViewportToCols) {\n            // - if viewport with is outside MinViewportWidthPx and MaxViewportWidthPx, then the viewport is set to\n            //   MinViewportWidthPx or MaxViewportWidthPx and the FitColsToViewport algorithm is used\n            // - viewport is resized to fit columns\n            var setWidth = totalWidth + ((_p = (_o = this.scrollbarDimensions) === null || _o === void 0 ? void 0 : _o.width) !== null && _p !== void 0 ? _p : 0);\n            autosizeMode = GridAutosizeColsMode.IgnoreViewport;\n            if (this._options.viewportMaxWidthPx && setWidth > this._options.viewportMaxWidthPx) {\n                setWidth = this._options.viewportMaxWidthPx;\n                autosizeMode = GridAutosizeColsMode.FitColsToViewport;\n            }\n            else if (this._options.viewportMinWidthPx && setWidth < this._options.viewportMinWidthPx) {\n                setWidth = this._options.viewportMinWidthPx;\n                autosizeMode = GridAutosizeColsMode.FitColsToViewport;\n            }\n            else {\n                // falling back to IgnoreViewport will size the columns as-is, with render checking\n                //for (i = 0; i < columns.length; i++) { columns[i].width = columns[i].autoSize.widthPx; }\n            }\n            Utils.width(this._container, setWidth);\n        }\n        if (autosizeMode === GridAutosizeColsMode.FitColsToViewport) {\n            if (strColTotalGuideWidth > 0 && totalWidthLessSTR < viewportWidth - strColsMinWidth) {\n                // if addl space remains in the viewport and there are SizeToRemaining cols, just the SizeToRemaining cols expand proportionally to fill viewport\n                for (i = 0; i < this.columns.length; i++) {\n                    c = this.columns[i];\n                    if (!c || c.hidden)\n                        continue;\n                    var totalSTRViewportWidth = viewportWidth - totalWidthLessSTR;\n                    if ((_q = c.autoSize) === null || _q === void 0 ? void 0 : _q.sizeToRemaining) {\n                        colWidth = totalSTRViewportWidth * (((_r = c.autoSize) === null || _r === void 0 ? void 0 : _r.widthPx) || 0) / strColTotalGuideWidth;\n                    }\n                    else {\n                        colWidth = (((_s = c.autoSize) === null || _s === void 0 ? void 0 : _s.widthPx) || 0);\n                    }\n                    if (c.rerenderOnResize && (c.width || 0) !== colWidth) {\n                        reRender = true;\n                    }\n                    c.width = colWidth;\n                }\n            }\n            else if ((this._options.viewportSwitchToScrollModeWidthPercent && totalWidthLessSTR + strColsMinWidth > viewportWidth * this._options.viewportSwitchToScrollModeWidthPercent / 100)\n                || (totalMinWidth > viewportWidth)) {\n                // if the total columns width is wider than the viewport by switchToScrollModeWidthPercent, switch to IgnoreViewport mode\n                autosizeMode = GridAutosizeColsMode.IgnoreViewport;\n            }\n            else {\n                // otherwise (ie. no SizeToRemaining cols or viewport smaller than columns) all cols other than 'Locked' scale in proportion to fill viewport\n                // and SizeToRemaining get minWidth\n                var unallocatedColWidth = totalWidthLessSTR - totalLockedColWidth;\n                var unallocatedViewportWidth = viewportWidth - totalLockedColWidth - strColsMinWidth;\n                for (i = 0; i < this.columns.length; i++) {\n                    c = this.columns[i];\n                    if (!c || c.hidden)\n                        continue;\n                    colWidth = c.width || 0;\n                    if (((_t = c.autoSize) === null || _t === void 0 ? void 0 : _t.autosizeMode) !== ColAutosizeMode.Locked && !this.treatAsLocked(c.autoSize)) {\n                        if ((_u = c.autoSize) === null || _u === void 0 ? void 0 : _u.sizeToRemaining) {\n                            colWidth = c.minWidth || 0;\n                        }\n                        else {\n                            // size width proportionally to free space (we know we have enough room due to the earlier calculations)\n                            colWidth = unallocatedViewportWidth / unallocatedColWidth * (((_v = c.autoSize) === null || _v === void 0 ? void 0 : _v.widthPx) || 0) - 1;\n                            if (colWidth < (c.minWidth || 0)) {\n                                colWidth = c.minWidth || 0;\n                            }\n                            // remove the just allocated widths from the allocation pool\n                            unallocatedColWidth -= (((_w = c.autoSize) === null || _w === void 0 ? void 0 : _w.widthPx) || 0);\n                            unallocatedViewportWidth -= colWidth;\n                        }\n                    }\n                    if (this.treatAsLocked(c.autoSize)) {\n                        colWidth = (((_x = c.autoSize) === null || _x === void 0 ? void 0 : _x.widthPx) || 0);\n                        if (colWidth < (c.minWidth || 0)) {\n                            colWidth = c.minWidth || 0;\n                        }\n                    }\n                    if (c.rerenderOnResize && c.width !== colWidth) {\n                        reRender = true;\n                    }\n                    c.width = colWidth;\n                }\n            }\n        }\n        if (autosizeMode === GridAutosizeColsMode.IgnoreViewport) {\n            // just size columns as-is\n            for (i = 0; i < this.columns.length; i++) {\n                if (!this.columns[i] || this.columns[i].hidden)\n                    continue;\n                colWidth = ((_y = this.columns[i].autoSize) === null || _y === void 0 ? void 0 : _y.widthPx) || 0;\n                if (this.columns[i].rerenderOnResize && this.columns[i].width !== colWidth) {\n                    reRender = true;\n                }\n                this.columns[i].width = colWidth;\n            }\n        }\n        this.reRenderColumns(reRender);\n    };\n    SlickGrid.prototype.LogColWidths = function () {\n        var s = 'Col Widths:';\n        for (var i = 0; i < this.columns.length; i++) {\n            s += ' ' + (this.columns[i].hidden ? 'H' : this.columns[i].width);\n        }\n        console.log(s);\n    };\n    SlickGrid.prototype.getColAutosizeWidth = function (columnDef, colIndex, gridCanvas, isInit, colArrayIndex) {\n        var _a;\n        var autoSize = columnDef.autoSize;\n        // set to width as default\n        autoSize.widthPx = columnDef.width;\n        if (autoSize.autosizeMode === ColAutosizeMode.Locked\n            || autoSize.autosizeMode === ColAutosizeMode.Guide) {\n            return;\n        }\n        var dl = this.getDataLength(); //getDataItem();\n        var isoDateRegExp = new RegExp(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z/);\n        // ContentIntelligent takes settings from column data type\n        if (autoSize.autosizeMode === ColAutosizeMode.ContentIntelligent) {\n            // default to column colDataTypeOf (can be used if initially there are no data rows)\n            var colDataTypeOf = autoSize.colDataTypeOf;\n            var colDataItem = void 0;\n            if (dl > 0) {\n                var tempRow = this.getDataItem(0);\n                if (tempRow) {\n                    colDataItem = tempRow[columnDef.field];\n                    // check for dates in hiding\n                    if (isoDateRegExp.test(colDataItem)) {\n                        colDataItem = Date.parse(colDataItem);\n                    }\n                    colDataTypeOf = typeof colDataItem;\n                    if (colDataTypeOf === 'object') {\n                        if (colDataItem instanceof Date) {\n                            colDataTypeOf = 'date';\n                        }\n                        if (typeof moment !== 'undefined' && colDataItem instanceof moment) {\n                            colDataTypeOf = 'moment';\n                        }\n                    }\n                }\n            }\n            if (colDataTypeOf === 'boolean') {\n                autoSize.colValueArray = [true, false];\n            }\n            if (colDataTypeOf === 'number') {\n                autoSize.valueFilterMode = ValueFilterMode.GetGreatestAndSub;\n                autoSize.rowSelectionMode = RowSelectionMode.AllRows;\n            }\n            if (colDataTypeOf === 'string') {\n                autoSize.valueFilterMode = ValueFilterMode.GetLongestText;\n                autoSize.rowSelectionMode = RowSelectionMode.AllRows;\n                autoSize.allowAddlPercent = 5;\n            }\n            if (colDataTypeOf === 'date') {\n                autoSize.colValueArray = [new Date(2009, 8, 30, 12, 20, 20)]; // Sep 30th 2009, 12:20:20 AM\n            }\n            if (colDataTypeOf === 'moment' && typeof moment !== 'undefined') {\n                autoSize.colValueArray = [moment([2009, 8, 30, 12, 20, 20])]; // Sep 30th 2009, 12:20:20 AM\n            }\n        }\n        // at this point, the autosizeMode is effectively 'Content', so proceed to get size\n        var colWidth = autoSize.contentSizePx = this.getColContentSize(columnDef, colIndex, gridCanvas, isInit, colArrayIndex);\n        if (colWidth === 0) {\n            colWidth = autoSize.widthPx || 0;\n        }\n        var addlPercentMultiplier = (autoSize.allowAddlPercent ? (1 + autoSize.allowAddlPercent / 100) : 1);\n        colWidth = colWidth * addlPercentMultiplier + (this._options.autosizeColPaddingPx || 0);\n        if (columnDef.minWidth && colWidth < columnDef.minWidth) {\n            colWidth = columnDef.minWidth;\n        }\n        if (columnDef.maxWidth && colWidth > columnDef.maxWidth) {\n            colWidth = columnDef.maxWidth;\n        }\n        if (autoSize.autosizeMode === ColAutosizeMode.ContentExpandOnly || ((_a = columnDef === null || columnDef === void 0 ? void 0 : columnDef.editor) === null || _a === void 0 ? void 0 : _a.ControlFillsColumn)) {\n            // only use content width if it's wider than the default column width (this is used for dropdowns and other fixed width controls)\n            if (colWidth < (columnDef.width || 0)) {\n                colWidth = columnDef.width || 0;\n            }\n        }\n        autoSize.widthPx = colWidth;\n    };\n    SlickGrid.prototype.getColContentSize = function (columnDef, colIndex, gridCanvas, isInit, colArrayIndex) {\n        var _this = this;\n        var autoSize = columnDef.autoSize;\n        var widthAdjustRatio = 1;\n        // at this point, the autosizeMode is effectively 'Content', so proceed to get size\n        // get header width, if we are taking notice of it\n        var i;\n        var tempVal, maxLen = 0;\n        var maxColWidth = 0;\n        autoSize.headerWidthPx = 0;\n        if (!autoSize.ignoreHeaderText) {\n            autoSize.headerWidthPx = this.getColHeaderWidth(columnDef);\n        }\n        if (autoSize.headerWidthPx === 0) {\n            autoSize.headerWidthPx = (columnDef.width ? columnDef.width\n                : (columnDef.maxWidth ? columnDef.maxWidth\n                    : (columnDef.minWidth ? columnDef.minWidth : 20)));\n        }\n        if (autoSize.colValueArray) {\n            // if an array of values are specified, just pass them in instead of data\n            maxColWidth = this.getColWidth(columnDef, gridCanvas, autoSize.colValueArray);\n            return Math.max(autoSize.headerWidthPx, maxColWidth);\n        }\n        // select rows to evaluate using rowSelectionMode and rowSelectionCount\n        var rowInfo = {};\n        rowInfo.colIndex = colIndex;\n        rowInfo.rowCount = this.getDataLength();\n        rowInfo.startIndex = 0;\n        rowInfo.endIndex = rowInfo.rowCount - 1;\n        rowInfo.valueArr = null;\n        rowInfo.getRowVal = function (i) { return _this.getDataItem(i)[columnDef.field]; };\n        var rowSelectionMode = (isInit ? autoSize.rowSelectionModeOnInit : undefined) || autoSize.rowSelectionMode;\n        if (rowSelectionMode === RowSelectionMode.FirstRow) {\n            rowInfo.endIndex = 0;\n        }\n        if (rowSelectionMode === RowSelectionMode.LastRow) {\n            rowInfo.endIndex = rowInfo.startIndex = rowInfo.rowCount - 1;\n        }\n        if (rowSelectionMode === RowSelectionMode.FirstNRows) {\n            rowInfo.endIndex = Math.min(autoSize.rowSelectionCount || 0, rowInfo.rowCount) - 1;\n        }\n        // now use valueFilterMode to further filter selected rows\n        if (autoSize.valueFilterMode === ValueFilterMode.DeDuplicate) {\n            var rowsDict = {};\n            for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\n                rowsDict[rowInfo.getRowVal(i)] = true;\n            }\n            if (Object.keys) {\n                rowInfo.valueArr = Object.keys(rowsDict);\n            }\n            else {\n                rowInfo.valueArr = [];\n                for (var v in rowsDict) {\n                    rowInfo.valueArr.push(v);\n                }\n            }\n            rowInfo.startIndex = 0;\n            rowInfo.endIndex = rowInfo.length - 1;\n        }\n        if (autoSize.valueFilterMode === ValueFilterMode.GetGreatestAndSub) {\n            // get greatest abs value in data\n            var maxVal = void 0, maxAbsVal = 0;\n            for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\n                tempVal = rowInfo.getRowVal(i);\n                if (Math.abs(tempVal) > maxAbsVal) {\n                    maxVal = tempVal;\n                    maxAbsVal = Math.abs(tempVal);\n                }\n            }\n            // now substitute a '9' for all characters (to get widest width) and convert back to a number\n            maxVal = '' + maxVal;\n            maxVal = Array(maxVal.length + 1).join('9');\n            maxVal = +maxVal;\n            rowInfo.valueArr = [maxVal];\n            rowInfo.startIndex = rowInfo.endIndex = 0;\n        }\n        if (autoSize.valueFilterMode === ValueFilterMode.GetLongestTextAndSub) {\n            // get greatest abs value in data\n            for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\n                tempVal = rowInfo.getRowVal(i);\n                if ((tempVal || '').length > maxLen) {\n                    maxLen = tempVal.length;\n                }\n            }\n            // now substitute a 'm' for all characters\n            tempVal = Array(maxLen + 1).join('m');\n            widthAdjustRatio = this._options.autosizeTextAvgToMWidthRatio || 0;\n            rowInfo.maxLen = maxLen;\n            rowInfo.valueArr = [tempVal];\n            rowInfo.startIndex = rowInfo.endIndex = 0;\n        }\n        if (autoSize.valueFilterMode === ValueFilterMode.GetLongestText) {\n            // get greatest abs value in data\n            maxLen = 0;\n            var maxIndex = 0;\n            for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\n                tempVal = rowInfo.getRowVal(i);\n                if ((tempVal || '').length > maxLen) {\n                    maxLen = tempVal.length;\n                    maxIndex = i;\n                }\n            }\n            // now substitute a 'c' for all characters\n            tempVal = rowInfo.getRowVal(maxIndex);\n            rowInfo.maxLen = maxLen;\n            rowInfo.valueArr = [tempVal];\n            rowInfo.startIndex = rowInfo.endIndex = 0;\n        }\n        // !!! HACK !!!!\n        if (rowInfo.maxLen && rowInfo.maxLen > 30 && colArrayIndex > 1) {\n            autoSize.sizeToRemaining = true;\n        }\n        maxColWidth = this.getColWidth(columnDef, gridCanvas, rowInfo) * widthAdjustRatio;\n        return Math.max(autoSize.headerWidthPx, maxColWidth);\n    };\n    SlickGrid.prototype.getColWidth = function (columnDef, gridCanvas, rowInfo) {\n        var _a, _b, _c;\n        var rowEl = Utils.createDomElement('div', { className: 'slick-row ui-widget-content' }, gridCanvas);\n        var cellEl = Utils.createDomElement('div', { className: 'slick-cell' }, rowEl);\n        cellEl.style.position = 'absolute';\n        cellEl.style.visibility = 'hidden';\n        cellEl.style.textOverflow = 'initial';\n        cellEl.style.whiteSpace = 'nowrap';\n        var i, len, max = 0, maxText = '', formatterResult, val;\n        // get mode - if text only display, use canvas otherwise html element\n        var useCanvas = (columnDef.autoSize.widthEvalMode === WidthEvalMode.TextOnly);\n        if (((_a = columnDef.autoSize) === null || _a === void 0 ? void 0 : _a.widthEvalMode) === WidthEvalMode.Auto) {\n            var noFormatter = !columnDef.formatterOverride && !columnDef.formatter;\n            var formatterIsText = ((_b = columnDef === null || columnDef === void 0 ? void 0 : columnDef.formatterOverride) === null || _b === void 0 ? void 0 : _b.ReturnsTextOnly)\n                || (!columnDef.formatterOverride && ((_c = columnDef.formatter) === null || _c === void 0 ? void 0 : _c.ReturnsTextOnly));\n            useCanvas = noFormatter || formatterIsText;\n        }\n        // use canvas - very fast, but text-only\n        if (this.canvas_context && useCanvas) {\n            var style = getComputedStyle(cellEl);\n            this.canvas_context.font = style.fontSize + ' ' + style.fontFamily;\n            for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\n                // row is either an array or values or a single value\n                val = (rowInfo.valueArr ? rowInfo.valueArr[i] : rowInfo.getRowVal(i));\n                if (columnDef.formatterOverride) {\n                    // use formatterOverride as first preference\n                    formatterResult = columnDef.formatterOverride(i, rowInfo.colIndex, val, columnDef, this.getDataItem(i), this);\n                }\n                else if (columnDef.formatter) {\n                    // otherwise, use formatter\n                    formatterResult = columnDef.formatter(i, rowInfo.colIndex, val, columnDef, this.getDataItem(i), this);\n                }\n                else {\n                    // otherwise, use plain text\n                    formatterResult = '' + val;\n                }\n                len = formatterResult ? this.canvas_context.measureText(formatterResult).width : 0;\n                if (len > max) {\n                    max = len;\n                    maxText = formatterResult;\n                }\n            }\n            cellEl.innerHTML = maxText;\n            len = cellEl.offsetWidth;\n            rowEl.remove();\n            return len;\n        }\n        for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\n            val = (rowInfo.valueArr ? rowInfo.valueArr[i] : rowInfo.getRowVal(i));\n            if (columnDef.formatterOverride) {\n                // use formatterOverride as first preference\n                formatterResult = columnDef.formatterOverride(i, rowInfo.colIndex, val, columnDef, this.getDataItem(i), this);\n            }\n            else if (columnDef.formatter) {\n                // otherwise, use formatter\n                formatterResult = columnDef.formatter(i, rowInfo.colIndex, val, columnDef, this.getDataItem(i), this);\n            }\n            else {\n                // otherwise, use plain text\n                formatterResult = '' + val;\n            }\n            this.applyFormatResultToCellNode(formatterResult, cellEl);\n            len = cellEl.offsetWidth;\n            if (len > max) {\n                max = len;\n            }\n        }\n        rowEl.remove();\n        return max;\n    };\n    SlickGrid.prototype.getColHeaderWidth = function (columnDef) {\n        var _a;\n        var width = 0;\n        //if (columnDef && (!columnDef.resizable || columnDef._autoCalcWidth === true)) return;\n        var headerColElId = this.getUID() + columnDef.id;\n        var headerColEl = document.getElementById(headerColElId);\n        var dummyHeaderColElId = \"\".concat(headerColElId, \"_\");\n        var clone = headerColEl.cloneNode(true);\n        if (headerColEl) {\n            // headers have been created, use clone technique\n            clone.id = dummyHeaderColElId;\n            clone.style.cssText = 'position: absolute; visibility: hidden;right: auto;text-overflow: initial;white-space: nowrap;';\n            headerColEl.parentNode.insertBefore(clone, headerColEl);\n            width = clone.offsetWidth;\n            clone.parentNode.removeChild(clone);\n        }\n        else {\n            // headers have not yet been created, create a new node\n            var header = this.getHeader(columnDef);\n            headerColEl = Utils.createDomElement('div', { id: dummyHeaderColElId, className: 'ui-state-default slick-state-default slick-header-column' }, header);\n            Utils.createDomElement('span', { className: 'slick-column-name', innerHTML: this.sanitizeHtmlString(String(columnDef.name)) }, headerColEl);\n            clone.style.cssText = 'position: absolute; visibility: hidden;right: auto;text-overflow: initial;white-space: nowrap;';\n            if (columnDef.headerCssClass) {\n                (_a = headerColEl.classList).add.apply(_a, (columnDef.headerCssClass || '').split(' '));\n            }\n            width = headerColEl.offsetWidth;\n            header.removeChild(headerColEl);\n        }\n        return width;\n    };\n    SlickGrid.prototype.legacyAutosizeColumns = function () {\n        var _a, _b;\n        var i, c, shrinkLeeway = 0, total = 0, prevTotal = 0;\n        var widths = [];\n        var availWidth = this.viewportHasVScroll ? this.viewportW - ((_b = (_a = this.scrollbarDimensions) === null || _a === void 0 ? void 0 : _a.width) !== null && _b !== void 0 ? _b : 0) : this.viewportW;\n        for (i = 0; i < this.columns.length; i++) {\n            c = this.columns[i];\n            if (!c || c.hidden)\n                continue;\n            widths.push(c.width || 0);\n            total += c.width || 0;\n            if (c.resizable) {\n                shrinkLeeway += (c.width || 0) - Math.max((c.minWidth || 0), this.absoluteColumnMinWidth);\n            }\n        }\n        // shrink\n        prevTotal = total;\n        while (total > availWidth && shrinkLeeway) {\n            var shrinkProportion = (total - availWidth) / shrinkLeeway;\n            for (i = 0; i < this.columns.length && total > availWidth; i++) {\n                c = this.columns[i];\n                if (!c || c.hidden)\n                    continue;\n                var width = widths[i];\n                if (!c.resizable || width <= c.minWidth || width <= this.absoluteColumnMinWidth) {\n                    continue;\n                }\n                var absMinWidth = Math.max(c.minWidth, this.absoluteColumnMinWidth);\n                var shrinkSize = Math.floor(shrinkProportion * (width - absMinWidth)) || 1;\n                shrinkSize = Math.min(shrinkSize, width - absMinWidth);\n                total -= shrinkSize;\n                shrinkLeeway -= shrinkSize;\n                widths[i] -= shrinkSize;\n            }\n            if (prevTotal <= total) { // avoid infinite loop\n                break;\n            }\n            prevTotal = total;\n        }\n        // grow\n        prevTotal = total;\n        while (total < availWidth) {\n            var growProportion = availWidth / total;\n            for (i = 0; i < this.columns.length && total < availWidth; i++) {\n                c = this.columns[i];\n                if (!c || c.hidden)\n                    continue;\n                var currentWidth = widths[i];\n                var growSize = void 0;\n                if (!c.resizable || c.maxWidth <= currentWidth) {\n                    growSize = 0;\n                }\n                else {\n                    growSize = Math.min(Math.floor(growProportion * currentWidth) - currentWidth, (c.maxWidth - currentWidth) || 1000000) || 1;\n                }\n                total += growSize;\n                widths[i] += (total <= availWidth ? growSize : 0);\n            }\n            if (prevTotal >= total) { // avoid infinite loop\n                break;\n            }\n            prevTotal = total;\n        }\n        var reRender = false;\n        for (i = 0; i < this.columns.length; i++) {\n            if (!c || c.hidden)\n                continue;\n            if (this.columns[i].rerenderOnResize && this.columns[i].width !== widths[i]) {\n                reRender = true;\n            }\n            this.columns[i].width = widths[i];\n        }\n        this.reRenderColumns(reRender);\n    };\n    /**\n     * Apply Columns Widths in the UI and optionally invalidate & re-render the columns when specified\n     * @param {Boolean} shouldReRender - should we invalidate and re-render the grid?\n     */\n    SlickGrid.prototype.reRenderColumns = function (reRender) {\n        this.applyColumnHeaderWidths();\n        this.updateCanvasWidth(true);\n        this.trigger(this.onAutosizeColumns, { columns: this.columns });\n        if (reRender) {\n            this.invalidateAllRows();\n            this.render();\n        }\n    };\n    SlickGrid.prototype.getVisibleColumns = function () {\n        return this.columns.filter(function (c) { return !c.hidden; });\n    };\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // General\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    SlickGrid.prototype.trigger = function (evt, args, e) {\n        var event = (e || new SlickEventData(e, args));\n        var eventArgs = (args || {});\n        eventArgs.grid = this;\n        return evt.notify(eventArgs, event, this);\n    };\n    /** Get Editor lock */\n    SlickGrid.prototype.getEditorLock = function () {\n        return this._options.editorLock;\n    };\n    /** Get Editor Controller */\n    SlickGrid.prototype.getEditController = function () {\n        return this.editController;\n    };\n    /**\n     * Returns the index of a column with a given id. Since columns can be reordered by the user, this can be used to get the column definition independent of the order:\n     * @param id A column id.\n     */\n    SlickGrid.prototype.getColumnIndex = function (id) {\n        return this.columnsById[id];\n    };\n    SlickGrid.prototype.applyColumnHeaderWidths = function () {\n        var _this = this;\n        if (!this.initialized) {\n            return;\n        }\n        var columnIndex = 0;\n        var vc = this.getVisibleColumns();\n        this._headers.forEach(function (header) {\n            for (var i = 0; i < header.children.length; i++, columnIndex++) {\n                var h = header.children[i];\n                var col = vc[columnIndex] || {};\n                var width = (col.width || 0) - _this.headerColumnWidthDiff;\n                if (Utils.width(h) !== width) {\n                    Utils.width(h, width);\n                }\n            }\n        });\n        this.updateColumnCaches();\n    };\n    SlickGrid.prototype.applyColumnWidths = function () {\n        var _a;\n        var x = 0, w = 0, rule;\n        for (var i = 0; i < this.columns.length; i++) {\n            if (!((_a = this.columns[i]) === null || _a === void 0 ? void 0 : _a.hidden)) {\n                w = this.columns[i].width || 0;\n                rule = this.getColumnCssRules(i);\n                rule.left.style.left = \"\".concat(x, \"px\");\n                rule.right.style.right = (((this._options.frozenColumn !== -1 && i > this._options.frozenColumn) ? this.canvasWidthR : this.canvasWidthL) - x - w) + 'px';\n                // If this column is frozen, reset the css left value since the\n                // column starts in a new viewport.\n                if (this._options.frozenColumn !== i) {\n                    x += this.columns[i].width;\n                }\n            }\n            if (this._options.frozenColumn == i) {\n                x = 0;\n            }\n        }\n    };\n    /**\n     * Accepts a columnId string and an ascending boolean. Applies a sort glyph in either ascending or descending form to the header of the column. Note that this does not actually sort the column. It only adds the sort glyph to the header.\n     * @param columnId\n     * @param ascending\n     */\n    SlickGrid.prototype.setSortColumn = function (columnId, ascending) {\n        this.setSortColumns([{ columnId: columnId, sortAsc: ascending }]);\n    };\n    /**\n     * Get column by index\n     * @param {Number} id - column index\n     * @returns\n     */\n    SlickGrid.prototype.getColumnByIndex = function (id) {\n        var result;\n        this._headers.every(function (header) {\n            var length = header.children.length;\n            if (id < length) {\n                result = header.children[id];\n                return false;\n            }\n            id -= length;\n            return true;\n        });\n        return result;\n    };\n    /**\n     * Accepts an array of objects in the form [ { columnId: [string], sortAsc: [boolean] }, ... ]. When called, this will apply a sort glyph in either ascending or descending form to the header of each column specified in the array. Note that this does not actually sort the column. It only adds the sort glyph to the header\n     * @param {ColumnSort[]} cols - column sort\n     */\n    SlickGrid.prototype.setSortColumns = function (cols) {\n        var _this = this;\n        this.sortColumns = cols;\n        var numberCols = this._options.numberedMultiColumnSort && this.sortColumns.length > 1;\n        this._headers.forEach(function (header) {\n            var indicators = header.querySelectorAll('.slick-header-column-sorted');\n            indicators.forEach(function (indicator) {\n                indicator.classList.remove('slick-header-column-sorted');\n            });\n            indicators = header.querySelectorAll('.slick-sort-indicator');\n            indicators.forEach(function (indicator) {\n                indicator.classList.remove('slick-sort-indicator-asc');\n                indicator.classList.remove('slick-sort-indicator-desc');\n            });\n            indicators = header.querySelectorAll('.slick-sort-indicator-numbered');\n            indicators.forEach(function (el) {\n                el.textContent = '';\n            });\n        });\n        var i = 1;\n        this.sortColumns.forEach(function (col) {\n            if (col.sortAsc == null) {\n                col.sortAsc = true;\n            }\n            var columnIndex = _this.getColumnIndex(col.columnId);\n            if (columnIndex != null) {\n                var column = _this.getColumnByIndex(columnIndex);\n                if (column) {\n                    column.classList.add('slick-header-column-sorted');\n                    var indicator = column.querySelector('.slick-sort-indicator');\n                    indicator.classList.add(col.sortAsc ? 'slick-sort-indicator-asc' : 'slick-sort-indicator-desc');\n                    if (numberCols) {\n                        indicator = column.querySelector('.slick-sort-indicator-numbered');\n                        indicator.textContent = String(i);\n                    }\n                }\n            }\n            i++;\n        });\n    };\n    /** Get sorted columns **/\n    SlickGrid.prototype.getSortColumns = function () {\n        return this.sortColumns;\n    };\n    SlickGrid.prototype.handleSelectedRangesChanged = function (e, ranges) {\n        var _this = this;\n        var _a, _b;\n        var ne = e.getNativeEvent();\n        var previousSelectedRows = this.selectedRows.slice(0); // shallow copy previously selected rows for later comparison\n        this.selectedRows = [];\n        var hash = {};\n        for (var i = 0; i < ranges.length; i++) {\n            for (var j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {\n                if (!hash[j]) { // prevent duplicates\n                    this.selectedRows.push(j);\n                    hash[j] = {};\n                }\n                for (var k = ranges[i].fromCell; k <= ranges[i].toCell; k++) {\n                    if (this.canCellBeSelected(j, k)) {\n                        hash[j][this.columns[k].id] = this._options.selectedCellCssClass;\n                    }\n                }\n            }\n        }\n        this.setCellCssStyles(this._options.selectedCellCssClass || '', hash);\n        if (this.simpleArrayEquals(previousSelectedRows, this.selectedRows)) {\n            var caller = (_b = (_a = ne === null || ne === void 0 ? void 0 : ne.detail) === null || _a === void 0 ? void 0 : _a.caller) !== null && _b !== void 0 ? _b : 'click';\n            var newSelectedAdditions = this.getSelectedRows().filter(function (i) { return previousSelectedRows.indexOf(i) < 0; });\n            var newSelectedDeletions = previousSelectedRows.filter(function (i) { return _this.getSelectedRows().indexOf(i) < 0; });\n            this.trigger(this.onSelectedRowsChanged, {\n                rows: this.getSelectedRows(),\n                previousSelectedRows: previousSelectedRows,\n                caller: caller,\n                changedSelectedRows: newSelectedAdditions,\n                changedUnselectedRows: newSelectedDeletions\n            }, e);\n        }\n    };\n    // compare 2 simple arrays (integers or strings only, do not use to compare object arrays)\n    SlickGrid.prototype.simpleArrayEquals = function (arr1, arr2) {\n        return Array.isArray(arr1) && Array.isArray(arr2) && arr2.sort().toString() !== arr1.sort().toString();\n    };\n    /** Returns an array of column definitions. */\n    SlickGrid.prototype.getColumns = function () {\n        return this.columns;\n    };\n    SlickGrid.prototype.updateColumnCaches = function () {\n        // Pre-calculate cell boundaries.\n        this.columnPosLeft = [];\n        this.columnPosRight = [];\n        var x = 0;\n        for (var i = 0, ii = this.columns.length; i < ii; i++) {\n            if (!this.columns[i] || this.columns[i].hidden)\n                continue;\n            this.columnPosLeft[i] = x;\n            this.columnPosRight[i] = x + (this.columns[i].width || 0);\n            if (this._options.frozenColumn === i) {\n                x = 0;\n            }\n            else {\n                x += this.columns[i].width || 0;\n            }\n        }\n    };\n    SlickGrid.prototype.updateColumnProps = function () {\n        this.columnsById = {};\n        for (var i = 0; i < this.columns.length; i++) {\n            var m = this.columns[i];\n            if (m.width) {\n                m.widthRequest = m.width;\n            }\n            if (this.options.mixinDefaults) {\n                Utils.applyDefaults(m, this._columnDefaults);\n                if (!m.autoSize) {\n                    m.autoSize = {};\n                }\n                Utils.applyDefaults(m.autoSize, this._columnAutosizeDefaults);\n            }\n            else {\n                m = this.columns[i] = Utils.extend({}, this._columnDefaults, m);\n                m.autoSize = Utils.extend({}, this._columnAutosizeDefaults, m.autoSize);\n            }\n            this.columnsById[m.id] = i;\n            if (m.minWidth && ((m.width || 0) < m.minWidth)) {\n                m.width = m.minWidth;\n            }\n            if (m.maxWidth && ((m.width || 0) > m.maxWidth)) {\n                m.width = m.maxWidth;\n            }\n        }\n    };\n    /**\n     * Sets grid columns. Column headers will be recreated and all rendered rows will be removed. To rerender the grid (if necessary), call render().\n     * @param columnDefinitions An array of column definitions.\n     */\n    SlickGrid.prototype.setColumns = function (columnDefinitions) {\n        this.trigger(this.onBeforeSetColumns, { previousColumns: this.columns, newColumns: columnDefinitions, grid: this });\n        this.columns = columnDefinitions;\n        this.updateColumnsInternal();\n    };\n    SlickGrid.prototype.updateColumns = function () {\n        this.trigger(this.onBeforeUpdateColumns, { columns: this.columns, grid: this });\n        this.updateColumnsInternal();\n    };\n    SlickGrid.prototype.updateColumnsInternal = function () {\n        var _a;\n        this.updateColumnProps();\n        this.updateColumnCaches();\n        if (this.initialized) {\n            this.setPaneVisibility();\n            this.setOverflow();\n            this.invalidateAllRows();\n            this.createColumnHeaders();\n            this.createColumnFooter();\n            this.removeCssRules();\n            this.createCssRules();\n            this.resizeCanvas();\n            this.updateCanvasWidth();\n            this.applyColumnHeaderWidths();\n            this.applyColumnWidths();\n            this.handleScroll();\n            (_a = this.getSelectionModel()) === null || _a === void 0 ? void 0 : _a.refreshSelections();\n        }\n    };\n    /** Returns an object containing all of the Grid options set on the grid. See a list of Grid Options here.  */\n    SlickGrid.prototype.getOptions = function () {\n        return this._options;\n    };\n    /**\n     * Extends grid options with a given hash. If an there is an active edit, the grid will attempt to commit the changes and only continue if the attempt succeeds.\n     * @param {Object} options - an object with configuration options.\n     * @param {Boolean} [suppressRender] - do we want to supress the grid re-rendering? (defaults to false)\n     * @param {Boolean} [suppressColumnSet] - do we want to supress the columns set, via \"setColumns()\" method? (defaults to false)\n     * @param {Boolean} [suppressSetOverflow] - do we want to suppress the call to `setOverflow`\n     */\n    SlickGrid.prototype.setOptions = function (args, suppressRender, suppressColumnSet, suppressSetOverflow) {\n        prepareForOptionsChange();\n        var originalOptions = Utils.extend(true, {}, this._options);\n        this._options = Utils.extend(this._options, args);\n        this.trigger(this.onSetOptions, { optionsBefore: originalOptions, optionsAfter: this._options });\n        internal_setOptions(suppressRender, suppressColumnSet, suppressSetOverflow);\n    };\n    /**\n      * If option.mixinDefaults is true then external code maintains a reference to the options object. In this case there is no need\n      * to call setOptions() - changes can be made directly to the object. However setOptions() also performs some recalibration of the\n      * grid in reaction to changed options. activateChangedOptions call the same recalibration routines as setOptions() would have.\n      * @param {Boolean} [suppressRender] - do we want to supress the grid re-rendering? (defaults to false)\n      * @param {Boolean} [suppressColumnSet] - do we want to supress the columns set, via \"setColumns()\" method? (defaults to false)\n      * @param {Boolean} [suppressSetOverflow] - do we want to suppress the call to `setOverflow`\n      */\n    SlickGrid.prototype.activateChangedOptions = function (suppressRender, suppressColumnSet, suppressSetOverflow) {\n        prepareForOptionsChange();\n        this.trigger(this.onActivateChangedOptions, { options: this._options });\n        internal_setOptions(suppressRender, suppressColumnSet, suppressSetOverflow);\n    };\n    SlickGrid.prototype.prepareForOptionsChange = function () {\n        if (!this.getEditorLock().commitCurrentEdit()) {\n            return;\n        }\n        this.makeActiveCellNormal();\n        //if (this._options.enableAddRow !== args.enableAddRow) {\n        this.invalidateRow(this.getDataLength());\n        //}\n    };\n    SlickGrid.prototype.internal_setOptions = function (suppressRender, suppressColumnSet, suppressSetOverflow) {\n        var _this = this;\n        if (args.showColumnHeader !== undefined) {\n            this.setColumnHeaderVisibility(args.showColumnHeader);\n        }\n        this.validateAndEnforceOptions();\n        this.setFrozenOptions();\n        // when user changed frozen row option, we need to force a recalculation of each viewport heights\n        if (args.frozenBottom !== undefined) {\n            this.enforceFrozenRowHeightRecalc = true;\n        }\n        this._viewport.forEach(function (view) {\n            view.style.overflowY = _this._options.autoHeight ? 'hidden' : 'auto';\n        });\n        if (!suppressRender) {\n            this.render();\n        }\n        this.setScroller();\n        if (!suppressSetOverflow) {\n            this.setOverflow();\n        }\n        if (!suppressColumnSet) {\n            this.setColumns(this.columns);\n        }\n        if (this._options.enableMouseWheelScrollHandler && this._viewport && (!this.slickMouseWheelInstances || this.slickMouseWheelInstances.length === 0)) {\n            this._viewport.forEach(function (view) {\n                _this.slickMouseWheelInstances.push(MouseWheel({\n                    element: view,\n                    onMouseWheel: _this.handleMouseWheel.bind(_this)\n                }));\n            });\n        }\n        else if (this._options.enableMouseWheelScrollHandler === false) {\n            this.destroyAllInstances(this.slickMouseWheelInstances); // remove scroll handler when option is disable\n        }\n    };\n    SlickGrid.prototype.validateAndEnforceOptions = function () {\n        if (this._options.autoHeight) {\n            this._options.leaveSpaceForNewRows = false;\n        }\n        if (this._options.forceFitColumns) {\n            this._options.autosizeColsMode = GridAutosizeColsMode.LegacyForceFit;\n            console.log('forceFitColumns option is deprecated - use autosizeColsMode');\n        }\n    };\n    /**\n     * Sets a new source for databinding and removes all rendered rows. Note that this doesn't render the new rows - you can follow it with a call to render() to do that.\n     * @param {CustomDataView|Array<*>} newData New databinding source using a regular JavaScript array.. or a custom object exposing getItem(index) and getLength() functions.\n     * @param {Number} [scrollToTop] If true, the grid will reset the vertical scroll position to the top of the grid.\n     */\n    SlickGrid.prototype.setData = function (newData, scrollToTop) {\n        this.data = newData;\n        this.invalidateAllRows();\n        this.updateRowCount();\n        if (scrollToTop) {\n            this.scrollTo(0);\n        }\n    };\n    /** Returns an array of every data object, unless you're using DataView in which case it returns a DataView object. */\n    SlickGrid.prototype.getData = function () {\n        return this.data;\n    };\n    /** Returns the size of the databinding source. */\n    SlickGrid.prototype.getDataLength = function () {\n        var _a, _b;\n        if (this.data.getLength) {\n            return this.data.getLength();\n        }\n        else {\n            return (_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;\n        }\n    };\n    SlickGrid.prototype.getDataLengthIncludingAddNew = function () {\n        return this.getDataLength() + (!this._options.enableAddRow ? 0\n            : (!this.pagingActive || this.pagingIsLastPage ? 1 : 0));\n    };\n    /**\n     * Returns the databinding item at a given position.\n     * @param index Item row index.\n     */\n    SlickGrid.prototype.getDataItem = function (i) {\n        if (this.data.getItem) {\n            return this.data.getItem(i);\n        }\n        else {\n            return this.data[i];\n        }\n    };\n    /** Get Top Panel DOM element */\n    SlickGrid.prototype.getTopPanel = function () {\n        return this._topPanels[0];\n    };\n    /** Get Top Panels (left/right) DOM element */\n    SlickGrid.prototype.getTopPanels = function () {\n        return this._topPanels;\n    };\n    SlickGrid.prototype.togglePanelVisibility = function (option, container, visible, animate) {\n        var animated = (animate === false) ? false : true;\n        if (this._options[option] !== visible) {\n            this._options[option] = visible;\n            if (visible) {\n                if (animated) {\n                    Utils.slideDown(container, this.resizeCanvas.bind(this));\n                    return;\n                }\n                Utils.show(container);\n                this.resizeCanvas();\n            }\n            else {\n                if (animated) {\n                    Utils.slideUp(container, this.resizeCanvas.bind(this));\n                    return;\n                }\n                Utils.hide(container);\n                this.resizeCanvas();\n            }\n        }\n    };\n    /**\n     * Set the Top Panel Visibility and optionally enable/disable animation (enabled by default)\n     * @param {Boolean} [visible] - optionally set if top panel is visible or not\n     * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\n     */\n    SlickGrid.prototype.setTopPanelVisibility = function (visible, animate) {\n        this.togglePanelVisibility('showTopPanel', this._topPanelScrollers, visible, animate);\n    };\n    /**\n     * Set the Header Row Visibility and optionally enable/disable animation (enabled by default)\n     * @param {Boolean} [visible] - optionally set if header row panel is visible or not\n     * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\n     */\n    SlickGrid.prototype.setHeaderRowVisibility = function (visible, animate) {\n        this.togglePanelVisibility('showHeaderRow', this._headerRowScroller, visible, animate);\n    };\n    /**\n     * Set the Column Header Visibility and optionally enable/disable animation (enabled by default)\n     * @param {Boolean} [visible] - optionally set if column header is visible or not\n     * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\n     */\n    SlickGrid.prototype.setColumnHeaderVisibility = function (visible, animate) {\n        this.togglePanelVisibility('showColumnHeader', this._headerScroller, visible, animate);\n    };\n    /**\n     * Set the Footer Visibility and optionally enable/disable animation (enabled by default)\n     * @param {Boolean} [visible] - optionally set if footer row panel is visible or not\n     * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\n     */\n    SlickGrid.prototype.setFooterRowVisibility = function (visible, animate) {\n        this.togglePanelVisibility('showFooterRow', this._footerRowScroller, visible, animate);\n    };\n    /**\n     * Set the Pre-Header Visibility and optionally enable/disable animation (enabled by default)\n     * @param {Boolean} [visible] - optionally set if pre-header panel is visible or not\n     * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\n     */\n    SlickGrid.prototype.setPreHeaderPanelVisibility = function (visible, animate) {\n        this.togglePanelVisibility('showPreHeaderPanel', [this._preHeaderPanelScroller, this._preHeaderPanelScrollerR], visible, animate);\n    };\n    /** Get Grid Canvas Node DOM Element */\n    SlickGrid.prototype.getContainerNode = function () {\n        return this._container;\n    };\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // Rendering / Scrolling\n    SlickGrid.prototype.getRowTop = function (row) {\n        return this._options.rowHeight * row - this.offset;\n    };\n    SlickGrid.prototype.getRowFromPosition = function (y) {\n        return Math.floor((y + this.offset) / this._options.rowHeight);\n    };\n    /** Scroll to an Y position in the grid */\n    SlickGrid.prototype.scrollTo = function (y) {\n        var _a, _b;\n        y = Math.max(y, 0);\n        y = Math.min(y, (this.th || 0) - Utils.height(this._viewportScrollContainerY) + ((this.viewportHasHScroll || this.hasFrozenColumns()) ? ((_b = (_a = this.scrollbarDimensions) === null || _a === void 0 ? void 0 : _a.height) !== null && _b !== void 0 ? _b : 0) : 0));\n        var oldOffset = this.offset;\n        this.offset = Math.round(this.page * (this.cj || 0));\n        this.page = Math.min((this.n || 0) - 1, Math.floor(y / (this.ph || 0)));\n        var newScrollTop = (y - this.offset);\n        if (this.offset !== oldOffset) {\n            var range = this.getVisibleRange(newScrollTop);\n            this.cleanupRows(range);\n            this.updateRowPositions();\n        }\n        if (this.prevScrollTop !== newScrollTop) {\n            this.vScrollDir = (this.prevScrollTop + oldOffset < newScrollTop + this.offset) ? 1 : -1;\n            this.lastRenderedScrollTop = (this.scrollTop = this.prevScrollTop = newScrollTop);\n            if (this.hasFrozenColumns()) {\n                this._viewportTopL.scrollTop = newScrollTop;\n            }\n            if (this.hasFrozenRows) {\n                this._viewportBottomL.scrollTop = this._viewportBottomR.scrollTop = newScrollTop;\n            }\n            if (this._viewportScrollContainerY) {\n                this._viewportScrollContainerY.scrollTop = newScrollTop;\n            }\n            this.trigger(this.onViewportChanged, {});\n        }\n    };\n    SlickGrid.prototype.defaultFormatter = function (_row, _cell, value) {\n        if (value == null) {\n            return '';\n        }\n        else {\n            return (value + '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n        }\n    };\n    SlickGrid.prototype.getFormatter = function (row, column) {\n        var _a, _b, _c;\n        var rowMetadata = (_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.getItemMetadata) === null || _b === void 0 ? void 0 : _b.call(_a, row);\n        // look up by id, then index\n        var columnOverrides = (rowMetadata === null || rowMetadata === void 0 ? void 0 : rowMetadata.columns) &&\n            (rowMetadata.columns[column.id] || rowMetadata.columns[this.getColumnIndex(column.id)]);\n        return ((columnOverrides === null || columnOverrides === void 0 ? void 0 : columnOverrides.formatter) ||\n            (rowMetadata === null || rowMetadata === void 0 ? void 0 : rowMetadata.formatter) ||\n            column.formatter ||\n            ((_c = this._options.formatterFactory) === null || _c === void 0 ? void 0 : _c.getFormatter(column)) ||\n            this._options.defaultFormatter);\n    };\n    SlickGrid.prototype.getEditor = function (row, cell) {\n        var _a, _b, _c, _d, _f, _g;\n        var column = this.columns[cell];\n        var rowMetadata = (_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.getItemMetadata) === null || _b === void 0 ? void 0 : _b.call(_a, row);\n        var columnMetadata = rowMetadata === null || rowMetadata === void 0 ? void 0 : rowMetadata.columns;\n        if (((_c = columnMetadata === null || columnMetadata === void 0 ? void 0 : columnMetadata[column.id]) === null || _c === void 0 ? void 0 : _c.editor) !== undefined) {\n            return columnMetadata[column.id].editor;\n        }\n        if (((_d = columnMetadata === null || columnMetadata === void 0 ? void 0 : columnMetadata[cell]) === null || _d === void 0 ? void 0 : _d.editor) !== undefined) {\n            return columnMetadata[cell].editor;\n        }\n        return (column.editor || ((_g = (_f = this._options) === null || _f === void 0 ? void 0 : _f.editorFactory) === null || _g === void 0 ? void 0 : _g.getEditor(column)));\n    };\n    SlickGrid.prototype.getDataItemValueForColumn = function (item, columnDef) {\n        if (this._options.dataItemColumnValueExtractor) {\n            return this._options.dataItemColumnValueExtractor(item, columnDef);\n        }\n        return item[columnDef.field];\n    };\n    SlickGrid.prototype.appendRowHtml = function (stringArrayL, stringArrayR, row, range, dataLength) {\n        var _a, _b;\n        var d = this.getDataItem(row);\n        var dataLoading = row < dataLength && !d;\n        var rowCss = 'slick-row' +\n            (this.hasFrozenRows && row <= this._options.frozenRow ? ' frozen' : '') +\n            (dataLoading ? ' loading' : '') +\n            (row === this.activeRow && this._options.showCellSelection ? ' active' : '') +\n            (row % 2 == 1 ? ' odd' : ' even');\n        if (!d) {\n            rowCss += ' ' + this._options.addNewRowCssClass;\n        }\n        var metadata = (_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.getItemMetadata) === null || _b === void 0 ? void 0 : _b.call(_a, row);\n        if (metadata === null || metadata === void 0 ? void 0 : metadata.cssClasses) {\n            rowCss += ' ' + metadata.cssClasses;\n        }\n        var frozenRowOffset = this.getFrozenRowOffset(row);\n        var rowHtml = \"<div class=\\\"ui-widget-content \".concat(rowCss, \"\\\" style=\\\"top:\").concat((this.getRowTop(row) - frozenRowOffset), \"px\\\">\");\n        stringArrayL.push(rowHtml);\n        if (this.hasFrozenColumns()) {\n            stringArrayR.push(rowHtml);\n        }\n        var colspan, m;\n        for (var i = 0, ii = this.columns.length; i < ii; i++) {\n            m = this.columns[i];\n            if (!m || m.hidden)\n                continue;\n            colspan = 1;\n            if (metadata === null || metadata === void 0 ? void 0 : metadata.columns) {\n                var columnData = metadata.columns[m.id] || metadata.columns[i];\n                colspan = (columnData === null || columnData === void 0 ? void 0 : columnData.colspan) || 1;\n                if (colspan === '*') {\n                    colspan = ii - i;\n                }\n            }\n            // Do not render cells outside of the viewport.\n            if (this.columnPosRight[Math.min(ii - 1, i + colspan - 1)] > range.leftPx) {\n                if (!m.alwaysRenderColumn && this.columnPosLeft[i] > range.rightPx) {\n                    // All columns to the right are outside the range.\n                    break;\n                }\n                if (this.hasFrozenColumns() && (i > this._options.frozenColumn)) {\n                    this.appendCellHtml(stringArrayR, row, i, colspan, d);\n                }\n                else {\n                    this.appendCellHtml(stringArrayL, row, i, colspan, d);\n                }\n            }\n            else if (m.alwaysRenderColumn || (this.hasFrozenColumns() && i <= this._options.frozenColumn)) {\n                this.appendCellHtml(stringArrayL, row, i, colspan, d);\n            }\n            if (colspan > 1) {\n                i += (colspan - 1);\n            }\n        }\n        stringArrayL.push('</div>');\n        if (this.hasFrozenColumns()) {\n            stringArrayR.push('</div>');\n        }\n    };\n    SlickGrid.prototype.appendCellHtml = function (stringArray, row, cell, colspan, item) {\n        // stringArray: stringBuilder containing the HTML parts\n        // row, cell: row and column index\n        // colspan: HTML colspan\n        // item: grid data for row\n        var _a;\n        var m = this.columns[cell];\n        var cellCss = 'slick-cell l' + cell + ' r' + Math.min(this.columns.length - 1, cell + colspan - 1) + (m.cssClass ? ' ' + m.cssClass : '');\n        if (this.hasFrozenColumns() && cell <= this._options.frozenColumn) {\n            cellCss += (' frozen');\n        }\n        if (row === this.activeRow && cell === this.activeCell && this._options.showCellSelection) {\n            cellCss += (' active');\n        }\n        // TODO:  merge them together in the setter\n        for (var key in this.cellCssClasses) {\n            if ((_a = this.cellCssClasses[key][row]) === null || _a === void 0 ? void 0 : _a[m.id]) {\n                cellCss += (' ' + this.cellCssClasses[key][row][m.id]);\n            }\n        }\n        var value = null, formatterResult = '';\n        if (item) {\n            value = this.getDataItemValueForColumn(item, m);\n            formatterResult = this.getFormatter(row, m)(row, cell, value, m, item, this);\n            if (formatterResult === null || formatterResult === undefined) {\n                formatterResult = '';\n            }\n        }\n        // get addl css class names from object type formatter return and from string type return of onBeforeAppendCell\n        // we will only use the event result as CSS classes when it is a string type (undefined event always return a true boolean which is not a valid css class)\n        var evt = this.trigger(this.onBeforeAppendCell, { row: row, cell: cell, value: value, dataContext: item });\n        var appendCellResult = evt.getReturnValue();\n        var addlCssClasses = typeof appendCellResult === 'string' ? appendCellResult : '';\n        if (formatterResult === null || formatterResult === void 0 ? void 0 : formatterResult.addClasses) {\n            addlCssClasses += (addlCssClasses ? ' ' : '') + formatterResult.addClasses;\n        }\n        var toolTip = (formatterResult === null || formatterResult === void 0 ? void 0 : formatterResult.toolTip) ? \"title='\" + formatterResult.toolTip + \"'\" : '';\n        var customAttrStr = '';\n        if (m.hasOwnProperty('cellAttrs') && m.cellAttrs instanceof Object) {\n            for (var key in m.cellAttrs) {\n                if (m.cellAttrs.hasOwnProperty(key)) {\n                    customAttrStr += \" \".concat(key, \"=\\\"\").concat(m.cellAttrs[key], \"\\\" \");\n                }\n            }\n        }\n        stringArray.push(\"<div class=\\\"\".concat(cellCss + (addlCssClasses ? ' ' + addlCssClasses : ''), \"\\\" \").concat(toolTip + customAttrStr, \">\"));\n        // if there is a corresponding row (if not, this is the Add New row or this data hasn't been loaded yet)\n        if (item) {\n            stringArray.push((Object.prototype.toString.call(formatterResult) !== '[object Object]' ? formatterResult : formatterResult.text));\n        }\n        stringArray.push('</div>');\n        this.rowsCache[row].cellRenderQueue.push(cell);\n        this.rowsCache[row].cellColSpans[cell] = colspan;\n    };\n    SlickGrid.prototype.cleanupRows = function (rangeToKeep) {\n        for (var rowId in this.rowsCache) {\n            var i = +rowId;\n            var removeFrozenRow = true;\n            if (this.hasFrozenRows\n                && ((this._options.frozenBottom && i >= this.actualFrozenRow) // Frozen bottom rows\n                    || (!this._options.frozenBottom && i <= this.actualFrozenRow) // Frozen top rows\n                )) {\n                removeFrozenRow = false;\n            }\n            if (((i = parseInt(rowId, 10)) !== this.activeRow)\n                && (i < rangeToKeep.top || i > rangeToKeep.bottom)\n                && (removeFrozenRow)) {\n                this.removeRowFromCache(i);\n            }\n        }\n        if (this._options.enableAsyncPostRenderCleanup) {\n            this.startPostProcessingCleanup();\n        }\n    };\n    /** Invalidate all grid rows and re-render the grid rows */\n    SlickGrid.prototype.invalidate = function () {\n        this.updateRowCount();\n        this.invalidateAllRows();\n        this.render();\n    };\n    /** Invalidate all grid rows */\n    SlickGrid.prototype.invalidateAllRows = function () {\n        if (this.currentEditor) {\n            this.makeActiveCellNormal();\n        }\n        for (var row in this.rowsCache) {\n            this.removeRowFromCache(+row);\n        }\n        if (this._options.enableAsyncPostRenderCleanup) {\n            this.startPostProcessingCleanup();\n        }\n    };\n    /** Invalidate a specific set of row numbers */\n    SlickGrid.prototype.invalidateRows = function (rows) {\n        if (!rows || !rows.length) {\n            return;\n        }\n        this.vScrollDir = 0;\n        var rl = rows.length;\n        for (var i = 0; i < rl; i++) {\n            if (this.currentEditor && this.activeRow === rows[i]) {\n                this.makeActiveCellNormal();\n            }\n            if (this.rowsCache[rows[i]]) {\n                this.removeRowFromCache(rows[i]);\n            }\n        }\n        if (this._options.enableAsyncPostRenderCleanup) {\n            this.startPostProcessingCleanup();\n        }\n    };\n    /** Invalidate a specific row number */\n    SlickGrid.prototype.invalidateRow = function (row) {\n        if (!row && row !== 0) {\n            return;\n        }\n        this.invalidateRows([row]);\n    };\n    SlickGrid.prototype.queuePostProcessedRowForCleanup = function (cacheEntry, postProcessedRow, rowIdx) {\n        var _a;\n        this.postProcessgroupId++;\n        // store and detach node for later async cleanup\n        for (var columnIdx in postProcessedRow) {\n            if (postProcessedRow.hasOwnProperty(columnIdx)) {\n                this.postProcessedCleanupQueue.push({\n                    actionType: 'C',\n                    groupId: this.postProcessgroupId,\n                    node: cacheEntry.cellNodesByColumnIdx[+columnIdx],\n                    columnIdx: +columnIdx,\n                    rowIdx: rowIdx\n                });\n            }\n        }\n        this.postProcessedCleanupQueue.push({\n            actionType: 'R',\n            groupId: this.postProcessgroupId,\n            node: cacheEntry.rowNode\n        });\n        (_a = cacheEntry.rowNode) === null || _a === void 0 ? void 0 : _a.forEach(function (node) { return node.remove(); });\n    };\n    SlickGrid.prototype.queuePostProcessedCellForCleanup = function (cellnode, columnIdx, rowIdx) {\n        this.postProcessedCleanupQueue.push({\n            actionType: 'C',\n            groupId: this.postProcessgroupId,\n            node: cellnode,\n            columnIdx: columnIdx,\n            rowIdx: rowIdx\n        });\n        cellnode.remove();\n    };\n    SlickGrid.prototype.removeRowFromCache = function (row) {\n        var _a;\n        var cacheEntry = this.rowsCache[row];\n        if (!cacheEntry) {\n            return;\n        }\n        if (this._options.enableAsyncPostRenderCleanup && this.postProcessedRows[row]) {\n            this.queuePostProcessedRowForCleanup(cacheEntry, this.postProcessedRows[row], row);\n        }\n        else {\n            (_a = cacheEntry.rowNode) === null || _a === void 0 ? void 0 : _a.forEach(function (node) { var _a; return (_a = node.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(node); });\n        }\n        delete this.rowsCache[row];\n        delete this.postProcessedRows[row];\n        this.renderedRows--;\n        this.counter_rows_removed++;\n    };\n    /** Apply a Formatter Result to a Cell DOM Node */\n    SlickGrid.prototype.applyFormatResultToCellNode = function (formatterResult, cellNode, suppressRemove) {\n        if (formatterResult === null || formatterResult === undefined) {\n            formatterResult = '';\n        }\n        if (Object.prototype.toString.call(formatterResult) !== '[object Object]') {\n            cellNode.innerHTML = this.sanitizeHtmlString(formatterResult);\n            return;\n        }\n        cellNode.innerHTML = this.sanitizeHtmlString(formatterResult.text);\n        if (formatterResult.removeClasses && !suppressRemove) {\n            var classes = formatterResult.removeClasses.split(' ');\n            classes.forEach(function (c) { return cellNode.classList.remove(c); });\n        }\n        if (formatterResult.addClasses) {\n            var classes = formatterResult.addClasses.split(' ');\n            classes.forEach(function (c) { return cellNode.classList.add(c); });\n        }\n        if (formatterResult.toolTip) {\n            cellNode.setAttribute('title', formatterResult.toolTip);\n        }\n    };\n    /**\n     * Update a specific cell by its row and column index\n     * @param {Number} row - grid row number\n     * @param {Number} cell - grid cell column number\n     */\n    SlickGrid.prototype.updateCell = function (row, cell) {\n        var cellNode = this.getCellNode(row, cell);\n        if (!cellNode) {\n            return;\n        }\n        var m = this.columns[cell], d = this.getDataItem(row);\n        if (this.currentEditor && this.activeRow === row && this.activeCell === cell) {\n            this.currentEditor.loadValue(d);\n        }\n        else {\n            var formatterResult = d ? this.getFormatter(row, m)(row, cell, this.getDataItemValueForColumn(d, m), m, d, this) : '';\n            this.applyFormatResultToCellNode(formatterResult, cellNode);\n            this.invalidatePostProcessingResults(row);\n        }\n    };\n    /**\n     * Update a specific row by its row index\n     * @param {Number} row - grid row number\n     */\n    SlickGrid.prototype.updateRow = function (row) {\n        var cacheEntry = this.rowsCache[row];\n        if (!cacheEntry) {\n            return;\n        }\n        this.ensureCellNodesInRowsCache(row);\n        var formatterResult;\n        var d = this.getDataItem(row);\n        for (var colIdx in cacheEntry.cellNodesByColumnIdx) {\n            if (!cacheEntry.cellNodesByColumnIdx.hasOwnProperty(colIdx)) {\n                continue;\n            }\n            var columnIdx = +colIdx;\n            var m = this.columns[columnIdx], node = cacheEntry.cellNodesByColumnIdx[columnIdx];\n            if (row === this.activeRow && columnIdx === this.activeCell && this.currentEditor) {\n                this.currentEditor.loadValue(d);\n            }\n            else if (d) {\n                formatterResult = this.getFormatter(row, m)(row, columnIdx, this.getDataItemValueForColumn(d, m), m, d, this);\n                this.applyFormatResultToCellNode(formatterResult, node);\n            }\n            else {\n                node.innerHTML = '';\n            }\n        }\n        this.invalidatePostProcessingResults(row);\n    };\n    SlickGrid.prototype.getViewportHeight = function () {\n        var _a, _b;\n        if (!this._options.autoHeight || this._options.frozenColumn !== -1) {\n            this.topPanelH = (this._options.showTopPanel) ? this._options.topPanelHeight + this.getVBoxDelta(this._topPanelScrollers[0]) : 0;\n            this.headerRowH = (this._options.showHeaderRow) ? this._options.headerRowHeight + this.getVBoxDelta(this._headerRowScroller[0]) : 0;\n            this.footerRowH = (this._options.showFooterRow) ? this._options.footerRowHeight + this.getVBoxDelta(this._footerRowScroller[0]) : 0;\n        }\n        if (this._options.autoHeight) {\n            var fullHeight = this._paneHeaderL.offsetHeight;\n            fullHeight += (this._options.showHeaderRow) ? this._options.headerRowHeight + this.getVBoxDelta(this._headerRowScroller[0]) : 0;\n            fullHeight += (this._options.showFooterRow) ? this._options.footerRowHeight + this.getVBoxDelta(this._footerRowScroller[0]) : 0;\n            fullHeight += (this.getCanvasWidth() > this.viewportW) ? ((_b = (_a = this.scrollbarDimensions) === null || _a === void 0 ? void 0 : _a.height) !== null && _b !== void 0 ? _b : 0) : 0;\n            this.viewportH = this._options.rowHeight\n                * this.getDataLengthIncludingAddNew()\n                + ((this._options.frozenColumn == -1) ? fullHeight : 0);\n        }\n        else {\n            var columnNamesH = (this._options.showColumnHeader) ? Utils.toFloat(Utils.height(this._headerScroller[0])) + this.getVBoxDelta(this._headerScroller[0]) : 0;\n            var preHeaderH = (this._options.createPreHeaderPanel && this._options.showPreHeaderPanel) ? this._options.preHeaderPanelHeight + this.getVBoxDelta(this._preHeaderPanelScroller) : 0;\n            var style = getComputedStyle(this._container);\n            this.viewportH = Utils.toFloat(style.height)\n                - Utils.toFloat(style.paddingTop)\n                - Utils.toFloat(style.paddingBottom)\n                - columnNamesH\n                - this.topPanelH\n                - this.headerRowH\n                - this.footerRowH\n                - preHeaderH;\n        }\n        this.numVisibleRows = Math.ceil(this.viewportH / this._options.rowHeight);\n        return this.viewportH;\n    };\n    SlickGrid.prototype.getViewportWidth = function () {\n        this.viewportW = parseFloat(Utils.innerSize(this._container, 'width'));\n        return this.viewportW;\n    };\n    /** Execute a Resize of the Canvas */\n    SlickGrid.prototype.resizeCanvas = function () {\n        var _a, _b, _c, _d, _f, _g;\n        if (!this.initialized) {\n            return;\n        }\n        this.paneTopH = 0;\n        this.paneBottomH = 0;\n        this.viewportTopH = 0;\n        this.viewportBottomH = 0;\n        this.getViewportWidth();\n        this.getViewportHeight();\n        // Account for Frozen Rows\n        if (this.hasFrozenRows) {\n            if (this._options.frozenBottom) {\n                this.paneTopH = this.viewportH - this.frozenRowsHeight - ((_b = (_a = this.scrollbarDimensions) === null || _a === void 0 ? void 0 : _a.height) !== null && _b !== void 0 ? _b : 0);\n                this.paneBottomH = this.frozenRowsHeight + ((_d = (_c = this.scrollbarDimensions) === null || _c === void 0 ? void 0 : _c.height) !== null && _d !== void 0 ? _d : 0);\n            }\n            else {\n                this.paneTopH = this.frozenRowsHeight;\n                this.paneBottomH = this.viewportH - this.frozenRowsHeight;\n            }\n        }\n        else {\n            this.paneTopH = this.viewportH;\n        }\n        // The top pane includes the top panel and the header row\n        this.paneTopH += this.topPanelH + this.headerRowH + this.footerRowH;\n        if (this.hasFrozenColumns() && this._options.autoHeight) {\n            this.paneTopH += ((_g = (_f = this.scrollbarDimensions) === null || _f === void 0 ? void 0 : _f.height) !== null && _g !== void 0 ? _g : 0);\n        }\n        // The top viewport does not contain the top panel or header row\n        this.viewportTopH = this.paneTopH - this.topPanelH - this.headerRowH - this.footerRowH;\n        if (this._options.autoHeight) {\n            if (this.hasFrozenColumns()) {\n                var style = getComputedStyle(this._headerScrollerL);\n                Utils.height(this._container, this.paneTopH + Utils.toFloat(style.height));\n            }\n            this._paneTopL.style.position = 'relative';\n        }\n        Utils.setStyleSize(this._paneTopL, 'top', Utils.height(this._paneHeaderL) || (this._options.showHeaderRow ? this._options.headerRowHeight : 0) + (this._options.showPreHeaderPanel ? this._options.preHeaderPanelHeight : 0));\n        Utils.height(this._paneTopL, this.paneTopH);\n        var paneBottomTop = this._paneTopL.offsetTop + this.paneTopH;\n        if (!this._options.autoHeight) {\n            Utils.height(this._viewportTopL, this.viewportTopH);\n        }\n        if (this.hasFrozenColumns()) {\n            Utils.setStyleSize(this._paneTopR, 'top', Utils.height(this._paneHeaderL));\n            Utils.height(this._paneTopR, this.paneTopH);\n            Utils.height(this._viewportTopR, this.viewportTopH);\n            if (this.hasFrozenRows) {\n                Utils.setStyleSize(this._paneBottomL, 'top', paneBottomTop);\n                Utils.height(this._paneBottomL, this.paneBottomH);\n                Utils.setStyleSize(this._paneBottomR, 'top', paneBottomTop);\n                Utils.height(this._paneBottomR, this.paneBottomH);\n                Utils.height(this._viewportBottomR, this.paneBottomH);\n            }\n        }\n        else {\n            if (this.hasFrozenRows) {\n                Utils.width(this._paneBottomL, '100%');\n                Utils.height(this._paneBottomL, this.paneBottomH);\n                Utils.setStyleSize(this._paneBottomL, 'top', paneBottomTop);\n            }\n        }\n        if (this.hasFrozenRows) {\n            Utils.height(this._viewportBottomL, this.paneBottomH);\n            if (this._options.frozenBottom) {\n                Utils.height(this._canvasBottomL, this.frozenRowsHeight);\n                if (this.hasFrozenColumns()) {\n                    Utils.height(this._canvasBottomR, this.frozenRowsHeight);\n                }\n            }\n            else {\n                Utils.height(this._canvasTopL, this.frozenRowsHeight);\n                if (this.hasFrozenColumns()) {\n                    Utils.height(this._canvasTopR, this.frozenRowsHeight);\n                }\n            }\n        }\n        else {\n            Utils.height(this._viewportTopR, this.viewportTopH);\n        }\n        if (!this.scrollbarDimensions || !this.scrollbarDimensions.width) {\n            this.scrollbarDimensions = this.measureScrollbar();\n        }\n        if (this._options.autosizeColsMode === GridAutosizeColsMode.LegacyForceFit) {\n            this.autosizeColumns();\n        }\n        this.updateRowCount();\n        this.handleScroll();\n        // Since the width has changed, force the render() to reevaluate virtually rendered cells.\n        this.lastRenderedScrollLeft = -1;\n        this.render();\n    };\n    /** Update paging information status from the View */\n    SlickGrid.prototype.updatePagingStatusFromView = function (pagingInfo) {\n        this.pagingActive = (pagingInfo.pageSize !== 0);\n        this.pagingIsLastPage = (pagingInfo.pageNum == pagingInfo.totalPages - 1);\n    };\n    /** Update the dataset row count */\n    SlickGrid.prototype.updateRowCount = function () {\n        var _a, _b, _c, _d;\n        if (!this.initialized) {\n            return;\n        }\n        var dataLength = this.getDataLength();\n        var dataLengthIncludingAddNew = this.getDataLengthIncludingAddNew();\n        var numberOfRows = 0;\n        var oldH = ((this.hasFrozenRows && !this._options.frozenBottom) ? Utils.height(this._canvasBottomL) : Utils.height(this._canvasTopL));\n        if (this.hasFrozenRows) {\n            numberOfRows = this.getDataLength() - this._options.frozenRow;\n        }\n        else {\n            numberOfRows = dataLengthIncludingAddNew + (this._options.leaveSpaceForNewRows ? this.numVisibleRows - 1 : 0);\n        }\n        var tempViewportH = Utils.height(this._viewportScrollContainerY);\n        var oldViewportHasVScroll = this.viewportHasVScroll;\n        // with autoHeight, we do not need to accommodate the vertical scroll bar\n        this.viewportHasVScroll = this._options.alwaysShowVerticalScroll || !this._options.autoHeight && (numberOfRows * this._options.rowHeight > tempViewportH);\n        this.makeActiveCellNormal();\n        // remove the rows that are now outside of the data range\n        // this helps avoid redundant calls to .removeRow() when the size of the data decreased by thousands of rows\n        var r1 = dataLength - 1;\n        for (var i in this.rowsCache) {\n            if (Number(i) > r1) {\n                this.removeRowFromCache(+i);\n            }\n        }\n        if (this._options.enableAsyncPostRenderCleanup) {\n            this.startPostProcessingCleanup();\n        }\n        if (this.activeCellNode && this.activeRow > r1) {\n            this.resetActiveCell();\n        }\n        oldH = this.h;\n        if (this._options.autoHeight) {\n            this.h = this._options.rowHeight * numberOfRows;\n        }\n        else {\n            this.th = Math.max(this._options.rowHeight * numberOfRows, tempViewportH - ((_b = (_a = this.scrollbarDimensions) === null || _a === void 0 ? void 0 : _a.height) !== null && _b !== void 0 ? _b : 0));\n            if (this.th < this.maxSupportedCssHeight) {\n                // just one page\n                this.h = this.ph = this.th;\n                this.n = 1;\n                this.cj = 0;\n            }\n            else {\n                // break into pages\n                this.h = this.maxSupportedCssHeight;\n                this.ph = this.h / 100;\n                this.n = Math.floor(this.th / this.ph);\n                this.cj = (this.th - this.h) / (this.n - 1);\n            }\n        }\n        if (this.h !== oldH || this.enforceFrozenRowHeightRecalc) {\n            if (this.hasFrozenRows && !this._options.frozenBottom) {\n                Utils.height(this._canvasBottomL, this.h);\n                if (this.hasFrozenColumns()) {\n                    Utils.height(this._canvasBottomR, this.h);\n                }\n            }\n            else {\n                Utils.height(this._canvasTopL, this.h);\n                Utils.height(this._canvasTopR, this.h);\n            }\n            this.scrollTop = this._viewportScrollContainerY.scrollTop;\n            this.enforceFrozenRowHeightRecalc = false; // reset enforce flag\n        }\n        var oldScrollTopInRange = (this.scrollTop + this.offset <= this.th - tempViewportH);\n        if (this.th == 0 || this.scrollTop == 0) {\n            this.page = this.offset = 0;\n        }\n        else if (oldScrollTopInRange) {\n            // maintain virtual position\n            this.scrollTo(this.scrollTop + this.offset);\n        }\n        else {\n            // scroll to bottom\n            this.scrollTo(this.th - tempViewportH + ((_d = (_c = this.scrollbarDimensions) === null || _c === void 0 ? void 0 : _c.height) !== null && _d !== void 0 ? _d : 0));\n        }\n        if (this.h !== oldH && this._options.autoHeight) {\n            this.resizeCanvas();\n        }\n        if (this._options.autosizeColsMode === GridAutosizeColsMode.LegacyForceFit && oldViewportHasVScroll !== this.viewportHasVScroll) {\n            this.autosizeColumns();\n        }\n        this.updateCanvasWidth(false);\n    };\n    /** @alias `getVisibleRange` */\n    SlickGrid.prototype.getViewport = function (viewportTop, viewportLeft) {\n        return this.getVisibleRange(viewportTop, viewportLeft);\n    };\n    SlickGrid.prototype.getVisibleRange = function (viewportTop, viewportLeft) {\n        if (viewportTop == null) {\n            viewportTop = this.scrollTop;\n        }\n        if (viewportLeft == null) {\n            viewportLeft = this.scrollLeft;\n        }\n        return {\n            top: this.getRowFromPosition(viewportTop),\n            bottom: this.getRowFromPosition(viewportTop + this.viewportH) + 1,\n            leftPx: viewportLeft,\n            rightPx: viewportLeft + this.viewportW\n        };\n    };\n    /** Get rendered range */\n    SlickGrid.prototype.getRenderedRange = function (viewportTop, viewportLeft) {\n        var range = this.getVisibleRange(viewportTop, viewportLeft);\n        var buffer = Math.round(this.viewportH / this._options.rowHeight);\n        var minBuffer = this._options.minRowBuffer;\n        if (this.vScrollDir == -1) {\n            range.top -= buffer;\n            range.bottom += minBuffer;\n        }\n        else if (this.vScrollDir == 1) {\n            range.top -= minBuffer;\n            range.bottom += buffer;\n        }\n        else {\n            range.top -= minBuffer;\n            range.bottom += minBuffer;\n        }\n        range.top = Math.max(0, range.top);\n        range.bottom = Math.min(this.getDataLengthIncludingAddNew() - 1, range.bottom);\n        range.leftPx -= this.viewportW;\n        range.rightPx += this.viewportW;\n        range.leftPx = Math.max(0, range.leftPx);\n        range.rightPx = Math.min(this.canvasWidth, range.rightPx);\n        return range;\n    };\n    SlickGrid.prototype.ensureCellNodesInRowsCache = function (row) {\n        var cacheEntry = this.rowsCache[row];\n        if (cacheEntry) {\n            if (cacheEntry.cellRenderQueue.length) {\n                var rowNode = cacheEntry.rowNode;\n                var children = Array.from(rowNode[0].children);\n                if (rowNode.length > 1) {\n                    children = children.concat(Array.from(rowNode[1].children));\n                }\n                var i = children.length - 1;\n                while (cacheEntry.cellRenderQueue.length) {\n                    var columnIdx = cacheEntry.cellRenderQueue.pop();\n                    cacheEntry.cellNodesByColumnIdx[columnIdx] = children[i--];\n                }\n            }\n        }\n    };\n    SlickGrid.prototype.cleanUpCells = function (range, row) {\n        var _a, _b;\n        // Ignore frozen rows\n        if (this.hasFrozenRows\n            && ((this._options.frozenBottom && row > this.actualFrozenRow) // Frozen bottom rows\n                || (row <= this.actualFrozenRow) // Frozen top rows\n            )) {\n            return;\n        }\n        var totalCellsRemoved = 0;\n        var cacheEntry = this.rowsCache[row];\n        // Remove cells outside the range.\n        var cellsToRemove = [];\n        for (var cellNodeIdx in cacheEntry.cellNodesByColumnIdx) {\n            // I really hate it when people mess with Array.prototype.\n            if (!cacheEntry.cellNodesByColumnIdx.hasOwnProperty(cellNodeIdx)) {\n                continue;\n            }\n            // This is a string, so it needs to be cast back to a number.\n            var i = +cellNodeIdx;\n            // Ignore frozen columns\n            if (i <= this._options.frozenColumn) {\n                continue;\n            }\n            // Ignore alwaysRenderedColumns\n            if (Array.isArray(this.columns) && this.columns[i] && this.columns[i].alwaysRenderColumn) {\n                continue;\n            }\n            var colspan = cacheEntry.cellColSpans[i];\n            if (this.columnPosLeft[i] > range.rightPx ||\n                this.columnPosRight[Math.min(this.columns.length - 1, (i || 0) + colspan - 1)] < range.leftPx) {\n                if (!(row == this.activeRow && Number(i) == this.activeCell)) {\n                    cellsToRemove.push(i);\n                }\n            }\n        }\n        var cellToRemove, cellNode;\n        while ((cellToRemove = cellsToRemove.pop()) != null) {\n            cellNode = cacheEntry.cellNodesByColumnIdx[cellToRemove];\n            if (this._options.enableAsyncPostRenderCleanup && ((_a = this.postProcessedRows[row]) === null || _a === void 0 ? void 0 : _a[cellToRemove])) {\n                this.queuePostProcessedCellForCleanup(cellNode, cellToRemove, row);\n            }\n            else {\n                (_b = cellNode.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(cellNode);\n            }\n            delete cacheEntry.cellColSpans[cellToRemove];\n            delete cacheEntry.cellNodesByColumnIdx[cellToRemove];\n            if (this.postProcessedRows[row]) {\n                delete this.postProcessedRows[row][cellToRemove];\n            }\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            totalCellsRemoved++;\n        }\n    };\n    SlickGrid.prototype.cleanUpAndRenderCells = function (range) {\n        var _a, _b, _c, _d;\n        var cacheEntry;\n        var stringArray = [];\n        var processedRows = [];\n        var cellsAdded;\n        var totalCellsAdded = 0;\n        var colspan;\n        for (var row = range.top, btm = range.bottom; row <= btm; row++) {\n            cacheEntry = this.rowsCache[row];\n            if (!cacheEntry) {\n                continue;\n            }\n            // cellRenderQueue populated in renderRows() needs to be cleared first\n            this.ensureCellNodesInRowsCache(row);\n            this.cleanUpCells(range, row);\n            // Render missing cells.\n            cellsAdded = 0;\n            var metadata = (_c = (_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.getItemMetadata) === null || _b === void 0 ? void 0 : _b.call(_a, row)) !== null && _c !== void 0 ? _c : {};\n            metadata = metadata === null || metadata === void 0 ? void 0 : metadata.columns;\n            var d = this.getDataItem(row);\n            // TODO:  shorten this loop (index? heuristics? binary search?)\n            for (var i = 0, ii = this.columns.length; i < ii; i++) {\n                if (!this.columns[i] || this.columns[i].hidden)\n                    continue;\n                // Cells to the right are outside the range.\n                if (this.columnPosLeft[i] > range.rightPx) {\n                    break;\n                }\n                // Already rendered.\n                if ((colspan = cacheEntry.cellColSpans[i]) != null) {\n                    i += (colspan > 1 ? colspan - 1 : 0);\n                    continue;\n                }\n                colspan = 1;\n                if (metadata) {\n                    var columnData = metadata[this.columns[i].id] || metadata[i];\n                    colspan = (_d = columnData === null || columnData === void 0 ? void 0 : columnData.colspan) !== null && _d !== void 0 ? _d : 1;\n                    if (colspan === '*') {\n                        colspan = ii - i;\n                    }\n                }\n                if (this.columnPosRight[Math.min(ii - 1, i + colspan - 1)] > range.leftPx) {\n                    this.appendCellHtml(stringArray, row, i, colspan, d);\n                    cellsAdded++;\n                }\n                i += (colspan > 1 ? colspan - 1 : 0);\n            }\n            if (cellsAdded) {\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                totalCellsAdded += cellsAdded;\n                processedRows.push(row);\n            }\n        }\n        if (!stringArray.length) {\n            return;\n        }\n        var x = Utils.createDomElement('div', { innerHTML: this.sanitizeHtmlString(stringArray.join('')) });\n        var processedRow;\n        var node;\n        while ((processedRow = processedRows.pop()) != null) {\n            cacheEntry = this.rowsCache[processedRow];\n            var columnIdx = void 0;\n            while ((columnIdx = cacheEntry.cellRenderQueue.pop()) != null) {\n                node = x.lastChild;\n                if (this.hasFrozenColumns() && (columnIdx > this._options.frozenColumn)) {\n                    cacheEntry.rowNode[1].appendChild(node);\n                }\n                else {\n                    cacheEntry.rowNode[0].appendChild(node);\n                }\n                cacheEntry.cellNodesByColumnIdx[columnIdx] = node;\n            }\n        }\n    };\n    SlickGrid.prototype.renderRows = function (range) {\n        var stringArrayL = [];\n        var stringArrayR = [];\n        var rows = [];\n        var needToReselectCell = false;\n        var dataLength = this.getDataLength();\n        for (var i = range.top, ii = range.bottom; i <= ii; i++) {\n            if (this.rowsCache[i] || (this.hasFrozenRows && this._options.frozenBottom && i == this.getDataLength())) {\n                continue;\n            }\n            this.renderedRows++;\n            rows.push(i);\n            // Create an entry right away so that appendRowHtml() can\n            // start populating it.\n            this.rowsCache[i] = {\n                rowNode: null,\n                // ColSpans of rendered cells (by column idx).\n                // Can also be used for checking whether a cell has been rendered.\n                cellColSpans: [],\n                // Cell nodes (by column idx).  Lazy-populated by ensureCellNodesInRowsCache().\n                cellNodesByColumnIdx: [],\n                // Column indices of cell nodes that have been rendered, but not yet indexed in\n                // cellNodesByColumnIdx.  These are in the same order as cell nodes added at the\n                // end of the row.\n                cellRenderQueue: []\n            };\n            this.appendRowHtml(stringArrayL, stringArrayR, i, range, dataLength);\n            if (this.activeCellNode && this.activeRow === i) {\n                needToReselectCell = true;\n            }\n            this.counter_rows_rendered++;\n        }\n        if (!rows.length) {\n            return;\n        }\n        var x = Utils.createDomElement('div', { innerHTML: this.sanitizeHtmlString(stringArrayL.join('')) });\n        var xRight = Utils.createDomElement('div', { innerHTML: this.sanitizeHtmlString(stringArrayR.join('')) });\n        for (var i = 0, ii = rows.length; i < ii; i++) {\n            if ((this.hasFrozenRows) && (rows[i] >= this.actualFrozenRow)) {\n                if (this.hasFrozenColumns()) {\n                    this.rowsCache[rows[i]].rowNode = [x.firstChild, xRight.firstChild];\n                    this._canvasBottomL.appendChild(x.firstChild);\n                    this._canvasBottomR.appendChild(xRight.firstChild);\n                }\n                else {\n                    this.rowsCache[rows[i]].rowNode = [x.firstChild];\n                    this._canvasBottomL.appendChild(x.firstChild);\n                }\n            }\n            else if (this.hasFrozenColumns()) {\n                this.rowsCache[rows[i]].rowNode = [x.firstChild, xRight.firstChild];\n                this._canvasTopL.appendChild(x.firstChild);\n                this._canvasTopR.appendChild(xRight.firstChild);\n            }\n            else {\n                this.rowsCache[rows[i]].rowNode = [x.firstChild];\n                this._canvasTopL.appendChild(x.firstChild);\n            }\n        }\n        if (needToReselectCell) {\n            this.activeCellNode = this.getCellNode(this.activeRow, this.activeCell);\n        }\n    };\n    SlickGrid.prototype.startPostProcessing = function () {\n        if (!this._options.enableAsyncPostRender) {\n            return;\n        }\n        clearTimeout(this.h_postrender);\n        this.h_postrender = setTimeout(this.asyncPostProcessRows.bind(this), this._options.asyncPostRenderDelay);\n    };\n    SlickGrid.prototype.startPostProcessingCleanup = function () {\n        if (!this._options.enableAsyncPostRenderCleanup) {\n            return;\n        }\n        clearTimeout(this.h_postrenderCleanup);\n        this.h_postrenderCleanup = setTimeout(this.asyncPostProcessCleanupRows.bind(this), this._options.asyncPostRenderCleanupDelay);\n    };\n    SlickGrid.prototype.invalidatePostProcessingResults = function (row) {\n        // change status of columns to be re-rendered\n        for (var columnIdx in this.postProcessedRows[row]) {\n            if (this.postProcessedRows[row].hasOwnProperty(columnIdx)) {\n                this.postProcessedRows[row][columnIdx] = 'C';\n            }\n        }\n        this.postProcessFromRow = Math.min(this.postProcessFromRow, row);\n        this.postProcessToRow = Math.max(this.postProcessToRow, row);\n        this.startPostProcessing();\n    };\n    SlickGrid.prototype.updateRowPositions = function () {\n        for (var row in this.rowsCache) {\n            var rowNumber = row ? parseInt(row) : 0;\n            Utils.setStyleSize(this.rowsCache[rowNumber].rowNode[0], 'top', this.getRowTop(rowNumber));\n        }\n    };\n    /** (re)Render the grid */\n    SlickGrid.prototype.render = function () {\n        if (!this.initialized) {\n            return;\n        }\n        this.scrollThrottle.dequeue();\n        var visible = this.getVisibleRange();\n        var rendered = this.getRenderedRange();\n        // remove rows no longer in the viewport\n        this.cleanupRows(rendered);\n        // add new rows & missing cells in existing rows\n        if (this.lastRenderedScrollLeft !== this.scrollLeft) {\n            if (this.hasFrozenRows) {\n                var renderedFrozenRows = Utils.extend(true, {}, rendered);\n                if (this._options.frozenBottom) {\n                    renderedFrozenRows.top = this.actualFrozenRow;\n                    renderedFrozenRows.bottom = this.getDataLength();\n                }\n                else {\n                    renderedFrozenRows.top = 0;\n                    renderedFrozenRows.bottom = this._options.frozenRow;\n                }\n                this.cleanUpAndRenderCells(renderedFrozenRows);\n            }\n            this.cleanUpAndRenderCells(rendered);\n        }\n        // render missing rows\n        this.renderRows(rendered);\n        // Render frozen rows\n        if (this.hasFrozenRows) {\n            if (this._options.frozenBottom) {\n                this.renderRows({\n                    top: this.actualFrozenRow, bottom: this.getDataLength() - 1, leftPx: rendered.leftPx, rightPx: rendered.rightPx\n                });\n            }\n            else {\n                this.renderRows({\n                    top: 0, bottom: this._options.frozenRow - 1, leftPx: rendered.leftPx, rightPx: rendered.rightPx\n                });\n            }\n        }\n        this.postProcessFromRow = visible.top;\n        this.postProcessToRow = Math.min(this.getDataLengthIncludingAddNew() - 1, visible.bottom);\n        this.startPostProcessing();\n        this.lastRenderedScrollTop = this.scrollTop;\n        this.lastRenderedScrollLeft = this.scrollLeft;\n        this.h_render = null;\n        this.trigger(this.onRendered, { startRow: visible.top, endRow: visible.bottom, grid: this });\n    };\n    SlickGrid.prototype.handleHeaderRowScroll = function () {\n        var scrollLeft = this._headerRowScrollContainer.scrollLeft;\n        if (scrollLeft !== this._viewportScrollContainerX.scrollLeft) {\n            this._viewportScrollContainerX.scrollLeft = scrollLeft;\n        }\n    };\n    SlickGrid.prototype.handleFooterRowScroll = function () {\n        var scrollLeft = this._footerRowScrollContainer.scrollLeft;\n        if (scrollLeft !== this._viewportScrollContainerX.scrollLeft) {\n            this._viewportScrollContainerX.scrollLeft = scrollLeft;\n        }\n    };\n    SlickGrid.prototype.handlePreHeaderPanelScroll = function () {\n        this.handleElementScroll(this._preHeaderPanelScroller);\n    };\n    SlickGrid.prototype.handleElementScroll = function (element) {\n        var scrollLeft = element.scrollLeft;\n        if (scrollLeft !== this._viewportScrollContainerX.scrollLeft) {\n            this._viewportScrollContainerX.scrollLeft = scrollLeft;\n        }\n    };\n    SlickGrid.prototype.handleScroll = function () {\n        this.scrollTop = this._viewportScrollContainerY.scrollTop;\n        this.scrollLeft = this._viewportScrollContainerX.scrollLeft;\n        return this._handleScroll(false);\n    };\n    SlickGrid.prototype._handleScroll = function (isMouseWheel) {\n        var maxScrollDistanceY = this._viewportScrollContainerY.scrollHeight - this._viewportScrollContainerY.clientHeight;\n        var maxScrollDistanceX = this._viewportScrollContainerY.scrollWidth - this._viewportScrollContainerY.clientWidth;\n        // Protect against erroneous clientHeight/Width greater than scrollHeight/Width.\n        // Sometimes seen in Chrome.\n        maxScrollDistanceY = Math.max(0, maxScrollDistanceY);\n        maxScrollDistanceX = Math.max(0, maxScrollDistanceX);\n        // Ceiling the max scroll values\n        if (this.scrollTop > maxScrollDistanceY) {\n            this.scrollTop = maxScrollDistanceY;\n        }\n        if (this.scrollLeft > maxScrollDistanceX) {\n            this.scrollLeft = maxScrollDistanceX;\n        }\n        var vScrollDist = Math.abs(this.scrollTop - this.prevScrollTop);\n        var hScrollDist = Math.abs(this.scrollLeft - this.prevScrollLeft);\n        if (hScrollDist) {\n            this.prevScrollLeft = this.scrollLeft;\n            // adjust scroll position of all div containers when scrolling the grid\n            this._viewportScrollContainerX.scrollLeft = this.scrollLeft;\n            this._headerScrollContainer.scrollLeft = this.scrollLeft;\n            this._topPanelScrollers[0].scrollLeft = this.scrollLeft;\n            if (this._options.createFooterRow) {\n                this._footerRowScrollContainer.scrollLeft = this.scrollLeft;\n            }\n            if (this._options.createPreHeaderPanel) {\n                if (this.hasFrozenColumns()) {\n                    this._preHeaderPanelScrollerR.scrollLeft = this.scrollLeft;\n                }\n                else {\n                    this._preHeaderPanelScroller.scrollLeft = this.scrollLeft;\n                }\n            }\n            if (this.hasFrozenColumns()) {\n                if (this.hasFrozenRows) {\n                    this._viewportTopR.scrollLeft = this.scrollLeft;\n                }\n                this._headerRowScrollerR.scrollLeft = this.scrollLeft; // right header row scrolling with frozen grid\n            }\n            else {\n                if (this.hasFrozenRows) {\n                    this._viewportTopL.scrollLeft = this.scrollLeft;\n                }\n                this._headerRowScrollerL.scrollLeft = this.scrollLeft; // left header row scrolling with regular grid\n            }\n        }\n        // autoheight suppresses vertical scrolling, but editors can create a div larger than\n        // the row vertical size, which can lead to a vertical scroll bar appearing temporarily\n        // while the editor is displayed. this is not part of the grid scrolling, so we should ignore it\n        if (vScrollDist && !this._options.autoHeight) {\n            this.vScrollDir = this.prevScrollTop < this.scrollTop ? 1 : -1;\n            this.prevScrollTop = this.scrollTop;\n            if (isMouseWheel) {\n                this._viewportScrollContainerY.scrollTop = this.scrollTop;\n            }\n            if (this.hasFrozenColumns()) {\n                if (this.hasFrozenRows && !this._options.frozenBottom) {\n                    this._viewportBottomL.scrollTop = this.scrollTop;\n                }\n                else {\n                    this._viewportTopL.scrollTop = this.scrollTop;\n                }\n            }\n            // switch virtual pages if needed\n            if (vScrollDist < this.viewportH) {\n                this.scrollTo(this.scrollTop + this.offset);\n            }\n            else {\n                var oldOffset = this.offset;\n                if (this.h == this.viewportH) {\n                    this.page = 0;\n                }\n                else {\n                    this.page = Math.min(this.n - 1, Math.floor(this.scrollTop * ((this.th - this.viewportH) / (this.h - this.viewportH)) * (1 / this.ph)));\n                }\n                this.offset = Math.round(this.page * this.cj);\n                if (oldOffset !== this.offset) {\n                    this.invalidateAllRows();\n                }\n            }\n        }\n        if (hScrollDist || vScrollDist) {\n            var dx = Math.abs(this.lastRenderedScrollLeft - this.scrollLeft);\n            var dy = Math.abs(this.lastRenderedScrollTop - this.scrollTop);\n            if (dx > 20 || dy > 20) {\n                // if rendering is forced or scrolling is small enough to be \"easy\", just render\n                if (this._options.forceSyncScrolling || (dy < this.viewportH && dx < this.viewportW)) {\n                    this.render();\n                }\n                else {\n                    // otherwise, perform \"difficult\" renders at a capped frequency\n                    this.scrollThrottle.enqueue();\n                }\n                this.trigger(this.onViewportChanged, {});\n            }\n        }\n        this.trigger(this.onScroll, { scrollLeft: this.scrollLeft, scrollTop: this.scrollTop });\n        if (hScrollDist || vScrollDist) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * limits the frequency at which the provided action is executed.\n     * call enqueue to execute the action - it will execute either immediately or, if it was executed less than minPeriod_ms in the past, as soon as minPeriod_ms has expired.\n     * call dequeue to cancel any pending action.\n     */\n    SlickGrid.prototype.actionThrottle = function (action, minPeriod_ms) {\n        var _this = this;\n        var blocked = false;\n        var queued = false;\n        var enqueue = function () {\n            if (!blocked) {\n                blockAndExecute();\n            }\n            else {\n                queued = true;\n            }\n        };\n        var dequeue = function () {\n            queued = false;\n        };\n        var blockAndExecute = function () {\n            blocked = true;\n            setTimeout(unblock, minPeriod_ms);\n            action.call(_this);\n        };\n        var unblock = function () {\n            if (queued) {\n                dequeue();\n                blockAndExecute();\n            }\n            else {\n                blocked = false;\n            }\n        };\n        return {\n            enqueue: enqueue.bind(this),\n            dequeue: dequeue.bind(this)\n        };\n    };\n    SlickGrid.prototype.asyncPostProcessRows = function () {\n        var dataLength = this.getDataLength();\n        while (this.postProcessFromRow <= this.postProcessToRow) {\n            var row = (this.vScrollDir >= 0) ? this.postProcessFromRow++ : this.postProcessToRow--;\n            var cacheEntry = this.rowsCache[row];\n            if (!cacheEntry || row >= dataLength) {\n                continue;\n            }\n            if (!this.postProcessedRows[row]) {\n                this.postProcessedRows[row] = {};\n            }\n            this.ensureCellNodesInRowsCache(row);\n            for (var colIdx in cacheEntry.cellNodesByColumnIdx) {\n                if (!cacheEntry.cellNodesByColumnIdx.hasOwnProperty(colIdx)) {\n                    continue;\n                }\n                var columnIdx = +colIdx;\n                var m = this.columns[columnIdx];\n                var processedStatus = this.postProcessedRows[row][columnIdx]; // C=cleanup and re-render, R=rendered\n                if (m.asyncPostRender && processedStatus !== 'R') {\n                    var node = cacheEntry.cellNodesByColumnIdx[columnIdx];\n                    if (node) {\n                        m.asyncPostRender(node, row, this.getDataItem(row), m, (processedStatus === 'C'));\n                    }\n                    this.postProcessedRows[row][columnIdx] = 'R';\n                }\n            }\n            this.h_postrender = setTimeout(this.asyncPostProcessRows.bind(this), this._options.asyncPostRenderDelay);\n            return;\n        }\n    };\n    SlickGrid.prototype.asyncPostProcessCleanupRows = function () {\n        if (this.postProcessedCleanupQueue.length > 0) {\n            var groupId = this.postProcessedCleanupQueue[0].groupId;\n            // loop through all queue members with this groupID\n            while (this.postProcessedCleanupQueue.length > 0 && this.postProcessedCleanupQueue[0].groupId == groupId) {\n                var entry = this.postProcessedCleanupQueue.shift();\n                if ((entry === null || entry === void 0 ? void 0 : entry.actionType) === 'R') {\n                    entry.node.forEach(function (node) {\n                        node.remove();\n                    });\n                }\n                if ((entry === null || entry === void 0 ? void 0 : entry.actionType) === 'C') {\n                    var column = this.columns[entry.columnIdx];\n                    if (column.asyncPostRenderCleanup && entry.node) {\n                        // cleanup must also remove element\n                        column.asyncPostRenderCleanup(entry.node, entry.rowIdx, column);\n                    }\n                }\n            }\n            // call this function again after the specified delay\n            this.h_postrenderCleanup = setTimeout(this.asyncPostProcessCleanupRows.bind(this), this._options.asyncPostRenderCleanupDelay);\n        }\n    };\n    SlickGrid.prototype.updateCellCssStylesOnRenderedRows = function (addedHash, removedHash) {\n        var node, columnId, addedRowHash, removedRowHash;\n        for (var row in this.rowsCache) {\n            removedRowHash = removedHash === null || removedHash === void 0 ? void 0 : removedHash[row];\n            addedRowHash = addedHash === null || addedHash === void 0 ? void 0 : addedHash[row];\n            if (removedRowHash) {\n                for (columnId in removedRowHash) {\n                    if (!addedRowHash || removedRowHash[columnId] !== addedRowHash[columnId]) {\n                        node = this.getCellNode(+row, this.getColumnIndex(columnId));\n                        if (node) {\n                            node.classList.remove(removedRowHash[columnId]);\n                        }\n                    }\n                }\n            }\n            if (addedRowHash) {\n                for (columnId in addedRowHash) {\n                    if (!removedRowHash || removedRowHash[columnId] !== addedRowHash[columnId]) {\n                        node = this.getCellNode(+row, this.getColumnIndex(columnId));\n                        if (node) {\n                            node.classList.add(addedRowHash[columnId]);\n                        }\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Adds an \"overlay\" of CSS classes to cell DOM elements. SlickGrid can have many such overlays associated with different keys and they are frequently used by plugins. For example, SlickGrid uses this method internally to decorate selected cells with selectedCellCssClass (see options).\n     * @param key A unique key you can use in calls to setCellCssStyles and removeCellCssStyles. If a hash with that key has already been set, an exception will be thrown.\n     * @param hash A hash of additional cell CSS classes keyed by row number and then by column id. Multiple CSS classes can be specified and separated by space.\n     * @example\n     * `{\n     * \t 0: { number_column: SlickEvent; title_column: SlickEvent;\t},\n     * \t 4: { percent_column: SlickEvent; }\n     * }`\n     */\n    SlickGrid.prototype.addCellCssStyles = function (key, hash) {\n        if (this.cellCssClasses[key]) {\n            throw new Error(\"SlickGrid addCellCssStyles: cell CSS hash with key \\\"\".concat(key, \"\\\" already exists.\"));\n        }\n        this.cellCssClasses[key] = hash;\n        this.updateCellCssStylesOnRenderedRows(hash, null);\n        this.trigger(this.onCellCssStylesChanged, { key: key, hash: hash, grid: this });\n    };\n    /**\n     * Removes an \"overlay\" of CSS classes from cell DOM elements. See setCellCssStyles for more.\n     * @param key A string key.\n     */\n    SlickGrid.prototype.removeCellCssStyles = function (key) {\n        if (!this.cellCssClasses[key]) {\n            return;\n        }\n        this.updateCellCssStylesOnRenderedRows(null, this.cellCssClasses[key]);\n        delete this.cellCssClasses[key];\n        this.trigger(this.onCellCssStylesChanged, { key: key, hash: null, grid: this });\n    };\n    /**\n     * Sets CSS classes to specific grid cells by calling removeCellCssStyles(key) followed by addCellCssStyles(key, hash). key is name for this set of styles so you can reference it later - to modify it or remove it, for example. hash is a per-row-index, per-column-name nested hash of CSS classes to apply.\n     * Suppose you have a grid with columns:\n     * [\"login\", \"name\", \"birthday\", \"age\", \"likes_icecream\", \"favorite_cake\"]\n     * ...and you'd like to highlight the \"birthday\" and \"age\" columns for people whose birthday is today, in this case, rows at index 0 and 9. (The first and tenth row in the grid).\n     * @param {String} key A string key. Will overwrite any data already associated with this key.\n     * @param {Object} hash A hash of additional cell CSS classes keyed by row number and then by column id. Multiple CSS classes can be specified and separated by space.\n     */\n    SlickGrid.prototype.setCellCssStyles = function (key, hash) {\n        var prevHash = this.cellCssClasses[key];\n        this.cellCssClasses[key] = hash;\n        this.updateCellCssStylesOnRenderedRows(hash, prevHash);\n        this.trigger(this.onCellCssStylesChanged, { key: key, hash: hash, grid: this });\n    };\n    /**\n     * Accepts a key name, returns the group of CSS styles defined under that name. See setCellCssStyles for more info.\n     * @param {String} key A string.\n     */\n    SlickGrid.prototype.getCellCssStyles = function (key) {\n        return this.cellCssClasses[key];\n    };\n    /**\n     * Flashes the cell twice by toggling the CSS class 4 times.\n     * @param {number} row A row index.\n     * @param {number} cell A column index.\n     * @param {number} [speed] (optional) - The milliseconds delay between the toggling calls. Defaults to 100 ms.\n     */\n    SlickGrid.prototype.flashCell = function (row, cell, speed) {\n        var _this = this;\n        speed = speed || 250;\n        var toggleCellClass = function (cellNode, times) {\n            if (times < 1) {\n                return;\n            }\n            setTimeout(function () {\n                if (times % 2 == 0) {\n                    cellNode.classList.add(_this._options.cellFlashingCssClass || '');\n                }\n                else {\n                    cellNode.classList.remove(_this._options.cellFlashingCssClass || '');\n                }\n                toggleCellClass(cellNode, times - 1);\n            }, speed);\n        };\n        if (this.rowsCache[row]) {\n            var cellNode = this.getCellNode(row, cell);\n            if (cellNode) {\n                toggleCellClass(cellNode, 5);\n            }\n        }\n    };\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // Interactivity\n    SlickGrid.prototype.handleMouseWheel = function (e, _delta, deltaX, deltaY) {\n        this.scrollTop = Math.max(0, this._viewportScrollContainerY.scrollTop - (deltaY * this._options.rowHeight));\n        this.scrollLeft = this._viewportScrollContainerX.scrollLeft + (deltaX * 10);\n        var handled = this._handleScroll(true);\n        if (handled) {\n            e.preventDefault();\n        }\n    };\n    SlickGrid.prototype.handleDragInit = function (e, dd) {\n        var cell = this.getCellFromEvent(e);\n        if (!cell || !this.cellExists(cell.row, cell.cell)) {\n            return false;\n        }\n        var retval = this.trigger(this.onDragInit, dd, e);\n        if (retval.isImmediatePropagationStopped()) {\n            return retval.getReturnValue();\n        }\n        // if nobody claims to be handling drag'n'drop by stopping immediate propagation,\n        // cancel out of it\n        return false;\n    };\n    SlickGrid.prototype.handleDragStart = function (e, dd) {\n        var cell = this.getCellFromEvent(e);\n        if (!cell || !this.cellExists(cell.row, cell.cell)) {\n            return false;\n        }\n        var retval = this.trigger(this.onDragStart, dd, e);\n        if (retval.isImmediatePropagationStopped()) {\n            return retval.getReturnValue();\n        }\n        return false;\n    };\n    SlickGrid.prototype.handleDrag = function (e, dd) {\n        return this.trigger(this.onDrag, dd, e).getReturnValue();\n    };\n    SlickGrid.prototype.handleDragEnd = function (e, dd) {\n        this.trigger(this.onDragEnd, dd, e);\n    };\n    SlickGrid.prototype.handleKeyDown = function (e) {\n        var _a, _b;\n        var retval = this.trigger(this.onKeyDown, { row: this.activeRow, cell: this.activeCell }, e);\n        var handled = retval.isImmediatePropagationStopped();\n        if (!handled) {\n            if (!e.shiftKey && !e.altKey) {\n                if (this._options.editable && ((_a = this.currentEditor) === null || _a === void 0 ? void 0 : _a.keyCaptureList)) {\n                    if (this.currentEditor.keyCaptureList.indexOf(String(e.which)) > -1) {\n                        return;\n                    }\n                }\n                if (e.which == keyCode.HOME) {\n                    handled = (e.ctrlKey) ? this.navigateTop() : this.navigateRowStart();\n                }\n                else if (e.which == keyCode.END) {\n                    handled = (e.ctrlKey) ? this.navigateBottom() : this.navigateRowEnd();\n                }\n            }\n        }\n        if (!handled) {\n            if (!e.shiftKey && !e.altKey && !e.ctrlKey) {\n                // editor may specify an array of keys to bubble\n                if (this._options.editable && ((_b = this.currentEditor) === null || _b === void 0 ? void 0 : _b.keyCaptureList)) {\n                    if (this.currentEditor.keyCaptureList.indexOf(String(e.which)) > -1) {\n                        return;\n                    }\n                }\n                if (e.which == keyCode.ESCAPE) {\n                    if (!this.getEditorLock().isActive()) {\n                        return; // no editing mode to cancel, allow bubbling and default processing (exit without cancelling the event)\n                    }\n                    this.cancelEditAndSetFocus();\n                }\n                else if (e.which == keyCode.PAGE_DOWN) {\n                    this.navigatePageDown();\n                    handled = true;\n                }\n                else if (e.which == keyCode.PAGE_UP) {\n                    this.navigatePageUp();\n                    handled = true;\n                }\n                else if (e.which == keyCode.LEFT) {\n                    handled = this.navigateLeft();\n                }\n                else if (e.which == keyCode.RIGHT) {\n                    handled = this.navigateRight();\n                }\n                else if (e.which == keyCode.UP) {\n                    handled = this.navigateUp();\n                }\n                else if (e.which == keyCode.DOWN) {\n                    handled = this.navigateDown();\n                }\n                else if (e.which == keyCode.TAB) {\n                    handled = this.navigateNext();\n                }\n                else if (e.which == keyCode.ENTER) {\n                    if (this._options.editable) {\n                        if (this.currentEditor) {\n                            // adding new row\n                            if (this.activeRow === this.getDataLength()) {\n                                this.navigateDown();\n                            }\n                            else {\n                                this.commitEditAndSetFocus();\n                            }\n                        }\n                        else {\n                            if (this.getEditorLock().commitCurrentEdit()) {\n                                this.makeActiveCellEditable(undefined, undefined, e);\n                            }\n                        }\n                    }\n                    handled = true;\n                }\n            }\n            else if (e.which == keyCode.TAB && e.shiftKey && !e.ctrlKey && !e.altKey) {\n                handled = this.navigatePrev();\n            }\n        }\n        if (handled) {\n            // the event has been handled so don't let parent element (bubbling/propagation) or browser (default) handle it\n            e.stopPropagation();\n            e.preventDefault();\n            try {\n                e.originalEvent.keyCode = 0; // prevent default behaviour for special keys in IE browsers (F3, F5, etc.)\n            }\n            // ignore exceptions - setting the original event's keycode throws access denied exception for \"Ctrl\"\n            // (hitting control key only, nothing else), \"Shift\" (maybe others)\n            catch (error) { }\n        }\n    };\n    SlickGrid.prototype.handleClick = function (evt) {\n        var _a;\n        var e = evt instanceof SlickEventData ? evt.getNativeEvent() : evt;\n        if (!this.currentEditor) {\n            // if this click resulted in some cell child node getting focus,\n            // don't steal it back - keyboard events will still bubble up\n            // IE9+ seems to default DIVs to tabIndex=0 instead of -1, so check for cell clicks directly.\n            if (e.target !== document.activeElement || e.target.classList.contains('slick-cell')) {\n                var selection = this.getTextSelection(); //store text-selection and restore it after\n                this.setFocus();\n                this.setTextSelection(selection);\n            }\n        }\n        var cell = this.getCellFromEvent(e);\n        if (!cell || (this.currentEditor !== null && this.activeRow == cell.row && this.activeCell == cell.cell)) {\n            return;\n        }\n        evt = this.trigger(this.onClick, { row: cell.row, cell: cell.cell }, evt || e);\n        if (evt.isImmediatePropagationStopped()) {\n            return;\n        }\n        // this optimisation causes trouble - MLeibman #329\n        //if ((activeCell !== cell.cell || activeRow !== cell.row) && canCellBeActive(cell.row, cell.cell)) {\n        if (this.canCellBeActive(cell.row, cell.cell)) {\n            if (!this.getEditorLock().isActive() || this.getEditorLock().commitCurrentEdit()) {\n                this.scrollRowIntoView(cell.row, false);\n                var preClickModeOn = (((_a = e.target) === null || _a === void 0 ? void 0 : _a.className) === preClickClassName);\n                var column = this.columns[cell.cell];\n                var suppressActiveCellChangedEvent = !!(this._options.editable && (column === null || column === void 0 ? void 0 : column.editor) && this._options.suppressActiveCellChangeOnEdit);\n                this.setActiveCellInternal(this.getCellNode(cell.row, cell.cell), null, preClickModeOn, suppressActiveCellChangedEvent, e);\n            }\n        }\n    };\n    SlickGrid.prototype.handleContextMenu = function (e) {\n        var cell = e.target.closest('.slick-cell');\n        if (!cell) {\n            return;\n        }\n        // are we editing this cell?\n        if (this.activeCellNode === cell && this.currentEditor !== null) {\n            return;\n        }\n        this.trigger(this.onContextMenu, {}, e);\n    };\n    SlickGrid.prototype.handleDblClick = function (e) {\n        var cell = this.getCellFromEvent(e);\n        if (!cell || (this.currentEditor !== null && this.activeRow == cell.row && this.activeCell == cell.cell)) {\n            return;\n        }\n        this.trigger(this.onDblClick, { row: cell.row, cell: cell.cell }, e);\n        if (e.defaultPrevented) {\n            return;\n        }\n        if (this._options.editable) {\n            this.gotoCell(cell.row, cell.cell, true, e);\n        }\n    };\n    SlickGrid.prototype.handleHeaderMouseEnter = function (e) {\n        var c = Utils.storage.get(e.target.closest('.slick-header-column'), 'column');\n        if (!c) {\n            return;\n        }\n        this.trigger(this.onHeaderMouseEnter, {\n            column: c,\n            grid: this\n        }, e);\n    };\n    SlickGrid.prototype.handleHeaderMouseLeave = function (e) {\n        var c = Utils.storage.get(e.target.closest('.slick-header-column'), 'column');\n        if (!c) {\n            return;\n        }\n        this.trigger(this.onHeaderMouseLeave, {\n            column: c,\n            grid: this\n        }, e);\n    };\n    SlickGrid.prototype.handleHeaderRowMouseEnter = function (e) {\n        var c = Utils.storage.get(e.target.closest('.slick-headerrow-column'), 'column');\n        if (!c) {\n            return;\n        }\n        this.trigger(this.onHeaderRowMouseEnter, {\n            column: c,\n            grid: this\n        }, e);\n    };\n    SlickGrid.prototype.handleHeaderRowMouseLeave = function (e) {\n        var c = Utils.storage.get(e.target.closest('.slick-headerrow-column'), 'column');\n        if (!c) {\n            return;\n        }\n        this.trigger(this.onHeaderRowMouseLeave, {\n            column: c,\n            grid: this\n        }, e);\n    };\n    SlickGrid.prototype.handleHeaderContextMenu = function (e) {\n        var header = e.target.closest('.slick-header-column');\n        var column = header && Utils.storage.get(header, 'column');\n        this.trigger(this.onHeaderContextMenu, { column: column }, e);\n    };\n    SlickGrid.prototype.handleHeaderClick = function (e) {\n        if (this.columnResizeDragging) {\n            return;\n        }\n        var header = e.target.closest('.slick-header-column');\n        var column = header && Utils.storage.get(header, 'column');\n        if (column) {\n            this.trigger(this.onHeaderClick, { column: column }, e);\n        }\n    };\n    SlickGrid.prototype.handleFooterContextMenu = function (e) {\n        var footer = e.target.closest('.slick-footerrow-column');\n        var column = footer && Utils.storage.get(footer, 'column');\n        this.trigger(this.onFooterContextMenu, { column: column }, e);\n    };\n    SlickGrid.prototype.handleFooterClick = function (e) {\n        var footer = e.target.closest('.slick-footerrow-column');\n        var column = footer && Utils.storage.get(footer, 'column');\n        this.trigger(this.onFooterClick, { column: column }, e);\n    };\n    SlickGrid.prototype.handleCellMouseOver = function (e) {\n        this.trigger(this.onMouseEnter, {}, e);\n    };\n    SlickGrid.prototype.handleCellMouseOut = function (e) {\n        this.trigger(this.onMouseLeave, {}, e);\n    };\n    SlickGrid.prototype.cellExists = function (row, cell) {\n        return !(row < 0 || row >= this.getDataLength() || cell < 0 || cell >= this.columns.length);\n    };\n    /**\n     * Returns a hash containing row and cell indexes. Coordinates are relative to the top left corner of the grid beginning with the first row (not including the column headers).\n     * @param x An x coordinate.\n     * @param y A y coordinate.\n     */\n    SlickGrid.prototype.getCellFromPoint = function (x, y) {\n        var row = this.getRowFromPosition(y);\n        var cell = 0;\n        var w = 0;\n        for (var i = 0; i < this.columns.length && w < x; i++) {\n            if (!this.columns[i] || this.columns[i].hidden)\n                continue;\n            w += this.columns[i].width;\n            cell++;\n        }\n        if (cell < 0) {\n            cell = 0;\n        }\n        return { row: row, cell: (cell - 1) };\n    };\n    SlickGrid.prototype.getCellFromNode = function (cellNode) {\n        // read column number from .l<columnNumber> CSS class\n        var cls = /l\\d+/.exec(cellNode.className);\n        if (!cls) {\n            throw new Error(\"SlickGrid getCellFromNode: cannot get cell - \".concat(cellNode.className));\n        }\n        return parseInt(cls[0].substr(1, cls[0].length - 1), 10);\n    };\n    SlickGrid.prototype.getRowFromNode = function (rowNode) {\n        var _a;\n        for (var row in this.rowsCache) {\n            for (var i in this.rowsCache[row].rowNode) {\n                if (((_a = this.rowsCache[row].rowNode) === null || _a === void 0 ? void 0 : _a[+i]) === rowNode) {\n                    return (row ? parseInt(row) : 0);\n                }\n            }\n        }\n        return null;\n    };\n    /**\n     * Get frozen (pinned) row offset\n     * @param {Number} row - grid row number\n     */\n    SlickGrid.prototype.getFrozenRowOffset = function (row) {\n        //let offset = ( hasFrozenRows ) ? ( this._options.frozenBottom ) ? ( row >= actualFrozenRow ) ? ( h < viewportTopH ) ? ( actualFrozenRow * this._options.rowHeight ) : h : 0 : ( row >= actualFrozenRow ) ? frozenRowsHeight : 0 : 0; // WTF?\n        var offset = 0;\n        if (this.hasFrozenRows) {\n            if (this._options.frozenBottom) {\n                if (row >= this.actualFrozenRow) {\n                    if (this.h < this.viewportTopH) {\n                        offset = (this.actualFrozenRow * this._options.rowHeight);\n                    }\n                    else {\n                        offset = this.h;\n                    }\n                }\n                else {\n                    offset = 0;\n                }\n            }\n            else {\n                if (row >= this.actualFrozenRow) {\n                    offset = this.frozenRowsHeight;\n                }\n                else {\n                    offset = 0;\n                }\n            }\n        }\n        else {\n            offset = 0;\n        }\n        return offset;\n    };\n    /**\n     * Returns a hash containing row and cell indexes from a standard W3C event.\n     * @param {*} event A standard W3C event.\n     */\n    SlickGrid.prototype.getCellFromEvent = function (evt) {\n        var e = evt instanceof SlickEventData ? evt.getNativeEvent() : evt;\n        var targetEvent = e.touches ? e.touches[0] : e;\n        var cellNode = e.target.closest('.slick-cell');\n        if (!cellNode) {\n            return null;\n        }\n        var row = this.getRowFromNode(cellNode.parentNode);\n        if (this.hasFrozenRows) {\n            var rowOffset = 0;\n            var c = Utils.offset(Utils.parents(cellNode, '.grid-canvas')[0]);\n            var isBottom = Utils.parents(cellNode, '.grid-canvas-bottom').length;\n            if (isBottom) {\n                rowOffset = (this._options.frozenBottom) ? Utils.height(this._canvasTopL) : this.frozenRowsHeight;\n            }\n            row = this.getCellFromPoint(targetEvent.clientX - c.left, targetEvent.clientY - c.top + rowOffset + document.documentElement.scrollTop).row;\n        }\n        var cell = this.getCellFromNode(cellNode);\n        if (row == null || cell == null) {\n            return null;\n        }\n        else {\n            return { row: row, cell: cell };\n        }\n    };\n    /**\n     * Returns an object representing information about a cell's position. All coordinates are absolute and take into consideration the visibility and scrolling position of all ancestors.\n     * @param row A row number.\n     * @param cell A column number.\n     */\n    SlickGrid.prototype.getCellNodeBox = function (row, cell) {\n        var _a;\n        if (!this.cellExists(row, cell)) {\n            return null;\n        }\n        var frozenRowOffset = this.getFrozenRowOffset(row);\n        var y1 = this.getRowTop(row) - frozenRowOffset;\n        var y2 = y1 + this._options.rowHeight - 1;\n        var x1 = 0;\n        for (var i = 0; i < cell; i++) {\n            if (!this.columns[i] || this.columns[i].hidden)\n                continue;\n            x1 += (this.columns[i].width || 0);\n            if (this._options.frozenColumn == i) {\n                x1 = 0;\n            }\n        }\n        var x2 = x1 + (((_a = this.columns[cell]) === null || _a === void 0 ? void 0 : _a.width) || 0);\n        return {\n            top: y1,\n            left: x1,\n            bottom: y2,\n            right: x2\n        };\n    };\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // Cell switching\n    /**  Resets active cell. */\n    SlickGrid.prototype.resetActiveCell = function () {\n        this.setActiveCellInternal(null, false);\n    };\n    /** @alias `setFocus` */\n    SlickGrid.prototype.focus = function () {\n        this.setFocus();\n    };\n    SlickGrid.prototype.setFocus = function () {\n        if (this.tabbingDirection == -1) {\n            this._focusSink.focus();\n        }\n        else {\n            this._focusSink2.focus();\n        }\n    };\n    /** Scroll to a specific cell and make it into the view */\n    SlickGrid.prototype.scrollCellIntoView = function (row, cell, doPaging) {\n        this.scrollRowIntoView(row, doPaging);\n        if (cell <= this._options.frozenColumn) {\n            return;\n        }\n        var colspan = this.getColspan(row, cell);\n        this.internalScrollColumnIntoView(this.columnPosLeft[cell], this.columnPosRight[cell + (colspan > 1 ? colspan - 1 : 0)]);\n    };\n    SlickGrid.prototype.internalScrollColumnIntoView = function (left, right) {\n        var _a, _b;\n        var scrollRight = this.scrollLeft + Utils.width(this._viewportScrollContainerX) - (this.viewportHasVScroll ? ((_b = (_a = this.scrollbarDimensions) === null || _a === void 0 ? void 0 : _a.width) !== null && _b !== void 0 ? _b : 0) : 0);\n        if (left < this.scrollLeft) {\n            this._viewportScrollContainerX.scrollLeft = left;\n            this.handleScroll();\n            this.render();\n        }\n        else if (right > scrollRight) {\n            this._viewportScrollContainerX.scrollLeft = Math.min(left, right - this._viewportScrollContainerX.clientWidth);\n            this.handleScroll();\n            this.render();\n        }\n    };\n    /**\n     * Scroll to a specific column and show it into the viewport\n     * @param {Number} cell - cell column number\n     */\n    SlickGrid.prototype.scrollColumnIntoView = function (cell) {\n        this.internalScrollColumnIntoView(this.columnPosLeft[cell], this.columnPosRight[cell]);\n    };\n    SlickGrid.prototype.setActiveCellInternal = function (newCell, opt_editMode, preClickModeOn, suppressActiveCellChangedEvent, e) {\n        var _this = this;\n        var _a, _b, _c, _d;\n        if (this.activeCellNode !== null) {\n            this.makeActiveCellNormal();\n            this.activeCellNode.classList.remove('active');\n            (_b = (_a = this.rowsCache[this.activeRow]) === null || _a === void 0 ? void 0 : _a.rowNode) === null || _b === void 0 ? void 0 : _b.forEach(function (node) { return node.classList.remove('active'); });\n        }\n        // let activeCellChanged = (this.activeCellNode !== newCell);\n        this.activeCellNode = newCell;\n        if (this.activeCellNode != null) {\n            var activeCellOffset = Utils.offset(this.activeCellNode);\n            var rowOffset = Math.floor(Utils.offset(Utils.parents(this.activeCellNode, '.grid-canvas')[0]).top);\n            var isBottom = Utils.parents(this.activeCellNode, '.grid-canvas-bottom').length;\n            if (this.hasFrozenRows && isBottom) {\n                rowOffset -= (this._options.frozenBottom)\n                    ? Utils.height(this._canvasTopL)\n                    : this.frozenRowsHeight;\n            }\n            var cell = this.getCellFromPoint(activeCellOffset.left, Math.ceil(activeCellOffset.top) - rowOffset);\n            this.activeRow = cell.row;\n            this.activeCell = this.activePosX = this.activeCell = this.activePosX = this.getCellFromNode(this.activeCellNode);\n            if (opt_editMode == null) {\n                opt_editMode = (this.activeRow == this.getDataLength()) || this._options.autoEdit;\n            }\n            if (this._options.showCellSelection) {\n                this.activeCellNode.classList.add('active');\n                (_d = (_c = this.rowsCache[this.activeRow]) === null || _c === void 0 ? void 0 : _c.rowNode) === null || _d === void 0 ? void 0 : _d.forEach(function (node) { return node.classList.add('active'); });\n            }\n            if (this._options.editable && opt_editMode && this.isCellPotentiallyEditable(this.activeRow, this.activeCell)) {\n                clearTimeout(this.h_editorLoader);\n                if (this._options.asyncEditorLoading) {\n                    this.h_editorLoader = setTimeout(function () {\n                        _this.makeActiveCellEditable(undefined, preClickModeOn, e);\n                    }, this._options.asyncEditorLoadDelay);\n                }\n                else {\n                    this.makeActiveCellEditable(undefined, preClickModeOn, e);\n                }\n            }\n        }\n        else {\n            this.activeRow = this.activeCell = null;\n        }\n        // this optimisation causes trouble - MLeibman #329\n        //if (activeCellChanged) {\n        if (!suppressActiveCellChangedEvent) {\n            this.trigger(this.onActiveCellChanged, this.getActiveCell());\n        }\n        //}\n    };\n    SlickGrid.prototype.clearTextSelection = function () {\n        var _a;\n        if ((_a = document.selection) === null || _a === void 0 ? void 0 : _a.empty) {\n            try {\n                //IE fails here if selected element is not in dom\n                document.selection.empty();\n            }\n            catch (e) { }\n        }\n        else if (window.getSelection) {\n            var sel = window.getSelection();\n            if (sel === null || sel === void 0 ? void 0 : sel.removeAllRanges) {\n                sel.removeAllRanges();\n            }\n        }\n    };\n    SlickGrid.prototype.isCellPotentiallyEditable = function (row, cell) {\n        var dataLength = this.getDataLength();\n        // is the data for this row loaded?\n        if (row < dataLength && !this.getDataItem(row)) {\n            return false;\n        }\n        // are we in the Add New row? Can we create new from this cell?\n        if (this.columns[cell].cannotTriggerInsert && row >= dataLength) {\n            return false;\n        }\n        // does this cell have an editor?\n        if (!this.columns[cell] || this.columns[cell].hidden || !this.getEditor(row, cell)) {\n            return false;\n        }\n        return true;\n    };\n    SlickGrid.prototype.makeActiveCellNormal = function () {\n        if (!this.currentEditor) {\n            return;\n        }\n        this.trigger(this.onBeforeCellEditorDestroy, { editor: this.currentEditor });\n        this.currentEditor.destroy();\n        this.currentEditor = null;\n        if (this.activeCellNode) {\n            var d = this.getDataItem(this.activeRow);\n            this.activeCellNode.classList.remove('editable');\n            this.activeCellNode.classList.remove('invalid');\n            if (d) {\n                var column = this.columns[this.activeCell];\n                var formatter = this.getFormatter(this.activeRow, column);\n                var formatterResult = formatter(this.activeRow, this.activeCell, this.getDataItemValueForColumn(d, column), column, d, this);\n                this.applyFormatResultToCellNode(formatterResult, this.activeCellNode);\n                this.invalidatePostProcessingResults(this.activeRow);\n            }\n        }\n        // if there previously was text selected on a page (such as selected text in the edit cell just removed),\n        // IE can't set focus to anything else correctly\n        if (navigator.userAgent.toLowerCase().match(/msie/)) {\n            this.clearTextSelection();\n        }\n        this.getEditorLock().deactivate(this.editController);\n    };\n    SlickGrid.prototype.editActiveCell = function (editor, preClickModeOn, e) {\n        this.makeActiveCellEditable(editor, preClickModeOn, e);\n    };\n    SlickGrid.prototype.makeActiveCellEditable = function (editor, preClickModeOn, e) {\n        var _a, _b, _c, _d, _f;\n        if (!this.activeCellNode) {\n            return;\n        }\n        if (!this._options.editable) {\n            throw new Error('SlickGrid makeActiveCellEditable : should never get called when this._options.editable is false');\n        }\n        // cancel pending async call if there is one\n        clearTimeout(this.h_editorLoader);\n        if (!this.isCellPotentiallyEditable(this.activeRow, this.activeCell)) {\n            return;\n        }\n        var columnDef = this.columns[this.activeCell];\n        var item = this.getDataItem(this.activeRow);\n        if (this.trigger(this.onBeforeEditCell, { row: this.activeRow, cell: this.activeCell, item: item, column: columnDef, target: 'grid' }).getReturnValue() === false) {\n            this.setFocus();\n            return;\n        }\n        this.getEditorLock().activate(this.editController);\n        this.activeCellNode.classList.add('editable');\n        var useEditor = editor || this.getEditor(this.activeRow, this.activeCell);\n        // don't clear the cell if a custom editor is passed through\n        if (!editor && !useEditor.suppressClearOnEdit) {\n            this.activeCellNode.innerHTML = '';\n        }\n        var metadata = (_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.getItemMetadata) === null || _b === void 0 ? void 0 : _b.call(_a, this.activeRow);\n        metadata = metadata === null || metadata === void 0 ? void 0 : metadata.columns;\n        var columnMetaData = metadata && (metadata[columnDef.id] || metadata[this.activeCell]);\n        this.currentEditor = new useEditor({\n            grid: this,\n            gridPosition: this.absBox(this._container),\n            position: this.absBox(this.activeCellNode),\n            container: this.activeCellNode,\n            column: columnDef,\n            columnMetaData: columnMetaData,\n            item: item || {},\n            event: e,\n            commitChanges: this.commitEditAndSetFocus.bind(this),\n            cancelChanges: this.cancelEditAndSetFocus.bind(this)\n        });\n        if (item && this.currentEditor) {\n            this.currentEditor.loadValue(item);\n            if (preClickModeOn && ((_c = this.currentEditor) === null || _c === void 0 ? void 0 : _c.preClick)) {\n                this.currentEditor.preClick();\n            }\n        }\n        this.serializedEditorValue = (_d = this.currentEditor) === null || _d === void 0 ? void 0 : _d.serializeValue();\n        if ((_f = this.currentEditor) === null || _f === void 0 ? void 0 : _f.position) {\n            this.handleActiveCellPositionChange();\n        }\n    };\n    SlickGrid.prototype.commitEditAndSetFocus = function () {\n        // if the commit fails, it would do so due to a validation error\n        // if so, do not steal the focus from the editor\n        if (this.getEditorLock().commitCurrentEdit()) {\n            this.setFocus();\n            if (this._options.autoEdit && !this._options.autoCommitEdit) {\n                this.navigateDown();\n            }\n        }\n    };\n    SlickGrid.prototype.cancelEditAndSetFocus = function () {\n        if (this.getEditorLock().cancelCurrentEdit()) {\n            this.setFocus();\n        }\n    };\n    SlickGrid.prototype.absBox = function (elem) {\n        var box = {\n            top: elem.offsetTop,\n            left: elem.offsetLeft,\n            bottom: 0,\n            right: 0,\n            width: elem.offsetWidth,\n            height: elem.offsetWidth,\n            visible: true\n        };\n        box.bottom = box.top + box.height;\n        box.right = box.left + box.width;\n        // walk up the tree\n        var offsetParent = elem.offsetParent;\n        while ((elem = elem.parentNode) !== document.body) {\n            if (!elem || !elem.parentNode) {\n                break;\n            }\n            var styles = getComputedStyle(elem);\n            if (box.visible && elem.scrollHeight !== elem.offsetHeight && styles['overflowY'] !== 'visible') {\n                box.visible = box.bottom > elem.scrollTop && box.top < elem.scrollTop + elem.clientHeight;\n            }\n            if (box.visible && elem.scrollWidth !== elem.offsetWidth && styles['overflowX'] !== 'visible') {\n                box.visible = box.right > elem.scrollLeft && box.left < elem.scrollLeft + elem.clientWidth;\n            }\n            box.left -= elem.scrollLeft;\n            box.top -= elem.scrollTop;\n            if (elem === offsetParent) {\n                box.left += elem.offsetLeft;\n                box.top += elem.offsetTop;\n                offsetParent = elem.offsetParent;\n            }\n            box.bottom = box.top + box.height;\n            box.right = box.left + box.width;\n        }\n        return box;\n    };\n    /** Returns an object representing information about the active cell's position. All coordinates are absolute and take into consideration the visibility and scrolling position of all ancestors. */\n    SlickGrid.prototype.getActiveCellPosition = function () {\n        return this.absBox(this.activeCellNode);\n    };\n    /** Get the Grid Position */\n    SlickGrid.prototype.getGridPosition = function () {\n        return this.absBox(this._container);\n    };\n    SlickGrid.prototype.handleActiveCellPositionChange = function () {\n        if (!this.activeCellNode) {\n            return;\n        }\n        this.trigger(this.onActiveCellPositionChanged, {});\n        if (this.currentEditor) {\n            var cellBox = this.getActiveCellPosition();\n            if (this.currentEditor.show && this.currentEditor.hide) {\n                if (!cellBox.visible) {\n                    this.currentEditor.hide();\n                }\n                else {\n                    this.currentEditor.show();\n                }\n            }\n            if (this.currentEditor.position) {\n                this.currentEditor.position(cellBox);\n            }\n        }\n    };\n    /** Returns the active cell editor. If there is no actively edited cell, null is returned.   */\n    SlickGrid.prototype.getCellEditor = function () {\n        return this.currentEditor;\n    };\n    /**\n     * Returns an object representing the coordinates of the currently active cell:\n     * @example\t`{ row: activeRow, cell: activeCell }`\n     */\n    SlickGrid.prototype.getActiveCell = function () {\n        if (!this.activeCellNode) {\n            return null;\n        }\n        return { row: this.activeRow, cell: this.activeCell };\n    };\n    /** Returns the DOM element containing the currently active cell. If no cell is active, null is returned. */\n    SlickGrid.prototype.getActiveCellNode = function () {\n        return this.activeCellNode;\n    };\n    //This get/set methods are used for keeping text-selection. These don't consider IE because they don't loose text-selection.\n    //Fix for firefox selection. See https://github.com/mleibman/SlickGrid/pull/746/files\n    SlickGrid.prototype.getTextSelection = function () {\n        var _a;\n        var textSelection = null;\n        if (window.getSelection) {\n            var selection = window.getSelection();\n            if (((_a = selection === null || selection === void 0 ? void 0 : selection.rangeCount) !== null && _a !== void 0 ? _a : 0) > 0) {\n                textSelection = selection.getRangeAt(0);\n            }\n        }\n        return textSelection;\n    };\n    SlickGrid.prototype.setTextSelection = function (selection) {\n        if (window.getSelection && selection) {\n            var target = window.getSelection();\n            if (target) {\n                target.removeAllRanges();\n                target.addRange(selection);\n            }\n        }\n    };\n    /**\n     * Scroll to a specific row and make it into the view\n     * @param {Number} row - grid row number\n     * @param {Boolean} doPaging - scroll when pagination is enabled\n     */\n    SlickGrid.prototype.scrollRowIntoView = function (row, doPaging) {\n        var _a, _b;\n        if (!this.hasFrozenRows ||\n            (!this._options.frozenBottom && row > this.actualFrozenRow - 1) ||\n            (this._options.frozenBottom && row < this.actualFrozenRow - 1)) {\n            var viewportScrollH = Utils.height(this._viewportScrollContainerY);\n            // if frozen row on top\n            // subtract number of frozen row\n            var rowNumber = (this.hasFrozenRows && !this._options.frozenBottom ? row - this._options.frozenRow : row);\n            var rowAtTop = rowNumber * this._options.rowHeight;\n            var rowAtBottom = (rowNumber + 1) * this._options.rowHeight\n                - viewportScrollH\n                + (this.viewportHasHScroll ? ((_b = (_a = this.scrollbarDimensions) === null || _a === void 0 ? void 0 : _a.height) !== null && _b !== void 0 ? _b : 0) : 0);\n            // need to page down?\n            if ((rowNumber + 1) * this._options.rowHeight > this.scrollTop + viewportScrollH + this.offset) {\n                this.scrollTo(doPaging ? rowAtTop : rowAtBottom);\n                this.render();\n            }\n            // or page up?\n            else if (rowNumber * this._options.rowHeight < this.scrollTop + this.offset) {\n                this.scrollTo(doPaging ? rowAtBottom : rowAtTop);\n                this.render();\n            }\n        }\n    };\n    /**\n     * Scroll to the top row and make it into the view\n     * @param {Number} row - grid row number\n     */\n    SlickGrid.prototype.scrollRowToTop = function (row) {\n        this.scrollTo(row * this._options.rowHeight);\n        this.render();\n    };\n    SlickGrid.prototype.scrollPage = function (dir) {\n        var deltaRows = dir * this.numVisibleRows;\n        /// First fully visible row crosses the line with\n        /// y == bottomOfTopmostFullyVisibleRow\n        var bottomOfTopmostFullyVisibleRow = this.scrollTop + this._options.rowHeight - 1;\n        this.scrollTo((this.getRowFromPosition(bottomOfTopmostFullyVisibleRow) + deltaRows) * this._options.rowHeight);\n        this.render();\n        if (this._options.enableCellNavigation && this.activeRow != null) {\n            var row = this.activeRow + deltaRows;\n            var dataLengthIncludingAddNew = this.getDataLengthIncludingAddNew();\n            if (row >= dataLengthIncludingAddNew) {\n                row = dataLengthIncludingAddNew - 1;\n            }\n            if (row < 0) {\n                row = 0;\n            }\n            var cell = 0;\n            var prevCell = null;\n            var prevActivePosX = this.activePosX;\n            while (cell <= this.activePosX) {\n                if (this.canCellBeActive(row, cell)) {\n                    prevCell = cell;\n                }\n                cell += this.getColspan(row, cell);\n            }\n            if (prevCell !== null) {\n                this.setActiveCellInternal(this.getCellNode(row, prevCell));\n                this.activePosX = prevActivePosX;\n            }\n            else {\n                this.resetActiveCell();\n            }\n        }\n    };\n    /** Navigate (scroll) by a page down */\n    SlickGrid.prototype.navigatePageDown = function () {\n        this.scrollPage(1);\n    };\n    /** Navigate (scroll) by a page up */\n    SlickGrid.prototype.navigatePageUp = function () {\n        this.scrollPage(-1);\n    };\n    /** Navigate to the top of the grid */\n    SlickGrid.prototype.navigateTop = function () {\n        this.navigateToRow(0);\n    };\n    /** Navigate to the bottom of the grid */\n    SlickGrid.prototype.navigateBottom = function () {\n        this.navigateToRow(this.getDataLength() - 1);\n    };\n    SlickGrid.prototype.navigateToRow = function (row) {\n        var num_rows = this.getDataLength();\n        if (!num_rows) {\n            return true;\n        }\n        if (row < 0) {\n            row = 0;\n        }\n        else if (row >= num_rows) {\n            row = num_rows - 1;\n        }\n        this.scrollCellIntoView(row, 0, true);\n        if (this._options.enableCellNavigation && this.activeRow != null) {\n            var cell = 0;\n            var prevCell = null;\n            var prevActivePosX = this.activePosX;\n            while (cell <= this.activePosX) {\n                if (this.canCellBeActive(row, cell)) {\n                    prevCell = cell;\n                }\n                cell += this.getColspan(row, cell);\n            }\n            if (prevCell !== null) {\n                this.setActiveCellInternal(this.getCellNode(row, prevCell));\n                this.activePosX = prevActivePosX;\n            }\n            else {\n                this.resetActiveCell();\n            }\n        }\n        return true;\n    };\n    SlickGrid.prototype.getColspan = function (row, cell) {\n        var _a, _b;\n        var metadata = (_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.getItemMetadata) === null || _b === void 0 ? void 0 : _b.call(_a, row);\n        if (!metadata || !metadata.columns) {\n            return 1;\n        }\n        var columnData = metadata.columns[this.columns[cell].id] || metadata.columns[cell];\n        var colspan = columnData === null || columnData === void 0 ? void 0 : columnData.colspan;\n        if (colspan === '*') {\n            colspan = this.columns.length - cell;\n        }\n        else {\n            colspan = colspan || 1;\n        }\n        return colspan;\n    };\n    SlickGrid.prototype.findFirstFocusableCell = function (row) {\n        var cell = 0;\n        while (cell < this.columns.length) {\n            if (this.canCellBeActive(row, cell)) {\n                return cell;\n            }\n            cell += this.getColspan(row, cell);\n        }\n        return null;\n    };\n    SlickGrid.prototype.findLastFocusableCell = function (row) {\n        var cell = 0;\n        var lastFocusableCell = null;\n        while (cell < this.columns.length) {\n            if (this.canCellBeActive(row, cell)) {\n                lastFocusableCell = cell;\n            }\n            cell += this.getColspan(row, cell);\n        }\n        return lastFocusableCell;\n    };\n    SlickGrid.prototype.gotoRight = function (row, cell, _posX) {\n        if (cell >= this.columns.length) {\n            return null;\n        }\n        do {\n            cell += this.getColspan(row, cell);\n        } while (cell < this.columns.length && !this.canCellBeActive(row, cell));\n        if (cell < this.columns.length) {\n            return {\n                row: row,\n                cell: cell,\n                posX: cell\n            };\n        }\n        return null;\n    };\n    SlickGrid.prototype.gotoLeft = function (row, cell, _posX) {\n        if (cell <= 0) {\n            return null;\n        }\n        var firstFocusableCell = this.findFirstFocusableCell(row);\n        if (firstFocusableCell === null || firstFocusableCell >= cell) {\n            return null;\n        }\n        var prev = {\n            row: row,\n            cell: firstFocusableCell,\n            posX: firstFocusableCell\n        };\n        var pos;\n        while (true) {\n            pos = this.gotoRight(prev.row, prev.cell, prev.posX);\n            if (!pos) {\n                return null;\n            }\n            if (pos.cell >= cell) {\n                return prev;\n            }\n            prev = pos;\n        }\n    };\n    SlickGrid.prototype.gotoDown = function (row, cell, posX) {\n        var prevCell;\n        var dataLengthIncludingAddNew = this.getDataLengthIncludingAddNew();\n        while (true) {\n            if (++row >= dataLengthIncludingAddNew) {\n                return null;\n            }\n            prevCell = cell = 0;\n            while (cell <= posX) {\n                prevCell = cell;\n                cell += this.getColspan(row, cell);\n            }\n            if (this.canCellBeActive(row, prevCell)) {\n                return {\n                    row: row,\n                    cell: prevCell,\n                    posX: posX\n                };\n            }\n        }\n    };\n    SlickGrid.prototype.gotoUp = function (row, cell, posX) {\n        var prevCell;\n        while (true) {\n            if (--row < 0) {\n                return null;\n            }\n            prevCell = cell = 0;\n            while (cell <= posX) {\n                prevCell = cell;\n                cell += this.getColspan(row, cell);\n            }\n            if (this.canCellBeActive(row, prevCell)) {\n                return {\n                    row: row,\n                    cell: prevCell,\n                    posX: posX\n                };\n            }\n        }\n    };\n    SlickGrid.prototype.gotoNext = function (row, cell, posX) {\n        if (row == null && cell == null) {\n            row = cell = posX = 0;\n            if (this.canCellBeActive(row, cell)) {\n                return {\n                    row: row,\n                    cell: cell,\n                    posX: cell\n                };\n            }\n        }\n        var pos = this.gotoRight(row, cell, posX);\n        if (pos) {\n            return pos;\n        }\n        var firstFocusableCell = null;\n        var dataLengthIncludingAddNew = this.getDataLengthIncludingAddNew();\n        // if at last row, cycle through columns rather than get stuck in the last one\n        if (row === dataLengthIncludingAddNew - 1) {\n            row--;\n        }\n        while (++row < dataLengthIncludingAddNew) {\n            firstFocusableCell = this.findFirstFocusableCell(row);\n            if (firstFocusableCell !== null) {\n                return {\n                    row: row,\n                    cell: firstFocusableCell,\n                    posX: firstFocusableCell\n                };\n            }\n        }\n        return null;\n    };\n    SlickGrid.prototype.gotoPrev = function (row, cell, posX) {\n        if (row == null && cell == null) {\n            row = this.getDataLengthIncludingAddNew() - 1;\n            cell = posX = this.columns.length - 1;\n            if (this.canCellBeActive(row, cell)) {\n                return {\n                    row: row,\n                    cell: cell,\n                    posX: cell\n                };\n            }\n        }\n        var pos;\n        var lastSelectableCell;\n        while (!pos) {\n            pos = this.gotoLeft(row, cell, posX);\n            if (pos) {\n                break;\n            }\n            if (--row < 0) {\n                return null;\n            }\n            cell = 0;\n            lastSelectableCell = this.findLastFocusableCell(row);\n            if (lastSelectableCell !== null) {\n                pos = {\n                    row: row,\n                    cell: lastSelectableCell,\n                    posX: lastSelectableCell\n                };\n            }\n        }\n        return pos;\n    };\n    SlickGrid.prototype.gotoRowStart = function (row, _cell, _posX) {\n        var newCell = this.findFirstFocusableCell(row);\n        if (newCell === null)\n            return null;\n        return {\n            row: row,\n            cell: newCell,\n            posX: newCell\n        };\n    };\n    SlickGrid.prototype.gotoRowEnd = function (row, _cell, _posX) {\n        var newCell = this.findLastFocusableCell(row);\n        if (newCell === null)\n            return null;\n        return {\n            row: row,\n            cell: newCell,\n            posX: newCell\n        };\n    };\n    /** Switches the active cell one cell right skipping unselectable cells. Unline navigateNext, navigateRight stops at the last cell of the row. Returns a boolean saying whether it was able to complete or not. */\n    SlickGrid.prototype.navigateRight = function () {\n        return this.navigate('right');\n    };\n    /** Switches the active cell one cell left skipping unselectable cells. Unline navigatePrev, navigateLeft stops at the first cell of the row. Returns a boolean saying whether it was able to complete or not. */\n    SlickGrid.prototype.navigateLeft = function () {\n        return this.navigate('left');\n    };\n    /** Switches the active cell one row down skipping unselectable cells. Returns a boolean saying whether it was able to complete or not. */\n    SlickGrid.prototype.navigateDown = function () {\n        return this.navigate('down');\n    };\n    /** Switches the active cell one row up skipping unselectable cells. Returns a boolean saying whether it was able to complete or not. */\n    SlickGrid.prototype.navigateUp = function () {\n        return this.navigate('up');\n    };\n    /** Tabs over active cell to the next selectable cell. Returns a boolean saying whether it was able to complete or not. */\n    SlickGrid.prototype.navigateNext = function () {\n        return this.navigate('next');\n    };\n    /** Tabs over active cell to the previous selectable cell. Returns a boolean saying whether it was able to complete or not. */\n    SlickGrid.prototype.navigatePrev = function () {\n        return this.navigate('prev');\n    };\n    /** Navigate to the start row in the grid */\n    SlickGrid.prototype.navigateRowStart = function () {\n        return this.navigate('home');\n    };\n    /** Navigate to the end row in the grid */\n    SlickGrid.prototype.navigateRowEnd = function () {\n        return this.navigate('end');\n    };\n    /**\n     * @param {string} dir Navigation direction.\n     * @return {boolean} Whether navigation resulted in a change of active cell.\n     */\n    SlickGrid.prototype.navigate = function (dir) {\n        if (!this._options.enableCellNavigation) {\n            return false;\n        }\n        if (!this.activeCellNode && dir !== 'prev' && dir !== 'next') {\n            return false;\n        }\n        if (!this.getEditorLock().commitCurrentEdit()) {\n            return true;\n        }\n        this.setFocus();\n        var tabbingDirections = {\n            'up': -1,\n            'down': 1,\n            'left': -1,\n            'right': 1,\n            'prev': -1,\n            'next': 1,\n            'home': -1,\n            'end': 1\n        };\n        this.tabbingDirection = tabbingDirections[dir];\n        var stepFunctions = {\n            'up': this.gotoUp,\n            'down': this.gotoDown,\n            'left': this.gotoLeft,\n            'right': this.gotoRight,\n            'prev': this.gotoPrev,\n            'next': this.gotoNext,\n            'home': this.gotoRowStart,\n            'end': this.gotoRowEnd\n        };\n        var stepFn = stepFunctions[dir];\n        var pos = stepFn.call(this, this.activeRow, this.activeCell, this.activePosX);\n        if (pos) {\n            if (this.hasFrozenRows && this._options.frozenBottom && pos.row == this.getDataLength()) {\n                return;\n            }\n            var isAddNewRow = (pos.row == this.getDataLength());\n            if ((!this._options.frozenBottom && pos.row >= this.actualFrozenRow)\n                || (this._options.frozenBottom && pos.row < this.actualFrozenRow)) {\n                this.scrollCellIntoView(pos.row, pos.cell, !isAddNewRow && this._options.emulatePagingWhenScrolling);\n            }\n            this.setActiveCellInternal(this.getCellNode(pos.row, pos.cell));\n            this.activePosX = pos.posX;\n            return true;\n        }\n        else {\n            this.setActiveCellInternal(this.getCellNode(this.activeRow, this.activeCell));\n            return false;\n        }\n    };\n    /**\n     * Returns a DOM element containing a cell at a given row and cell.\n     * @param row A row index.\n     * @param cell A column index.\n     */\n    SlickGrid.prototype.getCellNode = function (row, cell) {\n        if (this.rowsCache[row]) {\n            this.ensureCellNodesInRowsCache(row);\n            try {\n                if (this.rowsCache[row].cellNodesByColumnIdx.length > cell) {\n                    return this.rowsCache[row].cellNodesByColumnIdx[cell];\n                }\n                else {\n                    return null;\n                }\n            }\n            catch (e) {\n                return this.rowsCache[row].cellNodesByColumnIdx[cell];\n            }\n        }\n        return null;\n    };\n    /**\n     * Sets an active cell.\n     * @param {number} row - A row index.\n     * @param {number} cell - A column index.\n     * @param {boolean} [optionEditMode] Option Edit Mode is Auto-Edit?\n     * @param {boolean} [preClickModeOn] Pre-Click Mode is Enabled?\n     * @param {boolean} [suppressActiveCellChangedEvent] Are we suppressing Active Cell Changed Event (defaults to false)\n     */\n    SlickGrid.prototype.setActiveCell = function (row, cell, opt_editMode, preClickModeOn, suppressActiveCellChangedEvent) {\n        if (!this.initialized) {\n            return;\n        }\n        if (row > this.getDataLength() || row < 0 || cell >= this.columns.length || cell < 0) {\n            return;\n        }\n        if (!this._options.enableCellNavigation) {\n            return;\n        }\n        this.scrollCellIntoView(row, cell, false);\n        this.setActiveCellInternal(this.getCellNode(row, cell), opt_editMode, preClickModeOn, suppressActiveCellChangedEvent);\n    };\n    /**\n     * Sets an active cell.\n     * @param {number} row - A row index.\n     * @param {number} cell - A column index.\n     * @param {boolean} [suppressScrollIntoView] - optionally suppress the ScrollIntoView that happens by default (defaults to false)\n     */\n    SlickGrid.prototype.setActiveRow = function (row, cell, suppressScrollIntoView) {\n        if (!this.initialized) {\n            return;\n        }\n        if (row > this.getDataLength() || row < 0 || (cell !== null && cell !== void 0 ? cell : 0) >= this.columns.length || (cell !== null && cell !== void 0 ? cell : 0) < 0) {\n            return;\n        }\n        this.activeRow = row;\n        if (!suppressScrollIntoView) {\n            this.scrollCellIntoView(row, cell || 0, false);\n        }\n    };\n    /**\n     * Returns true if you can click on a given cell and make it the active focus.\n     * @param {number} row A row index.\n     * @param {number} col A column index.\n     */\n    SlickGrid.prototype.canCellBeActive = function (row, cell) {\n        var _a, _b, _c, _d;\n        if (!this.options.enableCellNavigation || row >= this.getDataLengthIncludingAddNew() ||\n            row < 0 || cell >= this.columns.length || cell < 0) {\n            return false;\n        }\n        if (!this.columns[cell] || this.columns[cell].hidden) {\n            return false;\n        }\n        var rowMetadata = (_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.getItemMetadata) === null || _b === void 0 ? void 0 : _b.call(_a, row);\n        if ((rowMetadata === null || rowMetadata === void 0 ? void 0 : rowMetadata.focusable) !== undefined) {\n            return !!rowMetadata.focusable;\n        }\n        var columnMetadata = rowMetadata === null || rowMetadata === void 0 ? void 0 : rowMetadata.columns;\n        if (((_c = columnMetadata === null || columnMetadata === void 0 ? void 0 : columnMetadata[this.columns[cell].id]) === null || _c === void 0 ? void 0 : _c.focusable) !== undefined) {\n            return !!columnMetadata[this.columns[cell].id].focusable;\n        }\n        if (((_d = columnMetadata === null || columnMetadata === void 0 ? void 0 : columnMetadata[cell]) === null || _d === void 0 ? void 0 : _d.focusable) !== undefined) {\n            return !!columnMetadata[cell].focusable;\n        }\n        return !!(this.columns[cell].focusable);\n    };\n    /**\n     * Returns true if selecting the row causes this particular cell to have the selectedCellCssClass applied to it. A cell can be selected if it exists and if it isn't on an empty / \"Add New\" row and if it is not marked as \"unselectable\" in the column definition.\n     * @param {number} row A row index.\n     * @param {number} col A column index.\n     */\n    SlickGrid.prototype.canCellBeSelected = function (row, cell) {\n        var _a, _b;\n        if (row >= this.getDataLength() || row < 0 || cell >= this.columns.length || cell < 0) {\n            return false;\n        }\n        if (!this.columns[cell] || this.columns[cell].hidden) {\n            return false;\n        }\n        var rowMetadata = (_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.getItemMetadata) === null || _b === void 0 ? void 0 : _b.call(_a, row);\n        if ((rowMetadata === null || rowMetadata === void 0 ? void 0 : rowMetadata.selectable) !== undefined) {\n            return !!rowMetadata.selectable;\n        }\n        var columnMetadata = (rowMetadata === null || rowMetadata === void 0 ? void 0 : rowMetadata.columns) && (rowMetadata.columns[this.columns[cell].id] || rowMetadata.columns[cell]);\n        if ((columnMetadata === null || columnMetadata === void 0 ? void 0 : columnMetadata.selectable) !== undefined) {\n            return !!columnMetadata.selectable;\n        }\n        return !!this.columns[cell].selectable;\n    };\n    /**\n     * Accepts a row integer and a cell integer, scrolling the view to the row where row is its row index, and cell is its cell index. Optionally accepts a forceEdit boolean which, if true, will attempt to initiate the edit dialogue for the field in the specified cell.\n     * Unlike setActiveCell, this scrolls the row into the viewport and sets the keyboard focus.\n     * @param {Number} row A row index.\n     * @param {Number} cell A column index.\n     * @param {Boolean} [forceEdit] If true, will attempt to initiate the edit dialogue for the field in the specified cell.\n     */\n    SlickGrid.prototype.gotoCell = function (row, cell, forceEdit, e) {\n        if (!this.initialized) {\n            return;\n        }\n        if (!this.canCellBeActive(row, cell)) {\n            return;\n        }\n        if (!this.getEditorLock().commitCurrentEdit()) {\n            return;\n        }\n        this.scrollCellIntoView(row, cell, false);\n        var newCell = this.getCellNode(row, cell);\n        // if selecting the 'add new' row, start editing right away\n        var column = this.columns[cell];\n        var suppressActiveCellChangedEvent = !!(this._options.editable && (column === null || column === void 0 ? void 0 : column.editor) && this._options.suppressActiveCellChangeOnEdit);\n        this.setActiveCellInternal(newCell, (forceEdit || (row === this.getDataLength()) || this._options.autoEdit), null, suppressActiveCellChangedEvent, e);\n        // if no editor was created, set the focus back on the grid\n        if (!this.currentEditor) {\n            this.setFocus();\n        }\n    };\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // IEditor implementation for the editor lock\n    SlickGrid.prototype.commitCurrentEdit = function () {\n        var self = this;\n        var item = self.getDataItem(self.activeRow);\n        var column = self.columns[self.activeCell];\n        if (self.currentEditor) {\n            if (self.currentEditor.isValueChanged()) {\n                var validationResults = self.currentEditor.validate();\n                if (validationResults.valid) {\n                    var row_1 = self.activeRow;\n                    var cell_1 = self.activeCell;\n                    var editor_1 = self.currentEditor;\n                    var serializedValue_1 = self.currentEditor.serializeValue();\n                    var prevSerializedValue_1 = self.serializedEditorValue;\n                    if (self.activeRow < self.getDataLength()) {\n                        var editCommand = {\n                            row: row_1,\n                            cell: cell_1,\n                            editor: editor_1,\n                            serializedValue: serializedValue_1,\n                            prevSerializedValue: prevSerializedValue_1,\n                            execute: function () {\n                                editor_1.applyValue(item, serializedValue_1);\n                                self.updateRow(row_1);\n                                self.trigger(self.onCellChange, { command: 'execute', row: row_1, cell: cell_1, item: item, column: column });\n                            },\n                            undo: function () {\n                                editor_1.applyValue(item, prevSerializedValue_1);\n                                self.updateRow(row_1);\n                                self.trigger(self.onCellChange, { command: 'undo', row: row_1, cell: cell_1, item: item, column: column, });\n                            }\n                        };\n                        if (self.options.editCommandHandler) {\n                            self.makeActiveCellNormal();\n                            self.options.editCommandHandler(item, column, editCommand);\n                        }\n                        else {\n                            editCommand.execute();\n                            self.makeActiveCellNormal();\n                        }\n                    }\n                    else {\n                        var newItem = {};\n                        self.currentEditor.applyValue(newItem, self.currentEditor.serializeValue());\n                        self.makeActiveCellNormal();\n                        self.trigger(self.onAddNewRow, { item: newItem, column: column });\n                    }\n                    // check whether the lock has been re-acquired by event handlers\n                    return !self.getEditorLock().isActive();\n                }\n                else {\n                    // Re-add the CSS class to trigger transitions, if any.\n                    if (self.activeCellNode) {\n                        self.activeCellNode.classList.remove('invalid');\n                        Utils.width(self.activeCellNode); // force layout\n                        self.activeCellNode.classList.add('invalid');\n                    }\n                    self.trigger(self.onValidationError, {\n                        editor: self.currentEditor,\n                        cellNode: self.activeCellNode,\n                        validationResults: validationResults,\n                        row: self.activeRow,\n                        cell: self.activeCell,\n                        column: column\n                    });\n                    self.currentEditor.focus();\n                    return false;\n                }\n            }\n            self.makeActiveCellNormal();\n        }\n        return true;\n    };\n    SlickGrid.prototype.cancelCurrentEdit = function () {\n        this.makeActiveCellNormal();\n        return true;\n    };\n    SlickGrid.prototype.rowsToRanges = function (rows) {\n        var ranges = [];\n        var lastCell = this.columns.length - 1;\n        for (var i = 0; i < rows.length; i++) {\n            ranges.push(new SlickRange(rows[i], 0, rows[i], lastCell));\n        }\n        return ranges;\n    };\n    /** Returns an array of row indices corresponding to the currently selected rows. */\n    SlickGrid.prototype.getSelectedRows = function () {\n        if (!this.selectionModel) {\n            throw new Error('SlickGrid Selection model is not set');\n        }\n        return this.selectedRows.slice(0);\n    };\n    /**\n     * Accepts an array of row indices and applies the current selectedCellCssClass to the cells in the row, respecting whether cells have been flagged as selectable.\n     * @param {Array<number>} rowsArray - an array of row numbers.\n     * @param {String} [caller] - an optional string to identify who called the method\n     */\n    SlickGrid.prototype.setSelectedRows = function (rows, caller) {\n        if (!this.selectionModel) {\n            throw new Error('SlickGrid Selection model is not set');\n        }\n        if (this && this.getEditorLock && !this.getEditorLock().isActive()) {\n            this.selectionModel.setSelectedRanges(this.rowsToRanges(rows), caller || 'SlickGrid.setSelectedRows');\n        }\n    };\n    /** html sanitizer to avoid scripting attack */\n    SlickGrid.prototype.sanitizeHtmlString = function (dirtyHtml, suppressLogging) {\n        if (!this._options.sanitizer || typeof dirtyHtml !== 'string') {\n            return dirtyHtml;\n        }\n        var cleanHtml = this._options.sanitizer(dirtyHtml);\n        if (!suppressLogging && this._options.logSanitizedHtml && this.logMessageCount <= this.logMessageMaxCount && cleanHtml !== dirtyHtml) {\n            console.log(\"sanitizer altered html: \".concat(dirtyHtml, \" --> \").concat(cleanHtml));\n            if (this.logMessageCount === this.logMessageMaxCount) {\n                console.log(\"sanitizer: silencing messages after first \".concat(this.logMessageMaxCount));\n            }\n            this.logMessageCount++;\n        }\n        return cleanHtml;\n    };\n    return SlickGrid;\n}());\nexports.SlickGrid = SlickGrid;\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n    Utils.extend(Slick, {\n        Grid: SlickGrid,\n    });\n}\n"],
  "mappings": "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",
  "names": ["SlickGrid", "header", "i", "args", "_a", "cellNode"]
}
