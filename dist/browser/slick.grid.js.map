{
  "version": 3,
  "sources": ["../../src/slick.grid.ts"],
  "sourcesContent": ["import SortableInstance from 'sortablejs';\n\nimport type {\n  AutoSize,\n  CellViewportRange,\n  Column,\n  ColumnSort,\n  CssStyleHash,\n  CustomDataView,\n  DragPosition,\n  DragRowMove,\n  Editor,\n  EditController,\n  Formatter,\n  FormatterOverrideCallback,\n  FormatterResultObject,\n  GridOption,\n  InteractionBase,\n  OnActiveCellChangedEventArgs,\n  OnAddNewRowEventArgs,\n  OnAutosizeColumnsEventArgs,\n  OnBeforeUpdateColumnsEventArgs,\n  OnBeforeAppendCellEventArgs,\n  OnBeforeCellEditorDestroyEventArgs,\n  OnBeforeColumnsResizeEventArgs,\n  OnBeforeEditCellEventArgs,\n  OnBeforeHeaderCellDestroyEventArgs,\n  OnBeforeHeaderRowCellDestroyEventArgs,\n  OnBeforeFooterRowCellDestroyEventArgs,\n  OnBeforeSetColumnsEventArgs,\n  OnCellChangeEventArgs,\n  OnCellCssStylesChangedEventArgs,\n  OnColumnsDragEventArgs,\n  OnColumnsReorderedEventArgs,\n  OnColumnsResizedEventArgs,\n  OnColumnsResizeDblClickEventArgs,\n  OnCompositeEditorChangeEventArgs,\n  OnClickEventArgs,\n  OnDblClickEventArgs,\n  OnFooterContextMenuEventArgs,\n  OnFooterRowCellRenderedEventArgs,\n  OnHeaderCellRenderedEventArgs,\n  OnFooterClickEventArgs,\n  OnHeaderClickEventArgs,\n  OnHeaderContextMenuEventArgs,\n  OnHeaderMouseEventArgs,\n  OnHeaderRowCellRenderedEventArgs,\n  OnKeyDownEventArgs,\n  OnValidationErrorEventArgs,\n  OnRenderedEventArgs,\n  OnSelectedRowsChangedEventArgs,\n  OnSetOptionsEventArgs,\n  OnScrollEventArgs,\n  MultiColumnSort,\n  PagingInfo,\n  Plugin,\n  SingleColumnSort,\n  SlickGridEventData,\n} from './models/index';\nimport {\n  BindingEventService as BindingEventService_,\n  ColAutosizeMode as ColAutosizeMode_,\n  GlobalEditorLock as GlobalEditorLock_,\n  GridAutosizeColsMode as GridAutosizeColsMode_,\n  keyCode as keyCode_,\n  preClickClassName as preClickClassName_,\n  RowSelectionMode as RowSelectionMode_,\n  SlickEvent as SlickEvent_,\n  SlickEventData as SlickEventData_,\n  SlickRange as SlickRange_,\n  Utils as Utils_,\n  ValueFilterMode as ValueFilterMode_,\n  WidthEvalMode as WidthEvalMode_,\n} from './slick.core';\nimport { Draggable as Draggable_, MouseWheel as MouseWheel_, Resizable as Resizable_ } from './slick.interactions';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\nconst ColAutosizeMode = IIFE_ONLY ? Slick.ColAutosizeMode : ColAutosizeMode_;\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst SlickEventData = IIFE_ONLY ? Slick.EventData : SlickEventData_;\nconst GlobalEditorLock = IIFE_ONLY ? Slick.GlobalEditorLock : GlobalEditorLock_;\nconst GridAutosizeColsMode = IIFE_ONLY ? Slick.GridAutosizeColsMode : GridAutosizeColsMode_;\nconst keyCode = IIFE_ONLY ? Slick.keyCode : keyCode_;\nconst preClickClassName = IIFE_ONLY ? Slick.preClickClassName : preClickClassName_;\nconst SlickRange = IIFE_ONLY ? Slick.Range : SlickRange_;\nconst RowSelectionMode = IIFE_ONLY ? Slick.RowSelectionMode : RowSelectionMode_;\nconst ValueFilterMode = IIFE_ONLY ? Slick.ValueFilterMode : ValueFilterMode_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\nconst WidthEvalMode = IIFE_ONLY ? Slick.WidthEvalMode : WidthEvalMode_;\nconst Draggable = IIFE_ONLY ? Slick.Draggable : Draggable_;\nconst MouseWheel = IIFE_ONLY ? Slick.MouseWheel : MouseWheel_;\nconst Resizable = IIFE_ONLY ? Slick.Resizable : Resizable_;\n\n/**\n * @license\n * (c) 2009-present Michael Leibman\n * michael{dot}leibman{at}gmail{dot}com\n * http://github.com/mleibman/slickgrid\n *\n * Distributed under MIT license.\n * All rights reserved.\n *\n * SlickGrid v4.0.1\n *\n * NOTES:\n *     Cell/row DOM manipulations are done directly bypassing JS DOM manipulation methods.\n *     This increases the speed dramatically, but can only be done safely because there are no event handlers\n *     or data associated with any cell/row DOM nodes.  Cell editors must make sure they implement .destroy()\n *     and do proper cleanup.\n */\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n// SlickGrid class implementation (available as SlickGrid)\n\nexport class SlickGrid {\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // Public API\n  slickGridVersion = '4.0.1';\n\n  /** optional grid state clientId */\n  cid = '';\n\n  // Events\n  onActiveCellChanged = new SlickEvent<OnActiveCellChangedEventArgs>();\n  onActiveCellPositionChanged = new SlickEvent<SlickGridEventData>();\n  onAddNewRow = new SlickEvent<OnAddNewRowEventArgs>();\n  onAutosizeColumns = new SlickEvent<OnAutosizeColumnsEventArgs>();\n  onBeforeAppendCell = new SlickEvent<OnBeforeAppendCellEventArgs>();\n  onBeforeCellEditorDestroy = new SlickEvent<OnBeforeCellEditorDestroyEventArgs>();\n  onBeforeColumnsResize = new SlickEvent<OnBeforeColumnsResizeEventArgs>();\n  onBeforeDestroy = new SlickEvent<SlickGridEventData>();\n  onBeforeEditCell = new SlickEvent<OnBeforeEditCellEventArgs>();\n  onBeforeFooterRowCellDestroy = new SlickEvent<OnBeforeFooterRowCellDestroyEventArgs>();\n  onBeforeHeaderCellDestroy = new SlickEvent<OnBeforeHeaderCellDestroyEventArgs>();\n  onBeforeHeaderRowCellDestroy = new SlickEvent<OnBeforeHeaderRowCellDestroyEventArgs>();\n  onBeforeSetColumns = new SlickEvent<OnBeforeSetColumnsEventArgs>();\n  onBeforeSort = new SlickEvent<SingleColumnSort | MultiColumnSort>();\n  onBeforeUpdateColumns = new SlickEvent<OnBeforeUpdateColumnsEventArgs>();\n  onCellChange = new SlickEvent<OnCellChangeEventArgs>();\n  onCellCssStylesChanged = new SlickEvent<OnCellCssStylesChangedEventArgs>();\n  onClick = new SlickEvent<OnClickEventArgs>();\n  onColumnsReordered = new SlickEvent<OnColumnsReorderedEventArgs>();\n  onColumnsDrag = new SlickEvent<OnColumnsDragEventArgs>();\n  onColumnsResized = new SlickEvent<OnColumnsResizedEventArgs>();\n  onColumnsResizeDblClick = new SlickEvent<OnColumnsResizeDblClickEventArgs>();\n  onCompositeEditorChange = new SlickEvent<OnCompositeEditorChangeEventArgs>();\n  onContextMenu = new SlickEvent<SlickGridEventData>();\n  onDrag = new SlickEvent<DragRowMove>();\n  onDblClick = new SlickEvent<OnDblClickEventArgs>();\n  onDragInit = new SlickEvent<DragRowMove>();\n  onDragStart = new SlickEvent<DragRowMove>();\n  onDragEnd = new SlickEvent<DragRowMove>();\n  onFooterClick = new SlickEvent<OnFooterClickEventArgs>();\n  onFooterContextMenu = new SlickEvent<OnFooterContextMenuEventArgs>();\n  onFooterRowCellRendered = new SlickEvent<OnFooterRowCellRenderedEventArgs>();\n  onHeaderCellRendered = new SlickEvent<OnHeaderCellRenderedEventArgs>();\n  onHeaderClick = new SlickEvent<OnHeaderClickEventArgs>();\n  onHeaderContextMenu = new SlickEvent<OnHeaderContextMenuEventArgs>();\n  onHeaderMouseEnter = new SlickEvent<OnHeaderMouseEventArgs>();\n  onHeaderMouseLeave = new SlickEvent<OnHeaderMouseEventArgs>();\n  onHeaderRowCellRendered = new SlickEvent<OnHeaderRowCellRenderedEventArgs>();\n  onHeaderRowMouseEnter = new SlickEvent<OnHeaderMouseEventArgs>();\n  onHeaderRowMouseLeave = new SlickEvent<OnHeaderMouseEventArgs>();\n  onKeyDown = new SlickEvent<OnKeyDownEventArgs>();\n  onMouseEnter = new SlickEvent<OnHeaderMouseEventArgs>();\n  onMouseLeave = new SlickEvent<OnHeaderMouseEventArgs>();\n  onRendered = new SlickEvent<OnRenderedEventArgs>();\n  onScroll = new SlickEvent<OnScrollEventArgs>();\n  onSelectedRowsChanged = new SlickEvent<OnSelectedRowsChangedEventArgs>();\n  onSetOptions = new SlickEvent<OnSetOptionsEventArgs>();\n  onSort = new SlickEvent<SingleColumnSort | MultiColumnSort>();\n  onValidationError = new SlickEvent<OnValidationErrorEventArgs>();\n  onViewportChanged = new SlickEvent<SlickGridEventData>();\n\n  // ---\n  // protected variables\n\n  // shared across all grids on the page\n  protected scrollbarDimensions?: { height: number; width: number; };\n  protected maxSupportedCssHeight!: number;  // browser's breaking point\n\n  protected canvas: HTMLCanvasElement | null = null;\n  protected canvas_context: CanvasRenderingContext2D | null = null;\n\n  // settings\n  protected _options!: GridOption;\n  protected _defaults: GridOption = {\n    alwaysShowVerticalScroll: false,\n    alwaysAllowHorizontalScroll: false,\n    explicitInitialization: false,\n    rowHeight: 25,\n    defaultColumnWidth: 80,\n    enableAddRow: false,\n    leaveSpaceForNewRows: false,\n    editable: false,\n    autoEdit: true,\n    autoCommitEdit: false,\n    suppressActiveCellChangeOnEdit: false,\n    enableCellNavigation: true,\n    enableColumnReorder: true,\n    asyncEditorLoading: false,\n    asyncEditorLoadDelay: 100,\n    forceFitColumns: false,\n    enableAsyncPostRender: false,\n    asyncPostRenderDelay: 50,\n    enableAsyncPostRenderCleanup: false,\n    asyncPostRenderCleanupDelay: 40,\n    auto: false,\n    editorLock: GlobalEditorLock,\n    showColumnHeader: true,\n    showHeaderRow: false,\n    headerRowHeight: 25,\n    createFooterRow: false,\n    showFooterRow: false,\n    footerRowHeight: 25,\n    createPreHeaderPanel: false,\n    showPreHeaderPanel: false,\n    preHeaderPanelHeight: 25,\n    showTopPanel: false,\n    topPanelHeight: 25,\n    formatterFactory: null,\n    editorFactory: null,\n    cellFlashingCssClass: 'flashing',\n    selectedCellCssClass: 'selected',\n    multiSelect: true,\n    enableTextSelectionOnCells: false,\n    dataItemColumnValueExtractor: null,\n    frozenBottom: false,\n    frozenColumn: -1,\n    frozenRow: -1,\n    frozenRightViewportMinWidth: 100,\n    fullWidthRows: false,\n    multiColumnSort: false,\n    numberedMultiColumnSort: false,\n    tristateMultiColumnSort: false,\n    sortColNumberInSeparateSpan: false,\n    defaultFormatter: this.defaultFormatter,\n    forceSyncScrolling: false,\n    addNewRowCssClass: 'new-row',\n    preserveCopiedSelectionOnPaste: false,\n    showCellSelection: true,\n    viewportClass: null,\n    minRowBuffer: 3,\n    emulatePagingWhenScrolling: true, // when scrolling off bottom of viewport, place new row at top of viewport\n    editorCellNavOnLRKeys: false,\n    enableMouseWheelScrollHandler: true,\n    doPaging: true,\n    autosizeColsMode: GridAutosizeColsMode.LegacyOff,\n    autosizeColPaddingPx: 4,\n    scrollRenderThrottling: 50,\n    autosizeTextAvgToMWidthRatio: 0.75,\n    viewportSwitchToScrollModeWidthPercent: undefined,\n    viewportMinWidthPx: undefined,\n    viewportMaxWidthPx: undefined,\n    suppressCssChangesOnHiddenInit: false,\n    ffMaxSupportedCssHeight: 6000000,\n    maxSupportedCssHeight: 1000000000,\n    sanitizer: undefined,  // sanitize function, built in basic sanitizer is: Slick.RegexSanitizer(dirtyHtml)\n    logSanitizedHtml: false // log to console when sanitised - recommend true for testing of dev and production\n  };\n\n  protected _columnDefaults: Partial<Column> = {\n    name: '',\n    resizable: true,\n    sortable: false,\n    minWidth: 30,\n    maxWidth: undefined,\n    rerenderOnResize: false,\n    headerCssClass: null,\n    defaultSortAsc: true,\n    focusable: true,\n    selectable: true,\n    hidden: false\n  };\n\n  protected _columnAutosizeDefaults: AutoSize = {\n    ignoreHeaderText: false,\n    colValueArray: undefined,\n    allowAddlPercent: undefined,\n    formatterOverride: undefined,\n    autosizeMode: ColAutosizeMode.ContentIntelligent,\n    rowSelectionModeOnInit: undefined,\n    rowSelectionMode: RowSelectionMode.FirstNRows,\n    rowSelectionCount: 100,\n    valueFilterMode: ValueFilterMode.None,\n    widthEvalMode: WidthEvalMode.Auto,\n    sizeToRemaining: undefined,\n    widthPx: undefined,\n    contentSizePx: 0,\n    headerWidthPx: 0,\n    colDataTypeOf: undefined\n  };\n\n  // scroller\n  protected th!: number;   // virtual height\n  protected h!: number;    // real scrollable height\n  protected ph!: number;   // page height\n  protected n!: number;    // number of pages\n  protected cj!: number;   // \"jumpiness\" coefficient\n\n  protected page = 0;       // current page\n  protected offset = 0;     // current page offset\n  protected vScrollDir = 1;\n  protected _bindingEventService = new BindingEventService();\n  protected initialized = false;\n  protected _container!: HTMLElement;\n  protected uid = `slickgrid_${Math.round(1000000 * Math.random())}`;\n  protected _focusSink!: HTMLDivElement;\n  protected _focusSink2!: HTMLDivElement;\n  protected _groupHeaders: HTMLDivElement[] = [];\n  protected _headerScroller: HTMLDivElement[] = [];\n  protected _headers: HTMLDivElement[] = [];\n  protected _headerRows!: HTMLDivElement[];\n  protected _headerRowScroller!: HTMLDivElement[];\n  protected _headerRowSpacerL!: HTMLDivElement;\n  protected _headerRowSpacerR!: HTMLDivElement;\n  protected _footerRow!: HTMLDivElement[];\n  protected _footerRowScroller!: HTMLDivElement[];\n  protected _footerRowSpacerL!: HTMLDivElement;\n  protected _footerRowSpacerR!: HTMLDivElement;\n  protected _preHeaderPanel!: HTMLDivElement;\n  protected _preHeaderPanelScroller!: HTMLDivElement;\n  protected _preHeaderPanelSpacer!: HTMLDivElement;\n  protected _preHeaderPanelR!: HTMLDivElement;\n  protected _preHeaderPanelScrollerR!: HTMLDivElement;\n  protected _preHeaderPanelSpacerR!: HTMLDivElement;\n  protected _topPanelScrollers!: HTMLDivElement[];\n  protected _topPanels!: HTMLDivElement[];\n  protected _viewport!: HTMLDivElement[];\n  protected _canvas!: HTMLDivElement[];\n  protected _style;\n  protected _boundAncestors: HTMLElement[] = [];\n  protected stylesheet;\n  protected columnCssRulesL;\n  protected columnCssRulesR;\n  protected viewportH = 0;\n  protected viewportW = 0;\n  protected canvasWidth = 0;\n  protected canvasWidthL = 0;\n  protected canvasWidthR = 0;\n  protected headersWidth = 0;\n  protected headersWidthL = 0;\n  protected headersWidthR = 0;\n  protected viewportHasHScroll = false;\n  protected viewportHasVScroll = false;\n  protected headerColumnWidthDiff = 0;\n  protected headerColumnHeightDiff = 0; // border+padding\n  protected cellWidthDiff = 0;\n  protected cellHeightDiff = 0;\n  protected absoluteColumnMinWidth!: number;\n  protected hasFrozenRows = false;\n  protected frozenRowsHeight = 0;\n  protected actualFrozenRow = -1;\n  protected paneTopH = 0;\n  protected paneBottomH = 0;\n  protected viewportTopH = 0;\n  protected viewportBottomH = 0;\n  protected topPanelH = 0;\n  protected headerRowH = 0;\n  protected footerRowH = 0;\n\n  protected tabbingDirection = 1;\n  protected _activeCanvasNode!: HTMLDivElement;\n  protected _activeViewportNode!: HTMLDivElement;\n  protected activePosX!: number;\n  protected activeRow!: number;\n  protected activeCell!: number;\n  protected activeCellNode: HTMLDivElement | null = null;\n  protected currentEditor: Editor | null = null;\n  protected serializedEditorValue;\n  protected editController?: EditController;\n\n  protected rowsCache: any = {};\n  protected renderedRows = 0;\n  protected numVisibleRows = 0;\n  protected prevScrollTop = 0;\n  protected scrollTop = 0;\n  protected lastRenderedScrollTop = 0;\n  protected lastRenderedScrollLeft = 0;\n  protected prevScrollLeft = 0;\n  protected scrollLeft = 0;\n\n  protected selectionModel;\n  protected selectedRows: number[] = [];\n\n  protected plugins: Plugin[] = [];\n  protected cellCssClasses: CssStyleHash = {};\n\n  protected columnsById = {};\n  protected sortColumns: ColumnSort[] = [];\n  protected columnPosLeft: number[] = [];\n  protected columnPosRight: number[] = [];\n\n  protected pagingActive = false;\n  protected pagingIsLastPage = false;\n\n  protected scrollThrottle!: { enqueue: () => void; dequeue: () => void; };\n\n  // async call handles\n  protected h_editorLoader: any = null;\n  protected h_render = null;\n  protected h_postrender: any = null;\n  protected h_postrenderCleanup: any = null;\n  protected postProcessedRows = {};\n  protected postProcessToRow: number = null as any;\n  protected postProcessFromRow: number = null as any;\n  protected postProcessedCleanupQueue: Array<{\n    actionType: string;\n    groupId: number;\n    node: HTMLElement | HTMLElement[];\n    columnIdx?: number;\n    rowIdx?: number;\n  }> = [];\n  protected postProcessgroupId = 0;\n\n  // perf counters\n  protected counter_rows_rendered = 0;\n  protected counter_rows_removed = 0;\n\n  protected _paneHeaderL!: HTMLDivElement;\n  protected _paneHeaderR!: HTMLDivElement;\n  protected _paneTopL!: HTMLDivElement;\n  protected _paneTopR!: HTMLDivElement;\n  protected _paneBottomL!: HTMLDivElement;\n  protected _paneBottomR!: HTMLDivElement;\n  protected _headerScrollerL!: HTMLDivElement;\n  protected _headerScrollerR!: HTMLDivElement;\n  protected _headerL!: HTMLDivElement;\n  protected _headerR!: HTMLDivElement;\n  protected _groupHeadersL!: HTMLDivElement;\n  protected _groupHeadersR!: HTMLDivElement;\n  protected _headerRowScrollerL!: HTMLDivElement;\n  protected _headerRowScrollerR!: HTMLDivElement;\n  protected _footerRowScrollerL!: HTMLDivElement;\n  protected _footerRowScrollerR!: HTMLDivElement;\n  protected _headerRowL!: HTMLDivElement;\n  protected _headerRowR!: HTMLDivElement;\n  protected _footerRowL!: HTMLDivElement;\n  protected _footerRowR!: HTMLDivElement;\n  protected _topPanelScrollerL!: HTMLDivElement;\n  protected _topPanelScrollerR!: HTMLDivElement;\n  protected _topPanelL!: HTMLDivElement;\n  protected _topPanelR!: HTMLDivElement;\n  protected _viewportTopL!: HTMLDivElement;\n  protected _viewportTopR!: HTMLDivElement;\n  protected _viewportBottomL!: HTMLDivElement;\n  protected _viewportBottomR!: HTMLDivElement;\n  protected _canvasTopL!: HTMLDivElement;\n  protected _canvasTopR!: HTMLDivElement;\n  protected _canvasBottomL!: HTMLDivElement;\n  protected _canvasBottomR!: HTMLDivElement;\n  protected _viewportScrollContainerX!: HTMLDivElement;\n  protected _viewportScrollContainerY!: HTMLDivElement;\n  protected _headerScrollContainer!: HTMLDivElement;\n  protected _headerRowScrollContainer!: HTMLDivElement;\n  protected _footerRowScrollContainer!: HTMLDivElement;\n\n  // store css attributes if display:none is active in container or parent\n  protected cssShow = { position: 'absolute', visibility: 'hidden', display: 'block' };\n  protected _hiddenParents: HTMLElement[] = [];\n  protected oldProps: Array<Partial<CSSStyleDeclaration>> = [];\n  protected enforceFrozenRowHeightRecalc = false;\n  protected columnResizeDragging = false;\n  protected slickDraggableInstance: InteractionBase | null = null;\n  protected slickMouseWheelInstances: Array<InteractionBase> = [];\n  protected slickResizableInstances: Array<InteractionBase> = [];\n  protected sortableSideLeftInstance: SortableInstance;\n  protected sortableSideRightInstance: SortableInstance;\n  protected logMessageCount = 0;\n  protected logMessageMaxCount = 30;\n\n  /**\n   * Creates a new instance of the grid.\n   * @class SlickGrid\n   * @constructor\n   * @param {Node} container - Container node to create the grid in.\n   * @param {Array|Object} data - An array of objects for databinding.\n   * @param {Array<Column>} columns - An array of column definitions.\n   * @param {Object} [options] - Grid this._options.\n   **/\n  constructor(protected container: HTMLElement | string, protected data: CustomDataView | any[], protected columns: Column[], protected options: Partial<GridOption>) {\n    this.initialize();\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // Initialization\n\n  /** Initializes the grid. */\n  init() {\n    this.finishInitialization();\n  }\n\n  protected initialize() {\n    if (typeof this.container === 'string') {\n      this._container = document.querySelector(this.container) as HTMLDivElement;\n    } else {\n      this._container = this.container;\n    }\n\n    if (!this._container) {\n      throw new Error(`SlickGrid requires a valid container, ${this.container} does not exist in the DOM.`);\n    }\n\n    // calculate these only once and share between grid instances\n    this._options = Utils.extend(true, {}, this._defaults, this.options);\n    this.scrollThrottle = this.actionThrottle(this.render.bind(this), this._options.scrollRenderThrottling);\n    this.maxSupportedCssHeight = this.maxSupportedCssHeight || this.getMaxSupportedCssHeight();\n    this.validateAndEnforceOptions();\n    this._columnDefaults.width = this._options.defaultColumnWidth;\n\n    if (!this._options.suppressCssChangesOnHiddenInit) {\n      this.cacheCssForHiddenInit();\n    }\n\n    this.updateColumnProps();\n\n    // validate loaded JavaScript modules against requested options\n    if (this._options.enableColumnReorder && (!Sortable || !Sortable.create)) {\n      throw new Error('SlickGrid requires Sortable.js module to be loaded');\n    }\n\n    this.editController = {\n      commitCurrentEdit: this.commitCurrentEdit.bind(this),\n      cancelCurrentEdit: this.cancelCurrentEdit.bind(this),\n    };\n\n    Utils.emptyElement(this._container);\n    this._container.style.overflow = 'hidden';\n    this._container.style.outline = String(0);\n    this._container.classList.add(this.uid);\n    this._container.classList.add('ui-widget');\n\n    const containerStyles = window.getComputedStyle(this._container);\n    if (!(/relative|absolute|fixed/).test(containerStyles.position)) {\n      this._container.style.position = 'relative';\n    }\n\n    this._focusSink = Utils.createDomElement('div', { tabIndex: 0, style: { position: 'fixed', width: '0px', height: '0px', top: '0px', left: '0px', outline: '0px' } }, this._container);\n\n    // Containers used for scrolling frozen columns and rows\n    this._paneHeaderL = Utils.createDomElement('div', { className: 'slick-pane slick-pane-header slick-pane-left', tabIndex: 0 }, this._container);\n    this._paneHeaderR = Utils.createDomElement('div', { className: 'slick-pane slick-pane-header slick-pane-right', tabIndex: 0 }, this._container);\n    this._paneTopL = Utils.createDomElement('div', { className: 'slick-pane slick-pane-top slick-pane-left', tabIndex: 0 }, this._container);\n    this._paneTopR = Utils.createDomElement('div', { className: 'slick-pane slick-pane-top slick-pane-right', tabIndex: 0 }, this._container);\n    this._paneBottomL = Utils.createDomElement('div', { className: 'slick-pane slick-pane-bottom slick-pane-left', tabIndex: 0 }, this._container);\n    this._paneBottomR = Utils.createDomElement('div', { className: 'slick-pane slick-pane-bottom slick-pane-right', tabIndex: 0 }, this._container);\n\n    if (this._options.createPreHeaderPanel) {\n      this._preHeaderPanelScroller = Utils.createDomElement('div', { className: 'slick-preheader-panel ui-state-default slick-state-default', style: { overflow: 'hidden', position: 'relative' } }, this._paneHeaderL);\n      this._preHeaderPanelScroller.appendChild(document.createElement('div'));\n      this._preHeaderPanel = Utils.createDomElement('div', null, this._preHeaderPanelScroller);\n      this._preHeaderPanelSpacer = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._preHeaderPanelScroller);\n\n      this._preHeaderPanelScrollerR = Utils.createDomElement('div', { className: 'slick-preheader-panel ui-state-default slick-state-default', style: { overflow: 'hidden', position: 'relative' } }, this._paneHeaderR);\n      this._preHeaderPanelR = Utils.createDomElement('div', null, this._preHeaderPanelScrollerR);\n      this._preHeaderPanelSpacerR = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._preHeaderPanelScrollerR);\n\n      if (!this._options.showPreHeaderPanel) {\n        Utils.hide(this._preHeaderPanelScroller);\n        Utils.hide(this._preHeaderPanelScrollerR);\n      }\n    }\n\n    // Append the header scroller containers\n    this._headerScrollerL = Utils.createDomElement('div', { className: 'slick-header ui-state-default slick-state-default slick-header-left' }, this._paneHeaderL);\n    this._headerScrollerR = Utils.createDomElement('div', { className: 'slick-header ui-state-default slick-state-default slick-header-right' }, this._paneHeaderR);\n\n    // Cache the header scroller containers\n    this._headerScroller.push(this._headerScrollerL);\n    this._headerScroller.push(this._headerScrollerR);\n\n    // Append the columnn containers to the headers\n    this._headerL = Utils.createDomElement('div', { className: 'slick-header-columns slick-header-columns-left', style: { left: '-1000px' } }, this._headerScrollerL);\n    this._headerR = Utils.createDomElement('div', { className: 'slick-header-columns slick-header-columns-right', style: { left: '-1000px' } }, this._headerScrollerR);\n\n    // Cache the header columns\n    this._headers = [this._headerL, this._headerR];\n\n    this._headerRowScrollerL = Utils.createDomElement('div', { className: 'slick-headerrow ui-state-default slick-state-default' }, this._paneTopL);\n    this._headerRowScrollerR = Utils.createDomElement('div', { className: 'slick-headerrow ui-state-default slick-state-default' }, this._paneTopR);\n\n    this._headerRowScroller = [this._headerRowScrollerL, this._headerRowScrollerR];\n\n    this._headerRowSpacerL = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._headerRowScrollerL);\n    this._headerRowSpacerR = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._headerRowScrollerR);\n\n    this._headerRowL = Utils.createDomElement('div', { className: 'slick-headerrow-columns slick-headerrow-columns-left' }, this._headerRowScrollerL);\n    this._headerRowR = Utils.createDomElement('div', { className: 'slick-headerrow-columns slick-headerrow-columns-right' }, this._headerRowScrollerR);\n\n    this._headerRows = [this._headerRowL, this._headerRowR];\n\n    // Append the top panel scroller\n    this._topPanelScrollerL = Utils.createDomElement('div', { className: 'slick-top-panel-scroller ui-state-default slick-state-default' }, this._paneTopL);\n    this._topPanelScrollerR = Utils.createDomElement('div', { className: 'slick-top-panel-scroller ui-state-default slick-state-default' }, this._paneTopR);\n\n    this._topPanelScrollers = [this._topPanelScrollerL, this._topPanelScrollerR];\n\n    // Append the top panel\n    this._topPanelL = Utils.createDomElement('div', { className: 'slick-top-panel', style: { width: '10000px' } }, this._topPanelScrollerL);\n    this._topPanelR = Utils.createDomElement('div', { className: 'slick-top-panel', style: { width: '10000px' } }, this._topPanelScrollerR);\n\n    this._topPanels = [this._topPanelL, this._topPanelR];\n\n    if (!this._options.showColumnHeader) {\n      this._headerScroller.forEach((el) => {\n        Utils.hide(el);\n      });\n    }\n\n    if (!this._options.showTopPanel) {\n      this._topPanelScrollers.forEach((scroller) => {\n        Utils.hide(scroller);\n      })\n    }\n\n    if (!this._options.showHeaderRow) {\n      this._headerRowScroller.forEach((scroller) => {\n        Utils.hide(scroller);\n      })\n    }\n\n    // Append the viewport containers\n    this._viewportTopL = Utils.createDomElement('div', { className: 'slick-viewport slick-viewport-top slick-viewport-left', tabIndex: 0 }, this._paneTopL);\n    this._viewportTopR = Utils.createDomElement('div', { className: 'slick-viewport slick-viewport-top slick-viewport-right', tabIndex: 0 }, this._paneTopR);\n    this._viewportBottomL = Utils.createDomElement('div', { className: 'slick-viewport slick-viewport-bottom slick-viewport-left', tabIndex: 0 }, this._paneBottomL);\n    this._viewportBottomR = Utils.createDomElement('div', { className: 'slick-viewport slick-viewport-bottom slick-viewport-right', tabIndex: 0 }, this._paneBottomR);\n\n    // Cache the viewports\n    this._viewport = [this._viewportTopL, this._viewportTopR, this._viewportBottomL, this._viewportBottomR];\n    if (this._options.viewportClass) {\n      this._viewport.forEach((view) => {\n        view.classList.add(...(this._options.viewportClass || '').split(' '));\n      });\n    }\n\n    // Default the active viewport to the top left\n    this._activeViewportNode = this._viewportTopL;\n\n    // Append the canvas containers\n    this._canvasTopL = Utils.createDomElement('div', { className: 'grid-canvas grid-canvas-top grid-canvas-left', tabIndex: 0 }, this._viewportTopL);\n    this._canvasTopR = Utils.createDomElement('div', { className: 'grid-canvas grid-canvas-top grid-canvas-right', tabIndex: 0 }, this._viewportTopR);\n    this._canvasBottomL = Utils.createDomElement('div', { className: 'grid-canvas grid-canvas-bottom grid-canvas-left', tabIndex: 0 }, this._viewportBottomL);\n    this._canvasBottomR = Utils.createDomElement('div', { className: 'grid-canvas grid-canvas-bottom grid-canvas-right', tabIndex: 0 }, this._viewportBottomR);\n\n    // Cache the canvases\n    this._canvas = [this._canvasTopL, this._canvasTopR, this._canvasBottomL, this._canvasBottomR];\n\n    this.scrollbarDimensions = this.scrollbarDimensions || this.measureScrollbar();\n\n    // Default the active canvas to the top left\n    this._activeCanvasNode = this._canvasTopL;\n\n    // pre-header\n    if (this._preHeaderPanelSpacer) {\n      Utils.width(this._preHeaderPanelSpacer, this.getCanvasWidth() + this.scrollbarDimensions.width);\n    }\n\n    this._headers.forEach((el) => {\n      Utils.width(el, this.getHeadersWidth());\n    })\n\n    Utils.width(this._headerRowSpacerL, this.getCanvasWidth() + this.scrollbarDimensions.width);\n    Utils.width(this._headerRowSpacerR, this.getCanvasWidth() + this.scrollbarDimensions.width);\n\n    // footer Row\n    if (this._options.createFooterRow) {\n      this._footerRowScrollerR = Utils.createDomElement('div', { className: 'slick-footerrow ui-state-default slick-state-default' }, this._paneTopR);\n      this._footerRowScrollerL = Utils.createDomElement('div', { className: 'slick-footerrow ui-state-default slick-state-default' }, this._paneTopL);\n\n      this._footerRowScroller = [this._footerRowScrollerL, this._footerRowScrollerR];\n\n      this._footerRowSpacerL = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._footerRowScrollerL);\n      Utils.width(this._footerRowSpacerL, this.getCanvasWidth() + this.scrollbarDimensions.width);\n      this._footerRowSpacerR = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._footerRowScrollerR);\n      Utils.width(this._footerRowSpacerR, this.getCanvasWidth() + this.scrollbarDimensions.width);\n\n\n      this._footerRowL = Utils.createDomElement('div', { className: 'slick-footerrow-columns slick-footerrow-columns-left' }, this._footerRowScrollerL);\n      this._footerRowR = Utils.createDomElement('div', { className: 'slick-footerrow-columns slick-footerrow-columns-right' }, this._footerRowScrollerR);\n\n      this._footerRow = [this._footerRowL, this._footerRowR];\n\n      if (!this._options.showFooterRow) {\n        this._footerRowScroller.forEach((scroller) => {\n          Utils.hide(scroller);\n        });\n      }\n    }\n\n    this._focusSink2 = this._focusSink.cloneNode(true) as HTMLDivElement;\n    this._container.appendChild(this._focusSink2);\n\n    if (!this._options.explicitInitialization) {\n      this.finishInitialization();\n    }\n  }\n\n  protected finishInitialization() {\n    if (!this.initialized) {\n      this.initialized = true;\n\n      this.getViewportWidth();\n      this.getViewportHeight();\n\n      // header columns and cells may have different padding/border skewing width calculations (box-sizing, hello?)\n      // calculate the diff so we can set consistent sizes\n      this.measureCellPaddingAndBorder();\n\n      // for usability reasons, all text selection in SlickGrid is disabled\n      // with the exception of input and textarea elements (selection must\n      // be enabled there so that editors work as expected); note that\n      // selection in grid cells (grid body) is already unavailable in\n      // all browsers except IE\n      this.disableSelection(this._headers); // disable all text selection in header (including input and textarea)\n\n      if (!this._options.enableTextSelectionOnCells) {\n        // disable text selection in grid cells except in input and textarea elements\n        // (this is IE-specific, because selectstart event will only fire in IE)\n        this._viewport.forEach((view) => {\n          this._bindingEventService.bind(view, 'selectstart', (event) => {\n            if (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement) {\n              return;\n            }\n          });\n        })\n      }\n\n      this.setFrozenOptions();\n      this.setPaneVisibility();\n      this.setScroller();\n      this.setOverflow();\n\n      this.updateColumnCaches();\n      this.createColumnHeaders();\n      this.createColumnFooter();\n      this.setupColumnSort();\n      this.createCssRules();\n      this.resizeCanvas();\n      this.bindAncestorScrollEvents();\n\n      this._bindingEventService.bind(this._container, 'resize', this.resizeCanvas.bind(this));\n      this._viewport.forEach((view) => {\n        this._bindingEventService.bind(view, 'scroll', this.handleScroll.bind(this));\n      });\n\n      if (this._options.enableMouseWheelScrollHandler) {\n        this._viewport.forEach((view) => {\n          this.slickMouseWheelInstances.push(MouseWheel({\n            element: view,\n            onMouseWheel: this.handleMouseWheel.bind(this)\n          }));\n        });\n      }\n\n      this._headerScroller.forEach((el) => {\n        this._bindingEventService.bind(el, 'contextmenu', this.handleHeaderContextMenu.bind(this) as EventListener);\n        this._bindingEventService.bind(el, 'click', this.handleHeaderClick.bind(this) as EventListener);\n      });\n\n      this._headerRowScroller.forEach((scroller) => {\n        this._bindingEventService.bind(scroller, 'scroll', this.handleHeaderRowScroll.bind(this) as EventListener);\n      });\n\n      if (this._options.createFooterRow) {\n        this._footerRow.forEach((footer) => {\n          this._bindingEventService.bind(footer, 'contextmenu', this.handleFooterContextMenu.bind(this) as EventListener);\n          this._bindingEventService.bind(footer, 'click', this.handleFooterClick.bind(this) as EventListener);\n        });\n\n        this._footerRowScroller.forEach((scroller) => {\n          this._bindingEventService.bind(scroller, 'scroll', this.handleFooterRowScroll.bind(this) as EventListener);\n        });\n      }\n\n      if (this._options.createPreHeaderPanel) {\n        this._bindingEventService.bind(this._preHeaderPanelScroller, 'scroll', this.handlePreHeaderPanelScroll.bind(this) as EventListener);\n      }\n\n      this._bindingEventService.bind(this._focusSink, 'keydown', this.handleKeyDown.bind(this) as EventListener);\n      this._bindingEventService.bind(this._focusSink2, 'keydown', this.handleKeyDown.bind(this) as EventListener);\n\n      this._canvas.forEach((element) => {\n        this._bindingEventService.bind(element, 'keydown', this.handleKeyDown.bind(this) as EventListener);\n        this._bindingEventService.bind(element, 'click', this.handleClick.bind(this) as EventListener);\n        this._bindingEventService.bind(element, 'dblclick', this.handleDblClick.bind(this) as EventListener);\n        this._bindingEventService.bind(element, 'contextmenu', this.handleContextMenu.bind(this) as EventListener);\n        this._bindingEventService.bind(element, 'mouseover', this.handleCellMouseOver.bind(this) as EventListener);\n        this._bindingEventService.bind(element, 'mouseout', this.handleCellMouseOut.bind(this) as EventListener);\n      });\n\n      if (Draggable) {\n        this.slickDraggableInstance = Draggable({\n          containerElement: this._container,\n          allowDragFrom: 'div.slick-cell',\n          onDragInit: this.handleDragInit.bind(this),\n          onDragStart: this.handleDragStart.bind(this),\n          onDrag: this.handleDrag.bind(this),\n          onDragEnd: this.handleDragEnd.bind(this)\n        });\n      }\n\n      if (!this._options.suppressCssChangesOnHiddenInit) {\n        this.restoreCssFromHiddenInit();\n      }\n    }\n  }\n\n  cacheCssForHiddenInit() {\n    // handle display:none on container or container parents\n    this._hiddenParents = Utils.parents(this._container, ':hidden') as HTMLElement[];\n    for (const el of this._hiddenParents) {\n      let old: Partial<CSSStyleDeclaration> = {};\n      for (const name in this.cssShow) {\n        old[name] = el.style[name];\n        el.style[name] = this.cssShow[name];\n      }\n      this.oldProps.push(old);\n    }\n  }\n\n  restoreCssFromHiddenInit() {\n    // finish handle display:none on container or container parents\n    // - put values back the way they were\n    let i = 0;\n    for (const el of this._hiddenParents) {\n      let old = this.oldProps[i++];\n      for (const name in this.cssShow) {\n        el.style[name] = old[name];\n      }\n    }\n  }\n\n  protected hasFrozenColumns() {\n    return this._options.frozenColumn > -1;\n  }\n\n  /** Register an external Plugin */\n  registerPlugin(plugin: Plugin) {\n    this.plugins.unshift(plugin);\n    plugin.init(this);\n  }\n\n  /** Unregister (destroy) an external Plugin */\n  unregisterPlugin(plugin: Plugin) {\n    for (let i = this.plugins.length; i >= 0; i--) {\n      if (this.plugins[i] === plugin) {\n        this.plugins[i]?.destroy();\n        this.plugins.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  /** Get a Plugin (addon) by its name */\n  getPluginByName(name: string) {\n    for (let i = this.plugins.length - 1; i >= 0; i--) {\n      if (this.plugins[i]?.pluginName === name) {\n        return this.plugins[i];\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Unregisters a current selection model and registers a new one. See the definition of SelectionModel for more information.\n   * @param {Object} selectionModel A SelectionModel.\n   */\n  setSelectionModel(model: any) {\n    if (this.selectionModel) {\n      this.selectionModel.onSelectedRangesChanged.unsubscribe(this.handleSelectedRangesChanged.bind(this));\n      if (this.selectionModel.destroy) {\n        this.selectionModel.destroy();\n      }\n    }\n\n    this.selectionModel = model;\n    if (this.selectionModel) {\n      this.selectionModel.init(this);\n      this.selectionModel.onSelectedRangesChanged.subscribe(this.handleSelectedRangesChanged.bind(this));\n    }\n  }\n\n  /** Returns the current SelectionModel. See here for more information about SelectionModels. */\n  getSelectionModel() {\n    return this.selectionModel;\n  }\n\n  /** Get Grid Canvas Node DOM Element */\n  getCanvasNode(columnIdOrIdx?: number | string, rowIndex?: number) {\n    return this._getContainerElement(this.getCanvases(), columnIdOrIdx, rowIndex) as HTMLDivElement;\n  }\n\n  /** Get the canvas DOM element */\n  getActiveCanvasNode(e?: Event | SlickEventData_) {\n    if (e === undefined) {\n      return this._activeCanvasNode;\n    }\n\n    if (e instanceof SlickEventData) {\n      e = e.getNativeEvent();\n    }\n\n    this._activeCanvasNode = (e as any)?.target.closest('.grid-canvas');\n    return this._activeCanvasNode;\n  }\n\n  /** Get the canvas DOM element */\n  getCanvases() {\n    return this._canvas;\n  }\n\n  /** Get the Viewport DOM node element */\n  getViewportNode(columnIdOrIdx: number | string, rowIndex: number) {\n    return this._getContainerElement(this.getViewports(), columnIdOrIdx, rowIndex);\n  }\n\n  /** Get all the Viewport node elements */\n  getViewports() {\n    return this._viewport;\n  }\n\n  getActiveViewportNode(e: Event | SlickEventData_) {\n    this.setActiveViewportNode(e);\n\n    return this._activeViewportNode;\n  }\n\n  /** Sets an active viewport node */\n  setActiveViewportNode(e: Event | SlickEventData_) {\n    if (e instanceof SlickEventData) {\n      e = e.getNativeEvent();\n    }\n    this._activeViewportNode = (e as any)?.target.closest('.slick-viewport');\n    return this._activeViewportNode;\n  }\n\n  protected _getContainerElement(targetContainers: HTMLElement[], columnIdOrIdx?: number | string, rowIndex?: number) {\n    if (!targetContainers) { return; }\n    if (!columnIdOrIdx) { columnIdOrIdx = 0; }\n    if (!rowIndex) { rowIndex = 0; }\n\n    let idx = (typeof columnIdOrIdx === 'number' ? columnIdOrIdx : this.getColumnIndex(columnIdOrIdx));\n\n    let isBottomSide = this.hasFrozenRows && rowIndex >= this.actualFrozenRow + (this._options.frozenBottom ? 0 : 1);\n    let isRightSide = this.hasFrozenColumns() && idx > this._options.frozenColumn;\n\n    return targetContainers[(isBottomSide ? 2 : 0) + (isRightSide ? 1 : 0)];\n  }\n\n  protected measureScrollbar() {\n    let className = '';\n    this._viewport.forEach(v => className += v.className);\n    let outerdiv = Utils.createDomElement('div', { className, style: { position: 'absolute', top: '-10000px', left: '-10000px', overflow: 'auto', width: '100px', height: '100px' } }, document.body);\n    let innerdiv = Utils.createDomElement('div', { style: { width: '200px', height: '200px', overflow: 'auto' } }, outerdiv);\n    let dim = {\n      width: outerdiv.offsetWidth - outerdiv.clientWidth,\n      height: outerdiv.offsetHeight - outerdiv.clientHeight\n    };\n    innerdiv.remove();\n    outerdiv.remove();\n    return dim;\n  }\n\n  /** Get the headers width in pixel */\n  getHeadersWidth() {\n    this.headersWidth = this.headersWidthL = this.headersWidthR = 0;\n    let includeScrollbar = !this._options.autoHeight;\n\n    let i = 0;\n    let ii = this.columns.length;\n    for (i = 0; i < ii; i++) {\n      if (!this.columns[i] || this.columns[i].hidden) continue;\n\n      let width = this.columns[i].width;\n\n      if ((this._options.frozenColumn) > -1 && (i > this._options.frozenColumn)) {\n        this.headersWidthR += width || 0;\n      } else {\n        this.headersWidthL += width || 0;\n      }\n    }\n\n    if (includeScrollbar) {\n      if ((this._options.frozenColumn) > -1 && (i > this._options.frozenColumn)) {\n        this.headersWidthR += this.scrollbarDimensions?.width ?? 0;\n      } else {\n        this.headersWidthL += this.scrollbarDimensions?.width ?? 0;\n      }\n    }\n\n    if (this.hasFrozenColumns()) {\n      this.headersWidthL = this.headersWidthL + 1000;\n\n      this.headersWidthR = Math.max(this.headersWidthR, this.viewportW) + this.headersWidthL;\n      this.headersWidthR += this.scrollbarDimensions?.width ?? 0;\n    } else {\n      this.headersWidthL += this.scrollbarDimensions?.width ?? 0;\n      this.headersWidthL = Math.max(this.headersWidthL, this.viewportW) + 1000;\n    }\n\n    this.headersWidth = this.headersWidthL + this.headersWidthR;\n    return Math.max(this.headersWidth, this.viewportW) + 1000;\n  }\n\n  protected getHeadersWidthL() {\n    this.headersWidthL = 0;\n\n    this.columns.forEach((column, i) => {\n      if (column.hidden) return;\n\n      if (!((this._options.frozenColumn) > -1 && (i > this._options.frozenColumn))) {\n        this.headersWidthL += column.width || 0;\n      }\n    });\n\n    if (this.hasFrozenColumns()) {\n      this.headersWidthL += 1000;\n    } else {\n      this.headersWidthL += this.scrollbarDimensions?.width ?? 0;\n      this.headersWidthL = Math.max(this.headersWidthL, this.viewportW) + 1000;\n    }\n\n    return this.headersWidthL;\n  }\n\n  protected getHeadersWidthR() {\n    this.headersWidthR = 0;\n\n    this.columns.forEach((column, i) => {\n      if (column.hidden) return;\n      if ((this._options.frozenColumn) > -1 && (i > this._options.frozenColumn)) {\n        this.headersWidthR += column.width || 0;\n      }\n    });\n\n    if (this.hasFrozenColumns()) {\n      this.headersWidthR = Math.max(this.headersWidthR, this.viewportW) + this.getHeadersWidthL();\n      this.headersWidthR += this.scrollbarDimensions?.width ?? 0;\n    }\n\n    return this.headersWidthR;\n  }\n\n  /** Get the grid canvas width */\n  getCanvasWidth(): number {\n    let availableWidth = this.viewportHasVScroll ? this.viewportW - (this.scrollbarDimensions?.width ?? 0) : this.viewportW;\n    let i = this.columns.length;\n\n    this.canvasWidthL = this.canvasWidthR = 0;\n\n    while (i--) {\n      if (!this.columns[i] || this.columns[i].hidden) continue;\n\n      if (this.hasFrozenColumns() && (i > this._options.frozenColumn)) {\n        this.canvasWidthR += this.columns[i].width || 0;\n      } else {\n        this.canvasWidthL += this.columns[i].width || 0;\n      }\n    }\n    let totalRowWidth = this.canvasWidthL + this.canvasWidthR;\n    if (this._options.fullWidthRows) {\n      let extraWidth = Math.max(totalRowWidth, availableWidth) - totalRowWidth;\n      if (extraWidth > 0) {\n        totalRowWidth += extraWidth;\n        if (this.hasFrozenColumns()) {\n          this.canvasWidthR += extraWidth;\n        } else {\n          this.canvasWidthL += extraWidth;\n        }\n      }\n    }\n    return totalRowWidth;\n  }\n\n  protected updateCanvasWidth(forceColumnWidthsUpdate?: boolean) {\n    let oldCanvasWidth = this.canvasWidth;\n    let oldCanvasWidthL = this.canvasWidthL;\n    let oldCanvasWidthR = this.canvasWidthR;\n    let widthChanged;\n    this.canvasWidth = this.getCanvasWidth();\n\n    widthChanged = this.canvasWidth !== oldCanvasWidth || this.canvasWidthL !== oldCanvasWidthL || this.canvasWidthR !== oldCanvasWidthR;\n\n    if (widthChanged || this.hasFrozenColumns() || this.hasFrozenRows) {\n      Utils.width(this._canvasTopL, this.canvasWidthL);\n\n      this.getHeadersWidth();\n\n      Utils.width(this._headerL, this.headersWidthL);\n      Utils.width(this._headerR, this.headersWidthR);\n\n      if (this.hasFrozenColumns()) {\n        const cWidth = Utils.width(this._container) || 0;\n        if (cWidth > 0 && this.canvasWidthL > cWidth) {\n          throw new Error('[SlickGrid] Frozen columns cannot be wider than the actual grid container width. '\n            + 'Make sure to have less columns freezed or make your grid container wider');\n        }\n        Utils.width(this._canvasTopR, this.canvasWidthR);\n\n        Utils.width(this._paneHeaderL, this.canvasWidthL);\n        Utils.setStyleSize(this._paneHeaderR, 'left', this.canvasWidthL);\n        Utils.setStyleSize(this._paneHeaderR, 'width', this.viewportW - this.canvasWidthL);\n\n        Utils.width(this._paneTopL, this.canvasWidthL);\n        Utils.setStyleSize(this._paneTopR, 'left', this.canvasWidthL);\n        Utils.width(this._paneTopR, this.viewportW - this.canvasWidthL);\n\n        Utils.width(this._headerRowScrollerL, this.canvasWidthL);\n        Utils.width(this._headerRowScrollerR, this.viewportW - this.canvasWidthL);\n\n        Utils.width(this._headerRowL, this.canvasWidthL);\n        Utils.width(this._headerRowR, this.canvasWidthR);\n\n        if (this._options.createFooterRow) {\n          Utils.width(this._footerRowScrollerL, this.canvasWidthL);\n          Utils.width(this._footerRowScrollerR, this.viewportW - this.canvasWidthL);\n\n          Utils.width(this._footerRowL, this.canvasWidthL);\n          Utils.width(this._footerRowR, this.canvasWidthR);\n        }\n        if (this._options.createPreHeaderPanel) {\n          Utils.width(this._preHeaderPanel, this.canvasWidth);\n        }\n        Utils.width(this._viewportTopL, this.canvasWidthL);\n        Utils.width(this._viewportTopR, this.viewportW - this.canvasWidthL);\n\n        if (this.hasFrozenRows) {\n          Utils.width(this._paneBottomL, this.canvasWidthL);\n          Utils.setStyleSize(this._paneBottomR, 'left', this.canvasWidthL);\n\n          Utils.width(this._viewportBottomL, this.canvasWidthL);\n          Utils.width(this._viewportBottomR, this.viewportW - this.canvasWidthL);\n\n          Utils.width(this._canvasBottomL, this.canvasWidthL);\n          Utils.width(this._canvasBottomR, this.canvasWidthR);\n        }\n      } else {\n        Utils.width(this._paneHeaderL, '100%');\n        Utils.width(this._paneTopL, '100%');\n        Utils.width(this._headerRowScrollerL, '100%');\n        Utils.width(this._headerRowL, this.canvasWidth);\n\n        if (this._options.createFooterRow) {\n          Utils.width(this._footerRowScrollerL, '100%');\n          Utils.width(this._footerRowL, this.canvasWidth);\n        }\n\n        if (this._options.createPreHeaderPanel) {\n          Utils.width(this._preHeaderPanel, this.canvasWidth);\n        }\n        Utils.width(this._viewportTopL, '100%');\n\n        if (this.hasFrozenRows) {\n          Utils.width(this._viewportBottomL, '100%');\n          Utils.width(this._canvasBottomL, this.canvasWidthL);\n        }\n      }\n    }\n\n    this.viewportHasHScroll = (this.canvasWidth >= this.viewportW - (this.scrollbarDimensions?.width ?? 0));\n\n    Utils.width(this._headerRowSpacerL, this.canvasWidth + (this.viewportHasVScroll ? (this.scrollbarDimensions?.width ?? 0) : 0));\n    Utils.width(this._headerRowSpacerR, this.canvasWidth + (this.viewportHasVScroll ? (this.scrollbarDimensions?.width ?? 0) : 0));\n\n    if (this._options.createFooterRow) {\n      Utils.width(this._footerRowSpacerL, this.canvasWidth + (this.viewportHasVScroll ? (this.scrollbarDimensions?.width ?? 0) : 0));\n      Utils.width(this._footerRowSpacerR, this.canvasWidth + (this.viewportHasVScroll ? (this.scrollbarDimensions?.width ?? 0) : 0));\n    }\n\n    if (widthChanged || forceColumnWidthsUpdate) {\n      this.applyColumnWidths();\n    }\n  }\n\n  protected disableSelection(target: HTMLElement[]) {\n    target.forEach((el) => {\n      el.setAttribute('unselectable', 'on');\n      (el.style as any).mozUserSelect = 'none';\n      this._bindingEventService.bind(el, 'selectstart', () => false);\n    });\n  }\n\n  protected getMaxSupportedCssHeight() {\n    let supportedHeight = 1000000;\n    // FF reports the height back but still renders blank after ~6M px\n    //let testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? 6000000 : 1000000000;\n    const testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? this._options.ffMaxSupportedCssHeight : this._options.maxSupportedCssHeight;\n    const div = Utils.createDomElement('div', { style: { display: 'hidden' } }, document.body);\n\n    while (true) {\n      const test = supportedHeight * 2;\n      Utils.height(div, test);\n      const height = Utils.height(div);\n\n      if (test > testUpTo || height !== test) {\n        break;\n      } else {\n        supportedHeight = test;\n      }\n    }\n\n    div.remove();\n    return supportedHeight;\n  }\n\n  /** Get grid unique identifier */\n  getUID() {\n    return this.uid;\n  }\n\n  /** Get Header Column Width Difference in pixel */\n  getHeaderColumnWidthDiff() {\n    return this.headerColumnWidthDiff;\n  }\n\n  /** Get scrollbar dimensions */\n  getScrollbarDimensions() {\n    return this.scrollbarDimensions;\n  }\n\n  /** Get the displayed scrollbar dimensions */\n  getDisplayedScrollbarDimensions() {\n    return {\n      width: this.viewportHasVScroll ? (this.scrollbarDimensions?.width ?? 0) : 0,\n      height: this.viewportHasHScroll ? (this.scrollbarDimensions?.height ?? 0) : 0\n    };\n  }\n\n  /** Get the absolute column minimum width */\n  getAbsoluteColumnMinWidth(): number {\n    return this.absoluteColumnMinWidth;\n  }\n\n  // TODO:  this is static.  need to handle page mutation.\n  protected bindAncestorScrollEvents() {\n    let elem: HTMLElement | null = (this.hasFrozenRows && !this._options.frozenBottom) ? this._canvasBottomL : this._canvasTopL;\n    while ((elem = elem!.parentNode as HTMLElement) !== document.body && elem != null) {\n      // bind to scroll containers only\n      if (elem == this._viewportTopL || elem.scrollWidth !== elem.clientWidth || elem.scrollHeight !== elem.clientHeight) {\n        this._boundAncestors.push(elem);\n        this._bindingEventService.bind(elem, 'scroll', this.handleActiveCellPositionChange.bind(this));\n      }\n    }\n  }\n\n  protected unbindAncestorScrollEvents() {\n    this._boundAncestors.forEach((ancestor) => {\n      this._bindingEventService.unbindByEventName(ancestor, 'scroll');\n    });\n    this._boundAncestors = [];\n  }\n\n  /**\n   * Updates an existing column definition and a corresponding header DOM element with the new title and tooltip.\n   * @param {Number|String} columnId Column id.\n   * @param {String} title New column name.\n   * @param {String} [toolTip] New column tooltip.\n   */\n  updateColumnHeader(columnId: number | string, title?: string, toolTip?: string) {\n    if (!this.initialized) { return; }\n    let idx = this.getColumnIndex(columnId);\n    if (idx == null) {\n      return;\n    }\n\n    let columnDef = this.columns[idx];\n    let header: any = this.getColumnByIndex(idx);\n    if (header) {\n      if (title !== undefined) {\n        this.columns[idx].name = title;\n      }\n      if (toolTip !== undefined) {\n        this.columns[idx].toolTip = toolTip;\n      }\n\n      this.trigger(this.onBeforeHeaderCellDestroy, {\n        node: header,\n        column: columnDef,\n        grid: this\n      });\n\n      header.setAttribute('title', toolTip || '');\n      if (title !== undefined) {\n        header.children[0].innerHTML = this.sanitizeHtmlString(title);\n      }\n\n      this.trigger(this.onHeaderCellRendered, {\n        node: header,\n        column: columnDef,\n        grid: this\n      });\n    }\n  }\n\n  /**\n   * Get the Header DOM element\n   * @param {Column} columnDef - column definition\n   */\n  getHeader(columnDef: Column) {\n    if (!columnDef) {\n      return this.hasFrozenColumns() ? this._headers : this._headerL;\n    }\n    let idx = this.getColumnIndex(columnDef.id);\n    return this.hasFrozenColumns() ? ((idx <= this._options.frozenColumn) ? this._headerL : this._headerR) : this._headerL;\n  }\n\n  /**\n   * Get a specific Header Column DOM element\n   * @param {Number|String} [columnIdOrIdx] - column Id or index\n   */\n  getHeaderColumn(columnIdOrIdx: number | string) {\n    let idx = (typeof columnIdOrIdx === 'number' ? columnIdOrIdx : this.getColumnIndex(columnIdOrIdx));\n    let targetHeader = this.hasFrozenColumns() ? ((idx <= this._options.frozenColumn) ? this._headerL : this._headerR) : this._headerL;\n    let targetIndex = this.hasFrozenColumns() ? ((idx <= this._options.frozenColumn) ? idx : idx - this._options.frozenColumn - 1) : idx;\n\n    return targetHeader.children[targetIndex] as HTMLDivElement;\n  }\n\n  /** Get the Header Row DOM element */\n  getHeaderRow() {\n    return this.hasFrozenColumns() ? this._headerRows : this._headerRows[0];\n  }\n\n  /** Get the Footer DOM element */\n  getFooterRow() {\n    return this.hasFrozenColumns() ? this._footerRow : this._footerRow[0];\n  }\n\n  /** @alias `getPreHeaderPanelLeft` */\n  getPreHeaderPanel() {\n    return this._preHeaderPanel;\n  }\n\n  /** Get the Pre-Header Panel Left DOM node element */\n  getPreHeaderPanelLeft() {\n    return this._preHeaderPanel;\n  }\n\n  /** Get the Pre-Header Panel Right DOM node element */\n  getPreHeaderPanelRight() {\n    return this._preHeaderPanelR;\n  }\n\n  /**\n   * Get Header Row Column DOM element by its column Id\n   * @param {Number|String} [columnIdOrIdx] - column Id or index\n   */\n  getHeaderRowColumn(columnIdOrIdx: number | string) {\n    let idx = (typeof columnIdOrIdx === 'number' ? columnIdOrIdx : this.getColumnIndex(columnIdOrIdx));\n    let headerRowTarget;\n\n    if (this.hasFrozenColumns()) {\n      if (idx <= this._options.frozenColumn) {\n        headerRowTarget = this._headerRowL;\n      } else {\n        headerRowTarget = this._headerRowR;\n        idx -= this._options.frozenColumn + 1;\n      }\n    } else {\n      headerRowTarget = this._headerRowL;\n    }\n\n    return headerRowTarget.children[idx];\n  }\n\n  /** Get the Footer Row Column DOM element */\n  getFooterRowColumn(columnIdOrIdx: number | string) {\n    let idx = (typeof columnIdOrIdx === 'number' ? columnIdOrIdx : this.getColumnIndex(columnIdOrIdx));\n    let footerRowTarget;\n\n    if (this.hasFrozenColumns()) {\n      if (idx <= this._options.frozenColumn) {\n        footerRowTarget = this._footerRowL;\n      } else {\n        footerRowTarget = this._footerRowR;\n\n        idx -= this._options.frozenColumn + 1;\n      }\n    } else {\n      footerRowTarget = this._footerRowL;\n    }\n\n    return footerRowTarget.children[idx];\n  }\n\n  protected createColumnFooter() {\n    if (this._options.createFooterRow) {\n      this._footerRow.forEach((footer) => {\n        const columnElements = footer.querySelectorAll('.slick-footerrow-column');\n        columnElements.forEach((column) => {\n          const columnDef = Utils.storage.get(column, 'column');\n          this.trigger(this.onBeforeFooterRowCellDestroy, {\n            node: column,\n            column: columnDef,\n            grid: this\n          });\n        });\n      });\n\n      Utils.emptyElement(this._footerRowL);\n      Utils.emptyElement(this._footerRowR);\n\n      for (let i = 0; i < this.columns.length; i++) {\n        let m = this.columns[i];\n        if (!m || m.hidden) continue;\n\n        const footerRowCell = Utils.createDomElement('div', { className: `ui-state-default slick-state-default slick-footerrow-column l${i} r${i}` }, this.hasFrozenColumns() && (i > this._options.frozenColumn) ? this._footerRowR : this._footerRowL);\n        const className = this.hasFrozenColumns() && i <= this._options.frozenColumn ? 'frozen' : null;\n        if (className) {\n          footerRowCell.classList.add(className);\n        }\n\n        Utils.storage.put(footerRowCell, 'column', m);\n\n        this.trigger(this.onFooterRowCellRendered, {\n          node: footerRowCell,\n          column: m,\n          grid: this\n        });\n      }\n    }\n  }\n\n  protected handleHeaderMouseHoverOn(e: Event | SlickEventData_) {\n    (e as any)?.target.classList.add('ui-state-hover', 'slick-state-hover');\n  }\n\n  protected handleHeaderMouseHoverOff(e: Event | SlickEventData_) {\n    (e as any)?.target.classList.remove('ui-state-hover', 'slick-state-hover');\n  }\n\n  protected createColumnHeaders() {\n    this._headers.forEach((header) => {\n      const columnElements = header.querySelectorAll('.slick-header-column')\n      columnElements.forEach((column) => {\n        let columnDef = Utils.storage.get(column, 'column');\n        if (columnDef) {\n          this.trigger(this.onBeforeHeaderCellDestroy, {\n            node: column,\n            column: columnDef,\n            grid: this\n          });\n        }\n      });\n    })\n\n    Utils.emptyElement(this._headerL);\n    Utils.emptyElement(this._headerR);\n\n    this.getHeadersWidth();\n\n    Utils.width(this._headerL, this.headersWidthL);\n    Utils.width(this._headerR, this.headersWidthR);\n\n    this._headerRows.forEach((row) => {\n      const columnElements = row.querySelectorAll('.slick-headerrow-column');\n      columnElements.forEach((column) => {\n        const columnDef = Utils.storage.get(column, 'column');\n        if (columnDef) {\n          this.trigger(this.onBeforeHeaderRowCellDestroy, {\n            node: this,\n            column: columnDef,\n            grid: this\n          });\n        }\n      });\n    });\n\n    Utils.emptyElement(this._headerRowL);\n    Utils.emptyElement(this._headerRowR);\n\n    if (this._options.createFooterRow) {\n      const footerRowColumnElements = this._footerRowL.querySelectorAll('.slick-footerrow-column');\n      footerRowColumnElements.forEach((column) => {\n        let columnDef = Utils.storage.get(column, 'column');\n        if (columnDef) {\n          this.trigger(this.onBeforeFooterRowCellDestroy, {\n            node: this,\n            column: columnDef,\n            grid: this\n          });\n        }\n      });\n      Utils.emptyElement(this._footerRowL);\n\n      if (this.hasFrozenColumns()) {\n        const footerRowColumnElements = this._footerRowR.querySelectorAll('.slick-footerrow-column');\n        footerRowColumnElements.forEach((column) => {\n          let columnDef = Utils.storage.get(column, 'column');\n          if (columnDef) {\n            this.trigger(this.onBeforeFooterRowCellDestroy, {\n              node: this,\n              column: columnDef,\n              grid: this\n            });\n          }\n        });\n        Utils.emptyElement(this._footerRowR);\n      }\n    }\n\n    for (let i = 0; i < this.columns.length; i++) {\n      const m: Column = this.columns[i];\n      const headerTarget = this.hasFrozenColumns() ? ((i <= this._options.frozenColumn) ? this._headerL : this._headerR) : this._headerL;\n      const headerRowTarget = this.hasFrozenColumns() ? ((i <= this._options.frozenColumn) ? this._headerRowL : this._headerRowR) : this._headerRowL;\n\n      const header = Utils.createDomElement('div', { id: `${this.uid + m.id}`, dataset: { id: String(m.id) }, className: 'ui-state-default slick-state-default slick-header-column', title: m.toolTip || '' }, headerTarget);\n      Utils.createDomElement('span', { className: 'slick-column-name', innerHTML: this.sanitizeHtmlString(m.name as string) }, header);\n      Utils.width(header, m.width! - this.headerColumnWidthDiff);\n\n      let classname = m.headerCssClass || null;\n      if (classname) {\n        header.classList.add(...classname.split(' '));\n      }\n      classname = this.hasFrozenColumns() && i <= this._options.frozenColumn ? 'frozen' : null;\n      if (classname) {\n        header.classList.add(classname);\n      }\n\n      this._bindingEventService.bind(header, 'mouseenter', this.handleHeaderMouseEnter.bind(this) as EventListener);\n      this._bindingEventService.bind(header, 'mouseleave', this.handleHeaderMouseLeave.bind(this) as EventListener);\n\n      Utils.storage.put(header, 'column', m);\n\n      if (this._options.enableColumnReorder || m.sortable) {\n        this._bindingEventService.bind(header, 'mouseenter', this.handleHeaderMouseHoverOn.bind(this) as EventListener);\n        this._bindingEventService.bind(header, 'mouseleave', this.handleHeaderMouseHoverOff.bind(this) as EventListener);\n      }\n\n      if (m.hasOwnProperty('headerCellAttrs') && m.headerCellAttrs instanceof Object) {\n        for (let key in m.headerCellAttrs) {\n          if (m.headerCellAttrs.hasOwnProperty(key)) {\n            header.setAttribute(key, m.headerCellAttrs[key]);\n          }\n        }\n      }\n\n      if (m.sortable) {\n        header.classList.add('slick-header-sortable');\n        Utils.createDomElement('div', { className: `slick-sort-indicator ${this._options.numberedMultiColumnSort && !this._options.sortColNumberInSeparateSpan ? ' slick-sort-indicator-numbered' : ''}` }, header);\n        if (this._options.numberedMultiColumnSort && this._options.sortColNumberInSeparateSpan) {\n          Utils.createDomElement('div', { className: 'slick-sort-indicator-numbered' }, header);\n        }\n      }\n\n      this.trigger(this.onHeaderCellRendered, {\n        node: header,\n        column: m,\n        grid: this\n      });\n\n      if (this._options.showHeaderRow) {\n        const headerRowCell = Utils.createDomElement('div', { className: `ui-state-default slick-state-default slick-headerrow-column l${i} r${i}` }, headerRowTarget);\n        const classname = this.hasFrozenColumns() && i <= this._options.frozenColumn ? 'frozen' : null;\n        if (classname) {\n          headerRowCell.classList.add(classname);\n        }\n\n        this._bindingEventService.bind(headerRowCell, 'mouseenter', this.handleHeaderRowMouseEnter.bind(this) as EventListener);\n        this._bindingEventService.bind(headerRowCell, 'mouseleave', this.handleHeaderRowMouseLeave.bind(this) as EventListener);\n\n        Utils.storage.put(headerRowCell, 'column', m);\n\n        this.trigger(this.onHeaderRowCellRendered, {\n          node: headerRowCell,\n          column: m,\n          grid: this\n        });\n      }\n      if (this._options.createFooterRow && this._options.showFooterRow) {\n        const footerRowTarget = this.hasFrozenColumns() ? ((i <= this._options.frozenColumn) ? this._footerRow[0] : this._footerRow[1]) : this._footerRow[0];\n        const footerRowCell = Utils.createDomElement('div', { className: `ui-state-default slick-state-default slick-footerrow-column l${i} r${i}` }, footerRowTarget);\n        Utils.storage.put(footerRowCell, 'column', m)\n\n        this.trigger(this.onFooterRowCellRendered, {\n          node: footerRowCell,\n          column: m,\n          grid: this\n        });\n      }\n    }\n\n    this.setSortColumns(this.sortColumns);\n    this.setupColumnResize();\n    if (this._options.enableColumnReorder) {\n      if (typeof this._options.enableColumnReorder === 'function') {\n        this._options.enableColumnReorder(this, this._headers, this.headerColumnWidthDiff, this.setColumns, this.setupColumnResize, this.columns, this.getColumnIndex, this.uid, this.trigger);\n      } else {\n        this.setupColumnReorder();\n      }\n    }\n  }\n\n  protected setupColumnSort() {\n    this._headers.forEach((header) => {\n      this._bindingEventService.bind(header, 'click', (e: any) => {\n        if (this.columnResizeDragging) {\n          return;\n        }\n\n        if (e.target.classList.contains('slick-resizable-handle')) {\n          return;\n        }\n\n        let coll = e.target.closest('.slick-header-column');\n        if (!coll) {\n          return;\n        }\n\n        let column = Utils.storage.get(coll, 'column');\n        if (column.sortable) {\n          if (!this.getEditorLock().commitCurrentEdit()) {\n            return;\n          }\n\n          let previousSortColumns = this.sortColumns.slice();\n          let sortColumn: ColumnSort | null = null;\n          let i = 0;\n          for (; i < this.sortColumns.length; i++) {\n            if (this.sortColumns[i].columnId == column.id) {\n              sortColumn = this.sortColumns[i];\n              sortColumn.sortAsc = !sortColumn.sortAsc;\n              break;\n            }\n          }\n          let hadSortCol = !!sortColumn;\n\n          if (this._options.tristateMultiColumnSort) {\n            if (!sortColumn) {\n              sortColumn = { columnId: column.id, sortAsc: column.defaultSortAsc };\n            }\n            if (hadSortCol && sortColumn.sortAsc) {\n              // three state: remove sort rather than go back to ASC\n              this.sortColumns.splice(i, 1);\n              sortColumn = null;\n            }\n            if (!this._options.multiColumnSort) {\n              this.sortColumns = [];\n            }\n            if (sortColumn && (!hadSortCol || !this._options.multiColumnSort)) {\n              this.sortColumns.push(sortColumn);\n            }\n          } else {\n            // legacy behaviour\n            if (e.metaKey && this._options.multiColumnSort) {\n              if (sortColumn) {\n                this.sortColumns.splice(i, 1);\n              }\n            } else {\n              if ((!e.shiftKey && !e.metaKey) || !this._options.multiColumnSort) {\n                this.sortColumns = [];\n              }\n\n              if (!sortColumn) {\n                sortColumn = { columnId: column.id, sortAsc: column.defaultSortAsc };\n                this.sortColumns.push(sortColumn);\n              } else if (this.sortColumns.length === 0) {\n                this.sortColumns.push(sortColumn);\n              }\n            }\n          }\n\n          let onSortArgs;\n          if (!this._options.multiColumnSort) {\n            onSortArgs = {\n              multiColumnSort: false,\n              previousSortColumns: previousSortColumns,\n              columnId: (this.sortColumns.length > 0 ? column.id : null),\n              sortCol: (this.sortColumns.length > 0 ? column : null),\n              sortAsc: (this.sortColumns.length > 0 ? this.sortColumns[0].sortAsc : true)\n            };\n          } else {\n            onSortArgs = {\n              multiColumnSort: true,\n              previousSortColumns: previousSortColumns,\n              sortCols: this.sortColumns.map((col) => {\n                return { columnId: this.columns[this.getColumnIndex(col.columnId)].id, sortCol: this.columns[this.getColumnIndex(col.columnId)], sortAsc: col.sortAsc };\n              })\n            };\n          }\n\n          if (this.trigger(this.onBeforeSort, onSortArgs, e).getReturnValue() !== false) {\n            this.setSortColumns(this.sortColumns);\n            this.trigger(this.onSort, onSortArgs, e);\n          }\n        }\n      });\n    });\n  }\n\n  protected currentPositionInHeader(id: number | string) {\n    let currentPosition = 0;\n    this._headers.forEach((header) => {\n      const columnElements = header.querySelectorAll('.slick-header-column')\n      columnElements.forEach((column, i) => {\n        if (column.id == id) {\n          currentPosition = i;\n        }\n      });\n    });\n\n    return currentPosition;\n  }\n\n  protected remove(arr: any[], elem: HTMLElement) {\n    let index = arr.lastIndexOf(elem);\n    if (index > -1) {\n      arr.splice(index, 1);\n      this.remove(arr, elem);\n    }\n  }\n\n  protected setupColumnReorder() {\n    if (this.sortableSideLeftInstance) {\n      this.sortableSideLeftInstance.destroy();\n      this.sortableSideRightInstance.destroy();\n    }\n\n    let columnScrollTimer: any = null;\n\n    const scrollColumnsRight = () => this._viewportScrollContainerX.scrollLeft = this._viewportScrollContainerX.scrollLeft + 10;\n    const scrollColumnsLeft = () => this._viewportScrollContainerX.scrollLeft = this._viewportScrollContainerX.scrollLeft - 10;\n\n    let canDragScroll;\n    let sortableOptions = {\n      animation: 50,\n      direction: 'horizontal',\n      chosenClass: 'slick-header-column-active',\n      ghostClass: 'slick-sortable-placeholder',\n      draggable: '.slick-header-column',\n      dragoverBubble: false,\n      revertClone: true,\n      scroll: !this.hasFrozenColumns(), // enable auto-scroll\n      onStart: (e: any) => {\n        canDragScroll = !this.hasFrozenColumns() ||\n          Utils.offset(e.item)!.left > Utils.offset(this._viewportScrollContainerX)!.left;\n\n        if (canDragScroll && e.originalEvent.pageX > this._container.clientWidth) {\n          if (!(columnScrollTimer)) {\n            columnScrollTimer = setInterval(scrollColumnsRight, 100);\n          }\n        } else if (canDragScroll && e.originalEvent.pageX < Utils.offset(this._viewportScrollContainerX)!.left) {\n          if (!(columnScrollTimer)) {\n            columnScrollTimer = setInterval(scrollColumnsLeft, 100);\n          }\n        } else {\n          clearInterval(columnScrollTimer);\n          columnScrollTimer = null;\n        }\n      },\n      onEnd: (e: any) => {\n        let cancel = false;\n        clearInterval(columnScrollTimer);\n        columnScrollTimer = null;\n        let limit;\n\n        if (cancel || !this.getEditorLock().commitCurrentEdit()) {\n          return;\n        }\n\n        let reorderedIds = this.sortableSideLeftInstance?.toArray();\n        reorderedIds = reorderedIds.concat(this.sortableSideRightInstance?.toArray());\n\n        let reorderedColumns: Column[] = [];\n        for (let i = 0; i < reorderedIds.length; i++) {\n          reorderedColumns.push(this.columns[this.getColumnIndex(reorderedIds[i])]);\n        }\n        this.setColumns(reorderedColumns);\n\n        this.trigger(this.onColumnsReordered, { impactedColumns: this.getImpactedColumns(limit) });\n        e.stopPropagation();\n        this.setupColumnResize();\n      }\n    };\n\n    this.sortableSideLeftInstance = Sortable.create(this._headerL, sortableOptions);\n    this.sortableSideRightInstance = Sortable.create(this._headerR, sortableOptions);\n  }\n\n  protected getHeaderChildren() {\n    const a = Array.from(this._headers[0].children);\n    const b = Array.from(this._headers[1].children);\n    return a.concat(b) as HTMLElement[];\n  }\n\n  protected getImpactedColumns(limit?: { start: number; end: number; }) {\n    let impactedColumns: Column[] = [];\n\n    if (limit) {\n      for (let i = limit.start; i <= limit.end; i++) {\n        impactedColumns.push(this.columns[i]);\n      }\n    } else {\n      impactedColumns = this.columns;\n    }\n\n    return impactedColumns;\n  }\n\n  protected handleResizeableHandleDoubleClick(evt: MouseEvent & { target: HTMLDivElement; }) {\n    const triggeredByColumn = evt.target.parentElement!.id.replace(this.uid, '');\n    this.trigger(this.onColumnsResizeDblClick, { triggeredByColumn: triggeredByColumn });\n  }\n\n  protected setupColumnResize() {\n    if (typeof Resizable === 'undefined') {\n      throw new Error(`Slick.Resizable is undefined, make sure to import \"slick.interactions.js\"`);\n    }\n\n    let j: number, k: number, c: Column, pageX: number, minPageX: number, maxPageX: number, firstResizable: any, lastResizable: any;\n    let frozenLeftColMaxWidth = 0;\n\n    const children: HTMLElement[] = this.getHeaderChildren();\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      const handles = child.querySelectorAll('.slick-resizable-handle');\n      handles.forEach((handle) => handle.remove());\n\n      if (i >= this.columns.length || !this.columns[i] || this.columns[i].hidden) {\n        continue;\n      }\n\n      if (this.columns[i].resizable) {\n        if (firstResizable === undefined) {\n          firstResizable = i;\n        }\n        lastResizable = i;\n      }\n    }\n\n    if (firstResizable === undefined) {\n      return;\n    }\n\n    for (let i = 0; i < children.length; i++) {\n      const colElm = children[i];\n\n      if (i >= this.columns.length || !this.columns[i] || this.columns[i].hidden) {\n        continue;\n      }\n      if (i < firstResizable || (this._options.forceFitColumns && i >= lastResizable)) {\n        continue;\n      }\n\n      const resizeableHandle = Utils.createDomElement('div', { className: 'slick-resizable-handle', role: 'separator', ariaOrientation: 'horizontal' }, colElm);\n      this._bindingEventService.bind(resizeableHandle, 'dblclick', this.handleResizeableHandleDoubleClick.bind(this) as EventListener);\n\n      this.slickResizableInstances.push(\n        Resizable({\n          resizeableElement: colElm as HTMLElement,\n          resizeableHandleElement: resizeableHandle,\n          onResizeStart: (e: any, resizeElms: any) => {\n            let targetEvent = e.touches ? e.touches[0] : e;\n            if (!this.getEditorLock().commitCurrentEdit()) {\n              return false;\n            }\n            pageX = targetEvent.pageX;\n            frozenLeftColMaxWidth = 0;\n            resizeElms.resizeableElement.classList.add('slick-header-column-active');\n            let shrinkLeewayOnRight: number | null = null;\n            let stretchLeewayOnRight: number | null = null;\n            // lock each column's width option to current width\n            for (let pw = 0; pw < children.length; pw++) {\n              if (pw >= this.columns.length || !this.columns[pw] || this.columns[pw].hidden) {\n                continue;\n              }\n              this.columns[pw].previousWidth = children[pw].offsetWidth;\n            }\n            if (this._options.forceFitColumns) {\n              shrinkLeewayOnRight = 0;\n              stretchLeewayOnRight = 0;\n              // colums on right affect maxPageX/minPageX\n              for (j = i + 1; j < this.columns.length; j++) {\n                c = this.columns[j];\n                if (c && c.resizable && !c.hidden) {\n                  if (stretchLeewayOnRight !== null) {\n                    if (c.maxWidth) {\n                      stretchLeewayOnRight += c.maxWidth - (c.previousWidth || 0);\n                    } else {\n                      stretchLeewayOnRight = null;\n                    }\n                  }\n                  shrinkLeewayOnRight += (c.previousWidth || 0) - Math.max(c.minWidth || 0, this.absoluteColumnMinWidth);\n                }\n              }\n            }\n            let shrinkLeewayOnLeft = 0;\n            let stretchLeewayOnLeft: number | null = 0;\n            for (j = 0; j <= i; j++) {\n              // columns on left only affect minPageX\n              c = this.columns[j];\n              if (c && c.resizable && !c.hidden) {\n                if (stretchLeewayOnLeft !== null) {\n                  if (c.maxWidth) {\n                    stretchLeewayOnLeft += c.maxWidth - (c.previousWidth || 0);\n                  } else {\n                    stretchLeewayOnLeft = null;\n                  }\n                }\n                shrinkLeewayOnLeft += (c.previousWidth || 0) - Math.max(c.minWidth || 0, this.absoluteColumnMinWidth);\n              }\n            }\n            if (shrinkLeewayOnRight === null) {\n              shrinkLeewayOnRight = 100000;\n            }\n            if (shrinkLeewayOnLeft === null) {\n              shrinkLeewayOnLeft = 100000;\n            }\n            if (stretchLeewayOnRight === null) {\n              stretchLeewayOnRight = 100000;\n            }\n            if (stretchLeewayOnLeft === null) {\n              stretchLeewayOnLeft = 100000;\n            }\n            maxPageX = pageX + Math.min(shrinkLeewayOnRight, stretchLeewayOnLeft);\n            minPageX = pageX - Math.min(shrinkLeewayOnLeft, stretchLeewayOnRight);\n          },\n          onResize: (e: any, resizeElms: any) => {\n            let targetEvent = e.touches ? e.touches[0] : e;\n            this.columnResizeDragging = true;\n            let actualMinWidth, d = Math.min(maxPageX, Math.max(minPageX, targetEvent.pageX)) - pageX, x;\n            let newCanvasWidthL = 0, newCanvasWidthR = 0;\n            let viewportWidth = this.viewportHasVScroll ? this.viewportW - (this.scrollbarDimensions?.width ?? 0) : this.viewportW;\n\n            if (d < 0) { // shrink column\n              x = d;\n\n              for (j = i; j >= 0; j--) {\n                c = this.columns[j];\n                if (c && c.resizable && !c.hidden) {\n                  actualMinWidth = Math.max(c.minWidth || 0, this.absoluteColumnMinWidth);\n                  if (x && c.previousWidth + x < actualMinWidth) {\n                    x += (c.previousWidth || 0) - actualMinWidth;\n                    c.width = actualMinWidth;\n                  } else {\n                    c.width = c.previousWidth + x;\n                    x = 0;\n                  }\n                }\n              }\n\n              for (k = 0; k <= i; k++) {\n                c = this.columns[k];\n                if (!c || c.hidden) { continue; }\n\n                if (this.hasFrozenColumns() && (k > this._options.frozenColumn)) {\n                  newCanvasWidthR += c.width || 0;\n                } else {\n                  newCanvasWidthL += c.width || 0;\n                }\n              }\n\n              if (this._options.forceFitColumns) {\n                x = -d;\n                for (j = i + 1; j < this.columns.length; j++) {\n                  c = this.columns[j];\n                  if (!c || c.hidden) { continue; }\n                  if (c.resizable) {\n                    if (x && c.maxWidth && (c.maxWidth - (c.previousWidth || 0) < x)) {\n                      x -= c.maxWidth - (c.previousWidth || 0);\n                      c.width = c.maxWidth;\n                    } else {\n                      c.width = c.previousWidth + x;\n                      x = 0;\n                    }\n\n                    if (this.hasFrozenColumns() && (j > this._options.frozenColumn)) {\n                      newCanvasWidthR += c.width || 0;\n                    } else {\n                      newCanvasWidthL += c.width || 0;\n                    }\n                  }\n                }\n              } else {\n                for (j = i + 1; j < this.columns.length; j++) {\n                  c = this.columns[j];\n                  if (!c || c.hidden) { continue; }\n\n                  if (this.hasFrozenColumns() && (j > this._options.frozenColumn)) {\n                    newCanvasWidthR += c.width || 0;\n                  } else {\n                    newCanvasWidthL += c.width || 0;\n                  }\n                }\n              }\n\n              if (this._options.forceFitColumns) {\n                x = -d;\n                for (j = i + 1; j < this.columns.length; j++) {\n                  c = this.columns[j];\n                  if (!c || c.hidden) { continue; }\n                  if (c.resizable) {\n                    if (x && c.maxWidth && (c.maxWidth - (c.previousWidth || 0) < x)) {\n                      x -= c.maxWidth - (c.previousWidth || 0);\n                      c.width = c.maxWidth;\n                    } else {\n                      c.width = (c.previousWidth || 0) + x;\n                      x = 0;\n                    }\n                  }\n                }\n              }\n            } else { // stretch column\n              x = d;\n\n              newCanvasWidthL = 0;\n              newCanvasWidthR = 0;\n\n              for (j = i; j >= 0; j--) {\n                c = this.columns[j];\n                if (!c || c.hidden) { continue; }\n                if (c.resizable) {\n                  if (x && c.maxWidth && (c.maxWidth - (c.previousWidth || 0) < x)) {\n                    x -= c.maxWidth - (c.previousWidth || 0);\n                    c.width = c.maxWidth;\n                  } else {\n                    let newWidth = (c.previousWidth || 0) + x;\n                    let resizedCanvasWidthL = this.canvasWidthL + x;\n\n                    if (this.hasFrozenColumns() && (j <= this._options.frozenColumn)) {\n                      // if we're on the left frozen side, we need to make sure that our left section width never goes over the total viewport width\n                      if (newWidth > frozenLeftColMaxWidth && resizedCanvasWidthL < (viewportWidth - this._options.frozenRightViewportMinWidth)) {\n                        frozenLeftColMaxWidth = newWidth; // keep max column width ref, if we go over the limit this number will stop increasing\n                      }\n                      c.width = ((resizedCanvasWidthL + this._options.frozenRightViewportMinWidth) > viewportWidth) ? frozenLeftColMaxWidth : newWidth;\n                    } else {\n                      c.width = newWidth;\n                    }\n                    x = 0;\n                  }\n                }\n              }\n\n              for (k = 0; k <= i; k++) {\n                c = this.columns[k];\n                if (!c || c.hidden) { continue; }\n\n                if (this.hasFrozenColumns() && (k > this._options.frozenColumn)) {\n                  newCanvasWidthR += c.width || 0;\n                } else {\n                  newCanvasWidthL += c.width || 0;\n                }\n              }\n\n              if (this._options.forceFitColumns) {\n                x = -d;\n                for (j = i + 1; j < this.columns.length; j++) {\n                  c = this.columns[j];\n                  if (!c || c.hidden) { continue; }\n                  if (c.resizable) {\n                    actualMinWidth = Math.max(c.minWidth || 0, this.absoluteColumnMinWidth);\n                    if (x && (c.previousWidth || 0) + x < actualMinWidth) {\n                      x += (c.previousWidth || 0) - actualMinWidth;\n                      c.width = actualMinWidth;\n                    } else {\n                      c.width = (c.previousWidth || 0) + x;\n                      x = 0;\n                    }\n\n                    if (this.hasFrozenColumns() && (j > this._options.frozenColumn)) {\n                      newCanvasWidthR += c.width || 0;\n                    } else {\n                      newCanvasWidthL += c.width || 0;\n                    }\n                  }\n                }\n              } else {\n                for (j = i + 1; j < this.columns.length; j++) {\n                  c = this.columns[j];\n                  if (!c || c.hidden) { continue; }\n\n                  if (this.hasFrozenColumns() && (j > this._options.frozenColumn)) {\n                    newCanvasWidthR += c.width || 0;\n                  } else {\n                    newCanvasWidthL += c.width || 0;\n                  }\n                }\n              }\n            }\n\n            if (this.hasFrozenColumns() && newCanvasWidthL !== this.canvasWidthL) {\n              Utils.width(this._headerL, newCanvasWidthL + 1000);\n              Utils.setStyleSize(this._paneHeaderR, 'left', newCanvasWidthL);\n            }\n\n            this.applyColumnHeaderWidths();\n            if (this._options.syncColumnCellResize) {\n              this.applyColumnWidths();\n            }\n            this.trigger(this.onColumnsDrag, {\n              triggeredByColumn: resizeElms.resizeableElement,\n              resizeHandle: resizeElms.resizeableHandleElement\n            });\n          },\n          onResizeEnd: (_e: Event, resizeElms: any) => {\n            resizeElms.resizeableElement.classList.remove('slick-header-column-active');\n\n            let triggeredByColumn = resizeElms.resizeableElement.id.replace(this.uid, '');\n            if (this.trigger(this.onBeforeColumnsResize, { triggeredByColumn: triggeredByColumn }).getReturnValue() === true) {\n              this.applyColumnHeaderWidths();\n            }\n            let newWidth;\n            for (j = 0; j < this.columns.length; j++) {\n              c = this.columns[j];\n              if (!c || c.hidden) { continue; }\n              newWidth = children[j].offsetWidth;\n\n              if (c.previousWidth !== newWidth && c.rerenderOnResize) {\n                this.invalidateAllRows();\n              }\n            }\n            this.updateCanvasWidth(true);\n            this.render();\n            this.trigger(this.onColumnsResized, { triggeredByColumn: triggeredByColumn });\n            setTimeout(() => { this.columnResizeDragging = false; }, 300);\n          }\n        })\n      );\n    }\n  }\n\n  protected getVBoxDelta(el: HTMLElement) {\n    let p = ['borderTopWidth', 'borderBottomWidth', 'paddingTop', 'paddingBottom'];\n    let styles = getComputedStyle(el);\n    let delta = 0;\n    p.forEach((val) => delta += Utils.toFloat(styles[val]));\n    return delta;\n  }\n\n  protected setFrozenOptions() {\n    this._options.frozenColumn = (this._options.frozenColumn >= 0 && this._options.frozenColumn < this.columns.length)\n      ? parseInt(this._options.frozenColumn as unknown as string)\n      : -1;\n\n    if (this._options.frozenRow > -1) {\n      this.hasFrozenRows = true;\n      this.frozenRowsHeight = (this._options.frozenRow) * this._options.rowHeight;\n      let dataLength = this.getDataLength();\n\n      this.actualFrozenRow = (this._options.frozenBottom)\n        ? (dataLength - this._options.frozenRow)\n        : this._options.frozenRow;\n    } else {\n      this.hasFrozenRows = false;\n    }\n  }\n\n  protected setPaneVisibility() {\n    if (this.hasFrozenColumns()) {\n      Utils.show(this._paneHeaderR);\n      Utils.show(this._paneTopR);\n\n      if (this.hasFrozenRows) {\n        Utils.show(this._paneBottomL);\n        Utils.show(this._paneBottomR);\n      } else {\n        Utils.hide(this._paneBottomR);\n        Utils.hide(this._paneBottomL);\n      }\n    } else {\n      Utils.hide(this._paneHeaderR);\n      Utils.hide(this._paneTopR);\n      Utils.hide(this._paneBottomR);\n\n      if (this.hasFrozenRows) {\n        Utils.show(this._paneBottomL);\n      } else {\n        Utils.hide(this._paneBottomR);\n        Utils.hide(this._paneBottomL);\n      }\n    }\n  }\n\n  protected setOverflow() {\n    this._viewportTopL.style['overflow-x'] = (this.hasFrozenColumns()) ? (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'hidden' : 'scroll') : (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'hidden' : 'auto');\n    this._viewportTopL.style['overflow-y'] = (!this.hasFrozenColumns() && this._options.alwaysShowVerticalScroll) ? 'scroll' : ((this.hasFrozenColumns()) ? (this.hasFrozenRows ? 'hidden' : 'hidden') : (this.hasFrozenRows ? 'scroll' : 'auto'));\n\n    this._viewportTopR.style['overflow-x'] = (this.hasFrozenColumns()) ? (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'hidden' : 'scroll') : (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'hidden' : 'auto');\n    this._viewportTopR.style['overflow-y'] = this._options.alwaysShowVerticalScroll ? 'scroll' : ((this.hasFrozenColumns()) ? (this.hasFrozenRows ? 'scroll' : 'auto') : (this.hasFrozenRows ? 'scroll' : 'auto'));\n\n    this._viewportBottomL.style['overflow-x'] = (this.hasFrozenColumns()) ? (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'scroll' : 'auto') : (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'auto' : 'auto');\n    this._viewportBottomL.style['overflow-y'] = (!this.hasFrozenColumns() && this._options.alwaysShowVerticalScroll) ? 'scroll' : ((this.hasFrozenColumns()) ? (this.hasFrozenRows ? 'hidden' : 'hidden') : (this.hasFrozenRows ? 'scroll' : 'auto'));\n\n    this._viewportBottomR.style['overflow-x'] = (this.hasFrozenColumns()) ? (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'scroll' : 'auto') : (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'auto' : 'auto');\n    this._viewportBottomR.style['overflow-y'] = this._options.alwaysShowVerticalScroll ? 'scroll' : ((this.hasFrozenColumns()) ? (this.hasFrozenRows ? 'auto' : 'auto') : (this.hasFrozenRows ? 'auto' : 'auto'));\n\n    if (this._options.viewportClass) {\n      this._viewportTopL.classList.add(...this._options.viewportClass.split(' '));\n      this._viewportTopR.classList.add(...this._options.viewportClass.split(' '));\n      this._viewportBottomL.classList.add(...this._options.viewportClass.split(' '));\n      this._viewportBottomR.classList.add(...this._options.viewportClass.split(' '));\n    }\n  }\n\n  protected setScroller() {\n    if (this.hasFrozenColumns()) {\n      this._headerScrollContainer = this._headerScrollerR;\n      this._headerRowScrollContainer = this._headerRowScrollerR;\n      this._footerRowScrollContainer = this._footerRowScrollerR;\n\n      if (this.hasFrozenRows) {\n        if (this._options.frozenBottom) {\n          this._viewportScrollContainerX = this._viewportBottomR;\n          this._viewportScrollContainerY = this._viewportTopR;\n        } else {\n          this._viewportScrollContainerX = this._viewportScrollContainerY = this._viewportBottomR;\n        }\n      } else {\n        this._viewportScrollContainerX = this._viewportScrollContainerY = this._viewportTopR;\n      }\n    } else {\n      this._headerScrollContainer = this._headerScrollerL;\n      this._headerRowScrollContainer = this._headerRowScrollerL;\n      this._footerRowScrollContainer = this._footerRowScrollerL;\n\n      if (this.hasFrozenRows) {\n        if (this._options.frozenBottom) {\n          this._viewportScrollContainerX = this._viewportBottomL;\n          this._viewportScrollContainerY = this._viewportTopL;\n        } else {\n          this._viewportScrollContainerX = this._viewportScrollContainerY = this._viewportBottomL;\n        }\n      } else {\n        this._viewportScrollContainerX = this._viewportScrollContainerY = this._viewportTopL;\n      }\n    }\n  }\n\n  protected measureCellPaddingAndBorder() {\n    const h = ['borderLeftWidth', 'borderRightWidth', 'paddingLeft', 'paddingRight'];\n    const v = ['borderTopWidth', 'borderBottomWidth', 'paddingTop', 'paddingBottom'];\n    const header = this._headers[0];\n\n    this.headerColumnWidthDiff = this.headerColumnHeightDiff = 0;\n    this.cellWidthDiff = this.cellHeightDiff = 0;\n\n    let el = Utils.createDomElement('div', { className: 'ui-state-default slick-state-default slick-header-column', style: { visibility: 'hidden' }, textContent: '-' }, header);\n    let style = getComputedStyle(el);\n    if (style['box-sizing'] !== 'border-box' && style['-moz-box-sizing'] !== 'border-box' && style['-webkit-box-sizing'] !== 'border-box') {\n      h.forEach((val) => this.headerColumnWidthDiff += Utils.toFloat(style[val]));\n      v.forEach((val) => this.headerColumnHeightDiff += Utils.toFloat(style[val]));\n    }\n    el.remove();\n\n    const r = Utils.createDomElement('div', { className: 'slick-row' }, this._canvas[0]);\n    el = Utils.createDomElement('div', { className: 'slick-cell', id: '', style: { visibility: 'hidden' }, textContent: '-' }, r);\n    style = getComputedStyle(el);\n    if (style['box-sizing'] !== 'border-box' && style['-moz-box-sizing'] !== 'border-box' && style['-webkit-box-sizing'] !== 'border-box') {\n      h.forEach((val) => this.cellWidthDiff += Utils.toFloat(style[val]));\n      v.forEach((val) => this.cellHeightDiff += Utils.toFloat(style[val]));\n    }\n    r.remove();\n\n    this.absoluteColumnMinWidth = Math.max(this.headerColumnWidthDiff, this.cellWidthDiff);\n  }\n\n  protected createCssRules() {\n    const template = Utils.createDomElement('template', { innerHTML: '<style type=\"text/css\" rel=\"stylesheet\" />' });\n    this._style = template.content.firstChild;\n    document.head.appendChild(this._style);\n\n    let rowHeight = (this._options.rowHeight - this.cellHeightDiff);\n    let rules = [\n      `.${this.uid} .slick-group-header-column { left: 1000px; }`,\n      `.${this.uid} .slick-header-column { left: 1000px; }`,\n      `.${this.uid} .slick-top-panel { height: ${this._options.topPanelHeight}px; }`,\n      `.${this.uid} .slick-preheader-panel { height: ${this._options.preHeaderPanelHeight}px; }`,\n      `.${this.uid} .slick-headerrow-columns { height: ${this._options.headerRowHeight}px; }`,\n      `.${this.uid} .slick-footerrow-columns { height: ${this._options.footerRowHeight}px; }`,\n      `.${this.uid} .slick-cell { height: ${rowHeight}px; }`,\n      `.${this.uid} .slick-row { height: ${this._options.rowHeight}px; }`\n    ];\n\n    for (let i = 0; i < this.columns.length; i++) {\n      if (!this.columns[i] || this.columns[i].hidden) continue;\n\n      rules.push(`.${this.uid} .l${i} { }`);\n      rules.push(`.${this.uid} .r${i} { }`);\n    }\n\n    if (this._style.styleSheet) { // IE\n      this._style.styleSheet.cssText = rules.join(' ');\n    } else {\n      this._style.appendChild(document.createTextNode(rules.join(' ')));\n    }\n  }\n\n  protected getColumnCssRules(idx: number) {\n    let i: number;\n    if (!this.stylesheet) {\n      let sheets: any = document.styleSheets;\n      for (i = 0; i < sheets.length; i++) {\n        if ((sheets[i].ownerNode || sheets[i].owningElement) == this._style) {\n          this.stylesheet = sheets[i];\n          break;\n        }\n      }\n\n      if (!this.stylesheet) {\n        throw new Error('SlickGrid Cannot find stylesheet.');\n      }\n\n      // find and cache column CSS rules\n      this.columnCssRulesL = [];\n      this.columnCssRulesR = [];\n      let cssRules = (this.stylesheet.cssRules || this.stylesheet.rules);\n      let matches, columnIdx;\n      for (i = 0; i < cssRules.length; i++) {\n        let selector = cssRules[i].selectorText;\n        if (matches = /\\.l\\d+/.exec(selector)) {\n          columnIdx = parseInt(matches[0].substr(2, matches[0].length - 2), 10);\n          this.columnCssRulesL[columnIdx] = cssRules[i];\n        } else if (matches = /\\.r\\d+/.exec(selector)) {\n          columnIdx = parseInt(matches[0].substr(2, matches[0].length - 2), 10);\n          this.columnCssRulesR[columnIdx] = cssRules[i];\n        }\n      }\n    }\n\n    return {\n      left: this.columnCssRulesL[idx],\n      right: this.columnCssRulesR[idx]\n    };\n  }\n\n  protected removeCssRules() {\n    this._style.remove();\n    this.stylesheet = null;\n  }\n\n  /**\n   * Destroy (dispose) of SlickGrid\n   * @param {boolean} shouldDestroyAllElements - do we want to destroy (nullify) all DOM elements as well? This help in avoiding mem leaks\n   */\n  destroy(shouldDestroyAllElements?: boolean) {\n    this._bindingEventService.unbindAll();\n    this.slickDraggableInstance = this.destroyAllInstances(this.slickDraggableInstance) as null;\n    this.slickMouseWheelInstances = this.destroyAllInstances(this.slickMouseWheelInstances) as InteractionBase[];\n    this.slickResizableInstances = this.destroyAllInstances(this.slickResizableInstances) as InteractionBase[];\n    this.getEditorLock().cancelCurrentEdit();\n\n    this.trigger(this.onBeforeDestroy, {});\n\n    let i = this.plugins.length;\n    while (i--) {\n      this.unregisterPlugin(this.plugins[i]);\n    }\n\n    if (this._options.enableColumnReorder && typeof this.sortableSideLeftInstance?.destroy === 'function') {\n      this.sortableSideLeftInstance.destroy();\n      this.sortableSideRightInstance.destroy();\n    }\n\n    this.unbindAncestorScrollEvents();\n    this._bindingEventService.unbindByEventName(this._container, 'resize');\n    this.removeCssRules();\n\n    this._canvas.forEach((element) => {\n      this._bindingEventService.unbindByEventName(element, 'keydown');\n      this._bindingEventService.unbindByEventName(element, 'click');\n      this._bindingEventService.unbindByEventName(element, 'dblclick');\n      this._bindingEventService.unbindByEventName(element, 'contextmenu');\n      this._bindingEventService.unbindByEventName(element, 'mouseover');\n      this._bindingEventService.unbindByEventName(element, 'mouseout');\n    });\n    this._viewport.forEach((view) => {\n      this._bindingEventService.unbindByEventName(view, 'scroll');\n    });\n\n    this._headerScroller.forEach((el) => {\n      this._bindingEventService.unbindByEventName(el, 'contextmenu');\n      this._bindingEventService.unbindByEventName(el, 'click');\n    });\n\n    this._headerRowScroller.forEach((scroller) => {\n      this._bindingEventService.unbindByEventName(scroller, 'scroll');\n    });\n\n    if (this._footerRow) {\n      this._footerRow.forEach((footer) => {\n        this._bindingEventService.unbindByEventName(footer, 'contextmenu')\n        this._bindingEventService.unbindByEventName(footer, 'click');\n      });\n    }\n\n    if (this._footerRowScroller) {\n      this._footerRowScroller.forEach((scroller) => {\n        this._bindingEventService.unbindByEventName(scroller, 'scroll');\n      });\n    }\n\n    if (this._preHeaderPanelScroller) {\n      this._bindingEventService.unbindByEventName(this._preHeaderPanelScroller, 'scroll');\n    }\n\n    this._bindingEventService.unbindByEventName(this._focusSink, 'keydown');\n    this._bindingEventService.unbindByEventName(this._focusSink2, 'keydown');\n\n    const resizeHandles = this._container.querySelectorAll('.slick-resizable-handle');\n    [].forEach.call(resizeHandles, (handle) => {\n      this._bindingEventService.unbindByEventName(handle, 'dblclick');\n    });\n\n    const headerColumns = this._container.querySelectorAll('.slick-header-column');\n    [].forEach.call(headerColumns, (column) => {\n      this._bindingEventService.unbindByEventName(column, 'mouseenter');\n      this._bindingEventService.unbindByEventName(column, 'mouseleave');\n\n      this._bindingEventService.unbindByEventName(column, 'mouseenter');\n      this._bindingEventService.unbindByEventName(column, 'mouseleave');\n    });\n\n    Utils.emptyElement(this._container);\n    this._container.classList.remove(this.uid);\n\n    if (shouldDestroyAllElements) {\n      this.destroyAllElements();\n    }\n  }\n\n  /**\n   * call destroy method, when exists, on all the instance(s) it found\n   * @params instances - can be a single instance or a an array of instances\n   */\n  protected destroyAllInstances(inputInstances: null | InteractionBase | Array<InteractionBase>) {\n    if (inputInstances) {\n      const instances = Array.isArray(inputInstances) ? inputInstances : [inputInstances];\n      let instance;\n      while ((instance = instances.pop()) != null) {\n        if (instance && typeof instance.destroy === 'function') {\n          instance.destroy();\n        }\n      }\n    }\n    // reset instance(s)\n    inputInstances = (Array.isArray(inputInstances) ? [] : null);\n    return inputInstances;\n  }\n\n  protected destroyAllElements() {\n    this._activeCanvasNode = null as any;\n    this._activeViewportNode = null as any;\n    this._boundAncestors = null as any;\n    this._canvas = null as any;\n    this._canvasTopL = null as any;\n    this._canvasTopR = null as any;\n    this._canvasBottomL = null as any;\n    this._canvasBottomR = null as any;\n    this._container = null as any;\n    this._focusSink = null as any;\n    this._focusSink2 = null as any;\n    this._groupHeaders = null as any;\n    this._groupHeadersL = null as any;\n    this._groupHeadersR = null as any;\n    this._headerL = null as any;\n    this._headerR = null as any;\n    this._headers = null as any;\n    this._headerRows = null as any;\n    this._headerRowL = null as any;\n    this._headerRowR = null as any;\n    this._headerRowSpacerL = null as any;\n    this._headerRowSpacerR = null as any;\n    this._headerRowScrollContainer = null as any;\n    this._headerRowScroller = null as any;\n    this._headerRowScrollerL = null as any;\n    this._headerRowScrollerR = null as any;\n    this._headerScrollContainer = null as any;\n    this._headerScroller = null as any;\n    this._headerScrollerL = null as any;\n    this._headerScrollerR = null as any;\n    this._hiddenParents = null as any;\n    this._footerRow = null as any;\n    this._footerRowL = null as any;\n    this._footerRowR = null as any;\n    this._footerRowSpacerL = null as any;\n    this._footerRowSpacerR = null as any;\n    this._footerRowScroller = null as any;\n    this._footerRowScrollerL = null as any;\n    this._footerRowScrollerR = null as any;\n    this._footerRowScrollContainer = null as any;\n    this._preHeaderPanel = null as any;\n    this._preHeaderPanelR = null as any;\n    this._preHeaderPanelScroller = null as any;\n    this._preHeaderPanelScrollerR = null as any;\n    this._preHeaderPanelSpacer = null as any;\n    this._preHeaderPanelSpacerR = null as any;\n    this._topPanels = null as any;\n    this._topPanelScrollers = null as any;\n    this._style = null as any;\n    this._topPanelScrollerL = null as any;\n    this._topPanelScrollerR = null as any;\n    this._topPanelL = null as any;\n    this._topPanelR = null as any;\n    this._paneHeaderL = null as any;\n    this._paneHeaderR = null as any;\n    this._paneTopL = null as any;\n    this._paneTopR = null as any;\n    this._paneBottomL = null as any;\n    this._paneBottomR = null as any;\n    this._viewport = null as any;\n    this._viewportTopL = null as any;\n    this._viewportTopR = null as any;\n    this._viewportBottomL = null as any;\n    this._viewportBottomR = null as any;\n    this._viewportScrollContainerX = null as any;\n    this._viewportScrollContainerY = null as any;\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // Column Autosizing\n  //////////////////////////////////////////////////////////////////////////////////////////////\n\n  /** Proportionally resize a specific column by its name, index or Id */\n  autosizeColumn(columnOrIndexOrId: number | string, isInit?: boolean) {\n    let colDef: Column | null = null;\n    let colIndex = -1;\n    if (typeof columnOrIndexOrId === 'number') {\n      colDef = this.columns[columnOrIndexOrId];\n      colIndex = columnOrIndexOrId;\n    }\n    else if (typeof columnOrIndexOrId === 'string') {\n      for (let i = 0; i < this.columns.length; i++) {\n        if (this.columns[i].id === columnOrIndexOrId) { colDef = this.columns[i]; colIndex = i; }\n      }\n    }\n    if (!colDef) {\n      return;\n    }\n    const gridCanvas = this.getCanvasNode(0, 0) as HTMLElement;\n    this.getColAutosizeWidth(colDef, colIndex, gridCanvas, isInit || false, colIndex);\n  }\n\n  protected treatAsLocked(autoSize: AutoSize = {}) {\n    // treat as locked (don't resize) if small and header is the widest part\n    return !autoSize.ignoreHeaderText\n      && !autoSize.sizeToRemaining\n      && (autoSize.contentSizePx === autoSize.headerWidthPx)\n      && ((autoSize.widthPx ?? 0) < 100)\n      ;\n  }\n\n  /** Proportionately resizes all columns to fill available horizontal space. This does not take the cell contents into consideration. */\n  autosizeColumns(autosizeMode?: string, isInit?: boolean) {\n    this.cacheCssForHiddenInit();\n    this.internalAutosizeColumns(autosizeMode, isInit);\n    this.restoreCssFromHiddenInit();\n  }\n\n  protected internalAutosizeColumns(autosizeMode?: string, isInit?: boolean) {\n    //LogColWidths();\n    autosizeMode = autosizeMode || this._options.autosizeColsMode;\n    if (autosizeMode === GridAutosizeColsMode.LegacyForceFit || autosizeMode === GridAutosizeColsMode.LegacyOff) {\n      this.legacyAutosizeColumns();\n      return;\n    }\n\n    if (autosizeMode === GridAutosizeColsMode.None) {\n      return;\n    }\n\n    // test for brower canvas support, canvas_context!=null if supported\n    this.canvas = document.createElement('canvas');\n    if (this.canvas?.getContext) { this.canvas_context = this.canvas.getContext('2d'); }\n\n    // pass in the grid canvas\n    let gridCanvas = this.getCanvasNode(0, 0) as HTMLElement;\n    let viewportWidth = this.viewportHasVScroll ? this.viewportW - (this.scrollbarDimensions?.width ?? 0) : this.viewportW;\n\n    // iterate columns to get autosizes\n    let i: number, c: Column, colWidth: number, reRender = false, totalWidth = 0, totalWidthLessSTR = 0, strColsMinWidth = 0, totalMinWidth = 0, totalLockedColWidth = 0;\n    for (i = 0; i < this.columns.length; i++) {\n      c = this.columns[i];\n      this.getColAutosizeWidth(c, i, gridCanvas, isInit || false, i);\n      totalLockedColWidth += (c.autoSize?.autosizeMode === ColAutosizeMode.Locked ? (c.width || 0) : (this.treatAsLocked(c.autoSize) ? c.autoSize?.widthPx || 0 : 0));\n      totalMinWidth += (c.autoSize?.autosizeMode === ColAutosizeMode.Locked ? (c.width || 0) : (this.treatAsLocked(c.autoSize) ? c.autoSize?.widthPx || 0 : c.minWidth || 0));\n      totalWidth += (c.autoSize?.widthPx || 0);\n      totalWidthLessSTR += (c.autoSize?.sizeToRemaining ? 0 : c.autoSize?.widthPx || 0);\n      strColsMinWidth += (c.autoSize?.sizeToRemaining ? c.minWidth || 0 : 0);\n    }\n    let strColTotalGuideWidth = totalWidth - totalWidthLessSTR;\n\n    if (autosizeMode === GridAutosizeColsMode.FitViewportToCols) {\n      // - if viewport with is outside MinViewportWidthPx and MaxViewportWidthPx, then the viewport is set to\n      //   MinViewportWidthPx or MaxViewportWidthPx and the FitColsToViewport algorithm is used\n      // - viewport is resized to fit columns\n      let setWidth = totalWidth + (this.scrollbarDimensions?.width ?? 0);\n      autosizeMode = GridAutosizeColsMode.IgnoreViewport;\n\n      if (this._options.viewportMaxWidthPx && setWidth > this._options.viewportMaxWidthPx) {\n        setWidth = this._options.viewportMaxWidthPx;\n        autosizeMode = GridAutosizeColsMode.FitColsToViewport;\n      } else if (this._options.viewportMinWidthPx && setWidth < this._options.viewportMinWidthPx) {\n        setWidth = this._options.viewportMinWidthPx;\n        autosizeMode = GridAutosizeColsMode.FitColsToViewport;\n      } else {\n        // falling back to IgnoreViewport will size the columns as-is, with render checking\n        //for (i = 0; i < columns.length; i++) { columns[i].width = columns[i].autoSize.widthPx; }\n      }\n      Utils.width(this._container, setWidth);\n    }\n\n    if (autosizeMode === GridAutosizeColsMode.FitColsToViewport) {\n      if (strColTotalGuideWidth > 0 && totalWidthLessSTR < viewportWidth - strColsMinWidth) {\n        // if addl space remains in the viewport and there are SizeToRemaining cols, just the SizeToRemaining cols expand proportionally to fill viewport\n        for (i = 0; i < this.columns.length; i++) {\n          c = this.columns[i];\n          if (!c || c.hidden) continue;\n\n          let totalSTRViewportWidth = viewportWidth - totalWidthLessSTR;\n          if (c.autoSize?.sizeToRemaining) {\n            colWidth = totalSTRViewportWidth * (c.autoSize?.widthPx || 0) / strColTotalGuideWidth;\n          } else {\n            colWidth = (c.autoSize?.widthPx || 0);\n          }\n          if (c.rerenderOnResize && (c.width || 0) !== colWidth) {\n            reRender = true;\n          }\n          c.width = colWidth;\n        }\n      } else if ((this._options.viewportSwitchToScrollModeWidthPercent && totalWidthLessSTR + strColsMinWidth > viewportWidth * this._options.viewportSwitchToScrollModeWidthPercent / 100)\n        || (totalMinWidth > viewportWidth)) {\n        // if the total columns width is wider than the viewport by switchToScrollModeWidthPercent, switch to IgnoreViewport mode\n        autosizeMode = GridAutosizeColsMode.IgnoreViewport;\n      } else {\n        // otherwise (ie. no SizeToRemaining cols or viewport smaller than columns) all cols other than 'Locked' scale in proportion to fill viewport\n        // and SizeToRemaining get minWidth\n        let unallocatedColWidth = totalWidthLessSTR - totalLockedColWidth;\n        let unallocatedViewportWidth = viewportWidth - totalLockedColWidth - strColsMinWidth;\n        for (i = 0; i < this.columns.length; i++) {\n          c = this.columns[i];\n          if (!c || c.hidden) continue;\n\n          colWidth = c.width || 0;\n          if (c.autoSize?.autosizeMode !== ColAutosizeMode.Locked && !this.treatAsLocked(c.autoSize)) {\n            if (c.autoSize?.sizeToRemaining) {\n              colWidth = c.minWidth || 0;\n            } else {\n              // size width proportionally to free space (we know we have enough room due to the earlier calculations)\n              colWidth = unallocatedViewportWidth / unallocatedColWidth * (c.autoSize?.widthPx || 0) - 1;\n              if (colWidth < (c.minWidth || 0)) {\n                colWidth = c.minWidth || 0;\n              }\n\n              // remove the just allocated widths from the allocation pool\n              unallocatedColWidth -= (c.autoSize?.widthPx || 0);\n              unallocatedViewportWidth -= colWidth;\n            }\n          }\n          if (this.treatAsLocked(c.autoSize)) {\n            colWidth = (c.autoSize?.widthPx || 0);\n            if (colWidth < (c.minWidth || 0)) {\n              colWidth = c.minWidth || 0;\n            }\n          }\n          if (c.rerenderOnResize && c.width !== colWidth) {\n            reRender = true;\n          }\n          c.width = colWidth;\n        }\n      }\n    }\n\n    if (autosizeMode === GridAutosizeColsMode.IgnoreViewport) {\n      // just size columns as-is\n      for (i = 0; i < this.columns.length; i++) {\n        if (!this.columns[i] || this.columns[i].hidden) continue;\n\n        colWidth = this.columns[i].autoSize?.widthPx || 0;\n        if (this.columns[i].rerenderOnResize && this.columns[i].width !== colWidth) {\n          reRender = true;\n        }\n        this.columns[i].width = colWidth;\n      }\n    }\n\n    this.reRenderColumns(reRender);\n  }\n\n  protected LogColWidths() {\n    let s = 'Col Widths:';\n    for (let i = 0; i < this.columns.length; i++) { s += ' ' + (this.columns[i].hidden ? 'H' : this.columns[i].width); }\n    console.log(s);\n  }\n\n  protected getColAutosizeWidth(columnDef: Column, colIndex: number, gridCanvas: HTMLElement, isInit: boolean, colArrayIndex: number) {\n    let autoSize = columnDef.autoSize as AutoSize;\n\n    // set to width as default\n    autoSize.widthPx = columnDef.width;\n    if (autoSize.autosizeMode === ColAutosizeMode.Locked\n      || autoSize.autosizeMode === ColAutosizeMode.Guide) {\n      return;\n    }\n\n    let dl = this.getDataLength(); //getDataItem();\n    const isoDateRegExp = new RegExp(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z/);\n\n    // ContentIntelligent takes settings from column data type\n    if (autoSize.autosizeMode === ColAutosizeMode.ContentIntelligent) {\n      // default to column colDataTypeOf (can be used if initially there are no data rows)\n      let colDataTypeOf = autoSize.colDataTypeOf;\n      let colDataItem;\n      if (dl > 0) {\n        let tempRow = this.getDataItem(0);\n        if (tempRow) {\n          colDataItem = tempRow[columnDef.field];\n\n          // check for dates in hiding\n          if (isoDateRegExp.test(colDataItem)) { colDataItem = Date.parse(colDataItem); }\n\n          colDataTypeOf = typeof colDataItem;\n          if (colDataTypeOf === 'object') {\n            if (colDataItem instanceof Date) { colDataTypeOf = 'date'; }\n            if (typeof moment !== 'undefined' && colDataItem instanceof moment) { colDataTypeOf = 'moment'; }\n          }\n        }\n      }\n      if (colDataTypeOf === 'boolean') {\n        autoSize.colValueArray = [true, false];\n      }\n      if (colDataTypeOf === 'number') {\n        autoSize.valueFilterMode = ValueFilterMode.GetGreatestAndSub;\n        autoSize.rowSelectionMode = RowSelectionMode.AllRows;\n      }\n      if (colDataTypeOf === 'string') {\n        autoSize.valueFilterMode = ValueFilterMode.GetLongestText;\n        autoSize.rowSelectionMode = RowSelectionMode.AllRows;\n        autoSize.allowAddlPercent = 5;\n      }\n      if (colDataTypeOf === 'date') {\n        autoSize.colValueArray = [new Date(2009, 8, 30, 12, 20, 20)]; // Sep 30th 2009, 12:20:20 AM\n      }\n      if (colDataTypeOf === 'moment' && typeof moment !== 'undefined') {\n        autoSize.colValueArray = [moment([2009, 8, 30, 12, 20, 20])]; // Sep 30th 2009, 12:20:20 AM\n      }\n    }\n\n    // at this point, the autosizeMode is effectively 'Content', so proceed to get size\n    let colWidth = autoSize.contentSizePx = this.getColContentSize(columnDef, colIndex, gridCanvas, isInit, colArrayIndex);\n\n    if (colWidth === 0) {\n      colWidth = autoSize.widthPx || 0;\n    }\n\n    let addlPercentMultiplier = (autoSize.allowAddlPercent ? (1 + autoSize.allowAddlPercent / 100) : 1);\n    colWidth = colWidth * addlPercentMultiplier + this._options.autosizeColPaddingPx;\n    if (columnDef.minWidth && colWidth < columnDef.minWidth) { colWidth = columnDef.minWidth; }\n    if (columnDef.maxWidth && colWidth > columnDef.maxWidth) { colWidth = columnDef.maxWidth; }\n\n    if (autoSize.autosizeMode === ColAutosizeMode.ContentExpandOnly || ((columnDef?.editor as any)?.ControlFillsColumn)) {\n      // only use content width if it's wider than the default column width (this is used for dropdowns and other fixed width controls)\n      if (colWidth < (columnDef.width || 0)) {\n        colWidth = columnDef.width || 0;\n      }\n    }\n    autoSize.widthPx = colWidth;\n  }\n\n  protected getColContentSize(columnDef: Column, colIndex: number, gridCanvas: HTMLElement, isInit: boolean, colArrayIndex: number) {\n    let autoSize = columnDef.autoSize as AutoSize;\n    let widthAdjustRatio = 1;\n\n    // at this point, the autosizeMode is effectively 'Content', so proceed to get size\n\n    // get header width, if we are taking notice of it\n    let i: number;\n    let tempVal: any, maxLen = 0;\n    let maxColWidth = 0;\n    autoSize.headerWidthPx = 0;\n    if (!autoSize.ignoreHeaderText) {\n      autoSize.headerWidthPx = this.getColHeaderWidth(columnDef);\n    }\n    if (autoSize.headerWidthPx === 0) {\n      autoSize.headerWidthPx = (columnDef.width ? columnDef.width\n        : (columnDef.maxWidth ? columnDef.maxWidth\n          : (columnDef.minWidth ? columnDef.minWidth : 20)\n        )\n      );\n    }\n\n    if (autoSize.colValueArray) {\n      // if an array of values are specified, just pass them in instead of data\n      maxColWidth = this.getColWidth(columnDef, gridCanvas, autoSize.colValueArray);\n      return Math.max(autoSize.headerWidthPx, maxColWidth);\n    }\n\n    // select rows to evaluate using rowSelectionMode and rowSelectionCount\n    let rowInfo: any = {};\n    rowInfo.colIndex = colIndex;\n    rowInfo.rowCount = this.getDataLength();\n    rowInfo.startIndex = 0;\n    rowInfo.endIndex = rowInfo.rowCount - 1;\n    rowInfo.valueArr = null;\n    rowInfo.getRowVal = (i) => this.getDataItem(i)[columnDef.field];\n\n    let rowSelectionMode = (isInit ? autoSize.rowSelectionModeOnInit : undefined) || autoSize.rowSelectionMode;\n\n    if (rowSelectionMode === RowSelectionMode.FirstRow) { rowInfo.endIndex = 0; }\n    if (rowSelectionMode === RowSelectionMode.LastRow) { rowInfo.endIndex = rowInfo.startIndex = rowInfo.rowCount - 1; }\n    if (rowSelectionMode === RowSelectionMode.FirstNRows) { rowInfo.endIndex = Math.min(autoSize.rowSelectionCount || 0, rowInfo.rowCount) - 1; }\n\n    // now use valueFilterMode to further filter selected rows\n    if (autoSize.valueFilterMode === ValueFilterMode.DeDuplicate) {\n      let rowsDict = {};\n      for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\n        rowsDict[rowInfo.getRowVal(i)] = true;\n      }\n      if (Object.keys) {\n        rowInfo.valueArr = Object.keys(rowsDict);\n      } else {\n        rowInfo.valueArr = [];\n        for (let v in rowsDict) rowInfo.valueArr.push(v);\n      }\n      rowInfo.startIndex = 0;\n      rowInfo.endIndex = rowInfo.length - 1;\n    }\n\n    if (autoSize.valueFilterMode === ValueFilterMode.GetGreatestAndSub) {\n      // get greatest abs value in data\n      let maxVal, maxAbsVal = 0;\n      for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\n        tempVal = rowInfo.getRowVal(i);\n        if (Math.abs(tempVal) > maxAbsVal) { maxVal = tempVal; maxAbsVal = Math.abs(tempVal); }\n      }\n      // now substitute a '9' for all characters (to get widest width) and convert back to a number\n      maxVal = '' + maxVal;\n      maxVal = Array(maxVal.length + 1).join('9');\n      maxVal = +maxVal;\n\n      rowInfo.valueArr = [maxVal];\n      rowInfo.startIndex = rowInfo.endIndex = 0;\n    }\n\n    if (autoSize.valueFilterMode === ValueFilterMode.GetLongestTextAndSub) {\n      // get greatest abs value in data\n      for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\n        tempVal = rowInfo.getRowVal(i);\n        if ((tempVal || '').length > maxLen) { maxLen = tempVal.length; }\n      }\n      // now substitute a 'm' for all characters\n      tempVal = Array(maxLen + 1).join('m');\n      widthAdjustRatio = this._options.autosizeTextAvgToMWidthRatio;\n\n      rowInfo.maxLen = maxLen;\n      rowInfo.valueArr = [tempVal];\n      rowInfo.startIndex = rowInfo.endIndex = 0;\n    }\n\n    if (autoSize.valueFilterMode === ValueFilterMode.GetLongestText) {\n      // get greatest abs value in data\n      maxLen = 0; let maxIndex = 0;\n      for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\n        tempVal = rowInfo.getRowVal(i);\n        if ((tempVal || '').length > maxLen) { maxLen = tempVal.length; maxIndex = i; }\n      }\n      // now substitute a 'c' for all characters\n      tempVal = rowInfo.getRowVal(maxIndex);\n      rowInfo.maxLen = maxLen;\n      rowInfo.valueArr = [tempVal];\n      rowInfo.startIndex = rowInfo.endIndex = 0;\n    }\n\n    // !!! HACK !!!!\n    if (rowInfo.maxLen && rowInfo.maxLen > 30 && colArrayIndex > 1) { autoSize.sizeToRemaining = true; }\n    maxColWidth = this.getColWidth(columnDef, gridCanvas, rowInfo) * widthAdjustRatio;\n    return Math.max(autoSize.headerWidthPx, maxColWidth);\n  }\n\n  protected getColWidth(columnDef: Column, gridCanvas: HTMLElement, rowInfo: any) {\n    const rowEl = Utils.createDomElement('div', { className: 'slick-row ui-widget-content' }, gridCanvas);\n    const cellEl = Utils.createDomElement('div', { className: 'slick-cell' }, rowEl);\n\n    cellEl.style['position'] = 'absolute';\n    cellEl.style['visibility'] = 'hidden';\n    cellEl.style['text-overflow'] = 'initial';\n    cellEl.style['white-space'] = 'nowrap';\n\n    let i: number, len: number, max = 0, maxText = '', formatterResult: string | FormatterResultObject, val: any;\n\n    // get mode - if text only display, use canvas otherwise html element\n    let useCanvas = (columnDef.autoSize!.widthEvalMode === WidthEvalMode.TextOnly);\n\n    if (columnDef.autoSize?.widthEvalMode === WidthEvalMode.Auto) {\n      let noFormatter = !columnDef.formatterOverride && !columnDef.formatter;\n      let formatterIsText = ((columnDef?.formatterOverride as { ReturnsTextOnly: boolean })?.ReturnsTextOnly)\n        || (!columnDef.formatterOverride && (columnDef.formatter as any)?.ReturnsTextOnly);\n      useCanvas = noFormatter || formatterIsText;\n    }\n\n    // use canvas - very fast, but text-only\n    if (this.canvas_context && useCanvas) {\n      const style = getComputedStyle(cellEl);\n      this.canvas_context.font = style['font-size'] + ' ' + style['font-family'];\n      for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\n        // row is either an array or values or a single value\n        val = (rowInfo.valueArr ? rowInfo.valueArr[i] : rowInfo.getRowVal(i));\n        if (columnDef.formatterOverride) {\n          // use formatterOverride as first preference\n          formatterResult = (columnDef.formatterOverride as FormatterOverrideCallback)(i, rowInfo.colIndex, val, columnDef, this.getDataItem(i), this);\n        } else if (columnDef.formatter) {\n          // otherwise, use formatter\n          formatterResult = columnDef.formatter(i, rowInfo.colIndex, val, columnDef, this.getDataItem(i), this);\n        } else {\n          // otherwise, use plain text\n          formatterResult = '' + val;\n        }\n        len = formatterResult ? this.canvas_context.measureText(formatterResult as string).width : 0;\n        if (len > max) {\n          max = len;\n          maxText = formatterResult as string;\n        }\n      }\n\n      cellEl.innerHTML = maxText;\n      len = cellEl.offsetWidth;\n\n      rowEl.remove();\n      return len;\n    }\n\n    for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\n      val = (rowInfo.valueArr ? rowInfo.valueArr[i] : rowInfo.getRowVal(i));\n      if (columnDef.formatterOverride) {\n        // use formatterOverride as first preference\n        formatterResult = (columnDef.formatterOverride as FormatterOverrideCallback)(i, rowInfo.colIndex, val, columnDef, this.getDataItem(i), this);\n      } else if (columnDef.formatter) {\n        // otherwise, use formatter\n        formatterResult = columnDef.formatter(i, rowInfo.colIndex, val, columnDef, this.getDataItem(i), this);\n      } else {\n        // otherwise, use plain text\n        formatterResult = '' + val;\n      }\n      this.applyFormatResultToCellNode(formatterResult, cellEl);\n      len = cellEl.offsetWidth;\n      if (len > max) { max = len; }\n    }\n\n    rowEl.remove();\n    return max;\n  }\n\n  protected getColHeaderWidth(columnDef: Column) {\n    let width = 0;\n    //if (columnDef && (!columnDef.resizable || columnDef._autoCalcWidth === true)) return;\n    let headerColElId = this.getUID() + columnDef.id;\n    let headerColEl = document.getElementById(headerColElId) as HTMLElement;\n    let dummyHeaderColElId = `${headerColElId}_`;\n    let clone = headerColEl.cloneNode(true) as HTMLElement;\n    if (headerColEl) {\n      // headers have been created, use clone technique\n      clone.id = dummyHeaderColElId;\n      clone.style.cssText = 'position: absolute; visibility: hidden;right: auto;text-overflow: initial;white-space: nowrap;';\n      headerColEl.parentNode!.insertBefore(clone, headerColEl);\n      width = clone.offsetWidth;\n      clone.parentNode!.removeChild(clone);\n    } else {\n      // headers have not yet been created, create a new node\n      let header = this.getHeader(columnDef) as HTMLElement;\n      headerColEl = Utils.createDomElement('div', { id: dummyHeaderColElId, className: 'ui-state-default slick-state-default slick-header-column' }, header);\n      Utils.createDomElement('span', { className: 'slick-column-name', innerHTML: this.sanitizeHtmlString(String(columnDef.name)) }, headerColEl);\n      clone.style.cssText = 'position: absolute; visibility: hidden;right: auto;text-overflow: initial;white-space: nowrap;';\n      if (columnDef.headerCssClass) {\n        headerColEl.classList.add(...(columnDef.headerCssClass || '').split(' '));\n      }\n      width = headerColEl.offsetWidth;\n      header.removeChild(headerColEl);\n    }\n    return width;\n  }\n\n  protected legacyAutosizeColumns() {\n    let i, c: Column | undefined,\n      widths: number[] = [],\n      shrinkLeeway = 0,\n      total = 0,\n      prevTotal = 0,\n      availWidth = this.viewportHasVScroll ? this.viewportW - (this.scrollbarDimensions?.width ?? 0) : this.viewportW;\n\n    for (i = 0; i < this.columns.length; i++) {\n      c = this.columns[i];\n      if (!c || c.hidden) continue;\n      widths.push(c.width || 0);\n      total += c.width || 0;\n      if (c.resizable) {\n        shrinkLeeway += (c.width || 0) - Math.max((c.minWidth || 0), this.absoluteColumnMinWidth);\n      }\n    }\n\n    // shrink\n    prevTotal = total;\n    while (total > availWidth && shrinkLeeway) {\n      let shrinkProportion = (total - availWidth) / shrinkLeeway;\n      for (i = 0; i < this.columns.length && total > availWidth; i++) {\n        c = this.columns[i];\n        if (!c || c.hidden) continue;\n        let width = widths[i];\n        if (!c.resizable || width <= c.minWidth! || width <= this.absoluteColumnMinWidth) {\n          continue;\n        }\n        let absMinWidth = Math.max(c.minWidth!, this.absoluteColumnMinWidth);\n        let shrinkSize = Math.floor(shrinkProportion * (width - absMinWidth)) || 1;\n        shrinkSize = Math.min(shrinkSize, width - absMinWidth);\n        total -= shrinkSize;\n        shrinkLeeway -= shrinkSize;\n        widths[i] -= shrinkSize;\n      }\n      if (prevTotal <= total) {  // avoid infinite loop\n        break;\n      }\n      prevTotal = total;\n    }\n\n    // grow\n    prevTotal = total;\n    while (total < availWidth) {\n      let growProportion = availWidth / total;\n      for (i = 0; i < this.columns.length && total < availWidth; i++) {\n        c = this.columns[i];\n        if (!c || c.hidden) continue;\n        let currentWidth = widths[i];\n        let growSize;\n\n        if (!c.resizable || c.maxWidth! <= currentWidth) {\n          growSize = 0;\n        } else {\n          growSize = Math.min(Math.floor(growProportion * currentWidth) - currentWidth, (c.maxWidth! - currentWidth) || 1000000) || 1;\n        }\n        total += growSize;\n        widths[i] += (total <= availWidth ? growSize : 0);\n      }\n      if (prevTotal >= total) {  // avoid infinite loop\n        break;\n      }\n      prevTotal = total;\n    }\n\n    let reRender = false;\n    for (i = 0; i < this.columns.length; i++) {\n      if (!c || c.hidden) continue;\n\n      if (this.columns[i].rerenderOnResize && this.columns[i].width !== widths[i]) {\n        reRender = true;\n      }\n      this.columns[i].width = widths[i];\n    }\n\n    this.reRenderColumns(reRender);\n  }\n\n  /**\n   * Apply Columns Widths in the UI and optionally invalidate & re-render the columns when specified\n   * @param {Boolean} shouldReRender - should we invalidate and re-render the grid?\n   */\n  reRenderColumns(reRender?: boolean) {\n    this.applyColumnHeaderWidths();\n    this.updateCanvasWidth(true);\n\n    this.trigger(this.onAutosizeColumns, { columns: this.columns });\n\n    if (reRender) {\n      this.invalidateAllRows();\n      this.render();\n    }\n  }\n\n  getVisibleColumns() {\n    return this.columns.filter(c => !c.hidden);\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // General\n  //////////////////////////////////////////////////////////////////////////////////////////////\n\n  protected trigger<ArgType = any>(evt: SlickEvent_, args?: ArgType, e?: Event | SlickEventData_) {\n    let event: SlickEventData_ = (e || new SlickEventData(e, args)) as SlickEventData_;\n    const eventArgs = (args || {}) as ArgType & { grid: SlickGrid; };\n    eventArgs.grid = this;\n    return evt.notify(eventArgs, event, this);\n  }\n\n  /** Get Editor lock */\n  getEditorLock() {\n    return this._options.editorLock;\n  }\n\n  /** Get Editor Controller */\n  getEditController() {\n    return this.editController;\n  }\n\n  /**\n   * Returns the index of a column with a given id. Since columns can be reordered by the user, this can be used to get the column definition independent of the order:\n   * @param id A column id.\n   */\n  getColumnIndex(id: number | string): number {\n    return this.columnsById[id];\n  }\n\n  protected applyColumnHeaderWidths() {\n    if (!this.initialized) {\n      return;\n    }\n\n    let columnIndex = 0;\n    let vc = this.getVisibleColumns();\n    this._headers.forEach((header) => {\n      for (let i = 0; i < header.children.length; i++, columnIndex++) {\n        const h = header.children[i] as HTMLElement;\n        const col = vc[columnIndex] || {};\n        const width = (col.width || 0) - this.headerColumnWidthDiff;\n        if (Utils.width(h) !== width) {\n          Utils.width(h, width);\n        }\n      }\n    });\n\n    this.updateColumnCaches();\n  }\n\n  protected applyColumnWidths() {\n    let x = 0, w = 0, rule: any;\n    for (let i = 0; i < this.columns.length; i++) {\n      if (!(this.columns[i] && this.columns[i].hidden)) {\n        w = this.columns[i].width || 0;\n\n        rule = this.getColumnCssRules(i);\n        rule.left.style.left = `${x}px`;\n        rule.right.style.right = (((this._options.frozenColumn !== -1 && i > this._options.frozenColumn) ? this.canvasWidthR : this.canvasWidthL) - x - w) + 'px';\n\n        // If this column is frozen, reset the css left value since the\n        // column starts in a new viewport.\n        if (this._options.frozenColumn !== i) {\n          x += this.columns[i].width!;\n        }\n      }\n      if (this._options.frozenColumn == i) {\n        x = 0;\n      }\n    }\n  }\n\n  /**\n   * Accepts a columnId string and an ascending boolean. Applies a sort glyph in either ascending or descending form to the header of the column. Note that this does not actually sort the column. It only adds the sort glyph to the header.\n   * @param columnId\n   * @param ascending\n   */\n  setSortColumn(columnId: number | string, ascending: boolean) {\n    this.setSortColumns([{ columnId, sortAsc: ascending }]);\n  }\n\n  /**\n   * Get column by index\n   * @param {Number} id - column index\n   * @returns\n   */\n  getColumnByIndex(id: number) {\n    let result: HTMLElement | undefined;\n    this._headers.every((header) => {\n      const length = header.children.length;\n      if (id < length) {\n        result = header.children[id] as HTMLElement;\n        return false;\n      }\n      id -= length;\n      return true;\n    });\n\n    return result;\n  }\n\n  /**\n   * Accepts an array of objects in the form [ { columnId: [string], sortAsc: [boolean] }, ... ]. When called, this will apply a sort glyph in either ascending or descending form to the header of each column specified in the array. Note that this does not actually sort the column. It only adds the sort glyph to the header\n   * @param {ColumnSort[]} cols - column sort\n   */\n  setSortColumns(cols: ColumnSort[]) {\n    this.sortColumns = cols;\n\n    const numberCols = this._options.numberedMultiColumnSort && this.sortColumns.length > 1;\n    this._headers.forEach((header) => {\n      let indicators = header.querySelectorAll('.slick-header-column-sorted');\n      indicators.forEach((indicator) => {\n        indicator.classList.remove('slick-header-column-sorted');\n      });\n\n      indicators = header.querySelectorAll('.slick-sort-indicator');\n      indicators.forEach((indicator) => {\n        indicator.classList.remove('slick-sort-indicator-asc');\n        indicator.classList.remove('slick-sort-indicator-desc');\n      });\n      indicators = header.querySelectorAll('.slick-sort-indicator-numbered');\n      indicators.forEach((el) => {\n        el.textContent = '';\n      });\n    });\n\n    let i = 1;\n    this.sortColumns.forEach((col) => {\n      if (col.sortAsc == null) {\n        col.sortAsc = true;\n      }\n\n      const columnIndex = this.getColumnIndex(col.columnId);\n      if (columnIndex != null) {\n        const column = this.getColumnByIndex(columnIndex);\n        if (column) {\n          column.classList.add('slick-header-column-sorted');\n          let indicator = column.querySelector('.slick-sort-indicator') as HTMLElement;\n          indicator.classList.add(col.sortAsc ? 'slick-sort-indicator-asc' : 'slick-sort-indicator-desc');\n\n          if (numberCols) {\n            indicator = column.querySelector('.slick-sort-indicator-numbered') as HTMLElement;\n            indicator.textContent = String(i);\n          }\n        }\n      }\n      i++;\n    });\n  }\n\n  /** Get sorted columns **/\n  getSortColumns(): ColumnSort[] {\n    return this.sortColumns;\n  }\n\n  protected handleSelectedRangesChanged(e: SlickEventData_, ranges: SlickRange_[]) {\n    const ne = e.getNativeEvent();\n    let previousSelectedRows = this.selectedRows.slice(0); // shallow copy previously selected rows for later comparison\n    this.selectedRows = [];\n    let hash: CssStyleHash = {};\n    for (let i = 0; i < ranges.length; i++) {\n      for (let j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {\n        if (!hash[j]) {  // prevent duplicates\n          this.selectedRows.push(j);\n          hash[j] = {};\n        }\n        for (let k = ranges[i].fromCell; k <= ranges[i].toCell; k++) {\n          if (this.canCellBeSelected(j, k)) {\n            hash[j][this.columns[k].id] = this._options.selectedCellCssClass;\n          }\n        }\n      }\n    }\n\n    this.setCellCssStyles(this._options.selectedCellCssClass || '', hash);\n\n    if (this.simpleArrayEquals(previousSelectedRows, this.selectedRows)) {\n      let caller = ne?.detail?.caller ?? 'click';\n      let newSelectedAdditions = this.getSelectedRows().filter((i) => previousSelectedRows.indexOf(i) < 0);\n      let newSelectedDeletions = previousSelectedRows.filter((i) => this.getSelectedRows().indexOf(i) < 0);\n\n      this.trigger(this.onSelectedRowsChanged, {\n        rows: this.getSelectedRows(),\n        previousSelectedRows,\n        caller,\n        changedSelectedRows: newSelectedAdditions,\n        changedUnselectedRows: newSelectedDeletions\n      }, e);\n    }\n  }\n\n  // compare 2 simple arrays (integers or strings only, do not use to compare object arrays)\n  simpleArrayEquals(arr1, arr2) {\n    return Array.isArray(arr1) && Array.isArray(arr2) && arr2.sort().toString() !== arr1.sort().toString();\n  }\n\n  /** Returns an array of column definitions. */\n  getColumns() {\n    return this.columns;\n  }\n\n  protected updateColumnCaches() {\n    // Pre-calculate cell boundaries.\n    this.columnPosLeft = [];\n    this.columnPosRight = [];\n    let x = 0;\n    for (let i = 0, ii = this.columns.length; i < ii; i++) {\n      if (!this.columns[i] || this.columns[i].hidden) continue;\n\n      this.columnPosLeft[i] = x;\n      this.columnPosRight[i] = x + (this.columns[i].width || 0);\n\n      if (this._options.frozenColumn === i) {\n        x = 0;\n      } else {\n        x += this.columns[i].width || 0;\n      }\n    }\n  }\n\n  protected updateColumnProps() {\n    this.columnsById = {};\n    for (let i = 0; i < this.columns.length; i++) {\n      if (this.columns[i].width) {\n        this.columns[i].widthRequest = this.columns[i].width;\n      }\n\n      let m: Column = this.columns[i] = Utils.extend({}, this._columnDefaults, this.columns[i]);\n      m.autoSize = Utils.extend({}, this._columnAutosizeDefaults, m.autoSize);\n\n      this.columnsById[m.id] = i;\n      if (m.minWidth && ((m.width || 0) < m.minWidth)) {\n        m.width = m.minWidth;\n      }\n      if (m.maxWidth && ((m.width || 0) > m.maxWidth)) {\n        m.width = m.maxWidth;\n      }\n    }\n  }\n\n  /**\n   * Sets grid columns. Column headers will be recreated and all rendered rows will be removed. To rerender the grid (if necessary), call render().\n   * @param columnDefinitions An array of column definitions.\n   */\n  setColumns(columnDefinitions: Column[]) {\n    this.trigger(this.onBeforeSetColumns, { previousColumns: this.columns, newColumns: columnDefinitions, grid: this });\n    this.columns = columnDefinitions;\n    this.updateColumnsInternal();\n  }\n\n  protected updateColumns() {\n    this.trigger(this.onBeforeUpdateColumns, { columns: this.columns, grid: this });\n    this.updateColumnsInternal();\n  }\n\n  protected updateColumnsInternal() {\n    this.updateColumnProps();\n    this.updateColumnCaches();\n\n    if (this.initialized) {\n      this.setPaneVisibility();\n      this.setOverflow();\n\n      this.invalidateAllRows();\n      this.createColumnHeaders();\n      this.createColumnFooter();\n      this.removeCssRules();\n      this.createCssRules();\n      this.resizeCanvas();\n      this.updateCanvasWidth();\n      this.applyColumnHeaderWidths();\n      this.applyColumnWidths();\n      this.handleScroll();\n      if (this.getSelectionModel() && this.getSelectionModel().refreshSelections) {\n        this.getSelectionModel().refreshSelections();\n      }\n    }\n  }\n\n  /** Returns an object containing all of the Grid options set on the grid. See a list of Grid Options here.  */\n  getOptions() {\n    return this._options;\n  }\n\n  /**\n   * Extends grid options with a given hash. If an there is an active edit, the grid will attempt to commit the changes and only continue if the attempt succeeds.\n   * @param {Object} options - an object with configuration options.\n   * @param {Boolean} [suppressRender] - do we want to supress the grid re-rendering? (defaults to false)\n   * @param {Boolean} [suppressColumnSet] - do we want to supress the columns set, via \"setColumns()\" method? (defaults to false)\n   * @param {Boolean} [suppressSetOverflow] - do we want to suppress the call to `setOverflow`\n   */\n  setOptions(args: Partial<GridOption>, suppressRender?: boolean, suppressColumnSet?: boolean, suppressSetOverflow?: boolean): void {\n    if (!this.getEditorLock().commitCurrentEdit()) {\n      return;\n    }\n\n    this.makeActiveCellNormal();\n\n    if (args.showColumnHeader !== undefined) {\n      this.setColumnHeaderVisibility(args.showColumnHeader);\n    }\n\n    if (this._options.enableAddRow !== args.enableAddRow) {\n      this.invalidateRow(this.getDataLength());\n    }\n\n    let originalOptions = Utils.extend(true, {}, this._options);\n    this._options = Utils.extend(this._options, args);\n    this.trigger(this.onSetOptions, { optionsBefore: originalOptions, optionsAfter: this._options });\n\n    this.validateAndEnforceOptions();\n    this.setFrozenOptions();\n\n    // when user changed frozen row option, we need to force a recalculation of each viewport heights\n    if (args.frozenBottom !== undefined) {\n      this.enforceFrozenRowHeightRecalc = true;\n    }\n\n    this._viewport.forEach((view) => {\n      view.style['overflow-y'] = this._options.autoHeight ? 'hidden' : 'auto';\n    });\n    if (!suppressRender) {\n      this.render();\n    }\n\n    this.setScroller();\n    if (!suppressSetOverflow) {\n      this.setOverflow();\n    }\n\n    if (!suppressColumnSet) {\n      this.setColumns(this.columns);\n    }\n\n    if (this._options.enableMouseWheelScrollHandler && this._viewport && (!this.slickMouseWheelInstances || this.slickMouseWheelInstances.length === 0)) {\n      this._viewport.forEach((view) => {\n        this.slickMouseWheelInstances.push(MouseWheel({\n          element: view,\n          onMouseWheel: this.handleMouseWheel.bind(this)\n        }));\n      });\n    } else if (this._options.enableMouseWheelScrollHandler === false) {\n      this.destroyAllInstances(this.slickMouseWheelInstances); // remove scroll handler when option is disable\n    }\n  }\n\n  validateAndEnforceOptions() {\n    if (this._options.autoHeight) {\n      this._options.leaveSpaceForNewRows = false;\n    }\n    if (this._options.forceFitColumns) {\n      this._options.autosizeColsMode = GridAutosizeColsMode.LegacyForceFit;\n      console.log('forceFitColumns option is deprecated - use autosizeColsMode');\n    }\n  }\n\n  /**\n   * Sets a new source for databinding and removes all rendered rows. Note that this doesn't render the new rows - you can follow it with a call to render() to do that.\n   * @param {CustomDataView|Array<*>} newData New databinding source using a regular JavaScript array.. or a custom object exposing getItem(index) and getLength() functions.\n   * @param {Number} [scrollToTop] If true, the grid will reset the vertical scroll position to the top of the grid.\n   */\n  setData(newData: CustomDataView | any[], scrollToTop?: number) {\n    this.data = newData;\n    this.invalidateAllRows();\n    this.updateRowCount();\n    if (scrollToTop) {\n      this.scrollTo(0);\n    }\n  }\n\n  /** Returns an array of every data object, unless you're using DataView in which case it returns a DataView object. */\n  getData<T extends CustomDataView | any[] = any>(): T {\n    return this.data as T;\n  }\n\n  /** Returns the size of the databinding source. */\n  getDataLength() {\n    if ((this.data as CustomDataView).getLength) {\n      return (this.data as CustomDataView).getLength();\n    } else {\n      return (this.data as any[])?.length ?? 0;\n    }\n  }\n\n  protected getDataLengthIncludingAddNew() {\n    return this.getDataLength() + (!this._options.enableAddRow ? 0\n      : (!this.pagingActive || this.pagingIsLastPage ? 1 : 0)\n    );\n  }\n\n  /**\n   * Returns the databinding item at a given position.\n   * @param index Item row index.\n   */\n  getDataItem(i: number) {\n    if ((this.data as CustomDataView).getItem) {\n      return (this.data as CustomDataView).getItem(i);\n    } else {\n      return (this.data as CustomDataView)[i];\n    }\n  }\n\n  /** Get Top Panel DOM element */\n  getTopPanel() {\n    return this._topPanels[0];\n  }\n\n  /** Get Top Panels (left/right) DOM element */\n  getTopPanels() {\n    return this._topPanels;\n  }\n\n  protected togglePanelVisibility(option: 'showTopPanel' | 'showHeaderRow' | 'showColumnHeader' | 'showFooterRow' | 'showPreHeaderPanel', container: HTMLElement | HTMLElement[], visible?: boolean, animate?: boolean) {\n    let animated = (animate === false) ? false : true;\n\n    if (this._options[option] !== visible) {\n      this._options[option] = visible;\n      if (visible) {\n        if (animated) {\n          Utils.slideDown(container, this.resizeCanvas.bind(this));\n          return;\n        }\n        Utils.show(container);\n        this.resizeCanvas();\n      } else {\n        if (animated) {\n          Utils.slideUp(container, this.resizeCanvas.bind(this));\n          return;\n        }\n        Utils.hide(container);\n        this.resizeCanvas();\n      }\n    }\n  }\n\n  /**\n   * Set the Top Panel Visibility and optionally enable/disable animation (enabled by default)\n   * @param {Boolean} [visible] - optionally set if top panel is visible or not\n   * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\n   */\n  setTopPanelVisibility(visible?: boolean, animate?: boolean) {\n    this.togglePanelVisibility('showTopPanel', this._topPanelScrollers, visible, animate);\n  }\n\n  /**\n   * Set the Header Row Visibility and optionally enable/disable animation (enabled by default)\n   * @param {Boolean} [visible] - optionally set if header row panel is visible or not\n   * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\n   */\n  setHeaderRowVisibility(visible?: boolean, animate?: boolean) {\n    this.togglePanelVisibility('showHeaderRow', this._headerRowScroller, visible, animate);\n  }\n\n  /**\n   * Set the Column Header Visibility and optionally enable/disable animation (enabled by default)\n   * @param {Boolean} [visible] - optionally set if column header is visible or not\n   * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\n   */\n  setColumnHeaderVisibility(visible?: boolean, animate?: boolean) {\n    this.togglePanelVisibility('showColumnHeader', this._headerScroller, visible, animate);\n  }\n\n  /**\n   * Set the Footer Visibility and optionally enable/disable animation (enabled by default)\n   * @param {Boolean} [visible] - optionally set if footer row panel is visible or not\n   * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\n   */\n  setFooterRowVisibility(visible?: boolean, animate?: boolean) {\n    this.togglePanelVisibility('showFooterRow', this._footerRowScroller, visible, animate);\n  }\n\n  /**\n   * Set the Pre-Header Visibility and optionally enable/disable animation (enabled by default)\n   * @param {Boolean} [visible] - optionally set if pre-header panel is visible or not\n   * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\n   */\n  setPreHeaderPanelVisibility(visible?: boolean, animate?: boolean) {\n    this.togglePanelVisibility('showPreHeaderPanel', [this._preHeaderPanelScroller, this._preHeaderPanelScrollerR], visible, animate);\n  }\n\n  /** Get Grid Canvas Node DOM Element */\n  getContainerNode() {\n    return this._container;\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // Rendering / Scrolling\n\n  protected getRowTop(row: number) {\n    return this._options.rowHeight * row - this.offset;\n  }\n\n  protected getRowFromPosition(y: number) {\n    return Math.floor((y + this.offset) / this._options.rowHeight);\n  }\n\n  /** Scroll to an Y position in the grid */\n  scrollTo(y: number) {\n    y = Math.max(y, 0);\n    y = Math.min(y, (this.th || 0) - (Utils.height(this._viewportScrollContainerY) as number) + ((this.viewportHasHScroll || this.hasFrozenColumns()) ? (this.scrollbarDimensions?.height ?? 0) : 0));\n\n    let oldOffset = this.offset;\n    this.offset = Math.round(this.page * (this.cj || 0));\n    this.page = Math.min((this.n || 0) - 1, Math.floor(y / (this.ph || 0)));\n    let newScrollTop = (y - this.offset) as number;\n\n    if (this.offset !== oldOffset) {\n      let range = this.getVisibleRange(newScrollTop);\n      this.cleanupRows(range);\n      this.updateRowPositions();\n    }\n\n    if (this.prevScrollTop !== newScrollTop) {\n      this.vScrollDir = (this.prevScrollTop + oldOffset < newScrollTop + this.offset) ? 1 : -1;\n      this.lastRenderedScrollTop = (this.scrollTop = this.prevScrollTop = newScrollTop);\n\n      if (this.hasFrozenColumns()) {\n        this._viewportTopL.scrollTop = newScrollTop;\n      }\n\n      if (this.hasFrozenRows) {\n        this._viewportBottomL.scrollTop = this._viewportBottomR.scrollTop = newScrollTop;\n      }\n\n      if (this._viewportScrollContainerY) {\n        this._viewportScrollContainerY.scrollTop = newScrollTop;\n      }\n\n      this.trigger(this.onViewportChanged, {});\n    }\n  }\n\n  protected defaultFormatter(_row: number, _cell: number, value: any) {\n    if (value == null) {\n      return '';\n    } else {\n      return (value + '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n    }\n  }\n\n  protected getFormatter(row: number, column: Column): Formatter {\n    let rowMetadata = (this.data as CustomDataView)?.getItemMetadata?.(row);\n\n    // look up by id, then index\n    let columnOverrides = rowMetadata?.columns &&\n      (rowMetadata.columns[column.id] || rowMetadata.columns[this.getColumnIndex(column.id)]);\n\n    return ((columnOverrides?.formatter) ||\n      (rowMetadata?.formatter) ||\n      column.formatter ||\n      (this._options.formatterFactory?.getFormatter(column)) ||\n      this._options.defaultFormatter) as Formatter;\n  }\n\n  protected getEditor(row: number, cell: number): Editor | undefined {\n    let column = this.columns[cell];\n    let rowMetadata = (this.data as CustomDataView)?.getItemMetadata?.(row);\n    let columnMetadata = rowMetadata?.columns;\n\n    if (columnMetadata?.[column.id]?.editor !== undefined) {\n      return columnMetadata[column.id].editor as Editor;\n    }\n    if (columnMetadata?.[cell]?.editor !== undefined) {\n      return columnMetadata[cell].editor as Editor;\n    }\n\n    return column.editor || (this._options?.editorFactory?.getEditor(column));\n  }\n\n  protected getDataItemValueForColumn(item: any, columnDef: Column) {\n    if (this._options.dataItemColumnValueExtractor) {\n      return this._options.dataItemColumnValueExtractor(item, columnDef);\n    }\n    return item[columnDef.field];\n  }\n\n  protected appendRowHtml(stringArrayL: string[], stringArrayR: string[], row: number, range: CellViewportRange, dataLength: number) {\n    let d = this.getDataItem(row);\n    let dataLoading = row < dataLength && !d;\n    let rowCss = 'slick-row' +\n      (this.hasFrozenRows && row <= this._options.frozenRow ? ' frozen' : '') +\n      (dataLoading ? ' loading' : '') +\n      (row === this.activeRow && this._options.showCellSelection ? ' active' : '') +\n      (row % 2 == 1 ? ' odd' : ' even');\n\n    if (!d) {\n      rowCss += ' ' + this._options.addNewRowCssClass;\n    }\n\n    let metadata = (this.data as CustomDataView)?.getItemMetadata?.(row);\n\n    if (metadata && metadata.cssClasses) {\n      rowCss += ' ' + metadata.cssClasses;\n    }\n\n    let frozenRowOffset = this.getFrozenRowOffset(row);\n\n    let rowHtml = `<div class=\"ui-widget-content ${rowCss}\" style=\"top:${(this.getRowTop(row) - frozenRowOffset)}px\">`;\n\n    stringArrayL.push(rowHtml);\n\n    if (this.hasFrozenColumns()) {\n      stringArrayR.push(rowHtml);\n    }\n\n    let colspan: number | string, m: Column;\n    for (let i = 0, ii = this.columns.length; i < ii; i++) {\n      m = this.columns[i];\n      if (!m || m.hidden) continue;\n\n      colspan = 1;\n      if (metadata && metadata.columns) {\n        let columnData = metadata.columns[m.id] || metadata.columns[i];\n        colspan = columnData?.colspan || 1;\n        if (colspan === '*') {\n          colspan = ii - i;\n        }\n      }\n\n      // Do not render cells outside of the viewport.\n      if (this.columnPosRight[Math.min(ii - 1, i + (colspan as number) - 1)] > range.leftPx) {\n        if (!m.alwaysRenderColumn && this.columnPosLeft[i] > range.rightPx) {\n          // All columns to the right are outside the range.\n          break;\n        }\n\n        if (this.hasFrozenColumns() && (i > this._options.frozenColumn)) {\n          this.appendCellHtml(stringArrayR, row, i, (colspan as number), d);\n        } else {\n          this.appendCellHtml(stringArrayL, row, i, (colspan as number), d);\n        }\n      } else if (m.alwaysRenderColumn || (this.hasFrozenColumns() && i <= this._options.frozenColumn)) {\n        this.appendCellHtml(stringArrayL, row, i, (colspan as number), d);\n      }\n\n      if ((colspan as number) > 1) {\n        i += ((colspan as number) - 1);\n      }\n    }\n\n    stringArrayL.push('</div>');\n\n    if (this.hasFrozenColumns()) {\n      stringArrayR.push('</div>');\n    }\n  }\n\n  protected appendCellHtml(stringArray: string[], row: number, cell: number, colspan: number, item: any) {\n    // stringArray: stringBuilder containing the HTML parts\n    // row, cell: row and column index\n    // colspan: HTML colspan\n    // item: grid data for row\n\n    let m = this.columns[cell];\n    let cellCss = 'slick-cell l' + cell + ' r' + Math.min(this.columns.length - 1, cell + colspan - 1) + (m.cssClass ? ' ' + m.cssClass : '');\n\n    if (this.hasFrozenColumns() && cell <= this._options.frozenColumn) {\n      cellCss += (' frozen');\n    }\n\n    if (row === this.activeRow && cell === this.activeCell && this._options.showCellSelection) {\n      cellCss += (' active');\n    }\n\n    // TODO:  merge them together in the setter\n    for (let key in this.cellCssClasses) {\n      if (this.cellCssClasses[key][row] && this.cellCssClasses[key][row][m.id]) {\n        cellCss += (' ' + this.cellCssClasses[key][row][m.id]);\n      }\n    }\n\n    let value = null, formatterResult: FormatterResultObject | string = '';\n    if (item) {\n      value = this.getDataItemValueForColumn(item, m);\n      formatterResult = this.getFormatter(row, m)(row, cell, value, m, item, this);\n      if (formatterResult === null || formatterResult === undefined) {\n        formatterResult = '';\n      }\n    }\n\n    // get addl css class names from object type formatter return and from string type return of onBeforeAppendCell\n    // we will only use the event result as CSS classes when it is a string type (undefined event always return a true boolean which is not a valid css class)\n    const evt = this.trigger(this.onBeforeAppendCell, { row, cell, value, dataContext: item });\n    let appendCellResult = evt.getReturnValue();\n    var addlCssClasses = typeof appendCellResult === 'string' ? appendCellResult : '';\n    if ((formatterResult as FormatterResultObject)?.addClasses) {\n      addlCssClasses += (addlCssClasses ? ' ' : '') + (formatterResult as FormatterResultObject).addClasses;\n    }\n    let toolTip = (formatterResult as FormatterResultObject)?.toolTip ? \"title='\" + (formatterResult as FormatterResultObject).toolTip + \"'\" : '';\n\n    let customAttrStr = '';\n    if (m.hasOwnProperty('cellAttrs') && m.cellAttrs instanceof Object) {\n      for (let key in m.cellAttrs) {\n        if (m.cellAttrs.hasOwnProperty(key)) {\n          customAttrStr += ` ${key}=\"${m.cellAttrs[key]}\" `;\n        }\n      }\n    }\n\n    stringArray.push(`<div class=\"${cellCss + (addlCssClasses ? ' ' + addlCssClasses : '')}\" ${toolTip + customAttrStr}>`);\n\n    // if there is a corresponding row (if not, this is the Add New row or this data hasn't been loaded yet)\n    if (item) {\n      stringArray.push((Object.prototype.toString.call(formatterResult) !== '[object Object]' ? formatterResult : (formatterResult as FormatterResultObject).text) as string);\n    }\n\n    stringArray.push('</div>');\n\n    this.rowsCache[row].cellRenderQueue.push(cell);\n    this.rowsCache[row].cellColSpans[cell] = colspan;\n  }\n\n  protected cleanupRows(rangeToKeep: { bottom: number; top: number; }) {\n    for (let rowId in this.rowsCache) {\n      let i = +rowId;\n      let removeFrozenRow = true;\n\n      if (this.hasFrozenRows\n        && ((this._options.frozenBottom && (i as unknown as number) >= this.actualFrozenRow) // Frozen bottom rows\n          || (!this._options.frozenBottom && (i as unknown as number) <= this.actualFrozenRow) // Frozen top rows\n        )\n      ) {\n        removeFrozenRow = false;\n      }\n\n      if (((i = parseInt(rowId, 10)) !== this.activeRow)\n        && (i < rangeToKeep.top || i > rangeToKeep.bottom)\n        && (removeFrozenRow)\n      ) {\n        this.removeRowFromCache(i);\n      }\n    }\n    if (this._options.enableAsyncPostRenderCleanup) { this.startPostProcessingCleanup(); }\n  }\n\n  /** Invalidate all grid rows and re-render the grid rows */\n  invalidate() {\n    this.updateRowCount();\n    this.invalidateAllRows();\n    this.render();\n  }\n\n  /** Invalidate all grid rows */\n  invalidateAllRows() {\n    if (this.currentEditor) {\n      this.makeActiveCellNormal();\n    }\n    for (let row in this.rowsCache) {\n      this.removeRowFromCache(row);\n    }\n    if (this._options.enableAsyncPostRenderCleanup) { this.startPostProcessingCleanup(); }\n  }\n\n  /** Invalidate a specific set of row numbers */\n  invalidateRows(rows: number[]) {\n    let i, rl;\n    if (!rows || !rows.length) {\n      return;\n    }\n    this.vScrollDir = 0;\n    rl = rows.length;\n    for (i = 0; i < rl; i++) {\n      if (this.currentEditor && this.activeRow === rows[i]) {\n        this.makeActiveCellNormal();\n      }\n      if (this.rowsCache[rows[i]]) {\n        this.removeRowFromCache(rows[i]);\n      }\n    }\n    if (this._options.enableAsyncPostRenderCleanup) { this.startPostProcessingCleanup(); }\n  }\n\n  /** Invalidate a specific row number */\n  invalidateRow(row?: number) {\n    if (!row && row !== 0) { return; }\n    this.invalidateRows([row]);\n  }\n\n  protected queuePostProcessedRowForCleanup(cacheEntry: any, postProcessedRow: any, rowIdx: number) {\n    this.postProcessgroupId++;\n\n    // store and detach node for later async cleanup\n    for (let columnIdx in postProcessedRow) {\n      if (postProcessedRow.hasOwnProperty(columnIdx)) {\n        this.postProcessedCleanupQueue.push({\n          actionType: 'C',\n          groupId: this.postProcessgroupId,\n          node: cacheEntry.cellNodesByColumnIdx[+columnIdx],\n          columnIdx: +columnIdx,\n          rowIdx\n        });\n      }\n    }\n    this.postProcessedCleanupQueue.push({\n      actionType: 'R',\n      groupId: this.postProcessgroupId,\n      node: cacheEntry.rowNode\n    });\n    cacheEntry.rowNode.forEach((node) => {\n      node.remove();\n    });\n  }\n\n  protected queuePostProcessedCellForCleanup(cellnode: HTMLElement, columnIdx: number, rowIdx: number) {\n    this.postProcessedCleanupQueue.push({\n      actionType: 'C',\n      groupId: this.postProcessgroupId,\n      node: cellnode,\n      columnIdx,\n      rowIdx\n    });\n    cellnode.remove();\n  }\n\n  protected removeRowFromCache(row) {\n    let cacheEntry = this.rowsCache[row];\n    if (!cacheEntry) {\n      return;\n    }\n\n    if (this._options.enableAsyncPostRenderCleanup && this.postProcessedRows[row]) {\n      this.queuePostProcessedRowForCleanup(cacheEntry, this.postProcessedRows[row], row);\n    } else {\n      cacheEntry.rowNode.forEach((node) => {\n        if (node.parentElement) {\n          node.parentElement.removeChild(node);\n        }\n      });\n    }\n\n    delete this.rowsCache[row];\n    delete this.postProcessedRows[row];\n    this.renderedRows--;\n    this.counter_rows_removed++;\n  }\n\n  /** Apply a Formatter Result to a Cell DOM Node */\n  applyFormatResultToCellNode(formatterResult: FormatterResultObject | string, cellNode: HTMLElement, suppressRemove?: boolean) {\n    if (formatterResult === null || formatterResult === undefined) { formatterResult = ''; }\n    if (Object.prototype.toString.call(formatterResult) !== '[object Object]') {\n      cellNode.innerHTML = this.sanitizeHtmlString(formatterResult as string);\n      return;\n    }\n    cellNode.innerHTML = this.sanitizeHtmlString((formatterResult as FormatterResultObject).text);\n    if ((formatterResult as FormatterResultObject).removeClasses && !suppressRemove) {\n      const classes = (formatterResult as FormatterResultObject).removeClasses!.split(' ');\n      classes.forEach((c) => cellNode.classList.remove(c));\n    }\n    if ((formatterResult as FormatterResultObject).addClasses) {\n      const classes = (formatterResult as FormatterResultObject).addClasses!.split(' ');\n      classes.forEach((c) => cellNode.classList.add(c));\n    }\n    if ((formatterResult as FormatterResultObject).toolTip) {\n      cellNode.setAttribute('title', (formatterResult as FormatterResultObject).toolTip!);\n    }\n  }\n\n  /**\n   * Update a specific cell by its row and column index\n   * @param {Number} row - grid row number\n   * @param {Number} cell - grid cell column number\n   */\n  updateCell(row: number, cell: number) {\n    let cellNode = this.getCellNode(row, cell);\n    if (!cellNode) {\n      return;\n    }\n\n    let m = this.columns[cell], d = this.getDataItem(row);\n    if (this.currentEditor && this.activeRow === row && this.activeCell === cell) {\n      this.currentEditor.loadValue(d);\n    } else {\n      let formatterResult = d ? this.getFormatter(row, m)(row, cell, this.getDataItemValueForColumn(d, m), m, d, this) : '';\n      this.applyFormatResultToCellNode(formatterResult, cellNode);\n      this.invalidatePostProcessingResults(row);\n    }\n  }\n\n  /**\n   * Update a specific row by its row index\n   * @param {Number} row - grid row number\n   */\n  updateRow(row: number) {\n    let cacheEntry = this.rowsCache[row];\n    if (!cacheEntry) {\n      return;\n    }\n\n    this.ensureCellNodesInRowsCache(row);\n\n    let formatterResult, d = this.getDataItem(row);\n\n    for (let colIdx in cacheEntry.cellNodesByColumnIdx) {\n      if (!cacheEntry.cellNodesByColumnIdx.hasOwnProperty(colIdx)) {\n        continue;\n      }\n\n      const columnIdx = +colIdx;\n      let m = this.columns[columnIdx],\n\n        node = cacheEntry.cellNodesByColumnIdx[columnIdx];\n\n      if (row === this.activeRow && columnIdx === this.activeCell && this.currentEditor) {\n        this.currentEditor.loadValue(d);\n      } else if (d) {\n        formatterResult = this.getFormatter(row, m)(row, columnIdx, this.getDataItemValueForColumn(d, m), m, d, this);\n        this.applyFormatResultToCellNode(formatterResult, node);\n      } else {\n        node.innerHTML = '';\n      }\n    }\n\n    this.invalidatePostProcessingResults(row);\n  }\n\n  protected getViewportHeight() {\n    if (!this._options.autoHeight || this._options.frozenColumn !== -1) {\n      this.topPanelH = (this._options.showTopPanel) ? this._options.topPanelHeight + this.getVBoxDelta(this._topPanelScrollers[0]) : 0;\n      this.headerRowH = (this._options.showHeaderRow) ? this._options.headerRowHeight + this.getVBoxDelta(this._headerRowScroller[0]) : 0;\n      this.footerRowH = (this._options.showFooterRow) ? this._options.footerRowHeight + this.getVBoxDelta(this._footerRowScroller[0]) : 0;\n    }\n\n    if (this._options.autoHeight) {\n      let fullHeight = this._paneHeaderL.offsetHeight;\n      fullHeight += (this._options.showHeaderRow) ? this._options.headerRowHeight + this.getVBoxDelta(this._headerRowScroller[0]) : 0;\n      fullHeight += (this._options.showFooterRow) ? this._options.footerRowHeight + this.getVBoxDelta(this._footerRowScroller[0]) : 0;\n      fullHeight += (this.getCanvasWidth() > this.viewportW) ? (this.scrollbarDimensions?.height ?? 0) : 0;\n\n      this.viewportH = this._options.rowHeight\n        * this.getDataLengthIncludingAddNew()\n        + ((this._options.frozenColumn == -1) ? fullHeight : 0);\n    } else {\n      const columnNamesH = (this._options.showColumnHeader) ? Utils.toFloat(Utils.height(this._headerScroller[0]) as number) + this.getVBoxDelta(this._headerScroller[0]) : 0;\n      const preHeaderH = (this._options.createPreHeaderPanel && this._options.showPreHeaderPanel) ? this._options.preHeaderPanelHeight + this.getVBoxDelta(this._preHeaderPanelScroller) : 0;\n\n      const style = getComputedStyle(this._container);\n      this.viewportH = Utils.toFloat(style.height)\n        - Utils.toFloat(style.paddingTop)\n        - Utils.toFloat(style.paddingBottom)\n        - columnNamesH\n        - this.topPanelH\n        - this.headerRowH\n        - this.footerRowH\n        - preHeaderH;\n    }\n\n    this.numVisibleRows = Math.ceil(this.viewportH / this._options.rowHeight);\n    return this.viewportH;\n  }\n\n  protected getViewportWidth() {\n    this.viewportW = parseFloat(Utils.innerSize(this._container, 'width') as unknown as string);\n    return this.viewportW;\n  }\n\n  /** Execute a Resize of the Canvas */\n  resizeCanvas() {\n    if (!this.initialized) { return; }\n    this.paneTopH = 0;\n    this.paneBottomH = 0;\n    this.viewportTopH = 0;\n    this.viewportBottomH = 0;\n\n    this.getViewportWidth();\n    this.getViewportHeight();\n\n    // Account for Frozen Rows\n    if (this.hasFrozenRows) {\n      if (this._options.frozenBottom) {\n        this.paneTopH = this.viewportH - this.frozenRowsHeight - (this.scrollbarDimensions?.height ?? 0);\n        this.paneBottomH = this.frozenRowsHeight + (this.scrollbarDimensions?.height ?? 0);\n      } else {\n        this.paneTopH = this.frozenRowsHeight;\n        this.paneBottomH = this.viewportH - this.frozenRowsHeight;\n      }\n    } else {\n      this.paneTopH = this.viewportH;\n    }\n\n    // The top pane includes the top panel and the header row\n    this.paneTopH += this.topPanelH + this.headerRowH + this.footerRowH;\n\n    if (this.hasFrozenColumns() && this._options.autoHeight) {\n      this.paneTopH += (this.scrollbarDimensions?.height ?? 0);\n    }\n\n    // The top viewport does not contain the top panel or header row\n    this.viewportTopH = this.paneTopH - this.topPanelH - this.headerRowH - this.footerRowH;\n\n    if (this._options.autoHeight) {\n      if (this.hasFrozenColumns()) {\n        const style = getComputedStyle(this._headerScrollerL);\n        Utils.height(this._container, this.paneTopH + Utils.toFloat(style.height));\n      }\n\n      this._paneTopL.style.position = 'relative';\n    }\n\n    Utils.setStyleSize(this._paneTopL, 'top', Utils.height(this._paneHeaderL) || (this._options.showHeaderRow ? this._options.headerRowHeight : 0) + (this._options.showPreHeaderPanel ? this._options.preHeaderPanelHeight : 0));\n    Utils.height(this._paneTopL, this.paneTopH);\n\n    let paneBottomTop = this._paneTopL.offsetTop + this.paneTopH;\n\n    if (!this._options.autoHeight) {\n      Utils.height(this._viewportTopL, this.viewportTopH);\n    }\n\n    if (this.hasFrozenColumns()) {\n      Utils.setStyleSize(this._paneTopR, 'top', Utils.height(this._paneHeaderL) as number);\n      Utils.height(this._paneTopR, this.paneTopH);\n      Utils.height(this._viewportTopR, this.viewportTopH);\n\n      if (this.hasFrozenRows) {\n        Utils.setStyleSize(this._paneBottomL, 'top', paneBottomTop);\n        Utils.height(this._paneBottomL, this.paneBottomH);\n        Utils.setStyleSize(this._paneBottomR, 'top', paneBottomTop);\n        Utils.height(this._paneBottomR, this.paneBottomH);\n        Utils.height(this._viewportBottomR, this.paneBottomH);\n      }\n    } else {\n      if (this.hasFrozenRows) {\n        Utils.width(this._paneBottomL, '100%');\n        Utils.height(this._paneBottomL, this.paneBottomH);\n        Utils.setStyleSize(this._paneBottomL, 'top', paneBottomTop);\n      }\n    }\n\n    if (this.hasFrozenRows) {\n      Utils.height(this._viewportBottomL, this.paneBottomH);\n\n      if (this._options.frozenBottom) {\n        Utils.height(this._canvasBottomL, this.frozenRowsHeight);\n\n        if (this.hasFrozenColumns()) {\n          Utils.height(this._canvasBottomR, this.frozenRowsHeight);\n        }\n      } else {\n        Utils.height(this._canvasTopL, this.frozenRowsHeight);\n\n        if (this.hasFrozenColumns()) {\n          Utils.height(this._canvasTopR, this.frozenRowsHeight);\n        }\n      }\n    } else {\n      Utils.height(this._viewportTopR, this.viewportTopH);\n    }\n\n    if (!this.scrollbarDimensions || !this.scrollbarDimensions.width) {\n      this.scrollbarDimensions = this.measureScrollbar();\n    }\n\n    if (this._options.autosizeColsMode === GridAutosizeColsMode.LegacyForceFit) {\n      this.autosizeColumns();\n    }\n\n    this.updateRowCount();\n    this.handleScroll();\n    // Since the width has changed, force the render() to reevaluate virtually rendered cells.\n    this.lastRenderedScrollLeft = -1;\n    this.render();\n  }\n\n  /** Update paging information status from the View */\n  updatePagingStatusFromView(pagingInfo: PagingInfo) {\n    this.pagingActive = (pagingInfo.pageSize !== 0);\n    this.pagingIsLastPage = (pagingInfo.pageNum == pagingInfo.totalPages - 1);\n  }\n\n  /** Update the dataset row count */\n  updateRowCount() {\n    if (!this.initialized) { return; }\n\n    let dataLength = this.getDataLength();\n    let dataLengthIncludingAddNew = this.getDataLengthIncludingAddNew();\n    let numberOfRows = 0;\n    let oldH = ((this.hasFrozenRows && !this._options.frozenBottom) ? Utils.height(this._canvasBottomL) : Utils.height(this._canvasTopL)) as number;\n\n    if (this.hasFrozenRows) {\n      numberOfRows = this.getDataLength() - this._options.frozenRow;\n    } else {\n      numberOfRows = dataLengthIncludingAddNew + (this._options.leaveSpaceForNewRows ? this.numVisibleRows - 1 : 0);\n    }\n\n    let tempViewportH = Utils.height(this._viewportScrollContainerY) as number;\n    let oldViewportHasVScroll = this.viewportHasVScroll;\n    // with autoHeight, we do not need to accommodate the vertical scroll bar\n    this.viewportHasVScroll = this._options.alwaysShowVerticalScroll || !this._options.autoHeight && (numberOfRows * this._options.rowHeight > tempViewportH);\n\n    this.makeActiveCellNormal();\n\n    // remove the rows that are now outside of the data range\n    // this helps avoid redundant calls to .removeRow() when the size of the data decreased by thousands of rows\n    let r1 = dataLength - 1;\n    for (let i in this.rowsCache) {\n      if (Number(i) > r1) {\n        this.removeRowFromCache(i);\n      }\n    }\n    if (this._options.enableAsyncPostRenderCleanup) {\n      this.startPostProcessingCleanup();\n    }\n\n    if (this.activeCellNode && this.activeRow > r1) {\n      this.resetActiveCell();\n    }\n\n    oldH = this.h;\n    if (this._options.autoHeight) {\n      this.h = this._options.rowHeight * numberOfRows;\n    } else {\n      this.th = Math.max(this._options.rowHeight * numberOfRows, tempViewportH - (this.scrollbarDimensions?.height ?? 0));\n      if (this.th < this.maxSupportedCssHeight) {\n        // just one page\n        this.h = this.ph = this.th;\n        this.n = 1;\n        this.cj = 0;\n      } else {\n        // break into pages\n        this.h = this.maxSupportedCssHeight;\n        this.ph = this.h / 100;\n        this.n = Math.floor(this.th / this.ph);\n        this.cj = (this.th - this.h) / (this.n - 1);\n      }\n    }\n\n    if (this.h !== oldH || this.enforceFrozenRowHeightRecalc) {\n      if (this.hasFrozenRows && !this._options.frozenBottom) {\n        Utils.height(this._canvasBottomL, this.h);\n\n        if (this.hasFrozenColumns()) {\n          Utils.height(this._canvasBottomR, this.h);\n        }\n      } else {\n        Utils.height(this._canvasTopL, this.h);\n        Utils.height(this._canvasTopR, this.h);\n      }\n\n      this.scrollTop = this._viewportScrollContainerY.scrollTop;\n      this.enforceFrozenRowHeightRecalc = false; // reset enforce flag\n    }\n\n    let oldScrollTopInRange = (this.scrollTop + this.offset <= this.th - tempViewportH);\n\n    if (this.th == 0 || this.scrollTop == 0) {\n      this.page = this.offset = 0;\n    } else if (oldScrollTopInRange) {\n      // maintain virtual position\n      this.scrollTo(this.scrollTop + this.offset);\n    } else {\n      // scroll to bottom\n      this.scrollTo(this.th - tempViewportH + (this.scrollbarDimensions?.height ?? 0));\n    }\n\n    if (this.h !== oldH && this._options.autoHeight) {\n      this.resizeCanvas();\n    }\n\n    if (this._options.autosizeColsMode === GridAutosizeColsMode.LegacyForceFit && oldViewportHasVScroll !== this.viewportHasVScroll) {\n      this.autosizeColumns();\n    }\n    this.updateCanvasWidth(false);\n  }\n\n  /** @alias `getVisibleRange` */\n  getViewport(viewportTop?: number, viewportLeft?: number) {\n    return this.getVisibleRange(viewportTop, viewportLeft);\n  }\n\n  getVisibleRange(viewportTop?: number, viewportLeft?: number) {\n    if (viewportTop == null) {\n      viewportTop = this.scrollTop;\n    }\n    if (viewportLeft == null) {\n      viewportLeft = this.scrollLeft;\n    }\n\n    return {\n      top: this.getRowFromPosition(viewportTop),\n      bottom: this.getRowFromPosition(viewportTop + this.viewportH) + 1,\n      leftPx: viewportLeft,\n      rightPx: viewportLeft + this.viewportW\n    };\n  }\n\n  /** Get rendered range */\n  getRenderedRange(viewportTop?: number, viewportLeft?: number) {\n    let range = this.getVisibleRange(viewportTop, viewportLeft);\n    let buffer = Math.round(this.viewportH / this._options.rowHeight);\n    let minBuffer = this._options.minRowBuffer as number;\n\n    if (this.vScrollDir == -1) {\n      range.top -= buffer;\n      range.bottom += minBuffer;\n    } else if (this.vScrollDir == 1) {\n      range.top -= minBuffer;\n      range.bottom += buffer;\n    } else {\n      range.top -= minBuffer;\n      range.bottom += minBuffer;\n    }\n\n    range.top = Math.max(0, range.top);\n    range.bottom = Math.min(this.getDataLengthIncludingAddNew() - 1, range.bottom);\n\n    range.leftPx -= this.viewportW;\n    range.rightPx += this.viewportW;\n\n    range.leftPx = Math.max(0, range.leftPx);\n    range.rightPx = Math.min(this.canvasWidth, range.rightPx);\n\n    return range;\n  }\n\n  protected ensureCellNodesInRowsCache(row: number) {\n    const cacheEntry = this.rowsCache[row];\n    if (cacheEntry) {\n      if (cacheEntry.cellRenderQueue.length) {\n        const rowNode = cacheEntry.rowNode;\n        let children = Array.from(rowNode[0].children);\n        if (rowNode.length > 1) {\n          children = children.concat(Array.from(rowNode[1].children));\n        }\n\n        let i = children.length - 1;\n        while (cacheEntry.cellRenderQueue.length) {\n          const columnIdx = cacheEntry.cellRenderQueue.pop();\n          cacheEntry.cellNodesByColumnIdx[columnIdx] = children[i--];\n        }\n      }\n    }\n  }\n\n  protected cleanUpCells(range: CellViewportRange, row: number) {\n    // Ignore frozen rows\n    if (this.hasFrozenRows\n      && ((this._options.frozenBottom && row > this.actualFrozenRow) // Frozen bottom rows\n        || (row <= this.actualFrozenRow)                     // Frozen top rows\n      )\n    ) {\n      return;\n    }\n\n    let totalCellsRemoved = 0;\n    let cacheEntry = this.rowsCache[row];\n\n    // Remove cells outside the range.\n    let cellsToRemove: number[] = [];\n    for (let cellNodeIdx in cacheEntry.cellNodesByColumnIdx) {\n      // I really hate it when people mess with Array.prototype.\n      if (!cacheEntry.cellNodesByColumnIdx.hasOwnProperty(cellNodeIdx)) {\n        continue;\n      }\n\n      // This is a string, so it needs to be cast back to a number.\n      const i = +cellNodeIdx;\n\n      // Ignore frozen columns\n      if (i <= this._options.frozenColumn) {\n        continue;\n      }\n\n      // Ignore alwaysRenderedColumns\n      if (Array.isArray(this.columns) && this.columns[i] && this.columns[i].alwaysRenderColumn) {\n        continue;\n      }\n\n      let colspan = cacheEntry.cellColSpans[i];\n      if (this.columnPosLeft[i] > range.rightPx ||\n        this.columnPosRight[Math.min(this.columns.length - 1, (i as unknown as number) + colspan - 1)] < range.leftPx) {\n        if (!(row == this.activeRow && Number(i) == this.activeCell)) {\n          cellsToRemove.push((i as unknown as number));\n        }\n      }\n    }\n\n    let cellToRemove, cellNode;\n    while ((cellToRemove = cellsToRemove.pop()) != null) {\n      cellNode = cacheEntry.cellNodesByColumnIdx[cellToRemove];\n\n      if (this._options.enableAsyncPostRenderCleanup && this.postProcessedRows[row]?.[cellToRemove]) {\n        this.queuePostProcessedCellForCleanup(cellNode, cellToRemove, row);\n      } else {\n        cellNode.parentElement.removeChild(cellNode);\n      }\n\n      delete cacheEntry.cellColSpans[cellToRemove];\n      delete cacheEntry.cellNodesByColumnIdx[cellToRemove];\n      if (this.postProcessedRows[row]) {\n        delete this.postProcessedRows[row][cellToRemove];\n      }\n      totalCellsRemoved++;\n    }\n  }\n\n  protected cleanUpAndRenderCells(range: CellViewportRange) {\n    let cacheEntry;\n    let stringArray: string[] = [];\n    let processedRows: number[] = [];\n    let cellsAdded: number;\n    let totalCellsAdded = 0;\n    let colspan;\n\n    for (let row = range.top as number, btm = range.bottom as number; row <= btm; row++) {\n      cacheEntry = this.rowsCache[row];\n      if (!cacheEntry) {\n        continue;\n      }\n\n      // cellRenderQueue populated in renderRows() needs to be cleared first\n      this.ensureCellNodesInRowsCache(row);\n\n      this.cleanUpCells(range, row);\n\n      // Render missing cells.\n      cellsAdded = 0;\n\n      let metadata = (this.data as CustomDataView)?.getItemMetadata?.(row) ?? {};\n      metadata = metadata?.columns as any;\n\n      let d = this.getDataItem(row);\n\n      // TODO:  shorten this loop (index? heuristics? binary search?)\n      for (let i = 0, ii = this.columns.length; i < ii; i++) {\n        if (!this.columns[i] || this.columns[i].hidden) continue;\n\n        // Cells to the right are outside the range.\n        if (this.columnPosLeft[i] > range.rightPx) {\n          break;\n        }\n\n        // Already rendered.\n        if ((colspan = cacheEntry.cellColSpans[i]) != null) {\n          i += (colspan > 1 ? colspan - 1 : 0);\n          continue;\n        }\n\n        colspan = 1;\n        if (metadata) {\n          let columnData = metadata[this.columns[i].id] || metadata[i];\n          colspan = (columnData && columnData.colspan) || 1;\n          if (colspan === '*') {\n            colspan = ii - i;\n          }\n        }\n\n        if (this.columnPosRight[Math.min(ii - 1, i + colspan - 1)] > range.leftPx) {\n          this.appendCellHtml(stringArray, row, i, colspan, d);\n          cellsAdded++;\n        }\n\n        i += (colspan > 1 ? colspan - 1 : 0);\n      }\n\n      if (cellsAdded) {\n        totalCellsAdded += cellsAdded;\n        processedRows.push(row);\n      }\n    }\n\n    if (!stringArray.length) {\n      return;\n    }\n\n    let x = Utils.createDomElement('div', { innerHTML: this.sanitizeHtmlString(stringArray.join('')) });\n    let processedRow: number | null | undefined;\n    let node;\n    while ((processedRow = processedRows.pop()) != null) {\n      cacheEntry = this.rowsCache[processedRow];\n      let columnIdx;\n      while ((columnIdx = cacheEntry.cellRenderQueue.pop()) != null) {\n        node = x.lastChild;\n\n        if (this.hasFrozenColumns() && (columnIdx > this._options.frozenColumn)) {\n          cacheEntry.rowNode[1].appendChild(node);\n        } else {\n          cacheEntry.rowNode[0].appendChild(node);\n        }\n        cacheEntry.cellNodesByColumnIdx[columnIdx] = node;\n      }\n    }\n  }\n\n  protected renderRows(range: { top: number; bottom: number; leftPx: number; rightPx: number; }) {\n    let stringArrayL = [],\n      stringArrayR = [],\n      rows: number[] = [],\n      needToReselectCell = false,\n      dataLength = this.getDataLength();\n\n    for (let i = range.top as number, ii = range.bottom as number; i <= ii; i++) {\n      if (this.rowsCache[i] || (this.hasFrozenRows && this._options.frozenBottom && i == this.getDataLength())) {\n        continue;\n      }\n      this.renderedRows++;\n      rows.push(i);\n\n      // Create an entry right away so that appendRowHtml() can\n      // start populating it.\n      this.rowsCache[i] = {\n        rowNode: null,\n\n        // ColSpans of rendered cells (by column idx).\n        // Can also be used for checking whether a cell has been rendered.\n        cellColSpans: [],\n\n        // Cell nodes (by column idx).  Lazy-populated by ensureCellNodesInRowsCache().\n        cellNodesByColumnIdx: [],\n\n        // Column indices of cell nodes that have been rendered, but not yet indexed in\n        // cellNodesByColumnIdx.  These are in the same order as cell nodes added at the\n        // end of the row.\n        cellRenderQueue: []\n      };\n\n      this.appendRowHtml(stringArrayL, stringArrayR, i, range, dataLength);\n      if (this.activeCellNode && this.activeRow === i) {\n        needToReselectCell = true;\n      }\n      this.counter_rows_rendered++;\n    }\n\n    if (!rows.length) { return; }\n\n    let x = Utils.createDomElement('div', { innerHTML: this.sanitizeHtmlString(stringArrayL.join('')) });\n    let xRight = Utils.createDomElement('div', { innerHTML: this.sanitizeHtmlString(stringArrayR.join('')) });\n\n    for (let i = 0, ii = rows.length; i < ii; i++) {\n      if ((this.hasFrozenRows) && (rows[i] >= this.actualFrozenRow)) {\n        if (this.hasFrozenColumns()) {\n          this.rowsCache[rows[i]].rowNode = [x.firstChild, xRight.firstChild];\n          this._canvasBottomL.appendChild(x.firstChild as ChildNode);\n          this._canvasBottomR.appendChild(xRight.firstChild as ChildNode);\n        } else {\n          this.rowsCache[rows[i]].rowNode = [x.firstChild as ChildNode];\n          this._canvasBottomL.appendChild(x.firstChild as ChildNode);\n        }\n      } else if (this.hasFrozenColumns()) {\n        this.rowsCache[rows[i]].rowNode = [x.firstChild, xRight.firstChild];\n        this._canvasTopL.appendChild(x.firstChild as ChildNode);\n        this._canvasTopR.appendChild(xRight.firstChild as ChildNode);\n      } else {\n        this.rowsCache[rows[i]].rowNode = [x.firstChild as ChildNode];\n        this._canvasTopL.appendChild(x.firstChild as ChildNode);\n      }\n    }\n\n    if (needToReselectCell) {\n      this.activeCellNode = this.getCellNode(this.activeRow, this.activeCell);\n    }\n  }\n\n  protected startPostProcessing() {\n    if (!this._options.enableAsyncPostRender) {\n      return;\n    }\n    clearTimeout(this.h_postrender);\n    this.h_postrender = setTimeout(this.asyncPostProcessRows.bind(this), this._options.asyncPostRenderDelay);\n  }\n\n  protected startPostProcessingCleanup() {\n    if (!this._options.enableAsyncPostRenderCleanup) {\n      return;\n    }\n    clearTimeout(this.h_postrenderCleanup);\n    this.h_postrenderCleanup = setTimeout(this.asyncPostProcessCleanupRows.bind(this), this._options.asyncPostRenderCleanupDelay);\n  }\n\n  protected invalidatePostProcessingResults(row: number) {\n    // change status of columns to be re-rendered\n    for (let columnIdx in this.postProcessedRows[row]) {\n      if (this.postProcessedRows[row].hasOwnProperty(columnIdx)) {\n        this.postProcessedRows[row][columnIdx] = 'C';\n      }\n    }\n    this.postProcessFromRow = Math.min(this.postProcessFromRow as number, row);\n    this.postProcessToRow = Math.max(this.postProcessToRow as number, row);\n    this.startPostProcessing();\n  }\n\n  protected updateRowPositions() {\n    for (let row in this.rowsCache) {\n      let rowNumber = row ? parseInt(row) : 0;\n      Utils.setStyleSize(this.rowsCache[rowNumber].rowNode[0], 'top', this.getRowTop(rowNumber));\n    }\n  }\n\n  /** (re)Render the grid */\n  render() {\n    if (!this.initialized) { return; }\n\n    this.scrollThrottle.dequeue();\n\n    let visible = this.getVisibleRange();\n    let rendered = this.getRenderedRange();\n\n    // remove rows no longer in the viewport\n    this.cleanupRows(rendered);\n\n    // add new rows & missing cells in existing rows\n    if (this.lastRenderedScrollLeft !== this.scrollLeft) {\n      if (this.hasFrozenRows) {\n        let renderedFrozenRows = Utils.extend(true, {}, rendered);\n\n        if (this._options.frozenBottom) {\n          renderedFrozenRows.top = this.actualFrozenRow;\n          renderedFrozenRows.bottom = this.getDataLength();\n        } else {\n          renderedFrozenRows.top = 0;\n          renderedFrozenRows.bottom = this._options.frozenRow;\n        }\n        this.cleanUpAndRenderCells(renderedFrozenRows);\n      }\n      this.cleanUpAndRenderCells(rendered);\n    }\n\n    // render missing rows\n    this.renderRows(rendered);\n\n    // Render frozen rows\n    if (this.hasFrozenRows) {\n      if (this._options.frozenBottom) {\n        this.renderRows({\n          top: this.actualFrozenRow, bottom: this.getDataLength() - 1, leftPx: rendered.leftPx, rightPx: rendered.rightPx\n        });\n      } else {\n        this.renderRows({\n          top: 0, bottom: this._options.frozenRow - 1, leftPx: rendered.leftPx, rightPx: rendered.rightPx\n        });\n      }\n    }\n\n    this.postProcessFromRow = visible.top;\n    this.postProcessToRow = Math.min(this.getDataLengthIncludingAddNew() - 1, visible.bottom);\n    this.startPostProcessing();\n\n    this.lastRenderedScrollTop = this.scrollTop;\n    this.lastRenderedScrollLeft = this.scrollLeft;\n    this.h_render = null;\n    this.trigger(this.onRendered, { startRow: visible.top, endRow: visible.bottom, grid: this });\n  }\n\n  protected handleHeaderRowScroll() {\n    let scrollLeft = this._headerRowScrollContainer.scrollLeft;\n    if (scrollLeft !== this._viewportScrollContainerX.scrollLeft) {\n      this._viewportScrollContainerX.scrollLeft = scrollLeft;\n    }\n  }\n\n  protected handleFooterRowScroll() {\n    let scrollLeft = this._footerRowScrollContainer.scrollLeft;\n    if (scrollLeft !== this._viewportScrollContainerX.scrollLeft) {\n      this._viewportScrollContainerX.scrollLeft = scrollLeft;\n    }\n  }\n\n  protected handlePreHeaderPanelScroll() {\n    this.handleElementScroll(this._preHeaderPanelScroller);\n  }\n\n  protected handleElementScroll(element: HTMLElement) {\n    let scrollLeft = element.scrollLeft;\n    if (scrollLeft !== this._viewportScrollContainerX.scrollLeft) {\n      this._viewportScrollContainerX.scrollLeft = scrollLeft;\n    }\n  }\n\n  protected handleScroll() {\n    this.scrollTop = this._viewportScrollContainerY.scrollTop;\n    this.scrollLeft = this._viewportScrollContainerX.scrollLeft;\n    return this._handleScroll(false);\n  }\n\n  protected _handleScroll(isMouseWheel: boolean) {\n    let maxScrollDistanceY = this._viewportScrollContainerY.scrollHeight - this._viewportScrollContainerY.clientHeight;\n    let maxScrollDistanceX = this._viewportScrollContainerY.scrollWidth - this._viewportScrollContainerY.clientWidth;\n\n    // Protect against erroneous clientHeight/Width greater than scrollHeight/Width.\n    // Sometimes seen in Chrome.\n    maxScrollDistanceY = Math.max(0, maxScrollDistanceY);\n    maxScrollDistanceX = Math.max(0, maxScrollDistanceX);\n\n    // Ceiling the max scroll values\n    if (this.scrollTop > maxScrollDistanceY) {\n      this.scrollTop = maxScrollDistanceY;\n    }\n    if (this.scrollLeft > maxScrollDistanceX) {\n      this.scrollLeft = maxScrollDistanceX;\n    }\n\n    let vScrollDist = Math.abs(this.scrollTop - this.prevScrollTop);\n    let hScrollDist = Math.abs(this.scrollLeft - this.prevScrollLeft);\n\n    if (hScrollDist) {\n      this.prevScrollLeft = this.scrollLeft;\n\n      // adjust scroll position of all div containers when scrolling the grid\n      this._viewportScrollContainerX.scrollLeft = this.scrollLeft;\n      this._headerScrollContainer.scrollLeft = this.scrollLeft;\n      this._topPanelScrollers[0].scrollLeft = this.scrollLeft;\n      if (this._options.createFooterRow) {\n        this._footerRowScrollContainer.scrollLeft = this.scrollLeft;\n      }\n      if (this._options.createPreHeaderPanel) {\n        if (this.hasFrozenColumns()) {\n          this._preHeaderPanelScrollerR.scrollLeft = this.scrollLeft;\n        } else {\n          this._preHeaderPanelScroller.scrollLeft = this.scrollLeft;\n        }\n      }\n\n      if (this.hasFrozenColumns()) {\n        if (this.hasFrozenRows) {\n          this._viewportTopR.scrollLeft = this.scrollLeft;\n        }\n        this._headerRowScrollerR.scrollLeft = this.scrollLeft; // right header row scrolling with frozen grid\n      } else {\n        if (this.hasFrozenRows) {\n          this._viewportTopL.scrollLeft = this.scrollLeft;\n        }\n        this._headerRowScrollerL.scrollLeft = this.scrollLeft; // left header row scrolling with regular grid\n      }\n    }\n\n    // autoheight suppresses vertical scrolling, but editors can create a div larger than\n    // the row vertical size, which can lead to a vertical scroll bar appearing temporarily\n    // while the editor is displayed. this is not part of the grid scrolling, so we should ignore it\n    if (vScrollDist && !this._options.autoHeight) {\n      this.vScrollDir = this.prevScrollTop < this.scrollTop ? 1 : -1;\n      this.prevScrollTop = this.scrollTop;\n\n      if (isMouseWheel) {\n        this._viewportScrollContainerY.scrollTop = this.scrollTop;\n      }\n\n      if (this.hasFrozenColumns()) {\n        if (this.hasFrozenRows && !this._options.frozenBottom) {\n          this._viewportBottomL.scrollTop = this.scrollTop;\n        } else {\n          this._viewportTopL.scrollTop = this.scrollTop;\n        }\n      }\n\n      // switch virtual pages if needed\n      if (vScrollDist < this.viewportH) {\n        this.scrollTo(this.scrollTop + this.offset);\n      } else {\n        let oldOffset = this.offset;\n        if (this.h == this.viewportH) {\n          this.page = 0;\n        } else {\n          this.page = Math.min(this.n - 1, Math.floor(this.scrollTop * ((this.th - this.viewportH) / (this.h - this.viewportH)) * (1 / this.ph)));\n        }\n        this.offset = Math.round(this.page * this.cj);\n        if (oldOffset !== this.offset) {\n          this.invalidateAllRows();\n        }\n      }\n    }\n\n    if (hScrollDist || vScrollDist) {\n      let dx = Math.abs(this.lastRenderedScrollLeft - this.scrollLeft);\n      let dy = Math.abs(this.lastRenderedScrollTop - this.scrollTop);\n      if (dx > 20 || dy > 20) {\n        // if rendering is forced or scrolling is small enough to be \"easy\", just render\n        if (this._options.forceSyncScrolling || (dy < this.viewportH && dx < this.viewportW)) {\n          this.render();\n        } else {\n          // otherwise, perform \"difficult\" renders at a capped frequency\n          this.scrollThrottle.enqueue();\n        }\n\n        this.trigger(this.onViewportChanged, {});\n      }\n    }\n\n    this.trigger(this.onScroll, { scrollLeft: this.scrollLeft, scrollTop: this.scrollTop });\n\n    if (hScrollDist || vScrollDist) { return true; }\n    return false;\n  }\n\n  /**\n   * limits the frequency at which the provided action is executed.\n   * call enqueue to execute the action - it will execute either immediately or, if it was executed less than minPeriod_ms in the past, as soon as minPeriod_ms has expired.\n   * call dequeue to cancel any pending action.\n   */\n  protected actionThrottle(action: () => void, minPeriod_ms: number) {\n    let blocked = false;\n    let queued = false;\n\n    const enqueue = () => {\n      if (!blocked) {\n        blockAndExecute();\n      } else {\n        queued = true;\n      }\n    }\n\n    const dequeue = () => {\n      queued = false;\n    }\n\n    const blockAndExecute = () => {\n      blocked = true;\n      setTimeout(unblock, minPeriod_ms);\n      action.call(this);\n    }\n\n    const unblock = () => {\n      if (queued) {\n        dequeue();\n        blockAndExecute();\n      } else {\n        blocked = false;\n      }\n    }\n\n    return {\n      enqueue: enqueue.bind(this),\n      dequeue: dequeue.bind(this)\n    };\n  }\n\n  protected asyncPostProcessRows() {\n    let dataLength = this.getDataLength();\n    while (this.postProcessFromRow <= this.postProcessToRow) {\n      let row = (this.vScrollDir >= 0) ? this.postProcessFromRow++ : this.postProcessToRow--;\n      let cacheEntry = this.rowsCache[row];\n      if (!cacheEntry || row >= dataLength) {\n        continue;\n      }\n\n      if (!this.postProcessedRows[row]) {\n        this.postProcessedRows[row] = {};\n      }\n\n      this.ensureCellNodesInRowsCache(row);\n      for (let colIdx in cacheEntry.cellNodesByColumnIdx) {\n        if (!cacheEntry.cellNodesByColumnIdx.hasOwnProperty(colIdx)) {\n          continue;\n        }\n\n        const columnIdx = +colIdx;\n\n        let m = this.columns[columnIdx];\n        let processedStatus = this.postProcessedRows[row][columnIdx]; // C=cleanup and re-render, R=rendered\n        if (m.asyncPostRender && processedStatus !== 'R') {\n          let node = cacheEntry.cellNodesByColumnIdx[columnIdx];\n          if (node) {\n            m.asyncPostRender(node, row, this.getDataItem(row), m, (processedStatus === 'C'));\n          }\n          this.postProcessedRows[row][columnIdx] = 'R';\n        }\n      }\n\n      this.h_postrender = setTimeout(this.asyncPostProcessRows.bind(this), this._options.asyncPostRenderDelay);\n      return;\n    }\n  }\n\n  protected asyncPostProcessCleanupRows() {\n    if (this.postProcessedCleanupQueue.length > 0) {\n      let groupId = this.postProcessedCleanupQueue[0].groupId;\n\n      // loop through all queue members with this groupID\n      while (this.postProcessedCleanupQueue.length > 0 && this.postProcessedCleanupQueue[0].groupId == groupId) {\n        let entry = this.postProcessedCleanupQueue.shift();\n        if (entry?.actionType === 'R') {\n          (entry.node as HTMLElement[]).forEach((node) => {\n            node.remove();\n          });\n        }\n        if (entry?.actionType === 'C') {\n          let column = this.columns[entry.columnIdx ?? ''];\n          if (column.asyncPostRenderCleanup && entry.node) {\n            // cleanup must also remove element\n            column.asyncPostRenderCleanup(entry.node, entry.rowIdx, column);\n          }\n        }\n      }\n\n      // call this function again after the specified delay\n      this.h_postrenderCleanup = setTimeout(this.asyncPostProcessCleanupRows.bind(this), this._options.asyncPostRenderCleanupDelay);\n    }\n  }\n\n  protected updateCellCssStylesOnRenderedRows(addedHash?: CssStyleHash | null, removedHash?: CssStyleHash | null) {\n    let node: HTMLElement | null, columnId: number | string, addedRowHash, removedRowHash;\n    for (let row in this.rowsCache) {\n      removedRowHash = removedHash?.[row];\n      addedRowHash = addedHash?.[row];\n\n      if (removedRowHash) {\n        for (columnId in removedRowHash) {\n          if (!addedRowHash || removedRowHash[columnId] !== addedRowHash[columnId]) {\n            node = this.getCellNode(+row, this.getColumnIndex(columnId));\n            if (node) {\n              node.classList.remove(removedRowHash[columnId]);\n            }\n          }\n        }\n      }\n\n      if (addedRowHash) {\n        for (columnId in addedRowHash) {\n          if (!removedRowHash || removedRowHash[columnId] !== addedRowHash[columnId]) {\n            node = this.getCellNode(+row, this.getColumnIndex(columnId));\n            if (node) {\n              node.classList.add(addedRowHash[columnId]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Adds an \"overlay\" of CSS classes to cell DOM elements. SlickGrid can have many such overlays associated with different keys and they are frequently used by plugins. For example, SlickGrid uses this method internally to decorate selected cells with selectedCellCssClass (see options).\n   * @param key A unique key you can use in calls to setCellCssStyles and removeCellCssStyles. If a hash with that key has already been set, an exception will be thrown.\n   * @param hash A hash of additional cell CSS classes keyed by row number and then by column id. Multiple CSS classes can be specified and separated by space.\n   * @example\n   * `{\n   * \t 0: { number_column: SlickEvent; title_column: SlickEvent;\t},\n   * \t 4: { percent_column: SlickEvent; }\n   * }`\n   */\n  addCellCssStyles(key: string, hash: CssStyleHash) {\n    if (this.cellCssClasses[key]) {\n      throw new Error(`SlickGrid addCellCssStyles: cell CSS hash with key \"${key}\" already exists.`);\n    }\n\n    this.cellCssClasses[key] = hash;\n    this.updateCellCssStylesOnRenderedRows(hash, null);\n    this.trigger(this.onCellCssStylesChanged, { key, hash, grid: this });\n  }\n\n  /**\n   * Removes an \"overlay\" of CSS classes from cell DOM elements. See setCellCssStyles for more.\n   * @param key A string key.\n   */\n  removeCellCssStyles(key: string) {\n    if (!this.cellCssClasses[key]) {\n      return;\n    }\n\n    this.updateCellCssStylesOnRenderedRows(null, this.cellCssClasses[key]);\n    delete this.cellCssClasses[key];\n    this.trigger(this.onCellCssStylesChanged, { key, hash: null, grid: this });\n  }\n\n  /**\n   * Sets CSS classes to specific grid cells by calling removeCellCssStyles(key) followed by addCellCssStyles(key, hash). key is name for this set of styles so you can reference it later - to modify it or remove it, for example. hash is a per-row-index, per-column-name nested hash of CSS classes to apply.\n   * Suppose you have a grid with columns:\n   * [\"login\", \"name\", \"birthday\", \"age\", \"likes_icecream\", \"favorite_cake\"]\n   * ...and you'd like to highlight the \"birthday\" and \"age\" columns for people whose birthday is today, in this case, rows at index 0 and 9. (The first and tenth row in the grid).\n   * @param {String} key A string key. Will overwrite any data already associated with this key.\n   * @param {Object} hash A hash of additional cell CSS classes keyed by row number and then by column id. Multiple CSS classes can be specified and separated by space.\n   */\n  setCellCssStyles(key: string, hash: CssStyleHash) {\n    const prevHash = this.cellCssClasses[key];\n\n    this.cellCssClasses[key] = hash;\n    this.updateCellCssStylesOnRenderedRows(hash, prevHash);\n    this.trigger(this.onCellCssStylesChanged, { key, hash, grid: this });\n  }\n\n  /**\n   * Accepts a key name, returns the group of CSS styles defined under that name. See setCellCssStyles for more info.\n   * @param {String} key A string.\n   */\n  getCellCssStyles(key: string): CssStyleHash {\n    return this.cellCssClasses[key];\n  }\n\n  /**\n   * Flashes the cell twice by toggling the CSS class 4 times.\n   * @param {number} row A row index.\n   * @param {number} cell A column index.\n   * @param {number} [speed] (optional) - The milliseconds delay between the toggling calls. Defaults to 100 ms.\n   */\n  flashCell(row: number, cell: number, speed?: number) {\n    speed = speed || 250;\n\n    const toggleCellClass = (cellNode: HTMLElement, times: number) => {\n      if (times < 1) {\n        return;\n      }\n\n      setTimeout(() => {\n        if (times % 2 == 0) {\n          cellNode.classList.add(this._options.cellFlashingCssClass || '');\n        } else {\n          cellNode.classList.remove(this._options.cellFlashingCssClass || '');\n        }\n        toggleCellClass(cellNode, times - 1);\n      }, speed);\n    }\n\n    if (this.rowsCache[row]) {\n      const cellNode = this.getCellNode(row, cell);\n      if (cellNode) {\n        toggleCellClass(cellNode, 5);\n      }\n    }\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // Interactivity\n\n  protected handleMouseWheel(e: MouseEvent, _delta: number, deltaX: number, deltaY: number) {\n    this.scrollTop = Math.max(0, this._viewportScrollContainerY.scrollTop - (deltaY * this._options.rowHeight));\n    this.scrollLeft = this._viewportScrollContainerX.scrollLeft + (deltaX * 10);\n    let handled = this._handleScroll(true);\n    if (handled) {\n      e.preventDefault();\n    }\n  }\n\n  protected handleDragInit(e: DragEvent, dd: DragPosition) {\n    let cell = this.getCellFromEvent(e);\n    if (!cell || !this.cellExists(cell.row, cell.cell)) {\n      return false;\n    }\n\n    let retval = this.trigger(this.onDragInit, dd, e);\n    if (retval.isImmediatePropagationStopped()) {\n      return retval.getReturnValue();\n    }\n\n    // if nobody claims to be handling drag'n'drop by stopping immediate propagation,\n    // cancel out of it\n    return false;\n  }\n\n  protected handleDragStart(e: DragEvent, dd: DragPosition) {\n    let cell = this.getCellFromEvent(e);\n    if (!cell || !this.cellExists(cell.row, cell.cell)) {\n      return false;\n    }\n\n    let retval = this.trigger(this.onDragStart, dd, e);\n    if (retval.isImmediatePropagationStopped()) {\n      return retval.getReturnValue();\n    }\n\n    return false;\n  }\n\n  protected handleDrag(e: DragEvent, dd: DragPosition) {\n    return this.trigger(this.onDrag, dd, e).getReturnValue();\n  }\n\n  protected handleDragEnd(e: DragEvent, dd: DragPosition) {\n    this.trigger(this.onDragEnd, dd, e);\n  }\n\n  protected handleKeyDown(e: KeyboardEvent) {\n    const retval = this.trigger(this.onKeyDown, { row: this.activeRow, cell: this.activeCell }, e);\n    let handled: boolean | undefined | void = retval.isImmediatePropagationStopped();\n\n    if (!handled) {\n      if (!e.shiftKey && !e.altKey) {\n        if (this._options.editable && this.currentEditor?.keyCaptureList) {\n          if (this.currentEditor.keyCaptureList.indexOf((e as any).which) > -1) {\n            return;\n          }\n        }\n        if (e.which == keyCode.HOME) {\n          handled = (e.ctrlKey) ? this.navigateTop() : this.navigateRowStart();\n        } else if (e.which == keyCode.END) {\n          handled = (e.ctrlKey) ? this.navigateBottom() : this.navigateRowEnd();\n        }\n      }\n    }\n    if (!handled) {\n      if (!e.shiftKey && !e.altKey && !e.ctrlKey) {\n        // editor may specify an array of keys to bubble\n        if (this._options.editable && this.currentEditor?.keyCaptureList) {\n          if (this.currentEditor.keyCaptureList.indexOf((e as any).which) > -1) {\n            return;\n          }\n        }\n        if (e.which == keyCode.ESCAPE) {\n          if (!this.getEditorLock().isActive()) {\n            return; // no editing mode to cancel, allow bubbling and default processing (exit without cancelling the event)\n          }\n          this.cancelEditAndSetFocus();\n        } else if (e.which == keyCode.PAGE_DOWN) {\n          this.navigatePageDown();\n          handled = true;\n        } else if (e.which == keyCode.PAGE_UP) {\n          this.navigatePageUp();\n          handled = true;\n        } else if (e.which == keyCode.LEFT) {\n          handled = this.navigateLeft();\n        } else if (e.which == keyCode.RIGHT) {\n          handled = this.navigateRight();\n        } else if (e.which == keyCode.UP) {\n          handled = this.navigateUp();\n        } else if (e.which == keyCode.DOWN) {\n          handled = this.navigateDown();\n        } else if (e.which == keyCode.TAB) {\n          handled = this.navigateNext();\n        } else if (e.which == keyCode.ENTER) {\n          if (this._options.editable) {\n            if (this.currentEditor) {\n              // adding new row\n              if (this.activeRow === this.getDataLength()) {\n                this.navigateDown();\n              } else {\n                this.commitEditAndSetFocus();\n              }\n            } else {\n              if (this.getEditorLock().commitCurrentEdit()) {\n                this.makeActiveCellEditable(undefined, undefined, e);\n              }\n            }\n          }\n          handled = true;\n        }\n      } else if (e.which == keyCode.TAB && e.shiftKey && !e.ctrlKey && !e.altKey) {\n        handled = this.navigatePrev();\n      }\n    }\n\n    if (handled) {\n      // the event has been handled so don't let parent element (bubbling/propagation) or browser (default) handle it\n      e.stopPropagation();\n      e.preventDefault();\n      try {\n        (e as any).originalEvent.keyCode = 0; // prevent default behaviour for special keys in IE browsers (F3, F5, etc.)\n      }\n      // ignore exceptions - setting the original event's keycode throws access denied exception for \"Ctrl\"\n      // (hitting control key only, nothing else), \"Shift\" (maybe others)\n      catch (error) { }\n    }\n  }\n\n  protected handleClick(evt: any) {\n\n    let e = evt;\n    if (e instanceof SlickEventData) {\n      e = evt.getNativeEvent();\n    } else {\n      evt = undefined;\n    }\n\n    if (!this.currentEditor) {\n      // if this click resulted in some cell child node getting focus,\n      // don't steal it back - keyboard events will still bubble up\n      // IE9+ seems to default DIVs to tabIndex=0 instead of -1, so check for cell clicks directly.\n      if (e.target !== document.activeElement || e.target.classList.contains('slick-cell')) {\n        let selection = this.getTextSelection(); //store text-selection and restore it after\n        this.setFocus();\n        this.setTextSelection(selection as Range);\n      }\n    }\n\n    let cell = this.getCellFromEvent(e);\n    if (!cell || (this.currentEditor !== null && this.activeRow == cell.row && this.activeCell == cell.cell)) {\n      return;\n    }\n\n    evt = this.trigger(this.onClick, { row: cell.row, cell: cell.cell }, evt || e);\n    if (evt.isImmediatePropagationStopped()) {\n      return;\n    }\n\n    // this optimisation causes trouble - MLeibman #329\n    //if ((activeCell !== cell.cell || activeRow !== cell.row) && canCellBeActive(cell.row, cell.cell)) {\n    if (this.canCellBeActive(cell.row, cell.cell)) {\n      if (!this.getEditorLock().isActive() || this.getEditorLock().commitCurrentEdit()) {\n        this.scrollRowIntoView(cell.row, false);\n\n        let preClickModeOn = (e.target && e.target.className === preClickClassName);\n        let column = this.columns[cell.cell];\n        let suppressActiveCellChangedEvent = !!(this._options.editable && column && column.editor && this._options.suppressActiveCellChangeOnEdit);\n        this.setActiveCellInternal(this.getCellNode(cell.row, cell.cell), null, preClickModeOn, suppressActiveCellChangedEvent, e);\n      }\n    }\n  }\n\n  protected handleContextMenu(e: Event & { target: HTMLElement; }) {\n    let cell = e.target.closest('.slick-cell');\n    if (!cell) {\n      return;\n    }\n\n    // are we editing this cell?\n    if (this.activeCellNode === cell && this.currentEditor !== null) {\n      return;\n    }\n\n    this.trigger(this.onContextMenu, {}, e);\n  }\n\n  protected handleDblClick(e: MouseEvent) {\n    let cell = this.getCellFromEvent(e);\n    if (!cell || (this.currentEditor !== null && this.activeRow == cell.row && this.activeCell == cell.cell)) {\n      return;\n    }\n\n    this.trigger(this.onDblClick, { row: cell.row, cell: cell.cell }, e);\n    if (e.defaultPrevented) {\n      return;\n    }\n\n    if (this._options.editable) {\n      this.gotoCell(cell.row, cell.cell, true, e);\n    }\n  }\n\n  protected handleHeaderMouseEnter(e: MouseEvent & { target: HTMLElement; }) {\n    const c = Utils.storage.get(e.target.closest('.slick-header-column'), 'column');\n    if (!c) {\n      return;\n    }\n    this.trigger(this.onHeaderMouseEnter, {\n      column: c,\n      grid: this\n    }, e);\n  }\n\n  protected handleHeaderMouseLeave(e: MouseEvent & { target: HTMLElement; }) {\n    const c = Utils.storage.get(e.target.closest('.slick-header-column'), 'column');\n    if (!c) {\n      return;\n    }\n    this.trigger(this.onHeaderMouseLeave, {\n      column: c,\n      grid: this\n    }, e);\n  }\n\n  protected handleHeaderRowMouseEnter(e: MouseEvent & { target: HTMLElement; }) {\n    const c = Utils.storage.get(e.target.closest('.slick-headerrow-column'), 'column');\n    if (!c) {\n      return;\n    }\n    this.trigger(this.onHeaderRowMouseEnter, {\n      column: c,\n      grid: this\n    }, e);\n  }\n\n  protected handleHeaderRowMouseLeave(e: MouseEvent & { target: HTMLElement; }) {\n    const c = Utils.storage.get(e.target.closest('.slick-headerrow-column'), 'column');\n    if (!c) {\n      return;\n    }\n    this.trigger(this.onHeaderRowMouseLeave, {\n      column: c,\n      grid: this\n    }, e);\n  }\n\n  protected handleHeaderContextMenu(e: MouseEvent & { target: HTMLElement; }) {\n    let header = e.target.closest('.slick-header-column');\n    let column = header && Utils.storage.get(header, 'column');\n    this.trigger(this.onHeaderContextMenu, { column: column }, e);\n  }\n\n  protected handleHeaderClick(e: MouseEvent & { target: HTMLElement; }) {\n    if (this.columnResizeDragging) {\n      return;\n    }\n\n    let header = e.target.closest('.slick-header-column');\n    let column = header && Utils.storage.get(header, 'column');\n    if (column) {\n      this.trigger(this.onHeaderClick, { column: column }, e);\n    }\n  }\n\n  protected handleFooterContextMenu(e: MouseEvent & { target: HTMLElement; }) {\n    let footer = e.target.closest('.slick-footerrow-column');\n    let column = footer && Utils.storage.get(footer, 'column');\n    this.trigger(this.onFooterContextMenu, { column: column }, e);\n  }\n\n  protected handleFooterClick(e: MouseEvent & { target: HTMLElement; }) {\n    let footer = e.target.closest('.slick-footerrow-column');\n    let column = footer && Utils.storage.get(footer, 'column');\n    this.trigger(this.onFooterClick, { column: column }, e);\n  }\n\n  protected handleCellMouseOver(e: MouseEvent & { target: HTMLElement; }) {\n    this.trigger(this.onMouseEnter, {}, e);\n  }\n\n  protected handleCellMouseOut(e: MouseEvent & { target: HTMLElement; }) {\n    this.trigger(this.onMouseLeave, {}, e);\n  }\n\n  protected cellExists(row: number, cell: number) {\n    return !(row < 0 || row >= this.getDataLength() || cell < 0 || cell >= this.columns.length);\n  }\n\n  /**\n   * Returns a hash containing row and cell indexes. Coordinates are relative to the top left corner of the grid beginning with the first row (not including the column headers).\n   * @param x An x coordinate.\n   * @param y A y coordinate.\n   */\n  getCellFromPoint(x: number, y: number) {\n    let row = this.getRowFromPosition(y);\n    let cell = 0;\n\n    let w = 0;\n    for (let i = 0; i < this.columns.length && w < x; i++) {\n      if (!this.columns[i] || this.columns[i].hidden) continue;\n\n      w += this.columns[i].width as number;\n      cell++;\n    }\n\n    if (cell < 0) {\n      cell = 0;\n    }\n\n    return { row, cell: (cell - 1) };\n  }\n\n  protected getCellFromNode(cellNode: HTMLElement) {\n    // read column number from .l<columnNumber> CSS class\n    let cls = /l\\d+/.exec(cellNode.className);\n    if (!cls) {\n      throw new Error(`SlickGrid getCellFromNode: cannot get cell - ${cellNode.className}`);\n    }\n    return parseInt(cls[0].substr(1, cls[0].length - 1), 10);\n  }\n\n  protected getRowFromNode(rowNode: HTMLElement): number | null {\n    for (let row in this.rowsCache) {\n      for (let i in this.rowsCache[row].rowNode) {\n        if (this.rowsCache[row].rowNode[i] === rowNode) {\n          return (row ? parseInt(row) : 0);\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get frozen (pinned) row offset\n   * @param {Number} row - grid row number\n   */\n  getFrozenRowOffset(row: number) {\n    //let offset = ( hasFrozenRows ) ? ( this._options.frozenBottom ) ? ( row >= actualFrozenRow ) ? ( h < viewportTopH ) ? ( actualFrozenRow * this._options.rowHeight ) : h : 0 : ( row >= actualFrozenRow ) ? frozenRowsHeight : 0 : 0; // WTF?\n    let offset = 0;\n    if (this.hasFrozenRows) {\n      if (this._options.frozenBottom) {\n        if (row >= this.actualFrozenRow) {\n          if (this.h < this.viewportTopH) {\n            offset = (this.actualFrozenRow * this._options.rowHeight);\n          } else {\n            offset = this.h;\n          }\n        } else {\n          offset = 0;\n        }\n      }\n      else {\n        if (row >= this.actualFrozenRow) {\n          offset = this.frozenRowsHeight;\n        } else {\n          offset = 0;\n        }\n      }\n    } else {\n      offset = 0;\n    }\n\n    return offset;\n  }\n\n  /**\n   * Returns a hash containing row and cell indexes from a standard W3C event.\n   * @param {*} event A standard W3C event.\n   */\n  getCellFromEvent(e: Event | SlickEventData_) {\n    if (e instanceof SlickEventData) {\n      e = e.getNativeEvent();\n    }\n\n    let targetEvent: any = (e as TouchEvent).touches ? (e as TouchEvent).touches[0] : e;\n    let row: number | null;\n    let cell: number | null;\n\n    let cellNode = (e as Event & { target: HTMLElement }).target.closest('.slick-cell');\n    if (!cellNode) {\n      return null;\n    }\n\n    row = this.getRowFromNode(cellNode.parentNode as HTMLElement);\n\n    if (this.hasFrozenRows) {\n      let rowOffset = 0;\n      let c = Utils.offset(Utils.parents(cellNode, '.grid-canvas')[0] as HTMLElement);\n      let isBottom = Utils.parents(cellNode, '.grid-canvas-bottom').length;\n\n      if (isBottom) {\n        rowOffset = (this._options.frozenBottom) ? Utils.height(this._canvasTopL) as number : this.frozenRowsHeight;\n      }\n\n      row = this.getCellFromPoint(targetEvent.clientX - c!.left, targetEvent.clientY - c!.top + rowOffset + document.documentElement.scrollTop).row;\n    }\n\n    cell = this.getCellFromNode(cellNode as HTMLElement);\n\n    if (row == null || cell == null) {\n      return null;\n    } else {\n      return { row, cell };\n    }\n  }\n\n  /**\n   * Returns an object representing information about a cell's position. All coordinates are absolute and take into consideration the visibility and scrolling position of all ancestors.\n   * @param row A row number.\n   * @param cell A column number.\n   */\n  getCellNodeBox(row: number, cell: number) {\n    if (!this.cellExists(row, cell)) {\n      return null;\n    }\n\n    let frozenRowOffset = this.getFrozenRowOffset(row);\n\n    let y1 = this.getRowTop(row) - frozenRowOffset;\n    let y2 = y1 + this._options.rowHeight - 1;\n    let x1 = 0;\n    for (let i = 0; i < cell; i++) {\n      if (!this.columns[i] || this.columns[i].hidden) continue;\n\n      x1 += (this.columns[i].width || 0);\n\n      if (this._options.frozenColumn == i) {\n        x1 = 0;\n      }\n    }\n    let x2 = x1 + (this.columns[cell]?.width || 0);\n\n    return {\n      top: y1,\n      left: x1,\n      bottom: y2,\n      right: x2\n    };\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // Cell switching\n\n  /**  Resets active cell. */\n  resetActiveCell() {\n    this.setActiveCellInternal(null, false);\n  }\n\n  /** @alias `setFocus` */\n  focus() {\n    this.setFocus();\n  }\n\n  protected setFocus() {\n    if (this.tabbingDirection == -1) {\n      this._focusSink.focus();\n    } else {\n      this._focusSink2.focus();\n    }\n  }\n\n  /** Scroll to a specific cell and make it into the view */\n  scrollCellIntoView(row: number, cell: number, doPaging?: boolean) {\n    this.scrollRowIntoView(row, doPaging);\n\n    if (cell <= this._options.frozenColumn) {\n      return;\n    }\n\n    let colspan = this.getColspan(row, cell);\n    this.internalScrollColumnIntoView(this.columnPosLeft[cell], this.columnPosRight[cell + (colspan > 1 ? colspan - 1 : 0)]);\n  }\n\n  protected internalScrollColumnIntoView(left: number, right: number) {\n    let scrollRight = this.scrollLeft + (Utils.width(this._viewportScrollContainerX) as number) - (this.viewportHasVScroll ? (this.scrollbarDimensions?.width ?? 0) : 0);\n\n    if (left < this.scrollLeft) {\n      this._viewportScrollContainerX.scrollLeft = left;\n      this.handleScroll();\n      this.render();\n    } else if (right > scrollRight) {\n      this._viewportScrollContainerX.scrollLeft = Math.min(left, right - this._viewportScrollContainerX.clientWidth);\n      this.handleScroll();\n      this.render();\n    }\n  }\n\n  /**\n   * Scroll to a specific column and show it into the viewport\n   * @param {Number} cell - cell column number\n   */\n  scrollColumnIntoView(cell: number) {\n    this.internalScrollColumnIntoView(this.columnPosLeft[cell], this.columnPosRight[cell]);\n  }\n\n  protected setActiveCellInternal(newCell: HTMLDivElement | null, opt_editMode?: boolean | null, preClickModeOn?: boolean | null, suppressActiveCellChangedEvent?: boolean, e?: Event | SlickEvent_) {\n    if (this.activeCellNode !== null) {\n      this.makeActiveCellNormal();\n      this.activeCellNode.classList.remove('active');\n      if (this.rowsCache[this.activeRow]) {\n        this.rowsCache[this.activeRow].rowNode.forEach((node) => node.classList.remove('active'));\n      }\n    }\n\n    // let activeCellChanged = (this.activeCellNode !== newCell);\n    this.activeCellNode = newCell;\n\n    if (this.activeCellNode != null) {\n      let activeCellOffset = Utils.offset(this.activeCellNode);\n      let rowOffset = Math.floor(Utils.offset(Utils.parents(this.activeCellNode, '.grid-canvas')[0] as HTMLElement)!.top);\n      let isBottom = Utils.parents(this.activeCellNode, '.grid-canvas-bottom').length;\n\n      if (this.hasFrozenRows && isBottom) {\n        rowOffset -= (this._options.frozenBottom)\n          ? Utils.height(this._canvasTopL) as number\n          : this.frozenRowsHeight;\n      }\n\n      let cell = this.getCellFromPoint(activeCellOffset!.left, Math.ceil(activeCellOffset!.top) - rowOffset);\n      this.activeRow = cell.row;\n      this.activeCell = this.activePosX = this.activeCell = this.activePosX = this.getCellFromNode(this.activeCellNode);\n\n      if (opt_editMode == null) {\n        opt_editMode = (this.activeRow == this.getDataLength()) || this._options.autoEdit;\n      }\n\n      if (this._options.showCellSelection) {\n        this.activeCellNode.classList.add('active');\n        if (this.rowsCache[this.activeRow]) {\n          this.rowsCache[this.activeRow].rowNode.forEach((node) => {\n            node.classList.add('active');\n          });\n        }\n      }\n\n      if (this._options.editable && opt_editMode && this.isCellPotentiallyEditable(this.activeRow, this.activeCell)) {\n        clearTimeout(this.h_editorLoader);\n\n        if (this._options.asyncEditorLoading) {\n          this.h_editorLoader = setTimeout(() => {\n            this.makeActiveCellEditable(undefined, preClickModeOn, e);\n          }, this._options.asyncEditorLoadDelay);\n        } else {\n          this.makeActiveCellEditable(undefined, preClickModeOn, e);\n        }\n      }\n    } else {\n      this.activeRow = this.activeCell = null as any;\n    }\n\n    // this optimisation causes trouble - MLeibman #329\n    //if (activeCellChanged) {\n    if (!suppressActiveCellChangedEvent) {\n      this.trigger<OnActiveCellChangedEventArgs | null>(this.onActiveCellChanged, this.getActiveCell() as OnActiveCellChangedEventArgs);\n    }\n    //}\n  }\n\n  protected clearTextSelection() {\n    if ((document as any).selection?.empty) {\n      try {\n        //IE fails here if selected element is not in dom\n        (document as any).selection.empty();\n      } catch (e) { }\n    } else if (window.getSelection) {\n      let sel = window.getSelection();\n      if (sel?.removeAllRanges) {\n        sel.removeAllRanges();\n      }\n    }\n  }\n\n  protected isCellPotentiallyEditable(row: number, cell: number) {\n    let dataLength = this.getDataLength();\n    // is the data for this row loaded?\n    if (row < dataLength && !this.getDataItem(row)) {\n      return false;\n    }\n\n    // are we in the Add New row? Can we create new from this cell?\n    if (this.columns[cell].cannotTriggerInsert && row >= dataLength) {\n      return false;\n    }\n\n    // does this cell have an editor?\n    if (!this.columns[cell] || this.columns[cell].hidden || !this.getEditor(row, cell)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected makeActiveCellNormal() {\n    if (!this.currentEditor) {\n      return;\n    }\n    this.trigger(this.onBeforeCellEditorDestroy, { editor: this.currentEditor });\n    this.currentEditor.destroy();\n    this.currentEditor = null;\n\n    if (this.activeCellNode) {\n      let d = this.getDataItem(this.activeRow);\n      this.activeCellNode.classList.remove('editable');\n      this.activeCellNode.classList.remove('invalid');\n      if (d) {\n        let column = this.columns[this.activeCell];\n        let formatter = this.getFormatter(this.activeRow, column);\n        let formatterResult = formatter(this.activeRow, this.activeCell, this.getDataItemValueForColumn(d, column), column, d, this);\n        this.applyFormatResultToCellNode(formatterResult, this.activeCellNode);\n        this.invalidatePostProcessingResults(this.activeRow);\n      }\n    }\n\n    // if there previously was text selected on a page (such as selected text in the edit cell just removed),\n    // IE can't set focus to anything else correctly\n    if (navigator.userAgent.toLowerCase().match(/msie/)) {\n      this.clearTextSelection();\n    }\n\n    this.getEditorLock().deactivate(this.editController);\n  }\n\n\n  editActiveCell(editor?: Editor, preClickModeOn?: boolean | null, e?: Event) {\n    this.makeActiveCellEditable(editor, preClickModeOn, e);\n  }\n\n  protected makeActiveCellEditable(editor?: Editor, preClickModeOn?: boolean | null, e?: Event | SlickEvent_) {\n    if (!this.activeCellNode) {\n      return;\n    }\n    if (!this._options.editable) {\n      throw new Error('SlickGrid makeActiveCellEditable : should never get called when this._options.editable is false');\n    }\n\n    // cancel pending async call if there is one\n    clearTimeout(this.h_editorLoader);\n\n    if (!this.isCellPotentiallyEditable(this.activeRow, this.activeCell)) {\n      return;\n    }\n\n    let columnDef = this.columns[this.activeCell];\n    let item = this.getDataItem(this.activeRow);\n\n    if (this.trigger(this.onBeforeEditCell, { row: this.activeRow, cell: this.activeCell, item: item, column: columnDef, target: 'grid' }).getReturnValue() === false) {\n      this.setFocus();\n      return;\n    }\n\n    this.getEditorLock().activate(this.editController);\n    this.activeCellNode.classList.add('editable');\n\n    let useEditor: any = editor || this.getEditor(this.activeRow, this.activeCell);\n\n    // don't clear the cell if a custom editor is passed through\n    if (!editor && !useEditor.suppressClearOnEdit) {\n      this.activeCellNode.innerHTML = '';\n    }\n\n    let metadata = (this.data as CustomDataView)?.getItemMetadata?.(this.activeRow);\n    metadata = metadata?.columns as any;\n    let columnMetaData = metadata && (metadata[columnDef.id] || metadata[this.activeCell]);\n\n    this.currentEditor = new useEditor({\n      grid: this,\n      gridPosition: this.absBox(this._container),\n      position: this.absBox(this.activeCellNode),\n      container: this.activeCellNode,\n      column: columnDef,\n      columnMetaData: columnMetaData,\n      item: item || {},\n      event: e,\n      commitChanges: this.commitEditAndSetFocus.bind(this),\n      cancelChanges: this.cancelEditAndSetFocus.bind(this)\n    });\n\n    if (item && this.currentEditor) {\n      this.currentEditor.loadValue(item);\n      if (preClickModeOn && this.currentEditor?.preClick) {\n        this.currentEditor.preClick();\n      }\n    }\n\n    this.serializedEditorValue = this.currentEditor?.serializeValue();\n\n    if (this.currentEditor?.position) {\n      this.handleActiveCellPositionChange();\n    }\n  }\n\n  protected commitEditAndSetFocus() {\n    // if the commit fails, it would do so due to a validation error\n    // if so, do not steal the focus from the editor\n    if (this.getEditorLock().commitCurrentEdit()) {\n      this.setFocus();\n      if (this._options.autoEdit && !this._options.autoCommitEdit) {\n        this.navigateDown();\n      }\n    }\n  }\n\n  protected cancelEditAndSetFocus() {\n    if (this.getEditorLock().cancelCurrentEdit()) {\n      this.setFocus();\n    }\n  }\n\n  protected absBox(elem: HTMLElement) {\n    let box = {\n      top: elem.offsetTop,\n      left: elem.offsetLeft,\n      bottom: 0,\n      right: 0,\n      width: elem.offsetWidth,\n      height: elem.offsetWidth,\n      visible: true\n    };\n    box.bottom = box.top + box.height;\n    box.right = box.left + box.width;\n\n    // walk up the tree\n    let offsetParent = elem.offsetParent;\n    while ((elem = elem.parentNode as HTMLElement) !== document.body) {\n      if (!elem || !elem.parentNode) {\n        break;\n      }\n\n      const styles = getComputedStyle(elem);\n      if (box.visible && elem.scrollHeight !== elem.offsetHeight && styles['overflowY'] !== 'visible') {\n        box.visible = box.bottom > elem.scrollTop && box.top < elem.scrollTop + elem.clientHeight;\n      }\n\n      if (box.visible && elem.scrollWidth !== elem.offsetWidth && styles['overflowX'] !== 'visible') {\n        box.visible = box.right > elem.scrollLeft && box.left < elem.scrollLeft + elem.clientWidth;\n      }\n\n      box.left -= elem.scrollLeft;\n      box.top -= elem.scrollTop;\n\n      if (elem === offsetParent) {\n        box.left += elem.offsetLeft;\n        box.top += elem.offsetTop;\n        offsetParent = elem.offsetParent;\n      }\n\n      box.bottom = box.top + box.height;\n      box.right = box.left + box.width;\n    }\n\n    return box;\n  }\n\n  /** Returns an object representing information about the active cell's position. All coordinates are absolute and take into consideration the visibility and scrolling position of all ancestors. */\n  getActiveCellPosition() {\n    return this.absBox(this.activeCellNode as HTMLElement);\n  }\n\n  /** Get the Grid Position */\n  getGridPosition() {\n    return this.absBox(this._container);\n  }\n\n  protected handleActiveCellPositionChange() {\n    if (!this.activeCellNode) {\n      return;\n    }\n\n    this.trigger(this.onActiveCellPositionChanged, {});\n\n    if (this.currentEditor) {\n      let cellBox = this.getActiveCellPosition();\n      if (this.currentEditor.show && this.currentEditor.hide) {\n        if (!cellBox.visible) {\n          this.currentEditor.hide();\n        } else {\n          this.currentEditor.show();\n        }\n      }\n\n      if (this.currentEditor.position) {\n        this.currentEditor.position(cellBox);\n      }\n    }\n  }\n\n  /** Returns the active cell editor. If there is no actively edited cell, null is returned.   */\n  getCellEditor() {\n    return this.currentEditor;\n  }\n\n  /**\n   * Returns an object representing the coordinates of the currently active cell:\n   * @example\t`{ row: activeRow, cell: activeCell }`\n   */\n  getActiveCell() {\n    if (!this.activeCellNode) {\n      return null;\n    }\n    return { row: this.activeRow, cell: this.activeCell };\n  }\n\n  /** Returns the DOM element containing the currently active cell. If no cell is active, null is returned. */\n  getActiveCellNode() {\n    return this.activeCellNode;\n  }\n\n  //This get/set methods are used for keeping text-selection. These don't consider IE because they don't loose text-selection.\n  //Fix for firefox selection. See https://github.com/mleibman/SlickGrid/pull/746/files\n  protected getTextSelection() {\n    let textSelection: Range | null = null;\n    if (window.getSelection) {\n      let selection = window.getSelection();\n      if ((selection?.rangeCount ?? 0) > 0) {\n        textSelection = selection!.getRangeAt(0);\n      }\n    }\n    return textSelection;\n  }\n\n  protected setTextSelection(selection: Range) {\n    if (window.getSelection && selection) {\n      let target = window.getSelection();\n      if (target) {\n        target.removeAllRanges();\n        target.addRange(selection);\n      }\n    }\n  }\n\n  /**\n   * Scroll to a specific row and make it into the view\n   * @param {Number} row - grid row number\n   * @param {Boolean} doPaging - scroll when pagination is enabled\n   */\n  scrollRowIntoView(row: number, doPaging?: boolean) {\n    if (!this.hasFrozenRows ||\n      (!this._options.frozenBottom && row > this.actualFrozenRow - 1) ||\n      (this._options.frozenBottom && row < this.actualFrozenRow - 1)) {\n\n      let viewportScrollH = Utils.height(this._viewportScrollContainerY) as number;\n\n      // if frozen row on top\n      // subtract number of frozen row\n      let rowNumber = (this.hasFrozenRows && !this._options.frozenBottom ? row - this._options.frozenRow : row);\n\n      let rowAtTop = rowNumber * this._options.rowHeight;\n      let rowAtBottom = (rowNumber + 1) * this._options.rowHeight\n        - viewportScrollH\n        + (this.viewportHasHScroll ? (this.scrollbarDimensions?.height ?? 0) : 0);\n\n      // need to page down?\n      if ((rowNumber + 1) * this._options.rowHeight > this.scrollTop + viewportScrollH + this.offset) {\n        this.scrollTo(doPaging ? rowAtTop : rowAtBottom);\n        this.render();\n      }\n      // or page up?\n      else if (rowNumber * this._options.rowHeight < this.scrollTop + this.offset) {\n        this.scrollTo(doPaging ? rowAtBottom : rowAtTop);\n        this.render();\n      }\n    }\n  }\n\n  /**\n   * Scroll to the top row and make it into the view\n   * @param {Number} row - grid row number\n   */\n  scrollRowToTop(row: number) {\n    this.scrollTo(row * this._options.rowHeight as number);\n    this.render();\n  }\n\n  protected scrollPage(dir: number) {\n    let deltaRows = dir * this.numVisibleRows;\n    /// First fully visible row crosses the line with\n    /// y == bottomOfTopmostFullyVisibleRow\n    let bottomOfTopmostFullyVisibleRow = this.scrollTop + this._options.rowHeight - 1;\n    this.scrollTo((this.getRowFromPosition(bottomOfTopmostFullyVisibleRow) + deltaRows) * this._options.rowHeight);\n    this.render();\n\n    if (this._options.enableCellNavigation && this.activeRow != null) {\n      let row = this.activeRow + deltaRows;\n      let dataLengthIncludingAddNew = this.getDataLengthIncludingAddNew();\n      if (row >= dataLengthIncludingAddNew) {\n        row = dataLengthIncludingAddNew - 1;\n      }\n      if (row < 0) {\n        row = 0;\n      }\n\n      let cell = 0;\n      let prevCell: number | null = null;\n      let prevActivePosX = this.activePosX;\n      while (cell <= this.activePosX) {\n        if (this.canCellBeActive(row, cell)) {\n          prevCell = cell;\n        }\n        cell += this.getColspan(row, cell);\n      }\n\n      if (prevCell !== null) {\n        this.setActiveCellInternal(this.getCellNode(row, prevCell));\n        this.activePosX = prevActivePosX;\n      } else {\n        this.resetActiveCell();\n      }\n    }\n  }\n\n  /** Navigate (scroll) by a page down */\n  navigatePageDown() {\n    this.scrollPage(1);\n  }\n\n  /** Navigate (scroll) by a page up */\n  navigatePageUp() {\n    this.scrollPage(-1);\n  }\n\n  /** Navigate to the top of the grid */\n  navigateTop() {\n    this.navigateToRow(0);\n  }\n\n  /** Navigate to the bottom of the grid */\n  navigateBottom() {\n    this.navigateToRow(this.getDataLength() - 1);\n  }\n\n  protected navigateToRow(row: number) {\n    let num_rows = this.getDataLength();\n    if (!num_rows) { return true; }\n\n    if (row < 0) {\n      row = 0;\n    } else if (row >= num_rows) {\n      row = num_rows - 1;\n    }\n\n    this.scrollCellIntoView(row, 0, true);\n    if (this._options.enableCellNavigation && this.activeRow != null) {\n      let cell = 0;\n      let prevCell: number | null = null;\n      let prevActivePosX = this.activePosX;\n      while (cell <= this.activePosX) {\n        if (this.canCellBeActive(row, cell)) {\n          prevCell = cell;\n        }\n        cell += this.getColspan(row, cell);\n      }\n\n      if (prevCell !== null) {\n        this.setActiveCellInternal(this.getCellNode(row, prevCell));\n        this.activePosX = prevActivePosX;\n      } else {\n        this.resetActiveCell();\n      }\n    }\n    return true;\n  }\n\n  protected getColspan(row: number, cell: number): number {\n    let metadata = (this.data as CustomDataView)?.getItemMetadata?.(row);\n    if (!metadata || !metadata.columns) {\n      return 1;\n    }\n\n    let columnData = metadata.columns[this.columns[cell].id] || metadata.columns[cell];\n    let colspan = (columnData && columnData.colspan);\n    if (colspan === '*') {\n      colspan = this.columns.length - cell;\n    } else {\n      colspan = colspan || 1;\n    }\n\n    return colspan as number;\n  }\n\n  protected findFirstFocusableCell(row: number) {\n    let cell = 0;\n    while (cell < this.columns.length) {\n      if (this.canCellBeActive(row, cell)) {\n        return cell;\n      }\n      cell += this.getColspan(row, cell);\n    }\n    return null;\n  }\n\n  protected findLastFocusableCell(row: number) {\n    let cell = 0;\n    let lastFocusableCell: number | null = null;\n    while (cell < this.columns.length) {\n      if (this.canCellBeActive(row, cell)) {\n        lastFocusableCell = cell;\n      }\n      cell += this.getColspan(row, cell);\n    }\n    return lastFocusableCell;\n  }\n\n  protected gotoRight(row: number, cell: number, _posX?: number) {\n    if (cell >= this.columns.length) {\n      return null;\n    }\n\n    do {\n      cell += this.getColspan(row, cell);\n    }\n    while (cell < this.columns.length && !this.canCellBeActive(row, cell));\n\n    if (cell < this.columns.length) {\n      return {\n        row,\n        cell,\n        posX: cell\n      };\n    }\n    return null;\n  }\n\n  protected gotoLeft(row: number, cell: number, _posX?: number) {\n    if (cell <= 0) {\n      return null;\n    }\n\n    let firstFocusableCell = this.findFirstFocusableCell(row);\n    if (firstFocusableCell === null || firstFocusableCell >= cell) {\n      return null;\n    }\n\n    let prev = {\n      row,\n      cell: firstFocusableCell,\n      posX: firstFocusableCell\n    };\n    let pos;\n    while (true) {\n      pos = this.gotoRight(prev.row, prev.cell, prev.posX);\n      if (!pos) {\n        return null;\n      }\n      if (pos.cell >= cell) {\n        return prev;\n      }\n      prev = pos;\n    }\n  }\n\n  protected gotoDown(row: number, cell: number, posX: number) {\n    let prevCell;\n    let dataLengthIncludingAddNew = this.getDataLengthIncludingAddNew();\n    while (true) {\n      if (++row >= dataLengthIncludingAddNew) {\n        return null;\n      }\n\n      prevCell = cell = 0;\n      while (cell <= posX) {\n        prevCell = cell;\n        cell += this.getColspan(row, cell);\n      }\n\n      if (this.canCellBeActive(row, prevCell)) {\n        return {\n          row,\n          cell: prevCell,\n          posX\n        };\n      }\n    }\n  }\n\n  protected gotoUp(row: number, cell: number, posX: number) {\n    let prevCell;\n    while (true) {\n      if (--row < 0) {\n        return null;\n      }\n\n      prevCell = cell = 0;\n      while (cell <= posX) {\n        prevCell = cell;\n        cell += this.getColspan(row, cell);\n      }\n\n      if (this.canCellBeActive(row, prevCell)) {\n        return {\n          row,\n          cell: prevCell,\n          posX\n        };\n      }\n    }\n  }\n\n  protected gotoNext(row: number, cell: number, posX?: number) {\n    if (row == null && cell == null) {\n      row = cell = posX = 0;\n      if (this.canCellBeActive(row, cell)) {\n        return {\n          row,\n          cell,\n          posX: cell\n        };\n      }\n    }\n\n    let pos = this.gotoRight(row, cell, posX);\n    if (pos) {\n      return pos;\n    }\n\n    let firstFocusableCell: number | null = null;\n    let dataLengthIncludingAddNew = this.getDataLengthIncludingAddNew();\n\n    // if at last row, cycle through columns rather than get stuck in the last one\n    if (row === dataLengthIncludingAddNew - 1) { row--; }\n\n    while (++row < dataLengthIncludingAddNew) {\n      firstFocusableCell = this.findFirstFocusableCell(row);\n      if (firstFocusableCell !== null) {\n        return {\n          row,\n          cell: firstFocusableCell,\n          posX: firstFocusableCell\n        };\n      }\n    }\n    return null;\n  }\n\n  protected gotoPrev(row: number, cell: number, posX?: number) {\n    if (row == null && cell == null) {\n      row = this.getDataLengthIncludingAddNew() - 1;\n      cell = posX = this.columns.length - 1;\n      if (this.canCellBeActive(row, cell)) {\n        return {\n          row,\n          cell,\n          posX: cell\n        };\n      }\n    }\n\n    let pos;\n    let lastSelectableCell;\n    while (!pos) {\n      pos = this.gotoLeft(row, cell, posX);\n      if (pos) {\n        break;\n      }\n      if (--row < 0) {\n        return null;\n      }\n\n      cell = 0;\n      lastSelectableCell = this.findLastFocusableCell(row);\n      if (lastSelectableCell !== null) {\n        pos = {\n          row,\n          cell: lastSelectableCell,\n          posX: lastSelectableCell\n        };\n      }\n    }\n    return pos;\n  }\n\n  protected gotoRowStart(row: number, _cell: number, _posX?: number) {\n    let newCell = this.findFirstFocusableCell(row);\n    if (newCell === null) return null;\n\n    return {\n      row,\n      cell: newCell,\n      posX: newCell\n    };\n  }\n\n  protected gotoRowEnd(row: number, _cell: number, _posX?: number) {\n    let newCell = this.findLastFocusableCell(row);\n    if (newCell === null) return null;\n\n    return {\n      row,\n      cell: newCell,\n      posX: newCell\n    };\n  }\n\n  /** Switches the active cell one cell right skipping unselectable cells. Unline navigateNext, navigateRight stops at the last cell of the row. Returns a boolean saying whether it was able to complete or not. */\n  navigateRight() {\n    return this.navigate('right');\n  }\n\n  /** Switches the active cell one cell left skipping unselectable cells. Unline navigatePrev, navigateLeft stops at the first cell of the row. Returns a boolean saying whether it was able to complete or not. */\n  navigateLeft() {\n    return this.navigate('left');\n  }\n\n  /** Switches the active cell one row down skipping unselectable cells. Returns a boolean saying whether it was able to complete or not. */\n  navigateDown() {\n    return this.navigate('down');\n  }\n\n  /** Switches the active cell one row up skipping unselectable cells. Returns a boolean saying whether it was able to complete or not. */\n  navigateUp() {\n    return this.navigate('up');\n  }\n\n  /** Tabs over active cell to the next selectable cell. Returns a boolean saying whether it was able to complete or not. */\n  navigateNext() {\n    return this.navigate('next');\n  }\n\n  /** Tabs over active cell to the previous selectable cell. Returns a boolean saying whether it was able to complete or not. */\n  navigatePrev() {\n    return this.navigate('prev');\n  }\n\n  /** Navigate to the start row in the grid */\n  navigateRowStart() {\n    return this.navigate('home');\n  }\n\n  /** Navigate to the end row in the grid */\n  navigateRowEnd() {\n    return this.navigate('end');\n  }\n\n  /**\n   * @param {string} dir Navigation direction.\n   * @return {boolean} Whether navigation resulted in a change of active cell.\n   */\n  protected navigate(dir: 'up' | 'down' | 'left' | 'right' | 'prev' | 'next' | 'home' | 'end') {\n    if (!this._options.enableCellNavigation) {\n      return false;\n    }\n\n    if (!this.activeCellNode && dir !== 'prev' && dir !== 'next') {\n      return false;\n    }\n\n    if (!this.getEditorLock().commitCurrentEdit()) {\n      return true;\n    }\n    this.setFocus();\n\n    let tabbingDirections = {\n      'up': -1,\n      'down': 1,\n      'left': -1,\n      'right': 1,\n      'prev': -1,\n      'next': 1,\n      'home': -1,\n      'end': 1\n    };\n    this.tabbingDirection = tabbingDirections[dir];\n\n    let stepFunctions = {\n      'up': this.gotoUp,\n      'down': this.gotoDown,\n      'left': this.gotoLeft,\n      'right': this.gotoRight,\n      'prev': this.gotoPrev,\n      'next': this.gotoNext,\n      'home': this.gotoRowStart,\n      'end': this.gotoRowEnd\n    };\n    let stepFn = stepFunctions[dir];\n    let pos = stepFn.call(this, this.activeRow, this.activeCell, this.activePosX);\n    if (pos) {\n      if (this.hasFrozenRows && this._options.frozenBottom && pos.row == this.getDataLength()) {\n        return;\n      }\n\n      let isAddNewRow = (pos.row == this.getDataLength());\n\n      if ((!this._options.frozenBottom && pos.row >= this.actualFrozenRow)\n        || (this._options.frozenBottom && pos.row < this.actualFrozenRow)\n      ) {\n        this.scrollCellIntoView(pos.row, pos.cell, !isAddNewRow && this._options.emulatePagingWhenScrolling);\n      }\n      this.setActiveCellInternal(this.getCellNode(pos.row, pos.cell));\n      this.activePosX = pos.posX;\n      return true;\n    } else {\n      this.setActiveCellInternal(this.getCellNode(this.activeRow, this.activeCell));\n      return false;\n    }\n  }\n\n  /**\n   * Returns a DOM element containing a cell at a given row and cell.\n   * @param row A row index.\n   * @param cell A column index.\n   */\n  getCellNode(row: number, cell: number): HTMLDivElement | null {\n    if (this.rowsCache[row]) {\n      this.ensureCellNodesInRowsCache(row);\n      try {\n        if (this.rowsCache[row].cellNodesByColumnIdx.length > cell) {\n          return this.rowsCache[row].cellNodesByColumnIdx[cell];\n        }\n        else {\n          return null;\n        }\n      } catch (e) {\n        return this.rowsCache[row].cellNodesByColumnIdx[cell];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Sets an active cell.\n   * @param {number} row - A row index.\n   * @param {number} cell - A column index.\n   * @param {boolean} [optionEditMode] Option Edit Mode is Auto-Edit?\n   * @param {boolean} [preClickModeOn] Pre-Click Mode is Enabled?\n   * @param {boolean} [suppressActiveCellChangedEvent] Are we suppressing Active Cell Changed Event (defaults to false)\n   */\n  setActiveCell(row: number, cell: number, opt_editMode?: boolean, preClickModeOn?: boolean, suppressActiveCellChangedEvent?: boolean) {\n    if (!this.initialized) { return; }\n    if (row > this.getDataLength() || row < 0 || cell >= this.columns.length || cell < 0) {\n      return;\n    }\n\n    if (!this._options.enableCellNavigation) {\n      return;\n    }\n\n    this.scrollCellIntoView(row, cell, false);\n    this.setActiveCellInternal(this.getCellNode(row, cell), opt_editMode, preClickModeOn, suppressActiveCellChangedEvent);\n  }\n\n  /**\n   * Sets an active cell.\n   * @param {number} row - A row index.\n   * @param {number} cell - A column index.\n   * @param {boolean} [suppressScrollIntoView] - optionally suppress the ScrollIntoView that happens by default (defaults to false)\n   */\n  setActiveRow(row: number, cell: number, suppressScrollIntoView?: boolean) {\n    if (!this.initialized) { return; }\n    if (row > this.getDataLength() || row < 0 || cell >= this.columns.length || cell < 0) {\n      return;\n    }\n\n    this.activeRow = row;\n    if (!suppressScrollIntoView) {\n      this.scrollCellIntoView(row, cell || 0, false);\n    }\n  }\n\n  /**\n   * Returns true if you can click on a given cell and make it the active focus.\n   * @param {number} row A row index.\n   * @param {number} col A column index.\n   */\n  canCellBeActive(row: number, cell: number) {\n    if (!this.options.enableCellNavigation || row >= this.getDataLengthIncludingAddNew() ||\n      row < 0 || cell >= this.columns.length || cell < 0) {\n      return false;\n    }\n\n    if (!this.columns[cell] || this.columns[cell].hidden) {\n      return false;\n    }\n\n    let rowMetadata = (this.data as CustomDataView)?.getItemMetadata?.(row);\n    if (rowMetadata && rowMetadata.focusable !== undefined) {\n      return !!rowMetadata.focusable;\n    }\n\n    let columnMetadata = rowMetadata?.columns;\n    if (columnMetadata && columnMetadata[this.columns[cell].id] && columnMetadata[this.columns[cell].id].focusable !== undefined) {\n      return !!columnMetadata[this.columns[cell].id].focusable;\n    }\n    if (columnMetadata && columnMetadata[cell] && columnMetadata[cell].focusable !== undefined) {\n      return !!columnMetadata[cell].focusable;\n    }\n\n    return !!(this.columns[cell].focusable);\n  }\n\n  /**\n   * Returns true if selecting the row causes this particular cell to have the selectedCellCssClass applied to it. A cell can be selected if it exists and if it isn't on an empty / \"Add New\" row and if it is not marked as \"unselectable\" in the column definition.\n   * @param {number} row A row index.\n   * @param {number} col A column index.\n   */\n  canCellBeSelected(row: number, cell: number) {\n    if (row >= this.getDataLength() || row < 0 || cell >= this.columns.length || cell < 0) {\n      return false;\n    }\n\n    if (!this.columns[cell] || this.columns[cell].hidden) {\n      return false;\n    }\n\n    let rowMetadata = (this.data as CustomDataView)?.getItemMetadata?.(row);\n    if (rowMetadata && rowMetadata.selectable !== undefined) {\n      return !!rowMetadata.selectable;\n    }\n\n    let columnMetadata = rowMetadata?.columns && (rowMetadata.columns[this.columns[cell].id] || rowMetadata.columns[cell]);\n    if (columnMetadata && columnMetadata.selectable !== undefined) {\n      return !!columnMetadata.selectable;\n    }\n\n    return !!this.columns[cell].selectable;\n  }\n\n  /**\n   * Accepts a row integer and a cell integer, scrolling the view to the row where row is its row index, and cell is its cell index. Optionally accepts a forceEdit boolean which, if true, will attempt to initiate the edit dialogue for the field in the specified cell.\n   * Unlike setActiveCell, this scrolls the row into the viewport and sets the keyboard focus.\n   * @param {Number} row A row index.\n   * @param {Number} cell A column index.\n   * @param {Boolean} [forceEdit] If true, will attempt to initiate the edit dialogue for the field in the specified cell.\n   */\n  gotoCell(row: number, cell: number, forceEdit?: boolean, e?: Event | SlickEvent_) {\n    if (!this.initialized) { return; }\n    if (!this.canCellBeActive(row, cell)) {\n      return;\n    }\n\n    if (!this.getEditorLock().commitCurrentEdit()) {\n      return;\n    }\n\n    this.scrollCellIntoView(row, cell, false);\n\n    let newCell = this.getCellNode(row, cell);\n\n    // if selecting the 'add new' row, start editing right away\n    let column = this.columns[cell];\n    let suppressActiveCellChangedEvent = !!(this._options.editable && column?.editor && this._options.suppressActiveCellChangeOnEdit);\n    this.setActiveCellInternal(newCell, (forceEdit || (row === this.getDataLength()) || this._options.autoEdit), null, suppressActiveCellChangedEvent, e);\n\n    // if no editor was created, set the focus back on the grid\n    if (!this.currentEditor) {\n      this.setFocus();\n    }\n  }\n\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // IEditor implementation for the editor lock\n\n  protected commitCurrentEdit() {\n    const self = this as SlickGrid;\n    let item = self.getDataItem(self.activeRow);\n    let column = self.columns[self.activeCell];\n\n    if (self.currentEditor) {\n      if (self.currentEditor.isValueChanged()) {\n        const validationResults = self.currentEditor.validate();\n\n        if (validationResults.valid) {\n          const row = self.activeRow;\n          const cell = self.activeCell;\n          const editor = self.currentEditor;\n          const serializedValue = self.currentEditor.serializeValue();\n          const prevSerializedValue = self.serializedEditorValue;\n\n          if (self.activeRow < self.getDataLength()) {\n            const editCommand = {\n              row,\n              cell,\n              editor,\n              serializedValue,\n              prevSerializedValue,\n              execute: () => {\n                editor.applyValue(item, serializedValue);\n                self.updateRow(row);\n                self.trigger(self.onCellChange, { command: 'execute', row, cell, item, column });\n              },\n              undo: () => {\n                editor.applyValue(item, prevSerializedValue);\n                self.updateRow(row);\n                self.trigger(self.onCellChange, { command: 'undo', row, cell, item, column, });\n              }\n            };\n\n            if (self.options.editCommandHandler) {\n              self.makeActiveCellNormal();\n              self.options.editCommandHandler(item, column, editCommand);\n            } else {\n              editCommand.execute();\n              self.makeActiveCellNormal();\n            }\n\n          } else {\n            const newItem = {};\n            self.currentEditor.applyValue(newItem, self.currentEditor.serializeValue());\n            self.makeActiveCellNormal();\n            self.trigger(self.onAddNewRow, { item: newItem, column: column });\n          }\n\n          // check whether the lock has been re-acquired by event handlers\n          return !self.getEditorLock().isActive();\n        } else {\n          // Re-add the CSS class to trigger transitions, if any.\n          if (self.activeCellNode) {\n            self.activeCellNode.classList.remove('invalid');\n            Utils.width(self.activeCellNode);// force layout\n            self.activeCellNode.classList.add('invalid');\n          }\n\n          self.trigger(self.onValidationError, {\n            editor: self.currentEditor,\n            cellNode: self.activeCellNode,\n            validationResults: validationResults,\n            row: self.activeRow,\n            cell: self.activeCell,\n            column: column\n          });\n\n          self.currentEditor.focus();\n          return false;\n        }\n      }\n\n      self.makeActiveCellNormal();\n    }\n    return true;\n  }\n\n  protected cancelCurrentEdit() {\n    this.makeActiveCellNormal();\n    return true;\n  }\n\n  protected rowsToRanges(rows: number[]) {\n    let ranges: SlickRange_[] = [];\n    let lastCell = this.columns.length - 1;\n    for (let i = 0; i < rows.length; i++) {\n      ranges.push(new SlickRange(rows[i], 0, rows[i], lastCell));\n    }\n    return ranges;\n  }\n\n  /** Returns an array of row indices corresponding to the currently selected rows. */\n  getSelectedRows() {\n    if (!this.selectionModel) {\n      throw new Error('SlickGrid Selection model is not set');\n    }\n    return this.selectedRows.slice(0);\n  }\n\n  /**\n   * Accepts an array of row indices and applies the current selectedCellCssClass to the cells in the row, respecting whether cells have been flagged as selectable.\n   * @param {Array<number>} rowsArray - an array of row numbers.\n   * @param {String} [caller] - an optional string to identify who called the method\n   */\n  setSelectedRows(rows: number[], caller?: string) {\n    if (!this.selectionModel) {\n      throw new Error('SlickGrid Selection model is not set');\n    }\n    if (this && this.getEditorLock && !this.getEditorLock().isActive()) {\n      this.selectionModel.setSelectedRanges(this.rowsToRanges(rows), caller || 'SlickGrid.setSelectedRows');\n    }\n  }\n\n  /** html sanitizer to avoid scripting attack */\n  sanitizeHtmlString(dirtyHtml: string, suppressLogging?: boolean) {\n    if (!this._options.sanitizer || typeof dirtyHtml !== 'string') {\n      return dirtyHtml;\n    }\n\n    let cleanHtml = this._options.sanitizer(dirtyHtml);\n\n    if (!suppressLogging && this._options.logSanitizedHtml && this.logMessageCount <= this.logMessageMaxCount && cleanHtml !== dirtyHtml) {\n      console.log(`sanitizer altered html: ${dirtyHtml} --> ${cleanHtml}`);\n      if (this.logMessageCount === this.logMessageMaxCount) {\n        console.log(`sanitizer: silencing messages after first ${this.logMessageMaxCount}`);\n      }\n      this.logMessageCount++;\n    }\n    return cleanHtml;\n  }\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(Slick, {\n    Grid: SlickGrid,\n  });\n}\n"],
  "mappings": "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",
  "names": ["classname", "i"]
}
