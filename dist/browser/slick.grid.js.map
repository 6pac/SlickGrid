{
  "version": 3,
  "sources": ["../../src/slick.grid.ts"],
  "sourcesContent": ["// @ts-ignore\nimport type { SortableEvent, SortableInstance, SortableOptions } from 'sortablejs';\n\nimport type {\n  AutoSize,\n  CellPosition,\n  CellViewportRange,\n  Column,\n  ColumnMetadata,\n  ColumnSort,\n  CssStyleHash,\n  CSSStyleDeclarationWritable,\n  CustomDataView,\n  DOMEvent,\n  DragPosition,\n  DragRowMove,\n  Editor,\n  EditorArguments,\n  EditorConstructor,\n  EditController,\n  Formatter,\n  FormatterOverrideCallback,\n  FormatterResultObject,\n  FormatterResultWithHtml,\n  FormatterResultWithText,\n  GridOption as BaseGridOption,\n  InteractionBase,\n  ItemMetadata,\n  MenuCommandItemCallbackArgs,\n  MultiColumnSort,\n  OnActivateChangedOptionsEventArgs,\n  OnActiveCellChangedEventArgs,\n  OnAddNewRowEventArgs,\n  OnAfterSetColumnsEventArgs,\n  OnAutosizeColumnsEventArgs,\n  OnBeforeUpdateColumnsEventArgs,\n  OnBeforeAppendCellEventArgs,\n  OnBeforeCellEditorDestroyEventArgs,\n  OnBeforeColumnsResizeEventArgs,\n  OnBeforeEditCellEventArgs,\n  OnBeforeHeaderCellDestroyEventArgs,\n  OnBeforeHeaderRowCellDestroyEventArgs,\n  OnBeforeFooterRowCellDestroyEventArgs,\n  OnBeforeSetColumnsEventArgs,\n  OnCellChangeEventArgs,\n  OnCellCssStylesChangedEventArgs,\n  OnClickEventArgs,\n  OnColumnsDragEventArgs,\n  OnColumnsReorderedEventArgs,\n  OnColumnsResizedEventArgs,\n  OnColumnsResizeDblClickEventArgs,\n  OnCompositeEditorChangeEventArgs,\n  OnDblClickEventArgs,\n  OnFooterContextMenuEventArgs,\n  OnFooterRowCellRenderedEventArgs,\n  OnHeaderCellRenderedEventArgs,\n  OnFooterClickEventArgs,\n  OnHeaderClickEventArgs,\n  OnHeaderContextMenuEventArgs,\n  OnHeaderMouseEventArgs,\n  OnHeaderRowCellRenderedEventArgs,\n  OnKeyDownEventArgs,\n  OnPreHeaderContextMenuEventArgs,\n  OnPreHeaderClickEventArgs,\n  OnRenderedEventArgs,\n  OnSelectedRowsChangedEventArgs,\n  OnSetOptionsEventArgs,\n  OnScrollEventArgs,\n  OnValidationErrorEventArgs,\n  PagingInfo,\n  RowInfo,\n  SelectionModel,\n  SingleColumnSort,\n  SlickGridModel,\n  SlickPlugin,\n} from './models/index.js';\nimport {\n  type BasePubSub,\n  BindingEventService as BindingEventService_,\n  ColAutosizeMode as ColAutosizeMode_,\n  GlobalEditorLock as GlobalEditorLock_,\n  GridAutosizeColsMode as GridAutosizeColsMode_,\n  keyCode as keyCode_,\n  preClickClassName as preClickClassName_,\n  RowSelectionMode as RowSelectionMode_,\n  CellSelectionMode as CellSelectionMode_,\n  type SlickEditorLock,\n  SlickEvent as SlickEvent_,\n  SlickEventData as SlickEventData_,\n  SlickRange as SlickRange_,\n  Utils as Utils_,\n  ValueFilterMode as ValueFilterMode_,\n  WidthEvalMode as WidthEvalMode_,\n  DragExtendHandle as DragExtendHandle_\n} from './slick.core.js';\nimport { Draggable as Draggable_, MouseWheel as MouseWheel_, Resizable as Resizable_ } from './slick.interactions.js';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\nconst ColAutosizeMode = IIFE_ONLY ? Slick.ColAutosizeMode : ColAutosizeMode_;\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst SlickEventData = IIFE_ONLY ? Slick.EventData : SlickEventData_;\nconst GlobalEditorLock = IIFE_ONLY ? Slick.GlobalEditorLock : GlobalEditorLock_;\nconst GridAutosizeColsMode = IIFE_ONLY ? Slick.GridAutosizeColsMode : GridAutosizeColsMode_;\nconst keyCode = IIFE_ONLY ? Slick.keyCode : keyCode_;\nconst preClickClassName = IIFE_ONLY ? Slick.preClickClassName : preClickClassName_;\nconst SlickRange = IIFE_ONLY ? Slick.Range : SlickRange_;\nconst RowSelectionMode = IIFE_ONLY ? Slick.RowSelectionMode : RowSelectionMode_;\nconst CellSelectionMode = IIFE_ONLY ? Slick.CellSelectionMode : CellSelectionMode_;\nconst ValueFilterMode = IIFE_ONLY ? Slick.ValueFilterMode : ValueFilterMode_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\nconst WidthEvalMode = IIFE_ONLY ? Slick.WidthEvalMode : WidthEvalMode_;\nconst Draggable = IIFE_ONLY ? Slick.Draggable : Draggable_;\nconst MouseWheel = IIFE_ONLY ? Slick.MouseWheel : MouseWheel_;\nconst Resizable = IIFE_ONLY ? Slick.Resizable : Resizable_;\nconst DragExtendHandle = IIFE_ONLY ? Slick.DragExtendHandle : DragExtendHandle_;\n\n/**\n * @license\n * (c) 2009-present Michael Leibman\n * michael{dot}leibman{at}gmail{dot}com\n * http://github.com/mleibman/slickgrid\n *\n * Distributed under MIT license.\n * All rights reserved.\n *\n * SlickGrid v5.15.3\n *\n * NOTES:\n *     Cell/row DOM manipulations are done directly bypassing JS DOM manipulation methods.\n *     This increases the speed dramatically, but can only be done safely because there are no event handlers\n *     or data associated with any cell/row DOM nodes.  Cell editors must make sure they implement .destroy()\n *     and do proper cleanup.\n */\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n// SlickGrid class implementation (available as SlickGrid)\n\ninterface RowCaching {\n  rowNode: HTMLElement[] | null,\n  cellColSpans: Array<number | '*'>;\n  cellNodesByColumnIdx: HTMLElement[];\n  cellRenderQueue: any[];\n}\n\nexport class SlickGrid<TData = any, C extends Column<TData> = Column<TData>, O extends BaseGridOption<C> = BaseGridOption<C>> {\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // Public API\n  slickGridVersion = '5.15.3';\n\n  /** optional grid state clientId */\n  cid = '';\n\n  // Events\n  onActiveCellChanged: SlickEvent_<OnActiveCellChangedEventArgs>;\n  onActiveCellPositionChanged: SlickEvent_<{ grid: SlickGrid; }>;\n  onAddNewRow: SlickEvent_<OnAddNewRowEventArgs>;\n  onAfterSetColumns: SlickEvent_<OnAfterSetColumnsEventArgs>;\n  onAutosizeColumns: SlickEvent_<OnAutosizeColumnsEventArgs>;\n  onBeforeAppendCell: SlickEvent_<OnBeforeAppendCellEventArgs>;\n  onBeforeCellEditorDestroy: SlickEvent_<OnBeforeCellEditorDestroyEventArgs>;\n  onBeforeColumnsResize: SlickEvent_<OnBeforeColumnsResizeEventArgs>;\n  onBeforeDestroy: SlickEvent_<{ grid: SlickGrid; }>;\n  onBeforeEditCell: SlickEvent_<OnBeforeEditCellEventArgs>;\n  onBeforeFooterRowCellDestroy: SlickEvent_<OnBeforeFooterRowCellDestroyEventArgs>;\n  onBeforeHeaderCellDestroy: SlickEvent_<OnBeforeHeaderCellDestroyEventArgs>;\n  onBeforeHeaderRowCellDestroy: SlickEvent_<OnBeforeHeaderRowCellDestroyEventArgs>;\n  onBeforeRemoveCachedRow: SlickEvent_<{ row: number; grid: SlickGrid }>;\n  onBeforeSetColumns: SlickEvent_<OnBeforeSetColumnsEventArgs>;\n  onBeforeSort: SlickEvent_<SingleColumnSort | MultiColumnSort>;\n  onBeforeUpdateColumns: SlickEvent_<OnBeforeUpdateColumnsEventArgs>;\n  onCellChange: SlickEvent_<OnCellChangeEventArgs>;\n  onCellCssStylesChanged: SlickEvent_<OnCellCssStylesChangedEventArgs>;\n  onClick: SlickEvent_<OnClickEventArgs>;\n  onColumnsReordered: SlickEvent_<OnColumnsReorderedEventArgs>;\n  onColumnsDrag: SlickEvent_<OnColumnsDragEventArgs>;\n  onColumnsResized: SlickEvent_<OnColumnsResizedEventArgs>;\n  onColumnsResizeDblClick: SlickEvent_<OnColumnsResizeDblClickEventArgs>;\n  onCompositeEditorChange: SlickEvent_<OnCompositeEditorChangeEventArgs>;\n  onContextMenu: SlickEvent_<MenuCommandItemCallbackArgs>;\n  onDrag: SlickEvent_<DragRowMove>;\n  onDblClick: SlickEvent_<OnDblClickEventArgs>;\n  onDragInit: SlickEvent_<DragRowMove>;\n  onDragStart: SlickEvent_<DragRowMove>;\n  onDragEnd: SlickEvent_<DragRowMove>;\n  onFooterClick: SlickEvent_<OnFooterClickEventArgs>;\n  onFooterContextMenu: SlickEvent_<OnFooterContextMenuEventArgs>;\n  onFooterRowCellRendered: SlickEvent_<OnFooterRowCellRenderedEventArgs>;\n  onHeaderCellRendered: SlickEvent_<OnHeaderCellRenderedEventArgs>;\n  onHeaderClick: SlickEvent_<OnHeaderClickEventArgs>;\n  onHeaderContextMenu: SlickEvent_<OnHeaderContextMenuEventArgs>;\n  onHeaderMouseEnter: SlickEvent_<OnHeaderMouseEventArgs>;\n  onHeaderMouseLeave: SlickEvent_<OnHeaderMouseEventArgs>;\n  onHeaderRowCellRendered: SlickEvent_<OnHeaderRowCellRenderedEventArgs>;\n  onHeaderRowMouseEnter: SlickEvent_<OnHeaderMouseEventArgs>;\n  onHeaderRowMouseLeave: SlickEvent_<OnHeaderMouseEventArgs>;\n  onPreHeaderContextMenu: SlickEvent_<OnPreHeaderContextMenuEventArgs>;\n  onPreHeaderClick: SlickEvent_<OnPreHeaderClickEventArgs>;\n  onKeyDown: SlickEvent_<OnKeyDownEventArgs>;\n  onMouseEnter: SlickEvent_<OnHeaderMouseEventArgs>;\n  onMouseLeave: SlickEvent_<OnHeaderMouseEventArgs>;\n  onRendered: SlickEvent_<OnRenderedEventArgs>;\n  onScroll: SlickEvent_<OnScrollEventArgs>;\n  onSelectedRowsChanged: SlickEvent_<OnSelectedRowsChangedEventArgs>;\n  onSetOptions: SlickEvent_<OnSetOptionsEventArgs>;\n  onActivateChangedOptions: SlickEvent_<OnActivateChangedOptionsEventArgs>;\n  onSort: SlickEvent_<SingleColumnSort | MultiColumnSort>;\n  onValidationError: SlickEvent_<OnValidationErrorEventArgs>;\n  onViewportChanged: SlickEvent_<{ grid: SlickGrid; }>;\n\n  // ---\n  // protected variables\n\n  // shared across all grids on the page\n  protected scrollbarDimensions?: { height: number; width: number; };\n  protected maxSupportedCssHeight!: number;  // browser's breaking point\n\n  protected canvas: HTMLCanvasElement | null = null;\n  protected canvas_context: CanvasRenderingContext2D | null = null;\n\n  // settings\n  protected _options!: O;\n  protected _defaults: BaseGridOption = {\n    alwaysShowVerticalScroll: false,\n    alwaysAllowHorizontalScroll: false,\n    explicitInitialization: false,\n    rowHeight: 25,\n    defaultColumnWidth: 80,\n    enableHtmlRendering: true,\n    enableAddRow: false,\n    leaveSpaceForNewRows: false,\n    editable: false,\n    autoEdit: true,\n    autoEditNewRow: true,\n    autoCommitEdit: false,\n    suppressActiveCellChangeOnEdit: false,\n    enableCellNavigation: true,\n    enableColumnReorder: true,\n    unorderableColumnCssClass: 'unorderable',\n    asyncEditorLoading: false,\n    asyncEditorLoadDelay: 100,\n    forceFitColumns: false,\n    enableAsyncPostRender: false,\n    asyncPostRenderDelay: 50,\n    enableAsyncPostRenderCleanup: false,\n    asyncPostRenderCleanupDelay: 40,\n    auto: false,\n    nonce: '',\n    editorLock: GlobalEditorLock,\n    showColumnHeader: true,\n    showHeaderRow: false,\n    headerRowHeight: 25,\n    createFooterRow: false,\n    showFooterRow: false,\n    footerRowHeight: 25,\n    createPreHeaderPanel: false,\n    createTopHeaderPanel: false,\n    showPreHeaderPanel: false,\n    showTopHeaderPanel: false,\n    preHeaderPanelHeight: 25,\n    showTopPanel: false,\n    topPanelHeight: 25,\n    preHeaderPanelWidth: 'auto', // mostly useful for Draggable Grouping dropzone to take full width\n    topHeaderPanelHeight: 25,\n    topHeaderPanelWidth: 'auto', // mostly useful for Draggable Grouping dropzone to take full width\n    formatterFactory: null,\n    editorFactory: null,\n    cellFlashingCssClass: 'flashing',\n    rowHighlightCssClass: 'highlight-animate',\n    rowHighlightDuration: 400,\n    selectedCellCssClass: 'selected',\n    multiSelect: true,\n    enableCellRowSpan: false,\n    enableTextSelectionOnCells: false,\n    dataItemColumnValueExtractor: null,\n    frozenBottom: false,\n    frozenColumn: -1,\n    frozenRow: -1,\n    frozenRightViewportMinWidth: 100,\n    throwWhenFrozenNotAllViewable: false,\n    fullWidthRows: false,\n    multiColumnSort: false,\n    numberedMultiColumnSort: false,\n    tristateMultiColumnSort: false,\n    sortColNumberInSeparateSpan: false,\n    defaultFormatter: this.defaultFormatter,\n    forceSyncScrolling: false,\n    addNewRowCssClass: 'new-row',\n    preserveCopiedSelectionOnPaste: false,\n    preventDragFromKeys: ['ctrlKey', 'metaKey'],\n    showCellSelection: true,\n    viewportClass: undefined,\n    minRowBuffer: 3,\n    emulatePagingWhenScrolling: true, // when scrolling off bottom of viewport, place new row at top of viewport\n    editorCellNavOnLRKeys: false,\n    enableMouseWheelScrollHandler: true,\n    doPaging: true,\n    autosizeColsMode: GridAutosizeColsMode.LegacyOff,\n    autosizeColPaddingPx: 4,\n    rowTopOffsetRenderType: 'top',\n    scrollRenderThrottling: 10,\n    autosizeTextAvgToMWidthRatio: 0.75,\n    viewportSwitchToScrollModeWidthPercent: undefined,\n    viewportMinWidthPx: undefined,\n    viewportMaxWidthPx: undefined,\n    suppressCssChangesOnHiddenInit: false,\n    ffMaxSupportedCssHeight: 6000000,\n    maxSupportedCssHeight: 1000000000,\n    maxPartialRowSpanRemap: 5000,\n    sanitizer: undefined,  // sanitize function, built in basic sanitizer is: Slick.RegexSanitizer(dirtyHtml)\n    logSanitizedHtml: false, // log to console when sanitised - recommend true for testing of dev and production\n    mixinDefaults: true,\n    shadowRoot: undefined\n  };\n\n  protected _columnDefaults = {\n    name: '',\n    headerCssClass: null,\n    defaultSortAsc: true,\n    focusable: true,\n    hidden: false,\n    minWidth: 30,\n    maxWidth: undefined,\n    rerenderOnResize: false,\n    reorderable: true,\n    resizable: true,\n    sortable: false,\n    selectable: true,\n  } as Partial<C>;\n\n  protected _columnAutosizeDefaults: AutoSize = {\n    ignoreHeaderText: false,\n    colValueArray: undefined,\n    allowAddlPercent: undefined,\n    formatterOverride: undefined,\n    autosizeMode: ColAutosizeMode.ContentIntelligent,\n    rowSelectionModeOnInit: undefined,\n    rowSelectionMode: RowSelectionMode.FirstNRows,\n    rowSelectionCount: 100,\n    valueFilterMode: ValueFilterMode.None,\n    widthEvalMode: WidthEvalMode.Auto,\n    sizeToRemaining: undefined,\n    widthPx: undefined,\n    contentSizePx: 0,\n    headerWidthPx: 0,\n    colDataTypeOf: undefined\n  };\n\n  protected _columnResizeTimer?: number;\n  protected _executionBlockTimer?: number;\n  protected _flashCellTimer?: number;\n  protected _highlightRowTimer?: number;\n\n  // scroller\n  protected th!: number;   // virtual height\n  protected h!: number;    // real scrollable height\n  protected ph!: number;   // page height\n  protected n!: number;    // number of pages\n  protected cj!: number;   // \"jumpiness\" coefficient\n\n  protected page = 0;       // current page\n  protected offset = 0;     // current page offset\n  protected vScrollDir = 1;\n  protected _bindingEventService = new BindingEventService();\n  protected initialized = false;\n  protected _container!: HTMLElement;\n  protected uid = `slickgrid_${Math.round(1000000 * Math.random())}`;\n  protected dragReplaceEl = new DragExtendHandle(this.uid);\n  protected _focusSink!: HTMLDivElement;\n  protected _focusSink2!: HTMLDivElement;\n  protected _groupHeaders: HTMLDivElement[] = [];\n  protected _headerScroller: HTMLDivElement[] = [];\n  protected _headers: HTMLDivElement[] = [];\n  protected _headerRows!: HTMLDivElement[];\n  protected _headerRowScroller!: HTMLDivElement[];\n  protected _headerRowSpacerL!: HTMLDivElement;\n  protected _headerRowSpacerR!: HTMLDivElement;\n  protected _footerRow!: HTMLDivElement[];\n  protected _footerRowScroller!: HTMLDivElement[];\n  protected _footerRowSpacerL!: HTMLDivElement;\n  protected _footerRowSpacerR!: HTMLDivElement;\n  protected _preHeaderPanel!: HTMLDivElement;\n  protected _preHeaderPanelScroller!: HTMLDivElement;\n  protected _preHeaderPanelSpacer!: HTMLDivElement;\n  protected _preHeaderPanelR!: HTMLDivElement;\n  protected _preHeaderPanelScrollerR!: HTMLDivElement;\n  protected _preHeaderPanelSpacerR!: HTMLDivElement;\n  protected _topHeaderPanel!: HTMLDivElement;\n  protected _topHeaderPanelScroller!: HTMLDivElement;\n  protected _topHeaderPanelSpacer!: HTMLDivElement;\n  protected _topPanelScrollers!: HTMLDivElement[];\n  protected _topPanels!: HTMLDivElement[];\n  protected _viewport!: HTMLDivElement[];\n  protected _canvas!: HTMLDivElement[];\n  protected _style?: HTMLStyleElement;\n  protected _boundAncestors: HTMLElement[] = [];\n  protected stylesheet?: { cssRules: Array<{ selectorText: string; }>; rules: Array<{ selectorText: string; }>; } | null;\n  protected columnCssRulesL?: Array<{ selectorText: string; }>;\n  protected columnCssRulesR?: Array<{ selectorText: string; }>;\n  protected viewportH = 0;\n  protected viewportW = 0;\n  protected canvasWidth = 0;\n  protected canvasWidthL = 0;\n  protected canvasWidthR = 0;\n  protected headersWidth = 0;\n  protected headersWidthL = 0;\n  protected headersWidthR = 0;\n  protected viewportHasHScroll = false;\n  protected viewportHasVScroll = false;\n  protected headerColumnWidthDiff = 0;\n  protected headerColumnHeightDiff = 0; // border+padding\n  protected cellWidthDiff = 0;\n  protected cellHeightDiff = 0;\n  protected absoluteColumnMinWidth!: number;\n  protected hasFrozenRows = false;\n  protected frozenRowsHeight = 0;\n  protected actualFrozenRow = -1;\n  protected paneTopH = 0;\n  protected paneBottomH = 0;\n  protected viewportTopH = 0;\n  protected viewportBottomH = 0;\n  protected topPanelH = 0;\n  protected headerRowH = 0;\n  protected footerRowH = 0;\n\n  protected tabbingDirection = 1;\n  protected _activeCanvasNode!: HTMLDivElement;\n  protected _activeViewportNode!: HTMLDivElement;\n  protected activePosX!: number;\n  protected activePosY!: number;\n  protected activeRow!: number;\n  protected activeCell!: number;\n  protected selectionBottomRow!: number;\n  protected selectionRightCell!: number;\n  protected activeCellNode: HTMLDivElement | null = null;\n  protected currentEditor: Editor | null = null;\n  protected serializedEditorValue: any;\n  protected editController?: EditController;\n  protected _prevDataLength = 0;\n  protected _prevInvalidatedRowsCount = 0;\n  protected _rowSpanIsCached = false;\n  protected _colsWithRowSpanCache: { [colIdx: number]: Set<string> } = {};\n  protected rowsCache: Record<number, RowCaching> = {};\n  protected renderedRows = 0;\n  protected numVisibleRows = 0;\n  protected prevScrollTop = 0;\n  protected scrollHeight = 0;\n  protected scrollTop = 0;\n  protected lastRenderedScrollTop = 0;\n  protected lastRenderedScrollLeft = 0;\n  protected prevScrollLeft = 0;\n  protected scrollLeft = 0;\n\n  protected selectionModel?: SelectionModel;\n  protected selectedRows: number[] = [];\n  protected selectedRanges: SlickRange_[] = [];\n\n  protected plugins: SlickPlugin[] = [];\n  protected cellCssClasses: CssStyleHash = {};\n\n  protected columnsById: Record<string, number> = {};\n  protected sortColumns: ColumnSort[] = [];\n  protected columnPosLeft: number[] = [];\n  protected columnPosRight: number[] = [];\n\n  protected pagingActive = false;\n  protected pagingIsLastPage = false;\n\n  protected scrollThrottle!: { enqueue: () => void; dequeue: () => void; };\n\n  // async call handles\n  protected h_editorLoader?: number;\n  protected h_postrender?: number;\n  protected h_postrenderCleanup?: number;\n  protected postProcessedRows: any = {};\n  protected postProcessToRow: number = null as any;\n  protected postProcessFromRow: number = null as any;\n  protected postProcessedCleanupQueue: Array<{\n    actionType: string;\n    groupId: number;\n    node: HTMLElement | HTMLElement[];\n    columnIdx?: number;\n    rowIdx?: number;\n  }> = [];\n  protected postProcessgroupId = 0;\n\n  // perf counters\n  protected counter_rows_rendered = 0;\n  protected counter_rows_removed = 0;\n\n  protected _paneHeaderL!: HTMLDivElement;\n  protected _paneHeaderR!: HTMLDivElement;\n  protected _paneTopL!: HTMLDivElement;\n  protected _paneTopR!: HTMLDivElement;\n  protected _paneBottomL!: HTMLDivElement;\n  protected _paneBottomR!: HTMLDivElement;\n  protected _headerScrollerL!: HTMLDivElement;\n  protected _headerScrollerR!: HTMLDivElement;\n  protected _headerL!: HTMLDivElement;\n  protected _headerR!: HTMLDivElement;\n  protected _groupHeadersL!: HTMLDivElement;\n  protected _groupHeadersR!: HTMLDivElement;\n  protected _headerRowScrollerL!: HTMLDivElement;\n  protected _headerRowScrollerR!: HTMLDivElement;\n  protected _footerRowScrollerL!: HTMLDivElement;\n  protected _footerRowScrollerR!: HTMLDivElement;\n  protected _headerRowL!: HTMLDivElement;\n  protected _headerRowR!: HTMLDivElement;\n  protected _footerRowL!: HTMLDivElement;\n  protected _footerRowR!: HTMLDivElement;\n  protected _topPanelScrollerL!: HTMLDivElement;\n  protected _topPanelScrollerR!: HTMLDivElement;\n  protected _topPanelL!: HTMLDivElement;\n  protected _topPanelR!: HTMLDivElement;\n  protected _viewportTopL!: HTMLDivElement;\n  protected _viewportTopR!: HTMLDivElement;\n  protected _viewportBottomL!: HTMLDivElement;\n  protected _viewportBottomR!: HTMLDivElement;\n  protected _canvasTopL!: HTMLDivElement;\n  protected _canvasTopR!: HTMLDivElement;\n  protected _canvasBottomL!: HTMLDivElement;\n  protected _canvasBottomR!: HTMLDivElement;\n  protected _viewportScrollContainerX!: HTMLDivElement;\n  protected _viewportScrollContainerY!: HTMLDivElement;\n  protected _headerScrollContainer!: HTMLDivElement;\n  protected _headerRowScrollContainer!: HTMLDivElement;\n  protected _footerRowScrollContainer!: HTMLDivElement;\n\n  // store css attributes if display:none is active in container or parent\n  protected cssShow = { position: 'absolute', visibility: 'hidden', display: 'block' };\n  protected _hiddenParents: HTMLElement[] = [];\n  protected oldProps: Array<Partial<CSSStyleDeclaration>> = [];\n  protected enforceFrozenRowHeightRecalc = false;\n  protected columnResizeDragging = false;\n  protected slickDraggableInstance: InteractionBase | null = null;\n  protected slickMouseWheelInstances: Array<InteractionBase> = [];\n  protected slickResizableInstances: Array<InteractionBase> = [];\n  protected sortableSideLeftInstance?: SortableInstance;\n  protected sortableSideRightInstance?: SortableInstance;\n  protected logMessageCount = 0;\n  protected logMessageMaxCount = 30;\n  protected _pubSubService?: BasePubSub;\n\n  /**\n   * Creates a new instance of the grid.\n   * @class SlickGrid\n   * @constructor\n   * @param {Node} container - Container node to create the grid in.\n   * @param {Array|Object} data - An array of objects for databinding or an external DataView.\n   * @param {Array<C>} columns - An array of column definitions.\n   * @param {Object} [options] - Grid Options\n   * @param {Object} [externalPubSub] - optional External PubSub Service to use by SlickEvent\n   **/\n  constructor(protected readonly container: HTMLElement | string, protected data: CustomDataView<TData> | TData[], protected columns: C[], options: Partial<O>, protected readonly externalPubSub?: BasePubSub) {\n    this._container = typeof this.container === 'string'\n      ? document.querySelector(this.container) as HTMLDivElement\n      : this.container;\n\n    if (!this._container) {\n      throw new Error(`SlickGrid requires a valid container, ${this.container} does not exist in the DOM.`);\n    }\n\n    this._pubSubService = externalPubSub;\n    this.onActiveCellChanged = new SlickEvent<OnActiveCellChangedEventArgs>('onActiveCellChanged', externalPubSub);\n    this.onActiveCellPositionChanged = new SlickEvent<{ grid: SlickGrid; }>('onActiveCellPositionChanged', externalPubSub);\n    this.onAddNewRow = new SlickEvent<OnAddNewRowEventArgs>('onAddNewRow', externalPubSub);\n    this.onAfterSetColumns = new SlickEvent<OnAfterSetColumnsEventArgs>('onAfterSetColumns', externalPubSub);\n    this.onAutosizeColumns = new SlickEvent<OnAutosizeColumnsEventArgs>('onAutosizeColumns', externalPubSub);\n    this.onBeforeAppendCell = new SlickEvent<OnBeforeAppendCellEventArgs>('onBeforeAppendCell', externalPubSub);\n    this.onBeforeCellEditorDestroy = new SlickEvent<OnBeforeCellEditorDestroyEventArgs>('onBeforeCellEditorDestroy', externalPubSub);\n    this.onBeforeColumnsResize = new SlickEvent<OnBeforeColumnsResizeEventArgs>('onBeforeColumnsResize', externalPubSub);\n    this.onBeforeDestroy = new SlickEvent<{ grid: SlickGrid; }>('onBeforeDestroy', externalPubSub);\n    this.onBeforeEditCell = new SlickEvent<OnBeforeEditCellEventArgs>('onBeforeEditCell', externalPubSub);\n    this.onBeforeFooterRowCellDestroy = new SlickEvent<OnBeforeFooterRowCellDestroyEventArgs>('onBeforeFooterRowCellDestroy', externalPubSub);\n    this.onBeforeHeaderCellDestroy = new SlickEvent<OnBeforeHeaderCellDestroyEventArgs>('onBeforeHeaderCellDestroy', externalPubSub);\n    this.onBeforeHeaderRowCellDestroy = new SlickEvent<OnBeforeHeaderRowCellDestroyEventArgs>('onBeforeHeaderRowCellDestroy', externalPubSub);\n    this.onBeforeRemoveCachedRow = new SlickEvent<{ row: number; grid: SlickGrid }>('onRowRemovedFromCache', externalPubSub);\n    this.onBeforeSetColumns = new SlickEvent<OnBeforeSetColumnsEventArgs>('onBeforeSetColumns', externalPubSub);\n    this.onBeforeSort = new SlickEvent<SingleColumnSort | MultiColumnSort>('onBeforeSort', externalPubSub);\n    this.onBeforeUpdateColumns = new SlickEvent<OnBeforeUpdateColumnsEventArgs>('onBeforeUpdateColumns', externalPubSub);\n    this.onCellChange = new SlickEvent<OnCellChangeEventArgs>('onCellChange', externalPubSub);\n    this.onCellCssStylesChanged = new SlickEvent<OnCellCssStylesChangedEventArgs>('onCellCssStylesChanged', externalPubSub);\n    this.onClick = new SlickEvent<OnClickEventArgs>('onClick', externalPubSub);\n    this.onColumnsReordered = new SlickEvent<OnColumnsReorderedEventArgs>('onColumnsReordered', externalPubSub);\n    this.onColumnsDrag = new SlickEvent<OnColumnsDragEventArgs>('onColumnsDrag', externalPubSub);\n    this.onColumnsResized = new SlickEvent<OnColumnsResizedEventArgs>('onColumnsResized', externalPubSub);\n    this.onColumnsResizeDblClick = new SlickEvent<OnColumnsResizeDblClickEventArgs>('onColumnsResizeDblClick', externalPubSub);\n    this.onCompositeEditorChange = new SlickEvent<OnCompositeEditorChangeEventArgs>('onCompositeEditorChange', externalPubSub);\n    this.onContextMenu = new SlickEvent<MenuCommandItemCallbackArgs>('onContextMenu', externalPubSub);\n    this.onDrag = new SlickEvent<DragRowMove>('onDrag', externalPubSub);\n    this.onDblClick = new SlickEvent<OnDblClickEventArgs>('onDblClick', externalPubSub);\n    this.onDragInit = new SlickEvent<DragRowMove>('onDragInit', externalPubSub);\n    this.onDragStart = new SlickEvent<DragRowMove>('onDragStart', externalPubSub);\n    this.onDragEnd = new SlickEvent<DragRowMove>('onDragEnd', externalPubSub);\n    this.onFooterClick = new SlickEvent<OnFooterClickEventArgs>('onFooterClick', externalPubSub);\n    this.onFooterContextMenu = new SlickEvent<OnFooterContextMenuEventArgs>('onFooterContextMenu', externalPubSub);\n    this.onFooterRowCellRendered = new SlickEvent<OnFooterRowCellRenderedEventArgs>('onFooterRowCellRendered', externalPubSub);\n    this.onHeaderCellRendered = new SlickEvent<OnHeaderCellRenderedEventArgs>('onHeaderCellRendered', externalPubSub);\n    this.onHeaderClick = new SlickEvent<OnHeaderClickEventArgs>('onHeaderClick', externalPubSub);\n    this.onHeaderContextMenu = new SlickEvent<OnHeaderContextMenuEventArgs>('onHeaderContextMenu', externalPubSub);\n    this.onHeaderMouseEnter = new SlickEvent<OnHeaderMouseEventArgs>('onHeaderMouseEnter', externalPubSub);\n    this.onHeaderMouseLeave = new SlickEvent<OnHeaderMouseEventArgs>('onHeaderMouseLeave', externalPubSub);\n    this.onHeaderRowCellRendered = new SlickEvent<OnHeaderRowCellRenderedEventArgs>('onHeaderRowCellRendered', externalPubSub);\n    this.onHeaderRowMouseEnter = new SlickEvent<OnHeaderMouseEventArgs>('onHeaderRowMouseEnter', externalPubSub);\n    this.onHeaderRowMouseLeave = new SlickEvent<OnHeaderMouseEventArgs>('onHeaderRowMouseLeave', externalPubSub);\n    this.onPreHeaderClick = new SlickEvent<OnPreHeaderClickEventArgs>('onPreHeaderClick', externalPubSub);\n    this.onPreHeaderContextMenu = new SlickEvent<OnPreHeaderContextMenuEventArgs>('onPreHeaderContextMenu', externalPubSub);\n    this.onKeyDown = new SlickEvent<OnKeyDownEventArgs>('onKeyDown', externalPubSub);\n    this.onMouseEnter = new SlickEvent<OnHeaderMouseEventArgs>('onMouseEnter', externalPubSub);\n    this.onMouseLeave = new SlickEvent<OnHeaderMouseEventArgs>('onMouseLeave', externalPubSub);\n    this.onRendered = new SlickEvent<OnRenderedEventArgs>('onRendered', externalPubSub);\n    this.onScroll = new SlickEvent<OnScrollEventArgs>('onScroll', externalPubSub);\n    this.onSelectedRowsChanged = new SlickEvent<OnSelectedRowsChangedEventArgs>('onSelectedRowsChanged', externalPubSub);\n    this.onSetOptions = new SlickEvent<OnSetOptionsEventArgs>('onSetOptions', externalPubSub);\n    this.onActivateChangedOptions = new SlickEvent<OnActivateChangedOptionsEventArgs>('onActivateChangedOptions', externalPubSub);\n    this.onSort = new SlickEvent<SingleColumnSort | MultiColumnSort>('onSort', externalPubSub);\n    this.onValidationError = new SlickEvent<OnValidationErrorEventArgs>('onValidationError', externalPubSub);\n    this.onViewportChanged = new SlickEvent<{ grid: SlickGrid; }>('onViewportChanged', externalPubSub);\n\n    this.initialize(options);\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // Grid and Dom Initialisation\n  //////////////////////////////////////////////////////////////////////////////////////////////\n\n  /** Initializes the grid. */\n  init() {\n    this.finishInitialization();\n  }\n\n  /**\n   * Processes the provided grid options (mixing in default settings as needed),\n   * validates required modules (for example, ensuring Sortable.js is loaded if column reordering is enabled),\n   * and creates all necessary DOM elements for the grid (including header containers, viewports, canvases, panels, etc.).\n   * It also caches CSS if the container or its ancestors are hidden and calls finish.\n   *\n   * @param {Partial<O>} options - Partial grid options to be applied during initialization.\n   */\n  protected initialize(options: Partial<O>) {\n    // calculate these only once and share between grid instances\n    if (options?.mixinDefaults) {\n      // use provided options and then assign defaults\n      if (!this._options) { this._options = options as O; }\n      Utils.applyDefaults(this._options, this._defaults);\n    } else {\n      this._options = Utils.extend<O>(true, {}, this._defaults, options);\n    }\n    this.scrollThrottle = this.actionThrottle(this.render.bind(this), this._options.scrollRenderThrottling as number);\n    this.maxSupportedCssHeight = this.maxSupportedCssHeight || this.getMaxSupportedCssHeight();\n    this.validateAndEnforceOptions();\n    this._columnDefaults.width = this._options.defaultColumnWidth;\n\n    if (!this._options.suppressCssChangesOnHiddenInit) {\n      this.cacheCssForHiddenInit();\n    }\n\n    this.updateColumnProps();\n\n    // validate loaded JavaScript modules against requested options\n    if (this._options.enableColumnReorder && (!Sortable || !Sortable.create)) {\n      throw new Error('SlickGrid requires Sortable.js module to be loaded');\n    }\n\n    this.editController = {\n      commitCurrentEdit: this.commitCurrentEdit.bind(this),\n      cancelCurrentEdit: this.cancelCurrentEdit.bind(this),\n    };\n\n    Utils.emptyElement(this._container);\n    this._container.style.outline = String(0);\n    this._container.classList.add(this.uid);\n    this._container.classList.add('ui-widget');\n    this._container.setAttribute('role', 'grid');\n\n    const containerStyles = window.getComputedStyle(this._container);\n    if (!(/relative|absolute|fixed/).test(containerStyles.position)) {\n      this._container.style.position = 'relative';\n    }\n\n    this._focusSink = Utils.createDomElement('div', { tabIndex: 0, style: { position: 'fixed', width: '0px', height: '0px', top: '0px', left: '0px', outline: '0px' } }, this._container);\n\n    if (this._options.createTopHeaderPanel) {\n      this._topHeaderPanelScroller = Utils.createDomElement('div', { className: 'slick-topheader-panel slick-state-default', style: { overflow: 'hidden', position: 'relative' } }, this._container);\n      this._topHeaderPanelScroller.appendChild(document.createElement('div'));\n      this._topHeaderPanel = Utils.createDomElement('div', null, this._topHeaderPanelScroller);\n      this._topHeaderPanelSpacer = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._topHeaderPanelScroller);\n\n      if (!this._options.showTopHeaderPanel) {\n        Utils.hide(this._topHeaderPanelScroller);\n      }\n    }\n\n    // Containers used for scrolling frozen columns and rows\n    this._paneHeaderL = Utils.createDomElement('div', { className: 'slick-pane slick-pane-header slick-pane-left', tabIndex: 0 }, this._container);\n    this._paneHeaderR = Utils.createDomElement('div', { className: 'slick-pane slick-pane-header slick-pane-right', tabIndex: 0 }, this._container);\n    this._paneTopL = Utils.createDomElement('div', { className: 'slick-pane slick-pane-top slick-pane-left', tabIndex: 0 }, this._container);\n    this._paneTopR = Utils.createDomElement('div', { className: 'slick-pane slick-pane-top slick-pane-right', tabIndex: 0 }, this._container);\n    this._paneBottomL = Utils.createDomElement('div', { className: 'slick-pane slick-pane-bottom slick-pane-left', tabIndex: 0 }, this._container);\n    this._paneBottomR = Utils.createDomElement('div', { className: 'slick-pane slick-pane-bottom slick-pane-right', tabIndex: 0 }, this._container);\n\n    if (this._options.createPreHeaderPanel) {\n      this._preHeaderPanelScroller = Utils.createDomElement('div', { className: 'slick-preheader-panel ui-state-default slick-state-default', style: { overflow: 'hidden', position: 'relative' } }, this._paneHeaderL);\n      this._preHeaderPanelScroller.appendChild(document.createElement('div'));\n      this._preHeaderPanel = Utils.createDomElement('div', null, this._preHeaderPanelScroller);\n      this._preHeaderPanelSpacer = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._preHeaderPanelScroller);\n\n      this._preHeaderPanelScrollerR = Utils.createDomElement('div', { className: 'slick-preheader-panel ui-state-default slick-state-default', style: { overflow: 'hidden', position: 'relative' } }, this._paneHeaderR);\n      this._preHeaderPanelR = Utils.createDomElement('div', null, this._preHeaderPanelScrollerR);\n      this._preHeaderPanelSpacerR = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._preHeaderPanelScrollerR);\n\n      if (!this._options.showPreHeaderPanel) {\n        Utils.hide(this._preHeaderPanelScroller);\n        Utils.hide(this._preHeaderPanelScrollerR);\n      }\n    }\n\n    // Append the header scroller containers\n    this._headerScrollerL = Utils.createDomElement('div', { className: 'slick-header ui-state-default slick-state-default slick-header-left' }, this._paneHeaderL);\n    this._headerScrollerR = Utils.createDomElement('div', { className: 'slick-header ui-state-default slick-state-default slick-header-right' }, this._paneHeaderR);\n\n    // Cache the header scroller containers\n    this._headerScroller.push(this._headerScrollerL);\n    this._headerScroller.push(this._headerScrollerR);\n\n    // Append the columnn containers to the headers\n    this._headerL = Utils.createDomElement('div', { className: 'slick-header-columns slick-header-columns-left', role: 'row', style: { left: '-1000px' } }, this._headerScrollerL);\n    this._headerR = Utils.createDomElement('div', { className: 'slick-header-columns slick-header-columns-right', role: 'row', style: { left: '-1000px' } }, this._headerScrollerR);\n\n    // Cache the header columns\n    this._headers = [this._headerL, this._headerR];\n\n    this._headerRowScrollerL = Utils.createDomElement('div', { className: 'slick-headerrow ui-state-default slick-state-default' }, this._paneTopL);\n    this._headerRowScrollerR = Utils.createDomElement('div', { className: 'slick-headerrow ui-state-default slick-state-default' }, this._paneTopR);\n\n    this._headerRowScroller = [this._headerRowScrollerL, this._headerRowScrollerR];\n\n    this._headerRowSpacerL = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._headerRowScrollerL);\n    this._headerRowSpacerR = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._headerRowScrollerR);\n\n    this._headerRowL = Utils.createDomElement('div', { className: 'slick-headerrow-columns slick-headerrow-columns-left' }, this._headerRowScrollerL);\n    this._headerRowR = Utils.createDomElement('div', { className: 'slick-headerrow-columns slick-headerrow-columns-right' }, this._headerRowScrollerR);\n\n    this._headerRows = [this._headerRowL, this._headerRowR];\n\n    // Append the top panel scroller\n    this._topPanelScrollerL = Utils.createDomElement('div', { className: 'slick-top-panel-scroller ui-state-default slick-state-default' }, this._paneTopL);\n    this._topPanelScrollerR = Utils.createDomElement('div', { className: 'slick-top-panel-scroller ui-state-default slick-state-default' }, this._paneTopR);\n\n    this._topPanelScrollers = [this._topPanelScrollerL, this._topPanelScrollerR];\n\n    // Append the top panel\n    this._topPanelL = Utils.createDomElement('div', { className: 'slick-top-panel', style: { width: '10000px' } }, this._topPanelScrollerL);\n    this._topPanelR = Utils.createDomElement('div', { className: 'slick-top-panel', style: { width: '10000px' } }, this._topPanelScrollerR);\n\n    this._topPanels = [this._topPanelL, this._topPanelR];\n\n    if (!this._options.showColumnHeader) {\n      this._headerScroller.forEach((el) => {\n        Utils.hide(el);\n      });\n    }\n\n    if (!this._options.showTopPanel) {\n      this._topPanelScrollers.forEach((scroller) => {\n        Utils.hide(scroller);\n      });\n    }\n\n    if (!this._options.showHeaderRow) {\n      this._headerRowScroller.forEach((scroller) => {\n        Utils.hide(scroller);\n      });\n    }\n\n    // Append the viewport containers\n    this._viewportTopL = Utils.createDomElement('div', { className: 'slick-viewport slick-viewport-top slick-viewport-left', tabIndex: 0 }, this._paneTopL);\n    this._viewportTopR = Utils.createDomElement('div', { className: 'slick-viewport slick-viewport-top slick-viewport-right', tabIndex: 0 }, this._paneTopR);\n    this._viewportBottomL = Utils.createDomElement('div', { className: 'slick-viewport slick-viewport-bottom slick-viewport-left', tabIndex: 0 }, this._paneBottomL);\n    this._viewportBottomR = Utils.createDomElement('div', { className: 'slick-viewport slick-viewport-bottom slick-viewport-right', tabIndex: 0 }, this._paneBottomR);\n\n    // Cache the viewports\n    this._viewport = [this._viewportTopL, this._viewportTopR, this._viewportBottomL, this._viewportBottomR];\n    if (this._options.viewportClass) {\n      this._viewport.forEach((view) => {\n        view.classList.add(...Utils.classNameToList((this._options.viewportClass)));\n      });\n    }\n\n    // Default the active viewport to the top left\n    this._activeViewportNode = this._viewportTopL;\n\n    // Append the canvas containers\n    this._canvasTopL = Utils.createDomElement('div', { className: 'grid-canvas grid-canvas-top grid-canvas-left', tabIndex: 0 }, this._viewportTopL);\n    this._canvasTopR = Utils.createDomElement('div', { className: 'grid-canvas grid-canvas-top grid-canvas-right', tabIndex: 0 }, this._viewportTopR);\n    this._canvasBottomL = Utils.createDomElement('div', { className: 'grid-canvas grid-canvas-bottom grid-canvas-left', tabIndex: 0 }, this._viewportBottomL);\n    this._canvasBottomR = Utils.createDomElement('div', { className: 'grid-canvas grid-canvas-bottom grid-canvas-right', tabIndex: 0 }, this._viewportBottomR);\n\n    // Cache the canvases\n    this._canvas = [this._canvasTopL, this._canvasTopR, this._canvasBottomL, this._canvasBottomR];\n\n    this.scrollbarDimensions = this.scrollbarDimensions || this.measureScrollbar();\n    const canvasWithScrollbarWidth = this.getCanvasWidth() + this.scrollbarDimensions.width;\n\n    // Default the active canvas to the top left\n    this._activeCanvasNode = this._canvasTopL;\n\n    // top-header\n    if (this._topHeaderPanelSpacer) {\n      Utils.width(this._topHeaderPanelSpacer, canvasWithScrollbarWidth);\n    }\n\n    // pre-header\n    if (this._preHeaderPanelSpacer) {\n      Utils.width(this._preHeaderPanelSpacer, canvasWithScrollbarWidth);\n    }\n\n    this._headers.forEach((el) => {\n      Utils.width(el, this.getHeadersWidth());\n    });\n\n    Utils.width(this._headerRowSpacerL, canvasWithScrollbarWidth);\n    Utils.width(this._headerRowSpacerR, canvasWithScrollbarWidth);\n\n    // footer Row\n    if (this._options.createFooterRow) {\n      this._footerRowScrollerR = Utils.createDomElement('div', { className: 'slick-footerrow ui-state-default slick-state-default' }, this._paneTopR);\n      this._footerRowScrollerL = Utils.createDomElement('div', { className: 'slick-footerrow ui-state-default slick-state-default' }, this._paneTopL);\n\n      this._footerRowScroller = [this._footerRowScrollerL, this._footerRowScrollerR];\n\n      this._footerRowSpacerL = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._footerRowScrollerL);\n      Utils.width(this._footerRowSpacerL, canvasWithScrollbarWidth);\n      this._footerRowSpacerR = Utils.createDomElement('div', { style: { display: 'block', height: '1px', position: 'absolute', top: '0px', left: '0px' } }, this._footerRowScrollerR);\n      Utils.width(this._footerRowSpacerR, canvasWithScrollbarWidth);\n\n      this._footerRowL = Utils.createDomElement('div', { className: 'slick-footerrow-columns slick-footerrow-columns-left' }, this._footerRowScrollerL);\n      this._footerRowR = Utils.createDomElement('div', { className: 'slick-footerrow-columns slick-footerrow-columns-right' }, this._footerRowScrollerR);\n\n      this._footerRow = [this._footerRowL, this._footerRowR];\n\n      if (!this._options.showFooterRow) {\n        this._footerRowScroller.forEach((scroller) => {\n          Utils.hide(scroller);\n        });\n      }\n    }\n\n    this._focusSink2 = this._focusSink.cloneNode(true) as HTMLDivElement;\n    this._container.appendChild(this._focusSink2);\n\n    if (!this._options.explicitInitialization) {\n      this.finishInitialization();\n    }\n  }\n\n  /**\n   * Completes grid initialisation by calculating viewport dimensions, measuring cell padding and border differences,\n   * disabling text selection (except on editable inputs), setting frozen options and pane visibility,\n   * updating column caches, creating column headers and footers, setting up column sorting,\n   * creating CSS rules, binding ancestor scroll events, and binding various event handlers\n   * (e.g. for scrolling, mouse, keyboard, drag-and-drop).\n   * It also starts up any asynchronous post\u2013render processing if enabled.\n   */\n  protected finishInitialization() {\n    if (!this.initialized) {\n      this.initialized = true;\n\n      this.getViewportWidth();\n      this.getViewportHeight();\n\n      // header columns and cells may have different padding/border skewing width calculations (box-sizing, hello?)\n      // calculate the diff so we can set consistent sizes\n      this.measureCellPaddingAndBorder();\n\n      // for usability reasons, all text selection in SlickGrid is disabled\n      // with the exception of input and textarea elements (selection must\n      // be enabled there so that editors work as expected); note that\n      // selection in grid cells (grid body) is already unavailable in\n      // all browsers except IE\n      this.disableSelection(this._headers); // disable all text selection in header (including input and textarea)\n\n      if (!this._options.enableTextSelectionOnCells) {\n        // disable text selection in grid cells except in input and textarea elements\n        // (this is IE-specific, because selectstart event will only fire in IE)\n        this._viewport.forEach((view) => {\n          this._bindingEventService.bind(view, 'selectstart', (event) => {\n            if (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement) {\n              return;\n            }\n          });\n        });\n      }\n\n      this.setFrozenOptions();\n      this.setPaneFrozenClasses();\n      this.setPaneVisibility();\n      this.setScroller();\n      this.setOverflow();\n\n      this.updateColumnCaches();\n      this.createColumnHeaders();\n      this.createColumnFooter();\n      this.setupColumnSort();\n      this.createCssRules();\n      this.resizeCanvas();\n      this.bindAncestorScrollEvents();\n\n      this._bindingEventService.bind(this._container, 'resize', this.resizeCanvas.bind(this));\n      this._viewport.forEach((view) => {\n        this._bindingEventService.bind(view, 'scroll', this.handleScroll.bind(this));\n      });\n\n      if (this._options.enableMouseWheelScrollHandler) {\n        this._viewport.forEach((view) => {\n          this.slickMouseWheelInstances.push(MouseWheel({\n            element: view,\n            onMouseWheel: this.handleMouseWheel.bind(this)\n          }));\n        });\n      }\n\n      this._headerScroller.forEach((el) => {\n        this._bindingEventService.bind(el, 'contextmenu', this.handleHeaderContextMenu.bind(this) as EventListener);\n        this._bindingEventService.bind(el, 'click', this.handleHeaderClick.bind(this) as EventListener);\n      });\n\n      this._headerRowScroller.forEach((scroller) => {\n        this._bindingEventService.bind(scroller, 'scroll', this.handleHeaderRowScroll.bind(this) as EventListener);\n      });\n\n      if (this._options.createFooterRow) {\n        this._footerRow.forEach((footer) => {\n          this._bindingEventService.bind(footer, 'contextmenu', this.handleFooterContextMenu.bind(this) as EventListener);\n          this._bindingEventService.bind(footer, 'click', this.handleFooterClick.bind(this) as EventListener);\n        });\n\n        this._footerRowScroller.forEach((scroller) => {\n          this._bindingEventService.bind(scroller, 'scroll', this.handleFooterRowScroll.bind(this) as EventListener);\n        });\n      }\n\n      if (this._options.createTopHeaderPanel) {\n        this._bindingEventService.bind(this._topHeaderPanelScroller, 'scroll', this.handleTopHeaderPanelScroll.bind(this) as EventListener);\n      }\n\n      if (this._options.createPreHeaderPanel) {\n        this._bindingEventService.bind(this._preHeaderPanelScroller, 'scroll', this.handlePreHeaderPanelScroll.bind(this) as EventListener);\n        this._bindingEventService.bind(this._preHeaderPanelScroller, 'contextmenu', this.handlePreHeaderContextMenu.bind(this) as EventListener);\n        this._bindingEventService.bind(this._preHeaderPanelScrollerR, 'contextmenu', this.handlePreHeaderContextMenu.bind(this) as EventListener);\n        this._bindingEventService.bind(this._preHeaderPanelScroller, 'click', this.handlePreHeaderClick.bind(this) as EventListener);\n        this._bindingEventService.bind(this._preHeaderPanelScrollerR, 'click', this.handlePreHeaderClick.bind(this) as EventListener);\n      }\n\n      this._bindingEventService.bind(this._focusSink, 'keydown', this.handleKeyDown.bind(this) as EventListener);\n      this._bindingEventService.bind(this._focusSink2, 'keydown', this.handleKeyDown.bind(this) as EventListener);\n\n      this._canvas.forEach((element) => {\n        this._bindingEventService.bind(element, 'keydown', this.handleKeyDown.bind(this) as EventListener);\n        this._bindingEventService.bind(element, 'click', this.handleClick.bind(this) as EventListener);\n        this._bindingEventService.bind(element, 'dblclick', this.handleDblClick.bind(this) as EventListener);\n        this._bindingEventService.bind(element, 'contextmenu', this.handleContextMenu.bind(this) as EventListener);\n        this._bindingEventService.bind(element, 'mouseover', this.handleCellMouseOver.bind(this) as EventListener);\n        this._bindingEventService.bind(element, 'mouseout', this.handleCellMouseOut.bind(this) as EventListener);\n      });\n\n      if (Draggable) {\n        this.slickDraggableInstance = Draggable({\n          containerElement: this._container,\n          allowDragFrom: 'div.slick-cell, div.' + this.dragReplaceEl.cssClass,\n          dragFromClassDetectArr: [{ tag: 'dragReplaceHandle', id: this.dragReplaceEl.id }],\n          // the slick cell parent must always contain `.dnd` and/or `.cell-reorder` class to be identified as draggable\n          allowDragFromClosest: 'div.slick-cell.dnd, div.slick-cell.cell-reorder',\n          preventDragFromKeys: this._options.preventDragFromKeys,\n          onDragInit: this.handleDragInit.bind(this),\n          onDragStart: this.handleDragStart.bind(this),\n          onDrag: this.handleDrag.bind(this),\n          onDragEnd: this.handleDragEnd.bind(this)\n        });\n      }\n\n      if (!this._options.suppressCssChangesOnHiddenInit) {\n        this.restoreCssFromHiddenInit();\n      }\n    }\n  }\n\n  /**\n   * Finds all container ancestors/parents (including the grid container itself) that are hidden (i.e. have display:none)\n   * and temporarily applies visible CSS properties (absolute positioning, hidden visibility, block display)\n   * so that dimensions can be measured correctly.\n   * It stores the original CSS properties in an internal array for later restoration.\n   *\n   * Related to issue: https://github.com/6pac/SlickGrid/issues/568 */\n  cacheCssForHiddenInit() {\n    this._hiddenParents = Utils.parents(this._container, ':hidden') as HTMLElement[];\n    this.oldProps = [];\n    this._hiddenParents.forEach(el => {\n      const old: Partial<CSSStyleDeclaration> = {};\n      Object.keys(this.cssShow).forEach(name => {\n        if (this.cssShow) {\n          old[name as any] = el.style[name as 'position' | 'visibility' | 'display'];\n          el.style[name as any] = this.cssShow[name as 'position' | 'visibility' | 'display'];\n        }\n      });\n      this.oldProps.push(old);\n    });\n  }\n\n  /**\n   * Restores the original CSS properties for the container and its hidden\n   * ancestors that were modified by cacheCssForHiddenInit.\n   * This ensures that after initial measurements the DOM elements revert\n   * to their original style settings.\n   */\n  restoreCssFromHiddenInit() {\n    // finish handle display:none on container or container parents\n    // - put values back the way they were\n    let i = 0;\n    if (this._hiddenParents) {\n      this._hiddenParents.forEach(el => {\n        const old = this.oldProps[i++];\n        Object.keys(this.cssShow).forEach(name => {\n          if (this.cssShow) {\n            el.style[name as CSSStyleDeclarationWritable] = (old as any)[name];\n          }\n        });\n      });\n      this._hiddenParents = [];\n    }\n  }\n\n  /**\n   * Registers an external plugin to the grid\u2019s internal plugin list.\n   * Once added, it immediately initialises the plugin by calling its init()\n   * method with the grid instance.\n   * @param {T} plugin - The plugin instance to be registered.\n   */\n  registerPlugin<T extends SlickPlugin>(plugin: T) {\n    this.plugins.unshift(plugin);\n    plugin.init(this as unknown as SlickGridModel);\n  }\n\n  /**\n   * Unregister (destroy) an external Plugin.\n   * Searches for the specified plugin in the grid\u2019s plugin list.\n   * When found, it calls the plugin\u2019s destroy() method and removes the plugin from the list,\n   * thereby unregistering it from the grid.\n   * @param {T} plugin - The plugin instance to be registered.\n   */\n  unregisterPlugin(plugin: SlickPlugin) {\n    for (let i = this.plugins.length; i >= 0; i--) {\n      if (this.plugins[i] === plugin) {\n        this.plugins[i]?.destroy();\n        this.plugins.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Destroy (dispose) of SlickGrid\n   *\n   * Unbinds all event handlers, cancels any active cell edits, triggers the onBeforeDestroy event,\n   * unregisters and destroys plugins, destroys sortable and other interaction instances,\n   * unbinds ancestor scroll events, removes CSS rules, unbinds events from all key DOM elements\n   * (canvas, viewports, header, footer, etc.), empties the grid container, removes the grid\u2019s uid class,\n   * and clears all timers. Optionally, if shouldDestroyAllElements is true,\n   * calls destroyAllElements to nullify all DOM references.\n   *\n   * @param {boolean} shouldDestroyAllElements - do we want to destroy (nullify) all DOM elements as well? This help in avoiding mem leaks\n   */\n  destroy(shouldDestroyAllElements?: boolean) {\n    this._bindingEventService.unbindAll();\n    this.slickDraggableInstance = this.destroyAllInstances(this.slickDraggableInstance) as null;\n    this.slickMouseWheelInstances = this.destroyAllInstances(this.slickMouseWheelInstances) as InteractionBase[];\n    this.slickResizableInstances = this.destroyAllInstances(this.slickResizableInstances) as InteractionBase[];\n    this.getEditorLock()?.cancelCurrentEdit();\n\n    this.trigger(this.onBeforeDestroy, {});\n\n    let i = this.plugins.length;\n    while (i--) {\n      this.unregisterPlugin(this.plugins[i]);\n    }\n\n    if (this._options.enableColumnReorder && typeof this.sortableSideLeftInstance?.destroy === 'function') {\n      this.sortableSideLeftInstance?.destroy();\n      this.sortableSideRightInstance?.destroy();\n    }\n\n    this.unbindAncestorScrollEvents();\n    this._bindingEventService.unbindByEventName(this._container, 'resize');\n    this.removeCssRules();\n\n    this._canvas.forEach((element) => {\n      this._bindingEventService.unbindByEventName(element, 'keydown');\n      this._bindingEventService.unbindByEventName(element, 'click');\n      this._bindingEventService.unbindByEventName(element, 'dblclick');\n      this._bindingEventService.unbindByEventName(element, 'contextmenu');\n      this._bindingEventService.unbindByEventName(element, 'mouseover');\n      this._bindingEventService.unbindByEventName(element, 'mouseout');\n    });\n    this._viewport.forEach((view) => {\n      this._bindingEventService.unbindByEventName(view, 'scroll');\n    });\n\n    this._headerScroller.forEach((el) => {\n      this._bindingEventService.unbindByEventName(el, 'contextmenu');\n      this._bindingEventService.unbindByEventName(el, 'click');\n    });\n\n    this._headerRowScroller.forEach((scroller) => {\n      this._bindingEventService.unbindByEventName(scroller, 'scroll');\n    });\n\n    if (this._footerRow) {\n      this._footerRow.forEach((footer) => {\n        this._bindingEventService.unbindByEventName(footer, 'contextmenu');\n        this._bindingEventService.unbindByEventName(footer, 'click');\n      });\n    }\n\n    if (this._footerRowScroller) {\n      this._footerRowScroller.forEach((scroller) => {\n        this._bindingEventService.unbindByEventName(scroller, 'scroll');\n      });\n    }\n\n    if (this._preHeaderPanelScroller) {\n      this._bindingEventService.unbindByEventName(this._preHeaderPanelScroller, 'scroll');\n    }\n\n    if (this._topHeaderPanelScroller) {\n      this._bindingEventService.unbindByEventName(this._topHeaderPanelScroller, 'scroll');\n    }\n\n    this._bindingEventService.unbindByEventName(this._focusSink, 'keydown');\n    this._bindingEventService.unbindByEventName(this._focusSink2, 'keydown');\n\n    const resizeHandles = this._container.querySelectorAll('.slick-resizable-handle');\n    [].forEach.call(resizeHandles, (handle) => {\n      this._bindingEventService.unbindByEventName(handle, 'dblclick');\n    });\n\n    const headerColumns = this._container.querySelectorAll('.slick-header-column');\n    [].forEach.call(headerColumns, (column) => {\n      this._bindingEventService.unbindByEventName(column, 'mouseenter');\n      this._bindingEventService.unbindByEventName(column, 'mouseleave');\n\n      this._bindingEventService.unbindByEventName(column, 'mouseenter');\n      this._bindingEventService.unbindByEventName(column, 'mouseleave');\n    });\n\n    Utils.emptyElement(this._container);\n    this._container.classList.remove(this.uid);\n    this.clearAllTimers();\n\n    if (shouldDestroyAllElements) {\n      this.destroyAllElements();\n    }\n  }\n\n  /**\n   * Call destroy method, when exists, on all the instance(s) it found\n   *\n   * Given either a single instance or an array of instances (e.g. draggable, mousewheel, resizable),\n   * pops each one and calls its destroy method if available, then resets the input to an empty array\n   * (or null for a single instance). Returns the reset value.\n   *\n   * @params  instances - can be a single instance or a an array of instances\n   */\n  protected destroyAllInstances(inputInstances: null | InteractionBase | Array<InteractionBase>) {\n    if (inputInstances) {\n      const instances = Array.isArray(inputInstances) ? inputInstances : [inputInstances];\n      let instance: InteractionBase | undefined;\n      while (Utils.isDefined(instance = instances.pop())) {\n        if (instance && typeof instance.destroy === 'function') {\n          instance.destroy();\n        }\n      }\n    }\n    // reset instance(s)\n    inputInstances = (Array.isArray(inputInstances) ? [] : null);\n    return inputInstances;\n  }\n\n  /**\n   * Sets all internal references to DOM elements\n   * (e.g. canvas containers, headers, viewports, focus sinks, etc.)\n   * to null so that they can be garbage collected.\n   */\n  protected destroyAllElements() {\n    this._activeCanvasNode = null as any;\n    this._activeViewportNode = null as any;\n    this._boundAncestors = null as any;\n    this._canvas = null as any;\n    this._canvasTopL = null as any;\n    this._canvasTopR = null as any;\n    this._canvasBottomL = null as any;\n    this._canvasBottomR = null as any;\n    this._container = null as any;\n    this._focusSink = null as any;\n    this._focusSink2 = null as any;\n    this._groupHeaders = null as any;\n    this._groupHeadersL = null as any;\n    this._groupHeadersR = null as any;\n    this._headerL = null as any;\n    this._headerR = null as any;\n    this._headers = null as any;\n    this._headerRows = null as any;\n    this._headerRowL = null as any;\n    this._headerRowR = null as any;\n    this._headerRowSpacerL = null as any;\n    this._headerRowSpacerR = null as any;\n    this._headerRowScrollContainer = null as any;\n    this._headerRowScroller = null as any;\n    this._headerRowScrollerL = null as any;\n    this._headerRowScrollerR = null as any;\n    this._headerScrollContainer = null as any;\n    this._headerScroller = null as any;\n    this._headerScrollerL = null as any;\n    this._headerScrollerR = null as any;\n    this._hiddenParents = null as any;\n    this._footerRow = null as any;\n    this._footerRowL = null as any;\n    this._footerRowR = null as any;\n    this._footerRowSpacerL = null as any;\n    this._footerRowSpacerR = null as any;\n    this._footerRowScroller = null as any;\n    this._footerRowScrollerL = null as any;\n    this._footerRowScrollerR = null as any;\n    this._footerRowScrollContainer = null as any;\n    this._preHeaderPanel = null as any;\n    this._preHeaderPanelR = null as any;\n    this._preHeaderPanelScroller = null as any;\n    this._preHeaderPanelScrollerR = null as any;\n    this._preHeaderPanelSpacer = null as any;\n    this._preHeaderPanelSpacerR = null as any;\n    this._topPanels = null as any;\n    this._topPanelScrollers = null as any;\n    this._style = null as any;\n    this._topPanelScrollerL = null as any;\n    this._topPanelScrollerR = null as any;\n    this._topPanelL = null as any;\n    this._topPanelR = null as any;\n    this._paneHeaderL = null as any;\n    this._paneHeaderR = null as any;\n    this._paneTopL = null as any;\n    this._paneTopR = null as any;\n    this._paneBottomL = null as any;\n    this._paneBottomR = null as any;\n    this._viewport = null as any;\n    this._viewportTopL = null as any;\n    this._viewportTopR = null as any;\n    this._viewportBottomL = null as any;\n    this._viewportBottomR = null as any;\n    this._viewportScrollContainerX = null as any;\n    this._viewportScrollContainerY = null as any;\n  }\n\n  /** Returns an object containing all of the Grid options set on the grid. See a list of Grid Options here.  */\n  getOptions() {\n    return this._options;\n  }\n\n  /**\n   * Extends grid options with a given hash. If an there is an active edit, the grid will attempt to commit the changes and only continue if the attempt succeeds.\n   * @param {Object} options - an object with configuration options.\n   * @param {Boolean} [suppressRender] - do we want to supress the grid re-rendering? (defaults to false)\n   * @param {Boolean} [suppressColumnSet] - do we want to supress the columns set, via \"setColumns()\" method? (defaults to false)\n   * @param {Boolean} [suppressSetOverflow] - do we want to suppress the call to `setOverflow`\n   */\n  setOptions(newOptions: Partial<O>, suppressRender?: boolean, suppressColumnSet?: boolean, suppressSetOverflow?: boolean): void {\n    this.prepareForOptionsChange();\n\n    if (this._options.enableAddRow !== newOptions.enableAddRow) {\n      this.invalidateRow(this.getDataLength());\n    }\n\n    // before applying column freeze, we need our viewports to be scrolled back to left to avoid misaligned column headers\n    if (newOptions.frozenColumn !== undefined && newOptions.frozenColumn >= 0) {\n      this.getViewports().forEach(vp => vp.scrollLeft = 0);\n      this.handleScroll(); // trigger scroll to realign column headers as well\n    }\n\n    const originalOptions = Utils.extend(true, {}, this._options);\n    this._options = Utils.extend(this._options, newOptions);\n    this.trigger(this.onSetOptions, { optionsBefore: originalOptions, optionsAfter: this._options });\n\n    this.internal_setOptions(suppressRender, suppressColumnSet, suppressSetOverflow);\n  }\n\n  /**\n   * If option.mixinDefaults is true then external code maintains a reference to the options object. In this case there is no need\n   * to call setOptions() - changes can be made directly to the object. However setOptions() also performs some recalibration of the\n   * grid in reaction to changed options. activateChangedOptions call the same recalibration routines as setOptions() would have.\n   * @param {Boolean} [suppressRender] - do we want to supress the grid re-rendering? (defaults to false)\n   * @param {Boolean} [suppressColumnSet] - do we want to supress the columns set, via \"setColumns()\" method? (defaults to false)\n   * @param {Boolean} [suppressSetOverflow] - do we want to suppress the call to `setOverflow`\n   */\n  activateChangedOptions(suppressRender?: boolean, suppressColumnSet?: boolean, suppressSetOverflow?: boolean): void {\n    this.prepareForOptionsChange();\n    this.invalidateRow(this.getDataLength());\n\n    this.trigger(this.onActivateChangedOptions, { options: this._options });\n\n    this.internal_setOptions(suppressRender, suppressColumnSet, suppressSetOverflow);\n  }\n\n  /**\n   * Attempts to commit any active cell edit via the editor lock; if successful, calls makeActiveCellNormal to exit edit mode.\n   *\n   * @returns {void} - Does not return a value.\n   */\n  protected prepareForOptionsChange() {\n    if (!this.getEditorLock().commitCurrentEdit()) {\n      return;\n    }\n\n    this.makeActiveCellNormal();\n  }\n\n  /**\n   * Depending on new options, sets column header visibility, validates options, sets frozen options,\n   * forces viewport height recalculation if needed, updates viewport overflow, re-renders the grid (unless suppressed),\n   * sets the scroller elements, and reinitialises mouse wheel scrolling as needed.\n   *\n   * @param {boolean} [suppressRender] - If `true`, prevents the grid from re-rendering.\n   * @param {boolean} [suppressColumnSet] - If `true`, prevents the columns from being reset.\n   * @param {boolean} [suppressSetOverflow] - If `true`, prevents updating the viewport overflow setting.\n   */\n  protected internal_setOptions(suppressRender?: boolean, suppressColumnSet?: boolean, suppressSetOverflow?: boolean): void {\n    if (this._options.showColumnHeader !== undefined) {\n      this.setColumnHeaderVisibility(this._options.showColumnHeader);\n    }\n    this.validateAndEnforceOptions();\n    this.setFrozenOptions();\n\n    // when user changed frozen row option, we need to force a recalculation of each viewport heights\n    if (this._options.frozenBottom !== undefined) {\n      this.enforceFrozenRowHeightRecalc = true;\n    }\n\n    this._viewport.forEach((view) => {\n      view.style.overflowY = this._options.autoHeight ? 'hidden' : 'auto';\n    });\n    if (!suppressRender) {\n      this.render();\n    }\n\n    this.setScroller();\n    if (!suppressSetOverflow) {\n      this.setOverflow();\n    }\n\n    if (!suppressColumnSet) {\n      this.setColumns(this.columns);\n    }\n\n    if (this._options.enableMouseWheelScrollHandler && this._viewport && (!this.slickMouseWheelInstances || this.slickMouseWheelInstances.length === 0)) {\n      this._viewport.forEach((view) => {\n        this.slickMouseWheelInstances.push(MouseWheel({\n          element: view,\n          onMouseWheel: this.handleMouseWheel.bind(this)\n        }));\n      });\n    } else if (this._options.enableMouseWheelScrollHandler === false) {\n      this.destroyAllInstances(this.slickMouseWheelInstances); // remove scroll handler when option is disable\n    }\n  }\n\n  /**\n   *\n   * Ensures consistency in option setting, by thastIF autoHeight IS enabled, leaveSpaceForNewRows is set to FALSE.\n   * And, if forceFitColumns is True, then autosizeColsMode is set to LegacyForceFit.\n   */\n  validateAndEnforceOptions(): void {\n    if (this._options.autoHeight) {\n      this._options.leaveSpaceForNewRows = false;\n    }\n    if (this._options.forceFitColumns) {\n      this._options.autosizeColsMode = GridAutosizeColsMode.LegacyForceFit;\n    }\n  }\n\n  /**\n   * Unregisters a current selection model and registers a new one. See the definition of SelectionModel for more information.\n   * @param {Object} selectionModel A SelectionModel.\n   */\n  setSelectionModel(model: SelectionModel) {\n    if (this.selectionModel) {\n      this.selectionModel.onSelectedRangesChanged.unsubscribe(this.handleSelectedRangesChanged.bind(this));\n      if (this.selectionModel.destroy) {\n        this.selectionModel.destroy();\n      }\n    }\n\n    this.selectionModel = model;\n    if (this.selectionModel) {\n      this.selectionModel.init(this as unknown as SlickGridModel);\n      this.selectionModel.onSelectedRangesChanged.subscribe(this.handleSelectedRangesChanged.bind(this));\n    }\n  }\n\n  /** Returns the current SelectionModel. See here for more information about SelectionModels. */\n  getSelectionModel() {\n    return this.selectionModel;\n  }\n\n  /** add/remove frozen class to left headers/footer when defined */\n  protected setPaneFrozenClasses(): void {\n    const classAction = this.hasFrozenColumns() ? 'add' : 'remove';\n    for (const elm of [this._paneHeaderL, this._paneTopL, this._paneBottomL]) {\n      elm.classList[classAction]('frozen');\n    }\n  }\n\n  //////////////////////////////////////////////////////////////////////\n  // End Grid and DOM Initialisation\n  //////////////////////////////////////////////////////////////////////\n\n\n  //////////////////////////////////////////////////////////////////////\n  // Column Management, Headers and Footers\n  //////////////////////////////////////////////////////////////////////\n\n  // Returns a boolean indicating whether the grid is configured with frozen columns.\n  protected hasFrozenColumns() {\n    return this._options.frozenColumn! > -1;\n  }\n\n  /**\n   * Updates an existing column definition and a corresponding header DOM element with the new title and tooltip.\n   * @param {Number|String} columnId Column id.\n   * @param {string | HTMLElement | DocumentFragment} [title] New column name.\n   * @param {String} [toolTip] New column tooltip.\n   */\n  updateColumnHeader(columnId: number | string, title?: string | HTMLElement | DocumentFragment, toolTip?: string) {\n    if (this.initialized) {\n      const idx = this.getColumnIndex(columnId);\n      if (!Utils.isDefined(idx)) {\n        return;\n      }\n\n      const columnDef = this.columns[idx];\n      const header: HTMLElement | undefined = this.getColumnByIndex(idx);\n      if (header) {\n        if (title !== undefined) {\n          this.columns[idx].name = title;\n        }\n        if (toolTip !== undefined) {\n          this.columns[idx].toolTip = toolTip;\n        }\n\n        this.trigger(this.onBeforeHeaderCellDestroy, {\n          node: header,\n          column: columnDef,\n          grid: this\n        });\n\n        header.setAttribute('title', toolTip || '');\n        if (title !== undefined) {\n          this.applyHtmlCode(header.children[0] as HTMLElement, title);\n        }\n\n        this.trigger(this.onHeaderCellRendered, {\n          node: header,\n          column: columnDef,\n          grid: this\n        });\n      }\n    }\n  }\n\n  /**\n   * Get the Header DOM element\n   * @param {C} columnDef - column definition\n   */\n  getHeader(columnDef: C) {\n    if (!columnDef) {\n      return this.hasFrozenColumns() ? this._headers : this._headerL;\n    }\n    const idx = this.getColumnIndex(columnDef.id);\n    return this.hasFrozenColumns() ? ((idx <= this._options.frozenColumn!) ? this._headerL : this._headerR) : this._headerL;\n  }\n\n  /**\n   * Get a specific Header Column DOM element by its column Id or index\n   * @param {Number|String} columnIdOrIdx - column Id or index\n   */\n  getHeaderColumn(columnIdOrIdx: number | string) {\n    const idx = (typeof columnIdOrIdx === 'number' ? columnIdOrIdx : this.getColumnIndex(columnIdOrIdx));\n    const targetHeader = this.hasFrozenColumns() ? ((idx <= this._options.frozenColumn!) ? this._headerL : this._headerR) : this._headerL;\n    const targetIndex = this.hasFrozenColumns() ? ((idx <= this._options.frozenColumn!) ? idx : idx - this._options.frozenColumn! - 1) : idx;\n\n    return targetHeader.children[targetIndex] as HTMLDivElement;\n  }\n\n  /** Get the Header Row DOM element */\n  getHeaderRow() {\n    return this.hasFrozenColumns() ? this._headerRows : this._headerRows[0];\n  }\n\n  /** Get the Footer DOM element */\n  getFooterRow() {\n    return this.hasFrozenColumns() ? this._footerRow : this._footerRow[0];\n  }\n\n  /**\n   * Get Header Row Column DOM element by its column Id or index\n   * @param {Number|String} columnIdOrIdx - column Id or index\n   */\n  getHeaderRowColumn(columnIdOrIdx: number | string) {\n    let idx = (typeof columnIdOrIdx === 'number' ? columnIdOrIdx : this.getColumnIndex(columnIdOrIdx));\n    let headerRowTarget: HTMLDivElement;\n\n    if (this.hasFrozenColumns()) {\n      if (idx <= this._options.frozenColumn!) {\n        headerRowTarget = this._headerRowL;\n      } else {\n        headerRowTarget = this._headerRowR;\n        idx -= this._options.frozenColumn! + 1;\n      }\n    } else {\n      headerRowTarget = this._headerRowL;\n    }\n\n    return headerRowTarget.children[idx] as HTMLDivElement;\n  }\n\n  /**\n   * Get the Footer Row Column DOM element by its column Id or index\n   * @param {Number|String} columnIdOrIdx - column Id or index\n   */\n  getFooterRowColumn(columnIdOrIdx: number | string) {\n    let idx = (typeof columnIdOrIdx === 'number' ? columnIdOrIdx : this.getColumnIndex(columnIdOrIdx));\n    let footerRowTarget: HTMLDivElement;\n\n    if (this.hasFrozenColumns()) {\n      if (idx <= this._options.frozenColumn!) {\n        footerRowTarget = this._footerRowL;\n      } else {\n        footerRowTarget = this._footerRowR;\n\n        idx -= this._options.frozenColumn! + 1;\n      }\n    } else {\n      footerRowTarget = this._footerRowL;\n    }\n\n    return footerRowTarget.children[idx] as HTMLDivElement;\n  }\n\n  /**\n   * If footer rows are enabled, clears existing footer cells then iterates over all columns.\n   * For each visible column, it creates a footer cell element (adding \u201Cfrozen\u201D classes if needed),\n   * stores the column definition in the element\u2019s storage, and triggers the onFooterRowCellRendered event.\n   */\n  protected createColumnFooter() {\n    if (this._options.createFooterRow) {\n      this._footerRow.forEach((footer) => {\n        const columnElements = footer.querySelectorAll('.slick-footerrow-column');\n        columnElements.forEach((column) => {\n          const columnDef = Utils.storage.get(column, 'column');\n          this.trigger(this.onBeforeFooterRowCellDestroy, {\n            node: column,\n            column: columnDef,\n            grid: this\n          });\n        });\n      });\n\n      Utils.emptyElement(this._footerRowL);\n      Utils.emptyElement(this._footerRowR);\n\n      for (let i = 0; i < this.columns.length; i++) {\n        const m = this.columns[i];\n        if (!m || m.hidden) { continue; }\n\n        const footerRowCell = Utils.createDomElement('div', { className: `ui-state-default slick-state-default slick-footerrow-column l${i} r${i}` }, this.hasFrozenColumns() && (i > this._options.frozenColumn!) ? this._footerRowR : this._footerRowL);\n        const className = this.hasFrozenColumns() && i <= this._options.frozenColumn! ? 'frozen' : null;\n        if (className) {\n          footerRowCell.classList.add(className);\n        }\n\n        Utils.storage.put(footerRowCell, 'column', m);\n\n        this.trigger(this.onFooterRowCellRendered, {\n          node: footerRowCell,\n          column: m,\n          grid: this\n        });\n      }\n    }\n  }\n\n  /**\n   * For each header container, binds a click event that\u2014\n   *    if the clicked header is sortable and no column resizing is in progress\u2014\n   *      --> toggles the sort direction (or adds/removes the column in a multi\u2013column sort),\n   *      --> triggers onBeforeSort\n   *      --> and if not cancelled, updates the sort columns and triggers onSort.\n   */\n  protected setupColumnSort() {\n    this._headers.forEach((header) => {\n      this._bindingEventService.bind(header, 'click', (e: any) => {\n        if (this.columnResizeDragging) {\n          return;\n        }\n\n        if (e.target.classList.contains('slick-resizable-handle')) {\n          return;\n        }\n\n        const coll = e.target.closest('.slick-header-column');\n        if (!coll) {\n          return;\n        }\n\n        const column = Utils.storage.get(coll, 'column');\n        if (column.sortable) {\n          if (!this.getEditorLock()?.commitCurrentEdit()) {\n            return;\n          }\n\n          const previousSortColumns = this.sortColumns.slice();\n          let sortColumn: ColumnSort | null = null;\n          let i = 0;\n          for (; i < this.sortColumns.length; i++) {\n            if (this.sortColumns[i].columnId === column.id) {\n              sortColumn = this.sortColumns[i];\n              sortColumn.sortAsc = !sortColumn.sortAsc;\n              break;\n            }\n          }\n          const hadSortCol = !!sortColumn;\n\n          if (this._options.tristateMultiColumnSort) {\n            if (!sortColumn) {\n              sortColumn = { columnId: column.id, sortAsc: column.defaultSortAsc, sortCol: column };\n            }\n            if (hadSortCol && sortColumn.sortAsc) {\n              // three state: remove sort rather than go back to ASC\n              this.sortColumns.splice(i, 1);\n              sortColumn = null;\n            }\n            if (!this._options.multiColumnSort) {\n              this.sortColumns = [];\n            }\n            if (sortColumn && (!hadSortCol || !this._options.multiColumnSort)) {\n              this.sortColumns.push(sortColumn);\n            }\n          } else {\n            // legacy behaviour\n            if (e.metaKey && this._options.multiColumnSort) {\n              if (sortColumn) {\n                this.sortColumns.splice(i, 1);\n              }\n            } else {\n              if ((!e.shiftKey && !e.metaKey) || !this._options.multiColumnSort) {\n                this.sortColumns = [];\n              }\n\n              if (!sortColumn) {\n                sortColumn = { columnId: column.id, sortAsc: column.defaultSortAsc, sortCol: column };\n                this.sortColumns.push(sortColumn);\n              } else if (this.sortColumns.length === 0) {\n                this.sortColumns.push(sortColumn);\n              }\n            }\n          }\n\n          let onSortArgs;\n          if (!this._options.multiColumnSort) {\n            onSortArgs = {\n              multiColumnSort: false,\n              previousSortColumns,\n              columnId: (this.sortColumns.length > 0 ? column.id : null),\n              sortCol: (this.sortColumns.length > 0 ? column : null),\n              sortAsc: (this.sortColumns.length > 0 ? this.sortColumns[0].sortAsc : true)\n            };\n          } else {\n            onSortArgs = {\n              multiColumnSort: true,\n              previousSortColumns,\n              sortCols: this.sortColumns.map((col) => {\n                const tempCol = this.columns[this.getColumnIndex(col.columnId)];\n                return !tempCol || tempCol.hidden ? null : { columnId: tempCol.id, sortCol: tempCol, sortAsc: col.sortAsc };\n              }).filter((el) => el)\n            };\n          }\n\n          if (this.trigger(this.onBeforeSort, onSortArgs, e).getReturnValue() !== false) {\n            this.setSortColumns(this.sortColumns);\n            this.trigger(this.onSort, onSortArgs, e);\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Clears any existing header cells and header row cells, recalculates header widths,\n   * then iterates over each visible column to create header cell elements\n   * (and header row cells if enabled) with appropriate content, CSS classes, event bindings,\n   * and sort indicator elements. Also triggers before\u2013destroy and rendered events as needed.\n   */\n  protected createColumnHeaders() {\n    this._headers.forEach((header) => {\n      const columnElements = header.querySelectorAll('.slick-header-column');\n      columnElements.forEach((column) => {\n        const columnDef = Utils.storage.get(column, 'column');\n        if (columnDef) {\n          this.trigger(this.onBeforeHeaderCellDestroy, {\n            node: column,\n            column: columnDef,\n            grid: this\n          });\n        }\n      });\n    });\n\n    Utils.emptyElement(this._headerL);\n    Utils.emptyElement(this._headerR);\n\n    this.getHeadersWidth();\n\n    Utils.width(this._headerL, this.headersWidthL);\n    Utils.width(this._headerR, this.headersWidthR);\n\n    this._headerRows.forEach((row) => {\n      const columnElements = row.querySelectorAll('.slick-headerrow-column');\n      columnElements.forEach((column) => {\n        const columnDef = Utils.storage.get(column, 'column');\n        if (columnDef) {\n          this.trigger(this.onBeforeHeaderRowCellDestroy, {\n            node: this,\n            column: columnDef,\n            grid: this\n          });\n        }\n      });\n    });\n\n    Utils.emptyElement(this._headerRowL);\n    Utils.emptyElement(this._headerRowR);\n\n    if (this._options.createFooterRow) {\n      const footerRowLColumnElements = this._footerRowL.querySelectorAll('.slick-footerrow-column');\n      footerRowLColumnElements.forEach((column) => {\n        const columnDef = Utils.storage.get(column, 'column');\n        if (columnDef) {\n          this.trigger(this.onBeforeFooterRowCellDestroy, {\n            node: this,\n            column: columnDef,\n            grid: this\n          });\n        }\n      });\n      Utils.emptyElement(this._footerRowL);\n\n      if (this.hasFrozenColumns()) {\n        const footerRowRColumnElements = this._footerRowR.querySelectorAll('.slick-footerrow-column');\n        footerRowRColumnElements.forEach((column) => {\n          const columnDef = Utils.storage.get(column, 'column');\n          if (columnDef) {\n            this.trigger(this.onBeforeFooterRowCellDestroy, {\n              node: this,\n              column: columnDef,\n              grid: this\n            });\n          }\n        });\n        Utils.emptyElement(this._footerRowR);\n      }\n    }\n\n    for (let i = 0; i < this.columns.length; i++) {\n      const m: C = this.columns[i];\n      if (m.hidden) { continue; }\n\n      const headerTarget = this.hasFrozenColumns() ? ((i <= this._options.frozenColumn!) ? this._headerL : this._headerR) : this._headerL;\n      const headerRowTarget = this.hasFrozenColumns() ? ((i <= this._options.frozenColumn!) ? this._headerRowL : this._headerRowR) : this._headerRowL;\n\n      const header = Utils.createDomElement('div', { id: `${this.uid + m.id}`, dataset: { id: String(m.id) }, role: 'columnheader', className: 'ui-state-default slick-state-default slick-header-column' }, headerTarget);\n      if (m.toolTip) {\n        header.title = m.toolTip;\n      }\n      if (!m.reorderable) {\n        header.classList.add(this._options.unorderableColumnCssClass!);\n      }\n      const colNameElm = Utils.createDomElement('span', { className: 'slick-column-name' }, header);\n      this.applyHtmlCode(colNameElm, m.name as string);\n\n      Utils.width(header, m.width! - this.headerColumnWidthDiff);\n\n      let classname = m.headerCssClass || null;\n      if (classname) {\n        header.classList.add(...Utils.classNameToList(classname));\n      }\n      classname = this.hasFrozenColumns() && i <= this._options.frozenColumn! ? 'frozen' : null;\n      if (classname) {\n        header.classList.add(classname);\n      }\n\n      this._bindingEventService.bind(header, 'mouseenter', this.handleHeaderMouseEnter.bind(this) as EventListener);\n      this._bindingEventService.bind(header, 'mouseleave', this.handleHeaderMouseLeave.bind(this) as EventListener);\n\n      Utils.storage.put(header, 'column', m);\n\n      if (this._options.enableColumnReorder || m.sortable) {\n        this._bindingEventService.bind(header, 'mouseenter', this.handleHeaderMouseHoverOn.bind(this) as EventListener);\n        this._bindingEventService.bind(header, 'mouseleave', this.handleHeaderMouseHoverOff.bind(this) as EventListener);\n      }\n\n      if (m.hasOwnProperty('headerCellAttrs') && m.headerCellAttrs instanceof Object) {\n        Object.keys(m.headerCellAttrs).forEach(key => {\n          if (m.headerCellAttrs.hasOwnProperty(key)) {\n            header.setAttribute(key, m.headerCellAttrs[key]);\n          }\n        });\n      }\n\n      if (m.sortable) {\n        header.classList.add('slick-header-sortable');\n        Utils.createDomElement('div', { className: `slick-sort-indicator ${this._options.numberedMultiColumnSort && !this._options.sortColNumberInSeparateSpan ? ' slick-sort-indicator-numbered' : ''}` }, header);\n        if (this._options.numberedMultiColumnSort && this._options.sortColNumberInSeparateSpan) {\n          Utils.createDomElement('div', { className: 'slick-sort-indicator-numbered' }, header);\n        }\n      }\n\n      this.trigger(this.onHeaderCellRendered, {\n        node: header,\n        column: m,\n        grid: this\n      });\n\n      if (this._options.showHeaderRow) {\n        const headerRowCell = Utils.createDomElement('div', { className: `ui-state-default slick-state-default slick-headerrow-column l${i} r${i}` }, headerRowTarget);\n        const frozenClasses = this.hasFrozenColumns() && i <= this._options.frozenColumn! ? 'frozen' : null;\n        if (frozenClasses) {\n          headerRowCell.classList.add(frozenClasses);\n        }\n\n        this._bindingEventService.bind(headerRowCell, 'mouseenter', this.handleHeaderRowMouseEnter.bind(this) as EventListener);\n        this._bindingEventService.bind(headerRowCell, 'mouseleave', this.handleHeaderRowMouseLeave.bind(this) as EventListener);\n\n        Utils.storage.put(headerRowCell, 'column', m);\n\n        this.trigger(this.onHeaderRowCellRendered, {\n          node: headerRowCell,\n          column: m,\n          grid: this\n        });\n      }\n      if (this._options.createFooterRow && this._options.showFooterRow) {\n        const footerRowTarget = this.hasFrozenColumns() ? ((i <= this._options.frozenColumn!) ? this._footerRow[0] : this._footerRow[1]) : this._footerRow[0];\n        const footerRowCell = Utils.createDomElement('div', { className: `ui-state-default slick-state-default slick-footerrow-column l${i} r${i}` }, footerRowTarget);\n        Utils.storage.put(footerRowCell, 'column', m);\n\n        this.trigger(this.onFooterRowCellRendered, {\n          node: footerRowCell,\n          column: m,\n          grid: this\n        });\n      }\n    }\n\n    this.setSortColumns(this.sortColumns);\n    this.setupColumnResize();\n    if (this._options.enableColumnReorder) {\n      if (typeof this._options.enableColumnReorder === 'function') {\n        this._options.enableColumnReorder(this as unknown as SlickGridModel, this._headers, this.headerColumnWidthDiff, this.setColumns as any, this.setupColumnResize, this.columns, this.getColumnIndex, this.uid, this.trigger);\n      } else {\n        this.setupColumnReorder();\n      }\n    }\n  }\n\n  /**\n   * Destroys any existing sortable instances and creates new ones on the left and right header\n   * containers using the Sortable library. Configures options including animation,\n   * drag handle selectors, auto-scroll, and callbacks (onStart, onEnd) that\n   * update the column order, set columns, trigger onColumnsReordered, and reapply column resizing.\n   */\n  protected setupColumnReorder() {\n    this.sortableSideLeftInstance?.destroy();\n    this.sortableSideRightInstance?.destroy();\n\n    let columnScrollTimer: any = null;\n\n    const scrollColumnsRight = () => this._viewportScrollContainerX.scrollLeft = this._viewportScrollContainerX.scrollLeft + 10;\n    const scrollColumnsLeft = () => this._viewportScrollContainerX.scrollLeft = this._viewportScrollContainerX.scrollLeft - 10;\n\n    let canDragScroll = false;\n    const sortableOptions = {\n      animation: 50,\n      direction: 'horizontal',\n      chosenClass: 'slick-header-column-active',\n      ghostClass: 'slick-sortable-placeholder',\n      draggable: '.slick-header-column',\n      dragoverBubble: false,\n      revertClone: true,\n      scroll: !this.hasFrozenColumns(), // enable auto-scroll\n      // lock unorderable columns by using a combo of filter + onMove\n      filter: `.${this._options.unorderableColumnCssClass}`,\n      onMove: (event: MouseEvent & { related: HTMLElement; }) => {\n        return !event.related.classList.contains(this._options.unorderableColumnCssClass as string);\n      },\n      onStart: (e: SortableEvent) => {\n        e.item.classList.add('slick-header-column-active');\n        canDragScroll = !this.hasFrozenColumns() || Utils.offset(e.item)!.left > Utils.offset(this._viewportScrollContainerX)!.left;\n\n        if (canDragScroll && e.originalEvent.pageX > this._container.clientWidth) {\n          if (!(columnScrollTimer)) {\n            columnScrollTimer = window.setInterval(scrollColumnsRight, 100);\n          }\n        } else if (canDragScroll && e.originalEvent.pageX < Utils.offset(this._viewportScrollContainerX)!.left) {\n          if (!(columnScrollTimer)) {\n            columnScrollTimer = window.setInterval(scrollColumnsLeft, 100);\n          }\n        } else {\n          window.clearInterval(columnScrollTimer);\n          columnScrollTimer = null;\n        }\n      },\n      onEnd: (e: SortableEvent) => {\n        e.item.classList.remove('slick-header-column-active');\n        window.clearInterval(columnScrollTimer);\n        columnScrollTimer = null;\n\n        if (!this.getEditorLock()?.commitCurrentEdit()) {\n          return;\n        }\n\n        let reorderedIds = this.sortableSideLeftInstance?.toArray() ?? [];\n        reorderedIds = reorderedIds.concat(this.sortableSideRightInstance?.toArray() ?? []);\n\n        const reorderedColumns: C[] = [];\n        for (let i = 0; i < reorderedIds.length; i++) {\n          reorderedColumns.push(this.columns[this.getColumnIndex(reorderedIds[i])]);\n        }\n        this.setColumns(reorderedColumns);\n\n        this.trigger(this.onColumnsReordered, { impactedColumns: this.columns });\n        e.stopPropagation();\n        this.setupColumnResize();\n        if (this.activeCellNode) {\n          this.setFocus(); // refocus on active cell\n        }\n      }\n    } as SortableOptions;\n\n    this.sortableSideLeftInstance = Sortable.create(this._headerL, sortableOptions);\n    this.sortableSideRightInstance = Sortable.create(this._headerR, sortableOptions);\n  }\n\n  /**\n   * Returns a concatenated array containing the children (header column elements) from both the left and right header containers.\n   * @returns {HTMLElement[]} - An array of header column elements.\n   */\n  protected getHeaderChildren() {\n    const a = Array.from(this._headers[0].children);\n    const b = Array.from(this._headers[1].children);\n    return a.concat(b) as HTMLElement[];\n  }\n\n  /**\n   * When a resizable handle is double\u2013clicked, extracts the column identifier from the parent element\u2019s id\n   * (by removing the grid uid) and triggers the onColumnsResizeDblClick event with that identifier.\n   * @param {MouseEvent & { target: HTMLDivElement }} evt - The double-click event on the resizable handle.\n   */\n  protected handleResizeableDoubleClick(evt: MouseEvent & { target: HTMLDivElement; }) {\n    const triggeredByColumn = evt.target.parentElement!.id.replace(this.uid, '');\n    this.trigger(this.onColumnsResizeDblClick, { triggeredByColumn });\n  }\n\n  /**\n   * Ensures the Resizable module is available and then iterates over header children to remove\n   * any existing resizable handles. Determines which columns are resizable (tracking the first\n   * and last resizable columns) and for each eligible column, creates a resizable handle,\n   * binds a double\u2013click event, and creates a Resizable instance with callbacks for onResizeStart,\n   * onResize, and onResizeEnd. These callbacks manage column width adjustments (including force\u2013fit\n   * and frozen column considerations), update header and canvas widths, trigger related events,\n   * and re\u2013render the grid as needed.\n   * @returns {void}\n   */\n  protected setupColumnResize() {\n    if (typeof Resizable === 'undefined') {\n      throw new Error(`Slick.Resizable is undefined, make sure to import \"slick.interactions.js\"`);\n    }\n\n    let j: number;\n    let k: number;\n    let c: C;\n    let pageX: number;\n    let minPageX: number;\n    let maxPageX: number;\n    let firstResizable: number | undefined;\n    let lastResizable = -1;\n    let frozenLeftColMaxWidth = 0;\n\n    const children: HTMLElement[] = this.getHeaderChildren();\n    const vc = this.getVisibleColumns();\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      const handles = child.querySelectorAll('.slick-resizable-handle');\n      handles.forEach((handle) => handle.remove());\n\n      if (i >= vc.length || !vc[i]) {\n        continue;\n      }\n\n      if (vc[i].resizable) {\n        if (firstResizable === undefined) {\n          firstResizable = i;\n        }\n        lastResizable = i;\n      }\n    }\n\n    if (firstResizable === undefined) {\n      return;\n    }\n\n    for (let i = 0; i < children.length; i++) {\n      const colElm = children[i];\n\n      if (i >= vc.length || !vc[i]) {\n        continue;\n      }\n      if (i < firstResizable || (this._options.forceFitColumns && i >= lastResizable)) {\n        continue;\n      }\n\n      const resizeableHandle = Utils.createDomElement('div', { className: 'slick-resizable-handle', role: 'separator', ariaOrientation: 'horizontal' }, colElm);\n      this._bindingEventService.bind(resizeableHandle, 'dblclick', this.handleResizeableDoubleClick.bind(this) as EventListener);\n\n      this.slickResizableInstances.push(\n        Resizable({\n          resizeableElement: colElm as HTMLElement,\n          resizeableHandleElement: resizeableHandle,\n          onResizeStart: (e, resizeElms): boolean | void => {\n            const targetEvent = (e as TouchEvent).touches ? (e as TouchEvent).changedTouches[0] : e;\n            if (!this.getEditorLock()?.commitCurrentEdit()) {\n              return false;\n            }\n            pageX = (targetEvent as MouseEvent).pageX;\n            frozenLeftColMaxWidth = 0;\n            resizeElms.resizeableElement.classList.add('slick-header-column-active');\n            let shrinkLeewayOnRight: number | null = null;\n            let stretchLeewayOnRight: number | null = null;\n            // lock each column's width option to current width\n            for (let pw = 0; pw < children.length; pw++) {\n              if (pw >= vc.length || !vc[pw]) {\n                continue;\n              }\n              vc[pw].previousWidth = children[pw].offsetWidth;\n            }\n            if (this._options.forceFitColumns) {\n              shrinkLeewayOnRight = 0;\n              stretchLeewayOnRight = 0;\n              // colums on right affect maxPageX/minPageX\n              for (j = i + 1; j < vc.length; j++) {\n                c = vc[j];\n                if (c?.resizable) {\n                  if (stretchLeewayOnRight !== null) {\n                    if (c.maxWidth) {\n                      stretchLeewayOnRight += c.maxWidth - (c.previousWidth || 0);\n                    } else {\n                      stretchLeewayOnRight = null;\n                    }\n                  }\n                  shrinkLeewayOnRight += (c.previousWidth || 0) - Math.max(c.minWidth || 0, this.absoluteColumnMinWidth);\n                }\n              }\n            }\n            let shrinkLeewayOnLeft = 0;\n            let stretchLeewayOnLeft: number | null = 0;\n            for (j = 0; j <= i; j++) {\n              // columns on left only affect minPageX\n              c = vc[j];\n              if (c?.resizable) {\n                if (stretchLeewayOnLeft !== null) {\n                  if (c.maxWidth) {\n                    stretchLeewayOnLeft += c.maxWidth - (c.previousWidth || 0);\n                  } else {\n                    stretchLeewayOnLeft = null;\n                  }\n                }\n                shrinkLeewayOnLeft += (c.previousWidth || 0) - Math.max(c.minWidth || 0, this.absoluteColumnMinWidth);\n              }\n            }\n            if (shrinkLeewayOnRight === null) {\n              shrinkLeewayOnRight = 100000;\n            }\n            if (shrinkLeewayOnLeft === null) {\n              shrinkLeewayOnLeft = 100000;\n            }\n            if (stretchLeewayOnRight === null) {\n              stretchLeewayOnRight = 100000;\n            }\n            if (stretchLeewayOnLeft === null) {\n              stretchLeewayOnLeft = 100000;\n            }\n            maxPageX = pageX + Math.min(shrinkLeewayOnRight, stretchLeewayOnLeft);\n            minPageX = pageX - Math.min(shrinkLeewayOnLeft, stretchLeewayOnRight);\n          },\n          onResize: (e, resizeElms) => {\n            const targetEvent = (e as TouchEvent).touches ? (e as TouchEvent).changedTouches[0] : e;\n            this.columnResizeDragging = true;\n            let actualMinWidth;\n            const d = Math.min(maxPageX, Math.max(minPageX, (targetEvent as MouseEvent).pageX)) - pageX;\n            let x;\n            let newCanvasWidthL = 0;\n            let newCanvasWidthR = 0;\n            const viewportWidth = this.getViewportInnerWidth();\n\n            if (d < 0) { // shrink column\n              x = d;\n\n              for (j = i; j >= 0; j--) {\n                c = vc[j];\n                if (c?.resizable && !c.hidden) {\n                  actualMinWidth = Math.max(c.minWidth || 0, this.absoluteColumnMinWidth);\n                  if (x && (c.previousWidth || 0) + x < actualMinWidth) {\n                    x += (c.previousWidth || 0) - actualMinWidth;\n                    c.width = actualMinWidth;\n                  } else {\n                    c.width = (c.previousWidth || 0) + x;\n                    x = 0;\n                  }\n                }\n              }\n\n              for (k = 0; k <= i; k++) {\n                c = vc[k];\n                if (!c || c.hidden) { continue; }\n\n                if (this.hasFrozenColumns() && (k > this._options.frozenColumn!)) {\n                  newCanvasWidthR += c.width || 0;\n                } else {\n                  newCanvasWidthL += c.width || 0;\n                }\n              }\n\n              if (this._options.forceFitColumns) {\n                x = -d;\n                for (j = i + 1; j < vc.length; j++) {\n                  c = vc[j];\n                  if (!c || c.hidden) { continue; }\n                  if (c.resizable) {\n                    if (x && c.maxWidth && (c.maxWidth - (c.previousWidth || 0) < x)) {\n                      x -= c.maxWidth - (c.previousWidth || 0);\n                      c.width = c.maxWidth;\n                    } else {\n                      c.width = (c.previousWidth || 0) + x;\n                      x = 0;\n                    }\n\n                    if (this.hasFrozenColumns() && (j > this._options.frozenColumn!)) {\n                      newCanvasWidthR += c.width || 0;\n                    } else {\n                      newCanvasWidthL += c.width || 0;\n                    }\n                  }\n                }\n              } else {\n                for (j = i + 1; j < vc.length; j++) {\n                  c = vc[j];\n                  if (!c || c.hidden) { continue; }\n\n                  if (this.hasFrozenColumns() && (j > this._options.frozenColumn!)) {\n                    newCanvasWidthR += c.width || 0;\n                  } else {\n                    newCanvasWidthL += c.width || 0;\n                  }\n                }\n              }\n\n              if (this._options.forceFitColumns) {\n                x = -d;\n                for (j = i + 1; j < vc.length; j++) {\n                  c = vc[j];\n                  if (!c || c.hidden) { continue; }\n                  if (c.resizable) {\n                    if (x && c.maxWidth && (c.maxWidth - (c.previousWidth || 0) < x)) {\n                      x -= c.maxWidth - (c.previousWidth || 0);\n                      c.width = c.maxWidth;\n                    } else {\n                      c.width = (c.previousWidth || 0) + x;\n                      x = 0;\n                    }\n                  }\n                }\n              }\n            } else { // stretch column\n              x = d;\n\n              newCanvasWidthL = 0;\n              newCanvasWidthR = 0;\n\n              for (j = i; j >= 0; j--) {\n                c = vc[j];\n                if (!c || c.hidden) { continue; }\n                if (c.resizable) {\n                  if (x && c.maxWidth && (c.maxWidth - (c.previousWidth || 0) < x)) {\n                    x -= c.maxWidth - (c.previousWidth || 0);\n                    c.width = c.maxWidth;\n                  } else {\n                    const newWidth = (c.previousWidth || 0) + x;\n                    const resizedCanvasWidthL = this.canvasWidthL + x;\n\n                    if (this.hasFrozenColumns() && (j <= this._options.frozenColumn!)) {\n                      // if we're on the left frozen side, we need to make sure that our left section width never goes over the total viewport width\n                      if (newWidth > frozenLeftColMaxWidth && resizedCanvasWidthL < (viewportWidth - this._options.frozenRightViewportMinWidth!)) {\n                        frozenLeftColMaxWidth = newWidth; // keep max column width ref, if we go over the limit this number will stop increasing\n                      }\n                      c.width = ((resizedCanvasWidthL + this._options.frozenRightViewportMinWidth!) > viewportWidth) ? frozenLeftColMaxWidth : newWidth;\n                    } else {\n                      c.width = newWidth;\n                    }\n                    x = 0;\n                  }\n                }\n              }\n\n              for (k = 0; k <= i; k++) {\n                c = vc[k];\n                if (!c || c.hidden) { continue; }\n\n                if (this.hasFrozenColumns() && (k > this._options.frozenColumn!)) {\n                  newCanvasWidthR += c.width || 0;\n                } else {\n                  newCanvasWidthL += c.width || 0;\n                }\n              }\n\n              if (this._options.forceFitColumns) {\n                x = -d;\n                for (j = i + 1; j < vc.length; j++) {\n                  c = vc[j];\n                  if (!c || c.hidden) { continue; }\n                  if (c.resizable) {\n                    actualMinWidth = Math.max(c.minWidth || 0, this.absoluteColumnMinWidth);\n                    if (x && (c.previousWidth || 0) + x < actualMinWidth) {\n                      x += (c.previousWidth || 0) - actualMinWidth;\n                      c.width = actualMinWidth;\n                    } else {\n                      c.width = (c.previousWidth || 0) + x;\n                      x = 0;\n                    }\n\n                    if (this.hasFrozenColumns() && (j > this._options.frozenColumn!)) {\n                      newCanvasWidthR += c.width || 0;\n                    } else {\n                      newCanvasWidthL += c.width || 0;\n                    }\n                  }\n                }\n              } else {\n                for (j = i + 1; j < vc.length; j++) {\n                  c = vc[j];\n                  if (!c || c.hidden) { continue; }\n\n                  if (this.hasFrozenColumns() && (j > this._options.frozenColumn!)) {\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    newCanvasWidthR += c.width || 0;\n                  } else {\n                    newCanvasWidthL += c.width || 0;\n                  }\n                }\n              }\n            }\n\n            if (this.hasFrozenColumns() && newCanvasWidthL !== this.canvasWidthL) {\n              Utils.width(this._headerL, newCanvasWidthL + 1000);\n              Utils.setStyleSize(this._paneHeaderR, 'left', newCanvasWidthL);\n            }\n\n            this.applyColumnHeaderWidths();\n            if (this._options.syncColumnCellResize) {\n              this.applyColumnWidths();\n            }\n            this.trigger(this.onColumnsDrag, {\n              triggeredByColumn: resizeElms.resizeableElement,\n              resizeHandle: resizeElms.resizeableHandleElement\n            });\n          },\n          onResizeEnd: (_e, resizeElms) => {\n            resizeElms.resizeableElement.classList.remove('slick-header-column-active');\n\n            const triggeredByColumn = resizeElms.resizeableElement.id.replace(this.uid, '');\n            if (this.trigger(this.onBeforeColumnsResize, { triggeredByColumn }).getReturnValue() === true) {\n              this.applyColumnHeaderWidths();\n            }\n            let newWidth;\n            for (j = 0; j < vc.length; j++) {\n              c = vc[j];\n              if (!c || c.hidden) { continue; }\n              newWidth = children[j].offsetWidth;\n\n              if (c.previousWidth !== newWidth && c.rerenderOnResize) {\n                this.invalidateAllRows();\n              }\n            }\n            this.updateCanvasWidth(true);\n            this.render();\n            this.trigger(this.onColumnsResized, { triggeredByColumn });\n            window.clearTimeout(this._columnResizeTimer);\n            this._columnResizeTimer = window.setTimeout(() => { this.columnResizeDragging = false; }, 300);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * Validates and sets the frozenColumn option (ensuring it is within valid bounds, or setting it to \u20131)\n   * and, if a frozenRow is specified (greater than \u20131), sets the grid\u2019s frozen\u2013row flags,\n   * computes the frozenRowsHeight (based on rowHeight), and determines the actual frozen row index\n   * depending on whether frozenBottom is enabled.\n   */\n  protected setFrozenOptions() {\n    this._options.frozenColumn = (this._options.frozenColumn! >= 0 && this._options.frozenColumn! < this.columns.length)\n      ? parseInt(this._options.frozenColumn as unknown as string, 10)\n      : -1;\n\n    if (this._options.frozenRow! > -1) {\n      this.hasFrozenRows = true;\n      this.frozenRowsHeight = (this._options.frozenRow!) * this._options.rowHeight!;\n      const dataLength = this.getDataLength();\n\n      this.actualFrozenRow = (this._options.frozenBottom)\n        ? (dataLength - this._options.frozenRow!)\n        : this._options.frozenRow!;\n    } else {\n      this.hasFrozenRows = false;\n    }\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // Column Management - Autosizing\n  //////////////////////////////////////////////////////////////////////////////////////////////\n\n  /**\n   * Proportionally resize a specific column by its name, index or Id\n   *\n   * Resizes based on its content, but determines the column definition from the provided identifier or index.\n   * Then, obtains a grid canvas and calls getColAutosizeWidth to compute and update the column\u2019s width.\n   */\n  autosizeColumn(columnOrIndexOrId: number | string, isInit?: boolean) {\n    let colDef: C | null = null;\n    let colIndex = -1;\n    if (typeof columnOrIndexOrId === 'number') {\n      colDef = this.columns[columnOrIndexOrId];\n      colIndex = columnOrIndexOrId;\n    } else if (typeof columnOrIndexOrId === 'string') {\n      for (let i = 0; i < this.columns.length; i++) {\n        if (this.columns[i].id === columnOrIndexOrId) { colDef = this.columns[i]; colIndex = i; }\n      }\n    }\n    if (!colDef) {\n      return;\n    }\n    const gridCanvas = this.getCanvasNode(0, 0) as HTMLElement;\n    this.getColAutosizeWidth(colDef, colIndex, gridCanvas, isInit || false, colIndex);\n  }\n\n  /**\n   * Returns true if the column should be treated as locked (i.e. not resized) based on autosize settings.\n   * The decision is based on whether header text is not ignored, sizeToRemaining is false,\n   * content size equals header width, and the current width is less than 100 pixels.\n   *\n   * @param {AutoSize} [autoSize={}] - The autosize configuration for the column.\n   * @returns {boolean} - Returns `true` if the column should be treated as locked, otherwise `false`.\n   */\n  protected treatAsLocked(autoSize: AutoSize = {}): boolean {\n    // treat as locked (don't resize) if small and header is the widest part\n    return !autoSize.ignoreHeaderText\n      && !autoSize.sizeToRemaining\n      && (autoSize.contentSizePx === autoSize.headerWidthPx)\n      && ((autoSize.widthPx ?? 0) < 100);\n  }\n\n  /** Proportionately resizes all columns to fill available horizontal space.\n   * This does not take the cell contents into consideration.\n   *\n   * It does this by temporarily caching CSS for hidden containers, calling the internal autosizing logic\n   * (internalAutosizeColumns) with the autosize mode and initialisation flag,\n   * then restores the original CSS.\n   */\n  autosizeColumns(autosizeMode?: string, isInit?: boolean) {\n    const checkHiddenParents = !(this._hiddenParents?.length);\n    if (checkHiddenParents) {\n      this.cacheCssForHiddenInit();\n    }\n    this.internalAutosizeColumns(autosizeMode, isInit);\n    if (checkHiddenParents) {\n      this.restoreCssFromHiddenInit();\n    }\n  }\n\n  /**\n   * Implements the main autosizing algorithm. Depending on the autosize mode,\n   * it may call legacyAutosizeColumns (for legacy force\u2013fit modes), or proceed\n   * to compute column widths based on available viewport width. It iterates over columns\n   * to accumulate total widths, locked widths, and then adjusts widths proportionally.\n   * Finally, it calls reRenderColumns to update the grid.\n   *\n   * @param {string} [autosizeMode] - The autosize mode. If undefined, defaults to `autosizeColsMode` from options.\n   * @param {boolean} [isInit] - If `true`, applies initial settings for autosizing.\n   */\n  protected internalAutosizeColumns(autosizeMode?: string, isInit?: boolean) {\n    // LogColWidths();\n    autosizeMode = autosizeMode || this._options.autosizeColsMode;\n    if (autosizeMode === GridAutosizeColsMode.LegacyForceFit || autosizeMode === GridAutosizeColsMode.LegacyOff) {\n      this.legacyAutosizeColumns();\n      return;\n    }\n\n    if (autosizeMode === GridAutosizeColsMode.None) {\n      return;\n    }\n\n    // test for brower canvas support, canvas_context!=null if supported\n    this.canvas = document.createElement('canvas');\n    if (this.canvas?.getContext) { this.canvas_context = this.canvas.getContext('2d'); }\n\n    // pass in the grid canvas\n    const gridCanvas = this.getCanvasNode(0, 0) as HTMLElement;\n    const viewportWidth = this.getViewportInnerWidth();\n\n    // iterate columns to get autosizes\n    let i: number;\n    let c: C;\n    let colWidth: number;\n    let reRender = false;\n    let totalWidth = 0;\n    let totalWidthLessSTR = 0;\n    let strColsMinWidth = 0;\n    let totalMinWidth = 0;\n    let totalLockedColWidth = 0;\n    for (i = 0; i < this.columns.length; i++) {\n      c = this.columns[i];\n      this.getColAutosizeWidth(c, i, gridCanvas, isInit || false, i);\n      totalLockedColWidth += (c.autoSize?.autosizeMode === ColAutosizeMode.Locked ? (c.width || 0) : (this.treatAsLocked(c.autoSize) ? c.autoSize?.widthPx || 0 : 0));\n      totalMinWidth += (c.autoSize?.autosizeMode === ColAutosizeMode.Locked ? (c.width || 0) : (this.treatAsLocked(c.autoSize) ? c.autoSize?.widthPx || 0 : c.minWidth || 0));\n      totalWidth += (c.autoSize?.widthPx || 0);\n      totalWidthLessSTR += (c.autoSize?.sizeToRemaining ? 0 : c.autoSize?.widthPx || 0);\n      strColsMinWidth += (c.autoSize?.sizeToRemaining ? c.minWidth || 0 : 0);\n    }\n    const strColTotalGuideWidth = totalWidth - totalWidthLessSTR;\n\n    if (autosizeMode === GridAutosizeColsMode.FitViewportToCols) {\n      // - if viewport with is outside MinViewportWidthPx and MaxViewportWidthPx, then the viewport is set to\n      //   MinViewportWidthPx or MaxViewportWidthPx and the FitColsToViewport algorithm is used\n      // - viewport is resized to fit columns\n      let setWidth = totalWidth + (this.scrollbarDimensions?.width ?? 0);\n      autosizeMode = GridAutosizeColsMode.IgnoreViewport;\n\n      if (this._options.viewportMaxWidthPx && setWidth > this._options.viewportMaxWidthPx) {\n        setWidth = this._options.viewportMaxWidthPx;\n        autosizeMode = GridAutosizeColsMode.FitColsToViewport;\n      } else if (this._options.viewportMinWidthPx && setWidth < this._options.viewportMinWidthPx) {\n        setWidth = this._options.viewportMinWidthPx;\n        autosizeMode = GridAutosizeColsMode.FitColsToViewport;\n      } else {\n        // falling back to IgnoreViewport will size the columns as-is, with render checking\n        // for (i = 0; i < columns.length; i++) { columns[i].width = columns[i].autoSize.widthPx; }\n      }\n      Utils.width(this._container, setWidth);\n    }\n\n    if (autosizeMode === GridAutosizeColsMode.FitColsToViewport) {\n      if (strColTotalGuideWidth > 0 && totalWidthLessSTR < viewportWidth - strColsMinWidth) {\n        // if addl space remains in the viewport and there are SizeToRemaining cols, just the SizeToRemaining cols expand proportionally to fill viewport\n        for (i = 0; i < this.columns.length; i++) {\n          c = this.columns[i];\n          if (!c || c.hidden) { continue; }\n\n          const totalSTRViewportWidth = viewportWidth - totalWidthLessSTR;\n          if (c.autoSize?.sizeToRemaining) {\n            colWidth = totalSTRViewportWidth * (c.autoSize?.widthPx || 0) / strColTotalGuideWidth;\n          } else {\n            colWidth = (c.autoSize?.widthPx || 0);\n          }\n          if (c.rerenderOnResize && (c.width || 0) !== colWidth) {\n            reRender = true;\n          }\n          c.width = colWidth;\n        }\n      } else if ((this._options.viewportSwitchToScrollModeWidthPercent && totalWidthLessSTR + strColsMinWidth > viewportWidth * this._options.viewportSwitchToScrollModeWidthPercent / 100)\n        || (totalMinWidth > viewportWidth)) {\n        // if the total columns width is wider than the viewport by switchToScrollModeWidthPercent, switch to IgnoreViewport mode\n        autosizeMode = GridAutosizeColsMode.IgnoreViewport;\n      } else {\n        // otherwise (ie. no SizeToRemaining cols or viewport smaller than columns) all cols other than 'Locked' scale in proportion to fill viewport\n        // and SizeToRemaining get minWidth\n        let unallocatedColWidth = totalWidthLessSTR - totalLockedColWidth;\n        let unallocatedViewportWidth = viewportWidth - totalLockedColWidth - strColsMinWidth;\n        for (i = 0; i < this.columns.length; i++) {\n          c = this.columns[i];\n          if (!c || c.hidden) { continue; }\n\n          colWidth = c.width || 0;\n          if (c.autoSize?.autosizeMode !== ColAutosizeMode.Locked && !this.treatAsLocked(c.autoSize)) {\n            if (c.autoSize?.sizeToRemaining) {\n              colWidth = c.minWidth || 0;\n            } else {\n              // size width proportionally to free space (we know we have enough room due to the earlier calculations)\n              colWidth = unallocatedViewportWidth / unallocatedColWidth * (c.autoSize?.widthPx || 0) - 1;\n              if (colWidth < (c.minWidth || 0)) {\n                colWidth = c.minWidth || 0;\n              }\n\n              // remove the just allocated widths from the allocation pool\n              unallocatedColWidth -= (c.autoSize?.widthPx || 0);\n              unallocatedViewportWidth -= colWidth;\n            }\n          }\n          if (this.treatAsLocked(c.autoSize)) {\n            colWidth = (c.autoSize?.widthPx || 0);\n            if (colWidth < (c.minWidth || 0)) {\n              colWidth = c.minWidth || 0;\n            }\n          }\n          if (c.rerenderOnResize && c.width !== colWidth) {\n            reRender = true;\n          }\n          c.width = colWidth;\n        }\n      }\n    }\n\n    if (autosizeMode === GridAutosizeColsMode.IgnoreViewport) {\n      // just size columns as-is\n      for (i = 0; i < this.columns.length; i++) {\n        if (!this.columns[i] || this.columns[i].hidden) { continue; }\n\n        colWidth = this.columns[i].autoSize?.widthPx || 0;\n        if (this.columns[i].rerenderOnResize && this.columns[i].width !== colWidth) {\n          reRender = true;\n        }\n        this.columns[i].width = colWidth;\n      }\n    }\n\n    this.reRenderColumns(reRender);\n  }\n\n  /**\n   * Calculates the ideal autosize width for a given column. First, it sets the default width from the column definition.\n   * If the autosize mode is not Locked or Guide, then for ContentIntelligent mode it determines the column\u2019s data type\n   * (handling booleans, numbers, strings, dates, moments) and adjusts autosize settings accordingly.\n   * It then calls getColContentSize to compute the width needed by the content, applies an additional\n   * percentage multiplier and padding, clamps to min/max widths, and if in ContentExpandOnly mode ensures\n   * the width is at least the default width. The computed width is stored in autoSize.widthPx.\n   *\n   * @param {C} columnDef - The column definition containing autosize settings and constraints.\n   * @param {number} colIndex - The index of the column within the grid.\n   * @param {HTMLElement} gridCanvas - The grid's canvas element where temporary elements will be created.\n   * @param {boolean} isInit - If `true`, applies initial settings for row selection mode.\n   * @param {number} colArrayIndex - The index of the column in the column array (used for multi-column adjustments).\n   */\n  protected getColAutosizeWidth(columnDef: C, colIndex: number, gridCanvas: HTMLElement, isInit: boolean, colArrayIndex: number) {\n    const autoSize = columnDef.autoSize as AutoSize;\n\n    // set to width as default\n    autoSize.widthPx = columnDef.width;\n    if (autoSize.autosizeMode === ColAutosizeMode.Locked\n      || autoSize.autosizeMode === ColAutosizeMode.Guide) {\n      return;\n    }\n\n    const dl = this.getDataLength(); // getDataItem();\n    const isoDateRegExp = new RegExp(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z/);\n\n    // ContentIntelligent takes settings from column data type\n    if (autoSize.autosizeMode === ColAutosizeMode.ContentIntelligent) {\n      // default to column colDataTypeOf (can be used if initially there are no data rows)\n      let colDataTypeOf = autoSize.colDataTypeOf;\n      let colDataItem: any;\n      if (dl > 0) {\n        const tempRow = this.getDataItem(0);\n        if (tempRow) {\n          colDataItem = tempRow[columnDef.field as keyof TData];\n\n          // check for dates in hiding\n          if (isoDateRegExp.test(colDataItem)) { colDataItem = Date.parse(colDataItem); }\n\n          colDataTypeOf = typeof colDataItem;\n          if (colDataTypeOf === 'object') {\n            if (colDataItem instanceof Date) { colDataTypeOf = 'date'; }\n            if (typeof moment !== 'undefined' && colDataItem instanceof moment) { colDataTypeOf = 'moment'; }\n          }\n        }\n      }\n      if (colDataTypeOf === 'boolean') {\n        autoSize.colValueArray = [true, false];\n      }\n      if (colDataTypeOf === 'number') {\n        autoSize.valueFilterMode = ValueFilterMode.GetGreatestAndSub;\n        autoSize.rowSelectionMode = RowSelectionMode.AllRows;\n      }\n      if (colDataTypeOf === 'string') {\n        autoSize.valueFilterMode = ValueFilterMode.GetLongestText;\n        autoSize.rowSelectionMode = RowSelectionMode.AllRows;\n        autoSize.allowAddlPercent = 5;\n      }\n      if (colDataTypeOf === 'date') {\n        autoSize.colValueArray = [new Date(2009, 8, 30, 12, 20, 20)]; // Sep 30th 2009, 12:20:20 AM\n      }\n      if (colDataTypeOf === 'moment' && typeof moment !== 'undefined') {\n        autoSize.colValueArray = [moment([2009, 8, 30, 12, 20, 20])]; // Sep 30th 2009, 12:20:20 AM\n      }\n    }\n\n    // at this point, the autosizeMode is effectively 'Content', so proceed to get size\n    let colWidth = autoSize.contentSizePx = this.getColContentSize(columnDef, colIndex, gridCanvas, isInit, colArrayIndex);\n\n    if (colWidth === 0) {\n      colWidth = autoSize.widthPx || 0;\n    }\n\n    const addlPercentMultiplier = (autoSize.allowAddlPercent ? (1 + autoSize.allowAddlPercent / 100) : 1);\n    colWidth = colWidth * addlPercentMultiplier + (this._options.autosizeColPaddingPx || 0);\n    if (columnDef.minWidth && colWidth < columnDef.minWidth) { colWidth = columnDef.minWidth; }\n    if (columnDef.maxWidth && colWidth > columnDef.maxWidth) { colWidth = columnDef.maxWidth; }\n\n    if (autoSize.autosizeMode === ColAutosizeMode.ContentExpandOnly || ((columnDef?.editor as any)?.ControlFillsColumn)) {\n      // only use content width if it's wider than the default column width (this is used for dropdowns and other fixed width controls)\n      if (colWidth < (columnDef.width || 0)) {\n        colWidth = columnDef.width || 0;\n      }\n    }\n    autoSize.widthPx = colWidth;\n  }\n\n  /**\n   * Determines the width needed to render a column\u2019s content. It first measures the header width (if not ignored)\n   * and uses it as a baseline. If an explicit colValueArray is provided, it measures that; otherwise, it creates\n   * a RowInfo object to select a range of rows based on the rowSelectionMode. Depending on the valueFilterMode\n   * (e.g. DeDuplicate, GetGreatestAndSub, GetLongestTextAndSub, GetLongestText), it adjusts the values to measure.\n   * It then calls getColWidth (using either canvas text measurement or DOM measurement) and returns the maximum\n   * of the header width and computed content width (adjusted by a ratio, if applicable).\n   *\n   * @param {C} columnDef - The column definition containing formatting and auto-sizing options.\n   * @param {number} colIndex - The index of the column within the grid.\n   * @param {HTMLElement} gridCanvas - The grid's canvas element where temporary elements will be created.\n   * @param {boolean} isInit - If `true`, applies initial row selection mode settings.\n   * @param {number} colArrayIndex - The index of the column in the column array (used for multi-column adjustments).\n   * @returns {number} - The computed optimal column width in pixels.\n   */\n  protected getColContentSize(columnDef: C, colIndex: number, gridCanvas: HTMLElement, isInit: boolean, colArrayIndex: number) {\n    const autoSize = columnDef.autoSize as AutoSize;\n    let widthAdjustRatio = 1;\n\n    // at this point, the autosizeMode is effectively 'Content', so proceed to get size\n\n    // get header width, if we are taking notice of it\n    let i: number;\n    let tempVal: any;\n    let maxLen = 0;\n    let maxColWidth = 0;\n    autoSize.headerWidthPx = 0;\n    if (!autoSize.ignoreHeaderText) {\n      autoSize.headerWidthPx = this.getColHeaderWidth(columnDef);\n    }\n    if (autoSize.headerWidthPx === 0) {\n      autoSize.headerWidthPx = (columnDef.width ? columnDef.width\n        : (columnDef.maxWidth ? columnDef.maxWidth\n          : (columnDef.minWidth ? columnDef.minWidth : 20)\n        )\n      );\n    }\n\n    if (autoSize.colValueArray) {\n      // if an array of values are specified, just pass them in instead of data\n      maxColWidth = this.getColWidth(columnDef, gridCanvas, autoSize.colValueArray as any);\n      return Math.max(autoSize.headerWidthPx, maxColWidth);\n    }\n\n    // select rows to evaluate using rowSelectionMode and rowSelectionCount\n    const rowInfo = {} as RowInfo;\n    rowInfo.colIndex = colIndex;\n    rowInfo.rowCount = this.getDataLength();\n    rowInfo.startIndex = 0;\n    rowInfo.endIndex = rowInfo.rowCount - 1;\n    rowInfo.valueArr = null;\n    rowInfo.getRowVal = (j: number) => this.getDataItem(j)[columnDef.field as keyof TData];\n\n    const rowSelectionMode = (isInit ? autoSize.rowSelectionModeOnInit : undefined) || autoSize.rowSelectionMode;\n\n    if (rowSelectionMode === RowSelectionMode.FirstRow) { rowInfo.endIndex = 0; }\n    if (rowSelectionMode === RowSelectionMode.LastRow) { rowInfo.endIndex = rowInfo.startIndex = rowInfo.rowCount - 1; }\n    if (rowSelectionMode === RowSelectionMode.FirstNRows) { rowInfo.endIndex = Math.min(autoSize.rowSelectionCount || 0, rowInfo.rowCount) - 1; }\n\n    // now use valueFilterMode to further filter selected rows\n    if (autoSize.valueFilterMode === ValueFilterMode.DeDuplicate) {\n      const rowsDict: any = {};\n      for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\n        rowsDict[rowInfo.getRowVal(i)] = true;\n      }\n      if (Object.keys) {\n        rowInfo.valueArr = Object.keys(rowsDict);\n      } else {\n        rowInfo.valueArr = [];\n        for (const v in rowsDict) {\n          if (rowsDict) {\n            rowInfo.valueArr.push(v);\n          }\n        }\n      }\n      rowInfo.startIndex = 0;\n      rowInfo.endIndex = rowInfo.length - 1;\n    }\n\n    if (autoSize.valueFilterMode === ValueFilterMode.GetGreatestAndSub) {\n      // get greatest abs value in data\n      let maxVal;\n      let maxAbsVal = 0;\n      for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\n        tempVal = rowInfo.getRowVal(i);\n        if (Math.abs(tempVal) > maxAbsVal) {\n          maxVal = tempVal; maxAbsVal = Math.abs(tempVal);\n        }\n      }\n      // now substitute a '9' for all characters (to get widest width) and convert back to a number\n      maxVal = '' + maxVal;\n      maxVal = Array(maxVal.length + 1).join('9');\n      maxVal = +maxVal;\n\n      rowInfo.valueArr = [maxVal];\n      rowInfo.startIndex = rowInfo.endIndex = 0;\n    }\n\n    if (autoSize.valueFilterMode === ValueFilterMode.GetLongestTextAndSub) {\n      // get greatest abs value in data\n      for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\n        tempVal = rowInfo.getRowVal(i);\n        if ((tempVal || '').length > maxLen) { maxLen = tempVal.length; }\n      }\n      // now substitute a 'm' for all characters\n      tempVal = Array(maxLen + 1).join('m');\n      widthAdjustRatio = this._options.autosizeTextAvgToMWidthRatio || 0;\n\n      rowInfo.maxLen = maxLen;\n      rowInfo.valueArr = [tempVal];\n      rowInfo.startIndex = rowInfo.endIndex = 0;\n    }\n\n    if (autoSize.valueFilterMode === ValueFilterMode.GetLongestText) {\n      // get greatest abs value in data\n      maxLen = 0; let maxIndex = 0;\n      for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\n        tempVal = rowInfo.getRowVal(i);\n        if ((tempVal || '').length > maxLen) { maxLen = tempVal.length; maxIndex = i; }\n      }\n      // now substitute a 'c' for all characters\n      tempVal = rowInfo.getRowVal(maxIndex);\n      rowInfo.maxLen = maxLen;\n      rowInfo.valueArr = [tempVal];\n      rowInfo.startIndex = rowInfo.endIndex = 0;\n    }\n\n    // !!! HACK !!!!\n    if (rowInfo.maxLen && rowInfo.maxLen > 30 && colArrayIndex > 1) { autoSize.sizeToRemaining = true; }\n    maxColWidth = this.getColWidth(columnDef, gridCanvas, rowInfo) * widthAdjustRatio;\n    return Math.max(autoSize.headerWidthPx, maxColWidth);\n  }\n\n  /**\n   * Creates a temporary row and cell element (with absolute positioning, hidden visibility, and nowrap) and iterates\n   * over the selected rows (as defined in a RowInfo object or provided value array) to render the cell content using\n   * the column formatter. If in text-only mode and canvas measurement is enabled, uses canvas.measureText;\n   * otherwise, uses DOM offsetWidth after applying the formatter result to the cell.\n   * Returns the maximum measured width.\n   *\n   * @param {C} columnDef - The column definition containing formatting and auto-sizing options.\n   * @param {HTMLElement} gridCanvas - The grid's canvas element where the temporary row will be added.\n   * @param {RowInfo} rowInfo - Object containing row start/end indices and values for width evaluation.\n   * @returns {number} - The computed optimal column width in pixels.\n   */\n  protected getColWidth(columnDef: C, gridCanvas: HTMLElement, rowInfo: RowInfo) {\n    const rowEl = Utils.createDomElement('div', { className: 'slick-row ui-widget-content' }, gridCanvas);\n    const cellEl = Utils.createDomElement('div', { className: 'slick-cell' }, rowEl);\n\n    cellEl.style.position = 'absolute';\n    cellEl.style.visibility = 'hidden';\n    cellEl.style.textOverflow = 'initial';\n    cellEl.style.whiteSpace = 'nowrap';\n\n    let i: number;\n    let len: number;\n    let max = 0;\n    let maxText = '';\n    let formatterResult: string | FormatterResultWithHtml | FormatterResultWithText | HTMLElement | DocumentFragment;\n    let val: any;\n\n    // get mode - if text only display, use canvas otherwise html element\n    let useCanvas = (columnDef.autoSize!.widthEvalMode === WidthEvalMode.TextOnly);\n\n    if (columnDef.autoSize?.widthEvalMode === WidthEvalMode.Auto) {\n      const noFormatter = !columnDef.formatterOverride && !columnDef.formatter;\n      const formatterIsText = ((columnDef?.formatterOverride as { ReturnsTextOnly: boolean })?.ReturnsTextOnly)\n        || (!columnDef.formatterOverride && (columnDef.formatter as any)?.ReturnsTextOnly);\n      useCanvas = noFormatter || formatterIsText;\n    }\n\n    // use canvas - very fast, but text-only\n    if (this.canvas_context && useCanvas) {\n      const style = getComputedStyle(cellEl);\n      this.canvas_context.font = style.fontSize + ' ' + style.fontFamily;\n      for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\n        // row is either an array or values or a single value\n        val = (rowInfo.valueArr ? rowInfo.valueArr[i] : rowInfo.getRowVal(i));\n        if (columnDef.formatterOverride) {\n          // use formatterOverride as first preference\n          formatterResult = (columnDef.formatterOverride as FormatterOverrideCallback)(i, rowInfo.colIndex, val, columnDef, this.getDataItem(i), this as unknown as SlickGridModel);\n        } else if (columnDef.formatter) {\n          // otherwise, use formatter\n          formatterResult = columnDef.formatter(i, rowInfo.colIndex, val, columnDef, this.getDataItem(i), this as unknown as SlickGridModel);\n        } else {\n          // otherwise, use plain text\n          formatterResult = '' + val;\n        }\n        len = formatterResult ? this.canvas_context.measureText(formatterResult as string).width : 0;\n        if (len > max) {\n          max = len;\n          maxText = formatterResult as string;\n        }\n      }\n\n      cellEl.textContent = maxText;\n      len = cellEl.offsetWidth;\n\n      rowEl.remove();\n      return len;\n    }\n\n    for (i = rowInfo.startIndex; i <= rowInfo.endIndex; i++) {\n      val = (rowInfo.valueArr ? rowInfo.valueArr[i] : rowInfo.getRowVal(i));\n      if (columnDef.formatterOverride) {\n        // use formatterOverride as first preference\n        formatterResult = (columnDef.formatterOverride as FormatterOverrideCallback)(i, rowInfo.colIndex, val, columnDef, this.getDataItem(i), this as unknown as SlickGridModel);\n      } else if (columnDef.formatter) {\n        // otherwise, use formatter\n        formatterResult = columnDef.formatter(i, rowInfo.colIndex, val, columnDef, this.getDataItem(i), this as unknown as SlickGridModel);\n      } else {\n        // otherwise, use plain text\n        formatterResult = '' + val;\n      }\n      this.applyFormatResultToCellNode(formatterResult, cellEl);\n      len = cellEl.offsetWidth;\n      if (len > max) { max = len; }\n    }\n\n    rowEl.remove();\n    return max;\n  }\n\n  /**\n   * Determines the width of a column header by first attempting to find the header element using an ID composed of the\n   * grid\u2019s uid and the column\u2019s id. If found, clones the element, makes it absolutely positioned and hidden,\n   * inserts it into the DOM, measures its offsetWidth, and then removes it. If the header element does not exist yet,\n   * creates a temporary header element with the column\u2019s name and measures its width before removing it.\n   * Returns the computed header width.\n   *\n   * @param {C} columnDef - The column definition containing the header information.\n   * @returns {number} - The computed width of the column header in pixels.\n   */\n  protected getColHeaderWidth(columnDef: C) {\n    let width = 0;\n    // if (columnDef && (!columnDef.resizable || columnDef._autoCalcWidth === true)) { return; }\n    const headerColElId = this.getUID() + columnDef.id;\n    let headerColEl = document.getElementById(headerColElId) as HTMLElement;\n    const dummyHeaderColElId = `${headerColElId}_`;\n    const clone = headerColEl.cloneNode(true) as HTMLElement;\n    if (headerColEl) {\n      // headers have been created, use clone technique\n      clone.id = dummyHeaderColElId;\n      clone.style.cssText = 'position: absolute; visibility: hidden;right: auto;text-overflow: initial;white-space: nowrap;';\n      headerColEl.parentNode!.insertBefore(clone, headerColEl);\n      width = clone.offsetWidth;\n      clone.parentNode!.removeChild(clone);\n    } else {\n      // headers have not yet been created, create a new node\n      const header = this.getHeader(columnDef) as HTMLElement;\n      headerColEl = Utils.createDomElement('div', { id: dummyHeaderColElId, className: 'ui-state-default slick-state-default slick-header-column' }, header);\n      const colNameElm = Utils.createDomElement('span', { className: 'slick-column-name' }, headerColEl);\n      this.applyHtmlCode(colNameElm, columnDef.name!);\n      clone.style.cssText = 'position: absolute; visibility: hidden;right: auto;text-overflow: initial;white-space: nowrap;';\n      if (columnDef.headerCssClass) {\n        headerColEl.classList.add(...Utils.classNameToList(columnDef.headerCssClass));\n      }\n      width = headerColEl.offsetWidth;\n      header.removeChild(headerColEl);\n    }\n    return width;\n  }\n\n  /**\n   * Iterates over all columns to collect current widths (skipping hidden ones), calculates total width\n   * and available shrink leeway, then enters a \u201Cshrink\u201D loop if the total width exceeds the available\n   * viewport width and a \u201Cgrow\u201D loop if below. Finally, it applies the computed widths to the columns\n   * and calls reRenderColumns (with a flag if any width changed) to update the grid.\n   */\n  protected legacyAutosizeColumns() {\n    let i;\n    let c: C | undefined;\n    let shrinkLeeway = 0;\n    let total = 0;\n    let prevTotal = 0;\n    const widths: number[] = [];\n    const availWidth = this.getViewportInnerWidth();\n\n    for (i = 0; i < this.columns.length; i++) {\n      c = this.columns[i];\n      if (!c || c.hidden) {\n        widths.push(0);\n        continue;\n      }\n      widths.push(c.width || 0);\n      total += c.width || 0;\n      if (c.resizable) {\n        shrinkLeeway += (c.width || 0) - Math.max((c.minWidth || 0), this.absoluteColumnMinWidth);\n      }\n    }\n\n    // shrink\n    prevTotal = total;\n    while (total > availWidth && shrinkLeeway) {\n      const shrinkProportion = (total - availWidth) / shrinkLeeway;\n      for (i = 0; i < this.columns.length && total > availWidth; i++) {\n        c = this.columns[i];\n        if (!c || c.hidden) { continue; }\n        const width = widths[i];\n        if (!c.resizable || width <= c.minWidth! || width <= this.absoluteColumnMinWidth) {\n          continue;\n        }\n        const absMinWidth = Math.max(c.minWidth!, this.absoluteColumnMinWidth);\n        let shrinkSize = Math.floor(shrinkProportion * (width - absMinWidth)) || 1;\n        shrinkSize = Math.min(shrinkSize, width - absMinWidth);\n        total -= shrinkSize;\n        shrinkLeeway -= shrinkSize;\n        widths[i] -= shrinkSize;\n      }\n      if (prevTotal <= total) {  // avoid infinite loop\n        break;\n      }\n      prevTotal = total;\n    }\n\n    // grow\n    prevTotal = total;\n    while (total < availWidth) {\n      const growProportion = availWidth / total;\n      for (i = 0; i < this.columns.length && total < availWidth; i++) {\n        c = this.columns[i];\n        if (!c || c.hidden) { continue; }\n        const currentWidth = widths[i];\n        let growSize;\n\n        if (!c.resizable || c.maxWidth! <= currentWidth) {\n          growSize = 0;\n        } else {\n          growSize = Math.min(Math.floor(growProportion * currentWidth) - currentWidth, (c.maxWidth! - currentWidth) || 1000000) || 1;\n        }\n        total += growSize;\n        widths[i] += (total <= availWidth ? growSize : 0);\n      }\n      if (prevTotal >= total) {  // avoid infinite loop\n        break;\n      }\n      prevTotal = total;\n    }\n\n    let reRender = false;\n    for (i = 0; i < this.columns.length; i++) {\n      if (!c || c.hidden) { continue; }\n\n      if (this.columns[i].rerenderOnResize && this.columns[i].width !== widths[i]) {\n        reRender = true;\n      }\n      this.columns[i].width = widths[i];\n    }\n\n    this.reRenderColumns(reRender);\n  }\n\n  /**\n   * Apply Columns Widths in the UI and optionally invalidate & re-render the columns when specified\n   * @param {Boolean} shouldReRender - should we invalidate and re-render the grid?\n   */\n  reRenderColumns(reRender?: boolean) {\n    this.applyColumnHeaderWidths();\n    this.updateCanvasWidth(true);\n\n    this.trigger(this.onAutosizeColumns, { columns: this.columns });\n\n    if (reRender) {\n      this.invalidateAllRows();\n      this.render();\n    }\n  }\n\n  /**\n   * Returns an array of column definitions filtered to exclude any that are marked as hidden.\n   *\n   * @returns\n   */\n  getVisibleColumns() {\n    return this.columns.filter(c => !c.hidden);\n  }\n\n  /**\n   * Returns the index of a column with a given id. Since columns can be reordered by the user, this can be used to get the column definition independent of the order:\n   * @param {String | Number} id A column id.\n   */\n  getColumnIndex(id: number | string): number {\n    return this.columnsById[id];\n  }\n\n  /**\n   * Iterates over the header elements (from both left and right headers) and updates each header\u2019s width based on the\n   * corresponding visible column\u2019s width minus a computed adjustment (headerColumnWidthDiff).\n   * Finally, it updates the internal column caches.\n   *\n   * @returns\n   */\n  protected applyColumnHeaderWidths() {\n    if (!this.initialized) {\n      return;\n    }\n\n    let columnIndex = 0;\n    const vc = this.getVisibleColumns();\n    this._headers.forEach((header) => {\n      for (let i = 0; i < header.children.length; i++, columnIndex++) {\n        const h = header.children[i] as HTMLElement;\n        const col = vc[columnIndex] || {};\n        const width = (col.width || 0) - this.headerColumnWidthDiff;\n        if (Utils.width(h) !== width) {\n          Utils.width(h, width);\n        }\n      }\n    });\n\n    this.updateColumnCaches();\n  }\n\n  /**\n   * Iterates over all columns (skipping hidden ones) and, for each, retrieves the associated CSS rules\n   * (using getColumnCssRules). It then sets the left and right CSS properties so that the columns align\n   * correctly within the grid canvas. It also updates the cumulative offset for non\u2013frozen columns.\n   */\n  protected applyColumnWidths() {\n    let x = 0;\n    let w = 0;\n    let rule: any;\n    for (let i = 0; i < this.columns.length; i++) {\n      if (!this.columns[i]?.hidden) {\n        w = this.columns[i].width || 0;\n\n        rule = this.getColumnCssRules(i);\n        rule.left.style.left = `${x}px`;\n        rule.right.style.right = (((this._options.frozenColumn !== -1 && i > this._options.frozenColumn!) ? this.canvasWidthR : this.canvasWidthL) - x - w) + 'px';\n\n        // If this column is frozen, reset the css left value since the\n        // column starts in a new viewport.\n        if (this._options.frozenColumn !== i) {\n          x += this.columns[i].width!;\n        }\n      }\n      if (this._options.frozenColumn === i) {\n        x = 0;\n      }\n    }\n  }\n\n  /**\n   * A convenience method that creates a sort configuration for one column (with the given sort direction)\n   * and calls setSortColumns with it. Accepts a columnId string and an ascending boolean.\n   * Applies a sort glyph in either ascending or descending form to the header of the column.\n   * Note that this does not actually sort the column. It only adds the sort glyph to the header.\n   *\n   * @param {String | Number} columnId\n   * @param {Boolean} ascending\n   */\n  setSortColumn(columnId: number | string, ascending: boolean) {\n    this.setSortColumns([{ columnId, sortAsc: ascending }]);\n  }\n\n  /**\n   * Get column by index - iterates over header containers and returns the header column\n   * element corresponding to the given index.\n   *\n   * @param {Number} id - column index\n   * @returns\n   */\n  getColumnByIndex(id: number) {\n    let result: HTMLElement | undefined;\n    this._headers.every((header) => {\n      const length = header.children.length;\n      if (id < length) {\n        result = header.children[id] as HTMLElement;\n        return false;\n      }\n      id -= length;\n      return true;\n    });\n\n    return result;\n  }\n\n  /**\n   * Accepts an array of objects in the form [ { columnId: [string], sortAsc: [boolean] }, ... ] to\n   * define the grid's sort order. When called, this will apply a sort glyph in either ascending\n   * or descending form to the header of each column specified in the array.\n   * Note that this does not actually sort the column. It only adds the sort glyph to the header.\n   *\n   * @param {ColumnSort[]} cols - column sort\n   */\n  setSortColumns(cols: ColumnSort[]) {\n    this.sortColumns = cols;\n\n    const numberCols = this._options.numberedMultiColumnSort && this.sortColumns.length > 1;\n    this._headers.forEach((header) => {\n      let indicators = header.querySelectorAll('.slick-header-column-sorted');\n      indicators.forEach((indicator) => {\n        indicator.classList.remove('slick-header-column-sorted');\n      });\n\n      indicators = header.querySelectorAll('.slick-sort-indicator');\n      indicators.forEach((indicator) => {\n        indicator.classList.remove('slick-sort-indicator-asc');\n        indicator.classList.remove('slick-sort-indicator-desc');\n      });\n      indicators = header.querySelectorAll('.slick-sort-indicator-numbered');\n      indicators.forEach((el) => {\n        el.textContent = '';\n      });\n    });\n\n    let i = 1;\n    this.sortColumns.forEach((col) => {\n      if (!Utils.isDefined(col.sortAsc)) {\n        col.sortAsc = true;\n      }\n\n      const columnIndex = this.getColumnIndex(col.columnId);\n      if (Utils.isDefined(columnIndex)) {\n        const column = this.getColumnByIndex(columnIndex);\n        if (column) {\n          column.classList.add('slick-header-column-sorted');\n          let indicator = column.querySelector('.slick-sort-indicator');\n          indicator?.classList.add(col.sortAsc ? 'slick-sort-indicator-asc' : 'slick-sort-indicator-desc');\n\n          if (numberCols) {\n            indicator = column.querySelector('.slick-sort-indicator-numbered');\n            if (indicator) {\n              indicator.textContent = String(i);\n            }\n          }\n        }\n      }\n      i++;\n    });\n  }\n\n  /** Returns the current array of column definitions. */\n  getColumns() {\n    return this.columns;\n  }\n\n  /** Get sorted columns representing the current sorting state of the grid **/\n  getSortColumns(): ColumnSort[] {\n    return this.sortColumns;\n  }\n\n  /**\n   * Iterates over all columns to compute and store their left and right boundaries\n   * (based on cumulative widths). Resets the offset when a frozen column is encountered.\n   */\n  protected updateColumnCaches() {\n    // Pre-calculate cell boundaries.\n    this.columnPosLeft = [];\n    this.columnPosRight = [];\n    let x = 0;\n    for (let i = 0, ii = this.columns.length; i < ii; i++) {\n      if (!this.columns[i] || this.columns[i].hidden) { continue; }\n\n      this.columnPosLeft[i] = x;\n      this.columnPosRight[i] = x + (this.columns[i].width || 0);\n\n      if (this._options.frozenColumn === i) {\n        x = 0;\n      } else {\n        x += this.columns[i].width || 0;\n      }\n    }\n  }\n\n  /**\n   * Iterates over each column to (a) save its original width as widthRequest,\n   * (b) apply default properties (using mixinDefaults if set) to both the column\n   * and its autoSize property, (c) update the columnsById mapping, and (d) adjust\n   * the width if it is less than minWidth or greater than maxWidth.\n   */\n  protected updateColumnProps() {\n    this.columnsById = {};\n    for (let i = 0; i < this.columns.length; i++) {\n      let m: C = this.columns[i];\n      if (m.width) {\n        m.widthRequest = m.width;\n      }\n\n      if (this._options.mixinDefaults) {\n        Utils.applyDefaults(m, this._columnDefaults);\n        if (!m.autoSize) { m.autoSize = {}; }\n        Utils.applyDefaults(m.autoSize, this._columnAutosizeDefaults);\n      } else {\n        m = this.columns[i] = Utils.extend({}, this._columnDefaults, m);\n        m.autoSize = Utils.extend({}, this._columnAutosizeDefaults, m.autoSize);\n      }\n\n      this.columnsById[m.id] = i;\n      if (m.minWidth && ((m.width || 0) < m.minWidth)) {\n        m.width = m.minWidth;\n      }\n      if (m.maxWidth && ((m.width || 0) > m.maxWidth)) {\n        m.width = m.maxWidth;\n      }\n    }\n  }\n\n  /**\n   * Sets grid columns. Column headers will be recreated and all rendered rows will be removed.\n   * To rerender the grid (if necessary), call render().\n   * @param {Column[]} columnDefinitions An array of column definitions.\n   */\n  setColumns(columnDefinitions: C[]) {\n    this.trigger(this.onBeforeSetColumns, { previousColumns: this.columns, newColumns: columnDefinitions, grid: this });\n    this.columns = columnDefinitions;\n    this.updateColumnsInternal();\n    this.trigger(this.onAfterSetColumns, { newColumns: columnDefinitions, grid: this });\n  }\n\n  /** Update columns for when a hidden property has changed but the column list itself has not changed. */\n  updateColumns() {\n    this.trigger(this.onBeforeUpdateColumns, { columns: this.columns, grid: this });\n    this.updateColumnsInternal();\n  }\n\n  /**\n   * Triggers onBeforeUpdateColumns and calls updateColumnsInternal to update column properties,\n   * caches, header/footer elements, CSS rules, canvas dimensions, and selections without changing the column array.\n   */\n  protected updateColumnsInternal() {\n    this.updateColumnProps();\n    this.updateColumnCaches();\n\n    if (this.initialized) {\n      this.setPaneFrozenClasses();\n      this.setPaneVisibility();\n      this.setOverflow();\n\n      this.invalidateAllRows();\n      this.createColumnHeaders();\n      this.createColumnFooter();\n      this.removeCssRules();\n      this.createCssRules();\n      this.resizeCanvas();\n      this.updateCanvasWidth();\n      this.applyColumnHeaderWidths();\n      this.applyColumnWidths();\n      this.handleScroll();\n      this.getSelectionModel()?.refreshSelections();\n    }\n  }\n\n  /////////////////////////////////////////////////////////////////////\n  /// End Column Management\n  /////////////////////////////////////////////////////////////////////\n\n  /////////////////////////////////////////////////////////////////////\n  /// Data Management and Editing\n  /////////////////////////////////////////////////////////////////////\n\n  /** Get Editor lock */\n  getEditorLock() {\n    return this._options.editorLock as SlickEditorLock;\n  }\n\n  /** Get Editor Controller */\n  getEditController() {\n    return this.editController;\n  }\n\n  /**\n   * Sets a new source for databinding and removes all rendered rows. Note that this doesn't render the new rows - you can follow it with a call to render() to do that.\n   * @param {CustomDataView|Array<*>} newData New databinding source using a regular JavaScript array.. or a custom object exposing getItem(index) and getLength() functions.\n   * @param {Number} [scrollToTop] If true, the grid will reset the vertical scroll position to the top of the grid.\n   */\n  setData(newData: CustomDataView<TData> | TData[], scrollToTop?: boolean) {\n    this.data = newData;\n    this.invalidateAllRows();\n    this.updateRowCount();\n    if (scrollToTop) {\n      this.scrollTo(0);\n    }\n  }\n\n  /** Returns an array of every data object, unless you're using DataView in which case it returns a DataView object. */\n  getData<U extends CustomDataView<TData> | U[]>(): U {\n    return this.data as U;\n  }\n\n  /** Returns the size of the databinding source. */\n  getDataLength() {\n    if ((this.data as CustomDataView<TData>).getLength) {\n      return (this.data as CustomDataView<TData>).getLength();\n    } else {\n      return (this.data as TData[])?.length ?? 0;\n    }\n  }\n\n  /**\n   * Returns the number of data items plus an extra row if enableAddRow is true and paging conditions allow.\n   *\n   * @returns\n   */\n  protected getDataLengthIncludingAddNew() {\n    return this.getDataLength() + (!this._options.enableAddRow ? 0\n      : (!this.pagingActive || this.pagingIsLastPage ? 1 : 0)\n    );\n  }\n\n  /**\n   * Returns the databinding item at a given position.\n   * @param {Number} index Item row index.\n   */\n  getDataItem(i: number): TData {\n    if ((this.data as CustomDataView).getItem) {\n      return (this.data as CustomDataView<TData>).getItem(i) as TData;\n    } else {\n      return (this.data as TData[])[i] as TData;\n    }\n  }\n\n  /**  Are we using a DataView? */\n  hasDataView() {\n    return !Array.isArray(this.data);\n  }\n\n  /**\n   * Returns item metadata by a row index when it exists\n   * @param {Number} row\n   * @returns {ItemMetadata | null}\n   */\n  getItemMetadaWhenExists(row: number): ItemMetadata | null {\n    return 'getItemMetadata' in this.data ? (this.data as CustomDataView<TData>).getItemMetadata(row) : null;\n  }\n\n  /**\n   * Determines the proper formatter for a given cell by checking row metadata for column overrides,\n   * then falling back to the column\u2019s formatter, a formatter from the formatterFactory, or the default formatter.\n   *\n   * @param {number} row - The row index of the cell.\n   * @param {C} column - The column definition containing formatting options.\n   * @returns {Formatter} - The resolved formatter function for the specified cell.\n   */\n  protected getFormatter(row: number, column: C): Formatter {\n    const rowMetadata = (this.data as CustomDataView<TData>)?.getItemMetadata?.(row);\n\n    // look up by id, then index\n    const columnOverrides = rowMetadata?.columns &&\n      (rowMetadata.columns[column.id] || rowMetadata.columns[this.getColumnIndex(column.id)]);\n\n    return ((columnOverrides?.formatter) ||\n      (rowMetadata?.formatter) ||\n      column.formatter ||\n      (this._options.formatterFactory?.getFormatter(column)) ||\n      this._options.defaultFormatter) as Formatter;\n  }\n\n  /**\n   * Retrieves the editor (or editor constructor) for the specified cell by first checking for an override\n   * in row metadata and then falling back to the column\u2019s editor or an editor from the editorFactory.\n   *\n   * @param {number} row - The row index of the cell.\n   * @param {number} cell - The column index of the cell.\n   * @returns {Editor | EditorConstructor | null | undefined} - The editor instance or constructor if available, otherwise `null` or `undefined`.\n   */\n  protected getEditor(row: number, cell: number): Editor | EditorConstructor | null | undefined {\n    const column = this.columns[cell];\n    const rowMetadata = this.getItemMetadaWhenExists(row);\n    const columnMetadata = rowMetadata?.columns;\n\n    if (columnMetadata?.[column.id]?.editor !== undefined) {\n      return columnMetadata[column.id].editor;\n    }\n    if (columnMetadata?.[cell]?.editor !== undefined) {\n      return columnMetadata[cell].editor;\n    }\n\n    return (column.editor || (this._options?.editorFactory?.getEditor(column)));\n  }\n\n  /**\n   * Returns the value for the specified column from a given data item. If a dataItemColumnValueExtractor\n   * is provided in options, it is used; otherwise, the property named by the column\u2019s field is returned.\n   *\n   * @param {TData} item - The data item containing the requested value.\n   * @param {C} columnDef - The column definition containing the field key.\n   * @returns {*} - The extracted value from the data item based on the column definition.\n   */\n  protected getDataItemValueForColumn(item: TData, columnDef: C) {\n    if (this._options.dataItemColumnValueExtractor) {\n      return this._options.dataItemColumnValueExtractor(item, columnDef) as TData;\n    }\n    return item[columnDef.field as keyof TData];\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // Data Management and Editing - Cell Switchers\n  ////////////////////////////////////////////////////////////////////\n\n  /** Resets active cell by making cell normal and other internal reset. */\n  resetActiveCell() {\n    this.setActiveCellInternal(null, false);\n  }\n\n  /** Clear active cell by making cell normal & removing \"active\" CSS class. */\n  unsetActiveCell() {\n    if (Utils.isDefined(this.activeCellNode)) {\n      this.makeActiveCellNormal();\n      this.activeCellNode.classList.remove('active');\n      this.rowsCache[this.activeRow]?.rowNode?.forEach((node) => node.classList.remove('active'));\n    }\n  }\n\n  /** @alias `setFocus` */\n  focus() {\n    this.setFocus();\n  }\n\n  // Sets focus to one of the hidden focus sink elements based on the current tabbing direction.\n  protected setFocus() {\n    if (this.tabbingDirection === -1) {\n      this._focusSink.focus();\n    } else {\n      this._focusSink2.focus();\n    }\n  }\n\n  /**\n   * Clears any previously active cell (removing \u201Cactive\u201D CSS classes), sets the new active cell,\n   * calculates its position, and updates active row and cell indices.\n   * If conditions are met (grid is editable and `opt_editMode` is `true`),\n   * it initiates editing on the cell (with an asynchronous delay if configured).\n   * Finally, it triggers `onActiveCellChanged` unless suppressed.\n   *\n   * @param {HTMLDivElement | null} newCell - The new active cell element, or `null` to deactivate the current cell.\n   * @param {boolean | null} [opt_editMode] - If `true`, enables edit mode for the active cell.\n   *                                          If `null` or `undefined`, it follows `autoEditNewRow` and `autoEdit` settings.\n   * @param {boolean | null} [preClickModeOn] - If `true`, indicates that the cell was activated by a pre-click action.\n   * @param {boolean} [suppressActiveCellChangedEvent] - If `true`, prevents triggering `onActiveCellChanged` event.\n   * @param {Event | SlickEvent_} [e] - The event that triggered the cell activation (if applicable).\n   */\n  protected setActiveCellInternal(newCell: HTMLDivElement | null, opt_editMode?: boolean | null, preClickModeOn?: boolean | null, suppressActiveCellChangedEvent?: boolean, e?: Event | SlickEvent_) {\n    // make current active cell as normal cell & remove \"active\" CSS classes\n    this.unsetActiveCell();\n\n    // let activeCellChanged = (this.activeCellNode !== newCell);\n    this.activeCellNode = newCell;\n\n    if (Utils.isDefined(this.activeCellNode)) {\n      const activeCellOffset = Utils.offset(this.activeCellNode);\n      let rowOffset = Math.floor(Utils.offset(Utils.parents(this.activeCellNode, '.grid-canvas')[0] as HTMLElement)!.top);\n      const isBottom = Utils.parents(this.activeCellNode, '.grid-canvas-bottom').length;\n\n      if (this.hasFrozenRows && isBottom) {\n        rowOffset -= (this._options.frozenBottom)\n          ? Utils.height(this._canvasTopL) as number\n          : this.frozenRowsHeight;\n      }\n\n      const cell = this.getCellFromPoint(activeCellOffset!.left, Math.ceil(activeCellOffset!.top) - rowOffset);\n      this.activeRow = cell.row;\n      this.activePosY = cell.row;\n      this.activeCell = this.activePosX = this.getCellFromNode(this.activeCellNode);\n\n      if (!Utils.isDefined(opt_editMode) && this._options.autoEditNewRow) {\n        opt_editMode = (this.activeRow === this.getDataLength()) || this._options.autoEdit;\n      }\n\n      if (this._options.showCellSelection) {\n        // make sure to never activate more than 1 cell at a time\n        document.querySelectorAll('.slick-cell.active').forEach((node) => node.classList.remove('active'));\n        this.activeCellNode.classList.add('active');\n        this.rowsCache[this.activeRow]?.rowNode?.forEach((node) => node.classList.add('active'));\n      }\n\n      if (this._options.editable && opt_editMode && this.isCellPotentiallyEditable(this.activeRow, this.activeCell)) {\n        if (this._options.asyncEditorLoading) {\n          window.clearTimeout(this.h_editorLoader);\n          this.h_editorLoader = window.setTimeout(() => {\n            this.makeActiveCellEditable(undefined, preClickModeOn, e);\n          }, this._options.asyncEditorLoadDelay);\n        } else {\n          this.makeActiveCellEditable(undefined, preClickModeOn, e);\n        }\n      }\n    } else {\n      this.activeRow = this.activeCell = null as any;\n    }\n\n    // this optimisation causes trouble - MLeibman #329\n    // if (activeCellChanged) {\n    if (!suppressActiveCellChangedEvent) {\n      this.trigger<OnActiveCellChangedEventArgs | null>(this.onActiveCellChanged, this.getActiveCell() as OnActiveCellChangedEventArgs);\n    }\n    // }\n  }\n\n  /**\n   * Checks whether data for the row is loaded, whether the cell is in an \u201CAdd New\u201D row\n   * (and the column disallows insert triggering), and whether an editor exists and the cell is not hidden.\n   * Returns true if the cell is editable.\n   *\n   * @param {number} row - The row index of the cell.\n   * @param {number} cell - The cell index (column index) within the row.\n   * @returns {boolean} - Returns `true` if the cell is editable, otherwise `false`.\n   */\n  protected isCellPotentiallyEditable(row: number, cell: number) {\n    const dataLength = this.getDataLength();\n    // is the data for this row loaded?\n    if (row < dataLength && !this.getDataItem(row)) {\n      return false;\n    }\n\n    // are we in the Add New row? Can we create new from this cell?\n    if (this.columns[cell].cannotTriggerInsert && row >= dataLength) {\n      return false;\n    }\n\n    // does this cell have an editor?\n    if (!this.columns[cell] || this.columns[cell].hidden || !this.getEditor(row, cell)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Make the cell normal again (for example after destroying cell editor),\n   * we can also optionally refocus on the current active cell (again possibly after closing cell editor)\n   *\n   * If an editor is active, triggers onBeforeCellEditorDestroy and calls the editor\u2019s destroy method.\n   * It then removes \u201Ceditable\u201D and \u201Cinvalid\u201D CSS classes from the active cell, re\u2013applies the formatter\n   * to restore the cell\u2019s original content, invalidates any post\u2013processing results,\n   * and deactivates the editor lock. Optionally, it can also re\u2013focus the grid.\n   * In IE, it clears any text selection to ensure focus is properly reset.\n   *\n   * @param {Boolean} [refocusActiveCell]\n   */\n  protected makeActiveCellNormal(refocusActiveCell = false) {\n    if (!this.currentEditor) {\n      return;\n    }\n    this.trigger(this.onBeforeCellEditorDestroy, { editor: this.currentEditor });\n    this.currentEditor.destroy();\n    this.currentEditor = null;\n\n    if (this.activeCellNode) {\n      const d = this.getDataItem(this.activeRow);\n      this.activeCellNode.classList.remove('editable');\n      this.activeCellNode.classList.remove('invalid');\n      if (d) {\n        const column = this.columns[this.activeCell];\n        const formatter = this.getFormatter(this.activeRow, column);\n        const formatterResult = formatter(this.activeRow, this.activeCell, this.getDataItemValueForColumn(d, column), column, d, this as unknown as SlickGridModel);\n        this.applyFormatResultToCellNode(formatterResult, this.activeCellNode);\n        this.invalidatePostProcessingResults(this.activeRow);\n      }\n      if (refocusActiveCell) {\n        this.setFocus();\n      }\n    }\n\n    // if there previously was text selected on a page (such as selected text in the edit cell just removed),\n    // IE can't set focus to anything else correctly\n    if (navigator.userAgent.toLowerCase().match(/msie/)) {\n      this.clearTextSelection();\n    }\n\n    this.getEditorLock()?.deactivate(this.editController as EditController);\n  }\n\n  /**\n   * A public method that starts editing on the active cell by calling\n   * makeActiveCellEditable with the provided editor, pre\u2013click flag, and event.\n   */\n  editActiveCell(editor: EditorConstructor, preClickModeOn?: boolean | null, e?: Event) {\n    this.makeActiveCellEditable(editor, preClickModeOn, e);\n  }\n\n  /**\n   * Makes the currently active cell editable by initializing an editor instance.\n   *\n   * @param {EditorConstructor} [editor] - An optional custom editor constructor to use for editing.\n   * @param {boolean | null} [preClickModeOn] - Indicates if pre-click mode is enabled.\n   * @param {Event | SlickEvent_} [e] - The event that triggered editing.\n   *\n   * @throws {Error} If called when the grid is not editable.\n   */\n  protected makeActiveCellEditable(editor?: EditorConstructor, preClickModeOn?: boolean | null, e?: Event | SlickEvent_) {\n    if (!this.activeCellNode) {\n      return;\n    }\n    if (!this._options.editable) {\n      throw new Error('SlickGrid makeActiveCellEditable : should never get called when this._options.editable is false');\n    }\n\n    // cancel pending async call if there is one\n    window.clearTimeout(this.h_editorLoader);\n\n    if (!this.isCellPotentiallyEditable(this.activeRow, this.activeCell)) {\n      return;\n    }\n\n    const columnDef = this.columns[this.activeCell];\n    const item = this.getDataItem(this.activeRow);\n\n    if (this.trigger(this.onBeforeEditCell, { row: this.activeRow, cell: this.activeCell, item, column: columnDef, target: 'grid' }).getReturnValue() === false) {\n      this.setFocus();\n      return;\n    }\n\n    this.getEditorLock()?.activate(this.editController as EditController);\n    this.activeCellNode.classList.add('editable');\n\n    const useEditor = editor || this.getEditor(this.activeRow, this.activeCell);\n    // editor was null and columnMetadata and editorFactory returned null or undefined\n    // the editor must be constructable. Also makes sure that useEditor is of type EditorConstructor\n    if (!useEditor || typeof useEditor !== 'function') {\n      return;\n    }\n\n    // don't clear the cell if a custom editor is passed through\n    if (!editor && !useEditor.suppressClearOnEdit) {\n      Utils.emptyElement(this.activeCellNode);\n    }\n\n    let metadata = this.getItemMetadaWhenExists(this.activeRow);\n    metadata = metadata?.columns as any;\n    const columnMetaData = metadata && (metadata[columnDef.id as keyof ItemMetadata] || (metadata as any)[this.activeCell]);\n\n\n    const editorArgs: EditorArguments<TData, C, O> = {\n      grid: this,\n      gridPosition: this.absBox(this._container),\n      position: this.absBox(this.activeCellNode),\n      container: this.activeCellNode,\n      column: columnDef,\n      columnMetaData,\n      item: item || {},\n      event: e as Event,\n      commitChanges: this.commitEditAndSetFocus.bind(this),\n      cancelChanges: this.cancelEditAndSetFocus.bind(this)\n    };\n\n    this.currentEditor = new useEditor(editorArgs);\n\n    if (item && this.currentEditor) {\n      this.currentEditor.loadValue(item);\n      if (preClickModeOn && this.currentEditor?.preClick) {\n        this.currentEditor.preClick();\n      }\n    }\n\n    this.serializedEditorValue = this.currentEditor?.serializeValue();\n\n    if (this.currentEditor?.position) {\n      this.handleActiveCellPositionChange();\n    }\n  }\n\n  /**\n   * Commits the current edit and sets focus back to the grid.\n   * If the commit fails due to validation, the focus remains in the editor.\n   */\n  protected commitEditAndSetFocus() {\n    // if the commit fails, it would do so due to a validation error\n    // if so, do not steal the focus from the editor\n    if (this.getEditorLock()?.commitCurrentEdit()) {\n      this.setFocus();\n      if (this._options.autoEdit && !this._options.autoCommitEdit) {\n        this.navigateDown();\n      }\n    }\n  }\n\n  /**\n   * Cancels the current edit and restores focus to the grid.\n   */\n  protected cancelEditAndSetFocus() {\n    if (this.getEditorLock()?.cancelCurrentEdit()) {\n      this.setFocus();\n    }\n  }\n\n  // IEditor implementation for the editor lock\n\n  /**\n   * Commits the current edit, validating and applying changes if necessary.\n   * If validation fails, an error is triggered and focus remains in the editor.\n   *\n   * @returns {boolean} Whether the edit was successfully committed.\n   */\n  protected commitCurrentEdit() {\n    const self = this as SlickGrid<TData, C, O>;\n    const item = self.getDataItem(self.activeRow);\n    const column = self.columns[self.activeCell];\n\n    if (self.currentEditor) {\n      if (self.currentEditor.isValueChanged()) {\n        const validationResults = self.currentEditor.validate();\n\n        if (validationResults.valid) {\n          const row = self.activeRow;\n          const cell = self.activeCell;\n          const editor = self.currentEditor;\n          const serializedValue = self.currentEditor.serializeValue();\n          const prevSerializedValue = self.serializedEditorValue;\n\n          if (self.activeRow < self.getDataLength()) {\n            const editCommand = {\n              row,\n              cell,\n              editor,\n              serializedValue,\n              prevSerializedValue,\n              execute: () => {\n                editor.applyValue(item, serializedValue);\n                self.updateRow(row);\n                self.trigger(self.onCellChange, { command: 'execute', row, cell, item, column });\n              },\n              undo: () => {\n                editor.applyValue(item, prevSerializedValue);\n                self.updateRow(row);\n                self.trigger(self.onCellChange, { command: 'undo', row, cell, item, column, });\n              }\n            };\n\n            if (self._options.editCommandHandler) {\n              self.makeActiveCellNormal(true);\n              self._options.editCommandHandler(item, column, editCommand);\n            } else {\n              editCommand.execute();\n              self.makeActiveCellNormal(true);\n            }\n\n          } else {\n            const newItem = {};\n            self.currentEditor.applyValue(newItem, self.currentEditor.serializeValue());\n            self.makeActiveCellNormal(true);\n            self.trigger(self.onAddNewRow, { item: newItem, column });\n          }\n\n          // check whether the lock has been re-acquired by event handlers\n          return !self.getEditorLock()?.isActive();\n        } else {\n          // Re-add the CSS class to trigger transitions, if any.\n          if (self.activeCellNode) {\n            self.activeCellNode.classList.remove('invalid');\n            Utils.width(self.activeCellNode);// force layout\n            self.activeCellNode.classList.add('invalid');\n          }\n\n          self.trigger(self.onValidationError, {\n            editor: self.currentEditor,\n            cellNode: self.activeCellNode,\n            validationResults,\n            row: self.activeRow,\n            cell: self.activeCell,\n            column\n          });\n\n          self.currentEditor.focus();\n          return false;\n        }\n      }\n\n      self.makeActiveCellNormal(true);\n    }\n    return true;\n  }\n\n  /**\n   * Cancels the current edit and restores the cell to normal mode.\n   *\n   * @returns {boolean} Always returns true.\n   */\n  protected cancelCurrentEdit() {\n    this.makeActiveCellNormal();\n    return true;\n  }\n\n  /** Returns an array of row indices corresponding to the currently selected rows. */\n  getSelectedRows() {\n    if (!this.selectionModel) {\n      throw new Error('SlickGrid Selection model is not set');\n    }\n    return this.selectedRows.slice(0);\n  }\n\n  /**\n   * Accepts an array of row indices and applies the current selectedCellCssClass to the cells in the row, respecting whether cells have been flagged as selectable.\n   * @param {Array<number>} rowsArray - an array of row numbers.\n   * @param {String} [caller] - an optional string to identify who called the method\n   */\n  setSelectedRows(rows: number[], caller?: string) {\n    if (!this.selectionModel) {\n      throw new Error('SlickGrid Selection model is not set');\n    }\n    if (this && this.getEditorLock && !this.getEditorLock()?.isActive()) {\n      this.selectionModel.setSelectedRanges(this.rowsToRanges(rows), caller || 'SlickGrid.setSelectedRows');\n    }\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  // Event Handling and Interactivity\n  /////////////////////////////////////////////////////////////////////////\n\n  /**\n   * A generic helper that creates (or uses) a SlickEventData from the provided event,\n   * attaches the grid instance to the event arguments, and calls notify on the given event.\n   * Returns the result of the notification.\n   *\n   * @param {SlickEvent_} evt - The Slick event instance to trigger.\n   * @param {ArgType} [args] - Optional arguments to pass with the event.\n   * @param {Event | SlickEventData_} [e] - The original event object or SlickEventData.\n   * @returns {*} - The result of the event notification.\n   */\n  protected trigger<ArgType = any>(evt: SlickEvent_, args?: ArgType, e?: Event | SlickEventData_) {\n    const event: SlickEventData_ = (e || new SlickEventData(e, args)) as SlickEventData_;\n    const eventArgs = (args || {}) as ArgType & { grid: SlickGrid<TData, C, O>; };\n    eventArgs.grid = this;\n    return evt.notify(eventArgs, event, this);\n  }\n\n  /**\n   * Handles the mouseout event for a cell.\n   * Triggers the `onMouseLeave` event.\n   *\n   * @param {MouseEvent & { target: HTMLElement }} e - The mouse event.\n   */\n  protected handleCellMouseOut(e: MouseEvent & { target: HTMLElement; }) {\n    this.trigger(this.onMouseLeave, {}, e);\n  }\n\n  /**\n   * Handles mouse hover over a header cell.\n   * Adds CSS classes to indicate a hover state.\n   *\n   * @param {Event | SlickEventData_} e - The mouse event.\n   */\n  protected handleHeaderMouseHoverOn(e: Event | SlickEventData_) {\n    (e as any)?.target.classList.add('ui-state-hover', 'slick-state-hover');\n  }\n\n  /**\n   * Handles mouse hover off a header cell.\n   * Removes CSS classes indicating a hover state.\n   *\n   * @param {Event | SlickEventData_} e - The mouse event.\n   */\n  protected handleHeaderMouseHoverOff(e: Event | SlickEventData_) {\n    (e as any)?.target.classList.remove('ui-state-hover', 'slick-state-hover');\n  }\n\n  /**\n   * Called when the grid\u2019s selection model reports a change. It builds a new selection\n   * (and CSS hash for selected cells) from the provided ranges, applies the new cell CSS styles,\n   * and if the selection has changed from the previous state, triggers the onSelectedRowsChanged\n   * event with details about added and removed selections.\n   *\n  * @param {SlickEventData_} e - The Slick event data for selection changes.\n  * @param {SlickRange_[]} ranges - The list of selected row and cell ranges.\n   */\n  protected handleSelectedRangesChanged(e: SlickEventData_, ranges: SlickRange_[]) {\n    const ne = e.getNativeEvent<CustomEvent>();\n    const selectionMode = ne?.detail?.selectionMode ?? '';\n\n    // drag and replace functionality\n    const prevSelectedRanges = this.selectedRanges.slice(0);\n    this.selectedRanges = ranges;\n\n    if (selectionMode === CellSelectionMode.Replace\n      && prevSelectedRanges && prevSelectedRanges.length === 1\n      && this.selectedRanges && this.selectedRanges.length === 1) {\n      const prevSelectedRange = prevSelectedRanges[0];\n\n      const prevSelectedRange_rowCount = prevSelectedRange.toRow - prevSelectedRange.fromRow + 1;\n      const prevSelectedRange_cellCount = prevSelectedRange.toCell - prevSelectedRange.fromCell + 1;\n\n      const selectedRange = this.selectedRanges[0];\n      const selectedRange_rowCount = selectedRange.toRow - selectedRange.fromRow + 1;\n      const selectedRange_cellCount = selectedRange.toCell - selectedRange.fromCell + 1;\n\n      //   |---0----|---1----|---2----|---3----|---4----|---5----|\n      // 0 |        |        |        |     ^  |        |        |\n      //   |--------|--------|--------|--------|--------|--------|\n      // 1 |        |        |        |        |        |        |\n      //   |--------|--------|--------|--------|--------|--------|\n      // 2 |        |        |   1    |   2    |        |        |\n      //   |--------|--------|--------|--------|--------|--------|\n      // 3 |   <    |        |   4    |   5   x|        |    >   |\n      //   |--------|--------|--------|--------|--------|--------|\n      // 4 |        |        |        |        |        |        |\n      //   |--------|--------|--------|--------|--------|--------|\n      // 5 |        |        |        |    v   |        |        |\n      //   |--------|--------|--------|--------|--------|--------|\n\n      // check range has expanded\n      if (selectedRange_rowCount >= prevSelectedRange_rowCount\n        && selectedRange_cellCount >= prevSelectedRange_cellCount) {\n        const copyUp = selectedRange.fromRow < prevSelectedRange.fromRow;\n        //var copyLeft = selectedRange.fromCell < prevSelectedRange.fromCell;\n\n        const copyToRange = {\n          fromRow: copyUp ? selectedRange.fromRow : prevSelectedRange.toRow + 1\n          , rowCount: selectedRange_rowCount - prevSelectedRange_rowCount\n          , fromCell: selectedRange.fromCell // copyLeft ? selectedRange.fromCell : prevSelectedRange.toCell + 1\n          , cellCount: selectedRange_cellCount // - prevSelectedRange_cellCount\n        };\n\n        let fromRowOffset = 0;\n        let fromCellOffset = 0;\n        for (let i = 0; i < copyToRange.rowCount; i++) {\n          const toRow = this.getDataItem(copyToRange.fromRow + i);\n          const fromRow = this.getDataItem(prevSelectedRange.fromRow + fromRowOffset);\n          fromCellOffset = 0;\n\n          for (let j = 0; j < copyToRange.cellCount; j++) {\n            const toColDef = this.columns[copyToRange.fromCell + j];\n            const fromColDef = this.columns[prevSelectedRange.fromCell + fromCellOffset];\n\n            if (!toColDef.hidden && !fromColDef.hidden) {\n              let val = fromRow[fromColDef.field as keyof TData];\n              if (this._options.dataItemColumnValueExtractor) {\n                val = this._options.dataItemColumnValueExtractor(fromRow, fromColDef);\n              }\n              toRow[toColDef.field as keyof TData] = val;\n            }\n\n            fromCellOffset++;\n            if (fromCellOffset >= prevSelectedRange_cellCount) { fromCellOffset = 0; }\n          }\n\n          fromRowOffset++;\n          if (fromRowOffset >= prevSelectedRange_rowCount) { fromRowOffset = 0; }\n        }\n        this.invalidate();\n      }\n    }\n\n    const previousSelectedRows = this.selectedRows.slice(0); // shallow copy previously selected rows for later comparison\n\n    this.selectionBottomRow = -1;\n    this.selectionRightCell = -1;\n    this.dragReplaceEl.removeEl();\n\n    this.selectedRows = [];\n    const hash: CssStyleHash = {};\n    for (let i = 0; i < ranges.length; i++) {\n      for (let j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {\n        if (!hash[j]) {  // prevent duplicates\n          this.selectedRows.push(j);\n          hash[j] = {};\n        }\n        for (let k = ranges[i].fromCell; k <= ranges[i].toCell; k++) {\n          if (this.canCellBeSelected(j, k)) {\n            hash[j][this.columns[k].id] = this._options.selectedCellCssClass;\n          }\n        }\n      }\n      if (this.selectionBottomRow < ranges[i].toRow) { this.selectionBottomRow = ranges[i].toRow; }\n      if (this.selectionRightCell < ranges[i].toCell) { this.selectionRightCell = ranges[i].toCell; }\n    }\n\n    this.setCellCssStyles(this._options.selectedCellCssClass || '', hash);\n\n    if (this.selectionBottomRow >= 0 && this.selectionRightCell >= 0) {\n      const lowerRightCell = this.getCellNode(this.selectionBottomRow, this.selectionRightCell)\n      this.dragReplaceEl.createEl(lowerRightCell);\n    }\n\n    if (this.simpleArraysNotEqual(previousSelectedRows, this.selectedRows)) {\n      const caller = ne?.detail?.caller ?? 'click';\n      // Use Set for faster performance\n      const selectedRowsSet = new Set(this.getSelectedRows());\n      const previousSelectedRowsSet = new Set(previousSelectedRows);\n\n      const newSelectedAdditions = Array.from(selectedRowsSet).filter(i => !previousSelectedRowsSet.has(i));\n      const newSelectedDeletions = Array.from(previousSelectedRowsSet).filter(i => !selectedRowsSet.has(i));\n\n      this.trigger(this.onSelectedRowsChanged, {\n        rows: this.getSelectedRows(),\n        previousSelectedRows,\n        caller,\n        changedSelectedRows: newSelectedAdditions,\n        changedUnselectedRows: newSelectedDeletions\n      }, e);\n    }\n  }\n\n  // compare 2 simple arrays (integers or strings only, do not use to compare object arrays)\n  simpleArraysNotEqual(arr1: any[], arr2: any[]) {\n    return Array.isArray(arr1) && Array.isArray(arr2) && arr2.sort().toString() !== arr1.sort().toString();\n  }\n\n  /**\n   * Processes a mouse wheel event by adjusting the vertical scroll (scrollTop) based on deltaY (scaled by rowHeight)\n   * and horizontal scroll (scrollLeft) based on deltaX. It then calls the internal scroll handler with the \u201Cmousewheel\u201D\n   * type and, if any scrolling occurred, prevents the default action.\n   *\n   * @param {MouseEvent} e - The mouse event.\n   * @param {number} _delta - Unused delta value.\n   * @param {number} deltaX - The horizontal scroll delta.\n   * @param {number} deltaY - The vertical scroll delta.\n   */\n  protected handleMouseWheel(e: MouseEvent, _delta: number, deltaX: number, deltaY: number) {\n    this.scrollHeight = this._viewportScrollContainerY.scrollHeight;\n    if (e.shiftKey) {\n      this.scrollLeft = this._viewportScrollContainerX.scrollLeft + (deltaX * 10);\n    } else {\n      this.scrollTop = Math.max(0, this._viewportScrollContainerY.scrollTop - (deltaY * this._options.rowHeight!));\n      this.scrollLeft = this._viewportScrollContainerX.scrollLeft + (deltaX * 10);\n    }\n    const handled = this._handleScroll('mousewheel');\n    if (handled) {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Called when a drag is initiated. It retrieves the cell from the event; if the cell does not exist or is not selectable,\n   * it returns false. Otherwise, it triggers the onDragInit event and returns the event\u2019s return value if\n   * propagation is stopped, else returns false to cancel the drag.\n   *\n   * @param {DragEvent} e - The drag event.\n   * @param {DragPosition} dd - The drag position data.\n   * @returns {boolean} - Whether the drag is valid or should be cancelled.\n   */\n  protected handleDragInit(e: DragEvent, dd: DragPosition) {\n    const cell = this.getCellFromEvent(e);\n    if (!cell || !this.cellExists(cell.row, cell.cell)) {\n      return false;\n    }\n\n    const retval = this.trigger(this.onDragInit, dd, e);\n    if (retval.isImmediatePropagationStopped()) {\n      return retval.getReturnValue();\n    }\n\n    // if nobody claims to be handling drag'n'drop by stopping immediate propagation,\n    // cancel out of it\n    return false;\n  }\n\n  /**\n   * Similar to handleDragInit, this method retrieves the cell from the event\n   * and triggers the `onDragStart` event. If the event propagation is stopped,\n   * it returns the specified value; otherwise, it returns false.\n   *\n   * @param {DragEvent} e - The drag event that initiated the action.\n   * @param {DragPosition} dd - The current drag position.\n   * @returns {boolean} - The result of the event trigger or false if propagation was not stopped.\n   */\n  protected handleDragStart(e: DragEvent, dd: DragPosition) {\n    const cell = this.getCellFromEvent(e);\n    if (!cell || !this.cellExists(cell.row, cell.cell)) {\n      return false;\n    }\n\n    const retval = this.trigger(this.onDragStart, dd, e);\n    if (retval.isImmediatePropagationStopped()) {\n      return retval.getReturnValue();\n    }\n\n    return false;\n  }\n\n  // Triggers the onDrag event with the current drag position and event, and returns the event\u2019s return value.\n  protected handleDrag(e: DragEvent, dd: DragPosition) {\n    return this.trigger(this.onDrag, dd, e).getReturnValue();\n  }\n\n  // Called when a drag operation completes; it triggers the onDragEnd event with the current drag position and event.\n  protected handleDragEnd(e: DragEvent, dd: DragPosition) {\n    console.log('SlickGrid.handleDragEnd ' + dd.matchClassTag);\n\n    if (dd.matchClassTag === 'dragReplaceHandle') {\n      this.dragReplaceEl.removeEl();\n    }\n    this.trigger(this.onDragEnd, dd, e);\n  }\n\n  /**\n   * Handles keydown events for grid navigation and editing.\n   * It triggers the `onKeyDown` event and, based on the key pressed (such as HOME, END, arrow keys, PAGE_UP/DOWN, TAB, ENTER, ESC),\n   * calls the appropriate navigation or editing method. If the key event is handled,\n   * it stops propagation and prevents the default browser behaviour.\n   *\n   * @param {KeyboardEvent & { originalEvent: Event; }} e - The keydown event, with the original event attached.\n   */\n  protected handleKeyDown(e: KeyboardEvent & { originalEvent: Event; }) {\n    const retval = this.trigger(this.onKeyDown, { row: this.activeRow, cell: this.activeCell }, e);\n    let handled: boolean | undefined | void = retval.isImmediatePropagationStopped();\n\n    if (!handled) {\n      if (!e.shiftKey && !e.altKey) {\n        if (this._options.editable && this.currentEditor?.keyCaptureList) {\n          if (this.currentEditor.keyCaptureList.indexOf(e.which) > -1) {\n            return;\n          }\n        }\n        if (e.ctrlKey && e.key === 'Home') {\n          this.navigateTopStart();\n        } else if (e.ctrlKey && e.key === 'End') {\n          this.navigateBottomEnd();\n        } else if (e.ctrlKey && e.key === 'ArrowUp') {\n          this.navigateTop();\n        } else if (e.ctrlKey && e.key === 'ArrowDown') {\n          this.navigateBottom();\n        } else if ((e.ctrlKey && e.key === 'ArrowLeft') || (!e.ctrlKey && e.key === 'Home')) {\n          this.navigateRowStart();\n        } else if ((e.ctrlKey && e.key === 'ArrowRight') || (!e.ctrlKey && e.key === 'End')) {\n          this.navigateRowEnd();\n        }\n      }\n    }\n    if (!handled) {\n      if (!e.shiftKey && !e.altKey && !e.ctrlKey) {\n        // editor may specify an array of keys to bubble\n        if (this._options.editable && this.currentEditor?.keyCaptureList) {\n          if (this.currentEditor.keyCaptureList.indexOf(e.which) > -1) {\n            return;\n          }\n        }\n        if (e.which === keyCode.ESCAPE) {\n          if (!this.getEditorLock()?.isActive()) {\n            return; // no editing mode to cancel, allow bubbling and default processing (exit without cancelling the event)\n          }\n          this.cancelEditAndSetFocus();\n        } else if (e.which === keyCode.PAGE_DOWN) {\n          this.navigatePageDown();\n          handled = true;\n        } else if (e.which === keyCode.PAGE_UP) {\n          this.navigatePageUp();\n          handled = true;\n        } else if (e.which === keyCode.LEFT) {\n          handled = this.navigateLeft();\n        } else if (e.which === keyCode.RIGHT) {\n          handled = this.navigateRight();\n        } else if (e.which === keyCode.UP) {\n          handled = this.navigateUp();\n        } else if (e.which === keyCode.DOWN) {\n          handled = this.navigateDown();\n        } else if (e.which === keyCode.TAB) {\n          handled = this.navigateNext();\n        } else if (e.which === keyCode.ENTER) {\n          if (this._options.editable) {\n            if (this.currentEditor) {\n              // adding new row\n              if (this.activeRow === this.getDataLength()) {\n                this.navigateDown();\n              } else {\n                this.commitEditAndSetFocus();\n              }\n            } else {\n              if (this.getEditorLock()?.commitCurrentEdit()) {\n                this.makeActiveCellEditable(undefined, undefined, e);\n              }\n            }\n          }\n          handled = true;\n        }\n      } else if (e.which === keyCode.TAB && e.shiftKey && !e.ctrlKey && !e.altKey) {\n        handled = this.navigatePrev();\n      }\n    }\n\n    if (handled) {\n      // the event has been handled so don't let parent element (bubbling/propagation) or browser (default) handle it\n      e.stopPropagation();\n      e.preventDefault();\n      try {\n        (e as any).originalEvent.keyCode = 0; // prevent default behaviour for special keys in IE browsers (F3, F5, etc.)\n      }\n      // ignore exceptions - setting the original event's keycode throws access denied exception for \"Ctrl\"\n      // (hitting control key only, nothing else), \"Shift\" (maybe others)\n      // eslint-disable-next-line no-empty\n      catch (error) { }\n    }\n  }\n\n  /**\n   * Handles a click event on the grid. It logs the event (for debugging), ensures focus is restored if necessary,\n   * triggers the onClick event, and if the clicked cell is selectable and not already active, scrolls it into view\n   * and activates it.\n   *\n   * @param {DOMEvent<HTMLDivElement> | SlickEventData_} evt - The click event, either a native DOM event or a Slick event.\n   */\n  protected handleClick(evt: DOMEvent<HTMLDivElement> | SlickEventData_) {\n    const e = evt instanceof SlickEventData ? evt.getNativeEvent() : evt;\n\n    if (!this.currentEditor) {\n      // if this click resulted in some cell child node getting focus,\n      // don't steal it back - keyboard events will still bubble up\n      // IE9+ seems to default DIVs to tabIndex=0 instead of -1, so check for cell clicks directly.\n      if ((e as DOMEvent<HTMLDivElement>).target !== document.activeElement || (e as DOMEvent<HTMLDivElement>).target.classList.contains('slick-cell')) {\n        const selection = this.getTextSelection(); // store text-selection and restore it after\n        this.setFocus();\n        this.setTextSelection(selection as Range);\n      }\n    }\n\n    const cell = this.getCellFromEvent(e);\n    if (!cell || (this.currentEditor !== null && this.activeRow === cell.row && this.activeCell === cell.cell)) {\n      return;\n    }\n\n    evt = this.trigger(this.onClick, { row: cell.row, cell: cell.cell }, evt || e);\n    if ((evt as any).isImmediatePropagationStopped()) {\n      return;\n    }\n\n    // this optimisation causes trouble - MLeibman #329\n    // if ((activeCell !== cell.cell || activeRow !== cell.row) && canCellBeActive(cell.row, cell.cell)) {\n    if (this.canCellBeActive(cell.row, cell.cell)) {\n      if (!this.getEditorLock()?.isActive() || this.getEditorLock()?.commitCurrentEdit()) {\n        this.scrollRowIntoView(cell.row, false);\n\n        const preClickModeOn = ((e as DOMEvent<HTMLDivElement>).target?.className === preClickClassName);\n        const column = this.columns[cell.cell];\n        const suppressActiveCellChangedEvent = !!(this._options.editable && column?.editor && this._options.suppressActiveCellChangeOnEdit);\n        this.setActiveCellInternal(this.getCellNode(cell.row, cell.cell), null, preClickModeOn, suppressActiveCellChangedEvent, (e as DOMEvent<HTMLDivElement>));\n      }\n    }\n  }\n\n  /**\n   * Retrieves the cell DOM element from the event target.\n   * If the cell exists and is not currently being edited, triggers the onContextMenu event.\n   */\n  protected handleContextMenu(e: Event & { target: HTMLElement; }) {\n    const cell = e.target.closest('.slick-cell');\n    if (!cell) {\n      return;\n    }\n\n    // are we editing this cell?\n    if (this.activeCellNode === cell && this.currentEditor !== null) {\n      return;\n    }\n\n    this.trigger(this.onContextMenu, {}, e);\n  }\n\n  /**\n   * Retrieves the cell from the event and triggers the onDblClick event.\n   * If the event is not prevented and the grid is editable,\n   * it initiates cell editing by calling gotoCell with edit mode enabled.\n   */\n  protected handleDblClick(e: MouseEvent) {\n    const cell = this.getCellFromEvent(e);\n    if (!cell || (this.currentEditor !== null && this.activeRow === cell.row && this.activeCell === cell.cell)) {\n      return;\n    }\n\n    this.trigger(this.onDblClick, { row: cell.row, cell: cell.cell }, e);\n    if (e.defaultPrevented) {\n      return;\n    }\n\n    if (this._options.editable) {\n      this.gotoCell(cell.row, cell.cell, true, e);\n    }\n  }\n\n  /**\n   * When the mouse enters a header column element, retrieves the column definition from the element\u2019s\n   * stored data and triggers the onHeaderMouseEnter event with the column and grid reference.\n   */\n  protected handleHeaderMouseEnter(e: MouseEvent & { target: HTMLElement; }) {\n    const c = Utils.storage.get(e.target.closest('.slick-header-column'), 'column');\n    if (!c) {\n      return;\n    }\n    this.trigger(this.onHeaderMouseEnter, {\n      column: c,\n      grid: this\n    }, e);\n  }\n\n  /**\n   * Similar to handleHeaderMouseEnter, but triggers the onHeaderMouseLeave event\n   * when the mouse leaves a header column element.\n   */\n  protected handleHeaderMouseLeave(e: MouseEvent & { target: HTMLElement; }) {\n    const c = Utils.storage.get(e.target.closest('.slick-header-column'), 'column');\n    if (!c) {\n      return;\n    }\n    this.trigger(this.onHeaderMouseLeave, {\n      column: c,\n      grid: this\n    }, e);\n  }\n\n  /**\n   * Retrieves the column from the header row cell element and triggers the onHeaderRowMouseEnter event.\n   */\n  protected handleHeaderRowMouseEnter(e: MouseEvent & { target: HTMLElement; }) {\n    const c = Utils.storage.get(e.target.closest('.slick-headerrow-column'), 'column');\n    if (!c) {\n      return;\n    }\n    this.trigger(this.onHeaderRowMouseEnter, {\n      column: c,\n      grid: this\n    }, e);\n  }\n\n  /**\n   * Retrieves the column from the header row cell element and triggers the onHeaderRowMouseLeave event.\n   */\n  protected handleHeaderRowMouseLeave(e: MouseEvent & { target: HTMLElement; }) {\n    const c = Utils.storage.get(e.target.closest('.slick-headerrow-column'), 'column');\n    if (!c) {\n      return;\n    }\n    this.trigger(this.onHeaderRowMouseLeave, {\n      column: c,\n      grid: this\n    }, e);\n  }\n\n  /**\n   * Retrieves the header column element and its associated column definition,\n   * then triggers the onHeaderContextMenu event with the column data.\n   */\n  protected handleHeaderContextMenu(e: MouseEvent & { target: HTMLElement; }) {\n    const header = e.target.closest('.slick-header-column');\n    const column = header && Utils.storage.get(header, 'column');\n    this.trigger(this.onHeaderContextMenu, { column }, e);\n  }\n\n  /**\n   * If not in the middle of a column resize, retrieves the header column element and its column definition, then triggers the onHeaderClick event.\n   */\n  protected handleHeaderClick(e: MouseEvent & { target: HTMLElement; }) {\n    if (!this.columnResizeDragging) {\n      const header = e.target.closest('.slick-header-column');\n      const column = header && Utils.storage.get(header, 'column');\n      if (column) {\n        this.trigger(this.onHeaderClick, { column }, e);\n      }\n    }\n  }\n\n  /**\n   * Triggers the onPreHeaderContextMenu event with the event target (typically the pre\u2013header panel).\n   */\n  protected handlePreHeaderContextMenu(e: MouseEvent & { target: HTMLElement; }) {\n    this.trigger(this.onPreHeaderContextMenu, { node: e.target }, e);\n  }\n\n  /**\n   * If not resizing columns, triggers the onPreHeaderClick event with the event target.\n   */\n  protected handlePreHeaderClick(e: MouseEvent & { target: HTMLElement; }) {\n    if (!this.columnResizeDragging) {\n      this.trigger(this.onPreHeaderClick, { node: e.target }, e);\n    }\n  }\n\n  /**\n   * Retrieves the footer cell element and its column definition, then triggers the onFooterContextMenu event.\n   */\n  protected handleFooterContextMenu(e: MouseEvent & { target: HTMLElement; }) {\n    const footer = e.target.closest('.slick-footerrow-column');\n    const column = footer && Utils.storage.get(footer, 'column');\n    this.trigger(this.onFooterContextMenu, { column }, e);\n  }\n\n  /**\n   * Retrieves the footer cell element and its column definition, then triggers the onFooterClick event.\n   */\n  protected handleFooterClick(e: MouseEvent & { target: HTMLElement; }) {\n    const footer = e.target.closest('.slick-footerrow-column');\n    const column = footer && Utils.storage.get(footer, 'column');\n    this.trigger(this.onFooterClick, { column }, e);\n  }\n\n  /**\n   * Triggers the onMouseEnter event when the mouse pointer enters a cell element.\n   */\n  protected handleCellMouseOver(e: MouseEvent & { target: HTMLElement; }) {\n    this.trigger(this.onMouseEnter, {}, e);\n  }\n\n  /**\n   * Handles the change in the position of the active cell.\n   * Triggers the `onActiveCellPositionChanged` event and adjusts the editor visibility and positioning.\n   */\n  protected handleActiveCellPositionChange() {\n    if (!this.activeCellNode) {\n      return;\n    }\n\n    this.trigger(this.onActiveCellPositionChanged, {});\n\n    if (this.currentEditor) {\n      const cellBox = this.getActiveCellPosition();\n      if (this.currentEditor.show && this.currentEditor.hide) {\n        if (!cellBox.visible) {\n          this.currentEditor.hide();\n        } else {\n          this.currentEditor.show();\n        }\n      }\n\n      if (this.currentEditor.position) {\n        this.currentEditor.position(cellBox);\n      }\n    }\n  }\n\n  /**\n   * limits the frequency at which the provided action is executed.\n   * call enqueue to execute the action - it will execute either immediately or, if it was executed less than minPeriod_ms in the past, as soon as minPeriod_ms has expired.\n   * call dequeue to cancel any pending action.\n   */\n  protected actionThrottle(action: () => void, minPeriod_ms: number) {\n    let blocked = false;\n    let queued = false;\n\n    const enqueue = () => {\n      if (!blocked) {\n        blockAndExecute();\n      } else {\n        queued = true;\n      }\n    };\n\n    const dequeue = () => {\n      queued = false;\n    };\n\n    const blockAndExecute = () => {\n      blocked = true;\n      window.clearTimeout(this._executionBlockTimer);\n      this._executionBlockTimer = window.setTimeout(unblock, minPeriod_ms);\n      action.call(this);\n    };\n\n    const unblock = () => {\n      if (queued) {\n        dequeue();\n        blockAndExecute();\n      } else {\n        blocked = false;\n      }\n    };\n\n    return {\n      enqueue: enqueue.bind(this),\n      dequeue: dequeue.bind(this)\n    };\n  }\n\n  /**\n   * Returns a hash containing row and cell indexes from a standard W3C event.\n   * @param {*} event A standard W3C event.\n   */\n  getCellFromEvent(evt: Event | SlickEventData_) {\n    const e = evt instanceof SlickEventData ? evt.getNativeEvent() : evt;\n    const targetEvent: any = (e as TouchEvent).touches ? (e as TouchEvent).touches[0] : e;\n\n    const cellNode = (e as Event & { target: HTMLElement }).target.closest('.slick-cell');\n    if (!cellNode) {\n      return null;\n    }\n\n    let row = this.getRowFromNode(cellNode.parentNode as HTMLElement);\n\n    if (this.hasFrozenRows) {\n      let rowOffset = 0;\n      const c = Utils.offset(Utils.parents(cellNode, '.grid-canvas')[0] as HTMLElement);\n      const isBottom = Utils.parents(cellNode, '.grid-canvas-bottom').length;\n\n      if (isBottom) {\n        rowOffset = (this._options.frozenBottom) ? Utils.height(this._canvasTopL) as number : this.frozenRowsHeight;\n      }\n\n      row = this.getCellFromPoint(targetEvent.clientX - c!.left, targetEvent.clientY - c!.top + rowOffset + document.documentElement.scrollTop).row;\n    }\n\n    const cell = this.getCellFromNode(cellNode as HTMLElement);\n\n    if (!Utils.isDefined(row) || !Utils.isDefined(cell)) {\n      return null;\n    }\n    return { row, cell };\n  }\n\n  /////////////////////////////////////////////////////////////////////\n  // End Event Management and Interactivity\n  ///////////////////////////////////////////////////////////////////\n\n  //////////////////////////////////////////////////////////////////////\n  // Rendering and Layout Management\n  ///////////////////////////////////////////////////////////////////\n\n  /**\n   * Apply HTML code by 3 different ways depending on what is provided as input and what options are enabled.\n   * 1. value is an HTMLElement or DocumentFragment, then first empty the target and simply append the HTML to the target element.\n   * 2. value is string and `enableHtmlRendering` is enabled, then use `target.innerHTML = value;`\n   * 3. value is string and `enableHtmlRendering` is disabled, then use `target.textContent = value;`\n   * @param {HTMLElement} target  - target element to apply to\n   * @param {string | HTMLElement | DocumentFragment} val - input value can be either a string or an HTMLElement\n   * @param {{ emptyTarget?: boolean; skipEmptyReassignment?: boolean; }} [options]  -\n   *   `emptyTarget`, defaults to true, will empty the target.\n   *   `skipEmptyReassignment`, defaults to true, when enabled it will not try to reapply an empty value when the target is already empty\n   */\n  applyHtmlCode(target: HTMLElement, val: string | HTMLElement | DocumentFragment, options?: { emptyTarget?: boolean; skipEmptyReassignment?: boolean; }) {\n    if (target) {\n      if (val instanceof HTMLElement || val instanceof DocumentFragment) {\n        // first empty target and then append new HTML element\n        const emptyTarget = options?.emptyTarget !== false;\n        if (emptyTarget) {\n          Utils.emptyElement(target);\n        }\n        target.appendChild(val);\n      } else {\n        // when it's already empty and we try to reassign empty, it's probably ok to skip the assignment\n        const skipEmptyReassignment = options?.skipEmptyReassignment !== false;\n        if (skipEmptyReassignment && !Utils.isDefined(val) && !target.innerHTML) {\n          return;\n        }\n\n        let sanitizedText = val;\n        if (typeof sanitizedText === 'number' || typeof sanitizedText === 'boolean') {\n          target.textContent = sanitizedText;\n        } else {\n          sanitizedText = this.sanitizeHtmlString(val as string);\n\n          // apply HTML when enableHtmlRendering is enabled but make sure we do have a value (without a value, it will simply use `textContent` to clear text content)\n          if (this._options.enableHtmlRendering && sanitizedText) {\n            target.innerHTML = sanitizedText;\n          } else {\n            target.textContent = sanitizedText;\n          }\n        }\n      }\n    }\n  }\n\n  /** Get Grid Canvas Node DOM Element */\n  getCanvasNode(columnIdOrIdx?: number | string, rowIndex?: number) {\n    return this._getContainerElement(this.getCanvases(), columnIdOrIdx, rowIndex) as HTMLDivElement;\n  }\n\n  /** Get the canvas DOM element */\n  getActiveCanvasNode(e?: Event | SlickEventData_) {\n    if (e === undefined) {\n      return this._activeCanvasNode;\n    }\n\n    if (e instanceof SlickEventData) {\n      e = e.getNativeEvent<Event>();\n    }\n\n    this._activeCanvasNode = (e as any)?.target.closest('.grid-canvas');\n    return this._activeCanvasNode;\n  }\n\n  /** Get the canvas DOM element */\n  getCanvases() {\n    return this._canvas;\n  }\n\n  /** Get the Viewport DOM node element */\n  getViewportNode(columnIdOrIdx?: number | string, rowIndex?: number) {\n    return this._getContainerElement(this.getViewports(), columnIdOrIdx, rowIndex);\n  }\n\n  /** Get all the Viewport node elements */\n  getViewports() {\n    return this._viewport;\n  }\n\n  /**\n   * Calls setActiveViewportNode (using the provided event) to set the active viewport,\n   * then returns the active viewport DOM element.\n   *\n   * @param e\n   * @returns\n   */\n  getActiveViewportNode(e: Event | SlickEventData_) {\n    this.setActiveViewportNode(e);\n\n    return this._activeViewportNode;\n  }\n\n  /**\n   * Sets an active viewport node\n   *\n   * @param {number | string} [columnIdOrIdx] - The column identifier or index.\n   * @param {number} [rowIndex] - The row index.\n   * @returns {HTMLElement} The corresponding viewport element.\n   */\n  setActiveViewportNode(e: Event | SlickEventData_) {\n    if (e instanceof SlickEventData) {\n      e = e.getNativeEvent<Event>();\n    }\n    this._activeViewportNode = (e as any)?.target.closest('.slick-viewport');\n    return this._activeViewportNode;\n  }\n\n  /** Get the headers width in pixel\n   *\n   * Iterates over all columns to accumulate the widths for the left and right header sections,\n   * adds scrollbar width if needed, and adjusts for frozen columns.\n   * Returns the computed overall header width in pixels.\n  */\n  getHeadersWidth() {\n    this.headersWidth = this.headersWidthL = this.headersWidthR = 0;\n    const includeScrollbar = !this._options.autoHeight;\n\n    let i = 0;\n    const ii = this.columns.length;\n    for (i = 0; i < ii; i++) {\n      if (!this.columns[i] || this.columns[i].hidden) { continue; }\n\n      const width = this.columns[i].width;\n\n      if ((this._options.frozenColumn!) > -1 && (i > this._options.frozenColumn!)) {\n        this.headersWidthR += width || 0;\n      } else {\n        this.headersWidthL += width || 0;\n      }\n    }\n\n    if (includeScrollbar) {\n      if ((this._options.frozenColumn!) > -1 && (i > this._options.frozenColumn!)) {\n        this.headersWidthR += this.scrollbarDimensions?.width ?? 0;\n      } else {\n        this.headersWidthL += this.scrollbarDimensions?.width ?? 0;\n      }\n    }\n\n    if (this.hasFrozenColumns()) {\n      this.headersWidthL = this.headersWidthL + 1000;\n\n      this.headersWidthR = Math.max(this.headersWidthR, this.viewportW) + this.headersWidthL;\n      this.headersWidthR += this.scrollbarDimensions?.width ?? 0;\n    } else {\n      this.headersWidthL += this.scrollbarDimensions?.width ?? 0;\n      this.headersWidthL = Math.max(this.headersWidthL, this.viewportW) + 1000;\n    }\n\n    this.headersWidth = this.headersWidthL + this.headersWidthR;\n    return Math.max(this.headersWidth, this.viewportW) + 1000;\n  }\n\n  /** Get the grid canvas width\n   *\n   * Computes the available width (considering vertical scrollbar if present),\n   * then iterates over the columns (left vs. right based on frozen columns) to sum their widths.\n   * If full\u2013width rows are enabled, extra width is added. Returns the total calculated width.\n  */\n  getCanvasWidth(): number {\n    const availableWidth = this.getViewportInnerWidth();\n    let i = this.columns.length;\n\n    this.canvasWidthL = this.canvasWidthR = 0;\n\n    while (i--) {\n      if (!this.columns[i] || this.columns[i].hidden) { continue; }\n\n      if (this.hasFrozenColumns() && (i > this._options.frozenColumn!)) {\n        this.canvasWidthR += this.columns[i].width || 0;\n      } else {\n        this.canvasWidthL += this.columns[i].width || 0;\n      }\n    }\n    let totalRowWidth = this.canvasWidthL + this.canvasWidthR;\n    if (this._options.fullWidthRows) {\n      const extraWidth = Math.max(totalRowWidth, availableWidth) - totalRowWidth;\n      if (extraWidth > 0) {\n        totalRowWidth += extraWidth;\n        if (this.hasFrozenColumns()) {\n          this.canvasWidthR += extraWidth;\n        } else {\n          this.canvasWidthL += extraWidth;\n        }\n      }\n    }\n    return totalRowWidth;\n  }\n\n  /**\n   * Recalculates the canvas width by calling getCanvasWidth and then adjusts widths of header containers,\n   * canvases, panels, and viewports. If widths have changed (or forced), it applies the new column widths\n   * by calling applyColumnWidths.\n   *\n   * @param {boolean} [forceColumnWidthsUpdate] - Whether to force an update of column widths.\n   */\n  protected updateCanvasWidth(forceColumnWidthsUpdate?: boolean) {\n    const oldCanvasWidth = this.canvasWidth;\n    const oldCanvasWidthL = this.canvasWidthL;\n    const oldCanvasWidthR = this.canvasWidthR;\n    this.canvasWidth = this.getCanvasWidth();\n\n    if (this._options.createTopHeaderPanel) {\n      Utils.width(this._topHeaderPanel, this._options.topHeaderPanelWidth ?? this.canvasWidth);\n    }\n\n    const widthChanged = this.canvasWidth !== oldCanvasWidth || this.canvasWidthL !== oldCanvasWidthL || this.canvasWidthR !== oldCanvasWidthR;\n\n    if (widthChanged || this.hasFrozenColumns() || this.hasFrozenRows) {\n      Utils.width(this._canvasTopL, this.canvasWidthL);\n\n      this.getHeadersWidth();\n\n      Utils.width(this._headerL, this.headersWidthL);\n      Utils.width(this._headerR, this.headersWidthR);\n\n      if (this.hasFrozenColumns()) {\n        const cWidth = Utils.width(this._container) || 0;\n        if (cWidth > 0 && this.canvasWidthL > cWidth && this._options.throwWhenFrozenNotAllViewable) {\n          throw new Error('[SlickGrid] Frozen columns cannot be wider than the actual grid container width. '\n            + 'Make sure to have less columns freezed or make your grid container wider');\n        }\n        Utils.width(this._canvasTopR, this.canvasWidthR);\n\n        Utils.width(this._paneHeaderL, this.canvasWidthL);\n        Utils.setStyleSize(this._paneHeaderR, 'left', this.canvasWidthL);\n        Utils.setStyleSize(this._paneHeaderR, 'width', this.viewportW - this.canvasWidthL);\n\n        Utils.width(this._paneTopL, this.canvasWidthL);\n        Utils.setStyleSize(this._paneTopR, 'left', this.canvasWidthL);\n        Utils.width(this._paneTopR, this.viewportW - this.canvasWidthL);\n\n        Utils.width(this._headerRowScrollerL, this.canvasWidthL);\n        Utils.width(this._headerRowScrollerR, this.viewportW - this.canvasWidthL);\n\n        Utils.width(this._headerRowL, this.canvasWidthL);\n        Utils.width(this._headerRowR, this.canvasWidthR);\n\n        if (this._options.createFooterRow) {\n          Utils.width(this._footerRowScrollerL, this.canvasWidthL);\n          Utils.width(this._footerRowScrollerR, this.viewportW - this.canvasWidthL);\n\n          Utils.width(this._footerRowL, this.canvasWidthL);\n          Utils.width(this._footerRowR, this.canvasWidthR);\n        }\n        if (this._options.createPreHeaderPanel) {\n          Utils.width(this._preHeaderPanel, this._options.preHeaderPanelWidth ?? this.canvasWidth);\n        }\n        Utils.width(this._viewportTopL, this.canvasWidthL);\n        Utils.width(this._viewportTopR, this.viewportW - this.canvasWidthL);\n\n        if (this.hasFrozenRows) {\n          Utils.width(this._paneBottomL, this.canvasWidthL);\n          Utils.setStyleSize(this._paneBottomR, 'left', this.canvasWidthL);\n\n          Utils.width(this._viewportBottomL, this.canvasWidthL);\n          Utils.width(this._viewportBottomR, this.viewportW - this.canvasWidthL);\n\n          Utils.width(this._canvasBottomL, this.canvasWidthL);\n          Utils.width(this._canvasBottomR, this.canvasWidthR);\n        }\n      } else {\n        Utils.width(this._paneHeaderL, '100%');\n        Utils.width(this._paneTopL, '100%');\n        Utils.width(this._headerRowScrollerL, '100%');\n        Utils.width(this._headerRowL, this.canvasWidth);\n\n        if (this._options.createFooterRow) {\n          Utils.width(this._footerRowScrollerL, '100%');\n          Utils.width(this._footerRowL, this.canvasWidth);\n        }\n\n        if (this._options.createPreHeaderPanel) {\n          Utils.width(this._preHeaderPanel, this._options.preHeaderPanelWidth ?? this.canvasWidth);\n        }\n        Utils.width(this._viewportTopL, '100%');\n\n        if (this.hasFrozenRows) {\n          Utils.width(this._viewportBottomL, '100%');\n          Utils.width(this._canvasBottomL, this.canvasWidthL);\n        }\n      }\n    }\n\n    this.viewportHasHScroll = (this.canvasWidth >= this.viewportW - (this.scrollbarDimensions?.width ?? 0));\n\n    Utils.width(this._headerRowSpacerL, this.canvasWidth + (this.viewportHasVScroll ? (this.scrollbarDimensions?.width ?? 0) : 0));\n    Utils.width(this._headerRowSpacerR, this.canvasWidth + (this.viewportHasVScroll ? (this.scrollbarDimensions?.width ?? 0) : 0));\n\n    if (this._options.createFooterRow) {\n      Utils.width(this._footerRowSpacerL, this.canvasWidth + (this.viewportHasVScroll ? (this.scrollbarDimensions?.width ?? 0) : 0));\n      Utils.width(this._footerRowSpacerR, this.canvasWidth + (this.viewportHasVScroll ? (this.scrollbarDimensions?.width ?? 0) : 0));\n    }\n\n    if (widthChanged || forceColumnWidthsUpdate) {\n      this.applyColumnWidths();\n    }\n  }\n\n  /** @alias `getPreHeaderPanelLeft` */\n  getPreHeaderPanel() {\n    return this._preHeaderPanel;\n  }\n\n  /** Get the Pre-Header Panel Left DOM node element */\n  getPreHeaderPanelLeft() {\n    return this._preHeaderPanel;\n  }\n\n  /** Get the Pre-Header Panel Right DOM node element */\n  getPreHeaderPanelRight() {\n    return this._preHeaderPanelR;\n  }\n\n  /** Get the Top-Header Panel DOM node element */\n  getTopHeaderPanel() {\n    return this._topHeaderPanel;\n  }\n\n  /**\n   * Based on whether frozen columns (and/or rows) are enabled, shows or hides the right\u2013side header\n   * and top panes as well as the bottom panes. If no frozen columns exist, hides right\u2013side panes;\n   * otherwise, conditionally shows or hides the bottom panes depending on whether frozen rows exist.\n   */\n  protected setPaneVisibility() {\n    if (this.hasFrozenColumns()) {\n      Utils.show(this._paneHeaderR);\n      Utils.show(this._paneTopR);\n\n      if (this.hasFrozenRows) {\n        Utils.show(this._paneBottomL);\n        Utils.show(this._paneBottomR);\n      } else {\n        Utils.hide(this._paneBottomR);\n        Utils.hide(this._paneBottomL);\n      }\n    } else {\n      Utils.hide(this._paneHeaderR);\n      Utils.hide(this._paneTopR);\n      Utils.hide(this._paneBottomR);\n\n      if (this.hasFrozenRows) {\n        Utils.show(this._paneBottomL);\n      } else {\n        Utils.hide(this._paneBottomR);\n        Utils.hide(this._paneBottomL);\n      }\n    }\n  }\n\n  /**\n   * Sets the CSS overflowX and overflowY styles for all four viewport elements\n   * (top\u2013left, top\u2013right, bottom\u2013left, bottom\u2013right) based on the grid\u2019s frozen columns/rows status\n   * and options such as alwaysAllowHorizontalScroll and alwaysShowVerticalScroll.\n   * If a viewportClass is specified in options, the class is added to each viewport.\n   */\n  protected setOverflow() {\n    this._viewportTopL.style.overflowX = (this.hasFrozenColumns()) ? (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'hidden' : 'scroll') : (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'hidden' : 'auto');\n    this._viewportTopL.style.overflowY = (!this.hasFrozenColumns() && this._options.alwaysShowVerticalScroll) ? 'scroll' : ((this.hasFrozenColumns()) ? (this.hasFrozenRows ? 'hidden' : 'hidden') : (this.hasFrozenRows ? 'scroll' : 'auto'));\n\n    this._viewportTopR.style.overflowX = (this.hasFrozenColumns()) ? (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'hidden' : 'scroll') : (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'hidden' : 'auto');\n    this._viewportTopR.style.overflowY = this._options.alwaysShowVerticalScroll ? 'scroll' : ((this.hasFrozenColumns()) ? (this.hasFrozenRows ? 'scroll' : 'auto') : (this.hasFrozenRows ? 'scroll' : 'auto'));\n\n    this._viewportBottomL.style.overflowX = (this.hasFrozenColumns()) ? (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'scroll' : 'auto') : (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'auto' : 'auto');\n    this._viewportBottomL.style.overflowY = (!this.hasFrozenColumns() && this._options.alwaysShowVerticalScroll) ? 'scroll' : ((this.hasFrozenColumns()) ? (this.hasFrozenRows ? 'hidden' : 'hidden') : (this.hasFrozenRows ? 'scroll' : 'auto'));\n\n    this._viewportBottomR.style.overflowX = (this.hasFrozenColumns()) ? (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'scroll' : 'auto') : (this.hasFrozenRows && !this._options.alwaysAllowHorizontalScroll ? 'auto' : 'auto');\n    this._viewportBottomR.style.overflowY = this._options.alwaysShowVerticalScroll ? 'scroll' : ((this.hasFrozenColumns()) ? (this.hasFrozenRows ? 'auto' : 'auto') : (this.hasFrozenRows ? 'auto' : 'auto'));\n\n    if (this._options.viewportClass) {\n      const viewportClassList = Utils.classNameToList(this._options.viewportClass);\n      this._viewportTopL.classList.add(...viewportClassList);\n      this._viewportTopR.classList.add(...viewportClassList);\n      this._viewportBottomL.classList.add(...viewportClassList);\n      this._viewportBottomR.classList.add(...viewportClassList);\n    }\n  }\n\n  /**\n   * Creates a <style> element (using a provided nonce if available) and appends it to the shadowRoot (or document head).\n   * Inserts rules that set heights for panels, header rows, footer rows, and cells based on grid options.\n   * It also loops through each column (if not hidden) to add empty rules for left and right column classes.\n   * If the stylesheet cannot be accessed via the modern API, it falls back to createCssRulesAlternative.\n   */\n  protected createCssRules() {\n    this._style = document.createElement('style');\n    this._style.nonce = this._options.nonce || '';\n    (this._options.shadowRoot || document.head).appendChild(this._style);\n\n    const rowHeight = (this._options.rowHeight! - this.cellHeightDiff);\n    const rules = [\n      `.${this.uid} .slick-group-header-column { left: 1000px; }`,\n      `.${this.uid} .slick-header-column { left: 1000px; }`,\n      `.${this.uid} .slick-top-panel { height: ${this._options.topPanelHeight}px; }`,\n      `.${this.uid} .slick-preheader-panel { height: ${this._options.preHeaderPanelHeight}px; }`,\n      `.${this.uid} .slick-topheader-panel { height: ${this._options.topHeaderPanelHeight}px; }`,\n      `.${this.uid} .slick-headerrow-columns { height: ${this._options.headerRowHeight}px; }`,\n      `.${this.uid} .slick-footerrow-columns { height: ${this._options.footerRowHeight}px; }`,\n      `.${this.uid} .slick-cell { height: ${rowHeight}px; }`,\n      `.${this.uid} .slick-row { height: ${this._options.rowHeight}px; }`,\n    ];\n\n    const sheet = this._style.sheet;\n    if (sheet) {\n      rules.forEach(rule => {\n        sheet.insertRule(rule);\n      });\n\n      for (let i = 0; i < this.columns.length; i++) {\n        if (!this.columns[i] || this.columns[i].hidden) { continue; }\n\n        sheet.insertRule(`.${this.uid} .l${i} { }`);\n        sheet.insertRule(`.${this.uid} .r${i} { }`);\n      }\n    } else {\n      // fallback in case the 1st approach doesn't work, let's use our previous way of creating the css rules which is what works in Salesforce :(\n      this.createCssRulesAlternative(rules);\n    }\n  }\n\n  /** Create CSS rules via template in case the first approach with createElement('style') doesn't work.\n   *\n   * In cases where the standard method of inserting CSS rules fails (as may occur in some environments),\n   * this function creates a <style> element using a template, appends it to the document, and then adds\n   * the provided CSS rules as a concatenated text node.\n   * Also appends rules for each visible column for left and right classes.\n   */\n  protected createCssRulesAlternative(rules: string[]) {\n    const template = document.createElement('template');\n    template.innerHTML = '<style type=\"text/css\" rel=\"stylesheet\" />';\n    this._style = template.content.firstChild as HTMLStyleElement;\n    (this._options.shadowRoot || document.head).appendChild(this._style);\n\n    for (let i = 0; i < this.columns.length; i++) {\n      if (!this.columns[i] || this.columns[i].hidden) { continue; }\n\n      rules.push(`.${this.uid} .l${i} { }`);\n      rules.push(`.${this.uid} .r${i} { }`);\n    }\n\n    if ((this._style as any).styleSheet) { // IE\n      (this._style as any).styleSheet.cssText = rules.join(' ');\n    } else {\n      this._style.appendChild(document.createTextNode(rules.join(' ')));\n    }\n  }\n\n  /**\n   * Finds and caches the CSS rules from the grid\u2019s dynamically created stylesheet\n   * that correspond to a column\u2019s left (\".lX\") and right (\".rX\") classes.\n   * Returns an object containing the left and right rule objects for the specified column index.\n   * If the stylesheet has not been located yet, it iterates through available styleSheets to find it.\n   *\n   * @param idx\n   * @returns\n   */\n  protected getColumnCssRules(idx: number) {\n    let i: number;\n    if (!this.stylesheet) {\n      const sheets: any = (this._options.shadowRoot || document).styleSheets;\n\n      if (this._options.devMode && typeof this._options.devMode?.ownerNodeIndex === 'number' && this._options.devMode.ownerNodeIndex >= 0) {\n        sheets[this._options.devMode.ownerNodeIndex].ownerNode = this._style;\n      }\n\n      for (i = 0; i < sheets.length; i++) {\n        if ((sheets[i].ownerNode || sheets[i].owningElement) === this._style) {\n          this.stylesheet = sheets[i];\n          break;\n        }\n      }\n\n      if (!this.stylesheet) {\n        throw new Error('SlickGrid Cannot find stylesheet.');\n      }\n\n      // find and cache column CSS rules\n      this.columnCssRulesL = [];\n      this.columnCssRulesR = [];\n      const cssRules = (this.stylesheet.cssRules || this.stylesheet.rules);\n      let matches;\n      let columnIdx;\n      for (i = 0; i < cssRules.length; i++) {\n        const selector = cssRules[i].selectorText;\n        if (matches = /\\.l\\d+/.exec(selector)) {\n          columnIdx = parseInt(matches[0].substr(2, matches[0].length - 2), 10);\n          this.columnCssRulesL[columnIdx] = cssRules[i];\n        } else if (matches = /\\.r\\d+/.exec(selector)) {\n          columnIdx = parseInt(matches[0].substr(2, matches[0].length - 2), 10);\n          this.columnCssRulesR[columnIdx] = cssRules[i];\n        }\n      }\n    }\n\n    return {\n      left: this.columnCssRulesL![idx],\n      right: this.columnCssRulesR![idx]\n    };\n  }\n\n  /**\n   * Removes the dynamically created <style> element (if it exists) from the DOM and\n   * clears the cached stylesheet reference.\n   */\n  protected removeCssRules() {\n    this._style?.remove();\n    this.stylesheet = null;\n  }\n\n  /** Get Top Panel DOM element */\n  getTopPanel() {\n    return this._topPanels[0];\n  }\n\n  /** Get Top Panels (left/right) DOM element */\n  getTopPanels() {\n    return this._topPanels;\n  }\n\n  /**\n   * Based on the provided option (e.g. showTopPanel, showHeaderRow, etc.) and the target container(s),\n   * sets the grid option to the desired visibility. It then either slides down/up the container\n   * (if animation is enabled) or shows/hides it immediately, followed by a canvas resize.\n   * @param {'showTopPanel' | 'showHeaderRow' | 'showColumnHeader' | 'showFooterRow' | 'showPreHeaderPanel' | 'showTopHeaderPanel'} option - The grid option to modify.\n   * @param {HTMLElement | HTMLElement[]} container - The panel element(s) to show or hide.\n   * @param {boolean} [visible] - Whether the panel should be visible.\n   * @param {boolean} [animate] - Whether to animate the visibility change.\n   */\n  protected togglePanelVisibility(option: 'showTopPanel' | 'showHeaderRow' | 'showColumnHeader' | 'showFooterRow' | 'showPreHeaderPanel' | 'showTopHeaderPanel', container: HTMLElement | HTMLElement[], visible?: boolean, animate?: boolean) {\n    const animated = (animate === false) ? false : true;\n\n    if (this._options[option] !== visible) {\n      this._options[option] = visible as boolean;\n      if (visible) {\n        if (animated) {\n          Utils.slideDown(container, this.resizeCanvas.bind(this));\n          return;\n        }\n        Utils.show(container);\n        this.resizeCanvas();\n      } else {\n        if (animated) {\n          Utils.slideUp(container, this.resizeCanvas.bind(this));\n          return;\n        }\n        Utils.hide(container);\n        this.resizeCanvas();\n      }\n    }\n  }\n\n  /**\n   * Set the Top Panel Visibility and optionally enable/disable animation (enabled by default)\n   * @param {Boolean} [visible] - optionally set if top panel is visible or not\n   * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\n   */\n  setTopPanelVisibility(visible?: boolean, animate?: boolean) {\n    this.togglePanelVisibility('showTopPanel', this._topPanelScrollers, visible, animate);\n  }\n\n  /**\n   * Set the Header Row Visibility and optionally enable/disable animation (enabled by default)\n   * @param {Boolean} [visible] - optionally set if header row panel is visible or not\n   * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\n   */\n  setHeaderRowVisibility(visible?: boolean, animate?: boolean) {\n    this.togglePanelVisibility('showHeaderRow', this._headerRowScroller, visible, animate);\n  }\n\n  /**\n   * Set the Column Header Visibility and optionally enable/disable animation (enabled by default)\n   * @param {Boolean} [visible] - optionally set if column header is visible or not\n   * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\n   */\n  setColumnHeaderVisibility(visible?: boolean, animate?: boolean) {\n    this.togglePanelVisibility('showColumnHeader', this._headerScroller, visible, animate);\n  }\n\n  /**\n   * Set the Footer Visibility and optionally enable/disable animation (enabled by default)\n   * @param {Boolean} [visible] - optionally set if footer row panel is visible or not\n   * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\n   */\n  setFooterRowVisibility(visible?: boolean, animate?: boolean) {\n    this.togglePanelVisibility('showFooterRow', this._footerRowScroller, visible, animate);\n  }\n\n  /**\n   * Set the Pre-Header Visibility and optionally enable/disable animation (enabled by default)\n   * @param {Boolean} [visible] - optionally set if pre-header panel is visible or not\n   * @param {Boolean} [animate] - optionally enable an animation while toggling the panel\n   */\n  setPreHeaderPanelVisibility(visible?: boolean, animate?: boolean) {\n    this.togglePanelVisibility('showPreHeaderPanel', [this._preHeaderPanelScroller, this._preHeaderPanelScrollerR], visible, animate);\n  }\n\n  /**\n   * Set the Top-Header Visibility\n   * @param {Boolean} [visible] - optionally set if top-header panel is visible or not\n   */\n  setTopHeaderPanelVisibility(visible?: boolean) {\n    this.togglePanelVisibility('showTopHeaderPanel', this._topHeaderPanelScroller, visible);\n  }\n\n  /**\n   * Retrieves the height of a row.\n   *\n   * @returns {number} The row height defined in the grid options.\n   */\n  protected getRowHeight() {\n    return this._options.rowHeight!;\n  }\n\n  /**\n   * Returns the top pixel position for a given row, based on the row height and current vertical offset.\n   *\n   * @param {number} row - The row index.\n   * @returns {number} The pixel position of the top of the row.\n   */\n  protected getRowTop(row: number) {\n    return Math.round(this._options.rowHeight! * row - this.offset);\n  }\n\n  /**\n   * Returns the bottom pixel position for a given row, based on the row height and current vertical offset.\n   *\n   * @param {number} row - The row index.\n   * @returns {number} The pixel position of the bottom of the row.\n   */\n  protected getRowBottom(row: number) {\n    return this.getRowTop(row) + this._options.rowHeight!;\n  }\n\n  /**\n   * Computes the row index corresponding to a given vertical pixel position (taking the current offset into account).\n   *\n   * @param {number} y - The vertical position in pixels.\n   * @returns {number} The calculated row index.\n   */\n  protected getRowFromPosition(y: number) {\n    return Math.floor((y + this.offset) / this._options.rowHeight!);\n  }\n\n  /**\n   * Creates a row container element with CSS classes (e.g. active, odd/even, frozen, loading) based on the row\u2019s state\n   * and metadata. It positions the row using getRowTop (adjusting for frozen rows), clones the row for frozen-column\n   * support if needed, and iterates over each column to call appendCellHtml\n   * for each cell that is within the visible viewport range.\n   *\n   * @param {HTMLElement[]} divArrayL - The array to store left-side row elements.\n   * @param {HTMLElement[]} divArrayR - The array to store right-side row elements (for frozen columns).\n   * @param {number} row - The row index to be rendered.\n   * @param {CellViewportRange} range - The visible viewport range for rendering cells.\n   * @param {number} dataLength - The total data length to determine if the row is loading.\n   */\n  protected appendRowHtml(divArrayL: HTMLElement[], divArrayR: HTMLElement[], row: number, range: CellViewportRange, dataLength: number) {\n    const d = this.getDataItem(row);\n    const dataLoading = row < dataLength && !d;\n    let rowCss = 'slick-row' +\n      (this.hasFrozenRows && row <= this._options.frozenRow! ? ' frozen' : '') +\n      (dataLoading ? ' loading' : '') +\n      (row === this.activeRow && this._options.showCellSelection ? ' active' : '') +\n      (row % 2 === 1 ? ' odd' : ' even');\n\n    if (!d) {\n      rowCss += ` ${this._options.addNewRowCssClass}`;\n    }\n\n    const metadata = this.getItemMetadaWhenExists(row);\n    if (metadata?.cssClasses) {\n      rowCss += ` ${metadata.cssClasses}`;\n    }\n\n    const rowDiv = Utils.createDomElement('div', {\n      className: `ui-widget-content ${rowCss}`,\n      role: 'row',\n      dataset: { row: `${row}` },\n    });\n    const frozenRowOffset = this.getFrozenRowOffset(row);\n    const topOffset = this.getRowTop(row) - frozenRowOffset;\n    if (this._options.rowTopOffsetRenderType === 'transform') {\n      rowDiv.style.transform = `translateY(${topOffset}px)`;\n    } else {\n      rowDiv.style.top = `${topOffset}px`; // default to `top: {offset}px`\n    }\n\n    let rowDivR: HTMLElement | undefined;\n    divArrayL.push(rowDiv);\n    if (this.hasFrozenColumns()) {\n      // it has to be a deep copy otherwise we will have issues with pass by reference in js since\n      // attempting to add the same element to 2 different arrays will just move 1 item to the other array\n      rowDivR = rowDiv.cloneNode(true) as HTMLElement;\n      divArrayR.push(rowDivR);\n    }\n\n    const columnCount = this.columns.length;\n    let columnData: ColumnMetadata | null;\n    let colspan: number | string;\n    let rowspan: number;\n    let m: C;\n    let isRenderCell = true;\n\n    for (let i = 0, ii = columnCount; i < ii; i++) {\n      isRenderCell = true;\n      m = this.columns[i];\n      if (!m || m.hidden) { continue; }\n\n      colspan = 1;\n      rowspan = 1;\n      columnData = null;\n      if (metadata?.columns) {\n        columnData = metadata.columns[m.id] || metadata.columns[i];\n        colspan = columnData?.colspan || 1;\n        rowspan = columnData?.rowspan || 1;\n        if (colspan === '*') {\n          colspan = ii - i;\n        }\n        if (rowspan > dataLength - row) {\n          rowspan = dataLength - row;\n        }\n      }\n\n      if (!this._options.enableCellRowSpan && rowspan > 1) {\n        console.warn('[SlickGrid] Cell \"rowspan\" is an opt-in grid option because of its small perf hit, you must enable it via the \"enableCellRowSpan\" grid option.');\n      }\n\n      const ncolspan = colspan as number; // at this point colspan is for sure a number\n\n      // don't render child cell of a rowspan cell\n      const prs = this.getParentRowSpanByCell(row, i);\n      if (prs) {\n        continue;\n      }\n\n      // Do not render cells outside of the viewport.\n      if (this.columnPosRight[Math.min(ii - 1, i + ncolspan - 1)] > range.leftPx) {\n        if (!m.alwaysRenderColumn && this.columnPosLeft[i] > range.rightPx) {\n          isRenderCell = false; // render as false but keep looping to correctly save cellspan pointers\n        }\n\n        // All columns to the right are outside the range, so no need to render them\n        if (isRenderCell) {\n          const targetedRowDiv = (this.hasFrozenColumns() && (i > this._options.frozenColumn!) ? rowDivR! : rowDiv);\n          this.appendCellHtml(targetedRowDiv, row, i, ncolspan, rowspan, columnData, d);\n        }\n      } else if (m.alwaysRenderColumn || (this.hasFrozenColumns() && i <= this._options.frozenColumn!)) {\n        this.appendCellHtml(rowDiv, row, i, ncolspan, rowspan, columnData, d);\n      }\n\n      if (ncolspan > 1) {\n        i += (ncolspan - 1);\n      }\n    }\n  }\n\n  /**\n   * Creates a cell element with appropriate CSS classes (including frozen and active classes) and retrieves its value\n   * via the formatter. It applies additional CSS classes from event return values and formatter results,\n   * sets tooltips if provided, and inserts any additional DOM elements if required. It then appends the cell element\n   * to the row container and updates the row\u2019s cellRenderQueue and cellColSpans in the rowsCache.\n   *\n   * @param {HTMLElement} divRow - The row container element to append the cell to.\n   * @param {number} row - The row index where the cell belongs.\n   * @param {number} cell - The column index of the cell.\n   * @param {number} colspan - The column span value for the cell.\n   * @param {number} rowspan - The row span value for the cell.\n   * @param {ColumnMetadata | null} columnMetadata - The metadata associated with the column, if available.\n   * @param {TData} item - The data item corresponding to the row.\n   */\n  protected appendCellHtml(divRow: HTMLElement, row: number, cell: number, colspan: number, rowspan: number, columnMetadata: ColumnMetadata | null, item: TData) {\n    // divRow: the html element to append items too\n    // row, cell: row and column index\n    // colspan: HTML colspan\n    // item: grid data for row\n\n    const m = this.columns[cell];\n    let cellCss = `slick-cell l${cell} r${Math.min(this.columns.length - 1, cell + colspan - 1)}`\n      + (m.cssClass ? ` ${m.cssClass}` : '')\n      + (rowspan > 1 ? ' rowspan' : '')\n      + (columnMetadata?.cssClass ? ` ${columnMetadata.cssClass}` : '');\n\n    if (this.hasFrozenColumns() && cell <= this._options.frozenColumn!) {\n      cellCss += ' frozen';\n    }\n\n    if (row === this.activeRow && cell === this.activeCell && this._options.showCellSelection) {\n      cellCss += ' active';\n    }\n\n    // TODO: merge them together in the setter\n    Object.keys(this.cellCssClasses).forEach(key => {\n      if (this.cellCssClasses[key][row]?.[m.id]) {\n        cellCss += ` ${this.cellCssClasses[key][row][m.id]}`;\n      }\n    });\n\n    let value: any = null;\n    let formatterResult: FormatterResultWithHtml | FormatterResultWithText | HTMLElement | DocumentFragment | string = '';\n    if (item) {\n      value = this.getDataItemValueForColumn(item, m);\n      formatterResult = this.getFormatter(row, m)(row, cell, value, m, item, this as unknown as SlickGridModel);\n      if (formatterResult === null || formatterResult === undefined) {\n        formatterResult = '';\n      }\n    }\n\n    // get addl css class names from object type formatter return and from string type return of onBeforeAppendCell\n    // we will only use the event result as CSS classes when it is a string type (undefined event always return a true boolean which is not a valid css class)\n    const evt = this.trigger(this.onBeforeAppendCell, { row, cell, value, dataContext: item });\n    const appendCellResult = evt.getReturnValue();\n    let addlCssClasses = typeof appendCellResult === 'string' ? appendCellResult : '';\n    if ((formatterResult as FormatterResultObject)?.addClasses) {\n      addlCssClasses += Utils.classNameToList((addlCssClasses ? ' ' : '') + (formatterResult as FormatterResultObject).addClasses).join(' ');\n    }\n\n    const toolTipText = (formatterResult as FormatterResultObject)?.toolTip ? `${(formatterResult as FormatterResultObject).toolTip}` : '';\n    const cellDiv = Utils.createDomElement('div', {\n      className: Utils.classNameToList(`${cellCss} ${addlCssClasses || ''}`).join(' '),\n      role: 'gridcell',\n      tabIndex: -1\n    });\n    cellDiv.setAttribute('aria-describedby', this.uid + m.id);\n    if (toolTipText) {\n      cellDiv.setAttribute('title', toolTipText);\n    }\n\n    // update cell rowspan height when spanning more than 1 row\n    const cellHeight = this.getCellHeight(row, rowspan);\n    if (rowspan > 1 && cellHeight !== (this._options.rowHeight! - this.cellHeightDiff)) {\n      cellDiv.style.height = `${cellHeight || 0}px`;\n    }\n\n    if (m.hasOwnProperty('cellAttrs') && m.cellAttrs instanceof Object) {\n      Object.keys(m.cellAttrs).forEach(key => {\n        if (m.cellAttrs.hasOwnProperty(key)) {\n          cellDiv.setAttribute(key, m.cellAttrs[key]);\n        }\n      });\n    }\n\n    // if there is a corresponding row (if not, this is the Add New row or this data hasn't been loaded yet)\n    if (item) {\n      const cellResult = (Object.prototype.toString.call(formatterResult) !== '[object Object]' ? formatterResult : (formatterResult as FormatterResultWithHtml).html || (formatterResult as FormatterResultWithText).text);\n      this.applyHtmlCode(cellDiv, cellResult as string | HTMLElement);\n\n      // add drag-to-replace handle\n      if (row === this.selectionBottomRow && cell === this.selectionRightCell && this._options.showCellSelection) {\n        this.dragReplaceEl.createEl(cellDiv);\n      }\n    }\n    divRow.appendChild(cellDiv);\n\n    // Formatter can optional add an \"insertElementAfterTarget\" option but it must be inserted only after the `.slick-row` div exists\n    if ((formatterResult as FormatterResultObject).insertElementAfterTarget) {\n      Utils.insertAfterElement(cellDiv, (formatterResult as FormatterResultObject).insertElementAfterTarget as HTMLElement);\n    }\n\n    this.rowsCache[row].cellRenderQueue.push(cell);\n    this.rowsCache[row].cellColSpans[cell] = colspan;\n  }\n\n  /**\n   * Iterates over keys in the rowsCache and, for each row that is not the active row and falls\n   * outside the provided visible range (and is not a frozen row), calls removeRowFromCache to remove\n   * its DOM elements. If asynchronous post\u2013render cleanup is enabled, it triggers that process afterward.\n   *\n   * @param {{ bottom: number; top: number; }} rangeToKeep - The range of rows to keep.\n   */\n  protected cleanupRows(rangeToKeep: { bottom: number; top: number; }) {\n    // when using rowspan, we might have mandatory rows that cannot be cleaned up\n    // that is basically the starting row that holds the rowspan, that row cannot be cleaned up because it would break the UI\n    const mandatoryRows = new Set<number>();\n    if (this._options.enableCellRowSpan) {\n      for (let i = rangeToKeep.top, ln = rangeToKeep.bottom; i <= ln; i++) {\n        const parentRowSpan = this.getRowSpanIntersect(i);\n        if (parentRowSpan !== null) {\n          mandatoryRows.add(parentRowSpan); // add to Set which will take care of duplicate rows\n        }\n      }\n    }\n\n    Object.keys(this.rowsCache).forEach(rowId => {\n      if (this.rowsCache) {\n        let i = +rowId;\n        let removeFrozenRow = true;\n\n        if (this.hasFrozenRows\n          && ((this._options.frozenBottom && (i as unknown as number) >= this.actualFrozenRow) // Frozen bottom rows\n            || (!this._options.frozenBottom && (i as unknown as number) <= this.actualFrozenRow) // Frozen top rows\n          )\n        ) {\n          removeFrozenRow = false;\n        }\n\n        if (((i = parseInt(rowId, 10)) !== this.activeRow)\n          && (i < rangeToKeep.top || i > rangeToKeep.bottom)\n          && (removeFrozenRow)\n          && !mandatoryRows.has(i)\n        ) {\n          this.removeRowFromCache(i);\n        }\n      }\n    });\n    if (this._options.enableAsyncPostRenderCleanup) {\n      this.startPostProcessingCleanup();\n    }\n  }\n\n  /** Invalidate all grid rows and re-render the visible grid rows */\n  invalidate() {\n    this.updateRowCount();\n    this.invalidateAllRows();\n    this.render();\n  }\n\n  /** Invalidate all grid rows */\n  invalidateAllRows() {\n    if (this.currentEditor) {\n      this.makeActiveCellNormal();\n    }\n\n    if (typeof this.rowsCache === 'object') {\n      Object.keys(this.rowsCache).forEach(row => {\n        if (this.rowsCache) {\n          this.removeRowFromCache(+row);\n        }\n      });\n    }\n\n    if (this._options.enableAsyncPostRenderCleanup) {\n      this.startPostProcessingCleanup();\n    }\n  }\n\n  /**\n   * Invalidate a specific set of row numbers\n   * @param {Number[]} rows\n   */\n  invalidateRows(rows: number[]) {\n    if (!rows || !rows.length) {\n      return;\n    }\n\n    let row;\n    this.vScrollDir = 0;\n    const rl = rows.length;\n\n    // use Set to avoid duplicates\n    const invalidatedRows = new Set<number>();\n    const requiredRemapRows = new Set<number>();\n\n    // only do a partial rowspan remapping when the number of rows is limited and the rows aren't the full dataset\n    // otherwise a full rowspan remap of the cache is much quicker and cheaper to perform\n    const isRowSpanFullRemap = (\n      rows.length > this._options.maxPartialRowSpanRemap! ||\n      rows.length === this.getDataLength() ||\n      this._prevInvalidatedRowsCount + rows.length === this.getDataLength()\n    );\n\n    for (let i = 0; i < rl; i++) {\n      row = rows[i];\n      if (this.currentEditor && this.activeRow === row) {\n        this.makeActiveCellNormal();\n      }\n      if (this.rowsCache[row]) {\n        this.removeRowFromCache(row);\n      }\n\n      // add any rows that have rowspan intersects if it's not already in the list\n      if (this._options.enableCellRowSpan && !isRowSpanFullRemap) {\n        invalidatedRows.add(row);\n        const parentRowSpan = this.getRowSpanIntersect(row);\n        if (parentRowSpan !== null) {\n          invalidatedRows.add(parentRowSpan);\n        }\n      }\n    }\n\n    // when a partial rowspan remapping is necessary\n    if (this._options.enableCellRowSpan && !isRowSpanFullRemap) {\n      for (const ir of Array.from(invalidatedRows)) {\n        const colIdxs = this.getRowSpanColumnIntersects(ir);\n        for (const cidx of colIdxs) {\n          const prs = this.getParentRowSpanByCell(ir, cidx);\n          if (prs && this._colsWithRowSpanCache[cidx]) {\n            this._colsWithRowSpanCache[cidx].delete(prs.range);\n            requiredRemapRows.add(prs.range.split(':').map(Number)[0]);\n          }\n        }\n      }\n\n      // now that we know all the rows that need remapping, let's start remapping\n      for (const row of Array.from(requiredRemapRows)) {\n        this.remapRowSpanMetadataByRow(row);\n      }\n    }\n\n    if (this._options.enableAsyncPostRenderCleanup) {\n      this.startPostProcessingCleanup();\n    }\n    this._prevInvalidatedRowsCount = rows.length;\n  }\n\n  /**\n   * Invalidate a specific row number\n   * @param {Number} row\n   */\n  invalidateRow(row: number) {\n    if (row >= 0) {\n      const rows = [row];\n      if (this._options.enableCellRowSpan) {\n        const intersectedRow = this.getRowSpanIntersect(row);\n        if (intersectedRow !== null) {\n          rows.push(intersectedRow);\n        }\n      }\n      this.invalidateRows(rows);\n    }\n  }\n\n  /**\n   * Given a row index, retrieves the corresponding cache entry. If asynchronous post\u2013render cleanup is enabled\n   * and post\u2013processed results exist, queues cleanup actions; otherwise, removes the row nodes from the DOM.\n   * It then deletes the row\u2019s entry from rowsCache and postProcessedRows, decrements the rendered row count,\n   * and increments a removal counter.\n   *\n   * @param {number} row - The index of the row to remove.\n   */\n  protected removeRowFromCache(row: number): void {\n    const cacheEntry = this.rowsCache[row];\n    if (cacheEntry?.rowNode) {\n      this.trigger(this.onBeforeRemoveCachedRow, { row });\n      if (this._options.enableAsyncPostRenderCleanup && this.postProcessedRows[row]) {\n        this.queuePostProcessedRowForCleanup(cacheEntry, this.postProcessedRows[row], row);\n      } else {\n        cacheEntry.rowNode?.forEach((node: HTMLElement) => node.parentElement?.removeChild(node));\n      }\n      delete this.rowsCache[row];\n      delete this.postProcessedRows[row];\n      this.renderedRows--;\n      this.counter_rows_removed++;\n    }\n  }\n\n  /**\n   * Update a specific cell by its row and column index\n   * @param {Number} row - grid row number\n   * @param {Number} cell - grid cell column number\n   */\n  updateCell(row: number, cell: number) {\n    const cellNode = this.getCellNode(row, cell);\n    if (!cellNode) {\n      return;\n    }\n\n    const m = this.columns[cell];\n    const d = this.getDataItem(row);\n    if (this.currentEditor && this.activeRow === row && this.activeCell === cell) {\n      this.currentEditor.loadValue(d);\n    } else {\n      // if the cell has other coordinates because of row/cell span, update that cell (which will invalidate this cellNode)\n      // const spans = this.getSpans(row, cell);\n      // if (spans[0] !== row || spans[1] !== cell) {\n      //   this.updateCell(spans[0], spans[1]);\n      //   return;\n      // }\n      const formatterResult = d ? this.getFormatter(row, m)(row, cell, this.getDataItemValueForColumn(d, m), m, d, this as unknown as SlickGridModel) : '';\n      this.applyFormatResultToCellNode(formatterResult, cellNode);\n      this.invalidatePostProcessingResults(row);\n    }\n  }\n\n  /**\n   * Update a specific row by its row index\n   * @param {Number} row - grid row number\n   */\n  updateRow(row: number) {\n    const cacheEntry = this.rowsCache[row];\n    if (!cacheEntry) {\n      return;\n    }\n\n    this.ensureCellNodesInRowsCache(row);\n\n    let formatterResult;\n    const d = this.getDataItem(row);\n\n    Object.keys(cacheEntry.cellNodesByColumnIdx).forEach(colIdx => {\n      if (!cacheEntry.cellNodesByColumnIdx.hasOwnProperty(colIdx)) {\n        return;\n      }\n\n      const columnIdx = +colIdx;\n      const m = this.columns[columnIdx];\n      const node = cacheEntry.cellNodesByColumnIdx[columnIdx];\n\n      if (row === this.activeRow && columnIdx === this.activeCell && this.currentEditor) {\n        this.currentEditor.loadValue(d);\n      } else if (d) {\n        formatterResult = this.getFormatter(row, m)(row, columnIdx, this.getDataItemValueForColumn(d, m), m, d, this as unknown as SlickGridModel);\n        this.applyFormatResultToCellNode(formatterResult, node as HTMLDivElement);\n      } else {\n        Utils.emptyElement(node);\n      }\n    });\n\n    this.invalidatePostProcessingResults(row);\n  }\n\n  /**\n   * Get the number of rows displayed in the viewport\n   * Note that the row count is an approximation because it is a calculated value using this formula (viewport / rowHeight = rowCount),\n   * the viewport must also be displayed for this calculation to work.\n   * @return {Number} rowCount\n   */\n  getViewportRowCount() {\n    const vh = this.getViewportHeight();\n    const scrollbarHeight = this.getScrollbarDimensions()?.height ?? 0;\n    return Math.floor((vh - scrollbarHeight) / this._options.rowHeight!);\n  }\n\n  /**\n   * Calculates the vertical height available for displaying grid rows. In auto\u2013height mode it sums panel heights\n   * (header, footer, top panel) plus the total row height; otherwise, it subtracts header, footer, pre\u2013header,\n   * top\u2013header heights and container paddings from the container\u2019s computed height. It also computes and stores\n   * the number of visible rows.\n   */\n  getViewportHeight() {\n    if (!this._options.autoHeight || this._options.frozenColumn !== -1) {\n      this.topPanelH = (this._options.showTopPanel) ? this._options.topPanelHeight! + this.getVBoxDelta(this._topPanelScrollers[0]) : 0;\n      this.headerRowH = (this._options.showHeaderRow) ? this._options.headerRowHeight! + this.getVBoxDelta(this._headerRowScroller[0]) : 0;\n      this.footerRowH = (this._options.showFooterRow) ? this._options.footerRowHeight! + this.getVBoxDelta(this._footerRowScroller[0]) : 0;\n    }\n\n    if (this._options.autoHeight) {\n      let fullHeight = this._paneHeaderL.offsetHeight;\n      fullHeight += (this._options.showPreHeaderPanel) ? this._options.preHeaderPanelHeight! + this.getVBoxDelta(this._preHeaderPanelScroller) : 0;\n      fullHeight += (this._options.showHeaderRow) ? this._options.headerRowHeight! + this.getVBoxDelta(this._headerRowScroller[0]) : 0;\n      fullHeight += (this._options.showFooterRow) ? this._options.footerRowHeight! + this.getVBoxDelta(this._footerRowScroller[0]) : 0;\n      fullHeight += (this.getCanvasWidth() > this.viewportW) ? (this.scrollbarDimensions?.height ?? 0) : 0;\n\n      this.viewportH = this._options.rowHeight!\n        * this.getDataLengthIncludingAddNew()\n        + ((this._options.frozenColumn === -1) ? fullHeight : 0);\n    } else {\n      const style = getComputedStyle(this._container);\n      const containerBoxH = style.boxSizing !== 'content-box' ? this.getVBoxDelta(this._container) : 0;\n      const topHeaderH = (this._options.createTopHeaderPanel && this._options.showTopHeaderPanel) ? this._options.topHeaderPanelHeight! + this.getVBoxDelta(this._topHeaderPanelScroller) : 0;\n      const preHeaderH = (this._options.createPreHeaderPanel && this._options.showPreHeaderPanel) ? this._options.preHeaderPanelHeight! + this.getVBoxDelta(this._preHeaderPanelScroller) : 0;\n      const columnNamesH = (this._options.showColumnHeader) ? Utils.toFloat(Utils.height(this._headerScroller[0]) as number) : 0;\n      this.viewportH = Utils.toFloat(style.height)\n        - Utils.toFloat(style.paddingTop)\n        - Utils.toFloat(style.paddingBottom)\n        - this.topPanelH\n        - topHeaderH\n        - preHeaderH\n        - this.headerRowH\n        - columnNamesH\n        - this.footerRowH\n        - containerBoxH\n    }\n\n    this.numVisibleRows = Math.ceil(this.viewportH / this._options.rowHeight!);\n    return this.viewportH;\n  }\n\n  /** returns the available viewport inner width, that is the viewport width minus the scrollbar when shown */\n  protected getViewportInnerWidth(): number {\n    return this.viewportHasVScroll ? this.viewportW - (this.scrollbarDimensions?.width || 0) : this.viewportW;\n  }\n\n  /**\n   * Returns the width of the grid\u2019s viewport by measuring the inner width of the grid container (using a utility function).\n   * It falls back to a devMode\u2013specified width if necessary.\n   */\n  getViewportWidth() {\n    this.viewportW = parseFloat(Utils.innerSize(this._container, 'width') as unknown as string) || (this._options.devMode && this._options.devMode.containerClientWidth) || 0;\n    return this.viewportW;\n  }\n\n  /** Execute a Resize of the Grid Canvas.\n   *\n   * Recalculates the grid\u2019s canvas, pane, and viewport dimensions based on the current container size,\n   * frozen rows/columns settings, and auto\u2013height configuration. It then applies these dimensions to various DOM elements\n   * (panes, viewports, canvases) and updates the scrollbar dimensions.\n   * Finally, it updates the row count, handles scrolling, and forces a re\u2013render.\n   */\n  resizeCanvas() {\n    if (!this.initialized) { return; }\n    this.paneTopH = 0;\n    this.paneBottomH = 0;\n    this.viewportTopH = 0;\n    this.viewportBottomH = 0;\n\n    this.getViewportWidth();\n    this.getViewportHeight();\n\n    // Account for Frozen Rows\n    if (this.hasFrozenRows) {\n      if (this._options.frozenBottom) {\n        this.paneTopH = this.viewportH - this.frozenRowsHeight - (this.scrollbarDimensions?.height ?? 0);\n        this.paneBottomH = this.frozenRowsHeight + (this.scrollbarDimensions?.height ?? 0);\n      } else {\n        this.paneTopH = this.frozenRowsHeight;\n        this.paneBottomH = this.viewportH - this.frozenRowsHeight;\n      }\n    } else {\n      this.paneTopH = this.viewportH;\n    }\n\n    // The top pane includes the top panel and the header row\n    this.paneTopH += this.topPanelH + this.headerRowH + this.footerRowH;\n\n    if (this.hasFrozenColumns() && this._options.autoHeight) {\n      this.paneTopH += (this.scrollbarDimensions?.height ?? 0);\n    }\n\n    // The top viewport does not contain the top panel or header row\n    this.viewportTopH = this.paneTopH - this.topPanelH - this.headerRowH - this.footerRowH;\n\n    if (this._options.autoHeight) {\n      if (this.hasFrozenColumns()) {\n        let fullHeight = this.paneTopH + this._headerScrollerL.offsetHeight;\n        fullHeight += this.getVBoxDelta(this._container);\n        if (this._options.showPreHeaderPanel) {\n          fullHeight += this._options.preHeaderPanelHeight!;\n        }\n        Utils.height(this._container, fullHeight);\n      }\n\n      this._paneTopL.style.position = 'relative';\n    }\n\n    let topHeightOffset = Utils.height(this._paneHeaderL);\n    if (topHeightOffset) {\n      topHeightOffset += (this._options.showTopHeaderPanel ? this._options.topHeaderPanelHeight! : 0);\n    } else {\n      topHeightOffset = (this._options.showHeaderRow ? this._options.headerRowHeight! : 0) + (this._options.showPreHeaderPanel ? this._options.preHeaderPanelHeight! : 0);\n    }\n    Utils.setStyleSize(this._paneTopL, 'top', topHeightOffset || topHeightOffset);\n    Utils.height(this._paneTopL, this.paneTopH);\n\n    const paneBottomTop = this._paneTopL.offsetTop + this.paneTopH;\n\n    if (!this._options.autoHeight) {\n      Utils.height(this._viewportTopL, this.viewportTopH);\n    }\n\n    if (this.hasFrozenColumns()) {\n      let topHeightOffset = Utils.height(this._paneHeaderL);\n      if (topHeightOffset) {\n        topHeightOffset += (this._options.showTopHeaderPanel ? this._options.topHeaderPanelHeight! : 0);\n      }\n      Utils.setStyleSize(this._paneTopR, 'top', topHeightOffset as number);\n      Utils.height(this._paneTopR, this.paneTopH);\n      Utils.height(this._viewportTopR, this.viewportTopH);\n\n      if (this.hasFrozenRows) {\n        Utils.setStyleSize(this._paneBottomL, 'top', paneBottomTop);\n        Utils.height(this._paneBottomL, this.paneBottomH);\n        Utils.setStyleSize(this._paneBottomR, 'top', paneBottomTop);\n        Utils.height(this._paneBottomR, this.paneBottomH);\n        Utils.height(this._viewportBottomR, this.paneBottomH);\n      }\n    } else {\n      if (this.hasFrozenRows) {\n        Utils.width(this._paneBottomL, '100%');\n        Utils.height(this._paneBottomL, this.paneBottomH);\n        Utils.setStyleSize(this._paneBottomL, 'top', paneBottomTop);\n      }\n    }\n\n    if (this.hasFrozenRows) {\n      Utils.height(this._viewportBottomL, this.paneBottomH);\n\n      if (this._options.frozenBottom) {\n        Utils.height(this._canvasBottomL, this.frozenRowsHeight);\n\n        if (this.hasFrozenColumns()) {\n          Utils.height(this._canvasBottomR, this.frozenRowsHeight);\n        }\n      } else {\n        Utils.height(this._canvasTopL, this.frozenRowsHeight);\n\n        if (this.hasFrozenColumns()) {\n          Utils.height(this._canvasTopR, this.frozenRowsHeight);\n        }\n      }\n    } else {\n      Utils.height(this._viewportTopR, this.viewportTopH);\n    }\n\n    if (!this.scrollbarDimensions || !this.scrollbarDimensions.width) {\n      this.scrollbarDimensions = this.measureScrollbar();\n    }\n\n    if (this._options.autosizeColsMode === GridAutosizeColsMode.LegacyForceFit) {\n      this.autosizeColumns();\n    }\n\n    this.updateRowCount();\n    this.handleScroll();\n    // Since the width has changed, force the render() to reevaluate virtually rendered cells.\n    this.lastRenderedScrollLeft = -1;\n    this.render();\n  }\n\n  /** Update the dataset row count */\n  updateRowCount() {\n    if (!this.initialized) { return; }\n\n    const dataLength = this.getDataLength();\n\n    // remap all rowspan cache when necessary\n    if (dataLength > 0 && dataLength !== this._prevDataLength) {\n      this._rowSpanIsCached = false; // will force a full remap\n    }\n    if (this._options.enableCellRowSpan && !this._rowSpanIsCached) {\n      this.remapAllColumnsRowSpan();\n    }\n\n    this._prevDataLength = dataLength;\n    const dataLengthIncludingAddNew = this.getDataLengthIncludingAddNew();\n    let numberOfRows = 0;\n    let oldH = ((this.hasFrozenRows && !this._options.frozenBottom) ? Utils.height(this._canvasBottomL) : Utils.height(this._canvasTopL)) as number;\n\n    if (this.hasFrozenRows) {\n      numberOfRows = this.getDataLength() - this._options.frozenRow!;\n    } else {\n      numberOfRows = dataLengthIncludingAddNew + (this._options.leaveSpaceForNewRows ? this.numVisibleRows - 1 : 0);\n    }\n\n    const tempViewportH = Utils.height(this._viewportScrollContainerY) as number;\n    const oldViewportHasVScroll = this.viewportHasVScroll;\n    // with autoHeight, we do not need to accommodate the vertical scroll bar\n    this.viewportHasVScroll = this._options.alwaysShowVerticalScroll || !this._options.autoHeight && (numberOfRows * this._options.rowHeight! > tempViewportH);\n\n    this.makeActiveCellNormal();\n\n    // remove the rows that are now outside of the data range\n    // this helps avoid redundant calls to .removeRow() when the size of the data decreased by thousands of rows\n    const r1 = dataLength - 1;\n    if (typeof this.rowsCache === 'object') {\n      Object.keys(this.rowsCache).forEach(row => {\n        const cachedRow = +row;\n        if (cachedRow > r1) {\n          this.removeRowFromCache(cachedRow);\n        }\n      });\n    }\n\n    if (this._options.enableAsyncPostRenderCleanup) {\n      this.startPostProcessingCleanup();\n    }\n\n    if (this.activeCellNode && this.activeRow > r1) {\n      this.resetActiveCell();\n    }\n\n    oldH = this.h;\n    if (this._options.autoHeight) {\n      this.h = this._options.rowHeight! * numberOfRows;\n    } else {\n      this.th = Math.max(this._options.rowHeight! * numberOfRows, tempViewportH - (this.scrollbarDimensions?.height ?? 0));\n      if (this.th < this.maxSupportedCssHeight) {\n        // just one page\n        this.h = this.ph = this.th;\n        this.n = 1;\n        this.cj = 0;\n      } else {\n        // break into pages\n        this.h = this.maxSupportedCssHeight;\n        this.ph = this.h / 100;\n        this.n = Math.floor(this.th / this.ph);\n        this.cj = (this.th - this.h) / (this.n - 1);\n      }\n    }\n\n    if (this.h !== oldH || this.enforceFrozenRowHeightRecalc) {\n      if (this.hasFrozenRows && !this._options.frozenBottom) {\n        Utils.height(this._canvasBottomL, this.h);\n\n        if (this.hasFrozenColumns()) {\n          Utils.height(this._canvasBottomR, this.h);\n        }\n      } else {\n        Utils.height(this._canvasTopL, this.h);\n        Utils.height(this._canvasTopR, this.h);\n      }\n\n      this.scrollTop = this._viewportScrollContainerY.scrollTop;\n      this.scrollHeight = this._viewportScrollContainerY.scrollHeight;\n      this.enforceFrozenRowHeightRecalc = false; // reset enforce flag\n    }\n\n    const oldScrollTopInRange = (this.scrollTop + this.offset <= this.th - tempViewportH);\n\n    if (this.th === 0 || this.scrollTop === 0) {\n      this.page = this.offset = 0;\n    } else if (oldScrollTopInRange) {\n      // maintain virtual position\n      this.scrollTo(this.scrollTop + this.offset);\n    } else {\n      // scroll to bottom\n      this.scrollTo(this.th - tempViewportH + (this.scrollbarDimensions?.height ?? 0));\n    }\n\n    if (this.h !== oldH && this._options.autoHeight) {\n      this.resizeCanvas();\n    }\n\n    if (this._options.autosizeColsMode === GridAutosizeColsMode.LegacyForceFit && oldViewportHasVScroll !== this.viewportHasVScroll) {\n      this.autosizeColumns();\n    }\n    this.updateCanvasWidth(false);\n  }\n\n  /** @alias `getVisibleRange` */\n  getViewport(viewportTop?: number, viewportLeft?: number) {\n    return this.getVisibleRange(viewportTop, viewportLeft);\n  }\n\n  /**\n   * Returns an object with the top and bottom row indices that are visible in the viewport, as well\n   * as the left and right pixel boundaries.\n   * It uses the current (or provided) scroll positions and viewport dimensions.\n   *\n   * @param {number} [viewportTop] - The top scroll position.\n   * @param {number} [viewportLeft] - The left scroll position.\n   * @returns {{ top: number; bottom: number; leftPx: number; rightPx: number }} The visible range.\n   */\n  getVisibleRange(viewportTop?: number, viewportLeft?: number) {\n    viewportTop ??= this.scrollTop;\n    viewportLeft ??= this.scrollLeft;\n\n    return {\n      top: this.getRowFromPosition(viewportTop),\n      bottom: this.getRowFromPosition(viewportTop + this.viewportH) + 1,\n      leftPx: viewportLeft,\n      rightPx: viewportLeft + this.viewportW\n    };\n  }\n\n  /**\n   * Computes the range of rows (and horizontal pixel boundaries) that should be rendered,\n   * including an additional buffer (based on row height and a minimum buffer) determined by\n   * the current vertical scroll direction.\n   * This range is used to decide which rows and cells to render.\n   *\n   * @param {number} [viewportTop] - The top scroll position.\n   * @param {number} [viewportLeft] - The left scroll position.\n   * @returns {{ top: number; bottom: number; leftPx: number; rightPx: number }} The rendered range.\n   */\n  getRenderedRange(viewportTop?: number, viewportLeft?: number) {\n    const range = this.getVisibleRange(viewportTop, viewportLeft);\n    const buffer = Math.round(this.viewportH / this._options.rowHeight!);\n    const minBuffer = this._options.minRowBuffer as number;\n\n    if (this.vScrollDir === -1) {\n      range.top -= buffer;\n      range.bottom += minBuffer;\n    } else if (this.vScrollDir === 1) {\n      range.top -= minBuffer;\n      range.bottom += buffer;\n    } else {\n      range.top -= minBuffer;\n      range.bottom += minBuffer;\n    }\n\n    range.top = Math.max(0, range.top);\n    range.bottom = Math.min(this.getDataLengthIncludingAddNew() - 1, range.bottom);\n\n    range.leftPx -= this.viewportW;\n    range.rightPx += this.viewportW;\n\n    range.leftPx = Math.max(0, range.leftPx);\n    range.rightPx = Math.min(this.canvasWidth, range.rightPx);\n\n    return range;\n  }\n\n  /**\n   * Returns the rows cache that are currently rendered in the DOM,\n   * the cache includes certain properties like the row div element, cell rendered queue and the row colspan when defined.\n   */\n  getRowCache(): Record<number, RowCaching> {\n    return this.rowsCache;\n  }\n\n  /**\n   * Ensures that the row\u2019s cache entry contains all cell DOM nodes by transferring nodes\n   * from the cellRenderQueue into the cellNodesByColumnIdx array. This is used to guarantee\n   * that each cell is indexed properly for later updates.\n   *\n   * @param {number} row - The row index to ensure cell nodes exist for.\n   */\n  protected ensureCellNodesInRowsCache(row: number) {\n    const cacheEntry = this.rowsCache[row];\n    if (cacheEntry?.cellRenderQueue.length && cacheEntry.rowNode?.length) {\n      const rowNode = cacheEntry.rowNode as HTMLElement[];\n      let children = Array.from(rowNode[0].children) as HTMLElement[];\n      if (rowNode.length > 1) {\n        children = children.concat(Array.from(rowNode[1].children) as HTMLElement[]);\n      }\n\n      let i = children.length - 1;\n      while (cacheEntry.cellRenderQueue.length) {\n        const columnIdx = cacheEntry.cellRenderQueue.pop();\n        (cacheEntry.cellNodesByColumnIdx as HTMLElement[])[columnIdx] = children[i--];\n      }\n    }\n  }\n\n  /**\n   * For the specified row and a given horizontal visible range, iterates over the cached cell nodes and\n   * removes those cells that fall completely outside the visible range (except for frozen or always\u2013rendered cells).\n   * Cells are either removed immediately or queued for asynchronous cleanup if enabled.\n   * @param {CellViewportRange} range - The visible cell viewport range.\n   * @param {number} row - The row index to clean up.\n   */\n  protected cleanUpCells(range: CellViewportRange, row: number) {\n    // Ignore frozen rows\n    if (this.hasFrozenRows\n      && ((this._options.frozenBottom && row > this.actualFrozenRow) // Frozen bottom rows\n        || (row <= this.actualFrozenRow)                     // Frozen top rows\n      )\n    ) {\n      return;\n    }\n\n    let totalCellsRemoved = 0;\n    const cacheEntry = this.rowsCache[row];\n\n    // Remove cells outside the range.\n    const cellsToRemove: number[] = [];\n    Object.keys(cacheEntry.cellNodesByColumnIdx).forEach(cellNodeIdx => {\n      // I really hate it when people mess with Array.prototype.\n      if (!cacheEntry.cellNodesByColumnIdx.hasOwnProperty(cellNodeIdx)) {\n        return;\n      }\n\n      // This is a string, so it needs to be cast back to a number.\n      const i = +cellNodeIdx;\n\n      // Ignore frozen columns\n      if (i <= this._options.frozenColumn!) {\n        return;\n      }\n\n      // Ignore alwaysRenderedColumns\n      if (Array.isArray(this.columns) && this.columns[i]?.alwaysRenderColumn) {\n        return;\n      }\n\n      const colspan = cacheEntry.cellColSpans[i];\n      if (this.columnPosLeft[i] > range.rightPx ||\n        this.columnPosRight[Math.min(this.columns.length - 1, (i || 0) + (colspan as number) - 1)] < range.leftPx) {\n        if (!(row === this.activeRow && Number(i) === this.activeCell)) {\n          cellsToRemove.push((i as unknown as number));\n        }\n      }\n    });\n\n    let cellToRemove;\n    let cellNode;\n    while (Utils.isDefined(cellToRemove = cellsToRemove.pop())) {\n      cellNode = cacheEntry.cellNodesByColumnIdx[cellToRemove];\n\n      if (this._options.enableAsyncPostRenderCleanup && this.postProcessedRows[row]?.[cellToRemove]) {\n        this.queuePostProcessedCellForCleanup(cellNode, cellToRemove, row);\n      } else {\n        cellNode.parentElement?.removeChild(cellNode);\n      }\n\n      delete cacheEntry.cellColSpans[cellToRemove];\n      delete cacheEntry.cellNodesByColumnIdx[cellToRemove];\n      if (this.postProcessedRows[row]) {\n        delete this.postProcessedRows[row][cellToRemove];\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      totalCellsRemoved++;\n    }\n  }\n\n  /**\n   * Iterates over each row in the provided rendered range. For each row, ensures cell nodes exist,\n   * calls cleanUpCells to remove outdated cells, and then renders any missing cells (by calling appendCellHtml)\n   * for columns that are now within the viewport. Finally, processes the row\u2019s cellRenderQueue to attach rendered\n   * cells to the correct row containers (handling frozen columns), and reselects the active cell if needed.\n   */\n  protected cleanUpAndRenderCells(range: CellViewportRange) {\n    let cacheEntry;\n    const divRow: HTMLElement = document.createElement('div');\n    const processedRows: number[] = [];\n    let cellsAdded: number;\n    let totalCellsAdded = 0;\n    let colspan: number | string;\n    let columnData: ColumnMetadata | null;\n    const columnCount = this.columns.length;\n\n    for (let row = range.top as number, btm = range.bottom as number; row <= btm; row++) {\n      cacheEntry = this.rowsCache[row];\n      if (!cacheEntry) {\n        continue;\n      }\n\n      // cellRenderQueue populated in renderRows() needs to be cleared first\n      this.ensureCellNodesInRowsCache(row);\n\n      if (!this._options.enableCellRowSpan || this.getRowSpanIntersect(row) === null) {\n        this.cleanUpCells(range, row);\n      }\n\n      // Render missing cells.\n      cellsAdded = 0;\n\n      let metadata = this.getItemMetadaWhenExists(row);\n      metadata = metadata?.columns as ItemMetadata;\n\n      const d = this.getDataItem(row);\n\n      // TODO: shorten this loop (index? heuristics? binary search?)\n      for (let i = 0, ii = columnCount; i < ii; i++) {\n        if (!this.columns[i] || this.columns[i].hidden) { continue; }\n\n        // Cells to the right are outside the range.\n        if (this.columnPosLeft[i] > range.rightPx) {\n          break;\n        }\n\n        // Already rendered.\n        if (Utils.isDefined(colspan = cacheEntry.cellColSpans[i] as number)) {\n          i += (colspan > 1 ? colspan - 1 : 0);\n          continue;\n        }\n\n        colspan = 1;\n        columnData = null;\n        if (metadata) {\n          columnData = metadata[this.columns[i].id as keyof ItemMetadata] || (metadata as any)[i];\n          colspan = columnData?.colspan ?? 1;\n          if (colspan === '*') {\n            colspan = ii - i;\n          }\n        }\n\n        const ncolspan = colspan as number; // at this point colspan is for sure a number\n\n        // don't render child cell of a rowspan cell\n        const prs = this.getParentRowSpanByCell(row, i);\n        if (prs) {\n          continue;\n        }\n\n        if (this.columnPosRight[Math.min(ii - 1, i + ncolspan - 1)] > range.leftPx) {\n          const rowspan = this.getRowspan(row, i);\n          this.appendCellHtml(divRow, row, i, ncolspan, rowspan, columnData, d);\n          cellsAdded++;\n        }\n\n        i += (ncolspan > 1 ? ncolspan - 1 : 0);\n      }\n\n      if (cellsAdded) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        totalCellsAdded += cellsAdded;\n        processedRows.push(row);\n      }\n    }\n    if (!divRow.children.length) {\n      return;\n    }\n\n    let processedRow: number | null | undefined;\n    let node: HTMLElement;\n    while (Utils.isDefined(processedRow = processedRows.pop())) {\n      cacheEntry = this.rowsCache[processedRow];\n      let columnIdx;\n      while (Utils.isDefined(columnIdx = cacheEntry.cellRenderQueue.pop())) {\n        node = divRow.lastChild as HTMLElement;\n\n        //no idea why node would be null here but apparently it is..\n        if (!node) {\n          continue;\n        }\n        if (this.hasFrozenColumns() && (columnIdx > this._options.frozenColumn!)) {\n          cacheEntry.rowNode![1].appendChild(node);\n        } else {\n          cacheEntry.rowNode![0].appendChild(node);\n        }\n        cacheEntry.cellNodesByColumnIdx![columnIdx] = node;\n      }\n    }\n  }\n\n  /**\n   * Iterates over the row indices in the given rendered range and, for each row not yet in the cache,\n   * creates a new cache entry and calls appendRowHtml to build the row\u2019s cell content. Once built,\n   * the row is appended to the appropriate canvas element (top or bottom, left or right depending on frozen settings).\n   * If the active cell is rendered, it reselects it.\n   *\n   * @param {{ top: number; bottom: number; leftPx: number; rightPx: number; }} range - The range of rows to render.\n   */\n  protected renderRows(range: { top: number; bottom: number; leftPx: number; rightPx: number; }) {\n    const divArrayL: HTMLElement[] = [];\n    const divArrayR: HTMLElement[] = [];\n    const rows: number[] = [];\n    let needToReselectCell = false;\n    const dataLength = this.getDataLength();\n    const mustRenderRows = new Set<number>();\n    const renderingRows = new Set<number>();\n\n    for (let i = range.top as number, ii = range.bottom as number; i <= ii; i++) {\n      if (this.rowsCache[i] || (this.hasFrozenRows && this._options.frozenBottom && i === this.getDataLength())) {\n        continue;\n      }\n      this.renderedRows++;\n      rows.push(i);\n      renderingRows.add(i);\n\n      // Create an entry right away so that appendRowHtml() can start populating it.\n      this.rowsCache[i] = this.createEmptyCachingRow();\n\n      // add any rows that have rowspan intersects if it's not already in the list\n      if (this._options.enableCellRowSpan) {\n        const parentRowSpan = this.getRowSpanIntersect(i);\n        if (parentRowSpan !== null) {\n          renderingRows.add(parentRowSpan); // add to Set which will take care of duplicate rows\n        }\n      }\n\n      this.appendRowHtml(divArrayL, divArrayR, i, range, dataLength);\n      mustRenderRows.add(i);\n      if (this.activeCellNode && this.activeRow === i) {\n        needToReselectCell = true;\n      }\n      this.counter_rows_rendered++;\n    }\n\n    // check if there's any col/row span intersecting and if so add them to the renderingRows\n    const mandatorySpanRows = this.setDifference(renderingRows, mustRenderRows);\n    if (mandatorySpanRows.size > 0) {\n      mandatorySpanRows.forEach(r => {\n        this.removeRowFromCache(r); // remove any previous element to avoid duplicates in DOM\n        rows.push(r);\n        this.rowsCache[r] = this.createEmptyCachingRow();\n        this.appendRowHtml(divArrayL, divArrayR, r, range, dataLength);\n      });\n    }\n\n    if (rows.length) {\n      const x = document.createElement('div');\n      const xRight = document.createElement('div');\n\n      divArrayL.forEach(elm => x.appendChild(elm as HTMLElement));\n      divArrayR.forEach(elm => xRight.appendChild(elm as HTMLElement));\n\n      for (let i = 0, ii = rows.length; i < ii; i++) {\n        if ((this.hasFrozenRows) && (rows[i] >= this.actualFrozenRow)) {\n          if (this.hasFrozenColumns()) {\n            if (this.rowsCache?.hasOwnProperty(rows[i]) && x.firstChild && xRight.firstChild) {\n              this.rowsCache[rows[i]].rowNode = [x.firstChild as HTMLElement, xRight.firstChild as HTMLElement];\n              this._canvasBottomL.appendChild(x.firstChild as ChildNode);\n              this._canvasBottomR.appendChild(xRight.firstChild as ChildNode);\n            }\n          } else {\n            if (this.rowsCache?.hasOwnProperty(rows[i]) && x.firstChild) {\n              this.rowsCache[rows[i]].rowNode = [x.firstChild as HTMLElement];\n              this._canvasBottomL.appendChild(x.firstChild as ChildNode);\n            }\n          }\n        } else if (this.hasFrozenColumns()) {\n          if (this.rowsCache?.hasOwnProperty(rows[i]) && x.firstChild && xRight.firstChild) {\n            this.rowsCache[rows[i]].rowNode = [x.firstChild as HTMLElement, xRight.firstChild as HTMLElement];\n            this._canvasTopL.appendChild(x.firstChild as ChildNode);\n            this._canvasTopR.appendChild(xRight.firstChild as ChildNode);\n          }\n        } else {\n          if (this.rowsCache?.hasOwnProperty(rows[i]) && x.firstChild) {\n            this.rowsCache[rows[i]].rowNode = [x.firstChild as HTMLElement];\n            this._canvasTopL.appendChild(x.firstChild as ChildNode);\n          }\n        }\n      }\n\n      if (needToReselectCell) {\n        this.activeCellNode = this.getCellNode(this.activeRow, this.activeCell);\n      }\n    }\n  }\n\n  /**\n   * Iterates over each row in the rowsCache and updates the top position of the row\u2019s DOM element\n   * using the getRowTop calculation. Depending on the grid option, it either uses CSS transform\n   * or sets the top property directly.\n   */\n  protected updateRowPositions() {\n    for (const row in this.rowsCache) {\n      if (this.rowsCache) {\n        const rowNumber = row ? parseInt(row, 10) : 0;\n        const rowNode = this.rowsCache[rowNumber].rowNode![0];\n        if (this._options.rowTopOffsetRenderType === 'transform') {\n          rowNode.style.transform = `translateY(${this.getRowTop(rowNumber)}px)`;\n        } else {\n          rowNode.style.top = `${this.getRowTop(rowNumber)}px`; // default to `top: {offset}px`\n        }\n      }\n    }\n  }\n\n  /**\n   * (re)Render the grid\n   *\n   * Main rendering method that first dequeues any pending scroll throttling, then obtains the visible and rendered ranges.\n   * It removes rows no longer visible, calls cleanUpAndRenderCells and renderRows to render missing cells and new rows,\n   * and, if frozen rows are present, renders them separately. It then sets post\u2013processing boundaries, starts post\u2013processing,\n   * updates scroll positions, and triggers the onRendered event.\n   */\n  render() {\n    if (!this.initialized) { return; }\n\n    this.scrollThrottle.dequeue();\n\n    const visible = this.getVisibleRange();\n    const rendered = this.getRenderedRange();\n\n    // remove rows no longer in the viewport\n    this.cleanupRows(rendered);\n\n    // add new rows & missing cells in existing rows\n    if (this.lastRenderedScrollLeft !== this.scrollLeft) {\n      if (this.hasFrozenRows) {\n        const renderedFrozenRows = Utils.extend(true, {}, rendered);\n\n        if (this._options.frozenBottom) {\n          renderedFrozenRows.top = this.actualFrozenRow;\n          renderedFrozenRows.bottom = this.getDataLength();\n        } else {\n          renderedFrozenRows.top = 0;\n          renderedFrozenRows.bottom = this._options.frozenRow;\n        }\n        this.cleanUpAndRenderCells(renderedFrozenRows);\n      }\n      this.cleanUpAndRenderCells(rendered);\n    }\n\n    // render missing rows\n    this.renderRows(rendered);\n\n    // Render frozen rows\n    if (this.hasFrozenRows) {\n      if (this._options.frozenBottom) {\n        this.renderRows({\n          top: this.actualFrozenRow, bottom: this.getDataLength() - 1, leftPx: rendered.leftPx, rightPx: rendered.rightPx\n        });\n      } else {\n        this.renderRows({\n          top: 0, bottom: this._options.frozenRow! - 1, leftPx: rendered.leftPx, rightPx: rendered.rightPx\n        });\n      }\n    }\n\n    this.postProcessFromRow = visible.top;\n    this.postProcessToRow = Math.min(this.getDataLengthIncludingAddNew() - 1, visible.bottom);\n    this.startPostProcessing();\n\n    this.lastRenderedScrollTop = this.scrollTop;\n    this.lastRenderedScrollLeft = this.scrollLeft;\n    this.trigger(this.onRendered, { startRow: visible.top, endRow: visible.bottom, grid: this });\n  }\n\n  /**\n   * Get frozen (pinned) row offset\n   *\n   * Returns the vertical pixel offset to apply for frozen rows.\n   * Depending on whether frozen rows are pinned at the bottom or top and based on grid height,\n   * it returns either a fixed frozen rows height or a calculated offset.\n   *\n   * @param {Number} row - grid row number\n   */\n  getFrozenRowOffset(row: number) {\n    // let offset = ( hasFrozenRows ) ? ( this._options.frozenBottom ) ? ( row >= actualFrozenRow ) ? ( h < viewportTopH ) ? ( actualFrozenRow * this._options.rowHeight ) : h : 0 : ( row >= actualFrozenRow ) ? frozenRowsHeight : 0 : 0; // WTF?\n    let offset = 0;\n    if (this.hasFrozenRows) {\n      if (this._options.frozenBottom) {\n        if (row >= this.actualFrozenRow) {\n          if (this.h < this.viewportTopH) {\n            offset = (this.actualFrozenRow * this._options.rowHeight!);\n          } else {\n            offset = this.h;\n          }\n        } else {\n          offset = 0;\n        }\n      }\n      else {\n        if (row >= this.actualFrozenRow) {\n          offset = this.frozenRowsHeight;\n        } else {\n          offset = 0;\n        }\n      }\n    } else {\n      offset = 0;\n    }\n\n    return offset;\n  }\n\n  ////////////////////////////////////////////////////////\n  // End Rendering and Layout Management\n  //////////////////////////////////////////////////////\n\n  ////////////////////////////////////////////////////////\n  // Scrolling and Virtualisation\n  /////////////////////////////////////////////////////\n\n  // TODO:  this is static.  need to handle page mutation.\n  /**\n   * Traverses up from a specific canvas element and binds a scroll event handler\n   * (to update active cell positions) on each ancestor element that is scrollable.\n   * Also stores these ancestors for later unbinding.\n   */\n  protected bindAncestorScrollEvents() {\n    let elem: HTMLElement | null = (this.hasFrozenRows && !this._options.frozenBottom) ? this._canvasBottomL : this._canvasTopL;\n    while ((elem = elem!.parentNode as HTMLElement) !== document.body && elem) {\n      // bind to scroll containers only\n      if (elem === this._viewportTopL || elem.scrollWidth !== elem.clientWidth || elem.scrollHeight !== elem.clientHeight) {\n        this._boundAncestors.push(elem);\n        this._bindingEventService.bind(elem, 'scroll', this.handleActiveCellPositionChange.bind(this));\n      }\n    }\n  }\n\n  /**\n   * Iterates through the stored ancestor elements (in _boundAncestors)\n   * and unbinds any scroll events previously attached, then clears the stored array.\n   */\n  protected unbindAncestorScrollEvents() {\n    this._boundAncestors.forEach((ancestor) => {\n      this._bindingEventService.unbindByEventName(ancestor, 'scroll');\n    });\n    this._boundAncestors = [];\n  }\n\n  /**\n   * Chooses which viewport container(s) will serve as the scroll container for horizontal and vertical scrolling.\n   * The selection depends on whether the grid has frozen columns and/or frozen rows and whether frozenBottom is set.\n   */\n  protected setScroller() {\n    if (this.hasFrozenColumns()) {\n      this._headerScrollContainer = this._headerScrollerR;\n      this._headerRowScrollContainer = this._headerRowScrollerR;\n      this._footerRowScrollContainer = this._footerRowScrollerR;\n\n      if (this.hasFrozenRows) {\n        if (this._options.frozenBottom) {\n          this._viewportScrollContainerX = this._viewportBottomR;\n          this._viewportScrollContainerY = this._viewportTopR;\n        } else {\n          this._viewportScrollContainerX = this._viewportScrollContainerY = this._viewportBottomR;\n        }\n      } else {\n        this._viewportScrollContainerX = this._viewportScrollContainerY = this._viewportTopR;\n      }\n    } else {\n      this._headerScrollContainer = this._headerScrollerL;\n      this._headerRowScrollContainer = this._headerRowScrollerL;\n      this._footerRowScrollContainer = this._footerRowScrollerL;\n\n      if (this.hasFrozenRows) {\n        if (this._options.frozenBottom) {\n          this._viewportScrollContainerX = this._viewportBottomL;\n          this._viewportScrollContainerY = this._viewportTopL;\n        } else {\n          this._viewportScrollContainerX = this._viewportScrollContainerY = this._viewportBottomL;\n        }\n      } else {\n        this._viewportScrollContainerX = this._viewportScrollContainerY = this._viewportTopL;\n      }\n    }\n  }\n\n  /**\n   * Scroll to a Y position in the grid (clamped to valid bounds)\n   *\n   * Updates internal offsets, recalculates the visible range, cleans up rows outside the viewport,\n   * updates row positions, and triggers the onViewportChanged event.\n   *\n   * @param {Number} y\n   */\n  scrollTo(y: number) {\n    y = Math.max(y, 0);\n    y = Math.min(y, (this.th || 0) - (Utils.height(this._viewportScrollContainerY) as number) + ((this.viewportHasHScroll || this.hasFrozenColumns()) ? (this.scrollbarDimensions?.height ?? 0) : 0));\n\n    const oldOffset = this.offset;\n    this.offset = Math.round(this.page * (this.cj || 0));\n    this.page = Math.min((this.n || 0) - 1, Math.floor(y / (this.ph || 0)));\n    const newScrollTop = (y - this.offset) as number;\n\n    if (this.offset !== oldOffset) {\n      const range = this.getVisibleRange(newScrollTop);\n      this.cleanupRows(range);\n      this.updateRowPositions();\n    }\n\n    if (this.prevScrollTop !== newScrollTop) {\n      this.vScrollDir = (this.prevScrollTop + oldOffset < newScrollTop + this.offset) ? 1 : -1;\n      this.lastRenderedScrollTop = (this.scrollTop = this.prevScrollTop = newScrollTop);\n\n      if (this.hasFrozenColumns()) {\n        this._viewportTopL.scrollTop = newScrollTop;\n      }\n\n      if (this.hasFrozenRows) {\n        this._viewportBottomL.scrollTop = this._viewportBottomR.scrollTop = newScrollTop;\n      }\n\n      if (this._viewportScrollContainerY) {\n        this._viewportScrollContainerY.scrollTop = newScrollTop;\n      }\n\n      this.trigger(this.onViewportChanged, {});\n    }\n  }\n\n  // When the header row scroller is scrolled, ensures that the viewport\u2019s horizontal scroll position is updated to match it.\n  protected handleHeaderRowScroll() {\n    const scrollLeft = this._headerRowScrollContainer.scrollLeft;\n    if (scrollLeft !== this._viewportScrollContainerX.scrollLeft) {\n      this._viewportScrollContainerX.scrollLeft = scrollLeft;\n    }\n  }\n\n  // When the footer row scroller is scrolled, updates the viewport\u2019s horizontal scroll position to match it.\n  protected handleFooterRowScroll() {\n    const scrollLeft = this._footerRowScrollContainer.scrollLeft;\n    if (scrollLeft !== this._viewportScrollContainerX.scrollLeft) {\n      this._viewportScrollContainerX.scrollLeft = scrollLeft;\n    }\n  }\n\n  /** Invokes handleElementScroll for the pre\u2013header panel scroller to synchronize its\n   * horizontal scroll position with the main viewport.\n   */\n  protected handlePreHeaderPanelScroll() {\n    this.handleElementScroll(this._preHeaderPanelScroller);\n  }\n\n  /**\n   * Invokes handleElementScroll for the top\u2013header panel scroller to synchronize its horizontal\n   * scroll position with the main viewport.\n   */\n  protected handleTopHeaderPanelScroll() {\n    this.handleElementScroll(this._topHeaderPanelScroller);\n  }\n\n  /**\n   * Given a DOM element, checks its scrollLeft value and, if it differs from the viewport scroll\n   * container\u2019s scrollLeft, updates the latter to match.\n   *\n   * @param {HTMLElement} element - The element whose scroll position needs to be synced.\n   */\n  protected handleElementScroll(element: HTMLElement) {\n    const scrollLeft = element.scrollLeft;\n    if (scrollLeft !== this._viewportScrollContainerX.scrollLeft) {\n      this._viewportScrollContainerX.scrollLeft = scrollLeft;\n    }\n  }\n\n  /**\n   * Called when the grid\u2019s main scroll container scrolls. Updates internal scroll properties (scrollHeight,\n   * scrollTop, scrollLeft) from the container, then calls _handleScroll (with an argument\n   * indicating whether the event came from a system event or a mousewheel).\n   * Returns the result of _handleScroll.\n   *\n   * @param {Event} [e] - The scroll event.\n   * @returns {boolean} The result of `_handleScroll`.\n   */\n  protected handleScroll(e?: Event) {\n    this.scrollHeight = this._viewportScrollContainerY.scrollHeight;\n    this.scrollTop = this._viewportScrollContainerY.scrollTop;\n    this.scrollLeft = this._viewportScrollContainerX.scrollLeft;\n    return this._handleScroll(e ? 'scroll' : 'system');\n  }\n\n  /**\n   * Handles the detailed processing of a scroll event. It calculates maximum allowed scroll distances,\n   * clamps the current scrollTop/scrollLeft to valid bounds, computes vertical and horizontal scroll distances,\n   * and if significant horizontal scroll occurred, synchronizes various elements (header, panels, etc.)\n   * to the new scrollLeft. For vertical scroll (if autoHeight is off), updates the virtual scrolling page,\n   * offset, and may invalidate all rows. Finally, if scroll distances exceed thresholds, either calls render\n   * immediately or enqueues rendering via a throttle; triggers onViewportChanged and onScroll events with\n   * detailed parameters (including the cell at the top\u2013left).\n   *\n   * Returns true if any scroll movement occurred, else false.\n   *\n   * @param {'mousewheel' | 'scroll' | 'system'} [eventType='system'] - The type of scroll event.\n   * @returns {boolean} True if any scroll movement occurred, otherwise false.\n   */\n  protected _handleScroll(eventType: 'mousewheel' | 'scroll' | 'system' = 'system') {\n    let maxScrollDistanceY = this._viewportScrollContainerY.scrollHeight - this._viewportScrollContainerY.clientHeight;\n    let maxScrollDistanceX = this._viewportScrollContainerY.scrollWidth - this._viewportScrollContainerY.clientWidth;\n\n    // Protect against erroneous clientHeight/Width greater than scrollHeight/Width.\n    // Sometimes seen in Chrome.\n    maxScrollDistanceY = Math.max(0, maxScrollDistanceY);\n    maxScrollDistanceX = Math.max(0, maxScrollDistanceX);\n\n    // Ceiling the max scroll values\n    if (this.scrollTop > maxScrollDistanceY) {\n      this.scrollTop = maxScrollDistanceY;\n      this.scrollHeight = maxScrollDistanceY;\n    }\n    if (this.scrollLeft > maxScrollDistanceX) {\n      this.scrollLeft = maxScrollDistanceX;\n    }\n\n    const vScrollDist = Math.abs(this.scrollTop - this.prevScrollTop);\n    const hScrollDist = Math.abs(this.scrollLeft - this.prevScrollLeft);\n\n    if (hScrollDist) {\n      this.prevScrollLeft = this.scrollLeft;\n\n      // adjust scroll position of all div containers when scrolling the grid\n      this._viewportScrollContainerX.scrollLeft = this.scrollLeft;\n      this._headerScrollContainer.scrollLeft = this.scrollLeft;\n      this._topPanelScrollers[0].scrollLeft = this.scrollLeft;\n      if (this._options.createFooterRow) {\n        this._footerRowScrollContainer.scrollLeft = this.scrollLeft;\n      }\n      if (this._options.createPreHeaderPanel) {\n        if (this.hasFrozenColumns()) {\n          this._preHeaderPanelScrollerR.scrollLeft = this.scrollLeft;\n        } else {\n          this._preHeaderPanelScroller.scrollLeft = this.scrollLeft;\n        }\n      }\n      if (this._options.createTopHeaderPanel) {\n        this._topHeaderPanelScroller.scrollLeft = this.scrollLeft;\n      }\n\n      if (this.hasFrozenColumns()) {\n        if (this.hasFrozenRows) {\n          this._viewportTopR.scrollLeft = this.scrollLeft;\n        }\n        this._headerRowScrollerR.scrollLeft = this.scrollLeft; // right header row scrolling with frozen grid\n      } else {\n        if (this.hasFrozenRows) {\n          this._viewportTopL.scrollLeft = this.scrollLeft;\n        }\n        this._headerRowScrollerL.scrollLeft = this.scrollLeft; // left header row scrolling with regular grid\n      }\n    }\n\n    // autoheight suppresses vertical scrolling, but editors can create a div larger than\n    // the row vertical size, which can lead to a vertical scroll bar appearing temporarily\n    // while the editor is displayed. this is not part of the grid scrolling, so we should ignore it\n    if (vScrollDist && !this._options.autoHeight) {\n      this.vScrollDir = this.prevScrollTop < this.scrollTop ? 1 : -1;\n      this.prevScrollTop = this.scrollTop;\n\n      if (eventType === 'mousewheel') {\n        this._viewportScrollContainerY.scrollTop = this.scrollTop;\n      }\n\n      if (this.hasFrozenColumns()) {\n        if (this.hasFrozenRows && !this._options.frozenBottom) {\n          this._viewportBottomL.scrollTop = this.scrollTop;\n        } else {\n          this._viewportTopL.scrollTop = this.scrollTop;\n        }\n      }\n\n      // switch virtual pages if needed\n      if (vScrollDist < this.viewportH) {\n        this.scrollTo(this.scrollTop + this.offset);\n      } else {\n        const oldOffset = this.offset;\n        if (this.h === this.viewportH) {\n          this.page = 0;\n        } else {\n          this.page = Math.min(this.n - 1, Math.floor(this.scrollTop * ((this.th - this.viewportH) / (this.h - this.viewportH)) * (1 / this.ph)));\n        }\n        this.offset = Math.round(this.page * this.cj);\n        if (oldOffset !== this.offset) {\n          this.invalidateAllRows();\n        }\n      }\n    }\n\n    if (hScrollDist || vScrollDist) {\n      const dx = Math.abs(this.lastRenderedScrollLeft - this.scrollLeft);\n      const dy = Math.abs(this.lastRenderedScrollTop - this.scrollTop);\n      if (dx > 20 || dy > 20) {\n        // if rendering is forced or scrolling is small enough to be \"easy\", just render\n        if (this._options.forceSyncScrolling || (dy < this.viewportH && dx < this.viewportW)) {\n          this.render();\n        } else {\n          // otherwise, perform \"difficult\" renders at a capped frequency\n          this.scrollThrottle.enqueue();\n        }\n\n        this.trigger(this.onViewportChanged, {});\n      }\n    }\n\n    this.trigger(this.onScroll, {\n      triggeredBy: eventType,\n      scrollHeight: this.scrollHeight,\n      scrollLeft: this.scrollLeft,\n      scrollTop: this.scrollTop,\n    });\n\n    if (hScrollDist || vScrollDist) { return true; }\n    return false;\n  }\n\n  /** Scroll to a specific cell and make it into the view\n   *\n   * First calls scrollRowIntoView for the row. If the cell is not in a frozen column,\n   * calculates the cell\u2019s colspan and then calls internalScrollColumnIntoView with the\n   * cell\u2019s left and right boundaries.\n   */\n  scrollCellIntoView(row: number, cell: number, doPaging?: boolean) {\n    this.scrollRowIntoView(row, doPaging);\n\n    if (cell <= this._options.frozenColumn!) {\n      return;\n    }\n\n    const colspan = this.getColspan(row, cell);\n    this.internalScrollColumnIntoView(this.columnPosLeft[cell], this.columnPosRight[cell + (colspan > 1 ? colspan - 1 : 0)]);\n  }\n\n  /**\n   * Checks if the given left/right pixel boundaries are outside the current\n   * horizontal scroll position of the viewport container.\n   * If so, adjusts scrollLeft appropriately and triggers a re\u2013render.\n   *\n   * @param left\n   * @param right\n   */\n  protected internalScrollColumnIntoView(left: number, right: number) {\n    const scrollRight = this.scrollLeft + (Utils.width(this._viewportScrollContainerX) as number) - (this.viewportHasVScroll ? (this.scrollbarDimensions?.width ?? 0) : 0);\n\n    if (left < this.scrollLeft) {\n      this._viewportScrollContainerX.scrollLeft = left;\n      this.handleScroll();\n      this.render();\n    } else if (right > scrollRight) {\n      this._viewportScrollContainerX.scrollLeft = Math.min(left, right - this._viewportScrollContainerX.clientWidth);\n      this.handleScroll();\n      this.render();\n    }\n  }\n\n  /**\n   * Scroll to a specific column and show it into the viewport\n   * @param {Number} cell - cell column number\n   */\n  scrollColumnIntoView(cell: number) {\n    this.internalScrollColumnIntoView(this.columnPosLeft[cell], this.columnPosRight[cell]);\n  }\n\n  /**\n   * Update paging information status from the View\n   * @param {PagingInfo} pagingInfo\n   */\n  updatePagingStatusFromView(pagingInfo: Pick<PagingInfo, 'pageSize' | 'pageNum' | 'totalPages'>) {\n    this.pagingActive = (pagingInfo.pageSize !== 0);\n    this.pagingIsLastPage = (pagingInfo.pageNum === pagingInfo.totalPages - 1);\n  }\n\n  /**\n   * from a row number, return any column indexes that intersected with the grid row including the cell\n   * @param {Number} row - grid row index\n   */\n  getRowSpanColumnIntersects(row: number): number[] {\n    return this.getRowSpanIntersection<number[]>(row, 'columns');\n  }\n\n  /**\n   * from a row number, verify if the rowspan is intersecting and return it when found,\n   * otherwise return `null` when nothing is found or when the rowspan feature is disabled.\n   * @param {Number} row - grid row index\n   */\n  getRowSpanIntersect(row: number): number | null {\n    return this.getRowSpanIntersection<number | null>(row);\n  }\n\n  /**\n   * Determines the intersection of a given row with row span metadata.\n   * Depending on the `outputType` parameter, it returns either the intersecting columns\n   * or the start row of the span.\n   *\n   * @template R - The return type, either an array of column indices or a single row index.\n   * @param {number} row - The row index to check for intersections.\n   * @param {'columns' | 'start'} [outputType] - Determines the output type:\n   *   - `'columns'`: Returns an array of column indices that intersect with the row span.\n   *   - `'start'`: Returns the starting row index of the intersecting row span.\n   * @returns {R} The intersection result based on the specified output type.\n   */\n  protected getRowSpanIntersection<R>(row: number, outputType?: 'columns' | 'start'): R {\n    const columnIntersects: number[] = [];\n    let rowStartIntersect = null;\n\n    for (let col = 0, cln = this.columns.length; col < cln; col++) {\n      const rmeta = this._colsWithRowSpanCache[col];\n      if (rmeta) {\n        for (const range of Array.from(rmeta)) {\n          const [start, end] = range.split(':').map(Number);\n          if (row >= start && row <= end) {\n            if (outputType === 'columns') {\n              columnIntersects.push(col);\n            } else {\n              rowStartIntersect = start;\n              break;\n            }\n          }\n        }\n      }\n    }\n    return (outputType === 'columns' ? columnIntersects : rowStartIntersect) as R;\n  }\n\n  /**\n   * Returns the parent rowspan details when child cell are spanned from a rowspan or `null` when it's not spanned.\n   * By default it will exclude the parent cell that holds the rowspan, and return `null`, that initiated the rowspan unless the 3rd argument is disabled.\n   * The exclusion is helpful to find out when we're dealing with a child cell of a rowspan\n   * @param {Number} row - grid row index\n   * @param {Number} cell - grid cell/column index\n   * @param {Boolean} [excludeParentRow] - should we exclude the parent who initiated the rowspan in the search (defaults to true)?\n   */\n  getParentRowSpanByCell(row: number, cell: number, excludeParentRow = true): { start: number; end: number; range: string; } | null {\n    let spanDetail = null;\n    const rowspanRange = this._colsWithRowSpanCache[cell] || new Set<string>();\n\n    for (const range of Array.from(rowspanRange)) {\n      const [start, end] = range.split(':').map(Number);\n      const startCondition = excludeParentRow ? row > start : row >= start;\n      if (startCondition && row <= end) {\n        spanDetail = { start, end, range };\n        break;\n      }\n    }\n\n    return spanDetail;\n  }\n\n  /**\n   * Remap all the rowspan metadata by looping through all dataset rows and keep a cache of rowspan by column indexes\n   * For example:\n   *  1- if 2nd row of the 1st column has a metadata.rowspan of 3 then the cache will be: `{ 0: '1:4' }`\n   *  2- if 2nd row if the 1st column has a metadata.rowspan of 3 AND a colspan of 2 then the cache will be: `{ 0: '1:4', 1: '1:4' }`\n   */\n  remapAllColumnsRowSpan() {\n    const ln = this.getDataLength();\n    if (ln > 0) {\n      this._colsWithRowSpanCache = {};\n      for (let row = 0; row < ln; row++) {\n        this.remapRowSpanMetadataByRow(row);\n      }\n\n      this._rowSpanIsCached = true;\n    }\n  }\n\n  /**\n   * Remaps row span metadata for a given row by iterating through its column metadata.\n   * Calls `remapRowSpanMetadata` for each column to update row span information.\n   *\n   * @param {number} row - The row index for which to remap row span metadata.\n   */\n  protected remapRowSpanMetadataByRow(row: number) {\n    const colMeta = this.getItemMetadaWhenExists(row);\n    if (colMeta?.columns) {\n      Object.keys(colMeta.columns).forEach(col => {\n        const colIdx = +col;\n        const columnMeta = colMeta.columns![colIdx];\n        const colspan = +(columnMeta?.colspan || 1);\n        const rowspan = +(columnMeta?.rowspan || 1);\n        this.remapRowSpanMetadata(row, colIdx, colspan, rowspan);\n      });\n    }\n  }\n\n  /**\n   * Updates the row span metadata for a given row and cell.\n   * If a cell spans multiple rows, it records the span in `_colsWithRowSpanCache`.\n   *\n   * @param {number} row - The row index.\n   * @param {number} cell - The column index.\n   * @param {number} colspan - The number of columns the cell spans.\n   * @param {number} rowspan - The number of rows the cell spans.\n   */\n  protected remapRowSpanMetadata(row: number, cell: number, colspan: number, rowspan: number) {\n    if (rowspan > 1) {\n      const rspan = `${row}:${row + rowspan - 1}`;\n      this._colsWithRowSpanCache[cell] ??= new Set();\n      this._colsWithRowSpanCache[cell].add(rspan);\n      if (colspan > 1) {\n        for (let i = 1; i < colspan; i++) {\n          this._colsWithRowSpanCache[cell + i] ??= new Set();\n          this._colsWithRowSpanCache[cell + i].add(rspan);\n        }\n      }\n    }\n  }\n\n  /**\n   * Creates an empty row caching object to store metadata about rendered row elements.\n   * Used to optimize cell rendering and access within the grid.\n   */\n  protected createEmptyCachingRow(): RowCaching {\n    return {\n      rowNode: null,\n\n      // ColSpans of rendered cells (by column idx).\n      // Can also be used for checking whether a cell has been rendered.\n      cellColSpans: [],\n\n      // Cell nodes (by column idx).  Lazy-populated by ensureCellNodesInRowsCache().\n      cellNodesByColumnIdx: [],\n\n      // Column indices of cell nodes that have been rendered, but not yet indexed in\n      // cellNodesByColumnIdx.  These are in the same order as cell nodes added at the\n      // end of the row.\n      cellRenderQueue: [],\n    };\n  }\n\n  /**\n   * Scroll to a specific row and make it into the view\n   * @param {Number} row - grid row number\n   * @param {Boolean} doPaging - scroll when pagination is enabled\n   */\n  scrollRowIntoView(row: number, doPaging?: boolean) {\n    if (!this.hasFrozenRows ||\n      (!this._options.frozenBottom && row > this.actualFrozenRow - 1) ||\n      (this._options.frozenBottom && row < this.actualFrozenRow - 1)) {\n\n      const viewportScrollH = Utils.height(this._viewportScrollContainerY) as number;\n\n      // if frozen row on top\n      // subtract number of frozen row\n      const rowNumber = (this.hasFrozenRows && !this._options.frozenBottom ? row - this._options.frozenRow! : row);\n\n      const rowAtTop = rowNumber * this._options.rowHeight!;\n      const rowAtBottom = (rowNumber + 1) * this._options.rowHeight!\n        - viewportScrollH\n        + (this.viewportHasHScroll ? (this.scrollbarDimensions?.height ?? 0) : 0);\n\n      // need to page down?\n      if ((rowNumber + 1) * this._options.rowHeight! > this.scrollTop + viewportScrollH + this.offset) {\n        this.scrollTo(doPaging ? rowAtTop : rowAtBottom);\n        this.render();\n      }\n      // or page up?\n      else if (rowNumber * this._options.rowHeight! < this.scrollTop + this.offset) {\n        this.scrollTo(doPaging ? rowAtBottom : rowAtTop);\n        this.render();\n      }\n    }\n  }\n\n  /**\n   * Scroll to the top row and make it into the view\n   * @param {Number} row - grid row number\n   */\n  scrollRowToTop(row: number) {\n    this.scrollTo(row * this._options.rowHeight!);\n    this.render();\n  }\n\n  /**\n   * Scrolls the grid by a full page in the specified direction.\n   * Adjusts the scroll position and re-renders the grid accordingly.\n   * If cell navigation is enabled, it also updates the active cell position.\n   *\n   *  * @param {number} dir - The direction to scroll:\n   *   - `1` for scrolling down\n   *   - `-1` for scrolling up\n   *    Acts as a multiplier on numVisibleRows\n   */\n  protected scrollPage(dir: number) {\n    const deltaRows = dir * this.numVisibleRows;\n    /// First fully visible row crosses the line with\n    /// y === bottomOfTopmostFullyVisibleRow\n    const bottomOfTopmostFullyVisibleRow = this.scrollTop + this._options.rowHeight! - 1;\n    this.scrollTo((this.getRowFromPosition(bottomOfTopmostFullyVisibleRow) + deltaRows) * this._options.rowHeight!);\n    this.render();\n\n    if (this._options.enableCellNavigation && Utils.isDefined(this.activeRow)) {\n      let row = this.activeRow + deltaRows;\n      const dataLengthIncludingAddNew = this.getDataLengthIncludingAddNew();\n      if (row >= dataLengthIncludingAddNew) {\n        row = dataLengthIncludingAddNew - 1;\n      }\n      if (row < 0) {\n        row = 0;\n      }\n\n      // use the gotoDown/Up but cancel its row move to activate same row\n      // (i.e.: gotoDown(row - 1) will go to same row if it can be activated or next one down).\n      // We do this in order to find the next cell that can be activated which can be much further away (i.e. rowspan)\n      const pos = dir === 1\n        ? this.gotoDown(row - 1 || 0, this.activeCell, this.activePosY, this.activePosX)\n        : this.gotoUp(row + 1, this.activeCell, this.activePosY, this.activePosX)\n      this.navigateToPos(pos);\n    }\n  }\n\n  /** Navigate (scroll) by a page down */\n  navigatePageDown() {\n    this.scrollPage(1);\n  }\n\n  /** Navigate (scroll) by a page up */\n  navigatePageUp() {\n    this.scrollPage(-1);\n  }\n\n  /** Navigate to the top of the grid */\n  navigateTop() {\n    this.unsetActiveCell();\n    this.navigateToRow(0);\n  }\n\n  /** Navigate to the bottom of the grid */\n  navigateBottom() {\n    const row = this.getDataLength() - 1;\n    let tmpRow = this.getParentRowSpanByCell(row, this.activeCell)?.start ?? row;\n\n    do {\n      if (this._options.enableCellRowSpan) {\n        this.setActiveRow(tmpRow);\n      }\n      const isValidMode = this.navigateToRow(tmpRow);\n      if ((isValidMode && this.activeCell === this.activePosX) || !Utils.isDefined(this.activeCell)) {\n        break;\n      }\n    } while (--tmpRow > 0);\n  }\n\n  /**\n   * Navigates to a specified row, ensuring it is visible and selecting an active cell if applicable.\n   * Adjusts the scroll position and updates the active cell based on cell navigation rules.\n   *\n   * @param {number} row - The row index to navigate to.\n   * @returns {boolean} Whether the navigation was successful.\n   */\n  navigateToRow(row: number) {\n    const num_rows = this.getDataLength();\n    if (!num_rows) { return false; }\n\n    if (row < 0) {\n      row = 0;\n    } else if (row >= num_rows) {\n      row = num_rows - 1;\n    }\n\n    this.scrollCellIntoView(row, 0, true);\n    let isValidMove = !Utils.isDefined(this.activeCell) || !Utils.isDefined(this.activeRow);\n\n    if (this._options.enableCellNavigation && Utils.isDefined(this.activeRow)) {\n      let cell = 0;\n      let prevCell: number | null = null;\n      const prevActivePosX = this.activePosX;\n      while (cell <= this.activePosX) {\n        if (this.canCellBeActive(row, cell)) {\n          prevCell = cell;\n          if (!Utils.isDefined(this.activeCell) || cell === this.activeCell) {\n            isValidMove = true;\n          }\n        }\n        cell += this.getColspan(row, cell);\n      }\n\n      if (prevCell !== null) {\n        this.setActiveCellInternal(this.getCellNode(row, prevCell));\n        this.activePosX = prevActivePosX;\n      } else {\n        this.resetActiveCell();\n      }\n    }\n    return isValidMove;\n  }\n\n  /**\n   * Retrieves the colspan for a specified cell in a row, determining how many columns it spans.\n   * Uses column metadata to derive the correct colspan value.\n   *\n   * @param {number} row - The row index.\n   * @param {number} cell - The column index.\n   * @returns {number} The number of columns the cell spans.\n   */\n  protected getColspan(row: number, cell: number): number {\n    const metadata = this.getItemMetadaWhenExists(row);\n    if (!metadata || !metadata.columns) {\n      return 1;\n    }\n\n    if (cell >= this.columns.length) {\n      cell = this.columns.length - 1;\n    }\n    const columnData = metadata.columns[this.columns[cell].id] || metadata.columns[cell];\n    let colspan = columnData?.colspan;\n    if (colspan === '*') {\n      colspan = this.columns.length - cell;\n    } else {\n      colspan = colspan || 1;\n    }\n\n    return colspan as number;\n  }\n\n\n\n\n  /////////////////////////////////////////////////////////\n  // End Scrolling and Virtualisation\n  ///////////////////////////////////////////////////////\n\n\n  /////////////////////////////////////////////////////////\n  // Cell and Row Post-Processing and CSS Styling\n  ///////////////////////////////////////////////////////\n\n  /**\n   * Increments an internal group id and, for each column in the provided postProcessedRow object,\n   * queues a cleanup action (action type 'C') for that cell. It also queues a cleanup action for the\n   * entire row (action type 'R') and removes all row nodes from the DOM.\n   *\n   * @param {RowCaching} cacheEntry - The cache entry for the row.\n   * @param {any} postProcessedRow - The object containing post-processed row data.\n   * @param {number} rowIdx - The index of the row being processed.\n   */\n  protected queuePostProcessedRowForCleanup(cacheEntry: RowCaching, postProcessedRow: any, rowIdx: number) {\n    this.postProcessgroupId++;\n\n    // store and detach node for later async cleanup\n    if (typeof postProcessedRow === 'object') {\n      Object.keys(postProcessedRow).forEach(columnIdx => {\n        if (postProcessedRow.hasOwnProperty(columnIdx)) {\n          this.postProcessedCleanupQueue.push({\n            actionType: 'C',\n            groupId: this.postProcessgroupId,\n            node: cacheEntry.cellNodesByColumnIdx[+columnIdx],\n            columnIdx: +columnIdx,\n            rowIdx\n          });\n        }\n      });\n    }\n\n    if (!cacheEntry.rowNode) {\n      cacheEntry.rowNode = [];\n    }\n    this.postProcessedCleanupQueue.push({\n      actionType: 'R',\n      groupId: this.postProcessgroupId,\n      node: cacheEntry.rowNode as HTMLElement[]\n    });\n    cacheEntry.rowNode?.forEach((node) => node.remove());\n  }\n\n  /**\n   * Queues a cleanup action (action type 'C') for the provided cell DOM element and\n   * immediately removes the cell element from the DOM.\n   *\n   * @param {HTMLElement} cellnode - The DOM element representing the cell.\n   * @param {number} columnIdx - The column index of the cell.\n   * @param {number} rowIdx - The row index of the cell.\n   */\n  protected queuePostProcessedCellForCleanup(cellnode: HTMLElement, columnIdx: number, rowIdx: number) {\n    this.postProcessedCleanupQueue.push({\n      actionType: 'C',\n      groupId: this.postProcessgroupId,\n      node: cellnode,\n      columnIdx,\n      rowIdx\n    });\n    cellnode.remove();\n  }\n\n  /** Apply a Formatter Result to a Cell DOM Node\n   *\n   * If the formatter result is not an object, it is applied directly as HTML/text;\n   * otherwise, it extracts the content (from a property such as \u201Chtml\u201D or \u201Ctext\u201D) and applies it.\n   * Additionally, it conditionally removes or adds CSS classes and sets a tooltip on the cell.\n   */\n  applyFormatResultToCellNode(formatterResult: FormatterResultWithHtml | FormatterResultWithText | string | HTMLElement | DocumentFragment, cellNode: HTMLDivElement, suppressRemove?: boolean) {\n    if (formatterResult === null || formatterResult === undefined) { formatterResult = ''; }\n    if (Object.prototype.toString.call(formatterResult) !== '[object Object]') {\n      this.applyHtmlCode(cellNode, formatterResult as string | HTMLElement);\n      return;\n    }\n\n    const formatterVal: HTMLElement | string = (formatterResult as FormatterResultWithHtml).html || (formatterResult as FormatterResultWithText).text;\n    this.applyHtmlCode(cellNode, formatterVal);\n\n    if ((formatterResult as FormatterResultObject).removeClasses && !suppressRemove) {\n      cellNode.classList.remove(...Utils.classNameToList((formatterResult as FormatterResultObject).removeClasses));\n    }\n    if ((formatterResult as FormatterResultObject).addClasses) {\n      cellNode.classList.add(...Utils.classNameToList((formatterResult as FormatterResultObject).addClasses));\n    }\n    if ((formatterResult as FormatterResultObject).toolTip) {\n      cellNode.setAttribute('title', (formatterResult as FormatterResultObject).toolTip!);\n    }\n  }\n\n  /**\n   * If asynchronous post\u2013rendering is enabled, clears any existing post\u2013render timer and sets a new timeout\n   * to call asyncPostProcessRows after the configured delay.\n   *\n   * @returns {void}\n   */\n  protected startPostProcessing() {\n    if (!this._options.enableAsyncPostRender) {\n      return;\n    }\n    window.clearTimeout(this.h_postrender);\n    this.h_postrender = window.setTimeout(this.asyncPostProcessRows.bind(this), this._options.asyncPostRenderDelay);\n  }\n\n  /**\n   * If asynchronous post\u2013render cleanup is enabled, clears any existing cleanup timer and\n   * sets a new timeout to call asyncPostProcessCleanupRows after the configured delay.\n   *\n   * @returns {void}\n   */\n  protected startPostProcessingCleanup() {\n    if (!this._options.enableAsyncPostRenderCleanup) {\n      return;\n    }\n    window.clearTimeout(this.h_postrenderCleanup);\n    this.h_postrenderCleanup = window.setTimeout(this.asyncPostProcessCleanupRows.bind(this), this._options.asyncPostRenderCleanupDelay);\n  }\n\n  /**\n   * For the specified row, if post\u2013processed results exist, sets each column\u2019s status to \u201CC\u201D (indicating cleanup is needed),\n   * adjusts the postProcessFromRow and postProcessToRow boundaries, and starts the post\u2013processing timer.\n   *\n   * @param {number} row - The index of the row to invalidate.\n   */\n  protected invalidatePostProcessingResults(row: number) {\n    // change status of columns to be re-rendered\n    if (typeof this.postProcessedRows[row] === 'object') {\n      Object.keys(this.postProcessedRows[row]).forEach(columnIdx => {\n        if (this.postProcessedRows[row].hasOwnProperty(columnIdx)) {\n          this.postProcessedRows[row][columnIdx] = 'C';\n        }\n      });\n    }\n    this.postProcessFromRow = Math.min(this.postProcessFromRow as number, row);\n    this.postProcessToRow = Math.max(this.postProcessToRow as number, row);\n    this.startPostProcessing();\n  }\n\n  /**\n   * Iterates over the range of rows defined by postProcessFromRow and postProcessToRow\n   * (direction determined by vScrollDir). For each row found in the cache,\n   * it ensures cell nodes exist, then for each cell that has an async post\u2013render function\n   * and is not yet rendered (status not \u201CR\u201D), it calls the asyncPostRender callback\n   * (passing a flag if cleanup is needed). Finally, it schedules another asynchronous\n   * processing cycle using a timeout with the configured delay.\n   *\n   * @returns {void}\n   */\n  protected asyncPostProcessRows() {\n    const dataLength = this.getDataLength();\n    while (this.postProcessFromRow <= this.postProcessToRow) {\n      const row = (this.vScrollDir >= 0) ? this.postProcessFromRow++ : this.postProcessToRow--;\n      const cacheEntry = this.rowsCache[row];\n      if (!cacheEntry || row >= dataLength) {\n        continue;\n      }\n\n      if (!this.postProcessedRows[row]) {\n        this.postProcessedRows[row] = {};\n      }\n\n      this.ensureCellNodesInRowsCache(row);\n      Object.keys(cacheEntry.cellNodesByColumnIdx).forEach(colIdx => {\n        if (cacheEntry.cellNodesByColumnIdx.hasOwnProperty(colIdx)) {\n          const columnIdx = +colIdx;\n          const m = this.columns[columnIdx];\n          const processedStatus = this.postProcessedRows[row][columnIdx]; // C=cleanup and re-render, R=rendered\n          if (m.asyncPostRender && processedStatus !== 'R') {\n            const node = cacheEntry.cellNodesByColumnIdx[columnIdx];\n            if (node) {\n              m.asyncPostRender(node, row, this.getDataItem(row), m, (processedStatus === 'C'));\n            }\n            this.postProcessedRows[row][columnIdx] = 'R';\n          }\n        }\n      });\n\n      this.h_postrender = window.setTimeout(this.asyncPostProcessRows.bind(this), this._options.asyncPostRenderDelay);\n      return;\n    }\n  }\n\n  /**\n   * Checks if there are cleanup queue entries; if so, it retrieves the group id from the first entry and processes\n   * (removes) all entries in the queue with that group id. For each entry, if the action type is \u201CR\u201D,\n   * it removes all nodes in the array; if \u201CC\u201D, it calls the asyncPostRenderCleanup callback on the\n   * corresponding column. It then schedules another cleanup cycle using the configured delay.\n   */\n  protected asyncPostProcessCleanupRows() {\n    if (this.postProcessedCleanupQueue.length > 0) {\n      const groupId = this.postProcessedCleanupQueue[0].groupId;\n\n      // loop through all queue members with this groupID\n      while (this.postProcessedCleanupQueue.length > 0 && this.postProcessedCleanupQueue[0].groupId === groupId) {\n        const entry = this.postProcessedCleanupQueue.shift();\n        if (entry?.actionType === 'R') {\n          (entry.node as HTMLElement[]).forEach((node) => {\n            node.remove();\n          });\n        }\n        if (entry?.actionType === 'C') {\n          const column = this.columns[entry.columnIdx as number];\n          if (column.asyncPostRenderCleanup && entry.node) {\n            // cleanup must also remove element\n            column.asyncPostRenderCleanup(entry.node as HTMLDivElement, entry.rowIdx as number, column);\n          }\n        }\n      }\n\n      // call this function again after the specified delay\n      this.h_postrenderCleanup = window.setTimeout(this.asyncPostProcessCleanupRows.bind(this), this._options.asyncPostRenderCleanupDelay);\n    }\n  }\n\n  /**\n   * Iterates over every row in the rows cache. For each row, if there is a removed hash (previous CSS classes)\n   * and/or an added hash (new CSS classes), then for each column key it retrieves the cell node and removes any\n   * CSS class from the removed hash (if not re\u2013added) and adds CSS classes from the added hash.\n   * This synchronises the cell CSS overlays with the provided hash changes.\n   *\n   * @param {CssStyleHash | null} [addedHash] - A hash of CSS styles to be added.\n   * @param {CssStyleHash | null} [removedHash] - A hash of CSS styles to be removed.\n   */\n  protected updateCellCssStylesOnRenderedRows(addedHash?: CssStyleHash | null, removedHash?: CssStyleHash | null) {\n    let node: HTMLElement | null;\n    let addedRowHash: any;\n    let removedRowHash: any;\n    if (typeof this.rowsCache === 'object') {\n      Object.keys(this.rowsCache).forEach(row => {\n        if (this.rowsCache) {\n          removedRowHash = removedHash?.[row];\n          addedRowHash = addedHash?.[row];\n\n          if (removedRowHash) {\n            Object.keys(removedRowHash).forEach(columnId => {\n              if (!addedRowHash || removedRowHash[columnId] !== addedRowHash[columnId]) {\n                node = this.getCellNode(+row, this.getColumnIndex(columnId));\n                if (node) {\n                  node.classList.remove(removedRowHash[columnId]);\n                }\n              }\n            });\n          }\n\n          if (addedRowHash) {\n            Object.keys(addedRowHash).forEach(columnId => {\n              if (!removedRowHash || removedRowHash[columnId] !== addedRowHash[columnId]) {\n                node = this.getCellNode(+row, this.getColumnIndex(columnId));\n                if (node) {\n                  node.classList.add(addedRowHash[columnId]);\n                }\n              }\n            });\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Adds an \"overlay\" of CSS classes to cell DOM elements. SlickGrid can have many such overlays associated with different keys and they are frequently used by plugins. For example, SlickGrid uses this method internally to decorate selected cells with selectedCellCssClass (see options).\n   * @param {String} key A unique key you can use in calls to setCellCssStyles and removeCellCssStyles. If a hash with that key has already been set, an exception will be thrown.\n   * @param {CssStyleHash} hash A hash of additional cell CSS classes keyed by row number and then by column id. Multiple CSS classes can be specified and separated by space.\n   * @example\n   * `{\n   * \t 0: { number_column: SlickEvent; title_column: SlickEvent;\t},\n   * \t 4: { percent_column: SlickEvent; }\n   * }`\n   */\n  addCellCssStyles(key: string, hash: CssStyleHash) {\n    if (this.cellCssClasses[key]) {\n      throw new Error(`SlickGrid addCellCssStyles: cell CSS hash with key \"${key}\" already exists.`);\n    }\n\n    this.cellCssClasses[key] = hash;\n    this.updateCellCssStylesOnRenderedRows(hash, null);\n    this.trigger(this.onCellCssStylesChanged, { key, hash, grid: this });\n  }\n\n  /**\n   * Removes an \"overlay\" of CSS classes from cell DOM elements. See setCellCssStyles for more.\n   * @param {String} key A string key.\n   */\n  removeCellCssStyles(key: string) {\n    if (!this.cellCssClasses[key]) {\n      return;\n    }\n\n    this.updateCellCssStylesOnRenderedRows(null, this.cellCssClasses[key]);\n    delete this.cellCssClasses[key];\n    this.trigger(this.onCellCssStylesChanged, { key, hash: null, grid: this });\n  }\n\n  /**\n   * Sets CSS classes to specific grid cells by calling removeCellCssStyles(key) followed by addCellCssStyles(key, hash). key is name for this set of styles so you can reference it later - to modify it or remove it, for example. hash is a per-row-index, per-column-name nested hash of CSS classes to apply.\n   * Suppose you have a grid with columns:\n   * [\"login\", \"name\", \"birthday\", \"age\", \"likes_icecream\", \"favorite_cake\"]\n   * ...and you'd like to highlight the \"birthday\" and \"age\" columns for people whose birthday is today, in this case, rows at index 0 and 9. (The first and tenth row in the grid).\n   * @param {String} key A string key. Will overwrite any data already associated with this key.\n   * @param {Object} hash A hash of additional cell CSS classes keyed by row number and then by column id. Multiple CSS classes can be specified and separated by space.\n   */\n  setCellCssStyles(key: string, hash: CssStyleHash) {\n    const prevHash = this.cellCssClasses[key];\n\n    this.cellCssClasses[key] = hash;\n    this.updateCellCssStylesOnRenderedRows(hash, prevHash);\n    this.trigger(this.onCellCssStylesChanged, { key, hash, grid: this });\n  }\n\n  /**\n   * Accepts a key name, returns the group of CSS styles defined under that name. See setCellCssStyles for more info.\n   * @param {String} key A string.\n   */\n  getCellCssStyles(key: string): CssStyleHash {\n    return this.cellCssClasses[key];\n  }\n\n  /**\n   * Flashes the cell twice by toggling the CSS class 4 times.\n   * @param {Number} row A row index.\n   * @param {Number} cell A column index.\n   * @param {Number} [speed] (optional) - The milliseconds delay between the toggling calls. Defaults to 250 ms.\n   */\n  flashCell(row: number, cell: number, speed = 250) {\n    const toggleCellClass = (cellNode: HTMLElement, times: number) => {\n      if (times < 1) {\n        return;\n      }\n\n      window.clearTimeout(this._flashCellTimer);\n      this._flashCellTimer = window.setTimeout(() => {\n        if (times % 2 === 0) {\n          cellNode.classList.add(this._options.cellFlashingCssClass || '');\n        } else {\n          cellNode.classList.remove(this._options.cellFlashingCssClass || '');\n        }\n        toggleCellClass(cellNode, times - 1);\n      }, speed);\n    };\n\n    if (this.rowsCache[row]) {\n      const cellNode = this.getCellNode(row, cell);\n      if (cellNode) {\n        toggleCellClass(cellNode, 5);\n      }\n    }\n  }\n\n  /**\n   * Highlight a row for a certain duration (ms) of time.\n   * @param {Number} row - grid row number\n   * @param {Number} [duration] - duration (ms), defaults to 400ms\n   */\n  highlightRow(row: number, duration?: number) {\n    const rowCache = this.rowsCache[row];\n    duration ||= this._options.rowHighlightDuration;\n\n    if (Array.isArray(rowCache?.rowNode) && this._options.rowHighlightCssClass) {\n      rowCache.rowNode.forEach(node => node.classList.add(...Utils.classNameToList(this._options.rowHighlightCssClass)));\n      window.clearTimeout(this._highlightRowTimer);\n      this._highlightRowTimer = window.setTimeout(() => {\n        rowCache.rowNode?.forEach(node => node.classList.remove(...Utils.classNameToList(this._options.rowHighlightCssClass)));\n      }, duration);\n    }\n  }\n\n  ////////////////////////////////////////////////////////////////////////\n  // End Post-processing and CSS\n  ////////////////////////////////////////////////////////////////////////\n\n\n  ////////////////////////////////////////////////////////////////////////\n  // Shared Utilities and Accessors\n  ////////////////////////////////////////////////////////////////////////\n\n  /**\n   * Helper method that selects the proper container element from a provided array based on the column\n   * identifier/index and row index. It calculates whether the target should be from the \u201Cbottom\u201D or\n   * \u201Cright\u201D side based on frozen rows/columns.\n   *\n   * @param {HTMLElement[]} targetContainers - The array of possible container elements.\n   * @param {number | string} [columnIdOrIdx] - The column identifier or index.\n   * @param {number} [rowIndex] - The row index.\n   * @returns {HTMLElement | undefined} The selected container element or undefined if not found.\n   */\n  protected _getContainerElement(targetContainers: HTMLElement[], columnIdOrIdx?: number | string, rowIndex?: number) {\n    if (!targetContainers) { return; }\n    if (!columnIdOrIdx) { columnIdOrIdx = 0; }\n    if (!rowIndex) { rowIndex = 0; }\n\n    const idx = (typeof columnIdOrIdx === 'number' ? columnIdOrIdx : this.getColumnIndex(columnIdOrIdx));\n\n    const isBottomSide = this.hasFrozenRows && rowIndex >= this.actualFrozenRow + (this._options.frozenBottom ? 0 : 1);\n    const isRightSide = this.hasFrozenColumns() && idx > this._options.frozenColumn!;\n\n    return targetContainers[(isBottomSide ? 2 : 0) + (isRightSide ? 1 : 0)];\n  }\n\n  /**\n   * Dynamically creates temporary DOM elements to measure the difference between offsetWidth/Height\n   * and clientWidth/Height, thereby computing the scrollbar width and height. After measuring, it\n   * removes the temporary elements and returns the dimensions.\n   *\n   * @returns {{ width: number; height: number }} The computed scrollbar dimensions.\n   */\n  protected measureScrollbar() {\n    let className = '';\n    this._viewport.forEach(v => className += v.className);\n    const outerdiv = Utils.createDomElement('div', { className, style: { position: 'absolute', top: '-10000px', left: '-10000px', overflow: 'auto', width: '100px', height: '100px' } }, document.body);\n    const innerdiv = Utils.createDomElement('div', { style: { width: '200px', height: '200px', overflow: 'auto' } }, outerdiv);\n    const dim = {\n      width: outerdiv.offsetWidth - outerdiv.clientWidth,\n      height: outerdiv.offsetHeight - outerdiv.clientHeight\n    };\n    innerdiv.remove();\n    outerdiv.remove();\n    return dim;\n  }\n\n  /**\n   * Dynamically doubles a test height on a temporary element until the element no longer accepts the height\n   * (or exceeds a browser-specific maximum). Returns the highest supported CSS height in pixels.\n   *\n   * @returns {number} The highest supported CSS height in pixels.\n   */\n  protected getMaxSupportedCssHeight() {\n    let supportedHeight = 1000000;\n    // FF reports the height back but still renders blank after ~6M px\n    // let testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? 6000000 : 1000000000;\n    const testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? this._options.ffMaxSupportedCssHeight : this._options.maxSupportedCssHeight;\n    const div = Utils.createDomElement('div', { style: { display: 'hidden' } }, document.body);\n\n    while (true) {\n      const test = supportedHeight * 2;\n      Utils.height(div, test);\n      const height = Utils.height(div);\n\n      if (test > testUpTo! || height !== test) {\n        break;\n      } else {\n        supportedHeight = test;\n      }\n    }\n\n    div.remove();\n    return supportedHeight;\n  }\n\n  /** Get grid unique identifier */\n  getUID() {\n    return this.uid;\n  }\n\n  /** Get Header Column Width Difference in pixel */\n  getHeaderColumnWidthDiff() {\n    return this.headerColumnWidthDiff;\n  }\n\n  /** Get scrollbar dimensions */\n  getScrollbarDimensions() {\n    return this.scrollbarDimensions;\n  }\n\n  /**\n   * Returns an object with width and height of scrollbars currently displayed in the viewport (zero if not visible).\n   */\n  getDisplayedScrollbarDimensions() {\n    return {\n      width: this.viewportHasVScroll ? (this.scrollbarDimensions?.width ?? 0) : 0,\n      height: this.viewportHasHScroll ? (this.scrollbarDimensions?.height ?? 0) : 0\n    };\n  }\n\n  /** Get the absolute column minimum width */\n  getAbsoluteColumnMinWidth(): number {\n    return this.absoluteColumnMinWidth;\n  }\n\n  /**\n   * Calculates the vertical box sizes (the sum of top/bottom borders and paddings)\n   * for a given element by reading its computed style.\n   * @param el\n   * @returns number\n   */\n  protected getVBoxDelta(el: HTMLElement): number {\n    const p = ['borderTopWidth', 'borderBottomWidth', 'paddingTop', 'paddingBottom'];\n    const styles = getComputedStyle(el);\n    let delta = 0;\n    p.forEach((val) => (delta += Utils.toFloat(styles[val as any])));\n    return delta;\n  }\n\n  /**\n   * Creates temporary elements in the header and a grid cell to calculate the extra width\n   * and height added by borders and padding (when box-sizing is not \u201Cborder-box\u201D).\n   * Sets internal properties (headerColumnWidthDiff, headerColumnHeightDiff, cellWidthDiff, cellHeightDiff)\n   * and computes the absoluteColumnMinWidth as the maximum of the header and cell width differences.\n   *\n   */\n  protected measureCellPaddingAndBorder() {\n    const h = ['borderLeftWidth', 'borderRightWidth', 'paddingLeft', 'paddingRight'];\n    const v = ['borderTopWidth', 'borderBottomWidth', 'paddingTop', 'paddingBottom'];\n    const header = this._headers[0];\n\n    this.headerColumnWidthDiff = this.headerColumnHeightDiff = 0;\n    this.cellWidthDiff = this.cellHeightDiff = 0;\n\n    let el = Utils.createDomElement('div', { className: 'ui-state-default slick-state-default slick-header-column', style: { visibility: 'hidden' }, textContent: '-' }, header);\n    let style = getComputedStyle(el);\n    if (style.boxSizing !== 'border-box') {\n      h.forEach((val) => this.headerColumnWidthDiff += Utils.toFloat(style[val as any]));\n      v.forEach((val) => this.headerColumnHeightDiff += Utils.toFloat(style[val as any]));\n    }\n    el.remove();\n\n    const r = Utils.createDomElement('div', { className: 'slick-row' }, this._canvas[0]);\n    el = Utils.createDomElement('div', { className: 'slick-cell', id: '', style: { visibility: 'hidden' }, textContent: '-' }, r);\n    style = getComputedStyle(el);\n    if (style.boxSizing !== 'border-box') {\n      h.forEach((val) => this.cellWidthDiff += Utils.toFloat(style[val as any]));\n      v.forEach((val) => this.cellHeightDiff += Utils.toFloat(style[val as any]));\n    }\n    r.remove();\n\n    this.absoluteColumnMinWidth = Math.max(this.headerColumnWidthDiff, this.cellWidthDiff);\n  }\n\n  /** Clear all highlight timers that might have been left opened */\n  protected clearAllTimers() {\n    window.clearTimeout(this._columnResizeTimer);\n    window.clearTimeout(this._executionBlockTimer);\n    window.clearTimeout(this._flashCellTimer);\n    window.clearTimeout(this._highlightRowTimer);\n    window.clearTimeout(this.h_editorLoader);\n  }\n\n  /** Logs a string to the console listing each column\u2019s width (or \u201CH\u201D if hidden) for debugging purposes. */\n  protected LogColWidths() {\n    let s = 'Col Widths:';\n    for (let i = 0; i < this.columns.length; i++) { s += ' ' + (this.columns[i].hidden ? 'H' : this.columns[i].width); }\n    console.log(s);\n  }\n\n  // compare 2 simple arrays (integers or strings only, do not use to compare object arrays)\n  simpleArrayEquals(arr1: any[], arr2: any[]) {\n    return Array.isArray(arr1) && Array.isArray(arr2) && arr2.sort().toString() !== arr1.sort().toString();\n  }\n\n  /**\n   * Converts a value to a string and escapes HTML characters (&, <, >). Returns an empty string if the value is not defined.\n   */\n  protected defaultFormatter(_row: number, _cell: number, value: any) {\n    if (!Utils.isDefined(value)) {\n      return '';\n    } else {\n      return (value + '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n    }\n  }\n\n  /** Returns false if the specified row or cell index is out of bounds or if the column is hidden; otherwise returns true. */\n  protected cellExists(row: number, cell: number) {\n    return !(row < 0 || row >= this.getDataLength() || cell < 0 || cell >= this.columns.length);\n  }\n\n  /** Reads the CSS class (of the form \u201Cl<number>\u201D) from the given cell DOM node to extract and return the column index. Throws an error if not found. */\n  protected getCellFromNode(cellNode: HTMLElement) {\n    // read column number from .l<columnNumber> CSS class\n    const cls = /l\\d+/.exec(cellNode.className);\n    if (!cls) {\n      throw new Error(`SlickGrid getCellFromNode: cannot get cell - ${cellNode.className}`);\n    }\n    return parseInt(cls[0].substr(1, cls[0].length - 1), 10);\n  }\n\n  /** Iterates through the rows cache to find which row\u2019s DOM element matches the given node and returns its row index; returns null if not found. */\n  protected getRowFromNode(rowNode: HTMLElement): number | null {\n    for (const row in this.rowsCache) {\n      if (this.rowsCache) {\n        for (const i in this.rowsCache[row].rowNode) {\n          if (this.rowsCache[row].rowNode?.[+i] === rowNode) {\n            return (row ? parseInt(row, 10) : 0);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  /** Clears the current text selection using IE\u2019s document.selection.empty (if available) or window.getSelection to remove all ranges. */\n  protected clearTextSelection() {\n    if ((document as any).selection?.empty) {\n      try {\n        // IE fails here if selected element is not in dom\n        (document as any).selection.empty();\n        // eslint-disable-next-line no-empty\n      } catch (e) { }\n    } else if (window.getSelection) {\n      const sel = window.getSelection();\n      if (sel?.removeAllRanges) {\n        sel.removeAllRanges();\n      }\n    }\n  }\n\n  /**\n   * For each provided element in target, sets the \u201Cunselectable\u201D attribute, disables Mozilla\u2019s user selection style,\n   * and binds a \u201Cselectstart\u201D event that always returns false, thus disabling text selection.\n   *\n   * @param target\n   */\n  protected disableSelection(target: HTMLElement[]) {\n    target.forEach((el) => {\n      el.setAttribute('unselectable', 'on');\n      (el.style as any).mozUserSelect = 'none';\n      this._bindingEventService.bind(el, 'selectstart', () => false);\n    });\n  }\n\n  /** Get the displayed scrollbar dimensions */\n  getPubSubService(): BasePubSub | undefined {\n    return this._pubSubService;\n  }\n\n  /**\n   * Returns row and cell indexes by providing x,y coordinates.\n   * Coordinates are relative to the top left corner of the grid beginning with the first row (not including the column headers).\n   * @param x An x coordinate.\n   * @param y A y coordinate.\n   */\n  getCellFromPoint(x: number, y: number) {\n    let row = this.getRowFromPosition(y);\n    let cell = 0;\n\n    let w = 0;\n    for (let i = 0; i < this.columns.length && w <= x; i++) {\n      if (!this.columns[i]) {\n        continue;\n      }\n      w += this.columns[i].width as number;\n      cell++;\n    }\n    cell -= 1;\n\n    // we'll return -1 when coordinate falls outside the grid canvas\n    if (row < -1) {\n      row = -1;\n    }\n\n    return { row, cell };\n  }\n\n  /** Get a Plugin (addon) by its name */\n  getPluginByName<P extends SlickPlugin | undefined = undefined>(name: string) {\n    for (let i = this.plugins.length - 1; i >= 0; i--) {\n      if (this.plugins[i]?.pluginName === name) {\n        return this.plugins[i] as P;\n      }\n    }\n    return undefined;\n  }\n\n  /** Get Grid Canvas Node DOM Element */\n  getContainerNode() {\n    return this._container;\n  }\n\n  /**\n   * Computes the height of a cell, taking into account row span if applicable.\n   *\n   * @param {number} row - The row index of the cell.\n   * @param {number} rowspan - The number of rows the cell spans.\n   * @returns {number} The computed cell height in pixels.\n   */\n  getCellHeight(row: number, rowspan: number) {\n    let cellHeight = this._options.rowHeight || 0;\n    if (rowspan > 1) {\n      const rowSpanBottomIdx = row + rowspan - 1;\n      cellHeight = this.getRowBottom(rowSpanBottomIdx) - this.getRowTop(row);\n    } else {\n      const rowHeight = this.getRowHeight();\n      if (rowHeight !== cellHeight - this.cellHeightDiff) {\n        cellHeight = rowHeight;\n      }\n    }\n    cellHeight -= this.cellHeightDiff;\n    return Math.ceil(cellHeight);\n  }\n\n  /**\n   * Computes the difference between two sets, returning elements that exist in `a` but not in `b`.\n   * This serves as a polyfill for `Set.prototype.difference()` introduced in ES2024.\n   *\n   * @param {Set<number>} a - The base set from which elements will be removed.\n   * @param {Set<number>} b - The set containing elements to be excluded from `a`.\n   * @returns {Set<number>} A new set containing elements present in `a` but not in `b`.\n   */\n  protected setDifference(a: Set<number>, b: Set<number>): Set<number> {\n    return new Set(Array.from(a).filter((item) => !b.has(item)));\n  }\n\n  /**\n   * Returns an object representing information about a cell's position. All coordinates are absolute and take into consideration the visibility and scrolling position of all ancestors.\n   * @param {Number} row - A row number.\n   * @param {Number} cell - A column number.\n   */\n  getCellNodeBox(row: number, cell: number) {\n    if (!this.cellExists(row, cell)) {\n      return null;\n    }\n\n    const frozenRowOffset = this.getFrozenRowOffset(row);\n\n    const y1 = this.getRowTop(row) - frozenRowOffset;\n    const y2 = y1 + this._options.rowHeight! - 1;\n    let x1 = 0;\n    for (let i = 0; i < cell; i++) {\n      if (!this.columns[i] || this.columns[i].hidden) { continue; }\n\n      x1 += (this.columns[i].width || 0);\n\n      if (this._options.frozenColumn === i) {\n        x1 = 0;\n      }\n    }\n    const x2 = x1 + (this.columns[cell]?.width || 0);\n\n    return {\n      top: y1,\n      left: x1,\n      bottom: y2,\n      right: x2,\n    };\n  }\n\n  /**\n   * Computes the absolute position of an element relative to the document,\n   * taking into account offsets, scrolling, and visibility within scrollable containers.\n   *\n   * @param {HTMLElement} elem - The element to compute the absolute position for.\n   * @returns {Object} An object containing:\n   *   - `top`: The top position relative to the document.\n   *   - `left`: The left position relative to the document.\n   *   - `bottom`: The bottom position relative to the document.\n   *   - `right`: The right position relative to the document.\n   *   - `width`: The width of the element.\n   *   - `height`: The height of the element.\n   *   - `visible`: A boolean indicating whether the element is visible within its scrollable container.\n   *     This accounts for both vertical (`overflowY`) and horizontal (`overflowX`) visibility.\n   */\n  protected absBox(elem: HTMLElement) {\n    const box = {\n      top: elem.offsetTop,\n      left: elem.offsetLeft,\n      bottom: 0,\n      right: 0,\n      width: elem.offsetWidth,\n      height: elem.offsetWidth,\n      visible: true\n    };\n    box.bottom = box.top + box.height;\n    box.right = box.left + box.width;\n\n    // walk up the tree\n    let offsetParent = elem.offsetParent;\n    while ((elem = elem.parentNode as HTMLElement) !== document.body) {\n      if (!elem || !elem.parentNode) {\n        break;\n      }\n\n      const styles = getComputedStyle(elem);\n      if (box.visible && elem.scrollHeight !== elem.offsetHeight && styles['overflowY'] !== 'visible') {\n        box.visible = box.bottom > elem.scrollTop && box.top < elem.scrollTop + elem.clientHeight;\n      }\n\n      if (box.visible && elem.scrollWidth !== elem.offsetWidth && styles['overflowX'] !== 'visible') {\n        box.visible = box.right > elem.scrollLeft && box.left < elem.scrollLeft + elem.clientWidth;\n      }\n\n      box.left -= elem.scrollLeft;\n      box.top -= elem.scrollTop;\n\n      if (elem === offsetParent) {\n        box.left += elem.offsetLeft;\n        box.top += elem.offsetTop;\n        offsetParent = elem.offsetParent;\n      }\n\n      box.bottom = box.top + box.height;\n      box.right = box.left + box.width;\n    }\n\n    return box;\n  }\n\n  /** Returns an object representing information about the active cell's position. All coordinates are absolute and take into consideration the visibility and scrolling position of all ancestors. */\n  getActiveCellPosition() {\n    return this.absBox(this.activeCellNode as HTMLElement);\n  }\n\n  /** Get the Grid Position */\n  getGridPosition() {\n    return this.absBox(this._container);\n  }\n\n  /** Returns the active cell editor. If there is no actively edited cell, null is returned.   */\n  getCellEditor() {\n    return this.currentEditor;\n  }\n\n  /**\n   * Returns an object representing the coordinates of the currently active cell:\n   * @example\t`{ row: activeRow, cell: activeCell }`\n   */\n  getActiveCell() {\n    if (!this.activeCellNode) {\n      return null;\n    }\n    return { row: this.activeRow, cell: this.activeCell };\n  }\n\n  /** Returns the DOM element containing the currently active cell. If no cell is active, null is returned. */\n  getActiveCellNode() {\n    return this.activeCellNode;\n  }\n\n  // This get/set methods are used for keeping text-selection. These don't consider IE because they don't loose text-selection.\n  // Fix for firefox selection. See https://github.com/mleibman/SlickGrid/pull/746/files\n  protected getTextSelection() {\n    let textSelection: Range | null = null;\n    if (window.getSelection) {\n      const selection = window.getSelection();\n      if ((selection?.rangeCount ?? 0) > 0) {\n        textSelection = selection!.getRangeAt(0);\n      }\n    }\n    return textSelection;\n  }\n\n  /**\n   * Sets the text selection to the specified range within the document.\n   * Clears any existing selections before applying the new range.\n   *\n   * @param {Range} selection - The text range to be selected.\n   */\n  protected setTextSelection(selection: Range) {\n    if (window.getSelection && selection) {\n      const target = window.getSelection();\n      if (target) {\n        target.removeAllRanges();\n        target.addRange(selection);\n      }\n    }\n  }\n\n  /** html sanitizer to avoid scripting attack */\n  sanitizeHtmlString(dirtyHtml: string, suppressLogging?: boolean) {\n    if (!this._options.sanitizer || typeof dirtyHtml !== 'string') {\n      return dirtyHtml;\n    }\n\n    const cleanHtml = this._options.sanitizer(dirtyHtml);\n\n    if (!suppressLogging && this._options.logSanitizedHtml && this.logMessageCount <= this.logMessageMaxCount && cleanHtml !== dirtyHtml) {\n      console.log(`sanitizer altered html: ${dirtyHtml} --> ${cleanHtml}`);\n      if (this.logMessageCount === this.logMessageMaxCount) {\n        console.log(`sanitizer: silencing messages after first ${this.logMessageMaxCount}`);\n      }\n      this.logMessageCount++;\n    }\n    return cleanHtml;\n  }\n\n  ///////////////////////////////////////////////////////////////\n  // End Shared Utilities and Accessors\n  ///////////////////////////////////////////////////////////////\n\n\n  ///////////////////////////////////////////////////////////////\n  // Navigation Helpers\n  ///////////////////////////////////////////////////////////////\n\n  /**\n   * Retrieves the rowspan value for a specific cell in a row.\n   *\n   * @param {number} row - The row index.\n   * @param {number} cell - The column index.\n   * @returns {number} The number of rows the cell spans.\n   */\n  protected getRowspan(row: number, cell: number) {\n    let rowspan = 1;\n    const metadata = this.getItemMetadaWhenExists(row);\n    if (metadata?.columns) {\n      Object.keys(metadata.columns).forEach(col => {\n        const colIdx = Number(col);\n        if (colIdx === cell) {\n          const columnMeta = metadata.columns![colIdx];\n          rowspan = Number(columnMeta?.rowspan || 1);\n        }\n      });\n    }\n    return rowspan;\n  }\n\n  /**\n   * Finds the nearest focusable row in the specified direction.\n   *\n   * @param {number} row - The current row index.\n   * @param {number} cell - The column index.\n   * @param {'up' | 'down'} dir - The direction to search for a focusable row.\n   * @returns {number} The index of the focusable row.\n   */\n  protected findFocusableRow(row: number, cell: number, dir: 'up' | 'down') {\n    let r = row;\n    const rowRange = this._colsWithRowSpanCache[cell] || new Set<string>();\n    let found = false;\n\n    Array.from(rowRange).forEach((rrange) => {\n      const [start, end] = rrange.split(':').map(Number);\n      if (!found && row >= start && row <= end) {\n        r = dir === 'up' ? start : end;\n        if (this.canCellBeActive(r, cell)) {\n          found = true;\n        }\n      }\n    });\n    if (r < 0) {\n      r = 0;\n    }\n\n    return r;\n  }\n\n  /**\n   * Finds the first focusable cell in a given row.\n   *\n   * @param {number} row - The row index.\n   * @returns {{ cell: number; row: number; }} The first focusable cell and its row.\n   */\n  protected findFirstFocusableCell(row: number): { cell: number; row: number; } {\n    let cell = 0;\n    let focusableRow = row;\n    let ff = -1;\n\n    while (cell < this.columns.length) {\n      const prs = this.getParentRowSpanByCell(row, cell);\n      focusableRow = (prs !== null && prs.start !== row) ? prs.start : row;\n      if (this.canCellBeActive(focusableRow, cell)) {\n        ff = cell;\n        break;\n      }\n      cell += this.getColspan(focusableRow, cell);\n    }\n    return { cell: ff, row: focusableRow };\n  }\n\n  /**\n   * Finds the last focusable cell in a given row.\n   *\n   * @param {number} row - The row index.\n   * @returns {{ cell: number; row: number; }} The last focusable cell and its row.\n   */\n  protected findLastFocusableCell(row: number): { cell: number; row: number; } {\n    let cell = 0;\n    let focusableRow = row;\n    let lf = -1;\n\n    while (cell < this.columns.length) {\n      const prs = this.getParentRowSpanByCell(row, cell);\n      focusableRow = (prs !== null && prs.start !== row) ? prs.start : row;\n      if (this.canCellBeActive(focusableRow, cell)) {\n        lf = cell;\n      }\n      cell += this.getColspan(focusableRow, cell);\n    }\n\n    return { cell: lf, row: focusableRow };\n  }\n\n  /**\n   * Converts an array of row indices into a range format.\n   *\n   * @param {number[]} rows - The row indices.\n   * @returns {SlickRange_[]} An array of ranges covering the specified rows.\n   */\n  protected rowsToRanges(rows: number[]) {\n    const ranges: SlickRange_[] = [];\n    const lastCell = this.columns.length - 1;\n    for (let i = 0; i < rows.length; i++) {\n      ranges.push(new SlickRange(rows[i], 0, rows[i], lastCell));\n    }\n    return ranges;\n  }\n\n  /**\n   * From any row/cell indexes that might have colspan/rowspan, find its starting indexes\n   * For example, if we start at 0,0 and we have colspan/rowspan of 4 for both and our indexes is row:2,cell:3\n   * then our starting row/cell is 0,0. If a cell has no spanning at all then row/cell output is same as input\n   *\n   * @param {number} row - The row index.\n   * @param {number} cell - The column index.\n   * @returns {{ cell: number; row: number; }} The starting cell position.\n   */\n  findSpanStartingCell(row: number, cell: number) {\n    const prs = this.getParentRowSpanByCell(row, cell);\n    const focusableRow = (prs !== null && prs.start !== row) ? prs.start : row;\n    let fc = 0;\n    let prevCell = 0;\n\n    while (fc < this.columns.length) {\n      fc += this.getColspan(focusableRow, fc);\n      if (fc > cell) {\n        fc = prevCell;\n        return { cell: fc, row: focusableRow };\n      }\n      prevCell = fc;\n    }\n\n    return { cell: fc, row: focusableRow };\n  }\n\n  /**\n   * Moves the focus to the right within the grid.\n   *\n   * @param {number} _row - The row index.\n   * @param {number} cell - The column index.\n   * @param {number} posY - The current vertical position.\n   * @param {number} [_posX] - The current horizontal position.\n   * @returns {CellPosition | null} The new cell position, or null if not found.\n   */\n  protected gotoRight(_row: number, cell: number, posY: number, _posX?: number) {\n    if (cell >= this.columns.length) {\n      return null;\n    }\n    let fc = cell + 1;\n    let fr = posY;\n\n    do {\n      const sc = this.findSpanStartingCell(posY, fc);\n      fr = sc.row;\n      fc = sc.cell;\n      if (this.canCellBeActive(fr, fc) && fc > cell) {\n        break;\n      }\n      fc += this.getColspan(fr, sc.cell);\n    } while (fc < this.columns.length);\n\n    if (fc < this.columns.length) {\n      return {\n        row: fr,\n        cell: fc,\n        posX: fc,\n        posY,\n      };\n    }\n    return null;\n  }\n\n  /**\n   * Moves the focus to the left within the grid.\n   *\n   * @param {number} row - The row index.\n   * @param {number} cell - The column index.\n   * @param {number} posY - The current vertical position.\n   * @param {number} [_posX] - The current horizontal position.\n   * @returns {CellPosition | null} The new cell position, or null if not found.\n   */\n  protected gotoLeft(row: number, cell: number, posY: number, _posX?: number) {\n    if (cell <= 0) {\n      return null;\n    }\n\n    const ff = this.findFirstFocusableCell(row);\n    if (ff.cell === null || ff.cell >= cell) {\n      return null;\n    }\n\n    let pos: CellPosition | null;\n    let prev = {\n      row,\n      cell: ff.cell,\n      posX: ff.cell,\n      posY,\n    };\n\n    while (true) {\n      pos = this.gotoRight(prev.row, prev.cell, prev.posY, prev.posX);\n      if (!pos) {\n        return null;\n      }\n      if (pos.cell >= cell) {\n        // when right cell is within a rowspan, we need to use original row (posY)\n        const nextRow = this.findFocusableRow(posY, prev.cell, 'up');\n        if (nextRow !== prev.row) {\n          prev.row = nextRow;\n        }\n        return prev;\n      }\n      prev = pos;\n    }\n  }\n\n  /**\n   * Moves the focus downward within the grid.\n   *\n   * @param {number} row - The row index.\n   * @param {number} cell - The column index.\n   * @param {number} _posY - The current vertical position.\n   * @param {number} posX - The current horizontal position.\n   * @returns {CellPosition | null} The new cell position, or null if not found.\n   */\n  protected gotoDown(row: number, cell: number, _posY: number, posX: number) {\n    let prevCell;\n    const ub = this.getDataLengthIncludingAddNew();\n    do {\n      row += this.getRowspan(row, posX);\n      prevCell = cell = 0;\n      while (cell <= posX) {\n        prevCell = cell;\n        cell += this.getColspan(row, cell);\n      }\n    }\n    while (row <= ub && !this.canCellBeActive(row, prevCell));\n\n    if (row <= ub) {\n      return {\n        row,\n        cell: prevCell,\n        posX,\n        posY: row,\n      };\n    }\n    return null;\n  }\n\n  /**\n   * Moves the focus upward within the grid.\n   *\n   * @param {number} row - The row index.\n   * @param {number} cell - The column index.\n   * @param {number} _posY - The current vertical position.\n   * @param {number} posX - The current horizontal position.\n   * @returns {CellPosition | null} The new cell position, or null if not found.\n   */\n  protected gotoUp(row: number, cell: number, _posY: number, posX: number) {\n    let prevCell;\n    if (row <= 0) {\n      return null;\n    }\n    do {\n      row = this.findFocusableRow(row - 1, posX, 'up');\n      prevCell = cell = 0;\n      while (cell <= posX) {\n        prevCell = cell;\n        cell += this.getColspan(row, cell);\n      }\n    }\n    while (row >= 0 && !this.canCellBeActive(row, prevCell));\n\n    if (cell <= this.columns.length) {\n      return {\n        row,\n        cell: prevCell,\n        posX,\n        posY: row,\n      };\n    }\n    return null;\n  }\n\n  /**\n   * Moves the focus to the next cell in the grid.\n   *\n   * @param {number} row - The row index.\n   * @param {number} cell - The column index.\n   * @param {number} posY - The current vertical position.\n   * @param {number} posX - The current horizontal position.\n   * @returns {CellPosition | null} The new cell position, or null if not found.\n   */\n  protected gotoNext(row: number, cell: number, posY: number, posX: number) {\n    if (!Utils.isDefined(row) && !Utils.isDefined(cell)) {\n      row = cell = posY = posX = 0;\n      if (this.canCellBeActive(row, cell)) {\n        return {\n          row,\n          cell,\n          posX: cell,\n          posY,\n        };\n      }\n    }\n\n    let pos = this.gotoRight(row, cell, posY, posX);\n    if (!pos) {\n      let ff;\n      while (!pos && ++posY < this.getDataLength() + (this._options.enableAddRow ? 1 : 0)) {\n        ff = this.findFirstFocusableCell(posY);\n        if (ff.cell !== null) {\n          row = this.getParentRowSpanByCell(posY, ff.cell)?.start ?? posY;\n          pos = {\n            row,\n            cell: ff.cell,\n            posX: ff.cell,\n            posY,\n          };\n        }\n      }\n    }\n    return pos;\n  }\n\n  /**\n   * Moves the focus to the previous cell in the grid.\n   *\n   * @param {number} row - The row index.\n   * @param {number} cell - The column index.\n   * @param {number} posY - The current vertical position.\n   * @param {number} posX - The current horizontal position.\n   * @returns {CellPosition | null} The new cell position, or null if not found.\n   */\n  protected gotoPrev(row: number, cell: number, posY: number, posX: number) {\n    if (!Utils.isDefined(row) && !Utils.isDefined(cell)) {\n      row = posY = this.getDataLengthIncludingAddNew() - 1;\n      cell = posX = this.columns.length - 1;\n      if (this.canCellBeActive(row, cell)) {\n        return {\n          row,\n          cell,\n          posX: cell,\n          posY,\n        };\n      }\n    }\n\n    let pos = this.gotoLeft(row, cell, posY, posX);\n    if (!pos) {\n      let lf;\n      while (!pos && --posY >= 0) {\n        lf = this.findLastFocusableCell(posY);\n        if (lf.cell > -1) {\n          row = this.getParentRowSpanByCell(posY, lf.cell)?.start ?? posY;\n          pos = {\n            row,\n            cell: lf.cell,\n            posX: lf.cell,\n            posY,\n          };\n        }\n      }\n    }\n    return pos;\n  }\n\n  /**\n   * Moves the focus to the first focusable cell in a row.\n   *\n   * @param {number} row - The row index.\n   * @param {number} _cell - The column index (ignored).\n   * @param {number} _posY - The current vertical position (ignored).\n   * @param {number} _posX - The current horizontal position (ignored).\n   * @returns {CellPosition | null} The new cell position, or null if not found.\n   */\n  protected gotoRowStart(row: number, _cell: number, _posY: number, _posX: number) {\n    const ff = this.findFirstFocusableCell(row);\n    if (ff.cell === null) { return null; }\n\n    return {\n      row: ff.row,\n      cell: ff.cell,\n      posX: ff.cell,\n      posY: row,\n    };\n  }\n\n  /**\n   * Moves the focus to the last focusable cell in a row.\n   *\n   * @param {number} row - The row index.\n   * @param {number} _cell - The column index (ignored).\n   * @param {number} _posY - The current vertical position (ignored).\n   * @param {number} _posX - The current horizontal position (ignored).\n   * @returns {CellPosition | null} The new cell position, or null if not found.\n   */\n  protected gotoRowEnd(row: number, _cell: number, _posY: number, _posX: number) {\n    const lf = this.findLastFocusableCell(row);\n    if (lf.cell === -1) { return null; }\n\n    return {\n      row: lf.row,\n      cell: lf.cell,\n      posX: lf.cell,\n      posY: row\n    };\n  }\n\n  /** Switches the active cell one cell right skipping unselectable cells. Unline navigateNext, navigateRight stops at the last cell of the row. Returns a boolean saying whether it was able to complete or not. */\n  navigateRight() {\n    return this.navigate('right');\n  }\n\n  /** Switches the active cell one cell left skipping unselectable cells. Unline navigatePrev, navigateLeft stops at the first cell of the row. Returns a boolean saying whether it was able to complete or not. */\n  navigateLeft() {\n    return this.navigate('left');\n  }\n\n  /** Switches the active cell one row down skipping unselectable cells. Returns a boolean saying whether it was able to complete or not. */\n  navigateDown() {\n    return this.navigate('down');\n  }\n\n  /** Switches the active cell one row up skipping unselectable cells. Returns a boolean saying whether it was able to complete or not. */\n  navigateUp() {\n    return this.navigate('up');\n  }\n\n  /** Tabs over active cell to the next selectable cell. Returns a boolean saying whether it was able to complete or not. */\n  navigateNext() {\n    return this.navigate('next');\n  }\n\n  /** Tabs over active cell to the previous selectable cell. Returns a boolean saying whether it was able to complete or not. */\n  navigatePrev() {\n    return this.navigate('prev');\n  }\n\n  /** Navigate to the start row in the grid */\n  navigateRowStart() {\n    return this.navigate('home');\n  }\n\n  /** Navigate to the end row in the grid */\n  navigateRowEnd() {\n    return this.navigate('end');\n  }\n\n  /** Navigate to coordinate 0,0 (top left home) */\n  navigateTopStart(): boolean | undefined {\n    this.navigateToRow(0);\n    return this.navigate('home');\n  }\n\n  /** Navigate to bottom row end (bottom right end) */\n  navigateBottomEnd(): boolean | undefined {\n    this.navigateBottom();\n    return this.navigate('end');\n  }\n\n  /**\n   * @param {string} dir Navigation direction.\n   * @return {boolean} Whether navigation resulted in a change of active cell.\n   */\n  protected navigate(dir: 'up' | 'down' | 'left' | 'right' | 'prev' | 'next' | 'home' | 'end') {\n    if (!this._options.enableCellNavigation) {\n      return false;\n    }\n\n    if (!this.activeCellNode && dir !== 'prev' && dir !== 'next') {\n      return false;\n    }\n\n    if (!this.getEditorLock()?.commitCurrentEdit()) {\n      return true;\n    }\n    this.setFocus();\n    this.unsetActiveCell();\n\n    const tabbingDirections = {\n      'up': -1,\n      'down': 1,\n      'left': -1,\n      'right': 1,\n      'prev': -1,\n      'next': 1,\n      'home': -1,\n      'end': 1\n    };\n    this.tabbingDirection = tabbingDirections[dir];\n\n    const stepFunctions = {\n      'up': this.gotoUp,\n      'down': this.gotoDown,\n      'left': this.gotoLeft,\n      'right': this.gotoRight,\n      'prev': this.gotoPrev,\n      'next': this.gotoNext,\n      'home': this.gotoRowStart,\n      'end': this.gotoRowEnd\n    };\n    const stepFn = stepFunctions[dir];\n    const pos = stepFn.call(this, this.activeRow, this.activeCell, this.activePosY, this.activePosX);\n    return this.navigateToPos(pos);\n  }\n\n  /**\n   * Navigates to a specified cell position within the grid.\n   * Ensures the cell is visible, sets it as active, and updates position tracking.\n   *\n   * @param {CellPosition | null} pos - The target cell position.\n   * @returns {boolean} Whether navigation was successful.\n   */\n  protected navigateToPos(pos: CellPosition | null) {\n    if (pos) {\n      if (this.hasFrozenRows && this._options.frozenBottom && pos.row === this.getDataLength()) {\n        return;\n      }\n\n      const isAddNewRow = (pos.row === this.getDataLength());\n\n      if ((!this._options.frozenBottom && pos.row >= this.actualFrozenRow)\n        || (this._options.frozenBottom && pos.row < this.actualFrozenRow)\n      ) {\n        this.scrollCellIntoView(pos.row, pos.cell, !isAddNewRow && this._options.emulatePagingWhenScrolling);\n      }\n      this.setActiveCellInternal(this.getCellNode(pos.row, pos.cell));\n      this.activePosX = pos.posX;\n      this.activePosY = pos.posY;\n      return true;\n    } else {\n      this.setActiveCellInternal(this.getCellNode(this.activeRow, this.activeCell));\n      return false;\n    }\n  }\n\n  /**\n   * Returns a DOM element containing a cell at a given row and cell.\n   * @param row A row index.\n   * @param cell A column index.\n   * @returns {HTMLDivElement | null} The cell's DOM element, or null if not found.\n   */\n  getCellNode(row: number, cell: number): HTMLDivElement | null {\n    if (this.rowsCache[row]) {\n      this.ensureCellNodesInRowsCache(row);\n      try {\n        if (this.rowsCache[row].cellNodesByColumnIdx.length > cell) {\n          return this.rowsCache[row].cellNodesByColumnIdx[cell] as HTMLDivElement | null;\n        }\n        else {\n          return null;\n        }\n      } catch (e) {\n        return this.rowsCache[row].cellNodesByColumnIdx[cell] as HTMLDivElement | null;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Sets an active cell.\n   * @param {number} row - A row index.\n   * @param {number} cell - A column index.\n   * @param {boolean} [optionEditMode] Option Edit Mode is Auto-Edit?\n   * @param {boolean} [preClickModeOn] Pre-Click Mode is Enabled?\n   * @param {boolean} [suppressActiveCellChangedEvent] Are we suppressing Active Cell Changed Event (defaults to false)\n   */\n  setActiveCell(row: number, cell: number, opt_editMode?: boolean, preClickModeOn?: boolean, suppressActiveCellChangedEvent?: boolean) {\n    if (!this.initialized) { return; }\n    if (row > this.getDataLength() || row < 0 || cell >= this.columns.length || cell < 0) {\n      return;\n    }\n\n    if (!this._options.enableCellNavigation) {\n      return;\n    }\n\n    this.scrollCellIntoView(row, cell, false);\n    this.setActiveCellInternal(this.getCellNode(row, cell), opt_editMode, preClickModeOn, suppressActiveCellChangedEvent);\n  }\n\n  /**\n   * Sets an active cell.\n   * @param {number} row - A row index.\n   * @param {number} cell - A column index.\n   * @param {boolean} [suppressScrollIntoView] - optionally suppress the ScrollIntoView that happens by default (defaults to false)\n   */\n  setActiveRow(row: number, cell?: number, suppressScrollIntoView?: boolean) {\n    if (!this.initialized) { return; }\n    if (row > this.getDataLength() || row < 0 || (cell ?? 0) >= this.columns.length || (cell ?? 0) < 0) {\n      return;\n    }\n\n    this.activeRow = row;\n    if (!suppressScrollIntoView) {\n      this.scrollCellIntoView(row, cell || 0, false);\n    }\n  }\n\n  /**\n   * Returns true if you can click on a given cell and make it the active focus.\n   * @param {number} row A row index.\n   * @param {number} col A column index.\n   */\n  canCellBeActive(row: number, cell: number) {\n    if (!this._options.enableCellNavigation || row >= this.getDataLengthIncludingAddNew() ||\n      row < 0 || cell >= this.columns.length || cell < 0) {\n      return false;\n    }\n\n    if (!this.columns[cell] || this.columns[cell].hidden) {\n      return false;\n    }\n\n    // cell not found in rows that are spanned (rowspan of 1 or more) are invalid\n    // i.e.: if the 5th cell has rowspan that reaches the end of the grid, then the last cell that can be active is 5 (anything above 5 on same column is invalid)\n    const spanRow = this.getParentRowSpanByCell(row, cell)?.start ?? row;\n    if (spanRow !== row) {\n      return false;\n    }\n\n    const rowMetadata = this.getItemMetadaWhenExists(row);\n    if (rowMetadata?.focusable !== undefined) {\n      return !!rowMetadata.focusable;\n    }\n\n    const columnMetadata = rowMetadata?.columns;\n    if (columnMetadata?.[this.columns[cell].id]?.focusable !== undefined) {\n      return !!columnMetadata[this.columns[cell].id].focusable;\n    }\n    if (columnMetadata?.[cell]?.focusable !== undefined) {\n      return !!columnMetadata[cell].focusable;\n    }\n\n    return !!(this.columns[cell].focusable);\n  }\n\n  /**\n   * Returns true if selecting the row causes this particular cell to have the selectedCellCssClass applied to it. A cell can be selected if it exists and if it isn't on an empty / \"Add New\" row and if it is not marked as \"unselectable\" in the column definition.\n   * @param {number} row A row index.\n   * @param {number} col A column index.\n   */\n  canCellBeSelected(row: number, cell: number) {\n    if (row >= this.getDataLength() || row < 0 || cell >= this.columns.length || cell < 0) {\n      return false;\n    }\n\n    if (!this.columns[cell] || this.columns[cell].hidden) {\n      return false;\n    }\n\n    const rowMetadata = this.getItemMetadaWhenExists(row);\n    if (rowMetadata?.selectable !== undefined) {\n      return !!rowMetadata.selectable;\n    }\n\n    const columnMetadata = rowMetadata?.columns && (rowMetadata.columns[this.columns[cell].id] || rowMetadata.columns[cell]);\n    if (columnMetadata?.selectable !== undefined) {\n      return !!columnMetadata.selectable;\n    }\n\n    return !!this.columns[cell].selectable;\n  }\n\n  /**\n   * Accepts a row integer and a cell integer, scrolling the view to the row where row is its row index, and cell is its cell index. Optionally accepts a forceEdit boolean which, if true, will attempt to initiate the edit dialogue for the field in the specified cell.\n   * Unlike setActiveCell, this scrolls the row into the viewport and sets the keyboard focus.\n   * @param {Number} row A row index.\n   * @param {Number} cell A column index.\n   * @param {Boolean} [forceEdit] If true, will attempt to initiate the edit dialogue for the field in the specified cell.\n   */\n  gotoCell(row: number, cell: number, forceEdit?: boolean, e?: Event | SlickEvent_) {\n    if (!this.initialized) { return; }\n    if (!this.canCellBeActive(row, cell)) {\n      return;\n    }\n\n    if (!this.getEditorLock()?.commitCurrentEdit()) {\n      return;\n    }\n\n    this.scrollCellIntoView(row, cell, false);\n\n    const newCell = this.getCellNode(row, cell);\n\n    // if selecting the 'add new' row, start editing right away\n    const column = this.columns[cell];\n    const suppressActiveCellChangedEvent = !!(this._options.editable && column?.editor && this._options.suppressActiveCellChangeOnEdit);\n    this.setActiveCellInternal(newCell, (forceEdit || (row === this.getDataLength()) || this._options.autoEdit), null, suppressActiveCellChangedEvent, e);\n\n    // if no editor was created, set the focus back on the grid\n    if (!this.currentEditor) {\n      this.setFocus();\n    }\n  }\n  /////////////////////////////////////////////////////////////////////////////////\n  // End Shared Utilities and Navigation Helpers\n  ///////////////////////////////////////////////////////////////////////////////\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(Slick, {\n    Grid: SlickGrid,\n  });\n}"],
  "mappings": ";;;;;;;AAkGA,MAAM,sBAAkC,MAAM,qBACxC,kBAA8B,MAAM,iBACpC,aAAyB,MAAM,OAC/B,iBAA6B,MAAM,WACnC,mBAA+B,MAAM,kBACrC,uBAAmC,MAAM,sBACzC,UAAsB,MAAM,SAC5B,oBAAgC,MAAM,mBACtC,aAAyB,MAAM,OAC/B,mBAA+B,MAAM,kBACrC,oBAAgC,MAAM,mBACtC,kBAA8B,MAAM,iBACpC,QAAoB,MAAM,OAC1B,gBAA4B,MAAM,eAClC,YAAwB,MAAM,WAC9B,aAAyB,MAAM,YAC/B,YAAwB,MAAM,WAC9B,mBAA+B,MAAM;AA8BpC,MAAM,YAAN,MAAuH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAwZ5H,YAA+B,WAA2C,MAAiD,SAAc,SAAwC,gBAA6B;AAA/K;AAA2C;AAAiD;AAAsD;AArZjL;AAAA;AAAA,8CAAmB;AAGnB;AAAA,iCAAM;AAGN;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAAA;AAAA,0BAAU;AACV,0BAAU;AAEV;AAAA,0BAAU,UAAmC;AAC7C,0BAAU,kBAAkD;AAG5D;AAAA,0BAAU;AACV,0BAAU,aAA4B;AAAA,QACpC,0BAA0B;AAAA,QAC1B,6BAA6B;AAAA,QAC7B,wBAAwB;AAAA,QACxB,WAAW;AAAA,QACX,oBAAoB;AAAA,QACpB,qBAAqB;AAAA,QACrB,cAAc;AAAA,QACd,sBAAsB;AAAA,QACtB,UAAU;AAAA,QACV,UAAU;AAAA,QACV,gBAAgB;AAAA,QAChB,gBAAgB;AAAA,QAChB,gCAAgC;AAAA,QAChC,sBAAsB;AAAA,QACtB,qBAAqB;AAAA,QACrB,2BAA2B;AAAA,QAC3B,oBAAoB;AAAA,QACpB,sBAAsB;AAAA,QACtB,iBAAiB;AAAA,QACjB,uBAAuB;AAAA,QACvB,sBAAsB;AAAA,QACtB,8BAA8B;AAAA,QAC9B,6BAA6B;AAAA,QAC7B,MAAM;AAAA,QACN,OAAO;AAAA,QACP,YAAY;AAAA,QACZ,kBAAkB;AAAA,QAClB,eAAe;AAAA,QACf,iBAAiB;AAAA,QACjB,iBAAiB;AAAA,QACjB,eAAe;AAAA,QACf,iBAAiB;AAAA,QACjB,sBAAsB;AAAA,QACtB,sBAAsB;AAAA,QACtB,oBAAoB;AAAA,QACpB,oBAAoB;AAAA,QACpB,sBAAsB;AAAA,QACtB,cAAc;AAAA,QACd,gBAAgB;AAAA,QAChB,qBAAqB;AAAA;AAAA,QACrB,sBAAsB;AAAA,QACtB,qBAAqB;AAAA;AAAA,QACrB,kBAAkB;AAAA,QAClB,eAAe;AAAA,QACf,sBAAsB;AAAA,QACtB,sBAAsB;AAAA,QACtB,sBAAsB;AAAA,QACtB,sBAAsB;AAAA,QACtB,aAAa;AAAA,QACb,mBAAmB;AAAA,QACnB,4BAA4B;AAAA,QAC5B,8BAA8B;AAAA,QAC9B,cAAc;AAAA,QACd,cAAc;AAAA,QACd,WAAW;AAAA,QACX,6BAA6B;AAAA,QAC7B,+BAA+B;AAAA,QAC/B,eAAe;AAAA,QACf,iBAAiB;AAAA,QACjB,yBAAyB;AAAA,QACzB,yBAAyB;AAAA,QACzB,6BAA6B;AAAA,QAC7B,kBAAkB,KAAK;AAAA,QACvB,oBAAoB;AAAA,QACpB,mBAAmB;AAAA,QACnB,gCAAgC;AAAA,QAChC,qBAAqB,CAAC,WAAW,SAAS;AAAA,QAC1C,mBAAmB;AAAA,QACnB,eAAe;AAAA,QACf,cAAc;AAAA,QACd,4BAA4B;AAAA;AAAA,QAC5B,uBAAuB;AAAA,QACvB,+BAA+B;AAAA,QAC/B,UAAU;AAAA,QACV,kBAAkB,qBAAqB;AAAA,QACvC,sBAAsB;AAAA,QACtB,wBAAwB;AAAA,QACxB,wBAAwB;AAAA,QACxB,8BAA8B;AAAA,QAC9B,wCAAwC;AAAA,QACxC,oBAAoB;AAAA,QACpB,oBAAoB;AAAA,QACpB,gCAAgC;AAAA,QAChC,yBAAyB;AAAA,QACzB,uBAAuB;AAAA,QACvB,wBAAwB;AAAA,QACxB,WAAW;AAAA;AAAA,QACX,kBAAkB;AAAA;AAAA,QAClB,eAAe;AAAA,QACf,YAAY;AAAA,MACd;AAEA,0BAAU,mBAAkB;AAAA,QAC1B,MAAM;AAAA,QACN,gBAAgB;AAAA,QAChB,gBAAgB;AAAA,QAChB,WAAW;AAAA,QACX,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,UAAU;AAAA,QACV,kBAAkB;AAAA,QAClB,aAAa;AAAA,QACb,WAAW;AAAA,QACX,UAAU;AAAA,QACV,YAAY;AAAA,MACd;AAEA,0BAAU,2BAAoC;AAAA,QAC5C,kBAAkB;AAAA,QAClB,eAAe;AAAA,QACf,kBAAkB;AAAA,QAClB,mBAAmB;AAAA,QACnB,cAAc,gBAAgB;AAAA,QAC9B,wBAAwB;AAAA,QACxB,kBAAkB,iBAAiB;AAAA,QACnC,mBAAmB;AAAA,QACnB,iBAAiB,gBAAgB;AAAA,QACjC,eAAe,cAAc;AAAA,QAC7B,iBAAiB;AAAA,QACjB,SAAS;AAAA,QACT,eAAe;AAAA,QACf,eAAe;AAAA,QACf,eAAe;AAAA,MACjB;AAEA,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AAGV;AAAA,0BAAU;AACV;AAAA,0BAAU;AACV;AAAA,0BAAU;AACV;AAAA,0BAAU;AACV;AAAA,0BAAU;AAEV;AAAA,0BAAU,QAAO;AACjB;AAAA,0BAAU,UAAS;AACnB;AAAA,0BAAU,cAAa;AACvB,0BAAU,wBAAuB,IAAI,oBAAoB;AACzD,0BAAU,eAAc;AACxB,0BAAU;AACV,0BAAU,OAAM,aAAa,KAAK,MAAM,MAAU,KAAK,OAAO,CAAC,CAAC;AAChE,0BAAU,iBAAgB,IAAI,iBAAiB,KAAK,GAAG;AACvD,0BAAU;AACV,0BAAU;AACV,0BAAU,iBAAkC,CAAC;AAC7C,0BAAU,mBAAoC,CAAC;AAC/C,0BAAU,YAA6B,CAAC;AACxC,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU,mBAAiC,CAAC;AAC5C,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU,aAAY;AACtB,0BAAU,aAAY;AACtB,0BAAU,eAAc;AACxB,0BAAU,gBAAe;AACzB,0BAAU,gBAAe;AACzB,0BAAU,gBAAe;AACzB,0BAAU,iBAAgB;AAC1B,0BAAU,iBAAgB;AAC1B,0BAAU,sBAAqB;AAC/B,0BAAU,sBAAqB;AAC/B,0BAAU,yBAAwB;AAClC,0BAAU,0BAAyB;AACnC;AAAA,0BAAU,iBAAgB;AAC1B,0BAAU,kBAAiB;AAC3B,0BAAU;AACV,0BAAU,iBAAgB;AAC1B,0BAAU,oBAAmB;AAC7B,0BAAU,mBAAkB;AAC5B,0BAAU,YAAW;AACrB,0BAAU,eAAc;AACxB,0BAAU,gBAAe;AACzB,0BAAU,mBAAkB;AAC5B,0BAAU,aAAY;AACtB,0BAAU,cAAa;AACvB,0BAAU,cAAa;AAEvB,0BAAU,oBAAmB;AAC7B,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU,kBAAwC;AAClD,0BAAU,iBAA+B;AACzC,0BAAU;AACV,0BAAU;AACV,0BAAU,mBAAkB;AAC5B,0BAAU,6BAA4B;AACtC,0BAAU,oBAAmB;AAC7B,0BAAU,yBAA2D,CAAC;AACtE,0BAAU,aAAwC,CAAC;AACnD,0BAAU,gBAAe;AACzB,0BAAU,kBAAiB;AAC3B,0BAAU,iBAAgB;AAC1B,0BAAU,gBAAe;AACzB,0BAAU,aAAY;AACtB,0BAAU,yBAAwB;AAClC,0BAAU,0BAAyB;AACnC,0BAAU,kBAAiB;AAC3B,0BAAU,cAAa;AAEvB,0BAAU;AACV,0BAAU,gBAAyB,CAAC;AACpC,0BAAU,kBAAgC,CAAC;AAE3C,0BAAU,WAAyB,CAAC;AACpC,0BAAU,kBAA+B,CAAC;AAE1C,0BAAU,eAAsC,CAAC;AACjD,0BAAU,eAA4B,CAAC;AACvC,0BAAU,iBAA0B,CAAC;AACrC,0BAAU,kBAA2B,CAAC;AAEtC,0BAAU,gBAAe;AACzB,0BAAU,oBAAmB;AAE7B,0BAAU;AAGV;AAAA,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU,qBAAyB,CAAC;AACpC,0BAAU,oBAA2B;AACrC,0BAAU,sBAA6B;AACvC,0BAAU,6BAML,CAAC;AACN,0BAAU,sBAAqB;AAG/B;AAAA,0BAAU,yBAAwB;AAClC,0BAAU,wBAAuB;AAEjC,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU;AAGV;AAAA,0BAAU,WAAU,EAAE,UAAU,YAAY,YAAY,UAAU,SAAS,QAAQ;AACnF,0BAAU,kBAAgC,CAAC;AAC3C,0BAAU,YAAgD,CAAC;AAC3D,0BAAU,gCAA+B;AACzC,0BAAU,wBAAuB;AACjC,0BAAU,0BAAiD;AAC3D,0BAAU,4BAAmD,CAAC;AAC9D,0BAAU,2BAAkD,CAAC;AAC7D,0BAAU;AACV,0BAAU;AACV,0BAAU,mBAAkB;AAC5B,0BAAU,sBAAqB;AAC/B,0BAAU;AAiBR,UAJA,KAAK,aAAa,OAAO,KAAK,aAAc,WACxC,SAAS,cAAc,KAAK,SAAS,IACrC,KAAK,WAEL,CAAC,KAAK;AACR,cAAM,IAAI,MAAM,yCAAyC,KAAK,SAAS,6BAA6B;AAGtG,WAAK,iBAAiB,gBACtB,KAAK,sBAAsB,IAAI,WAAyC,uBAAuB,cAAc,GAC7G,KAAK,8BAA8B,IAAI,WAAiC,+BAA+B,cAAc,GACrH,KAAK,cAAc,IAAI,WAAiC,eAAe,cAAc,GACrF,KAAK,oBAAoB,IAAI,WAAuC,qBAAqB,cAAc,GACvG,KAAK,oBAAoB,IAAI,WAAuC,qBAAqB,cAAc,GACvG,KAAK,qBAAqB,IAAI,WAAwC,sBAAsB,cAAc,GAC1G,KAAK,4BAA4B,IAAI,WAA+C,6BAA6B,cAAc,GAC/H,KAAK,wBAAwB,IAAI,WAA2C,yBAAyB,cAAc,GACnH,KAAK,kBAAkB,IAAI,WAAiC,mBAAmB,cAAc,GAC7F,KAAK,mBAAmB,IAAI,WAAsC,oBAAoB,cAAc,GACpG,KAAK,+BAA+B,IAAI,WAAkD,gCAAgC,cAAc,GACxI,KAAK,4BAA4B,IAAI,WAA+C,6BAA6B,cAAc,GAC/H,KAAK,+BAA+B,IAAI,WAAkD,gCAAgC,cAAc,GACxI,KAAK,0BAA0B,IAAI,WAA6C,yBAAyB,cAAc,GACvH,KAAK,qBAAqB,IAAI,WAAwC,sBAAsB,cAAc,GAC1G,KAAK,eAAe,IAAI,WAA+C,gBAAgB,cAAc,GACrG,KAAK,wBAAwB,IAAI,WAA2C,yBAAyB,cAAc,GACnH,KAAK,eAAe,IAAI,WAAkC,gBAAgB,cAAc,GACxF,KAAK,yBAAyB,IAAI,WAA4C,0BAA0B,cAAc,GACtH,KAAK,UAAU,IAAI,WAA6B,WAAW,cAAc,GACzE,KAAK,qBAAqB,IAAI,WAAwC,sBAAsB,cAAc,GAC1G,KAAK,gBAAgB,IAAI,WAAmC,iBAAiB,cAAc,GAC3F,KAAK,mBAAmB,IAAI,WAAsC,oBAAoB,cAAc,GACpG,KAAK,0BAA0B,IAAI,WAA6C,2BAA2B,cAAc,GACzH,KAAK,0BAA0B,IAAI,WAA6C,2BAA2B,cAAc,GACzH,KAAK,gBAAgB,IAAI,WAAwC,iBAAiB,cAAc,GAChG,KAAK,SAAS,IAAI,WAAwB,UAAU,cAAc,GAClE,KAAK,aAAa,IAAI,WAAgC,cAAc,cAAc,GAClF,KAAK,aAAa,IAAI,WAAwB,cAAc,cAAc,GAC1E,KAAK,cAAc,IAAI,WAAwB,eAAe,cAAc,GAC5E,KAAK,YAAY,IAAI,WAAwB,aAAa,cAAc,GACxE,KAAK,gBAAgB,IAAI,WAAmC,iBAAiB,cAAc,GAC3F,KAAK,sBAAsB,IAAI,WAAyC,uBAAuB,cAAc,GAC7G,KAAK,0BAA0B,IAAI,WAA6C,2BAA2B,cAAc,GACzH,KAAK,uBAAuB,IAAI,WAA0C,wBAAwB,cAAc,GAChH,KAAK,gBAAgB,IAAI,WAAmC,iBAAiB,cAAc,GAC3F,KAAK,sBAAsB,IAAI,WAAyC,uBAAuB,cAAc,GAC7G,KAAK,qBAAqB,IAAI,WAAmC,sBAAsB,cAAc,GACrG,KAAK,qBAAqB,IAAI,WAAmC,sBAAsB,cAAc,GACrG,KAAK,0BAA0B,IAAI,WAA6C,2BAA2B,cAAc,GACzH,KAAK,wBAAwB,IAAI,WAAmC,yBAAyB,cAAc,GAC3G,KAAK,wBAAwB,IAAI,WAAmC,yBAAyB,cAAc,GAC3G,KAAK,mBAAmB,IAAI,WAAsC,oBAAoB,cAAc,GACpG,KAAK,yBAAyB,IAAI,WAA4C,0BAA0B,cAAc,GACtH,KAAK,YAAY,IAAI,WAA+B,aAAa,cAAc,GAC/E,KAAK,eAAe,IAAI,WAAmC,gBAAgB,cAAc,GACzF,KAAK,eAAe,IAAI,WAAmC,gBAAgB,cAAc,GACzF,KAAK,aAAa,IAAI,WAAgC,cAAc,cAAc,GAClF,KAAK,WAAW,IAAI,WAA8B,YAAY,cAAc,GAC5E,KAAK,wBAAwB,IAAI,WAA2C,yBAAyB,cAAc,GACnH,KAAK,eAAe,IAAI,WAAkC,gBAAgB,cAAc,GACxF,KAAK,2BAA2B,IAAI,WAA8C,4BAA4B,cAAc,GAC5H,KAAK,SAAS,IAAI,WAA+C,UAAU,cAAc,GACzF,KAAK,oBAAoB,IAAI,WAAuC,qBAAqB,cAAc,GACvG,KAAK,oBAAoB,IAAI,WAAiC,qBAAqB,cAAc,GAEjG,KAAK,WAAW,OAAO;AAAA,IACzB;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,OAAO;AACL,WAAK,qBAAqB;AAAA,IAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUU,WAAW,SAAqB;AAqBxC,UAnBI,2BAAS,iBAEN,KAAK,aAAY,KAAK,WAAW,UACtC,MAAM,cAAc,KAAK,UAAU,KAAK,SAAS,KAEjD,KAAK,WAAW,MAAM,OAAU,IAAM,CAAC,GAAG,KAAK,WAAW,OAAO,GAEnE,KAAK,iBAAiB,KAAK,eAAe,KAAK,OAAO,KAAK,IAAI,GAAG,KAAK,SAAS,sBAAgC,GAChH,KAAK,wBAAwB,KAAK,yBAAyB,KAAK,yBAAyB,GACzF,KAAK,0BAA0B,GAC/B,KAAK,gBAAgB,QAAQ,KAAK,SAAS,oBAEtC,KAAK,SAAS,kCACjB,KAAK,sBAAsB,GAG7B,KAAK,kBAAkB,GAGnB,KAAK,SAAS,wBAAwB,CAAC,YAAY,CAAC,SAAS;AAC/D,cAAM,IAAI,MAAM,oDAAoD;AAGtE,WAAK,iBAAiB;AAAA,QACpB,mBAAmB,KAAK,kBAAkB,KAAK,IAAI;AAAA,QACnD,mBAAmB,KAAK,kBAAkB,KAAK,IAAI;AAAA,MACrD,GAEA,MAAM,aAAa,KAAK,UAAU,GAClC,KAAK,WAAW,MAAM,UAAU,OAAO,CAAC,GACxC,KAAK,WAAW,UAAU,IAAI,KAAK,GAAG,GACtC,KAAK,WAAW,UAAU,IAAI,WAAW,GACzC,KAAK,WAAW,aAAa,QAAQ,MAAM;AAE3C,UAAM,kBAAkB,OAAO,iBAAiB,KAAK,UAAU;AAC/D,MAAM,0BAA2B,KAAK,gBAAgB,QAAQ,MAC5D,KAAK,WAAW,MAAM,WAAW,aAGnC,KAAK,aAAa,MAAM,iBAAiB,OAAO,EAAE,UAAU,GAAG,OAAO,EAAE,UAAU,SAAS,OAAO,OAAO,QAAQ,OAAO,KAAK,OAAO,MAAM,OAAO,SAAS,MAAM,EAAE,GAAG,KAAK,UAAU,GAEhL,KAAK,SAAS,yBAChB,KAAK,0BAA0B,MAAM,iBAAiB,OAAO,EAAE,WAAW,6CAA6C,OAAO,EAAE,UAAU,UAAU,UAAU,WAAW,EAAE,GAAG,KAAK,UAAU,GAC7L,KAAK,wBAAwB,YAAY,SAAS,cAAc,KAAK,CAAC,GACtE,KAAK,kBAAkB,MAAM,iBAAiB,OAAO,MAAM,KAAK,uBAAuB,GACvF,KAAK,wBAAwB,MAAM,iBAAiB,OAAO,EAAE,OAAO,EAAE,SAAS,SAAS,QAAQ,OAAO,UAAU,YAAY,KAAK,OAAO,MAAM,MAAM,EAAE,GAAG,KAAK,uBAAuB,GAEjL,KAAK,SAAS,sBACjB,MAAM,KAAK,KAAK,uBAAuB,IAK3C,KAAK,eAAe,MAAM,iBAAiB,OAAO,EAAE,WAAW,gDAAgD,UAAU,EAAE,GAAG,KAAK,UAAU,GAC7I,KAAK,eAAe,MAAM,iBAAiB,OAAO,EAAE,WAAW,iDAAiD,UAAU,EAAE,GAAG,KAAK,UAAU,GAC9I,KAAK,YAAY,MAAM,iBAAiB,OAAO,EAAE,WAAW,6CAA6C,UAAU,EAAE,GAAG,KAAK,UAAU,GACvI,KAAK,YAAY,MAAM,iBAAiB,OAAO,EAAE,WAAW,8CAA8C,UAAU,EAAE,GAAG,KAAK,UAAU,GACxI,KAAK,eAAe,MAAM,iBAAiB,OAAO,EAAE,WAAW,gDAAgD,UAAU,EAAE,GAAG,KAAK,UAAU,GAC7I,KAAK,eAAe,MAAM,iBAAiB,OAAO,EAAE,WAAW,iDAAiD,UAAU,EAAE,GAAG,KAAK,UAAU,GAE1I,KAAK,SAAS,yBAChB,KAAK,0BAA0B,MAAM,iBAAiB,OAAO,EAAE,WAAW,8DAA8D,OAAO,EAAE,UAAU,UAAU,UAAU,WAAW,EAAE,GAAG,KAAK,YAAY,GAChN,KAAK,wBAAwB,YAAY,SAAS,cAAc,KAAK,CAAC,GACtE,KAAK,kBAAkB,MAAM,iBAAiB,OAAO,MAAM,KAAK,uBAAuB,GACvF,KAAK,wBAAwB,MAAM,iBAAiB,OAAO,EAAE,OAAO,EAAE,SAAS,SAAS,QAAQ,OAAO,UAAU,YAAY,KAAK,OAAO,MAAM,MAAM,EAAE,GAAG,KAAK,uBAAuB,GAEtL,KAAK,2BAA2B,MAAM,iBAAiB,OAAO,EAAE,WAAW,8DAA8D,OAAO,EAAE,UAAU,UAAU,UAAU,WAAW,EAAE,GAAG,KAAK,YAAY,GACjN,KAAK,mBAAmB,MAAM,iBAAiB,OAAO,MAAM,KAAK,wBAAwB,GACzF,KAAK,yBAAyB,MAAM,iBAAiB,OAAO,EAAE,OAAO,EAAE,SAAS,SAAS,QAAQ,OAAO,UAAU,YAAY,KAAK,OAAO,MAAM,MAAM,EAAE,GAAG,KAAK,wBAAwB,GAEnL,KAAK,SAAS,uBACjB,MAAM,KAAK,KAAK,uBAAuB,GACvC,MAAM,KAAK,KAAK,wBAAwB,KAK5C,KAAK,mBAAmB,MAAM,iBAAiB,OAAO,EAAE,WAAW,sEAAsE,GAAG,KAAK,YAAY,GAC7J,KAAK,mBAAmB,MAAM,iBAAiB,OAAO,EAAE,WAAW,uEAAuE,GAAG,KAAK,YAAY,GAG9J,KAAK,gBAAgB,KAAK,KAAK,gBAAgB,GAC/C,KAAK,gBAAgB,KAAK,KAAK,gBAAgB,GAG/C,KAAK,WAAW,MAAM,iBAAiB,OAAO,EAAE,WAAW,kDAAkD,MAAM,OAAO,OAAO,EAAE,MAAM,UAAU,EAAE,GAAG,KAAK,gBAAgB,GAC7K,KAAK,WAAW,MAAM,iBAAiB,OAAO,EAAE,WAAW,mDAAmD,MAAM,OAAO,OAAO,EAAE,MAAM,UAAU,EAAE,GAAG,KAAK,gBAAgB,GAG9K,KAAK,WAAW,CAAC,KAAK,UAAU,KAAK,QAAQ,GAE7C,KAAK,sBAAsB,MAAM,iBAAiB,OAAO,EAAE,WAAW,uDAAuD,GAAG,KAAK,SAAS,GAC9I,KAAK,sBAAsB,MAAM,iBAAiB,OAAO,EAAE,WAAW,uDAAuD,GAAG,KAAK,SAAS,GAE9I,KAAK,qBAAqB,CAAC,KAAK,qBAAqB,KAAK,mBAAmB,GAE7E,KAAK,oBAAoB,MAAM,iBAAiB,OAAO,EAAE,OAAO,EAAE,SAAS,SAAS,QAAQ,OAAO,UAAU,YAAY,KAAK,OAAO,MAAM,MAAM,EAAE,GAAG,KAAK,mBAAmB,GAC9K,KAAK,oBAAoB,MAAM,iBAAiB,OAAO,EAAE,OAAO,EAAE,SAAS,SAAS,QAAQ,OAAO,UAAU,YAAY,KAAK,OAAO,MAAM,MAAM,EAAE,GAAG,KAAK,mBAAmB,GAE9K,KAAK,cAAc,MAAM,iBAAiB,OAAO,EAAE,WAAW,uDAAuD,GAAG,KAAK,mBAAmB,GAChJ,KAAK,cAAc,MAAM,iBAAiB,OAAO,EAAE,WAAW,wDAAwD,GAAG,KAAK,mBAAmB,GAEjJ,KAAK,cAAc,CAAC,KAAK,aAAa,KAAK,WAAW,GAGtD,KAAK,qBAAqB,MAAM,iBAAiB,OAAO,EAAE,WAAW,gEAAgE,GAAG,KAAK,SAAS,GACtJ,KAAK,qBAAqB,MAAM,iBAAiB,OAAO,EAAE,WAAW,gEAAgE,GAAG,KAAK,SAAS,GAEtJ,KAAK,qBAAqB,CAAC,KAAK,oBAAoB,KAAK,kBAAkB,GAG3E,KAAK,aAAa,MAAM,iBAAiB,OAAO,EAAE,WAAW,mBAAmB,OAAO,EAAE,OAAO,UAAU,EAAE,GAAG,KAAK,kBAAkB,GACtI,KAAK,aAAa,MAAM,iBAAiB,OAAO,EAAE,WAAW,mBAAmB,OAAO,EAAE,OAAO,UAAU,EAAE,GAAG,KAAK,kBAAkB,GAEtI,KAAK,aAAa,CAAC,KAAK,YAAY,KAAK,UAAU,GAE9C,KAAK,SAAS,oBACjB,KAAK,gBAAgB,QAAQ,CAAC,OAAO;AACnC,cAAM,KAAK,EAAE;AAAA,MACf,CAAC,GAGE,KAAK,SAAS,gBACjB,KAAK,mBAAmB,QAAQ,CAAC,aAAa;AAC5C,cAAM,KAAK,QAAQ;AAAA,MACrB,CAAC,GAGE,KAAK,SAAS,iBACjB,KAAK,mBAAmB,QAAQ,CAAC,aAAa;AAC5C,cAAM,KAAK,QAAQ;AAAA,MACrB,CAAC,GAIH,KAAK,gBAAgB,MAAM,iBAAiB,OAAO,EAAE,WAAW,yDAAyD,UAAU,EAAE,GAAG,KAAK,SAAS,GACtJ,KAAK,gBAAgB,MAAM,iBAAiB,OAAO,EAAE,WAAW,0DAA0D,UAAU,EAAE,GAAG,KAAK,SAAS,GACvJ,KAAK,mBAAmB,MAAM,iBAAiB,OAAO,EAAE,WAAW,4DAA4D,UAAU,EAAE,GAAG,KAAK,YAAY,GAC/J,KAAK,mBAAmB,MAAM,iBAAiB,OAAO,EAAE,WAAW,6DAA6D,UAAU,EAAE,GAAG,KAAK,YAAY,GAGhK,KAAK,YAAY,CAAC,KAAK,eAAe,KAAK,eAAe,KAAK,kBAAkB,KAAK,gBAAgB,GAClG,KAAK,SAAS,iBAChB,KAAK,UAAU,QAAQ,CAAC,SAAS;AAC/B,aAAK,UAAU,IAAI,GAAG,MAAM,gBAAiB,KAAK,SAAS,aAAc,CAAC;AAAA,MAC5E,CAAC,GAIH,KAAK,sBAAsB,KAAK,eAGhC,KAAK,cAAc,MAAM,iBAAiB,OAAO,EAAE,WAAW,gDAAgD,UAAU,EAAE,GAAG,KAAK,aAAa,GAC/I,KAAK,cAAc,MAAM,iBAAiB,OAAO,EAAE,WAAW,iDAAiD,UAAU,EAAE,GAAG,KAAK,aAAa,GAChJ,KAAK,iBAAiB,MAAM,iBAAiB,OAAO,EAAE,WAAW,mDAAmD,UAAU,EAAE,GAAG,KAAK,gBAAgB,GACxJ,KAAK,iBAAiB,MAAM,iBAAiB,OAAO,EAAE,WAAW,oDAAoD,UAAU,EAAE,GAAG,KAAK,gBAAgB,GAGzJ,KAAK,UAAU,CAAC,KAAK,aAAa,KAAK,aAAa,KAAK,gBAAgB,KAAK,cAAc,GAE5F,KAAK,sBAAsB,KAAK,uBAAuB,KAAK,iBAAiB;AAC7E,UAAM,2BAA2B,KAAK,eAAe,IAAI,KAAK,oBAAoB;AAGlF,WAAK,oBAAoB,KAAK,aAG1B,KAAK,yBACP,MAAM,MAAM,KAAK,uBAAuB,wBAAwB,GAI9D,KAAK,yBACP,MAAM,MAAM,KAAK,uBAAuB,wBAAwB,GAGlE,KAAK,SAAS,QAAQ,CAAC,OAAO;AAC5B,cAAM,MAAM,IAAI,KAAK,gBAAgB,CAAC;AAAA,MACxC,CAAC,GAED,MAAM,MAAM,KAAK,mBAAmB,wBAAwB,GAC5D,MAAM,MAAM,KAAK,mBAAmB,wBAAwB,GAGxD,KAAK,SAAS,oBAChB,KAAK,sBAAsB,MAAM,iBAAiB,OAAO,EAAE,WAAW,uDAAuD,GAAG,KAAK,SAAS,GAC9I,KAAK,sBAAsB,MAAM,iBAAiB,OAAO,EAAE,WAAW,uDAAuD,GAAG,KAAK,SAAS,GAE9I,KAAK,qBAAqB,CAAC,KAAK,qBAAqB,KAAK,mBAAmB,GAE7E,KAAK,oBAAoB,MAAM,iBAAiB,OAAO,EAAE,OAAO,EAAE,SAAS,SAAS,QAAQ,OAAO,UAAU,YAAY,KAAK,OAAO,MAAM,MAAM,EAAE,GAAG,KAAK,mBAAmB,GAC9K,MAAM,MAAM,KAAK,mBAAmB,wBAAwB,GAC5D,KAAK,oBAAoB,MAAM,iBAAiB,OAAO,EAAE,OAAO,EAAE,SAAS,SAAS,QAAQ,OAAO,UAAU,YAAY,KAAK,OAAO,MAAM,MAAM,EAAE,GAAG,KAAK,mBAAmB,GAC9K,MAAM,MAAM,KAAK,mBAAmB,wBAAwB,GAE5D,KAAK,cAAc,MAAM,iBAAiB,OAAO,EAAE,WAAW,uDAAuD,GAAG,KAAK,mBAAmB,GAChJ,KAAK,cAAc,MAAM,iBAAiB,OAAO,EAAE,WAAW,wDAAwD,GAAG,KAAK,mBAAmB,GAEjJ,KAAK,aAAa,CAAC,KAAK,aAAa,KAAK,WAAW,GAEhD,KAAK,SAAS,iBACjB,KAAK,mBAAmB,QAAQ,CAAC,aAAa;AAC5C,cAAM,KAAK,QAAQ;AAAA,MACrB,CAAC,IAIL,KAAK,cAAc,KAAK,WAAW,UAAU,EAAI,GACjD,KAAK,WAAW,YAAY,KAAK,WAAW,GAEvC,KAAK,SAAS,0BACjB,KAAK,qBAAqB;AAAA,IAE9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUU,uBAAuB;AAC/B,MAAK,KAAK,gBACR,KAAK,cAAc,IAEnB,KAAK,iBAAiB,GACtB,KAAK,kBAAkB,GAIvB,KAAK,4BAA4B,GAOjC,KAAK,iBAAiB,KAAK,QAAQ,GAE9B,KAAK,SAAS,8BAGjB,KAAK,UAAU,QAAQ,CAAC,SAAS;AAC/B,aAAK,qBAAqB,KAAK,MAAM,eAAe,CAAC,UAAU;AAC7D,UAAI,MAAM,kBAAkB,oBAAoB,MAAM,kBAAkB;AAAA,QAG1E,CAAC;AAAA,MACH,CAAC,GAGH,KAAK,iBAAiB,GACtB,KAAK,qBAAqB,GAC1B,KAAK,kBAAkB,GACvB,KAAK,YAAY,GACjB,KAAK,YAAY,GAEjB,KAAK,mBAAmB,GACxB,KAAK,oBAAoB,GACzB,KAAK,mBAAmB,GACxB,KAAK,gBAAgB,GACrB,KAAK,eAAe,GACpB,KAAK,aAAa,GAClB,KAAK,yBAAyB,GAE9B,KAAK,qBAAqB,KAAK,KAAK,YAAY,UAAU,KAAK,aAAa,KAAK,IAAI,CAAC,GACtF,KAAK,UAAU,QAAQ,CAAC,SAAS;AAC/B,aAAK,qBAAqB,KAAK,MAAM,UAAU,KAAK,aAAa,KAAK,IAAI,CAAC;AAAA,MAC7E,CAAC,GAEG,KAAK,SAAS,iCAChB,KAAK,UAAU,QAAQ,CAAC,SAAS;AAC/B,aAAK,yBAAyB,KAAK,WAAW;AAAA,UAC5C,SAAS;AAAA,UACT,cAAc,KAAK,iBAAiB,KAAK,IAAI;AAAA,QAC/C,CAAC,CAAC;AAAA,MACJ,CAAC,GAGH,KAAK,gBAAgB,QAAQ,CAAC,OAAO;AACnC,aAAK,qBAAqB,KAAK,IAAI,eAAe,KAAK,wBAAwB,KAAK,IAAI,CAAkB,GAC1G,KAAK,qBAAqB,KAAK,IAAI,SAAS,KAAK,kBAAkB,KAAK,IAAI,CAAkB;AAAA,MAChG,CAAC,GAED,KAAK,mBAAmB,QAAQ,CAAC,aAAa;AAC5C,aAAK,qBAAqB,KAAK,UAAU,UAAU,KAAK,sBAAsB,KAAK,IAAI,CAAkB;AAAA,MAC3G,CAAC,GAEG,KAAK,SAAS,oBAChB,KAAK,WAAW,QAAQ,CAAC,WAAW;AAClC,aAAK,qBAAqB,KAAK,QAAQ,eAAe,KAAK,wBAAwB,KAAK,IAAI,CAAkB,GAC9G,KAAK,qBAAqB,KAAK,QAAQ,SAAS,KAAK,kBAAkB,KAAK,IAAI,CAAkB;AAAA,MACpG,CAAC,GAED,KAAK,mBAAmB,QAAQ,CAAC,aAAa;AAC5C,aAAK,qBAAqB,KAAK,UAAU,UAAU,KAAK,sBAAsB,KAAK,IAAI,CAAkB;AAAA,MAC3G,CAAC,IAGC,KAAK,SAAS,wBAChB,KAAK,qBAAqB,KAAK,KAAK,yBAAyB,UAAU,KAAK,2BAA2B,KAAK,IAAI,CAAkB,GAGhI,KAAK,SAAS,yBAChB,KAAK,qBAAqB,KAAK,KAAK,yBAAyB,UAAU,KAAK,2BAA2B,KAAK,IAAI,CAAkB,GAClI,KAAK,qBAAqB,KAAK,KAAK,yBAAyB,eAAe,KAAK,2BAA2B,KAAK,IAAI,CAAkB,GACvI,KAAK,qBAAqB,KAAK,KAAK,0BAA0B,eAAe,KAAK,2BAA2B,KAAK,IAAI,CAAkB,GACxI,KAAK,qBAAqB,KAAK,KAAK,yBAAyB,SAAS,KAAK,qBAAqB,KAAK,IAAI,CAAkB,GAC3H,KAAK,qBAAqB,KAAK,KAAK,0BAA0B,SAAS,KAAK,qBAAqB,KAAK,IAAI,CAAkB,IAG9H,KAAK,qBAAqB,KAAK,KAAK,YAAY,WAAW,KAAK,cAAc,KAAK,IAAI,CAAkB,GACzG,KAAK,qBAAqB,KAAK,KAAK,aAAa,WAAW,KAAK,cAAc,KAAK,IAAI,CAAkB,GAE1G,KAAK,QAAQ,QAAQ,CAAC,YAAY;AAChC,aAAK,qBAAqB,KAAK,SAAS,WAAW,KAAK,cAAc,KAAK,IAAI,CAAkB,GACjG,KAAK,qBAAqB,KAAK,SAAS,SAAS,KAAK,YAAY,KAAK,IAAI,CAAkB,GAC7F,KAAK,qBAAqB,KAAK,SAAS,YAAY,KAAK,eAAe,KAAK,IAAI,CAAkB,GACnG,KAAK,qBAAqB,KAAK,SAAS,eAAe,KAAK,kBAAkB,KAAK,IAAI,CAAkB,GACzG,KAAK,qBAAqB,KAAK,SAAS,aAAa,KAAK,oBAAoB,KAAK,IAAI,CAAkB,GACzG,KAAK,qBAAqB,KAAK,SAAS,YAAY,KAAK,mBAAmB,KAAK,IAAI,CAAkB;AAAA,MACzG,CAAC,GAEG,cACF,KAAK,yBAAyB,UAAU;AAAA,QACtC,kBAAkB,KAAK;AAAA,QACvB,eAAe,yBAAyB,KAAK,cAAc;AAAA,QAC3D,wBAAwB,CAAC,EAAE,KAAK,qBAAqB,IAAI,KAAK,cAAc,GAAG,CAAC;AAAA;AAAA,QAEhF,sBAAsB;AAAA,QACtB,qBAAqB,KAAK,SAAS;AAAA,QACnC,YAAY,KAAK,eAAe,KAAK,IAAI;AAAA,QACzC,aAAa,KAAK,gBAAgB,KAAK,IAAI;AAAA,QAC3C,QAAQ,KAAK,WAAW,KAAK,IAAI;AAAA,QACjC,WAAW,KAAK,cAAc,KAAK,IAAI;AAAA,MACzC,CAAC,IAGE,KAAK,SAAS,kCACjB,KAAK,yBAAyB;AAAA,IAGpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,wBAAwB;AACtB,WAAK,iBAAiB,MAAM,QAAQ,KAAK,YAAY,SAAS,GAC9D,KAAK,WAAW,CAAC,GACjB,KAAK,eAAe,QAAQ,QAAM;AAChC,YAAM,MAAoC,CAAC;AAC3C,eAAO,KAAK,KAAK,OAAO,EAAE,QAAQ,UAAQ;AACxC,UAAI,KAAK,YACP,IAAI,IAAW,IAAI,GAAG,MAAM,IAA6C,GACzE,GAAG,MAAM,IAAW,IAAI,KAAK,QAAQ,IAA6C;AAAA,QAEtF,CAAC,GACD,KAAK,SAAS,KAAK,GAAG;AAAA,MACxB,CAAC;AAAA,IACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,2BAA2B;AAGzB,UAAI,IAAI;AACR,MAAI,KAAK,mBACP,KAAK,eAAe,QAAQ,QAAM;AAChC,YAAM,MAAM,KAAK,SAAS,GAAG;AAC7B,eAAO,KAAK,KAAK,OAAO,EAAE,QAAQ,UAAQ;AACxC,UAAI,KAAK,YACP,GAAG,MAAM,IAAmC,IAAK,IAAY,IAAI;AAAA,QAErE,CAAC;AAAA,MACH,CAAC,GACD,KAAK,iBAAiB,CAAC;AAAA,IAE3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,eAAsC,QAAW;AAC/C,WAAK,QAAQ,QAAQ,MAAM,GAC3B,OAAO,KAAK,IAAiC;AAAA,IAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,iBAAiB,QAAqB;AA1hCxC;AA2hCI,eAAS,IAAI,KAAK,QAAQ,QAAQ,KAAK,GAAG;AACxC,YAAI,KAAK,QAAQ,CAAC,MAAM,QAAQ;AAC9B,qBAAK,QAAQ,CAAC,MAAd,WAAiB,WACjB,KAAK,QAAQ,OAAO,GAAG,CAAC;AACxB;AAAA,QACF;AAAA,IAEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAcA,QAAQ,0BAAoC;AAhjC9C;AAijCI,WAAK,qBAAqB,UAAU,GACpC,KAAK,yBAAyB,KAAK,oBAAoB,KAAK,sBAAsB,GAClF,KAAK,2BAA2B,KAAK,oBAAoB,KAAK,wBAAwB,GACtF,KAAK,0BAA0B,KAAK,oBAAoB,KAAK,uBAAuB,IACpF,UAAK,cAAc,MAAnB,WAAsB,qBAEtB,KAAK,QAAQ,KAAK,iBAAiB,CAAC,CAAC;AAErC,UAAI,IAAI,KAAK,QAAQ;AACrB,aAAO;AACL,aAAK,iBAAiB,KAAK,QAAQ,CAAC,CAAC;AAGvC,MAAI,KAAK,SAAS,uBAAuB,SAAO,UAAK,6BAAL,mBAA+B,YAAY,gBACzF,UAAK,6BAAL,WAA+B,YAC/B,UAAK,8BAAL,WAAgC,YAGlC,KAAK,2BAA2B,GAChC,KAAK,qBAAqB,kBAAkB,KAAK,YAAY,QAAQ,GACrE,KAAK,eAAe,GAEpB,KAAK,QAAQ,QAAQ,CAAC,YAAY;AAChC,aAAK,qBAAqB,kBAAkB,SAAS,SAAS,GAC9D,KAAK,qBAAqB,kBAAkB,SAAS,OAAO,GAC5D,KAAK,qBAAqB,kBAAkB,SAAS,UAAU,GAC/D,KAAK,qBAAqB,kBAAkB,SAAS,aAAa,GAClE,KAAK,qBAAqB,kBAAkB,SAAS,WAAW,GAChE,KAAK,qBAAqB,kBAAkB,SAAS,UAAU;AAAA,MACjE,CAAC,GACD,KAAK,UAAU,QAAQ,CAAC,SAAS;AAC/B,aAAK,qBAAqB,kBAAkB,MAAM,QAAQ;AAAA,MAC5D,CAAC,GAED,KAAK,gBAAgB,QAAQ,CAAC,OAAO;AACnC,aAAK,qBAAqB,kBAAkB,IAAI,aAAa,GAC7D,KAAK,qBAAqB,kBAAkB,IAAI,OAAO;AAAA,MACzD,CAAC,GAED,KAAK,mBAAmB,QAAQ,CAAC,aAAa;AAC5C,aAAK,qBAAqB,kBAAkB,UAAU,QAAQ;AAAA,MAChE,CAAC,GAEG,KAAK,cACP,KAAK,WAAW,QAAQ,CAAC,WAAW;AAClC,aAAK,qBAAqB,kBAAkB,QAAQ,aAAa,GACjE,KAAK,qBAAqB,kBAAkB,QAAQ,OAAO;AAAA,MAC7D,CAAC,GAGC,KAAK,sBACP,KAAK,mBAAmB,QAAQ,CAAC,aAAa;AAC5C,aAAK,qBAAqB,kBAAkB,UAAU,QAAQ;AAAA,MAChE,CAAC,GAGC,KAAK,2BACP,KAAK,qBAAqB,kBAAkB,KAAK,yBAAyB,QAAQ,GAGhF,KAAK,2BACP,KAAK,qBAAqB,kBAAkB,KAAK,yBAAyB,QAAQ,GAGpF,KAAK,qBAAqB,kBAAkB,KAAK,YAAY,SAAS,GACtE,KAAK,qBAAqB,kBAAkB,KAAK,aAAa,SAAS;AAEvE,UAAM,gBAAgB,KAAK,WAAW,iBAAiB,yBAAyB;AAChF,OAAC,EAAE,QAAQ,KAAK,eAAe,CAAC,WAAW;AACzC,aAAK,qBAAqB,kBAAkB,QAAQ,UAAU;AAAA,MAChE,CAAC;AAED,UAAM,gBAAgB,KAAK,WAAW,iBAAiB,sBAAsB;AAC7E,OAAC,EAAE,QAAQ,KAAK,eAAe,CAAC,WAAW;AACzC,aAAK,qBAAqB,kBAAkB,QAAQ,YAAY,GAChE,KAAK,qBAAqB,kBAAkB,QAAQ,YAAY,GAEhE,KAAK,qBAAqB,kBAAkB,QAAQ,YAAY,GAChE,KAAK,qBAAqB,kBAAkB,QAAQ,YAAY;AAAA,MAClE,CAAC,GAED,MAAM,aAAa,KAAK,UAAU,GAClC,KAAK,WAAW,UAAU,OAAO,KAAK,GAAG,GACzC,KAAK,eAAe,GAEhB,4BACF,KAAK,mBAAmB;AAAA,IAE5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWU,oBAAoB,gBAAiE;AAC7F,UAAI,gBAAgB;AAClB,YAAM,YAAY,MAAM,QAAQ,cAAc,IAAI,iBAAiB,CAAC,cAAc,GAC9E;AACJ,eAAO,MAAM,UAAU,WAAW,UAAU,IAAI,CAAC;AAC/C,UAAI,YAAY,OAAO,SAAS,WAAY,cAC1C,SAAS,QAAQ;AAAA,MAGvB;AAEA,8BAAkB,MAAM,QAAQ,cAAc,IAAI,CAAC,IAAI,MAChD;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOU,qBAAqB;AAC7B,WAAK,oBAAoB,MACzB,KAAK,sBAAsB,MAC3B,KAAK,kBAAkB,MACvB,KAAK,UAAU,MACf,KAAK,cAAc,MACnB,KAAK,cAAc,MACnB,KAAK,iBAAiB,MACtB,KAAK,iBAAiB,MACtB,KAAK,aAAa,MAClB,KAAK,aAAa,MAClB,KAAK,cAAc,MACnB,KAAK,gBAAgB,MACrB,KAAK,iBAAiB,MACtB,KAAK,iBAAiB,MACtB,KAAK,WAAW,MAChB,KAAK,WAAW,MAChB,KAAK,WAAW,MAChB,KAAK,cAAc,MACnB,KAAK,cAAc,MACnB,KAAK,cAAc,MACnB,KAAK,oBAAoB,MACzB,KAAK,oBAAoB,MACzB,KAAK,4BAA4B,MACjC,KAAK,qBAAqB,MAC1B,KAAK,sBAAsB,MAC3B,KAAK,sBAAsB,MAC3B,KAAK,yBAAyB,MAC9B,KAAK,kBAAkB,MACvB,KAAK,mBAAmB,MACxB,KAAK,mBAAmB,MACxB,KAAK,iBAAiB,MACtB,KAAK,aAAa,MAClB,KAAK,cAAc,MACnB,KAAK,cAAc,MACnB,KAAK,oBAAoB,MACzB,KAAK,oBAAoB,MACzB,KAAK,qBAAqB,MAC1B,KAAK,sBAAsB,MAC3B,KAAK,sBAAsB,MAC3B,KAAK,4BAA4B,MACjC,KAAK,kBAAkB,MACvB,KAAK,mBAAmB,MACxB,KAAK,0BAA0B,MAC/B,KAAK,2BAA2B,MAChC,KAAK,wBAAwB,MAC7B,KAAK,yBAAyB,MAC9B,KAAK,aAAa,MAClB,KAAK,qBAAqB,MAC1B,KAAK,SAAS,MACd,KAAK,qBAAqB,MAC1B,KAAK,qBAAqB,MAC1B,KAAK,aAAa,MAClB,KAAK,aAAa,MAClB,KAAK,eAAe,MACpB,KAAK,eAAe,MACpB,KAAK,YAAY,MACjB,KAAK,YAAY,MACjB,KAAK,eAAe,MACpB,KAAK,eAAe,MACpB,KAAK,YAAY,MACjB,KAAK,gBAAgB,MACrB,KAAK,gBAAgB,MACrB,KAAK,mBAAmB,MACxB,KAAK,mBAAmB,MACxB,KAAK,4BAA4B,MACjC,KAAK,4BAA4B;AAAA,IACnC;AAAA;AAAA,IAGA,aAAa;AACX,aAAO,KAAK;AAAA,IACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,WAAW,YAAwB,gBAA0B,mBAA6B,qBAAqC;AAC7H,WAAK,wBAAwB,GAEzB,KAAK,SAAS,iBAAiB,WAAW,gBAC5C,KAAK,cAAc,KAAK,cAAc,CAAC,GAIrC,WAAW,iBAAiB,UAAa,WAAW,gBAAgB,MACtE,KAAK,aAAa,EAAE,QAAQ,QAAM,GAAG,aAAa,CAAC,GACnD,KAAK,aAAa;AAGpB,UAAM,kBAAkB,MAAM,OAAO,IAAM,CAAC,GAAG,KAAK,QAAQ;AAC5D,WAAK,WAAW,MAAM,OAAO,KAAK,UAAU,UAAU,GACtD,KAAK,QAAQ,KAAK,cAAc,EAAE,eAAe,iBAAiB,cAAc,KAAK,SAAS,CAAC,GAE/F,KAAK,oBAAoB,gBAAgB,mBAAmB,mBAAmB;AAAA,IACjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,uBAAuB,gBAA0B,mBAA6B,qBAAqC;AACjH,WAAK,wBAAwB,GAC7B,KAAK,cAAc,KAAK,cAAc,CAAC,GAEvC,KAAK,QAAQ,KAAK,0BAA0B,EAAE,SAAS,KAAK,SAAS,CAAC,GAEtE,KAAK,oBAAoB,gBAAgB,mBAAmB,mBAAmB;AAAA,IACjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOU,0BAA0B;AAClC,MAAK,KAAK,cAAc,EAAE,kBAAkB,KAI5C,KAAK,qBAAqB;AAAA,IAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWU,oBAAoB,gBAA0B,mBAA6B,qBAAqC;AACxH,MAAI,KAAK,SAAS,qBAAqB,UACrC,KAAK,0BAA0B,KAAK,SAAS,gBAAgB,GAE/D,KAAK,0BAA0B,GAC/B,KAAK,iBAAiB,GAGlB,KAAK,SAAS,iBAAiB,WACjC,KAAK,+BAA+B,KAGtC,KAAK,UAAU,QAAQ,CAAC,SAAS;AAC/B,aAAK,MAAM,YAAY,KAAK,SAAS,aAAa,WAAW;AAAA,MAC/D,CAAC,GACI,kBACH,KAAK,OAAO,GAGd,KAAK,YAAY,GACZ,uBACH,KAAK,YAAY,GAGd,qBACH,KAAK,WAAW,KAAK,OAAO,GAG1B,KAAK,SAAS,iCAAiC,KAAK,cAAc,CAAC,KAAK,4BAA4B,KAAK,yBAAyB,WAAW,KAC/I,KAAK,UAAU,QAAQ,CAAC,SAAS;AAC/B,aAAK,yBAAyB,KAAK,WAAW;AAAA,UAC5C,SAAS;AAAA,UACT,cAAc,KAAK,iBAAiB,KAAK,IAAI;AAAA,QAC/C,CAAC,CAAC;AAAA,MACJ,CAAC,IACQ,KAAK,SAAS,kCAAkC,MACzD,KAAK,oBAAoB,KAAK,wBAAwB;AAAA,IAE1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,4BAAkC;AAChC,MAAI,KAAK,SAAS,eAChB,KAAK,SAAS,uBAAuB,KAEnC,KAAK,SAAS,oBAChB,KAAK,SAAS,mBAAmB,qBAAqB;AAAA,IAE1D;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,kBAAkB,OAAuB;AACvC,MAAI,KAAK,mBACP,KAAK,eAAe,wBAAwB,YAAY,KAAK,4BAA4B,KAAK,IAAI,CAAC,GAC/F,KAAK,eAAe,WACtB,KAAK,eAAe,QAAQ,IAIhC,KAAK,iBAAiB,OAClB,KAAK,mBACP,KAAK,eAAe,KAAK,IAAiC,GAC1D,KAAK,eAAe,wBAAwB,UAAU,KAAK,4BAA4B,KAAK,IAAI,CAAC;AAAA,IAErG;AAAA;AAAA,IAGA,oBAAoB;AAClB,aAAO,KAAK;AAAA,IACd;AAAA;AAAA,IAGU,uBAA6B;AACrC,UAAM,cAAc,KAAK,iBAAiB,IAAI,QAAQ;AACtD,eAAW,OAAO,CAAC,KAAK,cAAc,KAAK,WAAW,KAAK,YAAY;AACrE,YAAI,UAAU,WAAW,EAAE,QAAQ;AAAA,IAEvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYU,mBAAmB;AAC3B,aAAO,KAAK,SAAS,eAAgB;AAAA,IACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,mBAAmB,UAA2B,OAAiD,SAAkB;AAC/G,UAAI,KAAK,aAAa;AACpB,YAAM,MAAM,KAAK,eAAe,QAAQ;AACxC,YAAI,CAAC,MAAM,UAAU,GAAG;AACtB;AAGF,YAAM,YAAY,KAAK,QAAQ,GAAG,GAC5B,SAAkC,KAAK,iBAAiB,GAAG;AACjE,QAAI,WACE,UAAU,WACZ,KAAK,QAAQ,GAAG,EAAE,OAAO,QAEvB,YAAY,WACd,KAAK,QAAQ,GAAG,EAAE,UAAU,UAG9B,KAAK,QAAQ,KAAK,2BAA2B;AAAA,UAC3C,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,MAAM;AAAA,QACR,CAAC,GAED,OAAO,aAAa,SAAS,WAAW,EAAE,GACtC,UAAU,UACZ,KAAK,cAAc,OAAO,SAAS,CAAC,GAAkB,KAAK,GAG7D,KAAK,QAAQ,KAAK,sBAAsB;AAAA,UACtC,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,MAAM;AAAA,QACR,CAAC;AAAA,MAEL;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,UAAU,WAAc;AACtB,UAAI,CAAC;AACH,eAAO,KAAK,iBAAiB,IAAI,KAAK,WAAW,KAAK;AAExD,UAAM,MAAM,KAAK,eAAe,UAAU,EAAE;AAC5C,aAAO,KAAK,iBAAiB,IAAM,OAAO,KAAK,SAAS,eAAiB,KAAK,WAAW,KAAK,WAAY,KAAK;AAAA,IACjH;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,gBAAgB,eAAgC;AAC9C,UAAM,MAAO,OAAO,iBAAkB,WAAW,gBAAgB,KAAK,eAAe,aAAa,GAC5F,eAAe,KAAK,iBAAiB,IAAM,OAAO,KAAK,SAAS,eAAiB,KAAK,WAAW,KAAK,WAAY,KAAK,UACvH,cAAc,KAAK,iBAAiB,IAAM,OAAO,KAAK,SAAS,eAAiB,MAAM,MAAM,KAAK,SAAS,eAAgB,IAAK;AAErI,aAAO,aAAa,SAAS,WAAW;AAAA,IAC1C;AAAA;AAAA,IAGA,eAAe;AACb,aAAO,KAAK,iBAAiB,IAAI,KAAK,cAAc,KAAK,YAAY,CAAC;AAAA,IACxE;AAAA;AAAA,IAGA,eAAe;AACb,aAAO,KAAK,iBAAiB,IAAI,KAAK,aAAa,KAAK,WAAW,CAAC;AAAA,IACtE;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,mBAAmB,eAAgC;AACjD,UAAI,MAAO,OAAO,iBAAkB,WAAW,gBAAgB,KAAK,eAAe,aAAa,GAC5F;AAEJ,aAAI,KAAK,iBAAiB,IACpB,OAAO,KAAK,SAAS,eACvB,kBAAkB,KAAK,eAEvB,kBAAkB,KAAK,aACvB,OAAO,KAAK,SAAS,eAAgB,KAGvC,kBAAkB,KAAK,aAGlB,gBAAgB,SAAS,GAAG;AAAA,IACrC;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,mBAAmB,eAAgC;AACjD,UAAI,MAAO,OAAO,iBAAkB,WAAW,gBAAgB,KAAK,eAAe,aAAa,GAC5F;AAEJ,aAAI,KAAK,iBAAiB,IACpB,OAAO,KAAK,SAAS,eACvB,kBAAkB,KAAK,eAEvB,kBAAkB,KAAK,aAEvB,OAAO,KAAK,SAAS,eAAgB,KAGvC,kBAAkB,KAAK,aAGlB,gBAAgB,SAAS,GAAG;AAAA,IACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOU,qBAAqB;AAC7B,UAAI,KAAK,SAAS,iBAAiB;AACjC,aAAK,WAAW,QAAQ,CAAC,WAAW;AAElC,UADuB,OAAO,iBAAiB,yBAAyB,EACzD,QAAQ,CAAC,WAAW;AACjC,gBAAM,YAAY,MAAM,QAAQ,IAAI,QAAQ,QAAQ;AACpD,iBAAK,QAAQ,KAAK,8BAA8B;AAAA,cAC9C,MAAM;AAAA,cACN,QAAQ;AAAA,cACR,MAAM;AAAA,YACR,CAAC;AAAA,UACH,CAAC;AAAA,QACH,CAAC,GAED,MAAM,aAAa,KAAK,WAAW,GACnC,MAAM,aAAa,KAAK,WAAW;AAEnC,iBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC5C,cAAM,IAAI,KAAK,QAAQ,CAAC;AACxB,cAAI,CAAC,KAAK,EAAE;AAAU;AAEtB,cAAM,gBAAgB,MAAM,iBAAiB,OAAO,EAAE,WAAW,gEAAgE,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,iBAAiB,KAAM,IAAI,KAAK,SAAS,eAAiB,KAAK,cAAc,KAAK,WAAW,GAC1O,YAAY,KAAK,iBAAiB,KAAK,KAAK,KAAK,SAAS,eAAgB,WAAW;AAC3F,UAAI,aACF,cAAc,UAAU,IAAI,SAAS,GAGvC,MAAM,QAAQ,IAAI,eAAe,UAAU,CAAC,GAE5C,KAAK,QAAQ,KAAK,yBAAyB;AAAA,YACzC,MAAM;AAAA,YACN,QAAQ;AAAA,YACR,MAAM;AAAA,UACR,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASU,kBAAkB;AAC1B,WAAK,SAAS,QAAQ,CAAC,WAAW;AAChC,aAAK,qBAAqB,KAAK,QAAQ,SAAS,CAAC,MAAW;AAtkDlE;AA2kDQ,cAJI,KAAK,wBAIL,EAAE,OAAO,UAAU,SAAS,wBAAwB;AACtD;AAGF,cAAM,OAAO,EAAE,OAAO,QAAQ,sBAAsB;AACpD,cAAI,CAAC;AACH;AAGF,cAAM,SAAS,MAAM,QAAQ,IAAI,MAAM,QAAQ;AAC/C,cAAI,OAAO,UAAU;AACnB,gBAAI,GAAC,UAAK,cAAc,MAAnB,WAAsB;AACzB;AAGF,gBAAM,sBAAsB,KAAK,YAAY,MAAM,GAC/C,aAAgC,MAChC,IAAI;AACR,mBAAO,IAAI,KAAK,YAAY,QAAQ;AAClC,kBAAI,KAAK,YAAY,CAAC,EAAE,aAAa,OAAO,IAAI;AAC9C,6BAAa,KAAK,YAAY,CAAC,GAC/B,WAAW,UAAU,CAAC,WAAW;AACjC;AAAA,cACF;AAEF,gBAAM,aAAa,CAAC,CAAC;AAErB,YAAI,KAAK,SAAS,2BACX,eACH,aAAa,EAAE,UAAU,OAAO,IAAI,SAAS,OAAO,gBAAgB,SAAS,OAAO,IAElF,cAAc,WAAW,YAE3B,KAAK,YAAY,OAAO,GAAG,CAAC,GAC5B,aAAa,OAEV,KAAK,SAAS,oBACjB,KAAK,cAAc,CAAC,IAElB,eAAe,CAAC,cAAc,CAAC,KAAK,SAAS,oBAC/C,KAAK,YAAY,KAAK,UAAU,KAI9B,EAAE,WAAW,KAAK,SAAS,kBACzB,cACF,KAAK,YAAY,OAAO,GAAG,CAAC,MAGzB,CAAC,EAAE,YAAY,CAAC,EAAE,WAAY,CAAC,KAAK,SAAS,qBAChD,KAAK,cAAc,CAAC,IAGjB,aAGM,KAAK,YAAY,WAAW,KACrC,KAAK,YAAY,KAAK,UAAU,KAHhC,aAAa,EAAE,UAAU,OAAO,IAAI,SAAS,OAAO,gBAAgB,SAAS,OAAO,GACpF,KAAK,YAAY,KAAK,UAAU;AAOtC,gBAAI;AACJ,YAAK,KAAK,SAAS,kBASjB,aAAa;AAAA,cACX,iBAAiB;AAAA,cACjB;AAAA,cACA,UAAU,KAAK,YAAY,IAAI,CAAC,QAAQ;AACtC,oBAAM,UAAU,KAAK,QAAQ,KAAK,eAAe,IAAI,QAAQ,CAAC;AAC9D,uBAAO,CAAC,WAAW,QAAQ,SAAS,OAAO,EAAE,UAAU,QAAQ,IAAI,SAAS,SAAS,SAAS,IAAI,QAAQ;AAAA,cAC5G,CAAC,EAAE,OAAO,CAAC,OAAO,EAAE;AAAA,YACtB,IAfA,aAAa;AAAA,cACX,iBAAiB;AAAA,cACjB;AAAA,cACA,UAAW,KAAK,YAAY,SAAS,IAAI,OAAO,KAAK;AAAA,cACrD,SAAU,KAAK,YAAY,SAAS,IAAI,SAAS;AAAA,cACjD,SAAU,KAAK,YAAY,SAAS,IAAI,KAAK,YAAY,CAAC,EAAE,UAAU;AAAA,YACxE,GAYE,KAAK,QAAQ,KAAK,cAAc,YAAY,CAAC,EAAE,eAAe,MAAM,OACtE,KAAK,eAAe,KAAK,WAAW,GACpC,KAAK,QAAQ,KAAK,QAAQ,YAAY,CAAC;AAAA,UAE3C;AAAA,QACF,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,sBAAsB;AAC9B,WAAK,SAAS,QAAQ,CAAC,WAAW;AAEhC,QADuB,OAAO,iBAAiB,sBAAsB,EACtD,QAAQ,CAAC,WAAW;AACjC,cAAM,YAAY,MAAM,QAAQ,IAAI,QAAQ,QAAQ;AACpD,UAAI,aACF,KAAK,QAAQ,KAAK,2BAA2B;AAAA,YAC3C,MAAM;AAAA,YACN,QAAQ;AAAA,YACR,MAAM;AAAA,UACR,CAAC;AAAA,QAEL,CAAC;AAAA,MACH,CAAC,GAED,MAAM,aAAa,KAAK,QAAQ,GAChC,MAAM,aAAa,KAAK,QAAQ,GAEhC,KAAK,gBAAgB,GAErB,MAAM,MAAM,KAAK,UAAU,KAAK,aAAa,GAC7C,MAAM,MAAM,KAAK,UAAU,KAAK,aAAa,GAE7C,KAAK,YAAY,QAAQ,CAAC,QAAQ;AAEhC,QADuB,IAAI,iBAAiB,yBAAyB,EACtD,QAAQ,CAAC,WAAW;AACjC,cAAM,YAAY,MAAM,QAAQ,IAAI,QAAQ,QAAQ;AACpD,UAAI,aACF,KAAK,QAAQ,KAAK,8BAA8B;AAAA,YAC9C,MAAM;AAAA,YACN,QAAQ;AAAA,YACR,MAAM;AAAA,UACR,CAAC;AAAA,QAEL,CAAC;AAAA,MACH,CAAC,GAED,MAAM,aAAa,KAAK,WAAW,GACnC,MAAM,aAAa,KAAK,WAAW,GAE/B,KAAK,SAAS,oBACiB,KAAK,YAAY,iBAAiB,yBAAyB,EACnE,QAAQ,CAAC,WAAW;AAC3C,YAAM,YAAY,MAAM,QAAQ,IAAI,QAAQ,QAAQ;AACpD,QAAI,aACF,KAAK,QAAQ,KAAK,8BAA8B;AAAA,UAC9C,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,MAAM;AAAA,QACR,CAAC;AAAA,MAEL,CAAC,GACD,MAAM,aAAa,KAAK,WAAW,GAE/B,KAAK,iBAAiB,MACS,KAAK,YAAY,iBAAiB,yBAAyB,EACnE,QAAQ,CAAC,WAAW;AAC3C,YAAM,YAAY,MAAM,QAAQ,IAAI,QAAQ,QAAQ;AACpD,QAAI,aACF,KAAK,QAAQ,KAAK,8BAA8B;AAAA,UAC9C,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,MAAM;AAAA,QACR,CAAC;AAAA,MAEL,CAAC,GACD,MAAM,aAAa,KAAK,WAAW;AAIvC,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC5C,YAAM,IAAO,KAAK,QAAQ,CAAC;AAC3B,YAAI,EAAE;AAAU;AAEhB,YAAM,eAAe,KAAK,iBAAiB,IAAM,KAAK,KAAK,SAAS,eAAiB,KAAK,WAAW,KAAK,WAAY,KAAK,UACrH,kBAAkB,KAAK,iBAAiB,IAAM,KAAK,KAAK,SAAS,eAAiB,KAAK,cAAc,KAAK,cAAe,KAAK,aAE9H,SAAS,MAAM,iBAAiB,OAAO,EAAE,IAAI,GAAG,KAAK,MAAM,EAAE,EAAE,IAAI,SAAS,EAAE,IAAI,OAAO,EAAE,EAAE,EAAE,GAAG,MAAM,gBAAgB,WAAW,2DAA2D,GAAG,YAAY;AACnN,QAAI,EAAE,YACJ,OAAO,QAAQ,EAAE,UAEd,EAAE,eACL,OAAO,UAAU,IAAI,KAAK,SAAS,yBAA0B;AAE/D,YAAM,aAAa,MAAM,iBAAiB,QAAQ,EAAE,WAAW,oBAAoB,GAAG,MAAM;AAC5F,aAAK,cAAc,YAAY,EAAE,IAAc,GAE/C,MAAM,MAAM,QAAQ,EAAE,QAAS,KAAK,qBAAqB;AAEzD,YAAI,YAAY,EAAE,kBAAkB;AAyCpC,YAxCI,aACF,OAAO,UAAU,IAAI,GAAG,MAAM,gBAAgB,SAAS,CAAC,GAE1D,YAAY,KAAK,iBAAiB,KAAK,KAAK,KAAK,SAAS,eAAgB,WAAW,MACjF,aACF,OAAO,UAAU,IAAI,SAAS,GAGhC,KAAK,qBAAqB,KAAK,QAAQ,cAAc,KAAK,uBAAuB,KAAK,IAAI,CAAkB,GAC5G,KAAK,qBAAqB,KAAK,QAAQ,cAAc,KAAK,uBAAuB,KAAK,IAAI,CAAkB,GAE5G,MAAM,QAAQ,IAAI,QAAQ,UAAU,CAAC,IAEjC,KAAK,SAAS,uBAAuB,EAAE,cACzC,KAAK,qBAAqB,KAAK,QAAQ,cAAc,KAAK,yBAAyB,KAAK,IAAI,CAAkB,GAC9G,KAAK,qBAAqB,KAAK,QAAQ,cAAc,KAAK,0BAA0B,KAAK,IAAI,CAAkB,IAG7G,EAAE,eAAe,iBAAiB,KAAK,EAAE,2BAA2B,UACtE,OAAO,KAAK,EAAE,eAAe,EAAE,QAAQ,SAAO;AAC5C,UAAI,EAAE,gBAAgB,eAAe,GAAG,KACtC,OAAO,aAAa,KAAK,EAAE,gBAAgB,GAAG,CAAC;AAAA,QAEnD,CAAC,GAGC,EAAE,aACJ,OAAO,UAAU,IAAI,uBAAuB,GAC5C,MAAM,iBAAiB,OAAO,EAAE,WAAW,wBAAwB,KAAK,SAAS,2BAA2B,CAAC,KAAK,SAAS,8BAA8B,mCAAmC,EAAE,GAAG,GAAG,MAAM,GACtM,KAAK,SAAS,2BAA2B,KAAK,SAAS,+BACzD,MAAM,iBAAiB,OAAO,EAAE,WAAW,gCAAgC,GAAG,MAAM,IAIxF,KAAK,QAAQ,KAAK,sBAAsB;AAAA,UACtC,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,MAAM;AAAA,QACR,CAAC,GAEG,KAAK,SAAS,eAAe;AAC/B,cAAM,gBAAgB,MAAM,iBAAiB,OAAO,EAAE,WAAW,gEAAgE,CAAC,KAAK,CAAC,GAAG,GAAG,eAAe,GACvJ,gBAAgB,KAAK,iBAAiB,KAAK,KAAK,KAAK,SAAS,eAAgB,WAAW;AAC/F,UAAI,iBACF,cAAc,UAAU,IAAI,aAAa,GAG3C,KAAK,qBAAqB,KAAK,eAAe,cAAc,KAAK,0BAA0B,KAAK,IAAI,CAAkB,GACtH,KAAK,qBAAqB,KAAK,eAAe,cAAc,KAAK,0BAA0B,KAAK,IAAI,CAAkB,GAEtH,MAAM,QAAQ,IAAI,eAAe,UAAU,CAAC,GAE5C,KAAK,QAAQ,KAAK,yBAAyB;AAAA,YACzC,MAAM;AAAA,YACN,QAAQ;AAAA,YACR,MAAM;AAAA,UACR,CAAC;AAAA,QACH;AACA,YAAI,KAAK,SAAS,mBAAmB,KAAK,SAAS,eAAe;AAChE,cAAM,kBAAkB,KAAK,iBAAiB,IAAM,KAAK,KAAK,SAAS,eAAiB,KAAK,WAAW,CAAC,IAAI,KAAK,WAAW,CAAC,IAAK,KAAK,WAAW,CAAC,GAC9I,gBAAgB,MAAM,iBAAiB,OAAO,EAAE,WAAW,gEAAgE,CAAC,KAAK,CAAC,GAAG,GAAG,eAAe;AAC7J,gBAAM,QAAQ,IAAI,eAAe,UAAU,CAAC,GAE5C,KAAK,QAAQ,KAAK,yBAAyB;AAAA,YACzC,MAAM;AAAA,YACN,QAAQ;AAAA,YACR,MAAM;AAAA,UACR,CAAC;AAAA,QACH;AAAA,MACF;AAEA,WAAK,eAAe,KAAK,WAAW,GACpC,KAAK,kBAAkB,GACnB,KAAK,SAAS,wBACZ,OAAO,KAAK,SAAS,uBAAwB,aAC/C,KAAK,SAAS,oBAAoB,MAAmC,KAAK,UAAU,KAAK,uBAAuB,KAAK,YAAmB,KAAK,mBAAmB,KAAK,SAAS,KAAK,gBAAgB,KAAK,KAAK,KAAK,OAAO,IAEzN,KAAK,mBAAmB;AAAA,IAG9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,qBAAqB;AA91DjC;AA+1DI,iBAAK,6BAAL,WAA+B,YAC/B,UAAK,8BAAL,WAAgC;AAEhC,UAAI,oBAAyB,MAEvB,qBAAqB,MAAM,KAAK,0BAA0B,aAAa,KAAK,0BAA0B,aAAa,IACnH,oBAAoB,MAAM,KAAK,0BAA0B,aAAa,KAAK,0BAA0B,aAAa,IAEpH,gBAAgB,IACd,kBAAkB;AAAA,QACtB,WAAW;AAAA,QACX,WAAW;AAAA,QACX,aAAa;AAAA,QACb,YAAY;AAAA,QACZ,WAAW;AAAA,QACX,gBAAgB;AAAA,QAChB,aAAa;AAAA,QACb,QAAQ,CAAC,KAAK,iBAAiB;AAAA;AAAA;AAAA,QAE/B,QAAQ,IAAI,KAAK,SAAS,yBAAyB;AAAA,QACnD,QAAQ,CAAC,UACA,CAAC,MAAM,QAAQ,UAAU,SAAS,KAAK,SAAS,yBAAmC;AAAA,QAE5F,SAAS,CAAC,MAAqB;AAC7B,YAAE,KAAK,UAAU,IAAI,4BAA4B,GACjD,gBAAgB,CAAC,KAAK,iBAAiB,KAAK,MAAM,OAAO,EAAE,IAAI,EAAG,OAAO,MAAM,OAAO,KAAK,yBAAyB,EAAG,MAEnH,iBAAiB,EAAE,cAAc,QAAQ,KAAK,WAAW,cACrD,sBACJ,oBAAoB,OAAO,YAAY,oBAAoB,GAAG,KAEvD,iBAAiB,EAAE,cAAc,QAAQ,MAAM,OAAO,KAAK,yBAAyB,EAAG,OAC1F,sBACJ,oBAAoB,OAAO,YAAY,mBAAmB,GAAG,MAG/D,OAAO,cAAc,iBAAiB,GACtC,oBAAoB;AAAA,QAExB;AAAA,QACA,OAAO,CAAC,MAAqB;AAv4DnC,cAAAA,KAAAC,KAAA;AA44DQ,cAJA,EAAE,KAAK,UAAU,OAAO,4BAA4B,GACpD,OAAO,cAAc,iBAAiB,GACtC,oBAAoB,MAEhB,GAACD,MAAA,KAAK,cAAc,MAAnB,QAAAA,IAAsB;AACzB;AAGF,cAAI,gBAAe,MAAAC,MAAA,KAAK,6BAAL,gBAAAA,IAA+B,cAA/B,YAA4C,CAAC;AAChE,yBAAe,aAAa,QAAO,gBAAK,8BAAL,mBAAgC,cAAhC,YAA6C,CAAC,CAAC;AAElF,cAAM,mBAAwB,CAAC;AAC/B,mBAAS,IAAI,GAAG,IAAI,aAAa,QAAQ;AACvC,6BAAiB,KAAK,KAAK,QAAQ,KAAK,eAAe,aAAa,CAAC,CAAC,CAAC,CAAC;AAE1E,eAAK,WAAW,gBAAgB,GAEhC,KAAK,QAAQ,KAAK,oBAAoB,EAAE,iBAAiB,KAAK,QAAQ,CAAC,GACvE,EAAE,gBAAgB,GAClB,KAAK,kBAAkB,GACnB,KAAK,kBACP,KAAK,SAAS;AAAA,QAElB;AAAA,MACF;AAEA,WAAK,2BAA2B,SAAS,OAAO,KAAK,UAAU,eAAe,GAC9E,KAAK,4BAA4B,SAAS,OAAO,KAAK,UAAU,eAAe;AAAA,IACjF;AAAA;AAAA;AAAA;AAAA;AAAA,IAMU,oBAAoB;AAC5B,UAAM,IAAI,MAAM,KAAK,KAAK,SAAS,CAAC,EAAE,QAAQ,GACxC,IAAI,MAAM,KAAK,KAAK,SAAS,CAAC,EAAE,QAAQ;AAC9C,aAAO,EAAE,OAAO,CAAC;AAAA,IACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOU,4BAA4B,KAA+C;AACnF,UAAM,oBAAoB,IAAI,OAAO,cAAe,GAAG,QAAQ,KAAK,KAAK,EAAE;AAC3E,WAAK,QAAQ,KAAK,yBAAyB,EAAE,kBAAkB,CAAC;AAAA,IAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYU,oBAAoB;AAC5B,UAAI,OAAO,aAAc;AACvB,cAAM,IAAI,MAAM,2EAA2E;AAG7F,UAAI,GACA,GACA,GACA,OACA,UACA,UACA,gBACA,gBAAgB,IAChB,wBAAwB,GAEtB,WAA0B,KAAK,kBAAkB,GACjD,KAAK,KAAK,kBAAkB;AAClC,eAAS,IAAI,GAAG,IAAI,SAAS,QAAQ;AAKnC,QAJc,SAAS,CAAC,EACF,iBAAiB,yBAAyB,EACxD,QAAQ,CAAC,WAAW,OAAO,OAAO,CAAC,GAEvC,OAAK,GAAG,UAAU,CAAC,GAAG,CAAC,MAIvB,GAAG,CAAC,EAAE,cACJ,mBAAmB,WACrB,iBAAiB,IAEnB,gBAAgB;AAIpB,UAAI,mBAAmB;AAIvB,iBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,cAAM,SAAS,SAAS,CAAC;AAKzB,cAHI,KAAK,GAAG,UAAU,CAAC,GAAG,CAAC,KAGvB,IAAI,kBAAmB,KAAK,SAAS,mBAAmB,KAAK;AAC/D;AAGF,cAAM,mBAAmB,MAAM,iBAAiB,OAAO,EAAE,WAAW,0BAA0B,MAAM,aAAa,iBAAiB,aAAa,GAAG,MAAM;AACxJ,eAAK,qBAAqB,KAAK,kBAAkB,YAAY,KAAK,4BAA4B,KAAK,IAAI,CAAkB,GAEzH,KAAK,wBAAwB;AAAA,YAC3B,UAAU;AAAA,cACR,mBAAmB;AAAA,cACnB,yBAAyB;AAAA,cACzB,eAAe,CAAC,GAAG,eAA+B;AA3/D5D;AA4/DY,oBAAM,cAAe,EAAiB,UAAW,EAAiB,eAAe,CAAC,IAAI;AACtF,oBAAI,GAAC,UAAK,cAAc,MAAnB,WAAsB;AACzB,yBAAO;AAET,wBAAS,YAA2B,OACpC,wBAAwB,GACxB,WAAW,kBAAkB,UAAU,IAAI,4BAA4B;AACvE,oBAAI,sBAAqC,MACrC,uBAAsC;AAE1C,yBAAS,KAAK,GAAG,KAAK,SAAS,QAAQ;AACrC,kBAAI,MAAM,GAAG,UAAU,CAAC,GAAG,EAAE,MAG7B,GAAG,EAAE,EAAE,gBAAgB,SAAS,EAAE,EAAE;AAEtC,oBAAI,KAAK,SAAS;AAIhB,uBAHA,sBAAsB,GACtB,uBAAuB,GAElB,IAAI,IAAI,GAAG,IAAI,GAAG,QAAQ;AAC7B,wBAAI,GAAG,CAAC,GACJ,eAAG,cACD,yBAAyB,SACvB,EAAE,WACJ,wBAAwB,EAAE,YAAY,EAAE,iBAAiB,KAEzD,uBAAuB,OAG3B,wBAAwB,EAAE,iBAAiB,KAAK,KAAK,IAAI,EAAE,YAAY,GAAG,KAAK,sBAAsB;AAI3G,oBAAI,qBAAqB,GACrB,sBAAqC;AACzC,qBAAK,IAAI,GAAG,KAAK,GAAG;AAElB,sBAAI,GAAG,CAAC,GACJ,eAAG,cACD,wBAAwB,SACtB,EAAE,WACJ,uBAAuB,EAAE,YAAY,EAAE,iBAAiB,KAExD,sBAAsB,OAG1B,uBAAuB,EAAE,iBAAiB,KAAK,KAAK,IAAI,EAAE,YAAY,GAAG,KAAK,sBAAsB;AAGxG,gBAAI,wBAAwB,SAC1B,sBAAsB,MAEpB,uBAAuB,SACzB,qBAAqB,MAEnB,yBAAyB,SAC3B,uBAAuB,MAErB,wBAAwB,SAC1B,sBAAsB,MAExB,WAAW,QAAQ,KAAK,IAAI,qBAAqB,mBAAmB,GACpE,WAAW,QAAQ,KAAK,IAAI,oBAAoB,oBAAoB;AAAA,cACtE;AAAA,cACA,UAAU,CAAC,GAAG,eAAe;AAC3B,oBAAM,cAAe,EAAiB,UAAW,EAAiB,eAAe,CAAC,IAAI;AACtF,qBAAK,uBAAuB;AAC5B,oBAAI,gBACE,IAAI,KAAK,IAAI,UAAU,KAAK,IAAI,UAAW,YAA2B,KAAK,CAAC,IAAI,OAClF,GACA,kBAAkB,GAClB,kBAAkB,GAChB,gBAAgB,KAAK,sBAAsB;AAEjD,oBAAI,IAAI,GAAG;AAGT,uBAFA,IAAI,GAEC,IAAI,GAAG,KAAK,GAAG;AAClB,wBAAI,GAAG,CAAC,GACJ,eAAG,aAAa,CAAC,EAAE,WACrB,iBAAiB,KAAK,IAAI,EAAE,YAAY,GAAG,KAAK,sBAAsB,GAClE,MAAM,EAAE,iBAAiB,KAAK,IAAI,kBACpC,MAAM,EAAE,iBAAiB,KAAK,gBAC9B,EAAE,QAAQ,mBAEV,EAAE,SAAS,EAAE,iBAAiB,KAAK,GACnC,IAAI;AAKV,uBAAK,IAAI,GAAG,KAAK,GAAG;AAElB,oBADA,IAAI,GAAG,CAAC,GACJ,GAAC,KAAK,EAAE,YAER,KAAK,iBAAiB,KAAM,IAAI,KAAK,SAAS,eAChD,mBAAmB,EAAE,SAAS,IAE9B,mBAAmB,EAAE,SAAS;AAIlC,sBAAI,KAAK,SAAS;AAEhB,yBADA,IAAI,CAAC,GACA,IAAI,IAAI,GAAG,IAAI,GAAG,QAAQ;AAE7B,sBADA,IAAI,GAAG,CAAC,GACJ,GAAC,KAAK,EAAE,WACR,EAAE,cACA,KAAK,EAAE,YAAa,EAAE,YAAY,EAAE,iBAAiB,KAAK,KAC5D,KAAK,EAAE,YAAY,EAAE,iBAAiB,IACtC,EAAE,QAAQ,EAAE,aAEZ,EAAE,SAAS,EAAE,iBAAiB,KAAK,GACnC,IAAI,IAGF,KAAK,iBAAiB,KAAM,IAAI,KAAK,SAAS,eAChD,mBAAmB,EAAE,SAAS,IAE9B,mBAAmB,EAAE,SAAS;AAAA;AAKpC,yBAAK,IAAI,IAAI,GAAG,IAAI,GAAG,QAAQ;AAE7B,sBADA,IAAI,GAAG,CAAC,GACJ,GAAC,KAAK,EAAE,YAER,KAAK,iBAAiB,KAAM,IAAI,KAAK,SAAS,eAChD,mBAAmB,EAAE,SAAS,IAE9B,mBAAmB,EAAE,SAAS;AAKpC,sBAAI,KAAK,SAAS;AAEhB,yBADA,IAAI,CAAC,GACA,IAAI,IAAI,GAAG,IAAI,GAAG,QAAQ;AAE7B,sBADA,IAAI,GAAG,CAAC,GACJ,GAAC,KAAK,EAAE,WACR,EAAE,cACA,KAAK,EAAE,YAAa,EAAE,YAAY,EAAE,iBAAiB,KAAK,KAC5D,KAAK,EAAE,YAAY,EAAE,iBAAiB,IACtC,EAAE,QAAQ,EAAE,aAEZ,EAAE,SAAS,EAAE,iBAAiB,KAAK,GACnC,IAAI;AAAA,gBAKd,OAAO;AAML,uBALA,IAAI,GAEJ,kBAAkB,GAClB,kBAAkB,GAEb,IAAI,GAAG,KAAK,GAAG;AAElB,wBADA,IAAI,GAAG,CAAC,GACJ,GAAC,KAAK,EAAE,WACR,EAAE;AACJ,0BAAI,KAAK,EAAE,YAAa,EAAE,YAAY,EAAE,iBAAiB,KAAK;AAC5D,6BAAK,EAAE,YAAY,EAAE,iBAAiB,IACtC,EAAE,QAAQ,EAAE;AAAA,2BACP;AACL,4BAAM,YAAY,EAAE,iBAAiB,KAAK,GACpC,sBAAsB,KAAK,eAAe;AAEhD,wBAAI,KAAK,iBAAiB,KAAM,KAAK,KAAK,SAAS,gBAE7C,WAAW,yBAAyB,sBAAuB,gBAAgB,KAAK,SAAS,gCAC3F,wBAAwB,WAE1B,EAAE,QAAU,sBAAsB,KAAK,SAAS,8BAAgC,gBAAiB,wBAAwB,YAEzH,EAAE,QAAQ,UAEZ,IAAI;AAAA,sBACN;AAIJ,uBAAK,IAAI,GAAG,KAAK,GAAG;AAElB,oBADA,IAAI,GAAG,CAAC,GACJ,GAAC,KAAK,EAAE,YAER,KAAK,iBAAiB,KAAM,IAAI,KAAK,SAAS,eAChD,mBAAmB,EAAE,SAAS,IAE9B,mBAAmB,EAAE,SAAS;AAIlC,sBAAI,KAAK,SAAS;AAEhB,yBADA,IAAI,CAAC,GACA,IAAI,IAAI,GAAG,IAAI,GAAG,QAAQ;AAE7B,sBADA,IAAI,GAAG,CAAC,GACJ,GAAC,KAAK,EAAE,WACR,EAAE,cACJ,iBAAiB,KAAK,IAAI,EAAE,YAAY,GAAG,KAAK,sBAAsB,GAClE,MAAM,EAAE,iBAAiB,KAAK,IAAI,kBACpC,MAAM,EAAE,iBAAiB,KAAK,gBAC9B,EAAE,QAAQ,mBAEV,EAAE,SAAS,EAAE,iBAAiB,KAAK,GACnC,IAAI,IAGF,KAAK,iBAAiB,KAAM,IAAI,KAAK,SAAS,eAChD,mBAAmB,EAAE,SAAS,IAE9B,mBAAmB,EAAE,SAAS;AAAA;AAKpC,yBAAK,IAAI,IAAI,GAAG,IAAI,GAAG,QAAQ;AAE7B,sBADA,IAAI,GAAG,CAAC,GACJ,GAAC,KAAK,EAAE,YAER,KAAK,iBAAiB,KAAM,IAAI,KAAK,SAAS,eAEhD,mBAAmB,EAAE,SAAS,IAE9B,mBAAmB,EAAE,SAAS;AAAA,gBAItC;AAEA,gBAAI,KAAK,iBAAiB,KAAK,oBAAoB,KAAK,iBACtD,MAAM,MAAM,KAAK,UAAU,kBAAkB,GAAI,GACjD,MAAM,aAAa,KAAK,cAAc,QAAQ,eAAe,IAG/D,KAAK,wBAAwB,GACzB,KAAK,SAAS,wBAChB,KAAK,kBAAkB,GAEzB,KAAK,QAAQ,KAAK,eAAe;AAAA,kBAC/B,mBAAmB,WAAW;AAAA,kBAC9B,cAAc,WAAW;AAAA,gBAC3B,CAAC;AAAA,cACH;AAAA,cACA,aAAa,CAAC,IAAI,eAAe;AAC/B,2BAAW,kBAAkB,UAAU,OAAO,4BAA4B;AAE1E,oBAAM,oBAAoB,WAAW,kBAAkB,GAAG,QAAQ,KAAK,KAAK,EAAE;AAC9E,gBAAI,KAAK,QAAQ,KAAK,uBAAuB,EAAE,kBAAkB,CAAC,EAAE,eAAe,MAAM,MACvF,KAAK,wBAAwB;AAE/B,oBAAI;AACJ,qBAAK,IAAI,GAAG,IAAI,GAAG,QAAQ;AAEzB,kBADA,IAAI,GAAG,CAAC,GACJ,GAAC,KAAK,EAAE,YACZ,WAAW,SAAS,CAAC,EAAE,aAEnB,EAAE,kBAAkB,YAAY,EAAE,oBACpC,KAAK,kBAAkB;AAG3B,qBAAK,kBAAkB,EAAI,GAC3B,KAAK,OAAO,GACZ,KAAK,QAAQ,KAAK,kBAAkB,EAAE,kBAAkB,CAAC,GACzD,OAAO,aAAa,KAAK,kBAAkB,GAC3C,KAAK,qBAAqB,OAAO,WAAW,MAAM;AAAE,uBAAK,uBAAuB;AAAA,gBAAO,GAAG,GAAG;AAAA,cAC/F;AAAA,YACF,CAAC;AAAA,UACH;AAAA,QACF;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,mBAAmB;AAK3B,UAJA,KAAK,SAAS,eAAgB,KAAK,SAAS,gBAAiB,KAAK,KAAK,SAAS,eAAgB,KAAK,QAAQ,SACzG,SAAS,KAAK,SAAS,cAAmC,EAAE,IAC5D,IAEA,KAAK,SAAS,YAAa,IAAI;AACjC,aAAK,gBAAgB,IACrB,KAAK,mBAAoB,KAAK,SAAS,YAAc,KAAK,SAAS;AACnE,YAAM,aAAa,KAAK,cAAc;AAEtC,aAAK,kBAAmB,KAAK,SAAS,eACjC,aAAa,KAAK,SAAS,YAC5B,KAAK,SAAS;AAAA,MACpB;AACE,aAAK,gBAAgB;AAAA,IAEzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYA,eAAe,mBAAoC,QAAkB;AACnE,UAAI,SAAmB,MACnB,WAAW;AACf,UAAI,OAAO,qBAAsB;AAC/B,iBAAS,KAAK,QAAQ,iBAAiB,GACvC,WAAW;AAAA,eACF,OAAO,qBAAsB;AACtC,iBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ;AACvC,UAAI,KAAK,QAAQ,CAAC,EAAE,OAAO,sBAAqB,SAAS,KAAK,QAAQ,CAAC,GAAG,WAAW;AAGzF,UAAI,CAAC;AACH;AAEF,UAAM,aAAa,KAAK,cAAc,GAAG,CAAC;AAC1C,WAAK,oBAAoB,QAAQ,UAAU,YAAY,UAAU,IAAO,QAAQ;AAAA,IAClF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUU,cAAc,WAAqB,CAAC,GAAY;AA10E5D;AA40EI,aAAO,CAAC,SAAS,oBACZ,CAAC,SAAS,mBACT,SAAS,kBAAkB,SAAS,mBACnC,cAAS,YAAT,YAAoB,KAAK;AAAA,IAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,gBAAgB,cAAuB,QAAkB;AAz1E3D;AA01EI,UAAM,qBAAqB,GAAE,UAAK,mBAAL,WAAqB;AAClD,MAAI,sBACF,KAAK,sBAAsB,GAE7B,KAAK,wBAAwB,cAAc,MAAM,GAC7C,sBACF,KAAK,yBAAyB;AAAA,IAElC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYU,wBAAwB,cAAuB,QAAkB;AA92E7E;AAi3EI,UADA,eAAe,gBAAgB,KAAK,SAAS,kBACzC,iBAAiB,qBAAqB,kBAAkB,iBAAiB,qBAAqB,WAAW;AAC3G,aAAK,sBAAsB;AAC3B;AAAA,MACF;AAEA,UAAI,iBAAiB,qBAAqB;AACxC;AAIF,WAAK,SAAS,SAAS,cAAc,QAAQ,IACzC,UAAK,WAAL,WAAa,eAAc,KAAK,iBAAiB,KAAK,OAAO,WAAW,IAAI;AAGhF,UAAM,aAAa,KAAK,cAAc,GAAG,CAAC,GACpC,gBAAgB,KAAK,sBAAsB,GAG7C,GACA,GACA,UACA,WAAW,IACX,aAAa,GACb,oBAAoB,GACpB,kBAAkB,GAClB,gBAAgB,GAChB,sBAAsB;AAC1B,WAAK,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ;AACnC,YAAI,KAAK,QAAQ,CAAC,GAClB,KAAK,oBAAoB,GAAG,GAAG,YAAY,UAAU,IAAO,CAAC,GAC7D,yBAAwB,OAAE,aAAF,mBAAY,kBAAiB,gBAAgB,SAAU,EAAE,SAAS,IAAM,KAAK,cAAc,EAAE,QAAQ,OAAI,OAAE,aAAF,mBAAY,YAAW,GACxJ,mBAAkB,OAAE,aAAF,mBAAY,kBAAiB,gBAAgB,SAAU,EAAE,SAAS,IAAM,KAAK,cAAc,EAAE,QAAQ,MAAI,OAAE,aAAF,mBAAY,YAAW,IAAI,EAAE,YAAY,GACpK,gBAAe,OAAE,aAAF,mBAAY,YAAW,GACtC,sBAAsB,OAAE,aAAF,WAAY,kBAAkB,MAAI,OAAE,aAAF,mBAAY,YAAW,GAC/E,oBAAoB,OAAE,aAAF,WAAY,mBAAkB,EAAE,YAAY;AAElE,UAAM,wBAAwB,aAAa;AAE3C,UAAI,iBAAiB,qBAAqB,mBAAmB;AAI3D,YAAI,WAAW,eAAc,gBAAK,wBAAL,mBAA0B,UAA1B,YAAmC;AAChE,uBAAe,qBAAqB,gBAEhC,KAAK,SAAS,sBAAsB,WAAW,KAAK,SAAS,sBAC/D,WAAW,KAAK,SAAS,oBACzB,eAAe,qBAAqB,qBAC3B,KAAK,SAAS,sBAAsB,WAAW,KAAK,SAAS,uBACtE,WAAW,KAAK,SAAS,oBACzB,eAAe,qBAAqB,oBAKtC,MAAM,MAAM,KAAK,YAAY,QAAQ;AAAA,MACvC;AAEA,UAAI,iBAAiB,qBAAqB;AACxC,YAAI,wBAAwB,KAAK,oBAAoB,gBAAgB;AAEnE,eAAK,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAExC,gBADA,IAAI,KAAK,QAAQ,CAAC,GACd,CAAC,KAAK,EAAE;AAAU;AAEtB,gBAAM,wBAAwB,gBAAgB;AAC9C,aAAI,OAAE,aAAF,WAAY,kBACd,WAAW,2BAAyB,OAAE,aAAF,mBAAY,YAAW,KAAK,wBAEhE,aAAY,OAAE,aAAF,mBAAY,YAAW,GAEjC,EAAE,qBAAqB,EAAE,SAAS,OAAO,aAC3C,WAAW,KAEb,EAAE,QAAQ;AAAA,UACZ;AAAA,iBACU,KAAK,SAAS,0CAA0C,oBAAoB,kBAAkB,gBAAgB,KAAK,SAAS,yCAAyC,OAC3K,gBAAgB;AAEpB,yBAAe,qBAAqB;AAAA,aAC/B;AAGL,cAAI,sBAAsB,oBAAoB,qBAC1C,2BAA2B,gBAAgB,sBAAsB;AACrE,eAAK,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ;AAEnC,YADA,IAAI,KAAK,QAAQ,CAAC,GACd,GAAC,KAAK,EAAE,YAEZ,WAAW,EAAE,SAAS,KAClB,OAAE,aAAF,mBAAY,kBAAiB,gBAAgB,UAAU,CAAC,KAAK,cAAc,EAAE,QAAQ,OACnF,OAAE,aAAF,WAAY,kBACd,WAAW,EAAE,YAAY,KAGzB,WAAW,2BAA2B,yBAAuB,OAAE,aAAF,mBAAY,YAAW,KAAK,GACrF,YAAY,EAAE,YAAY,OAC5B,WAAW,EAAE,YAAY,IAI3B,yBAAwB,OAAE,aAAF,mBAAY,YAAW,GAC/C,4BAA4B,YAG5B,KAAK,cAAc,EAAE,QAAQ,MAC/B,aAAY,OAAE,aAAF,mBAAY,YAAW,GAC/B,YAAY,EAAE,YAAY,OAC5B,WAAW,EAAE,YAAY,KAGzB,EAAE,oBAAoB,EAAE,UAAU,aACpC,WAAW,KAEb,EAAE,QAAQ;AAAA,QAEd;AAGF,UAAI,iBAAiB,qBAAqB;AAExC,aAAK,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ;AACnC,UAAI,CAAC,KAAK,QAAQ,CAAC,KAAK,KAAK,QAAQ,CAAC,EAAE,WAExC,aAAW,UAAK,QAAQ,CAAC,EAAE,aAAhB,mBAA0B,YAAW,GAC5C,KAAK,QAAQ,CAAC,EAAE,oBAAoB,KAAK,QAAQ,CAAC,EAAE,UAAU,aAChE,WAAW,KAEb,KAAK,QAAQ,CAAC,EAAE,QAAQ;AAI5B,WAAK,gBAAgB,QAAQ;AAAA,IAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAgBU,oBAAoB,WAAc,UAAkB,YAAyB,QAAiB,eAAuB;AAtgFjI;AAugFI,UAAM,WAAW,UAAU;AAI3B,UADA,SAAS,UAAU,UAAU,OACzB,SAAS,iBAAiB,gBAAgB,UACzC,SAAS,iBAAiB,gBAAgB;AAC7C;AAGF,UAAM,KAAK,KAAK,cAAc,GACxB,gBAAgB,IAAI,OAAO,gDAAgD;AAGjF,UAAI,SAAS,iBAAiB,gBAAgB,oBAAoB;AAEhE,YAAI,gBAAgB,SAAS,eACzB;AACJ,YAAI,KAAK,GAAG;AACV,cAAM,UAAU,KAAK,YAAY,CAAC;AAClC,UAAI,YACF,cAAc,QAAQ,UAAU,KAAoB,GAGhD,cAAc,KAAK,WAAW,MAAK,cAAc,KAAK,MAAM,WAAW,IAE3E,gBAAgB,OAAO,aACnB,kBAAkB,aAChB,uBAAuB,SAAQ,gBAAgB,SAC/C,OAAO,UAAW,eAAe,uBAAuB,WAAU,gBAAgB;AAAA,QAG5F;AACA,QAAI,kBAAkB,cACpB,SAAS,gBAAgB,CAAC,IAAM,EAAK,IAEnC,kBAAkB,aACpB,SAAS,kBAAkB,gBAAgB,mBAC3C,SAAS,mBAAmB,iBAAiB,UAE3C,kBAAkB,aACpB,SAAS,kBAAkB,gBAAgB,gBAC3C,SAAS,mBAAmB,iBAAiB,SAC7C,SAAS,mBAAmB,IAE1B,kBAAkB,WACpB,SAAS,gBAAgB,CAAC,IAAI,KAAK,MAAM,GAAG,IAAI,IAAI,IAAI,EAAE,CAAC,IAEzD,kBAAkB,YAAY,OAAO,UAAW,gBAClD,SAAS,gBAAgB,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,IAAI,IAAI,EAAE,CAAC,CAAC;AAAA,MAE/D;AAGA,UAAI,WAAW,SAAS,gBAAgB,KAAK,kBAAkB,WAAW,UAAU,YAAY,QAAQ,aAAa;AAErH,MAAI,aAAa,MACf,WAAW,SAAS,WAAW;AAGjC,UAAM,wBAAyB,SAAS,mBAAoB,IAAI,SAAS,mBAAmB,MAAO;AACnG,iBAAW,WAAW,yBAAyB,KAAK,SAAS,wBAAwB,IACjF,UAAU,YAAY,WAAW,UAAU,aAAY,WAAW,UAAU,WAC5E,UAAU,YAAY,WAAW,UAAU,aAAY,WAAW,UAAU,YAE5E,SAAS,iBAAiB,gBAAgB,sBAAuB,4CAAW,WAAX,WAA2B,uBAE1F,YAAY,UAAU,SAAS,OACjC,WAAW,UAAU,SAAS,IAGlC,SAAS,UAAU;AAAA,IACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAiBU,kBAAkB,WAAc,UAAkB,YAAyB,QAAiB,eAAuB;AAC3H,UAAM,WAAW,UAAU,UACvB,mBAAmB,GAKnB,GACA,SACA,SAAS,GACT,cAAc;AAalB,UAZA,SAAS,gBAAgB,GACpB,SAAS,qBACZ,SAAS,gBAAgB,KAAK,kBAAkB,SAAS,IAEvD,SAAS,kBAAkB,MAC7B,SAAS,gBAAiB,UAAU,QAAQ,UAAU,QACjD,UAAU,WAAW,UAAU,WAC7B,UAAU,WAAW,UAAU,WAAW,KAK/C,SAAS;AAEX,6BAAc,KAAK,YAAY,WAAW,YAAY,SAAS,aAAoB,GAC5E,KAAK,IAAI,SAAS,eAAe,WAAW;AAIrD,UAAM,UAAU,CAAC;AACjB,cAAQ,WAAW,UACnB,QAAQ,WAAW,KAAK,cAAc,GACtC,QAAQ,aAAa,GACrB,QAAQ,WAAW,QAAQ,WAAW,GACtC,QAAQ,WAAW,MACnB,QAAQ,YAAY,CAAC,MAAc,KAAK,YAAY,CAAC,EAAE,UAAU,KAAoB;AAErF,UAAM,oBAAoB,SAAS,SAAS,yBAAyB,WAAc,SAAS;AAO5F,UALI,qBAAqB,iBAAiB,aAAY,QAAQ,WAAW,IACrE,qBAAqB,iBAAiB,YAAW,QAAQ,WAAW,QAAQ,aAAa,QAAQ,WAAW,IAC5G,qBAAqB,iBAAiB,eAAc,QAAQ,WAAW,KAAK,IAAI,SAAS,qBAAqB,GAAG,QAAQ,QAAQ,IAAI,IAGrI,SAAS,oBAAoB,gBAAgB,aAAa;AAC5D,YAAM,WAAgB,CAAC;AACvB,aAAK,IAAI,QAAQ,YAAY,KAAK,QAAQ,UAAU;AAClD,mBAAS,QAAQ,UAAU,CAAC,CAAC,IAAI;AAEnC,YAAI,OAAO;AACT,kBAAQ,WAAW,OAAO,KAAK,QAAQ;AAAA,aAClC;AACL,kBAAQ,WAAW,CAAC;AACpB,mBAAW,KAAK;AACd,YAAI,YACF,QAAQ,SAAS,KAAK,CAAC;AAAA,QAG7B;AACA,gBAAQ,aAAa,GACrB,QAAQ,WAAW,QAAQ,SAAS;AAAA,MACtC;AAEA,UAAI,SAAS,oBAAoB,gBAAgB,mBAAmB;AAElE,YAAI,QACA,YAAY;AAChB,aAAK,IAAI,QAAQ,YAAY,KAAK,QAAQ,UAAU;AAClD,oBAAU,QAAQ,UAAU,CAAC,GACzB,KAAK,IAAI,OAAO,IAAI,cACtB,SAAS,SAAS,YAAY,KAAK,IAAI,OAAO;AAIlD,iBAAS,KAAK,QACd,SAAS,MAAM,OAAO,SAAS,CAAC,EAAE,KAAK,GAAG,GAC1C,SAAS,CAAC,QAEV,QAAQ,WAAW,CAAC,MAAM,GAC1B,QAAQ,aAAa,QAAQ,WAAW;AAAA,MAC1C;AAEA,UAAI,SAAS,oBAAoB,gBAAgB,sBAAsB;AAErE,aAAK,IAAI,QAAQ,YAAY,KAAK,QAAQ,UAAU;AAClD,oBAAU,QAAQ,UAAU,CAAC,IACxB,WAAW,IAAI,SAAS,WAAU,SAAS,QAAQ;AAG1D,kBAAU,MAAM,SAAS,CAAC,EAAE,KAAK,GAAG,GACpC,mBAAmB,KAAK,SAAS,gCAAgC,GAEjE,QAAQ,SAAS,QACjB,QAAQ,WAAW,CAAC,OAAO,GAC3B,QAAQ,aAAa,QAAQ,WAAW;AAAA,MAC1C;AAEA,UAAI,SAAS,oBAAoB,gBAAgB,gBAAgB;AAE/D,iBAAS;AAAG,YAAI,WAAW;AAC3B,aAAK,IAAI,QAAQ,YAAY,KAAK,QAAQ,UAAU;AAClD,oBAAU,QAAQ,UAAU,CAAC,IACxB,WAAW,IAAI,SAAS,WAAU,SAAS,QAAQ,QAAQ,WAAW;AAG7E,kBAAU,QAAQ,UAAU,QAAQ,GACpC,QAAQ,SAAS,QACjB,QAAQ,WAAW,CAAC,OAAO,GAC3B,QAAQ,aAAa,QAAQ,WAAW;AAAA,MAC1C;AAGA,aAAI,QAAQ,UAAU,QAAQ,SAAS,MAAM,gBAAgB,MAAK,SAAS,kBAAkB,KAC7F,cAAc,KAAK,YAAY,WAAW,YAAY,OAAO,IAAI,kBAC1D,KAAK,IAAI,SAAS,eAAe,WAAW;AAAA,IACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAcU,YAAY,WAAc,YAAyB,SAAkB;AAjuFjF;AAkuFI,UAAM,QAAQ,MAAM,iBAAiB,OAAO,EAAE,WAAW,8BAA8B,GAAG,UAAU,GAC9F,SAAS,MAAM,iBAAiB,OAAO,EAAE,WAAW,aAAa,GAAG,KAAK;AAE/E,aAAO,MAAM,WAAW,YACxB,OAAO,MAAM,aAAa,UAC1B,OAAO,MAAM,eAAe,WAC5B,OAAO,MAAM,aAAa;AAE1B,UAAI,GACA,KACA,MAAM,GACN,UAAU,IACV,iBACA,KAGA,YAAa,UAAU,SAAU,kBAAkB,cAAc;AAErE,YAAI,eAAU,aAAV,mBAAoB,mBAAkB,cAAc,MAAM;AAC5D,YAAM,cAAc,CAAC,UAAU,qBAAqB,CAAC,UAAU,WACzD,oBAAoB,4CAAW,sBAAX,mBAA+D,oBACnF,CAAC,UAAU,uBAAsB,eAAU,cAAV,mBAA6B;AACpE,oBAAY,eAAe;AAAA,MAC7B;AAGA,UAAI,KAAK,kBAAkB,WAAW;AACpC,YAAM,QAAQ,iBAAiB,MAAM;AAErC,aADA,KAAK,eAAe,OAAO,MAAM,WAAW,MAAM,MAAM,YACnD,IAAI,QAAQ,YAAY,KAAK,QAAQ,UAAU;AAElD,gBAAO,QAAQ,WAAW,QAAQ,SAAS,CAAC,IAAI,QAAQ,UAAU,CAAC,GAC/D,UAAU,oBAEZ,kBAAmB,UAAU,kBAAgD,GAAG,QAAQ,UAAU,KAAK,WAAW,KAAK,YAAY,CAAC,GAAG,IAAiC,IAC/J,UAAU,YAEnB,kBAAkB,UAAU,UAAU,GAAG,QAAQ,UAAU,KAAK,WAAW,KAAK,YAAY,CAAC,GAAG,IAAiC,IAGjI,kBAAkB,KAAK,KAEzB,MAAM,kBAAkB,KAAK,eAAe,YAAY,eAAyB,EAAE,QAAQ,GACvF,MAAM,QACR,MAAM,KACN,UAAU;AAId,sBAAO,cAAc,SACrB,MAAM,OAAO,aAEb,MAAM,OAAO,GACN;AAAA,MACT;AAEA,WAAK,IAAI,QAAQ,YAAY,KAAK,QAAQ,UAAU;AAClD,cAAO,QAAQ,WAAW,QAAQ,SAAS,CAAC,IAAI,QAAQ,UAAU,CAAC,GAC/D,UAAU,oBAEZ,kBAAmB,UAAU,kBAAgD,GAAG,QAAQ,UAAU,KAAK,WAAW,KAAK,YAAY,CAAC,GAAG,IAAiC,IAC/J,UAAU,YAEnB,kBAAkB,UAAU,UAAU,GAAG,QAAQ,UAAU,KAAK,WAAW,KAAK,YAAY,CAAC,GAAG,IAAiC,IAGjI,kBAAkB,KAAK,KAEzB,KAAK,4BAA4B,iBAAiB,MAAM,GACxD,MAAM,OAAO,aACT,MAAM,QAAO,MAAM;AAGzB,mBAAM,OAAO,GACN;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYU,kBAAkB,WAAc;AACxC,UAAI,QAAQ,GAEN,gBAAgB,KAAK,OAAO,IAAI,UAAU,IAC5C,cAAc,SAAS,eAAe,aAAa,GACjD,qBAAqB,GAAG,aAAa,KACrC,QAAQ,YAAY,UAAU,EAAI;AACxC,UAAI;AAEF,cAAM,KAAK,oBACX,MAAM,MAAM,UAAU,kGACtB,YAAY,WAAY,aAAa,OAAO,WAAW,GACvD,QAAQ,MAAM,aACd,MAAM,WAAY,YAAY,KAAK;AAAA,WAC9B;AAEL,YAAM,SAAS,KAAK,UAAU,SAAS;AACvC,sBAAc,MAAM,iBAAiB,OAAO,EAAE,IAAI,oBAAoB,WAAW,2DAA2D,GAAG,MAAM;AACrJ,YAAM,aAAa,MAAM,iBAAiB,QAAQ,EAAE,WAAW,oBAAoB,GAAG,WAAW;AACjG,aAAK,cAAc,YAAY,UAAU,IAAK,GAC9C,MAAM,MAAM,UAAU,kGAClB,UAAU,kBACZ,YAAY,UAAU,IAAI,GAAG,MAAM,gBAAgB,UAAU,cAAc,CAAC,GAE9E,QAAQ,YAAY,aACpB,OAAO,YAAY,WAAW;AAAA,MAChC;AACA,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,wBAAwB;AAChC,UAAI,GACA,GACA,eAAe,GACf,QAAQ,GACR,YAAY,GACV,SAAmB,CAAC,GACpB,aAAa,KAAK,sBAAsB;AAE9C,WAAK,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAExC,YADA,IAAI,KAAK,QAAQ,CAAC,GACd,CAAC,KAAK,EAAE,QAAQ;AAClB,iBAAO,KAAK,CAAC;AACb;AAAA,QACF;AACA,eAAO,KAAK,EAAE,SAAS,CAAC,GACxB,SAAS,EAAE,SAAS,GAChB,EAAE,cACJ,iBAAiB,EAAE,SAAS,KAAK,KAAK,IAAK,EAAE,YAAY,GAAI,KAAK,sBAAsB;AAAA,MAE5F;AAIA,WADA,YAAY,OACL,QAAQ,cAAc,gBAAc;AACzC,YAAM,oBAAoB,QAAQ,cAAc;AAChD,aAAK,IAAI,GAAG,IAAI,KAAK,QAAQ,UAAU,QAAQ,YAAY,KAAK;AAE9D,cADA,IAAI,KAAK,QAAQ,CAAC,GACd,CAAC,KAAK,EAAE;AAAU;AACtB,cAAM,QAAQ,OAAO,CAAC;AACtB,cAAI,CAAC,EAAE,aAAa,SAAS,EAAE,YAAa,SAAS,KAAK;AACxD;AAEF,cAAM,cAAc,KAAK,IAAI,EAAE,UAAW,KAAK,sBAAsB,GACjE,aAAa,KAAK,MAAM,oBAAoB,QAAQ,YAAY,KAAK;AACzE,uBAAa,KAAK,IAAI,YAAY,QAAQ,WAAW,GACrD,SAAS,YACT,gBAAgB,YAChB,OAAO,CAAC,KAAK;AAAA,QACf;AACA,YAAI,aAAa;AACf;AAEF,oBAAY;AAAA,MACd;AAIA,WADA,YAAY,OACL,QAAQ,cAAY;AACzB,YAAM,iBAAiB,aAAa;AACpC,aAAK,IAAI,GAAG,IAAI,KAAK,QAAQ,UAAU,QAAQ,YAAY,KAAK;AAE9D,cADA,IAAI,KAAK,QAAQ,CAAC,GACd,CAAC,KAAK,EAAE;AAAU;AACtB,cAAM,eAAe,OAAO,CAAC,GACzB;AAEJ,UAAI,CAAC,EAAE,aAAa,EAAE,YAAa,eACjC,WAAW,IAEX,WAAW,KAAK,IAAI,KAAK,MAAM,iBAAiB,YAAY,IAAI,cAAe,EAAE,WAAY,gBAAiB,GAAO,KAAK,GAE5H,SAAS,UACT,OAAO,CAAC,KAAM,SAAS,aAAa,WAAW;AAAA,QACjD;AACA,YAAI,aAAa;AACf;AAEF,oBAAY;AAAA,MACd;AAEA,UAAI,WAAW;AACf,WAAK,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ;AACnC,QAAI,CAAC,KAAK,EAAE,WAER,KAAK,QAAQ,CAAC,EAAE,oBAAoB,KAAK,QAAQ,CAAC,EAAE,UAAU,OAAO,CAAC,MACxE,WAAW,KAEb,KAAK,QAAQ,CAAC,EAAE,QAAQ,OAAO,CAAC;AAGlC,WAAK,gBAAgB,QAAQ;AAAA,IAC/B;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,gBAAgB,UAAoB;AAClC,WAAK,wBAAwB,GAC7B,KAAK,kBAAkB,EAAI,GAE3B,KAAK,QAAQ,KAAK,mBAAmB,EAAE,SAAS,KAAK,QAAQ,CAAC,GAE1D,aACF,KAAK,kBAAkB,GACvB,KAAK,OAAO;AAAA,IAEhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,oBAAoB;AAClB,aAAO,KAAK,QAAQ,OAAO,OAAK,CAAC,EAAE,MAAM;AAAA,IAC3C;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,eAAe,IAA6B;AAC1C,aAAO,KAAK,YAAY,EAAE;AAAA,IAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASU,0BAA0B;AAClC,UAAI,CAAC,KAAK;AACR;AAGF,UAAI,cAAc,GACZ,KAAK,KAAK,kBAAkB;AAClC,WAAK,SAAS,QAAQ,CAAC,WAAW;AAChC,iBAAS,IAAI,GAAG,IAAI,OAAO,SAAS,QAAQ,KAAK,eAAe;AAC9D,cAAM,IAAI,OAAO,SAAS,CAAC,GAErB,UADM,GAAG,WAAW,KAAK,CAAC,GACb,SAAS,KAAK,KAAK;AACtC,UAAI,MAAM,MAAM,CAAC,MAAM,SACrB,MAAM,MAAM,GAAG,KAAK;AAAA,QAExB;AAAA,MACF,CAAC,GAED,KAAK,mBAAmB;AAAA,IAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOU,oBAAoB;AAl/FhC;AAm/FI,UAAI,IAAI,GACJ,IAAI,GACJ;AACJ,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ;AACvC,SAAK,UAAK,QAAQ,CAAC,MAAd,WAAiB,WACpB,IAAI,KAAK,QAAQ,CAAC,EAAE,SAAS,GAE7B,OAAO,KAAK,kBAAkB,CAAC,GAC/B,KAAK,KAAK,MAAM,OAAO,GAAG,CAAC,MAC3B,KAAK,MAAM,MAAM,SAAW,KAAK,SAAS,iBAAiB,MAAM,IAAI,KAAK,SAAS,eAAiB,KAAK,eAAe,KAAK,gBAAgB,IAAI,IAAK,MAIlJ,KAAK,SAAS,iBAAiB,MACjC,KAAK,KAAK,QAAQ,CAAC,EAAE,SAGrB,KAAK,SAAS,iBAAiB,MACjC,IAAI;AAAA,IAGV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWA,cAAc,UAA2B,WAAoB;AAC3D,WAAK,eAAe,CAAC,EAAE,UAAU,SAAS,UAAU,CAAC,CAAC;AAAA,IACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,iBAAiB,IAAY;AAC3B,UAAI;AACJ,kBAAK,SAAS,MAAM,CAAC,WAAW;AAC9B,YAAM,SAAS,OAAO,SAAS;AAC/B,eAAI,KAAK,UACP,SAAS,OAAO,SAAS,EAAE,GACpB,OAET,MAAM,QACC;AAAA,MACT,CAAC,GAEM;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,eAAe,MAAoB;AACjC,WAAK,cAAc;AAEnB,UAAM,aAAa,KAAK,SAAS,2BAA2B,KAAK,YAAY,SAAS;AACtF,WAAK,SAAS,QAAQ,CAAC,WAAW;AAChC,YAAI,aAAa,OAAO,iBAAiB,6BAA6B;AACtE,mBAAW,QAAQ,CAAC,cAAc;AAChC,oBAAU,UAAU,OAAO,4BAA4B;AAAA,QACzD,CAAC,GAED,aAAa,OAAO,iBAAiB,uBAAuB,GAC5D,WAAW,QAAQ,CAAC,cAAc;AAChC,oBAAU,UAAU,OAAO,0BAA0B,GACrD,UAAU,UAAU,OAAO,2BAA2B;AAAA,QACxD,CAAC,GACD,aAAa,OAAO,iBAAiB,gCAAgC,GACrE,WAAW,QAAQ,CAAC,OAAO;AACzB,aAAG,cAAc;AAAA,QACnB,CAAC;AAAA,MACH,CAAC;AAED,UAAI,IAAI;AACR,WAAK,YAAY,QAAQ,CAAC,QAAQ;AAChC,QAAK,MAAM,UAAU,IAAI,OAAO,MAC9B,IAAI,UAAU;AAGhB,YAAM,cAAc,KAAK,eAAe,IAAI,QAAQ;AACpD,YAAI,MAAM,UAAU,WAAW,GAAG;AAChC,cAAM,SAAS,KAAK,iBAAiB,WAAW;AAChD,cAAI,QAAQ;AACV,mBAAO,UAAU,IAAI,4BAA4B;AACjD,gBAAI,YAAY,OAAO,cAAc,uBAAuB;AAC5D,2CAAW,UAAU,IAAI,IAAI,UAAU,6BAA6B,8BAEhE,eACF,YAAY,OAAO,cAAc,gCAAgC,GAC7D,cACF,UAAU,cAAc,OAAO,CAAC;AAAA,UAGtC;AAAA,QACF;AACA;AAAA,MACF,CAAC;AAAA,IACH;AAAA;AAAA,IAGA,aAAa;AACX,aAAO,KAAK;AAAA,IACd;AAAA;AAAA,IAGA,iBAA+B;AAC7B,aAAO,KAAK;AAAA,IACd;AAAA;AAAA;AAAA;AAAA;AAAA,IAMU,qBAAqB;AAE7B,WAAK,gBAAgB,CAAC,GACtB,KAAK,iBAAiB,CAAC;AACvB,UAAI,IAAI;AACR,eAAS,IAAI,GAAG,KAAK,KAAK,QAAQ,QAAQ,IAAI,IAAI;AAChD,QAAI,CAAC,KAAK,QAAQ,CAAC,KAAK,KAAK,QAAQ,CAAC,EAAE,WAExC,KAAK,cAAc,CAAC,IAAI,GACxB,KAAK,eAAe,CAAC,IAAI,KAAK,KAAK,QAAQ,CAAC,EAAE,SAAS,IAEnD,KAAK,SAAS,iBAAiB,IACjC,IAAI,IAEJ,KAAK,KAAK,QAAQ,CAAC,EAAE,SAAS;AAAA,IAGpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,oBAAoB;AAC5B,WAAK,cAAc,CAAC;AACpB,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC5C,YAAI,IAAO,KAAK,QAAQ,CAAC;AACzB,QAAI,EAAE,UACJ,EAAE,eAAe,EAAE,QAGjB,KAAK,SAAS,iBAChB,MAAM,cAAc,GAAG,KAAK,eAAe,GACtC,EAAE,aAAY,EAAE,WAAW,CAAC,IACjC,MAAM,cAAc,EAAE,UAAU,KAAK,uBAAuB,MAE5D,IAAI,KAAK,QAAQ,CAAC,IAAI,MAAM,OAAO,CAAC,GAAG,KAAK,iBAAiB,CAAC,GAC9D,EAAE,WAAW,MAAM,OAAO,CAAC,GAAG,KAAK,yBAAyB,EAAE,QAAQ,IAGxE,KAAK,YAAY,EAAE,EAAE,IAAI,GACrB,EAAE,aAAc,EAAE,SAAS,KAAK,EAAE,aACpC,EAAE,QAAQ,EAAE,WAEV,EAAE,aAAc,EAAE,SAAS,KAAK,EAAE,aACpC,EAAE,QAAQ,EAAE;AAAA,MAEhB;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,WAAW,mBAAwB;AACjC,WAAK,QAAQ,KAAK,oBAAoB,EAAE,iBAAiB,KAAK,SAAS,YAAY,mBAAmB,MAAM,KAAK,CAAC,GAClH,KAAK,UAAU,mBACf,KAAK,sBAAsB,GAC3B,KAAK,QAAQ,KAAK,mBAAmB,EAAE,YAAY,mBAAmB,MAAM,KAAK,CAAC;AAAA,IACpF;AAAA;AAAA,IAGA,gBAAgB;AACd,WAAK,QAAQ,KAAK,uBAAuB,EAAE,SAAS,KAAK,SAAS,MAAM,KAAK,CAAC,GAC9E,KAAK,sBAAsB;AAAA,IAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,IAMU,wBAAwB;AA5rGpC;AA6rGI,WAAK,kBAAkB,GACvB,KAAK,mBAAmB,GAEpB,KAAK,gBACP,KAAK,qBAAqB,GAC1B,KAAK,kBAAkB,GACvB,KAAK,YAAY,GAEjB,KAAK,kBAAkB,GACvB,KAAK,oBAAoB,GACzB,KAAK,mBAAmB,GACxB,KAAK,eAAe,GACpB,KAAK,eAAe,GACpB,KAAK,aAAa,GAClB,KAAK,kBAAkB,GACvB,KAAK,wBAAwB,GAC7B,KAAK,kBAAkB,GACvB,KAAK,aAAa,IAClB,UAAK,kBAAkB,MAAvB,WAA0B;AAAA,IAE9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWA,gBAAgB;AACd,aAAO,KAAK,SAAS;AAAA,IACvB;AAAA;AAAA,IAGA,oBAAoB;AAClB,aAAO,KAAK;AAAA,IACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,QAAQ,SAA0C,aAAuB;AACvE,WAAK,OAAO,SACZ,KAAK,kBAAkB,GACvB,KAAK,eAAe,GAChB,eACF,KAAK,SAAS,CAAC;AAAA,IAEnB;AAAA;AAAA,IAGA,UAAoD;AAClD,aAAO,KAAK;AAAA,IACd;AAAA;AAAA,IAGA,gBAAgB;AAzvGlB;AA0vGI,aAAK,KAAK,KAA+B,YAC/B,KAAK,KAA+B,UAAU,KAE9C,gBAAK,SAAL,mBAAuB,WAAvB,YAAiC;AAAA,IAE7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOU,+BAA+B;AACvC,aAAO,KAAK,cAAc,KAAM,KAAK,SAAS,iBACzC,CAAC,KAAK,gBAAgB,KAAK,oBAAmB,IADU;AAAA,IAG/D;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,YAAY,GAAkB;AAC5B,aAAK,KAAK,KAAwB,UACxB,KAAK,KAA+B,QAAQ,CAAC,IAE7C,KAAK,KAAiB,CAAC;AAAA,IAEnC;AAAA;AAAA,IAGA,cAAc;AACZ,aAAO,CAAC,MAAM,QAAQ,KAAK,IAAI;AAAA,IACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,wBAAwB,KAAkC;AACxD,aAAO,qBAAqB,KAAK,OAAQ,KAAK,KAA+B,gBAAgB,GAAG,IAAI;AAAA,IACtG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUU,aAAa,KAAa,QAAsB;AA9yG5D;AA+yGI,UAAM,eAAe,gBAAK,SAAL,mBAAqC,oBAArC,4BAAuD,MAGtE,mBAAkB,2CAAa,aAClC,YAAY,QAAQ,OAAO,EAAE,KAAK,YAAY,QAAQ,KAAK,eAAe,OAAO,EAAE,CAAC;AAEvF,cAAS,mDAAiB,eACvB,2CAAa,cACd,OAAO,eACN,UAAK,SAAS,qBAAd,mBAAgC,aAAa,YAC9C,KAAK,SAAS;AAAA,IAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUU,UAAU,KAAa,MAA6D;AAp0GhG;AAq0GI,UAAM,SAAS,KAAK,QAAQ,IAAI,GAC1B,cAAc,KAAK,wBAAwB,GAAG,GAC9C,iBAAiB,2CAAa;AAEpC,eAAI,sDAAiB,OAAO,QAAxB,mBAA6B,YAAW,SACnC,eAAe,OAAO,EAAE,EAAE,WAE/B,sDAAiB,UAAjB,mBAAwB,YAAW,SAC9B,eAAe,IAAI,EAAE,SAGtB,OAAO,YAAW,gBAAK,aAAL,mBAAe,kBAAf,mBAA8B,UAAU;AAAA,IACpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUU,0BAA0B,MAAa,WAAc;AAC7D,aAAI,KAAK,SAAS,+BACT,KAAK,SAAS,6BAA6B,MAAM,SAAS,IAE5D,KAAK,UAAU,KAAoB;AAAA,IAC5C;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,kBAAkB;AAChB,WAAK,sBAAsB,MAAM,EAAK;AAAA,IACxC;AAAA;AAAA,IAGA,kBAAkB;AA52GpB;AA62GI,MAAI,MAAM,UAAU,KAAK,cAAc,MACrC,KAAK,qBAAqB,GAC1B,KAAK,eAAe,UAAU,OAAO,QAAQ,IAC7C,gBAAK,UAAU,KAAK,SAAS,MAA7B,mBAAgC,YAAhC,WAAyC,QAAQ,CAAC,SAAS,KAAK,UAAU,OAAO,QAAQ;AAAA,IAE7F;AAAA;AAAA,IAGA,QAAQ;AACN,WAAK,SAAS;AAAA,IAChB;AAAA;AAAA,IAGU,WAAW;AACnB,MAAI,KAAK,qBAAqB,KAC5B,KAAK,WAAW,MAAM,IAEtB,KAAK,YAAY,MAAM;AAAA,IAE3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAgBU,sBAAsB,SAAgC,cAA+B,gBAAiC,gCAA0C,GAAyB;AAh5GrM;AAu5GI,UALA,KAAK,gBAAgB,GAGrB,KAAK,iBAAiB,SAElB,MAAM,UAAU,KAAK,cAAc,GAAG;AACxC,YAAM,mBAAmB,MAAM,OAAO,KAAK,cAAc,GACrD,YAAY,KAAK,MAAM,MAAM,OAAO,MAAM,QAAQ,KAAK,gBAAgB,cAAc,EAAE,CAAC,CAAgB,EAAG,GAAG,GAC5G,WAAW,MAAM,QAAQ,KAAK,gBAAgB,qBAAqB,EAAE;AAE3E,QAAI,KAAK,iBAAiB,aACxB,aAAc,KAAK,SAAS,eACxB,MAAM,OAAO,KAAK,WAAW,IAC7B,KAAK;AAGX,YAAM,OAAO,KAAK,iBAAiB,iBAAkB,MAAM,KAAK,KAAK,iBAAkB,GAAG,IAAI,SAAS;AACvG,aAAK,YAAY,KAAK,KACtB,KAAK,aAAa,KAAK,KACvB,KAAK,aAAa,KAAK,aAAa,KAAK,gBAAgB,KAAK,cAAc,GAExE,CAAC,MAAM,UAAU,YAAY,KAAK,KAAK,SAAS,mBAClD,eAAgB,KAAK,cAAc,KAAK,cAAc,KAAM,KAAK,SAAS,WAGxE,KAAK,SAAS,sBAEhB,SAAS,iBAAiB,oBAAoB,EAAE,QAAQ,CAAC,SAAS,KAAK,UAAU,OAAO,QAAQ,CAAC,GACjG,KAAK,eAAe,UAAU,IAAI,QAAQ,IAC1C,gBAAK,UAAU,KAAK,SAAS,MAA7B,mBAAgC,YAAhC,WAAyC,QAAQ,CAAC,SAAS,KAAK,UAAU,IAAI,QAAQ,KAGpF,KAAK,SAAS,YAAY,gBAAgB,KAAK,0BAA0B,KAAK,WAAW,KAAK,UAAU,MACtG,KAAK,SAAS,sBAChB,OAAO,aAAa,KAAK,cAAc,GACvC,KAAK,iBAAiB,OAAO,WAAW,MAAM;AAC5C,eAAK,uBAAuB,QAAW,gBAAgB,CAAC;AAAA,QAC1D,GAAG,KAAK,SAAS,oBAAoB,KAErC,KAAK,uBAAuB,QAAW,gBAAgB,CAAC;AAAA,MAG9D;AACE,aAAK,YAAY,KAAK,aAAa;AAKrC,MAAK,kCACH,KAAK,QAA6C,KAAK,qBAAqB,KAAK,cAAc,CAAiC;AAAA,IAGpI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWU,0BAA0B,KAAa,MAAc;AAC7D,UAAM,aAAa,KAAK,cAAc;AAYtC,aAVI,QAAM,cAAc,CAAC,KAAK,YAAY,GAAG,KAKzC,KAAK,QAAQ,IAAI,EAAE,uBAAuB,OAAO,cAKjD,CAAC,KAAK,QAAQ,IAAI,KAAK,KAAK,QAAQ,IAAI,EAAE,UAAU,CAAC,KAAK,UAAU,KAAK,IAAI;AAAA,IAKnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAcU,qBAAqB,oBAAoB,IAAO;AAj/G5D;AAk/GI,UAAK,KAAK,eAOV;AAAA,YAJA,KAAK,QAAQ,KAAK,2BAA2B,EAAE,QAAQ,KAAK,cAAc,CAAC,GAC3E,KAAK,cAAc,QAAQ,GAC3B,KAAK,gBAAgB,MAEjB,KAAK,gBAAgB;AACvB,cAAM,IAAI,KAAK,YAAY,KAAK,SAAS;AAGzC,cAFA,KAAK,eAAe,UAAU,OAAO,UAAU,GAC/C,KAAK,eAAe,UAAU,OAAO,SAAS,GAC1C,GAAG;AACL,gBAAM,SAAS,KAAK,QAAQ,KAAK,UAAU,GAErC,kBADY,KAAK,aAAa,KAAK,WAAW,MAAM,EACxB,KAAK,WAAW,KAAK,YAAY,KAAK,0BAA0B,GAAG,MAAM,GAAG,QAAQ,GAAG,IAAiC;AAC1J,iBAAK,4BAA4B,iBAAiB,KAAK,cAAc,GACrE,KAAK,gCAAgC,KAAK,SAAS;AAAA,UACrD;AACA,UAAI,qBACF,KAAK,SAAS;AAAA,QAElB;AAIA,QAAI,UAAU,UAAU,YAAY,EAAE,MAAM,MAAM,KAChD,KAAK,mBAAmB,IAG1B,UAAK,cAAc,MAAnB,WAAsB,WAAW,KAAK;AAAA;AAAA,IACxC;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,eAAe,QAA2B,gBAAiC,GAAW;AACpF,WAAK,uBAAuB,QAAQ,gBAAgB,CAAC;AAAA,IACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWU,uBAAuB,QAA4B,gBAAiC,GAAyB;AAniHzH;AAoiHI,UAAI,CAAC,KAAK;AACR;AAEF,UAAI,CAAC,KAAK,SAAS;AACjB,cAAM,IAAI,MAAM,iGAAiG;AAMnH,UAFA,OAAO,aAAa,KAAK,cAAc,GAEnC,CAAC,KAAK,0BAA0B,KAAK,WAAW,KAAK,UAAU;AACjE;AAGF,UAAM,YAAY,KAAK,QAAQ,KAAK,UAAU,GACxC,OAAO,KAAK,YAAY,KAAK,SAAS;AAE5C,UAAI,KAAK,QAAQ,KAAK,kBAAkB,EAAE,KAAK,KAAK,WAAW,MAAM,KAAK,YAAY,MAAM,QAAQ,WAAW,QAAQ,OAAO,CAAC,EAAE,eAAe,MAAM,IAAO;AAC3J,aAAK,SAAS;AACd;AAAA,MACF;AAEA,iBAAK,cAAc,MAAnB,WAAsB,SAAS,KAAK,iBACpC,KAAK,eAAe,UAAU,IAAI,UAAU;AAE5C,UAAM,YAAY,UAAU,KAAK,UAAU,KAAK,WAAW,KAAK,UAAU;AAG1E,UAAI,CAAC,aAAa,OAAO,aAAc;AACrC;AAIF,MAAI,CAAC,UAAU,CAAC,UAAU,uBACxB,MAAM,aAAa,KAAK,cAAc;AAGxC,UAAI,WAAW,KAAK,wBAAwB,KAAK,SAAS;AAC1D,iBAAW,qCAAU;AACrB,UAAM,iBAAiB,aAAa,SAAS,UAAU,EAAwB,KAAM,SAAiB,KAAK,UAAU,IAG/G,aAA2C;AAAA,QAC/C,MAAM;AAAA,QACN,cAAc,KAAK,OAAO,KAAK,UAAU;AAAA,QACzC,UAAU,KAAK,OAAO,KAAK,cAAc;AAAA,QACzC,WAAW,KAAK;AAAA,QAChB,QAAQ;AAAA,QACR;AAAA,QACA,MAAM,QAAQ,CAAC;AAAA,QACf,OAAO;AAAA,QACP,eAAe,KAAK,sBAAsB,KAAK,IAAI;AAAA,QACnD,eAAe,KAAK,sBAAsB,KAAK,IAAI;AAAA,MACrD;AAEA,WAAK,gBAAgB,IAAI,UAAU,UAAU,GAEzC,QAAQ,KAAK,kBACf,KAAK,cAAc,UAAU,IAAI,GAC7B,oBAAkB,UAAK,kBAAL,WAAoB,aACxC,KAAK,cAAc,SAAS,IAIhC,KAAK,yBAAwB,UAAK,kBAAL,mBAAoB,mBAE7C,UAAK,kBAAL,WAAoB,YACtB,KAAK,+BAA+B;AAAA,IAExC;AAAA;AAAA;AAAA;AAAA;AAAA,IAMU,wBAAwB;AA/mHpC;AAknHI,OAAI,UAAK,cAAc,MAAnB,WAAsB,wBACxB,KAAK,SAAS,GACV,KAAK,SAAS,YAAY,CAAC,KAAK,SAAS,kBAC3C,KAAK,aAAa;AAAA,IAGxB;AAAA;AAAA;AAAA;AAAA,IAKU,wBAAwB;AA7nHpC;AA8nHI,OAAI,UAAK,cAAc,MAAnB,WAAsB,uBACxB,KAAK,SAAS;AAAA,IAElB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUU,oBAAoB;AA3oHhC;AA4oHI,UAAM,OAAO,MACP,OAAO,KAAK,YAAY,KAAK,SAAS,GACtC,SAAS,KAAK,QAAQ,KAAK,UAAU;AAE3C,UAAI,KAAK,eAAe;AACtB,YAAI,KAAK,cAAc,eAAe,GAAG;AACvC,cAAM,oBAAoB,KAAK,cAAc,SAAS;AAEtD,cAAI,kBAAkB,OAAO;AAC3B,gBAAM,MAAM,KAAK,WACX,OAAO,KAAK,YACZ,SAAS,KAAK,eACd,kBAAkB,KAAK,cAAc,eAAe,GACpD,sBAAsB,KAAK;AAEjC,gBAAI,KAAK,YAAY,KAAK,cAAc,GAAG;AACzC,kBAAM,cAAc;AAAA,gBAClB;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA,SAAS,MAAM;AACb,yBAAO,WAAW,MAAM,eAAe,GACvC,KAAK,UAAU,GAAG,GAClB,KAAK,QAAQ,KAAK,cAAc,EAAE,SAAS,WAAW,KAAK,MAAM,MAAM,OAAO,CAAC;AAAA,gBACjF;AAAA,gBACA,MAAM,MAAM;AACV,yBAAO,WAAW,MAAM,mBAAmB,GAC3C,KAAK,UAAU,GAAG,GAClB,KAAK,QAAQ,KAAK,cAAc,EAAE,SAAS,QAAQ,KAAK,MAAM,MAAM,OAAQ,CAAC;AAAA,gBAC/E;AAAA,cACF;AAEA,cAAI,KAAK,SAAS,sBAChB,KAAK,qBAAqB,EAAI,GAC9B,KAAK,SAAS,mBAAmB,MAAM,QAAQ,WAAW,MAE1D,YAAY,QAAQ,GACpB,KAAK,qBAAqB,EAAI;AAAA,YAGlC,OAAO;AACL,kBAAM,UAAU,CAAC;AACjB,mBAAK,cAAc,WAAW,SAAS,KAAK,cAAc,eAAe,CAAC,GAC1E,KAAK,qBAAqB,EAAI,GAC9B,KAAK,QAAQ,KAAK,aAAa,EAAE,MAAM,SAAS,OAAO,CAAC;AAAA,YAC1D;AAGA,mBAAO,GAAC,UAAK,cAAc,MAAnB,WAAsB;AAAA,UAChC;AAEE,mBAAI,KAAK,mBACP,KAAK,eAAe,UAAU,OAAO,SAAS,GAC9C,MAAM,MAAM,KAAK,cAAc,GAC/B,KAAK,eAAe,UAAU,IAAI,SAAS,IAG7C,KAAK,QAAQ,KAAK,mBAAmB;AAAA,cACnC,QAAQ,KAAK;AAAA,cACb,UAAU,KAAK;AAAA,cACf;AAAA,cACA,KAAK,KAAK;AAAA,cACV,MAAM,KAAK;AAAA,cACX;AAAA,YACF,CAAC,GAED,KAAK,cAAc,MAAM,GAClB;AAAA,QAEX;AAEA,aAAK,qBAAqB,EAAI;AAAA,MAChC;AACA,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOU,oBAAoB;AAC5B,kBAAK,qBAAqB,GACnB;AAAA,IACT;AAAA;AAAA,IAGA,kBAAkB;AAChB,UAAI,CAAC,KAAK;AACR,cAAM,IAAI,MAAM,sCAAsC;AAExD,aAAO,KAAK,aAAa,MAAM,CAAC;AAAA,IAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,gBAAgB,MAAgB,QAAiB;AAjvHnD;AAkvHI,UAAI,CAAC,KAAK;AACR,cAAM,IAAI,MAAM,sCAAsC;AAExD,MAAI,QAAQ,KAAK,iBAAiB,GAAC,UAAK,cAAc,MAAnB,WAAsB,eACvD,KAAK,eAAe,kBAAkB,KAAK,aAAa,IAAI,GAAG,UAAU,2BAA2B;AAAA,IAExG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAgBU,QAAuB,KAAkB,MAAgB,GAA6B;AAC9F,UAAM,QAA0B,KAAK,IAAI,eAAe,GAAG,IAAI,GACzD,YAAa,QAAQ,CAAC;AAC5B,uBAAU,OAAO,MACV,IAAI,OAAO,WAAW,OAAO,IAAI;AAAA,IAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,mBAAmB,GAA0C;AACrE,WAAK,QAAQ,KAAK,cAAc,CAAC,GAAG,CAAC;AAAA,IACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,yBAAyB,GAA4B;AAC7D,MAAC,eAAW,OAAO,UAAU,IAAI,kBAAkB;AAAA,IACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,0BAA0B,GAA4B;AAC9D,MAAC,eAAW,OAAO,UAAU,OAAO,kBAAkB;AAAA,IACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWU,4BAA4B,GAAoB,QAAuB;AAtzHnF;AAuzHI,UAAM,KAAK,EAAE,eAA4B,GACnC,iBAAgB,oCAAI,WAAJ,mBAAY,kBAAZ,YAA6B,IAG7C,qBAAqB,KAAK,eAAe,MAAM,CAAC;AAGtD,UAFA,KAAK,iBAAiB,QAElB,kBAAkB,kBAAkB,WACnC,sBAAsB,mBAAmB,WAAW,KACpD,KAAK,kBAAkB,KAAK,eAAe,WAAW,GAAG;AAC5D,YAAM,oBAAoB,mBAAmB,CAAC,GAExC,6BAA6B,kBAAkB,QAAQ,kBAAkB,UAAU,GACnF,8BAA8B,kBAAkB,SAAS,kBAAkB,WAAW,GAEtF,gBAAgB,KAAK,eAAe,CAAC,GACrC,yBAAyB,cAAc,QAAQ,cAAc,UAAU,GACvE,0BAA0B,cAAc,SAAS,cAAc,WAAW;AAiBhF,YAAI,0BAA0B,8BACzB,2BAA2B,6BAA6B;AAI3D,cAAM,cAAc;AAAA,YAClB,SAJa,cAAc,UAAU,kBAAkB,UAIrC,cAAc,UAAU,kBAAkB,QAAQ;AAAA,YAClE,UAAU,yBAAyB;AAAA,YACnC,UAAU,cAAc;AAAA,YACxB,WAAW;AAAA;AAAA,UACf,GAEI,gBAAgB,GAChB,iBAAiB;AACrB,mBAAS,IAAI,GAAG,IAAI,YAAY,UAAU,KAAK;AAC7C,gBAAM,QAAQ,KAAK,YAAY,YAAY,UAAU,CAAC,GAChD,UAAU,KAAK,YAAY,kBAAkB,UAAU,aAAa;AAC1E,6BAAiB;AAEjB,qBAAS,IAAI,GAAG,IAAI,YAAY,WAAW,KAAK;AAC9C,kBAAM,WAAW,KAAK,QAAQ,YAAY,WAAW,CAAC,GAChD,aAAa,KAAK,QAAQ,kBAAkB,WAAW,cAAc;AAE3E,kBAAI,CAAC,SAAS,UAAU,CAAC,WAAW,QAAQ;AAC1C,oBAAI,MAAM,QAAQ,WAAW,KAAoB;AACjD,gBAAI,KAAK,SAAS,iCAChB,MAAM,KAAK,SAAS,6BAA6B,SAAS,UAAU,IAEtE,MAAM,SAAS,KAAoB,IAAI;AAAA,cACzC;AAEA,gCACI,kBAAkB,gCAA+B,iBAAiB;AAAA,YACxE;AAEA,6BACI,iBAAiB,+BAA8B,gBAAgB;AAAA,UACrE;AACA,eAAK,WAAW;AAAA,QAClB;AAAA,MACF;AAEA,UAAM,uBAAuB,KAAK,aAAa,MAAM,CAAC;AAEtD,WAAK,qBAAqB,IAC1B,KAAK,qBAAqB,IAC1B,KAAK,cAAc,SAAS,GAE5B,KAAK,eAAe,CAAC;AACrB,UAAM,OAAqB,CAAC;AAC5B,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,iBAAS,IAAI,OAAO,CAAC,EAAE,SAAS,KAAK,OAAO,CAAC,EAAE,OAAO,KAAK;AACzD,UAAK,KAAK,CAAC,MACT,KAAK,aAAa,KAAK,CAAC,GACxB,KAAK,CAAC,IAAI,CAAC;AAEb,mBAAS,IAAI,OAAO,CAAC,EAAE,UAAU,KAAK,OAAO,CAAC,EAAE,QAAQ;AACtD,YAAI,KAAK,kBAAkB,GAAG,CAAC,MAC7B,KAAK,CAAC,EAAE,KAAK,QAAQ,CAAC,EAAE,EAAE,IAAI,KAAK,SAAS;AAAA,QAGlD;AACA,QAAI,KAAK,qBAAqB,OAAO,CAAC,EAAE,UAAS,KAAK,qBAAqB,OAAO,CAAC,EAAE,QACjF,KAAK,qBAAqB,OAAO,CAAC,EAAE,WAAU,KAAK,qBAAqB,OAAO,CAAC,EAAE;AAAA,MACxF;AAIA,UAFA,KAAK,iBAAiB,KAAK,SAAS,wBAAwB,IAAI,IAAI,GAEhE,KAAK,sBAAsB,KAAK,KAAK,sBAAsB,GAAG;AAChE,YAAM,iBAAiB,KAAK,YAAY,KAAK,oBAAoB,KAAK,kBAAkB;AACxF,aAAK,cAAc,SAAS,cAAc;AAAA,MAC5C;AAEA,UAAI,KAAK,qBAAqB,sBAAsB,KAAK,YAAY,GAAG;AACtE,YAAM,UAAS,oCAAI,WAAJ,mBAAY,WAAZ,YAAsB,SAE/B,kBAAkB,IAAI,IAAI,KAAK,gBAAgB,CAAC,GAChD,0BAA0B,IAAI,IAAI,oBAAoB,GAEtD,uBAAuB,MAAM,KAAK,eAAe,EAAE,OAAO,OAAK,CAAC,wBAAwB,IAAI,CAAC,CAAC,GAC9F,uBAAuB,MAAM,KAAK,uBAAuB,EAAE,OAAO,OAAK,CAAC,gBAAgB,IAAI,CAAC,CAAC;AAEpG,aAAK,QAAQ,KAAK,uBAAuB;AAAA,UACvC,MAAM,KAAK,gBAAgB;AAAA,UAC3B;AAAA,UACA;AAAA,UACA,qBAAqB;AAAA,UACrB,uBAAuB;AAAA,QACzB,GAAG,CAAC;AAAA,MACN;AAAA,IACF;AAAA;AAAA,IAGA,qBAAqB,MAAa,MAAa;AAC7C,aAAO,MAAM,QAAQ,IAAI,KAAK,MAAM,QAAQ,IAAI,KAAK,KAAK,KAAK,EAAE,SAAS,MAAM,KAAK,KAAK,EAAE,SAAS;AAAA,IACvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYU,iBAAiB,GAAe,QAAgB,QAAgB,QAAgB;AACxF,WAAK,eAAe,KAAK,0BAA0B,cAC/C,EAAE,WACJ,KAAK,aAAa,KAAK,0BAA0B,aAAc,SAAS,MAExE,KAAK,YAAY,KAAK,IAAI,GAAG,KAAK,0BAA0B,YAAa,SAAS,KAAK,SAAS,SAAW,GAC3G,KAAK,aAAa,KAAK,0BAA0B,aAAc,SAAS,KAE1D,KAAK,cAAc,YAAY,KAE7C,EAAE,eAAe;AAAA,IAErB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWU,eAAe,GAAc,IAAkB;AACvD,UAAM,OAAO,KAAK,iBAAiB,CAAC;AACpC,UAAI,CAAC,QAAQ,CAAC,KAAK,WAAW,KAAK,KAAK,KAAK,IAAI;AAC/C,eAAO;AAGT,UAAM,SAAS,KAAK,QAAQ,KAAK,YAAY,IAAI,CAAC;AAClD,aAAI,OAAO,8BAA8B,IAChC,OAAO,eAAe,IAKxB;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWU,gBAAgB,GAAc,IAAkB;AACxD,UAAM,OAAO,KAAK,iBAAiB,CAAC;AACpC,UAAI,CAAC,QAAQ,CAAC,KAAK,WAAW,KAAK,KAAK,KAAK,IAAI;AAC/C,eAAO;AAGT,UAAM,SAAS,KAAK,QAAQ,KAAK,aAAa,IAAI,CAAC;AACnD,aAAI,OAAO,8BAA8B,IAChC,OAAO,eAAe,IAGxB;AAAA,IACT;AAAA;AAAA,IAGU,WAAW,GAAc,IAAkB;AACnD,aAAO,KAAK,QAAQ,KAAK,QAAQ,IAAI,CAAC,EAAE,eAAe;AAAA,IACzD;AAAA;AAAA,IAGU,cAAc,GAAc,IAAkB;AACtD,cAAQ,IAAI,6BAA6B,GAAG,aAAa,GAErD,GAAG,kBAAkB,uBACvB,KAAK,cAAc,SAAS,GAE9B,KAAK,QAAQ,KAAK,WAAW,IAAI,CAAC;AAAA,IACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUU,cAAc,GAA8C;AAzhIxE;AA2hII,UAAI,UADW,KAAK,QAAQ,KAAK,WAAW,EAAE,KAAK,KAAK,WAAW,MAAM,KAAK,WAAW,GAAG,CAAC,EAC5C,8BAA8B;AAE/E,UAAI,CAAC,WACC,CAAC,EAAE,YAAY,CAAC,EAAE,QAAQ;AAC5B,YAAI,KAAK,SAAS,cAAY,UAAK,kBAAL,WAAoB,mBAC5C,KAAK,cAAc,eAAe,QAAQ,EAAE,KAAK,IAAI;AACvD;AAGJ,QAAI,EAAE,WAAW,EAAE,QAAQ,SACzB,KAAK,iBAAiB,IACb,EAAE,WAAW,EAAE,QAAQ,QAChC,KAAK,kBAAkB,IACd,EAAE,WAAW,EAAE,QAAQ,YAChC,KAAK,YAAY,IACR,EAAE,WAAW,EAAE,QAAQ,cAChC,KAAK,eAAe,IACV,EAAE,WAAW,EAAE,QAAQ,eAAiB,CAAC,EAAE,WAAW,EAAE,QAAQ,SAC1E,KAAK,iBAAiB,KACZ,EAAE,WAAW,EAAE,QAAQ,gBAAkB,CAAC,EAAE,WAAW,EAAE,QAAQ,UAC3E,KAAK,eAAe;AAAA,MAExB;AAEF,UAAI,CAAC;AACH,YAAI,CAAC,EAAE,YAAY,CAAC,EAAE,UAAU,CAAC,EAAE,SAAS;AAE1C,cAAI,KAAK,SAAS,cAAY,UAAK,kBAAL,WAAoB,mBAC5C,KAAK,cAAc,eAAe,QAAQ,EAAE,KAAK,IAAI;AACvD;AAGJ,cAAI,EAAE,UAAU,QAAQ,QAAQ;AAC9B,gBAAI,GAAC,UAAK,cAAc,MAAnB,WAAsB;AACzB;AAEF,iBAAK,sBAAsB;AAAA,UAC7B,MAAO,CAAI,EAAE,UAAU,QAAQ,aAC7B,KAAK,iBAAiB,GACtB,UAAU,MACD,EAAE,UAAU,QAAQ,WAC7B,KAAK,eAAe,GACpB,UAAU,MACD,EAAE,UAAU,QAAQ,OAC7B,UAAU,KAAK,aAAa,IACnB,EAAE,UAAU,QAAQ,QAC7B,UAAU,KAAK,cAAc,IACpB,EAAE,UAAU,QAAQ,KAC7B,UAAU,KAAK,WAAW,IACjB,EAAE,UAAU,QAAQ,OAC7B,UAAU,KAAK,aAAa,IACnB,EAAE,UAAU,QAAQ,MAC7B,UAAU,KAAK,aAAa,IACnB,EAAE,UAAU,QAAQ,UACzB,KAAK,SAAS,aACZ,KAAK,gBAEH,KAAK,cAAc,KAAK,cAAc,IACxC,KAAK,aAAa,IAElB,KAAK,sBAAsB,KAGzB,UAAK,cAAc,MAAnB,WAAsB,uBACxB,KAAK,uBAAuB,QAAW,QAAW,CAAC,IAIzD,UAAU;AAAA,QAEd,MAAO,CAAI,EAAE,UAAU,QAAQ,OAAO,EAAE,YAAY,CAAC,EAAE,WAAW,CAAC,EAAE,WACnE,UAAU,KAAK,aAAa;AAIhC,UAAI,SAAS;AAEX,UAAE,gBAAgB,GAClB,EAAE,eAAe;AACjB,YAAI;AACF,UAAC,EAAU,cAAc,UAAU;AAAA,QACrC,SAIO,OAAO;AAAA,QAAE;AAAA,MAClB;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASU,YAAY,KAAiD;AA3nIzE;AA4nII,UAAM,IAAI,eAAe,iBAAiB,IAAI,eAAe,IAAI;AAEjE,UAAI,CAAC,KAAK,kBAIH,EAA+B,WAAW,SAAS,iBAAkB,EAA+B,OAAO,UAAU,SAAS,YAAY,IAAG;AAChJ,YAAM,YAAY,KAAK,iBAAiB;AACxC,aAAK,SAAS,GACd,KAAK,iBAAiB,SAAkB;AAAA,MAC1C;AAGF,UAAM,OAAO,KAAK,iBAAiB,CAAC;AACpC,UAAI,GAAC,QAAS,KAAK,kBAAkB,QAAQ,KAAK,cAAc,KAAK,OAAO,KAAK,eAAe,KAAK,UAIrG,MAAM,KAAK,QAAQ,KAAK,SAAS,EAAE,KAAK,KAAK,KAAK,MAAM,KAAK,KAAK,GAAG,OAAO,CAAC,GACxE,KAAY,8BAA8B,KAM3C,KAAK,gBAAgB,KAAK,KAAK,KAAK,IAAI,MACtC,GAAC,UAAK,cAAc,MAAnB,WAAsB,gBAAc,UAAK,cAAc,MAAnB,WAAsB,uBAAqB;AAClF,aAAK,kBAAkB,KAAK,KAAK,EAAK;AAEtC,YAAM,mBAAmB,OAA+B,WAA/B,mBAAuC,eAAc,mBACxE,SAAS,KAAK,QAAQ,KAAK,IAAI,GAC/B,iCAAiC,CAAC,EAAE,KAAK,SAAS,aAAY,yBAAQ,WAAU,KAAK,SAAS;AACpG,aAAK,sBAAsB,KAAK,YAAY,KAAK,KAAK,KAAK,IAAI,GAAG,MAAM,gBAAgB,gCAAiC,CAA8B;AAAA,MACzJ;AAAA,IAEJ;AAAA;AAAA;AAAA;AAAA;AAAA,IAMU,kBAAkB,GAAqC;AAC/D,UAAM,OAAO,EAAE,OAAO,QAAQ,aAAa;AAC3C,MAAK,SAKD,KAAK,mBAAmB,QAAQ,KAAK,kBAAkB,QAI3D,KAAK,QAAQ,KAAK,eAAe,CAAC,GAAG,CAAC;AAAA,IACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOU,eAAe,GAAe;AACtC,UAAM,OAAO,KAAK,iBAAiB,CAAC;AACpC,MAAI,CAAC,QAAS,KAAK,kBAAkB,QAAQ,KAAK,cAAc,KAAK,OAAO,KAAK,eAAe,KAAK,SAIrG,KAAK,QAAQ,KAAK,YAAY,EAAE,KAAK,KAAK,KAAK,MAAM,KAAK,KAAK,GAAG,CAAC,GAC/D,GAAE,oBAIF,KAAK,SAAS,YAChB,KAAK,SAAS,KAAK,KAAK,KAAK,MAAM,IAAM,CAAC;AAAA,IAE9C;AAAA;AAAA;AAAA;AAAA;AAAA,IAMU,uBAAuB,GAA0C;AACzE,UAAM,IAAI,MAAM,QAAQ,IAAI,EAAE,OAAO,QAAQ,sBAAsB,GAAG,QAAQ;AAC9E,MAAK,KAGL,KAAK,QAAQ,KAAK,oBAAoB;AAAA,QACpC,QAAQ;AAAA,QACR,MAAM;AAAA,MACR,GAAG,CAAC;AAAA,IACN;AAAA;AAAA;AAAA;AAAA;AAAA,IAMU,uBAAuB,GAA0C;AACzE,UAAM,IAAI,MAAM,QAAQ,IAAI,EAAE,OAAO,QAAQ,sBAAsB,GAAG,QAAQ;AAC9E,MAAK,KAGL,KAAK,QAAQ,KAAK,oBAAoB;AAAA,QACpC,QAAQ;AAAA,QACR,MAAM;AAAA,MACR,GAAG,CAAC;AAAA,IACN;AAAA;AAAA;AAAA;AAAA,IAKU,0BAA0B,GAA0C;AAC5E,UAAM,IAAI,MAAM,QAAQ,IAAI,EAAE,OAAO,QAAQ,yBAAyB,GAAG,QAAQ;AACjF,MAAK,KAGL,KAAK,QAAQ,KAAK,uBAAuB;AAAA,QACvC,QAAQ;AAAA,QACR,MAAM;AAAA,MACR,GAAG,CAAC;AAAA,IACN;AAAA;AAAA;AAAA;AAAA,IAKU,0BAA0B,GAA0C;AAC5E,UAAM,IAAI,MAAM,QAAQ,IAAI,EAAE,OAAO,QAAQ,yBAAyB,GAAG,QAAQ;AACjF,MAAK,KAGL,KAAK,QAAQ,KAAK,uBAAuB;AAAA,QACvC,QAAQ;AAAA,QACR,MAAM;AAAA,MACR,GAAG,CAAC;AAAA,IACN;AAAA;AAAA;AAAA;AAAA;AAAA,IAMU,wBAAwB,GAA0C;AAC1E,UAAM,SAAS,EAAE,OAAO,QAAQ,sBAAsB,GAChD,SAAS,UAAU,MAAM,QAAQ,IAAI,QAAQ,QAAQ;AAC3D,WAAK,QAAQ,KAAK,qBAAqB,EAAE,OAAO,GAAG,CAAC;AAAA,IACtD;AAAA;AAAA;AAAA;AAAA,IAKU,kBAAkB,GAA0C;AACpE,UAAI,CAAC,KAAK,sBAAsB;AAC9B,YAAM,SAAS,EAAE,OAAO,QAAQ,sBAAsB,GAChD,SAAS,UAAU,MAAM,QAAQ,IAAI,QAAQ,QAAQ;AAC3D,QAAI,UACF,KAAK,QAAQ,KAAK,eAAe,EAAE,OAAO,GAAG,CAAC;AAAA,MAElD;AAAA,IACF;AAAA;AAAA;AAAA;AAAA,IAKU,2BAA2B,GAA0C;AAC7E,WAAK,QAAQ,KAAK,wBAAwB,EAAE,MAAM,EAAE,OAAO,GAAG,CAAC;AAAA,IACjE;AAAA;AAAA;AAAA;AAAA,IAKU,qBAAqB,GAA0C;AACvE,MAAK,KAAK,wBACR,KAAK,QAAQ,KAAK,kBAAkB,EAAE,MAAM,EAAE,OAAO,GAAG,CAAC;AAAA,IAE7D;AAAA;AAAA;AAAA;AAAA,IAKU,wBAAwB,GAA0C;AAC1E,UAAM,SAAS,EAAE,OAAO,QAAQ,yBAAyB,GACnD,SAAS,UAAU,MAAM,QAAQ,IAAI,QAAQ,QAAQ;AAC3D,WAAK,QAAQ,KAAK,qBAAqB,EAAE,OAAO,GAAG,CAAC;AAAA,IACtD;AAAA;AAAA;AAAA;AAAA,IAKU,kBAAkB,GAA0C;AACpE,UAAM,SAAS,EAAE,OAAO,QAAQ,yBAAyB,GACnD,SAAS,UAAU,MAAM,QAAQ,IAAI,QAAQ,QAAQ;AAC3D,WAAK,QAAQ,KAAK,eAAe,EAAE,OAAO,GAAG,CAAC;AAAA,IAChD;AAAA;AAAA;AAAA;AAAA,IAKU,oBAAoB,GAA0C;AACtE,WAAK,QAAQ,KAAK,cAAc,CAAC,GAAG,CAAC;AAAA,IACvC;AAAA;AAAA;AAAA;AAAA;AAAA,IAMU,iCAAiC;AACzC,UAAK,KAAK,mBAIV,KAAK,QAAQ,KAAK,6BAA6B,CAAC,CAAC,GAE7C,KAAK,gBAAe;AACtB,YAAM,UAAU,KAAK,sBAAsB;AAC3C,QAAI,KAAK,cAAc,QAAQ,KAAK,cAAc,SAC3C,QAAQ,UAGX,KAAK,cAAc,KAAK,IAFxB,KAAK,cAAc,KAAK,IAMxB,KAAK,cAAc,YACrB,KAAK,cAAc,SAAS,OAAO;AAAA,MAEvC;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOU,eAAe,QAAoB,cAAsB;AACjE,UAAI,UAAU,IACV,SAAS,IAEP,UAAU,MAAM;AACpB,QAAK,UAGH,SAAS,KAFT,gBAAgB;AAAA,MAIpB,GAEM,UAAU,MAAM;AACpB,iBAAS;AAAA,MACX,GAEM,kBAAkB,MAAM;AAC5B,kBAAU,IACV,OAAO,aAAa,KAAK,oBAAoB,GAC7C,KAAK,uBAAuB,OAAO,WAAW,SAAS,YAAY,GACnE,OAAO,KAAK,IAAI;AAAA,MAClB,GAEM,UAAU,MAAM;AACpB,QAAI,UACF,QAAQ,GACR,gBAAgB,KAEhB,UAAU;AAAA,MAEd;AAEA,aAAO;AAAA,QACL,SAAS,QAAQ,KAAK,IAAI;AAAA,QAC1B,SAAS,QAAQ,KAAK,IAAI;AAAA,MAC5B;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,iBAAiB,KAA8B;AAC7C,UAAM,IAAI,eAAe,iBAAiB,IAAI,eAAe,IAAI,KAC3D,cAAoB,EAAiB,UAAW,EAAiB,QAAQ,CAAC,IAAI,GAE9E,WAAY,EAAsC,OAAO,QAAQ,aAAa;AACpF,UAAI,CAAC;AACH,eAAO;AAGT,UAAI,MAAM,KAAK,eAAe,SAAS,UAAyB;AAEhE,UAAI,KAAK,eAAe;AACtB,YAAI,YAAY,GACV,IAAI,MAAM,OAAO,MAAM,QAAQ,UAAU,cAAc,EAAE,CAAC,CAAgB;AAGhF,QAFiB,MAAM,QAAQ,UAAU,qBAAqB,EAAE,WAG9D,YAAa,KAAK,SAAS,eAAgB,MAAM,OAAO,KAAK,WAAW,IAAc,KAAK,mBAG7F,MAAM,KAAK,iBAAiB,YAAY,UAAU,EAAG,MAAM,YAAY,UAAU,EAAG,MAAM,YAAY,SAAS,gBAAgB,SAAS,EAAE;AAAA,MAC5I;AAEA,UAAM,OAAO,KAAK,gBAAgB,QAAuB;AAEzD,aAAI,CAAC,MAAM,UAAU,GAAG,KAAK,CAAC,MAAM,UAAU,IAAI,IACzC,OAEF,EAAE,KAAK,KAAK;AAAA,IACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAqBA,cAAc,QAAqB,KAA8C,SAAuE;AACtJ,UAAI;AACF,YAAI,eAAe,eAAe,eAAe;AAG/C,WADoB,mCAAS,iBAAgB,MAE3C,MAAM,aAAa,MAAM,GAE3B,OAAO,YAAY,GAAG;AAAA,aACjB;AAGL,eAD8B,mCAAS,2BAA0B,MACpC,CAAC,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO;AAC5D;AAGF,cAAI,gBAAgB;AACpB,UAAI,OAAO,iBAAkB,YAAY,OAAO,iBAAkB,YAChE,OAAO,cAAc,iBAErB,gBAAgB,KAAK,mBAAmB,GAAa,GAGjD,KAAK,SAAS,uBAAuB,gBACvC,OAAO,YAAY,gBAEnB,OAAO,cAAc;AAAA,QAG3B;AAAA,IAEJ;AAAA;AAAA,IAGA,cAAc,eAAiC,UAAmB;AAChE,aAAO,KAAK,qBAAqB,KAAK,YAAY,GAAG,eAAe,QAAQ;AAAA,IAC9E;AAAA;AAAA,IAGA,oBAAoB,GAA6B;AAC/C,aAAI,MAAM,SACD,KAAK,qBAGV,aAAa,mBACf,IAAI,EAAE,eAAsB,IAG9B,KAAK,oBAAqB,uBAAW,OAAO,QAAQ,iBAC7C,KAAK;AAAA,IACd;AAAA;AAAA,IAGA,cAAc;AACZ,aAAO,KAAK;AAAA,IACd;AAAA;AAAA,IAGA,gBAAgB,eAAiC,UAAmB;AAClE,aAAO,KAAK,qBAAqB,KAAK,aAAa,GAAG,eAAe,QAAQ;AAAA,IAC/E;AAAA;AAAA,IAGA,eAAe;AACb,aAAO,KAAK;AAAA,IACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,sBAAsB,GAA4B;AAChD,kBAAK,sBAAsB,CAAC,GAErB,KAAK;AAAA,IACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,sBAAsB,GAA4B;AAChD,aAAI,aAAa,mBACf,IAAI,EAAE,eAAsB,IAE9B,KAAK,sBAAuB,uBAAW,OAAO,QAAQ,oBAC/C,KAAK;AAAA,IACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,kBAAkB;AAniJpB;AAoiJI,WAAK,eAAe,KAAK,gBAAgB,KAAK,gBAAgB;AAC9D,UAAM,mBAAmB,CAAC,KAAK,SAAS,YAEpC,IAAI,GACF,KAAK,KAAK,QAAQ;AACxB,WAAK,IAAI,GAAG,IAAI,IAAI,KAAK;AACvB,YAAI,CAAC,KAAK,QAAQ,CAAC,KAAK,KAAK,QAAQ,CAAC,EAAE;AAAU;AAElD,YAAM,QAAQ,KAAK,QAAQ,CAAC,EAAE;AAE9B,QAAK,KAAK,SAAS,eAAiB,MAAO,IAAI,KAAK,SAAS,eAC3D,KAAK,iBAAiB,SAAS,IAE/B,KAAK,iBAAiB,SAAS;AAAA,MAEnC;AAEA,aAAI,qBACG,KAAK,SAAS,eAAiB,MAAO,IAAI,KAAK,SAAS,eAC3D,KAAK,kBAAiB,gBAAK,wBAAL,mBAA0B,UAA1B,YAAmC,IAEzD,KAAK,kBAAiB,gBAAK,wBAAL,mBAA0B,UAA1B,YAAmC,IAIzD,KAAK,iBAAiB,KACxB,KAAK,gBAAgB,KAAK,gBAAgB,KAE1C,KAAK,gBAAgB,KAAK,IAAI,KAAK,eAAe,KAAK,SAAS,IAAI,KAAK,eACzE,KAAK,kBAAiB,gBAAK,wBAAL,mBAA0B,UAA1B,YAAmC,MAEzD,KAAK,kBAAiB,gBAAK,wBAAL,mBAA0B,UAA1B,YAAmC,GACzD,KAAK,gBAAgB,KAAK,IAAI,KAAK,eAAe,KAAK,SAAS,IAAI,MAGtE,KAAK,eAAe,KAAK,gBAAgB,KAAK,eACvC,KAAK,IAAI,KAAK,cAAc,KAAK,SAAS,IAAI;AAAA,IACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,iBAAyB;AACvB,UAAM,iBAAiB,KAAK,sBAAsB,GAC9C,IAAI,KAAK,QAAQ;AAIrB,WAFA,KAAK,eAAe,KAAK,eAAe,GAEjC;AACL,QAAI,CAAC,KAAK,QAAQ,CAAC,KAAK,KAAK,QAAQ,CAAC,EAAE,WAEpC,KAAK,iBAAiB,KAAM,IAAI,KAAK,SAAS,eAChD,KAAK,gBAAgB,KAAK,QAAQ,CAAC,EAAE,SAAS,IAE9C,KAAK,gBAAgB,KAAK,QAAQ,CAAC,EAAE,SAAS;AAGlD,UAAI,gBAAgB,KAAK,eAAe,KAAK;AAC7C,UAAI,KAAK,SAAS,eAAe;AAC/B,YAAM,aAAa,KAAK,IAAI,eAAe,cAAc,IAAI;AAC7D,QAAI,aAAa,MACf,iBAAiB,YACb,KAAK,iBAAiB,IACxB,KAAK,gBAAgB,aAErB,KAAK,gBAAgB;AAAA,MAG3B;AACA,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASU,kBAAkB,yBAAmC;AAtnJjE;AAunJI,UAAM,iBAAiB,KAAK,aACtB,kBAAkB,KAAK,cACvB,kBAAkB,KAAK;AAC7B,WAAK,cAAc,KAAK,eAAe,GAEnC,KAAK,SAAS,wBAChB,MAAM,MAAM,KAAK,kBAAiB,UAAK,SAAS,wBAAd,YAAqC,KAAK,WAAW;AAGzF,UAAM,eAAe,KAAK,gBAAgB,kBAAkB,KAAK,iBAAiB,mBAAmB,KAAK,iBAAiB;AAE3H,UAAI,gBAAgB,KAAK,iBAAiB,KAAK,KAAK;AAQlD,YAPA,MAAM,MAAM,KAAK,aAAa,KAAK,YAAY,GAE/C,KAAK,gBAAgB,GAErB,MAAM,MAAM,KAAK,UAAU,KAAK,aAAa,GAC7C,MAAM,MAAM,KAAK,UAAU,KAAK,aAAa,GAEzC,KAAK,iBAAiB,GAAG;AAC3B,cAAM,SAAS,MAAM,MAAM,KAAK,UAAU,KAAK;AAC/C,cAAI,SAAS,KAAK,KAAK,eAAe,UAAU,KAAK,SAAS;AAC5D,kBAAM,IAAI,MAAM,2JAC8D;AAEhF,gBAAM,MAAM,KAAK,aAAa,KAAK,YAAY,GAE/C,MAAM,MAAM,KAAK,cAAc,KAAK,YAAY,GAChD,MAAM,aAAa,KAAK,cAAc,QAAQ,KAAK,YAAY,GAC/D,MAAM,aAAa,KAAK,cAAc,SAAS,KAAK,YAAY,KAAK,YAAY,GAEjF,MAAM,MAAM,KAAK,WAAW,KAAK,YAAY,GAC7C,MAAM,aAAa,KAAK,WAAW,QAAQ,KAAK,YAAY,GAC5D,MAAM,MAAM,KAAK,WAAW,KAAK,YAAY,KAAK,YAAY,GAE9D,MAAM,MAAM,KAAK,qBAAqB,KAAK,YAAY,GACvD,MAAM,MAAM,KAAK,qBAAqB,KAAK,YAAY,KAAK,YAAY,GAExE,MAAM,MAAM,KAAK,aAAa,KAAK,YAAY,GAC/C,MAAM,MAAM,KAAK,aAAa,KAAK,YAAY,GAE3C,KAAK,SAAS,oBAChB,MAAM,MAAM,KAAK,qBAAqB,KAAK,YAAY,GACvD,MAAM,MAAM,KAAK,qBAAqB,KAAK,YAAY,KAAK,YAAY,GAExE,MAAM,MAAM,KAAK,aAAa,KAAK,YAAY,GAC/C,MAAM,MAAM,KAAK,aAAa,KAAK,YAAY,IAE7C,KAAK,SAAS,wBAChB,MAAM,MAAM,KAAK,kBAAiB,UAAK,SAAS,wBAAd,YAAqC,KAAK,WAAW,GAEzF,MAAM,MAAM,KAAK,eAAe,KAAK,YAAY,GACjD,MAAM,MAAM,KAAK,eAAe,KAAK,YAAY,KAAK,YAAY,GAE9D,KAAK,kBACP,MAAM,MAAM,KAAK,cAAc,KAAK,YAAY,GAChD,MAAM,aAAa,KAAK,cAAc,QAAQ,KAAK,YAAY,GAE/D,MAAM,MAAM,KAAK,kBAAkB,KAAK,YAAY,GACpD,MAAM,MAAM,KAAK,kBAAkB,KAAK,YAAY,KAAK,YAAY,GAErE,MAAM,MAAM,KAAK,gBAAgB,KAAK,YAAY,GAClD,MAAM,MAAM,KAAK,gBAAgB,KAAK,YAAY;AAAA,QAEtD;AACE,gBAAM,MAAM,KAAK,cAAc,MAAM,GACrC,MAAM,MAAM,KAAK,WAAW,MAAM,GAClC,MAAM,MAAM,KAAK,qBAAqB,MAAM,GAC5C,MAAM,MAAM,KAAK,aAAa,KAAK,WAAW,GAE1C,KAAK,SAAS,oBAChB,MAAM,MAAM,KAAK,qBAAqB,MAAM,GAC5C,MAAM,MAAM,KAAK,aAAa,KAAK,WAAW,IAG5C,KAAK,SAAS,wBAChB,MAAM,MAAM,KAAK,kBAAiB,UAAK,SAAS,wBAAd,YAAqC,KAAK,WAAW,GAEzF,MAAM,MAAM,KAAK,eAAe,MAAM,GAElC,KAAK,kBACP,MAAM,MAAM,KAAK,kBAAkB,MAAM,GACzC,MAAM,MAAM,KAAK,gBAAgB,KAAK,YAAY;AAKxD,WAAK,qBAAsB,KAAK,eAAe,KAAK,cAAa,gBAAK,wBAAL,mBAA0B,UAA1B,YAAmC,IAEpG,MAAM,MAAM,KAAK,mBAAmB,KAAK,eAAe,KAAK,uBAAsB,gBAAK,wBAAL,mBAA0B,UAA1B,YAAwC,EAAE,GAC7H,MAAM,MAAM,KAAK,mBAAmB,KAAK,eAAe,KAAK,uBAAsB,gBAAK,wBAAL,mBAA0B,UAA1B,YAAwC,EAAE,GAEzH,KAAK,SAAS,oBAChB,MAAM,MAAM,KAAK,mBAAmB,KAAK,eAAe,KAAK,uBAAsB,gBAAK,wBAAL,mBAA0B,UAA1B,YAAwC,EAAE,GAC7H,MAAM,MAAM,KAAK,mBAAmB,KAAK,eAAe,KAAK,uBAAsB,gBAAK,wBAAL,mBAA0B,UAA1B,YAAwC,EAAE,KAG3H,gBAAgB,4BAClB,KAAK,kBAAkB;AAAA,IAE3B;AAAA;AAAA,IAGA,oBAAoB;AAClB,aAAO,KAAK;AAAA,IACd;AAAA;AAAA,IAGA,wBAAwB;AACtB,aAAO,KAAK;AAAA,IACd;AAAA;AAAA,IAGA,yBAAyB;AACvB,aAAO,KAAK;AAAA,IACd;AAAA;AAAA,IAGA,oBAAoB;AAClB,aAAO,KAAK;AAAA,IACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOU,oBAAoB;AAC5B,MAAI,KAAK,iBAAiB,KACxB,MAAM,KAAK,KAAK,YAAY,GAC5B,MAAM,KAAK,KAAK,SAAS,GAErB,KAAK,iBACP,MAAM,KAAK,KAAK,YAAY,GAC5B,MAAM,KAAK,KAAK,YAAY,MAE5B,MAAM,KAAK,KAAK,YAAY,GAC5B,MAAM,KAAK,KAAK,YAAY,OAG9B,MAAM,KAAK,KAAK,YAAY,GAC5B,MAAM,KAAK,KAAK,SAAS,GACzB,MAAM,KAAK,KAAK,YAAY,GAExB,KAAK,gBACP,MAAM,KAAK,KAAK,YAAY,KAE5B,MAAM,KAAK,KAAK,YAAY,GAC5B,MAAM,KAAK,KAAK,YAAY;AAAA,IAGlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,cAAc;AAatB,UAZA,KAAK,cAAc,MAAM,YAAa,KAAK,iBAAiB,IAAM,KAAK,iBAAiB,CAAC,KAAK,SAAS,8BAA8B,WAAW,WAAa,KAAK,iBAAiB,CAAC,KAAK,SAAS,8BAA8B,WAAW,QAC3O,KAAK,cAAc,MAAM,YAAa,CAAC,KAAK,iBAAiB,KAAK,KAAK,SAAS,2BAA4B,WAAa,KAAK,iBAAiB,KAAM,KAAK,eAAgB,YAAwB,KAAK,gBAAgB,WAAW,QAElO,KAAK,cAAc,MAAM,YAAa,KAAK,iBAAiB,IAAM,KAAK,iBAAiB,CAAC,KAAK,SAAS,8BAA8B,WAAW,WAAa,KAAK,iBAAiB,CAAC,KAAK,SAAS,8BAA8B,WAAW,QAC3O,KAAK,cAAc,MAAM,YAAY,KAAK,SAAS,2BAA2B,WAAa,KAAK,iBAAiB,IAAM,KAAK,gBAAgB,WAAW,SAAW,KAAK,gBAAgB,WAAW,QAElM,KAAK,iBAAiB,MAAM,YAAa,KAAK,iBAAiB,IAAM,KAAK,iBAAiB,CAAC,KAAK,SAAS,8BAA8B,WAAW,UAAW,KAAK,iBAAiB,CAAC,KAAK,SAAS,6BAA8B,SACjO,KAAK,iBAAiB,MAAM,YAAa,CAAC,KAAK,iBAAiB,KAAK,KAAK,SAAS,2BAA4B,WAAa,KAAK,iBAAiB,KAAM,KAAK,eAAgB,YAAwB,KAAK,gBAAgB,WAAW,QAErO,KAAK,iBAAiB,MAAM,YAAa,KAAK,iBAAiB,IAAM,KAAK,iBAAiB,CAAC,KAAK,SAAS,8BAA8B,WAAW,UAAW,KAAK,iBAAiB,CAAC,KAAK,SAAS,6BAA8B,SACjO,KAAK,iBAAiB,MAAM,YAAY,KAAK,SAAS,2BAA2B,WAAa,KAAK,iBAAiB,KAAM,KAAK,eAAgB,WAAoB,KAAK,eAAgB,SAEpL,KAAK,SAAS,eAAe;AAC/B,YAAM,oBAAoB,MAAM,gBAAgB,KAAK,SAAS,aAAa;AAC3E,aAAK,cAAc,UAAU,IAAI,GAAG,iBAAiB,GACrD,KAAK,cAAc,UAAU,IAAI,GAAG,iBAAiB,GACrD,KAAK,iBAAiB,UAAU,IAAI,GAAG,iBAAiB,GACxD,KAAK,iBAAiB,UAAU,IAAI,GAAG,iBAAiB;AAAA,MAC1D;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,iBAAiB;AACzB,WAAK,SAAS,SAAS,cAAc,OAAO,GAC5C,KAAK,OAAO,QAAQ,KAAK,SAAS,SAAS,KAC1C,KAAK,SAAS,cAAc,SAAS,MAAM,YAAY,KAAK,MAAM;AAEnE,UAAM,YAAa,KAAK,SAAS,YAAa,KAAK,gBAC7C,QAAQ;AAAA,QACZ,IAAI,KAAK,GAAG;AAAA,QACZ,IAAI,KAAK,GAAG;AAAA,QACZ,IAAI,KAAK,GAAG,+BAA+B,KAAK,SAAS,cAAc;AAAA,QACvE,IAAI,KAAK,GAAG,qCAAqC,KAAK,SAAS,oBAAoB;AAAA,QACnF,IAAI,KAAK,GAAG,qCAAqC,KAAK,SAAS,oBAAoB;AAAA,QACnF,IAAI,KAAK,GAAG,uCAAuC,KAAK,SAAS,eAAe;AAAA,QAChF,IAAI,KAAK,GAAG,uCAAuC,KAAK,SAAS,eAAe;AAAA,QAChF,IAAI,KAAK,GAAG,0BAA0B,SAAS;AAAA,QAC/C,IAAI,KAAK,GAAG,yBAAyB,KAAK,SAAS,SAAS;AAAA,MAC9D,GAEM,QAAQ,KAAK,OAAO;AAC1B,UAAI,OAAO;AACT,cAAM,QAAQ,UAAQ;AACpB,gBAAM,WAAW,IAAI;AAAA,QACvB,CAAC;AAED,iBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ;AACvC,UAAI,CAAC,KAAK,QAAQ,CAAC,KAAK,KAAK,QAAQ,CAAC,EAAE,WAExC,MAAM,WAAW,IAAI,KAAK,GAAG,MAAM,CAAC,MAAM,GAC1C,MAAM,WAAW,IAAI,KAAK,GAAG,MAAM,CAAC,MAAM;AAAA,MAE9C;AAEE,aAAK,0BAA0B,KAAK;AAAA,IAExC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASU,0BAA0B,OAAiB;AACnD,UAAM,WAAW,SAAS,cAAc,UAAU;AAClD,eAAS,YAAY,8CACrB,KAAK,SAAS,SAAS,QAAQ,aAC9B,KAAK,SAAS,cAAc,SAAS,MAAM,YAAY,KAAK,MAAM;AAEnE,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ;AACvC,QAAI,CAAC,KAAK,QAAQ,CAAC,KAAK,KAAK,QAAQ,CAAC,EAAE,WAExC,MAAM,KAAK,IAAI,KAAK,GAAG,MAAM,CAAC,MAAM,GACpC,MAAM,KAAK,IAAI,KAAK,GAAG,MAAM,CAAC,MAAM;AAGtC,MAAK,KAAK,OAAe,aACtB,KAAK,OAAe,WAAW,UAAU,MAAM,KAAK,GAAG,IAExD,KAAK,OAAO,YAAY,SAAS,eAAe,MAAM,KAAK,GAAG,CAAC,CAAC;AAAA,IAEpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWU,kBAAkB,KAAa;AA13J3C;AA23JI,UAAI;AACJ,UAAI,CAAC,KAAK,YAAY;AACpB,YAAM,UAAe,KAAK,SAAS,cAAc,UAAU;AAM3D,aAJI,KAAK,SAAS,WAAW,SAAO,UAAK,SAAS,YAAd,mBAAuB,mBAAmB,YAAY,KAAK,SAAS,QAAQ,kBAAkB,MAChI,OAAO,KAAK,SAAS,QAAQ,cAAc,EAAE,YAAY,KAAK,SAG3D,IAAI,GAAG,IAAI,OAAO,QAAQ;AAC7B,eAAK,OAAO,CAAC,EAAE,aAAa,OAAO,CAAC,EAAE,mBAAmB,KAAK,QAAQ;AACpE,iBAAK,aAAa,OAAO,CAAC;AAC1B;AAAA,UACF;AAGF,YAAI,CAAC,KAAK;AACR,gBAAM,IAAI,MAAM,mCAAmC;AAIrD,aAAK,kBAAkB,CAAC,GACxB,KAAK,kBAAkB,CAAC;AACxB,YAAM,WAAY,KAAK,WAAW,YAAY,KAAK,WAAW,OAC1D,SACA;AACJ,aAAK,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACpC,cAAM,WAAW,SAAS,CAAC,EAAE;AAC7B,WAAI,UAAU,SAAS,KAAK,QAAQ,MAClC,YAAY,SAAS,QAAQ,CAAC,EAAE,OAAO,GAAG,QAAQ,CAAC,EAAE,SAAS,CAAC,GAAG,EAAE,GACpE,KAAK,gBAAgB,SAAS,IAAI,SAAS,CAAC,MACnC,UAAU,SAAS,KAAK,QAAQ,OACzC,YAAY,SAAS,QAAQ,CAAC,EAAE,OAAO,GAAG,QAAQ,CAAC,EAAE,SAAS,CAAC,GAAG,EAAE,GACpE,KAAK,gBAAgB,SAAS,IAAI,SAAS,CAAC;AAAA,QAEhD;AAAA,MACF;AAEA,aAAO;AAAA,QACL,MAAM,KAAK,gBAAiB,GAAG;AAAA,QAC/B,OAAO,KAAK,gBAAiB,GAAG;AAAA,MAClC;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA,IAMU,iBAAiB;AA16J7B;AA26JI,iBAAK,WAAL,WAAa,UACb,KAAK,aAAa;AAAA,IACpB;AAAA;AAAA,IAGA,cAAc;AACZ,aAAO,KAAK,WAAW,CAAC;AAAA,IAC1B;AAAA;AAAA,IAGA,eAAe;AACb,aAAO,KAAK;AAAA,IACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWU,sBAAsB,QAA+H,WAAwC,SAAmB,SAAmB;AAC3O,UAAM,WAAY,YAAY;AAE9B,UAAI,KAAK,SAAS,MAAM,MAAM;AAE5B,YADA,KAAK,SAAS,MAAM,IAAI,SACpB,SAAS;AACX,cAAI,UAAU;AACZ,kBAAM,UAAU,WAAW,KAAK,aAAa,KAAK,IAAI,CAAC;AACvD;AAAA,UACF;AACA,gBAAM,KAAK,SAAS,GACpB,KAAK,aAAa;AAAA,QACpB,OAAO;AACL,cAAI,UAAU;AACZ,kBAAM,QAAQ,WAAW,KAAK,aAAa,KAAK,IAAI,CAAC;AACrD;AAAA,UACF;AACA,gBAAM,KAAK,SAAS,GACpB,KAAK,aAAa;AAAA,QACpB;AAAA,IAEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,sBAAsB,SAAmB,SAAmB;AAC1D,WAAK,sBAAsB,gBAAgB,KAAK,oBAAoB,SAAS,OAAO;AAAA,IACtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,uBAAuB,SAAmB,SAAmB;AAC3D,WAAK,sBAAsB,iBAAiB,KAAK,oBAAoB,SAAS,OAAO;AAAA,IACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,0BAA0B,SAAmB,SAAmB;AAC9D,WAAK,sBAAsB,oBAAoB,KAAK,iBAAiB,SAAS,OAAO;AAAA,IACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,uBAAuB,SAAmB,SAAmB;AAC3D,WAAK,sBAAsB,iBAAiB,KAAK,oBAAoB,SAAS,OAAO;AAAA,IACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,4BAA4B,SAAmB,SAAmB;AAChE,WAAK,sBAAsB,sBAAsB,CAAC,KAAK,yBAAyB,KAAK,wBAAwB,GAAG,SAAS,OAAO;AAAA,IAClI;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,4BAA4B,SAAmB;AAC7C,WAAK,sBAAsB,sBAAsB,KAAK,yBAAyB,OAAO;AAAA,IACxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOU,eAAe;AACvB,aAAO,KAAK,SAAS;AAAA,IACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,UAAU,KAAa;AAC/B,aAAO,KAAK,MAAM,KAAK,SAAS,YAAa,MAAM,KAAK,MAAM;AAAA,IAChE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,aAAa,KAAa;AAClC,aAAO,KAAK,UAAU,GAAG,IAAI,KAAK,SAAS;AAAA,IAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,mBAAmB,GAAW;AACtC,aAAO,KAAK,OAAO,IAAI,KAAK,UAAU,KAAK,SAAS,SAAU;AAAA,IAChE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAcU,cAAc,WAA0B,WAA0B,KAAa,OAA0B,YAAoB;AACrI,UAAM,IAAI,KAAK,YAAY,GAAG,GACxB,cAAc,MAAM,cAAc,CAAC,GACrC,SAAS,eACV,KAAK,iBAAiB,OAAO,KAAK,SAAS,YAAa,YAAY,OACpE,cAAc,aAAa,OAC3B,QAAQ,KAAK,aAAa,KAAK,SAAS,oBAAoB,YAAY,OACxE,MAAM,MAAM,IAAI,SAAS;AAE5B,MAAK,MACH,UAAU,IAAI,KAAK,SAAS,iBAAiB;AAG/C,UAAM,WAAW,KAAK,wBAAwB,GAAG;AACjD,MAAI,6BAAU,eACZ,UAAU,IAAI,SAAS,UAAU;AAGnC,UAAM,SAAS,MAAM,iBAAiB,OAAO;AAAA,QAC3C,WAAW,qBAAqB,MAAM;AAAA,QACtC,MAAM;AAAA,QACN,SAAS,EAAE,KAAK,GAAG,GAAG,GAAG;AAAA,MAC3B,CAAC,GACK,kBAAkB,KAAK,mBAAmB,GAAG,GAC7C,YAAY,KAAK,UAAU,GAAG,IAAI;AACxC,MAAI,KAAK,SAAS,2BAA2B,cAC3C,OAAO,MAAM,YAAY,cAAc,SAAS,QAEhD,OAAO,MAAM,MAAM,GAAG,SAAS;AAGjC,UAAI;AACJ,gBAAU,KAAK,MAAM,GACjB,KAAK,iBAAiB,MAGxB,UAAU,OAAO,UAAU,EAAI,GAC/B,UAAU,KAAK,OAAO;AAGxB,UAAM,cAAc,KAAK,QAAQ,QAC7B,YACA,SACA,SACA,GACA,eAAe;AAEnB,eAAS,IAAI,GAAG,KAAK,aAAa,IAAI,IAAI,KAAK;AAG7C,YAFA,eAAe,IACf,IAAI,KAAK,QAAQ,CAAC,GACd,CAAC,KAAK,EAAE;AAAU;AAEtB,kBAAU,GACV,UAAU,GACV,aAAa,MACT,6BAAU,YACZ,aAAa,SAAS,QAAQ,EAAE,EAAE,KAAK,SAAS,QAAQ,CAAC,GACzD,WAAU,yCAAY,YAAW,GACjC,WAAU,yCAAY,YAAW,GAC7B,YAAY,QACd,UAAU,KAAK,IAEb,UAAU,aAAa,QACzB,UAAU,aAAa,OAIvB,CAAC,KAAK,SAAS,qBAAqB,UAAU,KAChD,QAAQ,KAAK,gJAAgJ;AAG/J,YAAM,WAAW;AAIjB,YADY,MAAK,uBAAuB,KAAK,CAAC,GAM9C;AAAA,cAAI,KAAK,eAAe,KAAK,IAAI,KAAK,GAAG,IAAI,WAAW,CAAC,CAAC,IAAI,MAAM;AAMlE,gBALI,CAAC,EAAE,sBAAsB,KAAK,cAAc,CAAC,IAAI,MAAM,YACzD,eAAe,KAIb,cAAc;AAChB,kBAAM,iBAAkB,KAAK,iBAAiB,KAAM,IAAI,KAAK,SAAS,eAAiB,UAAW;AAClG,mBAAK,eAAe,gBAAgB,KAAK,GAAG,UAAU,SAAS,YAAY,CAAC;AAAA,YAC9E;AAAA,gBACK,EAAI,EAAE,sBAAuB,KAAK,iBAAiB,KAAK,KAAK,KAAK,SAAS,iBAChF,KAAK,eAAe,QAAQ,KAAK,GAAG,UAAU,SAAS,YAAY,CAAC;AAGtE,UAAI,WAAW,MACb,KAAM,WAAW;AAAA;AAAA,MAErB;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAgBU,eAAe,QAAqB,KAAa,MAAc,SAAiB,SAAiB,gBAAuC,MAAa;AAM7J,UAAM,IAAI,KAAK,QAAQ,IAAI,GACvB,UAAU,eAAe,IAAI,KAAK,KAAK,IAAI,KAAK,QAAQ,SAAS,GAAG,OAAO,UAAU,CAAC,CAAC,MACtF,EAAE,WAAW,IAAI,EAAE,QAAQ,KAAK,OAChC,UAAU,IAAI,aAAa,OAC3B,yCAAgB,WAAW,IAAI,eAAe,QAAQ,KAAK;AAEhE,MAAI,KAAK,iBAAiB,KAAK,QAAQ,KAAK,SAAS,iBACnD,WAAW,YAGT,QAAQ,KAAK,aAAa,SAAS,KAAK,cAAc,KAAK,SAAS,sBACtE,WAAW,YAIb,OAAO,KAAK,KAAK,cAAc,EAAE,QAAQ,SAAO;AAxsKpD;AAysKM,SAAI,UAAK,eAAe,GAAG,EAAE,GAAG,MAA5B,WAAgC,EAAE,QACpC,WAAW,IAAI,KAAK,eAAe,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC;AAAA,MAEtD,CAAC;AAED,UAAI,QAAa,MACb,kBAA+G;AACnH,MAAI,SACF,QAAQ,KAAK,0BAA0B,MAAM,CAAC,GAC9C,kBAAkB,KAAK,aAAa,KAAK,CAAC,EAAE,KAAK,MAAM,OAAO,GAAG,MAAM,IAAiC,GACpG,mBAAoB,SACtB,kBAAkB;AAOtB,UAAM,mBADM,KAAK,QAAQ,KAAK,oBAAoB,EAAE,KAAK,MAAM,OAAO,aAAa,KAAK,CAAC,EAC5D,eAAe,GACxC,iBAAiB,OAAO,oBAAqB,WAAW,mBAAmB;AAC/E,MAAK,2CAA2C,eAC9C,kBAAkB,MAAM,iBAAiB,iBAAiB,MAAM,MAAO,gBAA0C,UAAU,EAAE,KAAK,GAAG;AAGvI,UAAM,cAAe,2CAA2C,UAAU,GAAI,gBAA0C,OAAO,KAAK,IAC9H,UAAU,MAAM,iBAAiB,OAAO;AAAA,QAC5C,WAAW,MAAM,gBAAgB,GAAG,OAAO,IAAI,kBAAkB,EAAE,EAAE,EAAE,KAAK,GAAG;AAAA,QAC/E,MAAM;AAAA,QACN,UAAU;AAAA,MACZ,CAAC;AACD,cAAQ,aAAa,oBAAoB,KAAK,MAAM,EAAE,EAAE,GACpD,eACF,QAAQ,aAAa,SAAS,WAAW;AAI3C,UAAM,aAAa,KAAK,cAAc,KAAK,OAAO;AAclD,UAbI,UAAU,KAAK,eAAgB,KAAK,SAAS,YAAa,KAAK,mBACjE,QAAQ,MAAM,SAAS,GAAG,cAAc,CAAC,OAGvC,EAAE,eAAe,WAAW,KAAK,EAAE,qBAAqB,UAC1D,OAAO,KAAK,EAAE,SAAS,EAAE,QAAQ,SAAO;AACtC,QAAI,EAAE,UAAU,eAAe,GAAG,KAChC,QAAQ,aAAa,KAAK,EAAE,UAAU,GAAG,CAAC;AAAA,MAE9C,CAAC,GAIC,MAAM;AACR,YAAM,aAAc,OAAO,UAAU,SAAS,KAAK,eAAe,MAAM,oBAAoB,kBAAmB,gBAA4C,QAAS,gBAA4C;AAChN,aAAK,cAAc,SAAS,UAAkC,GAG1D,QAAQ,KAAK,sBAAsB,SAAS,KAAK,sBAAsB,KAAK,SAAS,qBACvF,KAAK,cAAc,SAAS,OAAO;AAAA,MAEvC;AACA,aAAO,YAAY,OAAO,GAGrB,gBAA0C,4BAC7C,MAAM,mBAAmB,SAAU,gBAA0C,wBAAuC,GAGtH,KAAK,UAAU,GAAG,EAAE,gBAAgB,KAAK,IAAI,GAC7C,KAAK,UAAU,GAAG,EAAE,aAAa,IAAI,IAAI;AAAA,IAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASU,YAAY,aAA+C;AAGnE,UAAM,gBAAgB,oBAAI,IAAY;AACtC,UAAI,KAAK,SAAS;AAChB,iBAAS,IAAI,YAAY,KAAK,KAAK,YAAY,QAAQ,KAAK,IAAI,KAAK;AACnE,cAAM,gBAAgB,KAAK,oBAAoB,CAAC;AAChD,UAAI,kBAAkB,QACpB,cAAc,IAAI,aAAa;AAAA,QAEnC;AAGF,aAAO,KAAK,KAAK,SAAS,EAAE,QAAQ,WAAS;AAC3C,YAAI,KAAK,WAAW;AAClB,cAAI,IAAI,CAAC,OACL,kBAAkB;AAEtB,UAAI,KAAK,kBACF,KAAK,SAAS,gBAAiB,KAA2B,KAAK,mBAC9D,CAAC,KAAK,SAAS,gBAAiB,KAA2B,KAAK,qBAGtE,kBAAkB,MAGd,IAAI,SAAS,OAAO,EAAE,OAAO,KAAK,cAClC,IAAI,YAAY,OAAO,IAAI,YAAY,WACvC,mBACD,CAAC,cAAc,IAAI,CAAC,KAEvB,KAAK,mBAAmB,CAAC;AAAA,QAE7B;AAAA,MACF,CAAC,GACG,KAAK,SAAS,gCAChB,KAAK,2BAA2B;AAAA,IAEpC;AAAA;AAAA,IAGA,aAAa;AACX,WAAK,eAAe,GACpB,KAAK,kBAAkB,GACvB,KAAK,OAAO;AAAA,IACd;AAAA;AAAA,IAGA,oBAAoB;AAClB,MAAI,KAAK,iBACP,KAAK,qBAAqB,GAGxB,OAAO,KAAK,aAAc,YAC5B,OAAO,KAAK,KAAK,SAAS,EAAE,QAAQ,SAAO;AACzC,QAAI,KAAK,aACP,KAAK,mBAAmB,CAAC,GAAG;AAAA,MAEhC,CAAC,GAGC,KAAK,SAAS,gCAChB,KAAK,2BAA2B;AAAA,IAEpC;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,eAAe,MAAgB;AAC7B,UAAI,CAAC,QAAQ,CAAC,KAAK;AACjB;AAGF,UAAI;AACJ,WAAK,aAAa;AAClB,UAAM,KAAK,KAAK,QAGV,kBAAkB,oBAAI,IAAY,GAClC,oBAAoB,oBAAI,IAAY,GAIpC,qBACJ,KAAK,SAAS,KAAK,SAAS,0BAC5B,KAAK,WAAW,KAAK,cAAc,KACnC,KAAK,4BAA4B,KAAK,WAAW,KAAK,cAAc;AAGtE,eAAS,IAAI,GAAG,IAAI,IAAI;AAUtB,YATA,MAAM,KAAK,CAAC,GACR,KAAK,iBAAiB,KAAK,cAAc,OAC3C,KAAK,qBAAqB,GAExB,KAAK,UAAU,GAAG,KACpB,KAAK,mBAAmB,GAAG,GAIzB,KAAK,SAAS,qBAAqB,CAAC,oBAAoB;AAC1D,0BAAgB,IAAI,GAAG;AACvB,cAAM,gBAAgB,KAAK,oBAAoB,GAAG;AAClD,UAAI,kBAAkB,QACpB,gBAAgB,IAAI,aAAa;AAAA,QAErC;AAIF,UAAI,KAAK,SAAS,qBAAqB,CAAC,oBAAoB;AAC1D,iBAAW,MAAM,MAAM,KAAK,eAAe,GAAG;AAC5C,cAAM,UAAU,KAAK,2BAA2B,EAAE;AAClD,mBAAW,QAAQ,SAAS;AAC1B,gBAAM,MAAM,KAAK,uBAAuB,IAAI,IAAI;AAChD,YAAI,OAAO,KAAK,sBAAsB,IAAI,MACxC,KAAK,sBAAsB,IAAI,EAAE,OAAO,IAAI,KAAK,GACjD,kBAAkB,IAAI,IAAI,MAAM,MAAM,GAAG,EAAE,IAAI,MAAM,EAAE,CAAC,CAAC;AAAA,UAE7D;AAAA,QACF;AAGA,iBAAWC,QAAO,MAAM,KAAK,iBAAiB;AAC5C,eAAK,0BAA0BA,IAAG;AAAA,MAEtC;AAEA,MAAI,KAAK,SAAS,gCAChB,KAAK,2BAA2B,GAElC,KAAK,4BAA4B,KAAK;AAAA,IACxC;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,cAAc,KAAa;AACzB,UAAI,OAAO,GAAG;AACZ,YAAM,OAAO,CAAC,GAAG;AACjB,YAAI,KAAK,SAAS,mBAAmB;AACnC,cAAM,iBAAiB,KAAK,oBAAoB,GAAG;AACnD,UAAI,mBAAmB,QACrB,KAAK,KAAK,cAAc;AAAA,QAE5B;AACA,aAAK,eAAe,IAAI;AAAA,MAC1B;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUU,mBAAmB,KAAmB;AAt7KlD;AAu7KI,UAAM,aAAa,KAAK,UAAU,GAAG;AACrC,MAAI,iCAAY,YACd,KAAK,QAAQ,KAAK,yBAAyB,EAAE,IAAI,CAAC,GAC9C,KAAK,SAAS,gCAAgC,KAAK,kBAAkB,GAAG,IAC1E,KAAK,gCAAgC,YAAY,KAAK,kBAAkB,GAAG,GAAG,GAAG,KAEjF,gBAAW,YAAX,WAAoB,QAAQ,CAAC,SAAmB;AA77KxD,YAAAF;AA67K2D,gBAAAA,MAAA,KAAK,kBAAL,gBAAAA,IAAoB,YAAY;AAAA,UAErF,OAAO,KAAK,UAAU,GAAG,GACzB,OAAO,KAAK,kBAAkB,GAAG,GACjC,KAAK,gBACL,KAAK;AAAA,IAET;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,WAAW,KAAa,MAAc;AACpC,UAAM,WAAW,KAAK,YAAY,KAAK,IAAI;AAC3C,UAAI,CAAC;AACH;AAGF,UAAM,IAAI,KAAK,QAAQ,IAAI,GACrB,IAAI,KAAK,YAAY,GAAG;AAC9B,UAAI,KAAK,iBAAiB,KAAK,cAAc,OAAO,KAAK,eAAe;AACtE,aAAK,cAAc,UAAU,CAAC;AAAA,WACzB;AAOL,YAAM,kBAAkB,IAAI,KAAK,aAAa,KAAK,CAAC,EAAE,KAAK,MAAM,KAAK,0BAA0B,GAAG,CAAC,GAAG,GAAG,GAAG,IAAiC,IAAI;AAClJ,aAAK,4BAA4B,iBAAiB,QAAQ,GAC1D,KAAK,gCAAgC,GAAG;AAAA,MAC1C;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,UAAU,KAAa;AACrB,UAAM,aAAa,KAAK,UAAU,GAAG;AACrC,UAAI,CAAC;AACH;AAGF,WAAK,2BAA2B,GAAG;AAEnC,UAAI,iBACE,IAAI,KAAK,YAAY,GAAG;AAE9B,aAAO,KAAK,WAAW,oBAAoB,EAAE,QAAQ,YAAU;AAC7D,YAAI,CAAC,WAAW,qBAAqB,eAAe,MAAM;AACxD;AAGF,YAAM,YAAY,CAAC,QACb,IAAI,KAAK,QAAQ,SAAS,GAC1B,OAAO,WAAW,qBAAqB,SAAS;AAEtD,QAAI,QAAQ,KAAK,aAAa,cAAc,KAAK,cAAc,KAAK,gBAClE,KAAK,cAAc,UAAU,CAAC,IACrB,KACT,kBAAkB,KAAK,aAAa,KAAK,CAAC,EAAE,KAAK,WAAW,KAAK,0BAA0B,GAAG,CAAC,GAAG,GAAG,GAAG,IAAiC,GACzI,KAAK,4BAA4B,iBAAiB,IAAsB,KAExE,MAAM,aAAa,IAAI;AAAA,MAE3B,CAAC,GAED,KAAK,gCAAgC,GAAG;AAAA,IAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,sBAAsB;AA7gLxB;AA8gLI,UAAM,KAAK,KAAK,kBAAkB,GAC5B,mBAAkB,gBAAK,uBAAuB,MAA5B,mBAA+B,WAA/B,YAAyC;AACjE,aAAO,KAAK,OAAO,KAAK,mBAAmB,KAAK,SAAS,SAAU;AAAA,IACrE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,oBAAoB;AAzhLtB;AAgiLI,WANI,CAAC,KAAK,SAAS,cAAc,KAAK,SAAS,iBAAiB,QAC9D,KAAK,YAAa,KAAK,SAAS,eAAgB,KAAK,SAAS,iBAAkB,KAAK,aAAa,KAAK,mBAAmB,CAAC,CAAC,IAAI,GAChI,KAAK,aAAc,KAAK,SAAS,gBAAiB,KAAK,SAAS,kBAAmB,KAAK,aAAa,KAAK,mBAAmB,CAAC,CAAC,IAAI,GACnI,KAAK,aAAc,KAAK,SAAS,gBAAiB,KAAK,SAAS,kBAAmB,KAAK,aAAa,KAAK,mBAAmB,CAAC,CAAC,IAAI,IAGjI,KAAK,SAAS,YAAY;AAC5B,YAAI,aAAa,KAAK,aAAa;AACnC,sBAAe,KAAK,SAAS,qBAAsB,KAAK,SAAS,uBAAwB,KAAK,aAAa,KAAK,uBAAuB,IAAI,GAC3I,cAAe,KAAK,SAAS,gBAAiB,KAAK,SAAS,kBAAmB,KAAK,aAAa,KAAK,mBAAmB,CAAC,CAAC,IAAI,GAC/H,cAAe,KAAK,SAAS,gBAAiB,KAAK,SAAS,kBAAmB,KAAK,aAAa,KAAK,mBAAmB,CAAC,CAAC,IAAI,GAC/H,cAAe,KAAK,eAAe,IAAI,KAAK,cAAc,gBAAK,wBAAL,mBAA0B,WAA1B,YAAyC,GAEnG,KAAK,YAAY,KAAK,SAAS,YAC3B,KAAK,6BAA6B,KAChC,KAAK,SAAS,iBAAiB,KAAM,aAAa;AAAA,MAC1D,OAAO;AACL,YAAM,QAAQ,iBAAiB,KAAK,UAAU,GACxC,gBAAgB,MAAM,cAAc,gBAAgB,KAAK,aAAa,KAAK,UAAU,IAAI,GACzF,aAAc,KAAK,SAAS,wBAAwB,KAAK,SAAS,qBAAsB,KAAK,SAAS,uBAAwB,KAAK,aAAa,KAAK,uBAAuB,IAAI,GAChL,aAAc,KAAK,SAAS,wBAAwB,KAAK,SAAS,qBAAsB,KAAK,SAAS,uBAAwB,KAAK,aAAa,KAAK,uBAAuB,IAAI,GAChL,eAAgB,KAAK,SAAS,mBAAoB,MAAM,QAAQ,MAAM,OAAO,KAAK,gBAAgB,CAAC,CAAC,CAAW,IAAI;AACzH,aAAK,YAAY,MAAM,QAAQ,MAAM,MAAM,IACvC,MAAM,QAAQ,MAAM,UAAU,IAC9B,MAAM,QAAQ,MAAM,aAAa,IACjC,KAAK,YACL,aACA,aACA,KAAK,aACL,eACA,KAAK,aACL;AAAA,MACN;AAEA,kBAAK,iBAAiB,KAAK,KAAK,KAAK,YAAY,KAAK,SAAS,SAAU,GAClE,KAAK;AAAA,IACd;AAAA;AAAA,IAGU,wBAAgC;AAjkL5C;AAkkLI,aAAO,KAAK,qBAAqB,KAAK,eAAa,UAAK,wBAAL,mBAA0B,UAAS,KAAK,KAAK;AAAA,IAClG;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,mBAAmB;AACjB,kBAAK,YAAY,WAAW,MAAM,UAAU,KAAK,YAAY,OAAO,CAAsB,KAAM,KAAK,SAAS,WAAW,KAAK,SAAS,QAAQ,wBAAyB,GACjK,KAAK;AAAA,IACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,eAAe;AArlLjB;AAslLI,UAAI,CAAC,KAAK;AAAe;AAgCzB,UA/BA,KAAK,WAAW,GAChB,KAAK,cAAc,GACnB,KAAK,eAAe,GACpB,KAAK,kBAAkB,GAEvB,KAAK,iBAAiB,GACtB,KAAK,kBAAkB,GAGnB,KAAK,gBACH,KAAK,SAAS,gBAChB,KAAK,WAAW,KAAK,YAAY,KAAK,qBAAoB,gBAAK,wBAAL,mBAA0B,WAA1B,YAAoC,IAC9F,KAAK,cAAc,KAAK,qBAAoB,gBAAK,wBAAL,mBAA0B,WAA1B,YAAoC,OAEhF,KAAK,WAAW,KAAK,kBACrB,KAAK,cAAc,KAAK,YAAY,KAAK,oBAG3C,KAAK,WAAW,KAAK,WAIvB,KAAK,YAAY,KAAK,YAAY,KAAK,aAAa,KAAK,YAErD,KAAK,iBAAiB,KAAK,KAAK,SAAS,eAC3C,KAAK,aAAa,gBAAK,wBAAL,mBAA0B,WAA1B,YAAoC,IAIxD,KAAK,eAAe,KAAK,WAAW,KAAK,YAAY,KAAK,aAAa,KAAK,YAExE,KAAK,SAAS,YAAY;AAC5B,YAAI,KAAK,iBAAiB,GAAG;AAC3B,cAAI,aAAa,KAAK,WAAW,KAAK,iBAAiB;AACvD,wBAAc,KAAK,aAAa,KAAK,UAAU,GAC3C,KAAK,SAAS,uBAChB,cAAc,KAAK,SAAS,uBAE9B,MAAM,OAAO,KAAK,YAAY,UAAU;AAAA,QAC1C;AAEA,aAAK,UAAU,MAAM,WAAW;AAAA,MAClC;AAEA,UAAI,kBAAkB,MAAM,OAAO,KAAK,YAAY;AACpD,MAAI,kBACF,mBAAoB,KAAK,SAAS,qBAAqB,KAAK,SAAS,uBAAwB,IAE7F,mBAAmB,KAAK,SAAS,gBAAgB,KAAK,SAAS,kBAAmB,MAAM,KAAK,SAAS,qBAAqB,KAAK,SAAS,uBAAwB,IAEnK,MAAM,aAAa,KAAK,WAAW,OAAO,mBAAmB,eAAe,GAC5E,MAAM,OAAO,KAAK,WAAW,KAAK,QAAQ;AAE1C,UAAM,gBAAgB,KAAK,UAAU,YAAY,KAAK;AAMtD,UAJK,KAAK,SAAS,cACjB,MAAM,OAAO,KAAK,eAAe,KAAK,YAAY,GAGhD,KAAK,iBAAiB,GAAG;AAC3B,YAAIG,mBAAkB,MAAM,OAAO,KAAK,YAAY;AACpD,QAAIA,qBACFA,oBAAoB,KAAK,SAAS,qBAAqB,KAAK,SAAS,uBAAwB,IAE/F,MAAM,aAAa,KAAK,WAAW,OAAOA,gBAAyB,GACnE,MAAM,OAAO,KAAK,WAAW,KAAK,QAAQ,GAC1C,MAAM,OAAO,KAAK,eAAe,KAAK,YAAY,GAE9C,KAAK,kBACP,MAAM,aAAa,KAAK,cAAc,OAAO,aAAa,GAC1D,MAAM,OAAO,KAAK,cAAc,KAAK,WAAW,GAChD,MAAM,aAAa,KAAK,cAAc,OAAO,aAAa,GAC1D,MAAM,OAAO,KAAK,cAAc,KAAK,WAAW,GAChD,MAAM,OAAO,KAAK,kBAAkB,KAAK,WAAW;AAAA,MAExD;AACE,QAAI,KAAK,kBACP,MAAM,MAAM,KAAK,cAAc,MAAM,GACrC,MAAM,OAAO,KAAK,cAAc,KAAK,WAAW,GAChD,MAAM,aAAa,KAAK,cAAc,OAAO,aAAa;AAI9D,MAAI,KAAK,iBACP,MAAM,OAAO,KAAK,kBAAkB,KAAK,WAAW,GAEhD,KAAK,SAAS,gBAChB,MAAM,OAAO,KAAK,gBAAgB,KAAK,gBAAgB,GAEnD,KAAK,iBAAiB,KACxB,MAAM,OAAO,KAAK,gBAAgB,KAAK,gBAAgB,MAGzD,MAAM,OAAO,KAAK,aAAa,KAAK,gBAAgB,GAEhD,KAAK,iBAAiB,KACxB,MAAM,OAAO,KAAK,aAAa,KAAK,gBAAgB,MAIxD,MAAM,OAAO,KAAK,eAAe,KAAK,YAAY,IAGhD,CAAC,KAAK,uBAAuB,CAAC,KAAK,oBAAoB,WACzD,KAAK,sBAAsB,KAAK,iBAAiB,IAG/C,KAAK,SAAS,qBAAqB,qBAAqB,kBAC1D,KAAK,gBAAgB,GAGvB,KAAK,eAAe,GACpB,KAAK,aAAa,GAElB,KAAK,yBAAyB,IAC9B,KAAK,OAAO;AAAA,IACd;AAAA;AAAA,IAGA,iBAAiB;AA9sLnB;AA+sLI,UAAI,CAAC,KAAK;AAAe;AAEzB,UAAM,aAAa,KAAK,cAAc;AAGtC,MAAI,aAAa,KAAK,eAAe,KAAK,oBACxC,KAAK,mBAAmB,KAEtB,KAAK,SAAS,qBAAqB,CAAC,KAAK,oBAC3C,KAAK,uBAAuB,GAG9B,KAAK,kBAAkB;AACvB,UAAM,4BAA4B,KAAK,6BAA6B,GAChE,eAAe,GACf,OAAS,KAAK,iBAAiB,CAAC,KAAK,SAAS,eAAgB,MAAM,OAAO,KAAK,cAAc,IAAI,MAAM,OAAO,KAAK,WAAW;AAEnI,MAAI,KAAK,gBACP,eAAe,KAAK,cAAc,IAAI,KAAK,SAAS,YAEpD,eAAe,6BAA6B,KAAK,SAAS,uBAAuB,KAAK,iBAAiB,IAAI;AAG7G,UAAM,gBAAgB,MAAM,OAAO,KAAK,yBAAyB,GAC3D,wBAAwB,KAAK;AAEnC,WAAK,qBAAqB,KAAK,SAAS,4BAA4B,CAAC,KAAK,SAAS,cAAe,eAAe,KAAK,SAAS,YAAa,eAE5I,KAAK,qBAAqB;AAI1B,UAAM,KAAK,aAAa;AACxB,MAAI,OAAO,KAAK,aAAc,YAC5B,OAAO,KAAK,KAAK,SAAS,EAAE,QAAQ,SAAO;AACzC,YAAM,YAAY,CAAC;AACnB,QAAI,YAAY,MACd,KAAK,mBAAmB,SAAS;AAAA,MAErC,CAAC,GAGC,KAAK,SAAS,gCAChB,KAAK,2BAA2B,GAG9B,KAAK,kBAAkB,KAAK,YAAY,MAC1C,KAAK,gBAAgB,GAGvB,OAAO,KAAK,GACR,KAAK,SAAS,aAChB,KAAK,IAAI,KAAK,SAAS,YAAa,gBAEpC,KAAK,KAAK,KAAK,IAAI,KAAK,SAAS,YAAa,cAAc,kBAAiB,gBAAK,wBAAL,mBAA0B,WAA1B,YAAoC,EAAE,GAC/G,KAAK,KAAK,KAAK,yBAEjB,KAAK,IAAI,KAAK,KAAK,KAAK,IACxB,KAAK,IAAI,GACT,KAAK,KAAK,MAGV,KAAK,IAAI,KAAK,uBACd,KAAK,KAAK,KAAK,IAAI,KACnB,KAAK,IAAI,KAAK,MAAM,KAAK,KAAK,KAAK,EAAE,GACrC,KAAK,MAAM,KAAK,KAAK,KAAK,MAAM,KAAK,IAAI,OAIzC,KAAK,MAAM,QAAQ,KAAK,kCACtB,KAAK,iBAAiB,CAAC,KAAK,SAAS,gBACvC,MAAM,OAAO,KAAK,gBAAgB,KAAK,CAAC,GAEpC,KAAK,iBAAiB,KACxB,MAAM,OAAO,KAAK,gBAAgB,KAAK,CAAC,MAG1C,MAAM,OAAO,KAAK,aAAa,KAAK,CAAC,GACrC,MAAM,OAAO,KAAK,aAAa,KAAK,CAAC,IAGvC,KAAK,YAAY,KAAK,0BAA0B,WAChD,KAAK,eAAe,KAAK,0BAA0B,cACnD,KAAK,+BAA+B;AAGtC,UAAM,sBAAuB,KAAK,YAAY,KAAK,UAAU,KAAK,KAAK;AAEvE,MAAI,KAAK,OAAO,KAAK,KAAK,cAAc,IACtC,KAAK,OAAO,KAAK,SAAS,IACjB,sBAET,KAAK,SAAS,KAAK,YAAY,KAAK,MAAM,IAG1C,KAAK,SAAS,KAAK,KAAK,kBAAiB,gBAAK,wBAAL,mBAA0B,WAA1B,YAAoC,EAAE,GAG7E,KAAK,MAAM,QAAQ,KAAK,SAAS,cACnC,KAAK,aAAa,GAGhB,KAAK,SAAS,qBAAqB,qBAAqB,kBAAkB,0BAA0B,KAAK,sBAC3G,KAAK,gBAAgB,GAEvB,KAAK,kBAAkB,EAAK;AAAA,IAC9B;AAAA;AAAA,IAGA,YAAY,aAAsB,cAAuB;AACvD,aAAO,KAAK,gBAAgB,aAAa,YAAY;AAAA,IACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWA,gBAAgB,aAAsB,cAAuB;AAC3D,mDAAgB,KAAK,YACrB,wCAAiB,KAAK,aAEf;AAAA,QACL,KAAK,KAAK,mBAAmB,WAAW;AAAA,QACxC,QAAQ,KAAK,mBAAmB,cAAc,KAAK,SAAS,IAAI;AAAA,QAChE,QAAQ;AAAA,QACR,SAAS,eAAe,KAAK;AAAA,MAC/B;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYA,iBAAiB,aAAsB,cAAuB;AAC5D,UAAM,QAAQ,KAAK,gBAAgB,aAAa,YAAY,GACtD,SAAS,KAAK,MAAM,KAAK,YAAY,KAAK,SAAS,SAAU,GAC7D,YAAY,KAAK,SAAS;AAEhC,aAAI,KAAK,eAAe,MACtB,MAAM,OAAO,QACb,MAAM,UAAU,aACP,KAAK,eAAe,KAC7B,MAAM,OAAO,WACb,MAAM,UAAU,WAEhB,MAAM,OAAO,WACb,MAAM,UAAU,YAGlB,MAAM,MAAM,KAAK,IAAI,GAAG,MAAM,GAAG,GACjC,MAAM,SAAS,KAAK,IAAI,KAAK,6BAA6B,IAAI,GAAG,MAAM,MAAM,GAE7E,MAAM,UAAU,KAAK,WACrB,MAAM,WAAW,KAAK,WAEtB,MAAM,SAAS,KAAK,IAAI,GAAG,MAAM,MAAM,GACvC,MAAM,UAAU,KAAK,IAAI,KAAK,aAAa,MAAM,OAAO,GAEjD;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,cAA0C;AACxC,aAAO,KAAK;AAAA,IACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASU,2BAA2B,KAAa;AA14LpD;AA24LI,UAAM,aAAa,KAAK,UAAU,GAAG;AACrC,UAAI,iCAAY,gBAAgB,YAAU,gBAAW,YAAX,WAAoB,SAAQ;AACpE,YAAM,UAAU,WAAW,SACvB,WAAW,MAAM,KAAK,QAAQ,CAAC,EAAE,QAAQ;AAC7C,QAAI,QAAQ,SAAS,MACnB,WAAW,SAAS,OAAO,MAAM,KAAK,QAAQ,CAAC,EAAE,QAAQ,CAAkB;AAG7E,YAAI,IAAI,SAAS,SAAS;AAC1B,eAAO,WAAW,gBAAgB,UAAQ;AACxC,cAAM,YAAY,WAAW,gBAAgB,IAAI;AACjD,UAAC,WAAW,qBAAuC,SAAS,IAAI,SAAS,GAAG;AAAA,QAC9E;AAAA,MACF;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASU,aAAa,OAA0B,KAAa;AAl6LhE;AAo6LI,UAAI,KAAK,kBACF,KAAK,SAAS,gBAAgB,MAAM,KAAK,mBACxC,OAAO,KAAK;AAGlB;AAGF,UAAI,oBAAoB,GAClB,aAAa,KAAK,UAAU,GAAG,GAG/B,gBAA0B,CAAC;AACjC,aAAO,KAAK,WAAW,oBAAoB,EAAE,QAAQ,iBAAe;AAj7LxE,YAAAH;AAm7LM,YAAI,CAAC,WAAW,qBAAqB,eAAe,WAAW;AAC7D;AAIF,YAAM,IAAI,CAAC;AAQX,YALI,KAAK,KAAK,SAAS,gBAKnB,MAAM,QAAQ,KAAK,OAAO,OAAKA,MAAA,KAAK,QAAQ,CAAC,MAAd,QAAAA,IAAiB;AAClD;AAGF,YAAM,UAAU,WAAW,aAAa,CAAC;AACzC,SAAI,KAAK,cAAc,CAAC,IAAI,MAAM,WAChC,KAAK,eAAe,KAAK,IAAI,KAAK,QAAQ,SAAS,IAAI,KAAK,KAAM,UAAqB,CAAC,CAAC,IAAI,MAAM,YAC7F,QAAQ,KAAK,aAAa,OAAO,CAAC,MAAM,KAAK,cACjD,cAAc,KAAM,CAAuB;AAAA,MAGjD,CAAC;AAED,UAAI,cACA;AACJ,aAAO,MAAM,UAAU,eAAe,cAAc,IAAI,CAAC;AACvD,mBAAW,WAAW,qBAAqB,YAAY,GAEnD,KAAK,SAAS,kCAAgC,UAAK,kBAAkB,GAAG,MAA1B,WAA8B,iBAC9E,KAAK,iCAAiC,UAAU,cAAc,GAAG,KAEjE,cAAS,kBAAT,WAAwB,YAAY,WAGtC,OAAO,WAAW,aAAa,YAAY,GAC3C,OAAO,WAAW,qBAAqB,YAAY,GAC/C,KAAK,kBAAkB,GAAG,KAC5B,OAAO,KAAK,kBAAkB,GAAG,EAAE,YAAY,GAGjD;AAAA,IAEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,sBAAsB,OAA0B;AAx+L5D;AAy+LI,UAAI,YACE,SAAsB,SAAS,cAAc,KAAK,GAClD,gBAA0B,CAAC,GAC7B,YACA,kBAAkB,GAClB,SACA,YACE,cAAc,KAAK,QAAQ;AAEjC,eAAS,MAAM,MAAM,KAAe,MAAM,MAAM,QAAkB,OAAO,KAAK,OAAO;AAEnF,YADA,aAAa,KAAK,UAAU,GAAG,GAC3B,CAAC;AACH;AAIF,aAAK,2BAA2B,GAAG,IAE/B,CAAC,KAAK,SAAS,qBAAqB,KAAK,oBAAoB,GAAG,MAAM,SACxE,KAAK,aAAa,OAAO,GAAG,GAI9B,aAAa;AAEb,YAAI,WAAW,KAAK,wBAAwB,GAAG;AAC/C,mBAAW,qCAAU;AAErB,YAAM,IAAI,KAAK,YAAY,GAAG;AAG9B,iBAAS,IAAI,GAAG,KAAK,aAAa,IAAI,IAAI,KAAK;AAC7C,cAAI,CAAC,KAAK,QAAQ,CAAC,KAAK,KAAK,QAAQ,CAAC,EAAE;AAAU;AAGlD,cAAI,KAAK,cAAc,CAAC,IAAI,MAAM;AAChC;AAIF,cAAI,MAAM,UAAU,UAAU,WAAW,aAAa,CAAC,CAAW,GAAG;AACnE,iBAAM,UAAU,IAAI,UAAU,IAAI;AAClC;AAAA,UACF;AAEA,oBAAU,GACV,aAAa,MACT,aACF,aAAa,SAAS,KAAK,QAAQ,CAAC,EAAE,EAAwB,KAAM,SAAiB,CAAC,GACtF,WAAU,8CAAY,YAAZ,YAAuB,GAC7B,YAAY,QACd,UAAU,KAAK;AAInB,cAAM,WAAW;AAIjB,cADY,MAAK,uBAAuB,KAAK,CAAC,GAK9C;AAAA,gBAAI,KAAK,eAAe,KAAK,IAAI,KAAK,GAAG,IAAI,WAAW,CAAC,CAAC,IAAI,MAAM,QAAQ;AAC1E,kBAAM,UAAU,KAAK,WAAW,KAAK,CAAC;AACtC,mBAAK,eAAe,QAAQ,KAAK,GAAG,UAAU,SAAS,YAAY,CAAC,GACpE;AAAA,YACF;AAEA,iBAAM,WAAW,IAAI,WAAW,IAAI;AAAA;AAAA,QACtC;AAEA,QAAI,eAEF,mBAAmB,YACnB,cAAc,KAAK,GAAG;AAAA,MAE1B;AACA,UAAI,CAAC,OAAO,SAAS;AACnB;AAGF,UAAI,cACA;AACJ,aAAO,MAAM,UAAU,eAAe,cAAc,IAAI,CAAC,KAAG;AAC1D,qBAAa,KAAK,UAAU,YAAY;AACxC,YAAI;AACJ,eAAO,MAAM,UAAU,YAAY,WAAW,gBAAgB,IAAI,CAAC;AAIjE,UAHA,OAAO,OAAO,WAGT,SAGD,KAAK,iBAAiB,KAAM,YAAY,KAAK,SAAS,eACxD,WAAW,QAAS,CAAC,EAAE,YAAY,IAAI,IAEvC,WAAW,QAAS,CAAC,EAAE,YAAY,IAAI,GAEzC,WAAW,qBAAsB,SAAS,IAAI;AAAA,MAElD;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUU,WAAW,OAA0E;AAzlMjG;AA0lMI,UAAM,YAA2B,CAAC,GAC5B,YAA2B,CAAC,GAC5B,OAAiB,CAAC,GACpB,qBAAqB,IACnB,aAAa,KAAK,cAAc,GAChC,iBAAiB,oBAAI,IAAY,GACjC,gBAAgB,oBAAI,IAAY;AAEtC,eAAS,IAAI,MAAM,KAAe,KAAK,MAAM,QAAkB,KAAK,IAAI;AACtE,YAAI,OAAK,UAAU,CAAC,KAAM,KAAK,iBAAiB,KAAK,SAAS,gBAAgB,MAAM,KAAK,cAAc,IAWvG;AAAA,cARA,KAAK,gBACL,KAAK,KAAK,CAAC,GACX,cAAc,IAAI,CAAC,GAGnB,KAAK,UAAU,CAAC,IAAI,KAAK,sBAAsB,GAG3C,KAAK,SAAS,mBAAmB;AACnC,gBAAM,gBAAgB,KAAK,oBAAoB,CAAC;AAChD,YAAI,kBAAkB,QACpB,cAAc,IAAI,aAAa;AAAA,UAEnC;AAEA,eAAK,cAAc,WAAW,WAAW,GAAG,OAAO,UAAU,GAC7D,eAAe,IAAI,CAAC,GAChB,KAAK,kBAAkB,KAAK,cAAc,MAC5C,qBAAqB,KAEvB,KAAK;AAAA;AAIP,UAAM,oBAAoB,KAAK,cAAc,eAAe,cAAc;AAU1E,UATI,kBAAkB,OAAO,KAC3B,kBAAkB,QAAQ,OAAK;AAC7B,aAAK,mBAAmB,CAAC,GACzB,KAAK,KAAK,CAAC,GACX,KAAK,UAAU,CAAC,IAAI,KAAK,sBAAsB,GAC/C,KAAK,cAAc,WAAW,WAAW,GAAG,OAAO,UAAU;AAAA,MAC/D,CAAC,GAGC,KAAK,QAAQ;AACf,YAAM,IAAI,SAAS,cAAc,KAAK,GAChC,SAAS,SAAS,cAAc,KAAK;AAE3C,kBAAU,QAAQ,SAAO,EAAE,YAAY,GAAkB,CAAC,GAC1D,UAAU,QAAQ,SAAO,OAAO,YAAY,GAAkB,CAAC;AAE/D,iBAAS,IAAI,GAAG,KAAK,KAAK,QAAQ,IAAI,IAAI;AACxC,UAAK,KAAK,iBAAmB,KAAK,CAAC,KAAK,KAAK,kBACvC,KAAK,iBAAiB,KACpB,UAAK,cAAL,WAAgB,eAAe,KAAK,CAAC,MAAM,EAAE,cAAc,OAAO,eACpE,KAAK,UAAU,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE,YAA2B,OAAO,UAAyB,GAChG,KAAK,eAAe,YAAY,EAAE,UAAuB,GACzD,KAAK,eAAe,YAAY,OAAO,UAAuB,MAG5D,UAAK,cAAL,WAAgB,eAAe,KAAK,CAAC,MAAM,EAAE,eAC/C,KAAK,UAAU,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE,UAAyB,GAC9D,KAAK,eAAe,YAAY,EAAE,UAAuB,KAGpD,KAAK,iBAAiB,KAC3B,UAAK,cAAL,WAAgB,eAAe,KAAK,CAAC,MAAM,EAAE,cAAc,OAAO,eACpE,KAAK,UAAU,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE,YAA2B,OAAO,UAAyB,GAChG,KAAK,YAAY,YAAY,EAAE,UAAuB,GACtD,KAAK,YAAY,YAAY,OAAO,UAAuB,MAGzD,UAAK,cAAL,WAAgB,eAAe,KAAK,CAAC,MAAM,EAAE,eAC/C,KAAK,UAAU,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE,UAAyB,GAC9D,KAAK,YAAY,YAAY,EAAE,UAAuB;AAK5D,QAAI,uBACF,KAAK,iBAAiB,KAAK,YAAY,KAAK,WAAW,KAAK,UAAU;AAAA,MAE1E;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOU,qBAAqB;AAC7B,eAAW,OAAO,KAAK;AACrB,YAAI,KAAK,WAAW;AAClB,cAAM,YAAY,MAAM,SAAS,KAAK,EAAE,IAAI,GACtC,UAAU,KAAK,UAAU,SAAS,EAAE,QAAS,CAAC;AACpD,UAAI,KAAK,SAAS,2BAA2B,cAC3C,QAAQ,MAAM,YAAY,cAAc,KAAK,UAAU,SAAS,CAAC,QAEjE,QAAQ,MAAM,MAAM,GAAG,KAAK,UAAU,SAAS,CAAC;AAAA,QAEpD;AAAA,IAEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,SAAS;AACP,UAAI,CAAC,KAAK;AAAe;AAEzB,WAAK,eAAe,QAAQ;AAE5B,UAAM,UAAU,KAAK,gBAAgB,GAC/B,WAAW,KAAK,iBAAiB;AAMvC,UAHA,KAAK,YAAY,QAAQ,GAGrB,KAAK,2BAA2B,KAAK,YAAY;AACnD,YAAI,KAAK,eAAe;AACtB,cAAM,qBAAqB,MAAM,OAAO,IAAM,CAAC,GAAG,QAAQ;AAE1D,UAAI,KAAK,SAAS,gBAChB,mBAAmB,MAAM,KAAK,iBAC9B,mBAAmB,SAAS,KAAK,cAAc,MAE/C,mBAAmB,MAAM,GACzB,mBAAmB,SAAS,KAAK,SAAS,YAE5C,KAAK,sBAAsB,kBAAkB;AAAA,QAC/C;AACA,aAAK,sBAAsB,QAAQ;AAAA,MACrC;AAGA,WAAK,WAAW,QAAQ,GAGpB,KAAK,kBACH,KAAK,SAAS,eAChB,KAAK,WAAW;AAAA,QACd,KAAK,KAAK;AAAA,QAAiB,QAAQ,KAAK,cAAc,IAAI;AAAA,QAAG,QAAQ,SAAS;AAAA,QAAQ,SAAS,SAAS;AAAA,MAC1G,CAAC,IAED,KAAK,WAAW;AAAA,QACd,KAAK;AAAA,QAAG,QAAQ,KAAK,SAAS,YAAa;AAAA,QAAG,QAAQ,SAAS;AAAA,QAAQ,SAAS,SAAS;AAAA,MAC3F,CAAC,IAIL,KAAK,qBAAqB,QAAQ,KAClC,KAAK,mBAAmB,KAAK,IAAI,KAAK,6BAA6B,IAAI,GAAG,QAAQ,MAAM,GACxF,KAAK,oBAAoB,GAEzB,KAAK,wBAAwB,KAAK,WAClC,KAAK,yBAAyB,KAAK,YACnC,KAAK,QAAQ,KAAK,YAAY,EAAE,UAAU,QAAQ,KAAK,QAAQ,QAAQ,QAAQ,MAAM,KAAK,CAAC;AAAA,IAC7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWA,mBAAmB,KAAa;AAE9B,UAAI,SAAS;AACb,aAAI,KAAK,gBACH,KAAK,SAAS,eACZ,OAAO,KAAK,kBACV,KAAK,IAAI,KAAK,eAChB,SAAU,KAAK,kBAAkB,KAAK,SAAS,YAE/C,SAAS,KAAK,IAGhB,SAAS,IAIP,OAAO,KAAK,kBACd,SAAS,KAAK,mBAEd,SAAS,IAIb,SAAS,GAGJ;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAgBU,2BAA2B;AACnC,UAAI,OAA4B,KAAK,iBAAiB,CAAC,KAAK,SAAS,eAAgB,KAAK,iBAAiB,KAAK;AAChH,cAAQ,OAAO,KAAM,gBAA+B,SAAS,QAAQ;AAEnE,SAAI,SAAS,KAAK,iBAAiB,KAAK,gBAAgB,KAAK,eAAe,KAAK,iBAAiB,KAAK,kBACrG,KAAK,gBAAgB,KAAK,IAAI,GAC9B,KAAK,qBAAqB,KAAK,MAAM,UAAU,KAAK,+BAA+B,KAAK,IAAI,CAAC;AAAA,IAGnG;AAAA;AAAA;AAAA;AAAA;AAAA,IAMU,6BAA6B;AACrC,WAAK,gBAAgB,QAAQ,CAAC,aAAa;AACzC,aAAK,qBAAqB,kBAAkB,UAAU,QAAQ;AAAA,MAChE,CAAC,GACD,KAAK,kBAAkB,CAAC;AAAA,IAC1B;AAAA;AAAA;AAAA;AAAA;AAAA,IAMU,cAAc;AACtB,MAAI,KAAK,iBAAiB,KACxB,KAAK,yBAAyB,KAAK,kBACnC,KAAK,4BAA4B,KAAK,qBACtC,KAAK,4BAA4B,KAAK,qBAElC,KAAK,gBACH,KAAK,SAAS,gBAChB,KAAK,4BAA4B,KAAK,kBACtC,KAAK,4BAA4B,KAAK,iBAEtC,KAAK,4BAA4B,KAAK,4BAA4B,KAAK,mBAGzE,KAAK,4BAA4B,KAAK,4BAA4B,KAAK,kBAGzE,KAAK,yBAAyB,KAAK,kBACnC,KAAK,4BAA4B,KAAK,qBACtC,KAAK,4BAA4B,KAAK,qBAElC,KAAK,gBACH,KAAK,SAAS,gBAChB,KAAK,4BAA4B,KAAK,kBACtC,KAAK,4BAA4B,KAAK,iBAEtC,KAAK,4BAA4B,KAAK,4BAA4B,KAAK,mBAGzE,KAAK,4BAA4B,KAAK,4BAA4B,KAAK;AAAA,IAG7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,SAAS,GAAW;AAz3MtB;AA03MI,UAAI,KAAK,IAAI,GAAG,CAAC,GACjB,IAAI,KAAK,IAAI,IAAI,KAAK,MAAM,KAAM,MAAM,OAAO,KAAK,yBAAyB,MAAiB,KAAK,sBAAsB,KAAK,iBAAiB,OAAM,gBAAK,wBAAL,mBAA0B,WAA1B,YAAyC,EAAE;AAEhM,UAAM,YAAY,KAAK;AACvB,WAAK,SAAS,KAAK,MAAM,KAAK,QAAQ,KAAK,MAAM,EAAE,GACnD,KAAK,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG,KAAK,MAAM,KAAK,KAAK,MAAM,EAAE,CAAC;AACtE,UAAM,eAAgB,IAAI,KAAK;AAE/B,UAAI,KAAK,WAAW,WAAW;AAC7B,YAAM,QAAQ,KAAK,gBAAgB,YAAY;AAC/C,aAAK,YAAY,KAAK,GACtB,KAAK,mBAAmB;AAAA,MAC1B;AAEA,MAAI,KAAK,kBAAkB,iBACzB,KAAK,aAAc,KAAK,gBAAgB,YAAY,eAAe,KAAK,SAAU,IAAI,IACtF,KAAK,wBAAyB,KAAK,YAAY,KAAK,gBAAgB,cAEhE,KAAK,iBAAiB,MACxB,KAAK,cAAc,YAAY,eAG7B,KAAK,kBACP,KAAK,iBAAiB,YAAY,KAAK,iBAAiB,YAAY,eAGlE,KAAK,8BACP,KAAK,0BAA0B,YAAY,eAG7C,KAAK,QAAQ,KAAK,mBAAmB,CAAC,CAAC;AAAA,IAE3C;AAAA;AAAA,IAGU,wBAAwB;AAChC,UAAM,aAAa,KAAK,0BAA0B;AAClD,MAAI,eAAe,KAAK,0BAA0B,eAChD,KAAK,0BAA0B,aAAa;AAAA,IAEhD;AAAA;AAAA,IAGU,wBAAwB;AAChC,UAAM,aAAa,KAAK,0BAA0B;AAClD,MAAI,eAAe,KAAK,0BAA0B,eAChD,KAAK,0BAA0B,aAAa;AAAA,IAEhD;AAAA;AAAA;AAAA;AAAA,IAKU,6BAA6B;AACrC,WAAK,oBAAoB,KAAK,uBAAuB;AAAA,IACvD;AAAA;AAAA;AAAA;AAAA;AAAA,IAMU,6BAA6B;AACrC,WAAK,oBAAoB,KAAK,uBAAuB;AAAA,IACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,oBAAoB,SAAsB;AAClD,UAAM,aAAa,QAAQ;AAC3B,MAAI,eAAe,KAAK,0BAA0B,eAChD,KAAK,0BAA0B,aAAa;AAAA,IAEhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWU,aAAa,GAAW;AAChC,kBAAK,eAAe,KAAK,0BAA0B,cACnD,KAAK,YAAY,KAAK,0BAA0B,WAChD,KAAK,aAAa,KAAK,0BAA0B,YAC1C,KAAK,cAAc,IAAI,WAAW,QAAQ;AAAA,IACnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAgBU,cAAc,YAAgD,UAAU;AAChF,UAAI,qBAAqB,KAAK,0BAA0B,eAAe,KAAK,0BAA0B,cAClG,qBAAqB,KAAK,0BAA0B,cAAc,KAAK,0BAA0B;AAIrG,2BAAqB,KAAK,IAAI,GAAG,kBAAkB,GACnD,qBAAqB,KAAK,IAAI,GAAG,kBAAkB,GAG/C,KAAK,YAAY,uBACnB,KAAK,YAAY,oBACjB,KAAK,eAAe,qBAElB,KAAK,aAAa,uBACpB,KAAK,aAAa;AAGpB,UAAM,cAAc,KAAK,IAAI,KAAK,YAAY,KAAK,aAAa,GAC1D,cAAc,KAAK,IAAI,KAAK,aAAa,KAAK,cAAc;AAuClE,UArCI,gBACF,KAAK,iBAAiB,KAAK,YAG3B,KAAK,0BAA0B,aAAa,KAAK,YACjD,KAAK,uBAAuB,aAAa,KAAK,YAC9C,KAAK,mBAAmB,CAAC,EAAE,aAAa,KAAK,YACzC,KAAK,SAAS,oBAChB,KAAK,0BAA0B,aAAa,KAAK,aAE/C,KAAK,SAAS,yBACZ,KAAK,iBAAiB,IACxB,KAAK,yBAAyB,aAAa,KAAK,aAEhD,KAAK,wBAAwB,aAAa,KAAK,aAG/C,KAAK,SAAS,yBAChB,KAAK,wBAAwB,aAAa,KAAK,aAG7C,KAAK,iBAAiB,KACpB,KAAK,kBACP,KAAK,cAAc,aAAa,KAAK,aAEvC,KAAK,oBAAoB,aAAa,KAAK,eAEvC,KAAK,kBACP,KAAK,cAAc,aAAa,KAAK,aAEvC,KAAK,oBAAoB,aAAa,KAAK,cAO3C,eAAe,CAAC,KAAK,SAAS;AAiBhC,YAhBA,KAAK,aAAa,KAAK,gBAAgB,KAAK,YAAY,IAAI,IAC5D,KAAK,gBAAgB,KAAK,WAEtB,cAAc,iBAChB,KAAK,0BAA0B,YAAY,KAAK,YAG9C,KAAK,iBAAiB,MACpB,KAAK,iBAAiB,CAAC,KAAK,SAAS,eACvC,KAAK,iBAAiB,YAAY,KAAK,YAEvC,KAAK,cAAc,YAAY,KAAK,YAKpC,cAAc,KAAK;AACrB,eAAK,SAAS,KAAK,YAAY,KAAK,MAAM;AAAA,aACrC;AACL,cAAM,YAAY,KAAK;AACvB,UAAI,KAAK,MAAM,KAAK,YAClB,KAAK,OAAO,IAEZ,KAAK,OAAO,KAAK,IAAI,KAAK,IAAI,GAAG,KAAK,MAAM,KAAK,cAAc,KAAK,KAAK,KAAK,cAAc,KAAK,IAAI,KAAK,eAAe,IAAI,KAAK,GAAG,CAAC,GAExI,KAAK,SAAS,KAAK,MAAM,KAAK,OAAO,KAAK,EAAE,GACxC,cAAc,KAAK,UACrB,KAAK,kBAAkB;AAAA,QAE3B;AAGF,UAAI,eAAe,aAAa;AAC9B,YAAM,KAAK,KAAK,IAAI,KAAK,yBAAyB,KAAK,UAAU,GAC3D,KAAK,KAAK,IAAI,KAAK,wBAAwB,KAAK,SAAS;AAC/D,SAAI,KAAK,MAAM,KAAK,QAEd,KAAK,SAAS,sBAAuB,KAAK,KAAK,aAAa,KAAK,KAAK,YACxE,KAAK,OAAO,IAGZ,KAAK,eAAe,QAAQ,GAG9B,KAAK,QAAQ,KAAK,mBAAmB,CAAC,CAAC;AAAA,MAE3C;AASA,aAPA,KAAK,QAAQ,KAAK,UAAU;AAAA,QAC1B,aAAa;AAAA,QACb,cAAc,KAAK;AAAA,QACnB,YAAY,KAAK;AAAA,QACjB,WAAW,KAAK;AAAA,MAClB,CAAC,GAEG,kBAAe;AAAA,IAErB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,mBAAmB,KAAa,MAAc,UAAoB;AAGhE,UAFA,KAAK,kBAAkB,KAAK,QAAQ,GAEhC,QAAQ,KAAK,SAAS;AACxB;AAGF,UAAM,UAAU,KAAK,WAAW,KAAK,IAAI;AACzC,WAAK,6BAA6B,KAAK,cAAc,IAAI,GAAG,KAAK,eAAe,QAAQ,UAAU,IAAI,UAAU,IAAI,EAAE,CAAC;AAAA,IACzH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUU,6BAA6B,MAAc,OAAe;AArnNtE;AAsnNI,UAAM,cAAc,KAAK,aAAc,MAAM,MAAM,KAAK,yBAAyB,KAAgB,KAAK,uBAAsB,gBAAK,wBAAL,mBAA0B,UAA1B,YAAwC;AAEpK,MAAI,OAAO,KAAK,cACd,KAAK,0BAA0B,aAAa,MAC5C,KAAK,aAAa,GAClB,KAAK,OAAO,KACH,QAAQ,gBACjB,KAAK,0BAA0B,aAAa,KAAK,IAAI,MAAM,QAAQ,KAAK,0BAA0B,WAAW,GAC7G,KAAK,aAAa,GAClB,KAAK,OAAO;AAAA,IAEhB;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,qBAAqB,MAAc;AACjC,WAAK,6BAA6B,KAAK,cAAc,IAAI,GAAG,KAAK,eAAe,IAAI,CAAC;AAAA,IACvF;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,2BAA2B,YAAqE;AAC9F,WAAK,eAAgB,WAAW,aAAa,GAC7C,KAAK,mBAAoB,WAAW,YAAY,WAAW,aAAa;AAAA,IAC1E;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,2BAA2B,KAAuB;AAChD,aAAO,KAAK,uBAAiC,KAAK,SAAS;AAAA,IAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,oBAAoB,KAA4B;AAC9C,aAAO,KAAK,uBAAsC,GAAG;AAAA,IACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAcU,uBAA0B,KAAa,YAAqC;AACpF,UAAM,mBAA6B,CAAC,GAChC,oBAAoB;AAExB,eAAS,MAAM,GAAG,MAAM,KAAK,QAAQ,QAAQ,MAAM,KAAK,OAAO;AAC7D,YAAM,QAAQ,KAAK,sBAAsB,GAAG;AAC5C,YAAI;AACF,mBAAW,SAAS,MAAM,KAAK,KAAK,GAAG;AACrC,gBAAM,CAAC,OAAO,GAAG,IAAI,MAAM,MAAM,GAAG,EAAE,IAAI,MAAM;AAChD,gBAAI,OAAO,SAAS,OAAO;AACzB,kBAAI,eAAe;AACjB,iCAAiB,KAAK,GAAG;AAAA,mBACpB;AACL,oCAAoB;AACpB;AAAA,cACF;AAAA,UAEJ;AAAA,MAEJ;AACA,aAAQ,eAAe,YAAY,mBAAmB;AAAA,IACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,uBAAuB,KAAa,MAAc,mBAAmB,IAA6D;AAChI,UAAI,aAAa,MACX,eAAe,KAAK,sBAAsB,IAAI,KAAK,oBAAI,IAAY;AAEzE,eAAW,SAAS,MAAM,KAAK,YAAY,GAAG;AAC5C,YAAM,CAAC,OAAO,GAAG,IAAI,MAAM,MAAM,GAAG,EAAE,IAAI,MAAM;AAEhD,aADuB,mBAAmB,MAAM,QAAQ,OAAO,UACzC,OAAO,KAAK;AAChC,uBAAa,EAAE,OAAO,KAAK,MAAM;AACjC;AAAA,QACF;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,yBAAyB;AACvB,UAAM,KAAK,KAAK,cAAc;AAC9B,UAAI,KAAK,GAAG;AACV,aAAK,wBAAwB,CAAC;AAC9B,iBAAS,MAAM,GAAG,MAAM,IAAI;AAC1B,eAAK,0BAA0B,GAAG;AAGpC,aAAK,mBAAmB;AAAA,MAC1B;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,0BAA0B,KAAa;AAC/C,UAAM,UAAU,KAAK,wBAAwB,GAAG;AAChD,MAAI,2BAAS,WACX,OAAO,KAAK,QAAQ,OAAO,EAAE,QAAQ,SAAO;AAC1C,YAAM,SAAS,CAAC,KACV,aAAa,QAAQ,QAAS,MAAM,GACpC,UAAU,GAAE,yCAAY,YAAW,IACnC,UAAU,GAAE,yCAAY,YAAW;AACzC,aAAK,qBAAqB,KAAK,QAAQ,SAAS,OAAO;AAAA,MACzD,CAAC;AAAA,IAEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWU,qBAAqB,KAAa,MAAc,SAAiB,SAAiB;AA9wN9F;AA+wNI,UAAI,UAAU,GAAG;AACf,YAAM,QAAQ,GAAG,GAAG,IAAI,MAAM,UAAU,CAAC;AAGzC,aAFA,gBAAK,uBAAL,8BAAqC,oBAAI,IAAI,IAC7C,KAAK,sBAAsB,IAAI,EAAE,IAAI,KAAK,GACtC,UAAU;AACZ,mBAAS,IAAI,GAAG,IAAI,SAAS;AAC3B,6BAAK,uBAAL,KAA2B,OAAO,OAAlC,kBAAyC,oBAAI,IAAI,IACjD,KAAK,sBAAsB,OAAO,CAAC,EAAE,IAAI,KAAK;AAAA,MAGpD;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA,IAMU,wBAAoC;AAC5C,aAAO;AAAA,QACL,SAAS;AAAA;AAAA;AAAA,QAIT,cAAc,CAAC;AAAA;AAAA,QAGf,sBAAsB,CAAC;AAAA;AAAA;AAAA;AAAA,QAKvB,iBAAiB,CAAC;AAAA,MACpB;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,kBAAkB,KAAa,UAAoB;AAvzNrD;AAwzNI,UAAI,CAAC,KAAK,iBACP,CAAC,KAAK,SAAS,gBAAgB,MAAM,KAAK,kBAAkB,KAC5D,KAAK,SAAS,gBAAgB,MAAM,KAAK,kBAAkB,GAAI;AAEhE,YAAM,kBAAkB,MAAM,OAAO,KAAK,yBAAyB,GAI7D,YAAa,KAAK,iBAAiB,CAAC,KAAK,SAAS,eAAe,MAAM,KAAK,SAAS,YAAa,KAElG,WAAW,YAAY,KAAK,SAAS,WACrC,eAAe,YAAY,KAAK,KAAK,SAAS,YAChD,mBACC,KAAK,uBAAsB,gBAAK,wBAAL,mBAA0B,WAA1B,YAAyC;AAGzE,SAAK,YAAY,KAAK,KAAK,SAAS,YAAa,KAAK,YAAY,kBAAkB,KAAK,UACvF,KAAK,SAAS,WAAW,WAAW,WAAW,GAC/C,KAAK,OAAO,KAGL,YAAY,KAAK,SAAS,YAAa,KAAK,YAAY,KAAK,WACpE,KAAK,SAAS,WAAW,cAAc,QAAQ,GAC/C,KAAK,OAAO;AAAA,MAEhB;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,eAAe,KAAa;AAC1B,WAAK,SAAS,MAAM,KAAK,SAAS,SAAU,GAC5C,KAAK,OAAO;AAAA,IACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYU,WAAW,KAAa;AAChC,UAAM,YAAY,MAAM,KAAK,gBAGvB,iCAAiC,KAAK,YAAY,KAAK,SAAS,YAAa;AAInF,UAHA,KAAK,UAAU,KAAK,mBAAmB,8BAA8B,IAAI,aAAa,KAAK,SAAS,SAAU,GAC9G,KAAK,OAAO,GAER,KAAK,SAAS,wBAAwB,MAAM,UAAU,KAAK,SAAS,GAAG;AACzE,YAAI,MAAM,KAAK,YAAY,WACrB,4BAA4B,KAAK,6BAA6B;AACpE,QAAI,OAAO,8BACT,MAAM,4BAA4B,IAEhC,MAAM,MACR,MAAM;AAMR,YAAM,MAAM,QAAQ,IAChB,KAAK,SAAS,MAAM,KAAK,GAAG,KAAK,YAAY,KAAK,YAAY,KAAK,UAAU,IAC7E,KAAK,OAAO,MAAM,GAAG,KAAK,YAAY,KAAK,YAAY,KAAK,UAAU;AAC1E,aAAK,cAAc,GAAG;AAAA,MACxB;AAAA,IACF;AAAA;AAAA,IAGA,mBAAmB;AACjB,WAAK,WAAW,CAAC;AAAA,IACnB;AAAA;AAAA,IAGA,iBAAiB;AACf,WAAK,WAAW,EAAE;AAAA,IACpB;AAAA;AAAA,IAGA,cAAc;AACZ,WAAK,gBAAgB,GACrB,KAAK,cAAc,CAAC;AAAA,IACtB;AAAA;AAAA,IAGA,iBAAiB;AAp5NnB;AAq5NI,UAAM,MAAM,KAAK,cAAc,IAAI,GAC/B,UAAS,gBAAK,uBAAuB,KAAK,KAAK,UAAU,MAAhD,mBAAmD,UAAnD,YAA4D;AAEzE;AAKE,YAJI,KAAK,SAAS,qBAChB,KAAK,aAAa,MAAM,GAEN,KAAK,cAAc,MAAM,KACzB,KAAK,eAAe,KAAK,cAAe,CAAC,MAAM,UAAU,KAAK,UAAU;AAC1F;AAAA,aAEK,EAAE,SAAS;AAAA,IACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,cAAc,KAAa;AACzB,UAAM,WAAW,KAAK,cAAc;AACpC,UAAI,CAAC;AAAY,eAAO;AAExB,MAAI,MAAM,IACR,MAAM,IACG,OAAO,aAChB,MAAM,WAAW,IAGnB,KAAK,mBAAmB,KAAK,GAAG,EAAI;AACpC,UAAI,cAAc,CAAC,MAAM,UAAU,KAAK,UAAU,KAAK,CAAC,MAAM,UAAU,KAAK,SAAS;AAEtF,UAAI,KAAK,SAAS,wBAAwB,MAAM,UAAU,KAAK,SAAS,GAAG;AACzE,YAAI,OAAO,GACP,WAA0B,MACxB,iBAAiB,KAAK;AAC5B,eAAO,QAAQ,KAAK;AAClB,UAAI,KAAK,gBAAgB,KAAK,IAAI,MAChC,WAAW,OACP,CAAC,MAAM,UAAU,KAAK,UAAU,KAAK,SAAS,KAAK,gBACrD,cAAc,MAGlB,QAAQ,KAAK,WAAW,KAAK,IAAI;AAGnC,QAAI,aAAa,QACf,KAAK,sBAAsB,KAAK,YAAY,KAAK,QAAQ,CAAC,GAC1D,KAAK,aAAa,kBAElB,KAAK,gBAAgB;AAAA,MAEzB;AACA,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUU,WAAW,KAAa,MAAsB;AACtD,UAAM,WAAW,KAAK,wBAAwB,GAAG;AACjD,UAAI,CAAC,YAAY,CAAC,SAAS;AACzB,eAAO;AAGT,MAAI,QAAQ,KAAK,QAAQ,WACvB,OAAO,KAAK,QAAQ,SAAS;AAE/B,UAAM,aAAa,SAAS,QAAQ,KAAK,QAAQ,IAAI,EAAE,EAAE,KAAK,SAAS,QAAQ,IAAI,GAC/E,UAAU,yCAAY;AAC1B,aAAI,YAAY,MACd,UAAU,KAAK,QAAQ,SAAS,OAEhC,UAAU,WAAW,GAGhB;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAuBU,gCAAgC,YAAwB,kBAAuB,QAAgB;AAhgO3G;AAigOI,WAAK,sBAGD,OAAO,oBAAqB,YAC9B,OAAO,KAAK,gBAAgB,EAAE,QAAQ,eAAa;AACjD,QAAI,iBAAiB,eAAe,SAAS,KAC3C,KAAK,0BAA0B,KAAK;AAAA,UAClC,YAAY;AAAA,UACZ,SAAS,KAAK;AAAA,UACd,MAAM,WAAW,qBAAqB,CAAC,SAAS;AAAA,UAChD,WAAW,CAAC;AAAA,UACZ;AAAA,QACF,CAAC;AAAA,MAEL,CAAC,GAGE,WAAW,YACd,WAAW,UAAU,CAAC,IAExB,KAAK,0BAA0B,KAAK;AAAA,QAClC,YAAY;AAAA,QACZ,SAAS,KAAK;AAAA,QACd,MAAM,WAAW;AAAA,MACnB,CAAC,IACD,gBAAW,YAAX,WAAoB,QAAQ,CAAC,SAAS,KAAK,OAAO;AAAA,IACpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUU,iCAAiC,UAAuB,WAAmB,QAAgB;AACnG,WAAK,0BAA0B,KAAK;AAAA,QAClC,YAAY;AAAA,QACZ,SAAS,KAAK;AAAA,QACd,MAAM;AAAA,QACN;AAAA,QACA;AAAA,MACF,CAAC,GACD,SAAS,OAAO;AAAA,IAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,4BAA4B,iBAA8G,UAA0B,gBAA0B;AAE5L,UADI,mBAAoB,SAAyC,kBAAkB,KAC/E,OAAO,UAAU,SAAS,KAAK,eAAe,MAAM,mBAAmB;AACzE,aAAK,cAAc,UAAU,eAAuC;AACpE;AAAA,MACF;AAEA,UAAM,eAAsC,gBAA4C,QAAS,gBAA4C;AAC7I,WAAK,cAAc,UAAU,YAAY,GAEpC,gBAA0C,iBAAiB,CAAC,kBAC/D,SAAS,UAAU,OAAO,GAAG,MAAM,gBAAiB,gBAA0C,aAAa,CAAC,GAEzG,gBAA0C,cAC7C,SAAS,UAAU,IAAI,GAAG,MAAM,gBAAiB,gBAA0C,UAAU,CAAC,GAEnG,gBAA0C,WAC7C,SAAS,aAAa,SAAU,gBAA0C,OAAQ;AAAA,IAEtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,sBAAsB;AAC9B,MAAK,KAAK,SAAS,0BAGnB,OAAO,aAAa,KAAK,YAAY,GACrC,KAAK,eAAe,OAAO,WAAW,KAAK,qBAAqB,KAAK,IAAI,GAAG,KAAK,SAAS,oBAAoB;AAAA,IAChH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,6BAA6B;AACrC,MAAK,KAAK,SAAS,iCAGnB,OAAO,aAAa,KAAK,mBAAmB,GAC5C,KAAK,sBAAsB,OAAO,WAAW,KAAK,4BAA4B,KAAK,IAAI,GAAG,KAAK,SAAS,2BAA2B;AAAA,IACrI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,gCAAgC,KAAa;AAErD,MAAI,OAAO,KAAK,kBAAkB,GAAG,KAAM,YACzC,OAAO,KAAK,KAAK,kBAAkB,GAAG,CAAC,EAAE,QAAQ,eAAa;AAC5D,QAAI,KAAK,kBAAkB,GAAG,EAAE,eAAe,SAAS,MACtD,KAAK,kBAAkB,GAAG,EAAE,SAAS,IAAI;AAAA,MAE7C,CAAC,GAEH,KAAK,qBAAqB,KAAK,IAAI,KAAK,oBAA8B,GAAG,GACzE,KAAK,mBAAmB,KAAK,IAAI,KAAK,kBAA4B,GAAG,GACrE,KAAK,oBAAoB;AAAA,IAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYU,uBAAuB;AAC/B,UAAM,aAAa,KAAK,cAAc;AACtC,aAAO,KAAK,sBAAsB,KAAK,oBAAkB;AACvD,YAAM,MAAO,KAAK,cAAc,IAAK,KAAK,uBAAuB,KAAK,oBAChE,aAAa,KAAK,UAAU,GAAG;AACrC,YAAI,GAAC,cAAc,OAAO,aAI1B;AAAA,UAAK,KAAK,kBAAkB,GAAG,MAC7B,KAAK,kBAAkB,GAAG,IAAI,CAAC,IAGjC,KAAK,2BAA2B,GAAG,GACnC,OAAO,KAAK,WAAW,oBAAoB,EAAE,QAAQ,YAAU;AAC7D,gBAAI,WAAW,qBAAqB,eAAe,MAAM,GAAG;AAC1D,kBAAM,YAAY,CAAC,QACb,IAAI,KAAK,QAAQ,SAAS,GAC1B,kBAAkB,KAAK,kBAAkB,GAAG,EAAE,SAAS;AAC7D,kBAAI,EAAE,mBAAmB,oBAAoB,KAAK;AAChD,oBAAM,OAAO,WAAW,qBAAqB,SAAS;AACtD,gBAAI,QACF,EAAE,gBAAgB,MAAM,KAAK,KAAK,YAAY,GAAG,GAAG,GAAI,oBAAoB,GAAI,GAElF,KAAK,kBAAkB,GAAG,EAAE,SAAS,IAAI;AAAA,cAC3C;AAAA,YACF;AAAA,UACF,CAAC,GAED,KAAK,eAAe,OAAO,WAAW,KAAK,qBAAqB,KAAK,IAAI,GAAG,KAAK,SAAS,oBAAoB;AAC9G;AAAA;AAAA,MACF;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,8BAA8B;AACtC,UAAI,KAAK,0BAA0B,SAAS,GAAG;AAC7C,YAAM,UAAU,KAAK,0BAA0B,CAAC,EAAE;AAGlD,eAAO,KAAK,0BAA0B,SAAS,KAAK,KAAK,0BAA0B,CAAC,EAAE,YAAY,WAAS;AACzG,cAAM,QAAQ,KAAK,0BAA0B,MAAM;AAMnD,eALI,+BAAO,gBAAe,OACvB,MAAM,KAAuB,QAAQ,CAAC,SAAS;AAC9C,iBAAK,OAAO;AAAA,UACd,CAAC,IAEC,+BAAO,gBAAe,KAAK;AAC7B,gBAAM,SAAS,KAAK,QAAQ,MAAM,SAAmB;AACrD,YAAI,OAAO,0BAA0B,MAAM,QAEzC,OAAO,uBAAuB,MAAM,MAAwB,MAAM,QAAkB,MAAM;AAAA,UAE9F;AAAA,QACF;AAGA,aAAK,sBAAsB,OAAO,WAAW,KAAK,4BAA4B,KAAK,IAAI,GAAG,KAAK,SAAS,2BAA2B;AAAA,MACrI;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWU,kCAAkC,WAAiC,aAAmC;AAC9G,UAAI,MACA,cACA;AACJ,MAAI,OAAO,KAAK,aAAc,YAC5B,OAAO,KAAK,KAAK,SAAS,EAAE,QAAQ,SAAO;AACzC,QAAI,KAAK,cACP,iBAAiB,2CAAc,MAC/B,eAAe,uCAAY,MAEvB,kBACF,OAAO,KAAK,cAAc,EAAE,QAAQ,cAAY;AAC9C,WAAI,CAAC,gBAAgB,eAAe,QAAQ,MAAM,aAAa,QAAQ,OACrE,OAAO,KAAK,YAAY,CAAC,KAAK,KAAK,eAAe,QAAQ,CAAC,GACvD,QACF,KAAK,UAAU,OAAO,eAAe,QAAQ,CAAC;AAAA,QAGpD,CAAC,GAGC,gBACF,OAAO,KAAK,YAAY,EAAE,QAAQ,cAAY;AAC5C,WAAI,CAAC,kBAAkB,eAAe,QAAQ,MAAM,aAAa,QAAQ,OACvE,OAAO,KAAK,YAAY,CAAC,KAAK,KAAK,eAAe,QAAQ,CAAC,GACvD,QACF,KAAK,UAAU,IAAI,aAAa,QAAQ,CAAC;AAAA,QAG/C,CAAC;AAAA,MAGP,CAAC;AAAA,IAEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYA,iBAAiB,KAAa,MAAoB;AAChD,UAAI,KAAK,eAAe,GAAG;AACzB,cAAM,IAAI,MAAM,uDAAuD,GAAG,mBAAmB;AAG/F,WAAK,eAAe,GAAG,IAAI,MAC3B,KAAK,kCAAkC,MAAM,IAAI,GACjD,KAAK,QAAQ,KAAK,wBAAwB,EAAE,KAAK,MAAM,MAAM,KAAK,CAAC;AAAA,IACrE;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,oBAAoB,KAAa;AAC/B,MAAK,KAAK,eAAe,GAAG,MAI5B,KAAK,kCAAkC,MAAM,KAAK,eAAe,GAAG,CAAC,GACrE,OAAO,KAAK,eAAe,GAAG,GAC9B,KAAK,QAAQ,KAAK,wBAAwB,EAAE,KAAK,MAAM,MAAM,MAAM,KAAK,CAAC;AAAA,IAC3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,iBAAiB,KAAa,MAAoB;AAChD,UAAM,WAAW,KAAK,eAAe,GAAG;AAExC,WAAK,eAAe,GAAG,IAAI,MAC3B,KAAK,kCAAkC,MAAM,QAAQ,GACrD,KAAK,QAAQ,KAAK,wBAAwB,EAAE,KAAK,MAAM,MAAM,KAAK,CAAC;AAAA,IACrE;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,iBAAiB,KAA2B;AAC1C,aAAO,KAAK,eAAe,GAAG;AAAA,IAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,UAAU,KAAa,MAAc,QAAQ,KAAK;AAChD,UAAM,kBAAkB,CAAC,UAAuB,UAAkB;AAChE,QAAI,QAAQ,MAIZ,OAAO,aAAa,KAAK,eAAe,GACxC,KAAK,kBAAkB,OAAO,WAAW,MAAM;AAC7C,UAAI,QAAQ,MAAM,IAChB,SAAS,UAAU,IAAI,KAAK,SAAS,wBAAwB,EAAE,IAE/D,SAAS,UAAU,OAAO,KAAK,SAAS,wBAAwB,EAAE,GAEpE,gBAAgB,UAAU,QAAQ,CAAC;AAAA,QACrC,GAAG,KAAK;AAAA,MACV;AAEA,UAAI,KAAK,UAAU,GAAG,GAAG;AACvB,YAAM,WAAW,KAAK,YAAY,KAAK,IAAI;AAC3C,QAAI,YACF,gBAAgB,UAAU,CAAC;AAAA,MAE/B;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,aAAa,KAAa,UAAmB;AAC3C,UAAM,WAAW,KAAK,UAAU,GAAG;AACnC,8BAAa,KAAK,SAAS,uBAEvB,MAAM,QAAQ,qCAAU,OAAO,KAAK,KAAK,SAAS,yBACpD,SAAS,QAAQ,QAAQ,UAAQ,KAAK,UAAU,IAAI,GAAG,MAAM,gBAAgB,KAAK,SAAS,oBAAoB,CAAC,CAAC,GACjH,OAAO,aAAa,KAAK,kBAAkB,GAC3C,KAAK,qBAAqB,OAAO,WAAW,MAAM;AAz1OxD;AA01OQ,uBAAS,YAAT,WAAkB,QAAQ,UAAQ,KAAK,UAAU,OAAO,GAAG,MAAM,gBAAgB,KAAK,SAAS,oBAAoB,CAAC;AAAA,MACtH,GAAG,QAAQ;AAAA,IAEf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAqBU,qBAAqB,kBAAiC,eAAiC,UAAmB;AAClH,UAAI,CAAC;AAAoB;AACzB,MAAK,kBAAiB,gBAAgB,IACjC,aAAY,WAAW;AAE5B,UAAM,MAAO,OAAO,iBAAkB,WAAW,gBAAgB,KAAK,eAAe,aAAa,GAE5F,eAAe,KAAK,iBAAiB,YAAY,KAAK,mBAAmB,KAAK,SAAS,eAAe,IAAI,IAC1G,cAAc,KAAK,iBAAiB,KAAK,MAAM,KAAK,SAAS;AAEnE,aAAO,kBAAkB,eAAe,IAAI,MAAM,cAAc,IAAI,EAAE;AAAA,IACxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASU,mBAAmB;AAC3B,UAAI,YAAY;AAChB,WAAK,UAAU,QAAQ,OAAK,aAAa,EAAE,SAAS;AACpD,UAAM,WAAW,MAAM,iBAAiB,OAAO,EAAE,WAAW,OAAO,EAAE,UAAU,YAAY,KAAK,YAAY,MAAM,YAAY,UAAU,QAAQ,OAAO,SAAS,QAAQ,QAAQ,EAAE,GAAG,SAAS,IAAI,GAC5L,WAAW,MAAM,iBAAiB,OAAO,EAAE,OAAO,EAAE,OAAO,SAAS,QAAQ,SAAS,UAAU,OAAO,EAAE,GAAG,QAAQ,GACnH,MAAM;AAAA,QACV,OAAO,SAAS,cAAc,SAAS;AAAA,QACvC,QAAQ,SAAS,eAAe,SAAS;AAAA,MAC3C;AACA,sBAAS,OAAO,GAChB,SAAS,OAAO,GACT;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,2BAA2B;AACnC,UAAI,kBAAkB,KAGhB,WAAW,UAAU,UAAU,YAAY,EAAE,MAAM,SAAS,IAAI,KAAK,SAAS,0BAA0B,KAAK,SAAS,uBACtH,MAAM,MAAM,iBAAiB,OAAO,EAAE,OAAO,EAAE,SAAS,SAAS,EAAE,GAAG,SAAS,IAAI;AAEzF,iBAAa;AACX,YAAM,OAAO,kBAAkB;AAC/B,cAAM,OAAO,KAAK,IAAI;AACtB,YAAM,SAAS,MAAM,OAAO,GAAG;AAE/B,YAAI,OAAO,YAAa,WAAW;AACjC;AAEA,0BAAkB;AAAA,MAEtB;AAEA,iBAAI,OAAO,GACJ;AAAA,IACT;AAAA;AAAA,IAGA,SAAS;AACP,aAAO,KAAK;AAAA,IACd;AAAA;AAAA,IAGA,2BAA2B;AACzB,aAAO,KAAK;AAAA,IACd;AAAA;AAAA,IAGA,yBAAyB;AACvB,aAAO,KAAK;AAAA,IACd;AAAA;AAAA;AAAA;AAAA,IAKA,kCAAkC;AAn8OpC;AAo8OI,aAAO;AAAA,QACL,OAAO,KAAK,uBAAsB,gBAAK,wBAAL,mBAA0B,UAA1B,YAAwC;AAAA,QAC1E,QAAQ,KAAK,uBAAsB,gBAAK,wBAAL,mBAA0B,WAA1B,YAAyC;AAAA,MAC9E;AAAA,IACF;AAAA;AAAA,IAGA,4BAAoC;AAClC,aAAO,KAAK;AAAA,IACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,aAAa,IAAyB;AAC9C,UAAM,IAAI,CAAC,kBAAkB,qBAAqB,cAAc,eAAe,GACzE,SAAS,iBAAiB,EAAE,GAC9B,QAAQ;AACZ,eAAE,QAAQ,CAAC,QAAS,SAAS,MAAM,QAAQ,OAAO,GAAU,CAAC,CAAE,GACxD;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASU,8BAA8B;AACtC,UAAM,IAAI,CAAC,mBAAmB,oBAAoB,eAAe,cAAc,GACzE,IAAI,CAAC,kBAAkB,qBAAqB,cAAc,eAAe,GACzE,SAAS,KAAK,SAAS,CAAC;AAE9B,WAAK,wBAAwB,KAAK,yBAAyB,GAC3D,KAAK,gBAAgB,KAAK,iBAAiB;AAE3C,UAAI,KAAK,MAAM,iBAAiB,OAAO,EAAE,WAAW,4DAA4D,OAAO,EAAE,YAAY,SAAS,GAAG,aAAa,IAAI,GAAG,MAAM,GACvK,QAAQ,iBAAiB,EAAE;AAC/B,MAAI,MAAM,cAAc,iBACtB,EAAE,QAAQ,CAAC,QAAQ,KAAK,yBAAyB,MAAM,QAAQ,MAAM,GAAU,CAAC,CAAC,GACjF,EAAE,QAAQ,CAAC,QAAQ,KAAK,0BAA0B,MAAM,QAAQ,MAAM,GAAU,CAAC,CAAC,IAEpF,GAAG,OAAO;AAEV,UAAM,IAAI,MAAM,iBAAiB,OAAO,EAAE,WAAW,YAAY,GAAG,KAAK,QAAQ,CAAC,CAAC;AACnF,WAAK,MAAM,iBAAiB,OAAO,EAAE,WAAW,cAAc,IAAI,IAAI,OAAO,EAAE,YAAY,SAAS,GAAG,aAAa,IAAI,GAAG,CAAC,GAC5H,QAAQ,iBAAiB,EAAE,GACvB,MAAM,cAAc,iBACtB,EAAE,QAAQ,CAAC,QAAQ,KAAK,iBAAiB,MAAM,QAAQ,MAAM,GAAU,CAAC,CAAC,GACzE,EAAE,QAAQ,CAAC,QAAQ,KAAK,kBAAkB,MAAM,QAAQ,MAAM,GAAU,CAAC,CAAC,IAE5E,EAAE,OAAO,GAET,KAAK,yBAAyB,KAAK,IAAI,KAAK,uBAAuB,KAAK,aAAa;AAAA,IACvF;AAAA;AAAA,IAGU,iBAAiB;AACzB,aAAO,aAAa,KAAK,kBAAkB,GAC3C,OAAO,aAAa,KAAK,oBAAoB,GAC7C,OAAO,aAAa,KAAK,eAAe,GACxC,OAAO,aAAa,KAAK,kBAAkB,GAC3C,OAAO,aAAa,KAAK,cAAc;AAAA,IACzC;AAAA;AAAA,IAGU,eAAe;AACvB,UAAI,IAAI;AACR,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ;AAAO,aAAK,OAAO,KAAK,QAAQ,CAAC,EAAE,SAAS,MAAM,KAAK,QAAQ,CAAC,EAAE;AAC3G,cAAQ,IAAI,CAAC;AAAA,IACf;AAAA;AAAA,IAGA,kBAAkB,MAAa,MAAa;AAC1C,aAAO,MAAM,QAAQ,IAAI,KAAK,MAAM,QAAQ,IAAI,KAAK,KAAK,KAAK,EAAE,SAAS,MAAM,KAAK,KAAK,EAAE,SAAS;AAAA,IACvG;AAAA;AAAA;AAAA;AAAA,IAKU,iBAAiB,MAAc,OAAe,OAAY;AAClE,aAAK,MAAM,UAAU,KAAK,KAGhB,QAAQ,IAAI,QAAQ,MAAM,OAAO,EAAE,QAAQ,MAAM,MAAM,EAAE,QAAQ,MAAM,MAAM,IAF9E;AAAA,IAIX;AAAA;AAAA,IAGU,WAAW,KAAa,MAAc;AAC9C,aAAO,EAAE,MAAM,KAAK,OAAO,KAAK,cAAc,KAAK,OAAO,KAAK,QAAQ,KAAK,QAAQ;AAAA,IACtF;AAAA;AAAA,IAGU,gBAAgB,UAAuB;AAE/C,UAAM,MAAM,OAAO,KAAK,SAAS,SAAS;AAC1C,UAAI,CAAC;AACH,cAAM,IAAI,MAAM,gDAAgD,SAAS,SAAS,EAAE;AAEtF,aAAO,SAAS,IAAI,CAAC,EAAE,OAAO,GAAG,IAAI,CAAC,EAAE,SAAS,CAAC,GAAG,EAAE;AAAA,IACzD;AAAA;AAAA,IAGU,eAAe,SAAqC;AAhjPhE;AAijPI,eAAW,OAAO,KAAK;AACrB,YAAI,KAAK;AACP,mBAAW,KAAK,KAAK,UAAU,GAAG,EAAE;AAClC,kBAAI,UAAK,UAAU,GAAG,EAAE,YAApB,mBAA8B,CAAC,QAAO;AACxC,qBAAQ,MAAM,SAAS,KAAK,EAAE,IAAI;AAAA;AAK1C,aAAO;AAAA,IACT;AAAA;AAAA,IAGU,qBAAqB;AA9jPjC;AA+jPI,WAAK,cAAiB,cAAjB,WAA4B;AAC/B,YAAI;AAEF,UAAC,SAAiB,UAAU,MAAM;AAAA,QAEpC,SAAS,GAAG;AAAA,QAAE;AAAA,eACL,OAAO,cAAc;AAC9B,YAAM,MAAM,OAAO,aAAa;AAChC,QAAI,mBAAK,mBACP,IAAI,gBAAgB;AAAA,MAExB;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,iBAAiB,QAAuB;AAChD,aAAO,QAAQ,CAAC,OAAO;AACrB,WAAG,aAAa,gBAAgB,IAAI,GACnC,GAAG,MAAc,gBAAgB,QAClC,KAAK,qBAAqB,KAAK,IAAI,eAAe,MAAM,EAAK;AAAA,MAC/D,CAAC;AAAA,IACH;AAAA;AAAA,IAGA,mBAA2C;AACzC,aAAO,KAAK;AAAA,IACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,iBAAiB,GAAW,GAAW;AACrC,UAAI,MAAM,KAAK,mBAAmB,CAAC,GAC/B,OAAO,GAEP,IAAI;AACR,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,UAAU,KAAK,GAAG;AACjD,QAAK,KAAK,QAAQ,CAAC,MAGnB,KAAK,KAAK,QAAQ,CAAC,EAAE,OACrB;AAEF,qBAAQ,GAGJ,MAAM,OACR,MAAM,KAGD,EAAE,KAAK,KAAK;AAAA,IACrB;AAAA;AAAA,IAGA,gBAA+D,MAAc;AA7nP/E;AA8nPI,eAAS,IAAI,KAAK,QAAQ,SAAS,GAAG,KAAK,GAAG;AAC5C,cAAI,UAAK,QAAQ,CAAC,MAAd,mBAAiB,gBAAe;AAClC,iBAAO,KAAK,QAAQ,CAAC;AAAA,IAI3B;AAAA;AAAA,IAGA,mBAAmB;AACjB,aAAO,KAAK;AAAA,IACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,cAAc,KAAa,SAAiB;AAC1C,UAAI,aAAa,KAAK,SAAS,aAAa;AAC5C,UAAI,UAAU,GAAG;AACf,YAAM,mBAAmB,MAAM,UAAU;AACzC,qBAAa,KAAK,aAAa,gBAAgB,IAAI,KAAK,UAAU,GAAG;AAAA,MACvE,OAAO;AACL,YAAM,YAAY,KAAK,aAAa;AACpC,QAAI,cAAc,aAAa,KAAK,mBAClC,aAAa;AAAA,MAEjB;AACA,2BAAc,KAAK,gBACZ,KAAK,KAAK,UAAU;AAAA,IAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUU,cAAc,GAAgB,GAA6B;AACnE,aAAO,IAAI,IAAI,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC,SAAS,CAAC,EAAE,IAAI,IAAI,CAAC,CAAC;AAAA,IAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,eAAe,KAAa,MAAc;AAlrP5C;AAmrPI,UAAI,CAAC,KAAK,WAAW,KAAK,IAAI;AAC5B,eAAO;AAGT,UAAM,kBAAkB,KAAK,mBAAmB,GAAG,GAE7C,KAAK,KAAK,UAAU,GAAG,IAAI,iBAC3B,KAAK,KAAK,KAAK,SAAS,YAAa,GACvC,KAAK;AACT,eAAS,IAAI,GAAG,IAAI,MAAM;AACxB,QAAI,CAAC,KAAK,QAAQ,CAAC,KAAK,KAAK,QAAQ,CAAC,EAAE,WAExC,MAAO,KAAK,QAAQ,CAAC,EAAE,SAAS,GAE5B,KAAK,SAAS,iBAAiB,MACjC,KAAK;AAGT,UAAM,KAAK,QAAM,UAAK,QAAQ,IAAI,MAAjB,mBAAoB,UAAS;AAE9C,aAAO;AAAA,QACL,KAAK;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,OAAO;AAAA,MACT;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAiBU,OAAO,MAAmB;AAClC,UAAM,MAAM;AAAA,QACV,KAAK,KAAK;AAAA,QACV,MAAM,KAAK;AAAA,QACX,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,OAAO,KAAK;AAAA,QACZ,QAAQ,KAAK;AAAA,QACb,SAAS;AAAA,MACX;AACA,UAAI,SAAS,IAAI,MAAM,IAAI,QAC3B,IAAI,QAAQ,IAAI,OAAO,IAAI;AAG3B,UAAI,eAAe,KAAK;AACxB,cAAQ,OAAO,KAAK,gBAA+B,SAAS,QACtD,GAAC,QAAQ,CAAC,KAAK,eAD6C;AAKhE,YAAM,SAAS,iBAAiB,IAAI;AACpC,QAAI,IAAI,WAAW,KAAK,iBAAiB,KAAK,gBAAgB,OAAO,cAAiB,cACpF,IAAI,UAAU,IAAI,SAAS,KAAK,aAAa,IAAI,MAAM,KAAK,YAAY,KAAK,eAG3E,IAAI,WAAW,KAAK,gBAAgB,KAAK,eAAe,OAAO,cAAiB,cAClF,IAAI,UAAU,IAAI,QAAQ,KAAK,cAAc,IAAI,OAAO,KAAK,aAAa,KAAK,cAGjF,IAAI,QAAQ,KAAK,YACjB,IAAI,OAAO,KAAK,WAEZ,SAAS,iBACX,IAAI,QAAQ,KAAK,YACjB,IAAI,OAAO,KAAK,WAChB,eAAe,KAAK,eAGtB,IAAI,SAAS,IAAI,MAAM,IAAI,QAC3B,IAAI,QAAQ,IAAI,OAAO,IAAI;AAAA,MAC7B;AAEA,aAAO;AAAA,IACT;AAAA;AAAA,IAGA,wBAAwB;AACtB,aAAO,KAAK,OAAO,KAAK,cAA6B;AAAA,IACvD;AAAA;AAAA,IAGA,kBAAkB;AAChB,aAAO,KAAK,OAAO,KAAK,UAAU;AAAA,IACpC;AAAA;AAAA,IAGA,gBAAgB;AACd,aAAO,KAAK;AAAA,IACd;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,gBAAgB;AACd,aAAK,KAAK,iBAGH,EAAE,KAAK,KAAK,WAAW,MAAM,KAAK,WAAW,IAF3C;AAAA,IAGX;AAAA;AAAA,IAGA,oBAAoB;AAClB,aAAO,KAAK;AAAA,IACd;AAAA;AAAA;AAAA,IAIU,mBAAmB;AA5yP/B;AA6yPI,UAAI,gBAA8B;AAClC,UAAI,OAAO,cAAc;AACvB,YAAM,YAAY,OAAO,aAAa;AACtC,UAAK,4CAAW,eAAX,YAAyB,KAAK,MACjC,gBAAgB,UAAW,WAAW,CAAC;AAAA,MAE3C;AACA,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,iBAAiB,WAAkB;AAC3C,UAAI,OAAO,gBAAgB,WAAW;AACpC,YAAM,SAAS,OAAO,aAAa;AACnC,QAAI,WACF,OAAO,gBAAgB,GACvB,OAAO,SAAS,SAAS;AAAA,MAE7B;AAAA,IACF;AAAA;AAAA,IAGA,mBAAmB,WAAmB,iBAA2B;AAC/D,UAAI,CAAC,KAAK,SAAS,aAAa,OAAO,aAAc;AACnD,eAAO;AAGT,UAAM,YAAY,KAAK,SAAS,UAAU,SAAS;AAEnD,aAAI,CAAC,mBAAmB,KAAK,SAAS,oBAAoB,KAAK,mBAAmB,KAAK,sBAAsB,cAAc,cACzH,QAAQ,IAAI,2BAA2B,SAAS,QAAQ,SAAS,EAAE,GAC/D,KAAK,oBAAoB,KAAK,sBAChC,QAAQ,IAAI,6CAA6C,KAAK,kBAAkB,EAAE,GAEpF,KAAK,oBAEA;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAkBU,WAAW,KAAa,MAAc;AAC9C,UAAI,UAAU,GACR,WAAW,KAAK,wBAAwB,GAAG;AACjD,aAAI,6BAAU,WACZ,OAAO,KAAK,SAAS,OAAO,EAAE,QAAQ,SAAO;AAC3C,YAAM,SAAS,OAAO,GAAG;AACzB,YAAI,WAAW,MAAM;AACnB,cAAM,aAAa,SAAS,QAAS,MAAM;AAC3C,oBAAU,QAAO,yCAAY,YAAW,CAAC;AAAA,QAC3C;AAAA,MACF,CAAC,GAEI;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUU,iBAAiB,KAAa,MAAc,KAAoB;AACxE,UAAI,IAAI,KACF,WAAW,KAAK,sBAAsB,IAAI,KAAK,oBAAI,IAAY,GACjE,QAAQ;AAEZ,mBAAM,KAAK,QAAQ,EAAE,QAAQ,CAAC,WAAW;AACvC,YAAM,CAAC,OAAO,GAAG,IAAI,OAAO,MAAM,GAAG,EAAE,IAAI,MAAM;AACjD,QAAI,CAAC,SAAS,OAAO,SAAS,OAAO,QACnC,IAAI,QAAQ,OAAO,QAAQ,KACvB,KAAK,gBAAgB,GAAG,IAAI,MAC9B,QAAQ;AAAA,MAGd,CAAC,GACG,IAAI,MACN,IAAI,IAGC;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,uBAAuB,KAA6C;AAC5E,UAAI,OAAO,GACP,eAAe,KACf,KAAK;AAET,aAAO,OAAO,KAAK,QAAQ,UAAQ;AACjC,YAAM,MAAM,KAAK,uBAAuB,KAAK,IAAI;AAEjD,YADA,eAAgB,QAAQ,QAAQ,IAAI,UAAU,MAAO,IAAI,QAAQ,KAC7D,KAAK,gBAAgB,cAAc,IAAI,GAAG;AAC5C,eAAK;AACL;AAAA,QACF;AACA,gBAAQ,KAAK,WAAW,cAAc,IAAI;AAAA,MAC5C;AACA,aAAO,EAAE,MAAM,IAAI,KAAK,aAAa;AAAA,IACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,sBAAsB,KAA6C;AAC3E,UAAI,OAAO,GACP,eAAe,KACf,KAAK;AAET,aAAO,OAAO,KAAK,QAAQ,UAAQ;AACjC,YAAM,MAAM,KAAK,uBAAuB,KAAK,IAAI;AACjD,uBAAgB,QAAQ,QAAQ,IAAI,UAAU,MAAO,IAAI,QAAQ,KAC7D,KAAK,gBAAgB,cAAc,IAAI,MACzC,KAAK,OAEP,QAAQ,KAAK,WAAW,cAAc,IAAI;AAAA,MAC5C;AAEA,aAAO,EAAE,MAAM,IAAI,KAAK,aAAa;AAAA,IACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQU,aAAa,MAAgB;AACrC,UAAM,SAAwB,CAAC,GACzB,WAAW,KAAK,QAAQ,SAAS;AACvC,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ;AAC/B,eAAO,KAAK,IAAI,WAAW,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,QAAQ,CAAC;AAE3D,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWA,qBAAqB,KAAa,MAAc;AAC9C,UAAM,MAAM,KAAK,uBAAuB,KAAK,IAAI,GAC3C,eAAgB,QAAQ,QAAQ,IAAI,UAAU,MAAO,IAAI,QAAQ,KACnE,KAAK,GACL,WAAW;AAEf,aAAO,KAAK,KAAK,QAAQ,UAAQ;AAE/B,YADA,MAAM,KAAK,WAAW,cAAc,EAAE,GAClC,KAAK;AACP,sBAAK,UACE,EAAE,MAAM,IAAI,KAAK,aAAa;AAEvC,mBAAW;AAAA,MACb;AAEA,aAAO,EAAE,MAAM,IAAI,KAAK,aAAa;AAAA,IACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWU,UAAU,MAAc,MAAc,MAAc,OAAgB;AAC5E,UAAI,QAAQ,KAAK,QAAQ;AACvB,eAAO;AAET,UAAI,KAAK,OAAO,GACZ,KAAK;AAET,SAAG;AACD,YAAM,KAAK,KAAK,qBAAqB,MAAM,EAAE;AAG7C,YAFA,KAAK,GAAG,KACR,KAAK,GAAG,MACJ,KAAK,gBAAgB,IAAI,EAAE,KAAK,KAAK;AACvC;AAEF,cAAM,KAAK,WAAW,IAAI,GAAG,IAAI;AAAA,MACnC,SAAS,KAAK,KAAK,QAAQ;AAE3B,aAAI,KAAK,KAAK,QAAQ,SACb;AAAA,QACL,KAAK;AAAA,QACL,MAAM;AAAA,QACN,MAAM;AAAA,QACN;AAAA,MACF,IAEK;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWU,SAAS,KAAa,MAAc,MAAc,OAAgB;AAC1E,UAAI,QAAQ;AACV,eAAO;AAGT,UAAM,KAAK,KAAK,uBAAuB,GAAG;AAC1C,UAAI,GAAG,SAAS,QAAQ,GAAG,QAAQ;AACjC,eAAO;AAGT,UAAI,KACA,OAAO;AAAA,QACT;AAAA,QACA,MAAM,GAAG;AAAA,QACT,MAAM,GAAG;AAAA,QACT;AAAA,MACF;AAEA,iBAAa;AAEX,YADA,MAAM,KAAK,UAAU,KAAK,KAAK,KAAK,MAAM,KAAK,MAAM,KAAK,IAAI,GAC1D,CAAC;AACH,iBAAO;AAET,YAAI,IAAI,QAAQ,MAAM;AAEpB,cAAM,UAAU,KAAK,iBAAiB,MAAM,KAAK,MAAM,IAAI;AAC3D,iBAAI,YAAY,KAAK,QACnB,KAAK,MAAM,UAEN;AAAA,QACT;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWU,SAAS,KAAa,MAAc,OAAe,MAAc;AACzE,UAAI,UACE,KAAK,KAAK,6BAA6B;AAC7C;AAGE,aAFA,OAAO,KAAK,WAAW,KAAK,IAAI,GAChC,WAAW,OAAO,GACX,QAAQ;AACb,qBAAW,MACX,QAAQ,KAAK,WAAW,KAAK,IAAI;AAAA,aAG9B,OAAO,MAAM,CAAC,KAAK,gBAAgB,KAAK,QAAQ;AAEvD,aAAI,OAAO,KACF;AAAA,QACL;AAAA,QACA,MAAM;AAAA,QACN;AAAA,QACA,MAAM;AAAA,MACR,IAEK;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWU,OAAO,KAAa,MAAc,OAAe,MAAc;AACvE,UAAI;AACJ,UAAI,OAAO;AACT,eAAO;AAET;AAGE,aAFA,MAAM,KAAK,iBAAiB,MAAM,GAAG,MAAM,IAAI,GAC/C,WAAW,OAAO,GACX,QAAQ;AACb,qBAAW,MACX,QAAQ,KAAK,WAAW,KAAK,IAAI;AAAA,aAG9B,OAAO,KAAK,CAAC,KAAK,gBAAgB,KAAK,QAAQ;AAEtD,aAAI,QAAQ,KAAK,QAAQ,SAChB;AAAA,QACL;AAAA,QACA,MAAM;AAAA,QACN;AAAA,QACA,MAAM;AAAA,MACR,IAEK;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWU,SAAS,KAAa,MAAc,MAAc,MAAc;AA3oQ5E;AA4oQI,UAAI,CAAC,MAAM,UAAU,GAAG,KAAK,CAAC,MAAM,UAAU,IAAI,MAChD,MAAM,OAAO,OAAO,OAAO,GACvB,KAAK,gBAAgB,KAAK,IAAI;AAChC,eAAO;AAAA,UACL;AAAA,UACA;AAAA,UACA,MAAM;AAAA,UACN;AAAA,QACF;AAIJ,UAAI,MAAM,KAAK,UAAU,KAAK,MAAM,MAAM,IAAI;AAC9C,UAAI,CAAC,KAAK;AACR,YAAI;AACJ,eAAO,CAAC,OAAO,EAAE,OAAO,KAAK,cAAc,KAAK,KAAK,SAAS,eAAe,IAAI;AAC/E,eAAK,KAAK,uBAAuB,IAAI,GACjC,GAAG,SAAS,SACd,OAAM,gBAAK,uBAAuB,MAAM,GAAG,IAAI,MAAzC,mBAA4C,UAA5C,YAAqD,MAC3D,MAAM;AAAA,YACJ;AAAA,YACA,MAAM,GAAG;AAAA,YACT,MAAM,GAAG;AAAA,YACT;AAAA,UACF;AAAA,MAGN;AACA,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWU,SAAS,KAAa,MAAc,MAAc,MAAc;AAprQ5E;AAqrQI,UAAI,CAAC,MAAM,UAAU,GAAG,KAAK,CAAC,MAAM,UAAU,IAAI,MAChD,MAAM,OAAO,KAAK,6BAA6B,IAAI,GACnD,OAAO,OAAO,KAAK,QAAQ,SAAS,GAChC,KAAK,gBAAgB,KAAK,IAAI;AAChC,eAAO;AAAA,UACL;AAAA,UACA;AAAA,UACA,MAAM;AAAA,UACN;AAAA,QACF;AAIJ,UAAI,MAAM,KAAK,SAAS,KAAK,MAAM,MAAM,IAAI;AAC7C,UAAI,CAAC,KAAK;AACR,YAAI;AACJ,eAAO,CAAC,OAAO,EAAE,QAAQ;AACvB,eAAK,KAAK,sBAAsB,IAAI,GAChC,GAAG,OAAO,OACZ,OAAM,gBAAK,uBAAuB,MAAM,GAAG,IAAI,MAAzC,mBAA4C,UAA5C,YAAqD,MAC3D,MAAM;AAAA,YACJ;AAAA,YACA,MAAM,GAAG;AAAA,YACT,MAAM,GAAG;AAAA,YACT;AAAA,UACF;AAAA,MAGN;AACA,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWU,aAAa,KAAa,OAAe,OAAe,OAAe;AAC/E,UAAM,KAAK,KAAK,uBAAuB,GAAG;AAC1C,aAAI,GAAG,SAAS,OAAe,OAExB;AAAA,QACL,KAAK,GAAG;AAAA,QACR,MAAM,GAAG;AAAA,QACT,MAAM,GAAG;AAAA,QACT,MAAM;AAAA,MACR;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWU,WAAW,KAAa,OAAe,OAAe,OAAe;AAC7E,UAAM,KAAK,KAAK,sBAAsB,GAAG;AACzC,aAAI,GAAG,SAAS,KAAa,OAEtB;AAAA,QACL,KAAK,GAAG;AAAA,QACR,MAAM,GAAG;AAAA,QACT,MAAM,GAAG;AAAA,QACT,MAAM;AAAA,MACR;AAAA,IACF;AAAA;AAAA,IAGA,gBAAgB;AACd,aAAO,KAAK,SAAS,OAAO;AAAA,IAC9B;AAAA;AAAA,IAGA,eAAe;AACb,aAAO,KAAK,SAAS,MAAM;AAAA,IAC7B;AAAA;AAAA,IAGA,eAAe;AACb,aAAO,KAAK,SAAS,MAAM;AAAA,IAC7B;AAAA;AAAA,IAGA,aAAa;AACX,aAAO,KAAK,SAAS,IAAI;AAAA,IAC3B;AAAA;AAAA,IAGA,eAAe;AACb,aAAO,KAAK,SAAS,MAAM;AAAA,IAC7B;AAAA;AAAA,IAGA,eAAe;AACb,aAAO,KAAK,SAAS,MAAM;AAAA,IAC7B;AAAA;AAAA,IAGA,mBAAmB;AACjB,aAAO,KAAK,SAAS,MAAM;AAAA,IAC7B;AAAA;AAAA,IAGA,iBAAiB;AACf,aAAO,KAAK,SAAS,KAAK;AAAA,IAC5B;AAAA;AAAA,IAGA,mBAAwC;AACtC,kBAAK,cAAc,CAAC,GACb,KAAK,SAAS,MAAM;AAAA,IAC7B;AAAA;AAAA,IAGA,oBAAyC;AACvC,kBAAK,eAAe,GACb,KAAK,SAAS,KAAK;AAAA,IAC5B;AAAA;AAAA;AAAA;AAAA;AAAA,IAMU,SAAS,KAA0E;AAvzQ/F;AA4zQI,UAJI,CAAC,KAAK,SAAS,wBAIf,CAAC,KAAK,kBAAkB,QAAQ,UAAU,QAAQ;AACpD,eAAO;AAGT,UAAI,GAAC,UAAK,cAAc,MAAnB,WAAsB;AACzB,eAAO;AAET,WAAK,SAAS,GACd,KAAK,gBAAgB;AAErB,UAAM,oBAAoB;AAAA,QACxB,IAAM;AAAA,QACN,MAAQ;AAAA,QACR,MAAQ;AAAA,QACR,OAAS;AAAA,QACT,MAAQ;AAAA,QACR,MAAQ;AAAA,QACR,MAAQ;AAAA,QACR,KAAO;AAAA,MACT;AACA,WAAK,mBAAmB,kBAAkB,GAAG;AAa7C,UAAM,MAXgB;AAAA,QACpB,IAAM,KAAK;AAAA,QACX,MAAQ,KAAK;AAAA,QACb,MAAQ,KAAK;AAAA,QACb,OAAS,KAAK;AAAA,QACd,MAAQ,KAAK;AAAA,QACb,MAAQ,KAAK;AAAA,QACb,MAAQ,KAAK;AAAA,QACb,KAAO,KAAK;AAAA,MACd,EAC6B,GAAG,EACb,KAAK,MAAM,KAAK,WAAW,KAAK,YAAY,KAAK,YAAY,KAAK,UAAU;AAC/F,aAAO,KAAK,cAAc,GAAG;AAAA,IAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASU,cAAc,KAA0B;AAChD,UAAI,KAAK;AACP,YAAI,KAAK,iBAAiB,KAAK,SAAS,gBAAgB,IAAI,QAAQ,KAAK,cAAc;AACrF;AAGF,YAAM,cAAe,IAAI,QAAQ,KAAK,cAAc;AAEpD,gBAAK,CAAC,KAAK,SAAS,gBAAgB,IAAI,OAAO,KAAK,mBAC9C,KAAK,SAAS,gBAAgB,IAAI,MAAM,KAAK,oBAEjD,KAAK,mBAAmB,IAAI,KAAK,IAAI,MAAM,CAAC,eAAe,KAAK,SAAS,0BAA0B,GAErG,KAAK,sBAAsB,KAAK,YAAY,IAAI,KAAK,IAAI,IAAI,CAAC,GAC9D,KAAK,aAAa,IAAI,MACtB,KAAK,aAAa,IAAI,MACf;AAAA,MACT;AACE,oBAAK,sBAAsB,KAAK,YAAY,KAAK,WAAW,KAAK,UAAU,CAAC,GACrE;AAAA,IAEX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,YAAY,KAAa,MAAqC;AAC5D,UAAI,KAAK,UAAU,GAAG,GAAG;AACvB,aAAK,2BAA2B,GAAG;AACnC,YAAI;AACF,iBAAI,KAAK,UAAU,GAAG,EAAE,qBAAqB,SAAS,OAC7C,KAAK,UAAU,GAAG,EAAE,qBAAqB,IAAI,IAG7C;AAAA,QAEX,SAAS,GAAG;AACV,iBAAO,KAAK,UAAU,GAAG,EAAE,qBAAqB,IAAI;AAAA,QACtD;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,cAAc,KAAa,MAAc,cAAwB,gBAA0B,gCAA0C;AACnI,MAAK,KAAK,gBACN,MAAM,KAAK,cAAc,KAAK,MAAM,KAAK,QAAQ,KAAK,QAAQ,UAAU,OAAO,KAI9E,KAAK,SAAS,yBAInB,KAAK,mBAAmB,KAAK,MAAM,EAAK,GACxC,KAAK,sBAAsB,KAAK,YAAY,KAAK,IAAI,GAAG,cAAc,gBAAgB,8BAA8B;AAAA,IACtH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,aAAa,KAAa,MAAe,wBAAkC;AACzE,MAAK,KAAK,gBACN,MAAM,KAAK,cAAc,KAAK,MAAM,MAAM,sBAAQ,MAAM,KAAK,QAAQ,WAAW,sBAAQ,KAAK,MAIjG,KAAK,YAAY,KACZ,0BACH,KAAK,mBAAmB,KAAK,QAAQ,GAAG,EAAK;AAAA,IAEjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,gBAAgB,KAAa,MAAc;AAn8Q7C;AAg9QI,UAZI,CAAC,KAAK,SAAS,wBAAwB,OAAO,KAAK,6BAA6B,KAClF,MAAM,KAAK,QAAQ,KAAK,QAAQ,UAAU,OAAO,KAI/C,CAAC,KAAK,QAAQ,IAAI,KAAK,KAAK,QAAQ,IAAI,EAAE,YAM9B,gBAAK,uBAAuB,KAAK,IAAI,MAArC,mBAAwC,UAAxC,YAAiD,SACjD;AACd,eAAO;AAGT,UAAM,cAAc,KAAK,wBAAwB,GAAG;AACpD,WAAI,2CAAa,eAAc;AAC7B,eAAO,CAAC,CAAC,YAAY;AAGvB,UAAM,iBAAiB,2CAAa;AACpC,eAAI,sDAAiB,KAAK,QAAQ,IAAI,EAAE,QAApC,mBAAyC,eAAc,SAClD,CAAC,CAAC,eAAe,KAAK,QAAQ,IAAI,EAAE,EAAE,EAAE,cAE7C,sDAAiB,UAAjB,mBAAwB,eAAc,SACjC,CAAC,CAAC,eAAe,IAAI,EAAE,YAGzB,CAAC,CAAE,KAAK,QAAQ,IAAI,EAAE;AAAA,IAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,kBAAkB,KAAa,MAAc;AAK3C,UAJI,OAAO,KAAK,cAAc,KAAK,MAAM,KAAK,QAAQ,KAAK,QAAQ,UAAU,OAAO,KAIhF,CAAC,KAAK,QAAQ,IAAI,KAAK,KAAK,QAAQ,IAAI,EAAE;AAC5C,eAAO;AAGT,UAAM,cAAc,KAAK,wBAAwB,GAAG;AACpD,WAAI,2CAAa,gBAAe;AAC9B,eAAO,CAAC,CAAC,YAAY;AAGvB,UAAM,kBAAiB,2CAAa,aAAY,YAAY,QAAQ,KAAK,QAAQ,IAAI,EAAE,EAAE,KAAK,YAAY,QAAQ,IAAI;AACtH,cAAI,iDAAgB,gBAAe,SAC1B,CAAC,CAAC,eAAe,aAGnB,CAAC,CAAC,KAAK,QAAQ,IAAI,EAAE;AAAA,IAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,SAAS,KAAa,MAAc,WAAqB,GAAyB;AAtgRpF;AA4gRI,UALI,CAAC,KAAK,eACN,CAAC,KAAK,gBAAgB,KAAK,IAAI,KAI/B,GAAC,UAAK,cAAc,MAAnB,WAAsB;AACzB;AAGF,WAAK,mBAAmB,KAAK,MAAM,EAAK;AAExC,UAAM,UAAU,KAAK,YAAY,KAAK,IAAI,GAGpC,SAAS,KAAK,QAAQ,IAAI,GAC1B,iCAAiC,CAAC,EAAE,KAAK,SAAS,aAAY,yBAAQ,WAAU,KAAK,SAAS;AACpG,WAAK,sBAAsB,SAAU,aAAc,QAAQ,KAAK,cAAc,KAAM,KAAK,SAAS,UAAW,MAAM,gCAAgC,CAAC,GAG/I,KAAK,iBACR,KAAK,SAAS;AAAA,IAElB;AAAA;AAAA;AAAA;AAAA,EAIF;AAGA,EAAiB,OAAO,SACtB,MAAM,OAAO,OAAO;AAAA,IAClB,MAAM;AAAA,EACR,CAAC;",
  "names": ["_a", "_b", "row", "topHeightOffset"]
}
