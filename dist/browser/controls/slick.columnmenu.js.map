{
  "version": 3,
  "sources": ["../../../src/controls/slick.columnmenu.ts"],
  "sourcesContent": ["import { BindingEventService as BindingEventService_, Event as SlickEvent_, Utils as Utils_ } from '../slick.core';\nimport type { Column, ColumnPickerOption, DOMMouseOrTouchEvent, GridOption, OnColumnsChangedArgs } from '../models/index';\nimport type { SlickGrid } from '../slick.grid';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n/***\n * A control to add a Column Picker (right+click on any column header to reveal the column picker)\n * NOTE: this a simplified and updated version of slick.columnpicker.js\n *\n * USAGE:\n *\n * Add the slick.columnpicker.(js|css) files and register it with the grid.\n *\n * Available options, by defining a columnPicker object:\n *\n *  let options = {\n *    enableCellNavigation: true,\n *    columnPicker: {\n *      columnTitle: \"Columns\",                 // default to empty string\n *\n *      // the last 2 checkboxes titles\n *      hideForceFitButton: false,              // show/hide checkbox near the end \"Force Fit Columns\" (default:false)\n *      hideSyncResizeButton: false,            // show/hide checkbox near the end \"Synchronous Resize\" (default:false)\n *      forceFitTitle: \"Force fit columns\",     // default to \"Force fit columns\"\n *      headerColumnValueExtractor: \"Extract the column label\" // default to column.name\n *      syncResizeTitle: \"Synchronous resize\",  // default to \"Synchronous resize\"\n *    }\n *  };\n */\n\nexport class SlickColumnMenu {\n  // --\n  // public API\n  onColumnsChanged = new SlickEvent<OnColumnsChangedArgs>();\n\n  // --\n  // protected props\n  protected _gridUid: string;\n  protected _columnTitleElm!: HTMLElement;\n  protected _listElm!: HTMLElement;\n  protected _menuElm!: HTMLElement;\n  protected _columnCheckboxes: HTMLInputElement[] = [];\n  protected _bindingEventService = new BindingEventService();\n  protected _options: GridOption;\n  protected _defaults: ColumnPickerOption = {\n    fadeSpeed: 250,\n\n    // the last 2 checkboxes titles\n    hideForceFitButton: false,\n    hideSyncResizeButton: false,\n    forceFitTitle: 'Force fit columns',\n    syncResizeTitle: 'Synchronous resize',\n    headerColumnValueExtractor: (columnDef: Column) => columnDef.name instanceof HTMLElement ? columnDef.name.innerHTML : columnDef.name || ''\n  };\n\n  constructor(protected columns: Column[], protected readonly grid: SlickGrid, options: GridOption) {\n    this._gridUid = grid.getUID();\n    this._options = Utils.extend({}, this._defaults, options);\n    this.init(this.grid);\n  }\n\n  init(grid: SlickGrid) {\n    grid.onHeaderContextMenu.subscribe(this.handleHeaderContextMenu.bind(this));\n    grid.onColumnsReordered.subscribe(this.updateColumnOrder.bind(this));\n\n    this._menuElm = document.createElement('div');\n    this._menuElm.className = `slick-columnpicker ${this._gridUid}`;\n    this._menuElm.style.display = 'none';\n    document.body.appendChild(this._menuElm);\n\n    const buttonElm = document.createElement('button');\n    buttonElm.type = 'button';\n    buttonElm.className = 'close';\n    buttonElm.dataset.dismiss = 'slick-columnpicker';\n    buttonElm.ariaLabel = 'Close';\n\n    const spanCloseElm = document.createElement('span');\n    spanCloseElm.className = 'close';\n    spanCloseElm.ariaHidden = 'true';\n    spanCloseElm.textContent = '\u00D7';\n    buttonElm.appendChild(spanCloseElm);\n    this._menuElm.appendChild(buttonElm);\n\n    // user could pass a title on top of the columns list\n    if (this._options.columnPickerTitle || (this._options.columnPicker?.columnTitle)) {\n      const columnTitle = this._options.columnPickerTitle || this._options.columnPicker?.columnTitle;\n      this._columnTitleElm = document.createElement('div');\n      this._columnTitleElm.className = 'slick-gridmenu-custom';\n      this._columnTitleElm.textContent = columnTitle || '';\n      this._menuElm.appendChild(this._columnTitleElm);\n    }\n\n    this._bindingEventService.bind(this._menuElm, 'click', this.updateColumn.bind(this) as EventListener);\n\n    this._listElm = document.createElement('span');\n    this._listElm.className = 'slick-columnpicker-list';\n\n    // Hide the menu on outside click.\n    this._bindingEventService.bind(document.body, 'mousedown', this.handleBodyMouseDown.bind(this) as EventListener);\n\n    // destroy the picker if user leaves the page\n    this._bindingEventService.bind(document.body, 'beforeunload', this.destroy.bind(this));\n  }\n\n  destroy() {\n    this.grid.onHeaderContextMenu.unsubscribe(this.handleHeaderContextMenu.bind(this));\n    this.grid.onColumnsReordered.unsubscribe(this.updateColumnOrder.bind(this));\n    this._bindingEventService.unbindAll();\n    this._listElm?.remove();\n    this._menuElm?.remove();\n  }\n\n  handleBodyMouseDown(e: DOMMouseOrTouchEvent<HTMLDivElement>) {\n    if ((this._menuElm !== e.target && !(this._menuElm && this._menuElm.contains(e.target))) || e.target.className === 'close') {\n      this._menuElm.setAttribute('aria-expanded', 'false');\n      this._menuElm.style.display = 'none';\n    }\n  }\n\n  handleHeaderContextMenu(e: DOMMouseOrTouchEvent<HTMLDivElement>) {\n    e.preventDefault();\n    Utils.emptyElement(this._listElm);\n    this.updateColumnOrder();\n    this._columnCheckboxes = [];\n\n    let columnId, columnLabel, excludeCssClass;\n    for (let i = 0; i < this.columns.length; i++) {\n      columnId = this.columns[i].id;\n      const colName: string = this.columns[i].name instanceof HTMLElement\n        ? (this.columns[i].name as HTMLElement).innerHTML\n        : (this.columns[i].name || '') as string;\n      excludeCssClass = this.columns[i].excludeFromColumnPicker ? \"hidden\" : \"\";\n\n      const liElm = document.createElement('li');\n      liElm.className = excludeCssClass;\n      liElm.ariaLabel = colName;\n\n      const checkboxElm = document.createElement('input');\n      checkboxElm.type = 'checkbox';\n      checkboxElm.id = `${this._gridUid}colpicker-${columnId}`;\n      checkboxElm.dataset.columnid = String(this.columns[i].id);\n      liElm.appendChild(checkboxElm);\n\n      this._columnCheckboxes.push(checkboxElm);\n\n      if (Utils.isDefined(this.grid.getColumnIndex(columnId)) && !this.columns[i].hidden) {\n        checkboxElm.checked = true;\n      }\n\n      columnLabel = (this._options?.columnPicker?.headerColumnValueExtractor)\n        ? this._options.columnPicker.headerColumnValueExtractor(this.columns[i], this._options)\n        : this._defaults.headerColumnValueExtractor!(this.columns[i], this._options);\n\n      const labelElm = document.createElement('label');\n      labelElm.htmlFor = `${this._gridUid}colpicker-${columnId}`;\n      this.grid.applyHtmlCode(labelElm, columnLabel);\n      liElm.appendChild(labelElm);\n      this._listElm.appendChild(liElm);\n    }\n\n    if (this._options.columnPicker && (!this._options.columnPicker.hideForceFitButton || !this._options.columnPicker.hideSyncResizeButton)) {\n      this._listElm.appendChild(document.createElement('hr'));\n    }\n\n    if (!this._options.columnPicker?.hideForceFitButton) {\n      const forceFitTitle = this._options.columnPicker?.forceFitTitle || this._options.forceFitTitle;\n\n      const liElm = document.createElement('li');\n      liElm.ariaLabel = forceFitTitle || '';\n      this._listElm.appendChild(liElm);\n\n      const forceFitCheckboxElm = document.createElement('input');\n      forceFitCheckboxElm.type = 'checkbox';\n      forceFitCheckboxElm.id = `${this._gridUid}colpicker-forcefit`;\n      forceFitCheckboxElm.dataset.option = 'autoresize';\n      liElm.appendChild(forceFitCheckboxElm);\n\n      const labelElm = document.createElement('label');\n      labelElm.htmlFor = `${this._gridUid}colpicker-forcefit`;\n      labelElm.textContent = forceFitTitle || '';\n      liElm.appendChild(labelElm);\n\n      if (this.grid.getOptions().forceFitColumns) {\n        forceFitCheckboxElm.checked = true;\n      }\n    }\n\n    if (!this._options.columnPicker?.hideSyncResizeButton) {\n      const syncResizeTitle = this._options.columnPicker?.syncResizeTitle || this._options.syncResizeTitle;\n\n      const liElm = document.createElement('li');\n      liElm.ariaLabel = syncResizeTitle || '';\n      this._listElm.appendChild(liElm);\n\n      const syncResizeCheckboxElm = document.createElement('input');\n      syncResizeCheckboxElm.type = 'checkbox';\n      syncResizeCheckboxElm.id = `${this._gridUid}colpicker-syncresize`;\n      syncResizeCheckboxElm.dataset.option = 'syncresize';\n      liElm.appendChild(syncResizeCheckboxElm);\n\n      const labelElm = document.createElement('label');\n      labelElm.htmlFor = `${this._gridUid}colpicker-syncresize`;\n      labelElm.textContent = syncResizeTitle || '';\n      liElm.appendChild(labelElm);\n\n      if (this.grid.getOptions().syncColumnCellResize) {\n        syncResizeCheckboxElm.checked = true;\n      }\n    }\n\n    this.repositionMenu(e);\n  }\n\n  repositionMenu(event: DOMMouseOrTouchEvent<HTMLDivElement>) {\n    const targetEvent = event?.touches?.[0] || event;\n    this._menuElm.style.top = `${targetEvent.pageY - 10}px`;\n    this._menuElm.style.left = `${targetEvent.pageX - 10}px`;\n    this._menuElm.style.maxHeight = `${window.innerHeight - targetEvent.clientY}px`;\n    this._menuElm.style.display = 'block';\n    this._menuElm.setAttribute('aria-expanded', 'true');\n    this._menuElm.appendChild(this._listElm);\n  }\n\n  updateColumnOrder() {\n    // Because columns can be reordered, we have to update the `columns`\n    // to reflect the new order, however we can't just take `grid.getColumns()`,\n    // as it does not include columns currently hidden by the picker.\n    // We create a new `columns` structure by leaving currently-hidden\n    // columns in their original ordinal position and interleaving the results\n    // of the current column sort.\n    const current = this.grid.getColumns().slice(0);\n    const ordered = new Array(this.columns.length);\n    for (let i = 0; i < ordered.length; i++) {\n      if (this.grid.getColumnIndex(this.columns[i].id) === undefined) {\n        // If the column doesn't return a value from getColumnIndex,\n        // it is hidden. Leave it in this position.\n        ordered[i] = this.columns[i];\n      } else {\n        // Otherwise, grab the next visible column.\n        ordered[i] = current.shift();\n      }\n    }\n    this.columns = ordered;\n  }\n\n  /** Update the Titles of each sections (command, customTitle, ...) */\n  updateAllTitles(pickerOptions: { columnTitle: string; }) {\n    this.grid.applyHtmlCode(this._columnTitleElm, pickerOptions.columnTitle);\n  }\n\n  updateColumn(e: DOMMouseOrTouchEvent<HTMLInputElement>) {\n    if (e.target.dataset.option === 'autoresize') {\n      // when calling setOptions, it will resize with ALL Columns (even the hidden ones)\n      // we can avoid this problem by keeping a reference to the visibleColumns before setOptions and then setColumns after\n      const previousVisibleColumns = this.getVisibleColumns();\n      const isChecked = e.target.checked;\n      this.grid.setOptions({ forceFitColumns: isChecked });\n      this.grid.setColumns(previousVisibleColumns);\n      return;\n    }\n\n    if (e.target.dataset.option === 'syncresize') {\n      if (e.target.checked) {\n        this.grid.setOptions({ syncColumnCellResize: true });\n      } else {\n        this.grid.setOptions({ syncColumnCellResize: false });\n      }\n      return;\n    }\n\n    if (e.target.type === 'checkbox') {\n      const isChecked = e.target.checked;\n      const columnId = e.target.dataset.columnid || '';\n      const visibleColumns: Column[] = [];\n      this._columnCheckboxes.forEach((columnCheckbox, idx) => {\n        if (this.columns[idx].hidden !== undefined) { this.columns[idx].hidden = !columnCheckbox.checked; }\n        if (columnCheckbox.checked) {\n          visibleColumns.push(this.columns[idx]);\n        }\n      });\n\n      if (!visibleColumns.length) {\n        e.target.checked = true;\n        return;\n      }\n\n      this.grid.setColumns(visibleColumns);\n      this.onColumnsChanged.notify({ columnId, showing: isChecked, allColumns: this.columns, columns: this.columns, visibleColumns, grid: this.grid });\n    }\n  }\n\n  setColumnVisibiliy(idxOrId: number | string, show: boolean) {\n    const idx = typeof idxOrId === 'number' ? idxOrId : this.getColumnIndexbyId(idxOrId);\n    let visibleColumns: Column[] = this.getVisibleColumns();\n    const col = this.columns[idx];\n    if (show) {\n      col.hidden = false;\n      visibleColumns.splice(idx, 0, col);\n    } else {\n      const newVisibleColumns: Column[] = [];\n      for (let i = 0; i < visibleColumns.length; i++) {\n        if (visibleColumns[i].id !== col.id) { newVisibleColumns.push(visibleColumns[i]); }\n      }\n      visibleColumns = newVisibleColumns;\n    }\n\n    this.grid.setColumns(visibleColumns);\n    this.onColumnsChanged.notify({ columnId: col.id, showing: show, allColumns: this.columns, columns: this.columns, visibleColumns, grid: this.grid });\n  }\n\n  getAllColumns() {\n    return this.columns;\n  }\n\n  getColumnbyId(id: number | string) {\n    for (let i = 0; i < this.columns.length; i++) {\n      if (this.columns[i].id === id) { return this.columns[i]; }\n    }\n    return null;\n  }\n\n  getColumnIndexbyId(id: number | string) {\n    for (let i = 0; i < this.columns.length; i++) {\n      if (this.columns[i].id === id) { return i; }\n    }\n    return -1;\n  }\n\n  /** visible columns, we can simply get them directly from the grid */\n  getVisibleColumns() {\n    return this.grid.getColumns();\n  }\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  window.Slick.Controls = window.Slick.Controls || {};\n  window.Slick.Controls.ColumnPicker = SlickColumnMenu;\n}\n"],
  "mappings": "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",
  "names": []
}
