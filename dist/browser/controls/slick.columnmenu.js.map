{
  "version": 3,
  "sources": ["../../../src/controls/slick.columnmenu.ts"],
  "sourcesContent": ["import { BindingEventService as BindingEventService_, Event as SlickEvent_, type SlickEventData, Utils as Utils_ } from '../slick.core.js';\r\nimport type { Column, ColumnPickerOption, DOMMouseOrTouchEvent, GridOption, OnColumnsChangedArgs } from '../models/index.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/***\r\n * A control to add a Column Picker (right+click on any column header to reveal the column picker)\r\n * NOTE: this a simplified and updated version of slick.columnpicker.js\r\n *\r\n * USAGE:\r\n *\r\n * Add the slick.columnpicker.(js|css) files and register it with the grid.\r\n *\r\n * Available options, by defining a columnPicker object:\r\n *\r\n *  let options = {\r\n *    enableCellNavigation: true,\r\n *    columnPicker: {\r\n *      columnTitle: \"Columns\",                 // default to empty string\r\n *\r\n *      // the last 2 checkboxes titles\r\n *      hideForceFitButton: false,              // show/hide checkbox near the end \"Force Fit Columns\" (default:false)\r\n *      hideSyncResizeButton: false,            // show/hide checkbox near the end \"Synchronous Resize\" (default:false)\r\n *      forceFitTitle: \"Force fit columns\",     // default to \"Force fit columns\"\r\n *      headerColumnValueExtractor: \"Extract the column label\" // default to column.name\r\n *      syncResizeTitle: \"Synchronous resize\",  // default to \"Synchronous resize\"\r\n *    }\r\n *  };\r\n */\r\n\r\nexport class SlickColumnMenu {\r\n  // --\r\n  // public API\r\n  onColumnsChanged = new SlickEvent<OnColumnsChangedArgs>('onColumnsChanged');\r\n\r\n  // --\r\n  // protected props\r\n  protected _gridUid: string;\r\n  protected _columnTitleElm!: HTMLElement;\r\n  protected _listElm!: HTMLElement;\r\n  protected _menuElm!: HTMLElement;\r\n  protected _columnCheckboxes: HTMLInputElement[] = [];\r\n  protected _bindingEventService = new BindingEventService();\r\n  protected _options: GridOption;\r\n  protected _defaults: ColumnPickerOption = {\r\n    fadeSpeed: 250,\r\n\r\n    // the last 2 checkboxes titles\r\n    hideForceFitButton: false,\r\n    hideSyncResizeButton: false,\r\n    forceFitTitle: 'Force fit columns',\r\n    syncResizeTitle: 'Synchronous resize',\r\n    headerColumnValueExtractor: (columnDef: Column) => Utils.getHtmlStringOutput(columnDef.name || '', 'innerHTML'),\r\n  };\r\n\r\n  constructor(protected columns: Column[], protected readonly grid: SlickGrid, options: GridOption) {\r\n    this._gridUid = grid.getUID();\r\n    this._options = Utils.extend({}, this._defaults, options);\r\n    this.init(this.grid);\r\n  }\r\n\r\n  init(grid: SlickGrid) {\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n    grid.onHeaderContextMenu.subscribe(this.handleHeaderContextMenu.bind(this));\r\n    grid.onColumnsReordered.subscribe(this.updateColumnOrder.bind(this));\r\n\r\n    this._menuElm = document.createElement('div');\r\n    this._menuElm.className = `slick-columnpicker ${this._gridUid}`;\r\n    this._menuElm.style.display = 'none';\r\n    document.body.appendChild(this._menuElm);\r\n\r\n    const buttonElm = document.createElement('button');\r\n    buttonElm.type = 'button';\r\n    buttonElm.className = 'close';\r\n    buttonElm.dataset.dismiss = 'slick-columnpicker';\r\n    buttonElm.ariaLabel = 'Close';\r\n\r\n    const spanCloseElm = document.createElement('span');\r\n    spanCloseElm.className = 'close';\r\n    spanCloseElm.ariaHidden = 'true';\r\n    spanCloseElm.textContent = '\u00D7';\r\n    buttonElm.appendChild(spanCloseElm);\r\n    this._menuElm.appendChild(buttonElm);\r\n\r\n    // user could pass a title on top of the columns list\r\n    if (this._options.columnPickerTitle || (this._options.columnPicker?.columnTitle)) {\r\n      const columnTitle = this._options.columnPickerTitle || this._options.columnPicker?.columnTitle;\r\n      this._columnTitleElm = document.createElement('div');\r\n      this._columnTitleElm.className = 'slick-gridmenu-custom';\r\n      this._columnTitleElm.textContent = columnTitle || '';\r\n      this._menuElm.appendChild(this._columnTitleElm);\r\n    }\r\n\r\n    this._bindingEventService.bind(this._menuElm, 'click', this.updateColumn.bind(this) as EventListener);\r\n\r\n    this._listElm = document.createElement('span');\r\n    this._listElm.className = 'slick-columnpicker-list';\r\n\r\n    // Hide the menu on outside click.\r\n    this._bindingEventService.bind(document.body, 'mousedown', this.handleBodyMouseDown.bind(this) as EventListener);\r\n\r\n    // destroy the picker if user leaves the page\r\n    this._bindingEventService.bind(document.body, 'beforeunload', this.destroy.bind(this));\r\n  }\r\n\r\n  destroy() {\r\n    this.grid.onHeaderContextMenu.unsubscribe(this.handleHeaderContextMenu.bind(this));\r\n    this.grid.onColumnsReordered.unsubscribe(this.updateColumnOrder.bind(this));\r\n    this._bindingEventService.unbindAll();\r\n    this._listElm?.remove();\r\n    this._menuElm?.remove();\r\n  }\r\n\r\n  handleBodyMouseDown(e: DOMMouseOrTouchEvent<HTMLDivElement>) {\r\n    if ((this._menuElm !== e.target && !(this._menuElm && this._menuElm.contains(e.target))) || e.target.className === 'close') {\r\n      this._menuElm.setAttribute('aria-expanded', 'false');\r\n      this._menuElm.style.display = 'none';\r\n    }\r\n  }\r\n\r\n  handleHeaderContextMenu(e: SlickEventData) {\r\n    e.preventDefault();\r\n    Utils.emptyElement(this._listElm);\r\n    this.updateColumnOrder();\r\n    this._columnCheckboxes = [];\r\n\r\n    let columnId, columnLabel, excludeCssClass;\r\n    for (let i = 0; i < this.columns.length; i++) {\r\n      columnId = this.columns[i].id;\r\n      const colName: string = this.columns[i].name instanceof HTMLElement\r\n        ? (this.columns[i].name as HTMLElement).innerHTML\r\n        : (this.columns[i].name || '') as string;\r\n      excludeCssClass = this.columns[i].excludeFromColumnPicker ? 'hidden' : '';\r\n\r\n      const liElm = document.createElement('li');\r\n      liElm.className = excludeCssClass;\r\n      liElm.ariaLabel = colName;\r\n\r\n      const checkboxElm = document.createElement('input');\r\n      checkboxElm.type = 'checkbox';\r\n      checkboxElm.id = `${this._gridUid}colpicker-${columnId}`;\r\n      checkboxElm.dataset.columnid = String(this.columns[i].id);\r\n      liElm.appendChild(checkboxElm);\r\n\r\n      this._columnCheckboxes.push(checkboxElm);\r\n\r\n      if (Utils.isDefined(this.grid.getColumnIndex(columnId)) && !this.columns[i].hidden) {\r\n        checkboxElm.checked = true;\r\n      }\r\n\r\n      columnLabel = (this._options?.columnPicker?.headerColumnValueExtractor)\r\n        ? this._options.columnPicker.headerColumnValueExtractor(this.columns[i], this._options)\r\n        : this._defaults.headerColumnValueExtractor!(this.columns[i], this._options);\r\n\r\n      const labelElm = document.createElement('label');\r\n      labelElm.htmlFor = `${this._gridUid}colpicker-${columnId}`;\r\n      this.grid.applyHtmlCode(labelElm, columnLabel);\r\n      liElm.appendChild(labelElm);\r\n      this._listElm.appendChild(liElm);\r\n    }\r\n\r\n    if (this._options.columnPicker && (!this._options.columnPicker.hideForceFitButton || !this._options.columnPicker.hideSyncResizeButton)) {\r\n      this._listElm.appendChild(document.createElement('hr'));\r\n    }\r\n\r\n    if (!this._options.columnPicker?.hideForceFitButton) {\r\n      const forceFitTitle = this._options.columnPicker?.forceFitTitle || this._options.forceFitTitle;\r\n\r\n      const liElm = document.createElement('li');\r\n      liElm.ariaLabel = forceFitTitle || '';\r\n      this._listElm.appendChild(liElm);\r\n\r\n      const forceFitCheckboxElm = document.createElement('input');\r\n      forceFitCheckboxElm.type = 'checkbox';\r\n      forceFitCheckboxElm.id = `${this._gridUid}colpicker-forcefit`;\r\n      forceFitCheckboxElm.dataset.option = 'autoresize';\r\n      liElm.appendChild(forceFitCheckboxElm);\r\n\r\n      const labelElm = document.createElement('label');\r\n      labelElm.htmlFor = `${this._gridUid}colpicker-forcefit`;\r\n      labelElm.textContent = forceFitTitle || '';\r\n      liElm.appendChild(labelElm);\r\n\r\n      if (this.grid.getOptions().forceFitColumns) {\r\n        forceFitCheckboxElm.checked = true;\r\n      }\r\n    }\r\n\r\n    if (!this._options.columnPicker?.hideSyncResizeButton) {\r\n      const syncResizeTitle = this._options.columnPicker?.syncResizeTitle || this._options.syncResizeTitle;\r\n\r\n      const liElm = document.createElement('li');\r\n      liElm.ariaLabel = syncResizeTitle || '';\r\n      this._listElm.appendChild(liElm);\r\n\r\n      const syncResizeCheckboxElm = document.createElement('input');\r\n      syncResizeCheckboxElm.type = 'checkbox';\r\n      syncResizeCheckboxElm.id = `${this._gridUid}colpicker-syncresize`;\r\n      syncResizeCheckboxElm.dataset.option = 'syncresize';\r\n      liElm.appendChild(syncResizeCheckboxElm);\r\n\r\n      const labelElm = document.createElement('label');\r\n      labelElm.htmlFor = `${this._gridUid}colpicker-syncresize`;\r\n      labelElm.textContent = syncResizeTitle || '';\r\n      liElm.appendChild(labelElm);\r\n\r\n      if (this.grid.getOptions().syncColumnCellResize) {\r\n        syncResizeCheckboxElm.checked = true;\r\n      }\r\n    }\r\n\r\n    this.repositionMenu(e);\r\n  }\r\n\r\n  repositionMenu(event: DOMMouseOrTouchEvent<HTMLDivElement> | SlickEventData) {\r\n    const targetEvent = (event as TouchEvent)?.touches?.[0] || event;\r\n    this._menuElm.style.top = `${targetEvent.pageY - 10}px`;\r\n    this._menuElm.style.left = `${targetEvent.pageX - 10}px`;\r\n    this._menuElm.style.maxHeight = `${window.innerHeight - targetEvent.clientY}px`;\r\n    this._menuElm.style.display = 'block';\r\n    this._menuElm.setAttribute('aria-expanded', 'true');\r\n    this._menuElm.appendChild(this._listElm);\r\n  }\r\n\r\n  updateColumnOrder() {\r\n    // Because columns can be reordered, we have to update the `columns`\r\n    // to reflect the new order, however we can't just take `grid.getColumns()`,\r\n    // as it does not include columns currently hidden by the picker.\r\n    // We create a new `columns` structure by leaving currently-hidden\r\n    // columns in their original ordinal position and interleaving the results\r\n    // of the current column sort.\r\n    const current = this.grid.getColumns().slice(0);\r\n    const ordered = new Array(this.columns.length);\r\n    for (let i = 0; i < ordered.length; i++) {\r\n      if (this.grid.getColumnIndex(this.columns[i].id) === undefined) {\r\n        // If the column doesn't return a value from getColumnIndex,\r\n        // it is hidden. Leave it in this position.\r\n        ordered[i] = this.columns[i];\r\n      } else {\r\n        // Otherwise, grab the next visible column.\r\n        ordered[i] = current.shift();\r\n      }\r\n    }\r\n    this.columns = ordered;\r\n  }\r\n\r\n  /** Update the Titles of each sections (command, customTitle, ...) */\r\n  updateAllTitles(pickerOptions: { columnTitle: string; }) {\r\n    this.grid.applyHtmlCode(this._columnTitleElm, pickerOptions.columnTitle);\r\n  }\r\n\r\n  updateColumn(e: DOMMouseOrTouchEvent<HTMLInputElement>) {\r\n    if (e.target.dataset.option === 'autoresize') {\r\n      // when calling setOptions, it will resize with ALL Columns (even the hidden ones)\r\n      // we can avoid this problem by keeping a reference to the visibleColumns before setOptions and then setColumns after\r\n      const previousVisibleColumns = this.getVisibleColumns();\r\n      const isChecked = e.target.checked;\r\n      this.grid.setOptions({ forceFitColumns: isChecked });\r\n      this.grid.setColumns(previousVisibleColumns);\r\n      return;\r\n    }\r\n\r\n    if (e.target.dataset.option === 'syncresize') {\r\n      if (e.target.checked) {\r\n        this.grid.setOptions({ syncColumnCellResize: true });\r\n      } else {\r\n        this.grid.setOptions({ syncColumnCellResize: false });\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (e.target.type === 'checkbox') {\r\n      const isChecked = e.target.checked;\r\n      const columnId = e.target.dataset.columnid || '';\r\n      const visibleColumns: Column[] = [];\r\n      this._columnCheckboxes.forEach((columnCheckbox, idx) => {\r\n        if (this.columns[idx].hidden !== undefined) { this.columns[idx].hidden = !columnCheckbox.checked; }\r\n        if (columnCheckbox.checked) {\r\n          visibleColumns.push(this.columns[idx]);\r\n        }\r\n      });\r\n\r\n      if (!visibleColumns.length) {\r\n        e.target.checked = true;\r\n        return;\r\n      }\r\n\r\n      this.grid.setColumns(visibleColumns);\r\n      this.onColumnsChanged.notify({ columnId, showing: isChecked, allColumns: this.columns, columns: this.columns, visibleColumns, grid: this.grid });\r\n    }\r\n  }\r\n\r\n  /** @deprecated because of a typo @use `setColumnVisibility()` instead */\r\n  setColumnVisibiliy(idxOrId: number | string, show: boolean) {\r\n    this.setColumnVisibility(idxOrId, show);\r\n  }\r\n\r\n  setColumnVisibility(idxOrId: number | string, show: boolean) {\r\n    const idx = typeof idxOrId === 'number' ? idxOrId : this.getColumnIndexbyId(idxOrId);\r\n    let visibleColumns: Column[] = this.getVisibleColumns();\r\n    const col = this.columns[idx];\r\n    if (show) {\r\n      col.hidden = false;\r\n      visibleColumns.splice(idx, 0, col);\r\n    } else {\r\n      const newVisibleColumns: Column[] = [];\r\n      for (let i = 0; i < visibleColumns.length; i++) {\r\n        if (visibleColumns[i].id !== col.id) { newVisibleColumns.push(visibleColumns[i]); }\r\n      }\r\n      visibleColumns = newVisibleColumns;\r\n    }\r\n\r\n    this.grid.setColumns(visibleColumns);\r\n    this.onColumnsChanged.notify({ columnId: col.id, showing: show, allColumns: this.columns, columns: this.columns, visibleColumns, grid: this.grid });\r\n  }\r\n\r\n  getAllColumns() {\r\n    return this.columns;\r\n  }\r\n\r\n  getColumnbyId(id: number | string) {\r\n    for (let i = 0; i < this.columns.length; i++) {\r\n      if (this.columns[i].id === id) { return this.columns[i]; }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getColumnIndexbyId(id: number | string) {\r\n    for (let i = 0; i < this.columns.length; i++) {\r\n      if (this.columns[i].id === id) { return i; }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /** visible columns, we can simply get them directly from the grid */\r\n  getVisibleColumns() {\r\n    return this.grid.getColumns();\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  window.Slick.Controls = window.Slick.Controls || {};\r\n  window.Slick.Controls.ColumnPicker = SlickColumnMenu;\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
