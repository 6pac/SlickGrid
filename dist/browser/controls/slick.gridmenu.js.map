{
  "version": 3,
  "sources": ["../../../src/controls/slick.gridmenu.ts"],
  "sourcesContent": ["import type { Column, DOMMouseOrTouchEvent, GridMenuCommandItemCallbackArgs, GridMenuEventWithElementCallbackArgs, GridMenuItem, GridMenuOption, GridOption, onGridMenuColumnsChangedCallbackArgs } from '../models/index';\nimport { BindingEventService as BindingEventService_, Event as SlickEvent_, Utils as Utils_ } from '../slick.core';\nimport type { SlickGrid } from '../slick.grid';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n/**\n * A control to add a Grid Menu (hambuger menu on top-right of the grid)\n *\n * USAGE:\n *\n * Add the slick.gridmenu.(js|css) files and register it with the grid.\n *\n * To specify a menu in a column header, extend the column definition like so:\n * let gridMenuControl = new Slick.Controls.GridMenu(columns, grid, options);\n *\n * Available grid options, by defining a gridMenu object:\n *\n *  let options = {\n *    enableCellNavigation: true,\n *    gridMenu: {\n *      customTitle: \"Custom Menus\",                // default to empty string\n *      columnTitle: \"Columns\",                     // default to empty string\n *      iconImage: \"some-image.png\",                // this is the Grid Menu icon (hamburger icon)\n *      iconCssClass: \"fa fa-bars\",                 // you can provide iconImage OR iconCssClass\n *      leaveOpen: false,                           // do we want to leave the Grid Menu open after a command execution? (false by default)\n *      menuWidth: 18,                              // width (icon) that will be use to resize the column header container (18 by default)\n *      contentMinWidth: 0,\t\t\t\t\t\t\t            // defaults to 0 (auto), minimum width of grid menu content (command, column list)\n *      marginBottom: 15,                           // defaults to 15, margin to use at the bottom of the grid when using max-height (default)\n *      resizeOnShowHeaderRow: false,               // false by default\n *      showButton: true,                           // true by default - it allows the user to control if the\n *                                                          // default gridMenu button (located on the top right corner by default CSS)\n *                                                          // should be created or omitted\n *      useClickToRepositionMenu: true,             // true by default\n *\n *      // the last 2 checkboxes titles\n *      hideForceFitButton: false,                  // show/hide checkbox near the end \"Force Fit Columns\"\n *      hideSyncResizeButton: false,                // show/hide checkbox near the end \"Synchronous Resize\"\n *      forceFitTitle: \"Force fit columns\",         // default to \"Force fit columns\"\n *      syncResizeTitle: \"Synchronous resize\",      // default to \"Synchronous resize\"\n *\n *      customItems: [\n *        {\n *          // custom menu item options\n *        },\n *        {\n *          // custom menu item options\n *        }\n *      ]\n *    }\n *  };\n *\n *\n * Available menu options:\n *     hideForceFitButton:        Hide the \"Force fit columns\" button (defaults to false)\n *     hideSyncResizeButton:      Hide the \"Synchronous resize\" button (defaults to false)\n *     forceFitTitle:             Text of the title \"Force fit columns\"\n *     contentMinWidth:\t\t\t\t\t\tminimum width of grid menu content (command, column list), defaults to 0 (auto)\n *     height:                    Height of the Grid Menu content, when provided it will be used instead of the max-height (defaults to undefined)\n *     menuWidth:                 Grid menu button width (defaults to 18)\n *     resizeOnShowHeaderRow:     Do we want to resize on the show header row event\n *     syncResizeTitle:           Text of the title \"Synchronous resize\"\n *     useClickToRepositionMenu:  Use the Click offset to reposition the Grid Menu (defaults to true), when set to False it will use the icon offset to reposition the grid menu\n *     menuUsabilityOverride:     Callback method that user can override the default behavior of enabling/disabling the menu from being usable (must be combined with a custom formatter)\n *     marginBottom:              Margin to use at the bottom of the grid menu, only in effect when height is undefined (defaults to 15)\n *\n * Available custom menu item options:\n *    action:                     Optionally define a callback function that gets executed when item is chosen (and/or use the onCommand event)\n *    title:                      Menu item text.\n *    divider:                    Whether the current item is a divider, not an actual command.\n *    disabled:                   Whether the item/command is disabled.\n *    hidden:                     Whether the item/command is hidden.\n *    tooltip:                    Item tooltip.\n *    command:                    A command identifier to be passed to the onCommand event handlers.\n *    cssClass:                   A CSS class to be added to the menu item container.\n *    iconCssClass:               A CSS class to be added to the menu item icon.\n *    iconImage:                  A url to the icon image.\n *    textCssClass:               A CSS class to be added to the menu item text.\n *    itemVisibilityOverride:     Callback method that user can override the default behavior of showing/hiding an item from the list\n *    itemUsabilityOverride:      Callback method that user can override the default behavior of enabling/disabling an item from the list\n *\n *\n * The plugin exposes the following events:\n *\n *    onAfterMenuShow:   Fired after the menu is shown.  You can customize the menu or dismiss it by returning false.\n *      * ONLY works with a JS event (as per slick.core code), so we cannot notify when it's a button event (when grid menu is attached to an external button, not the hamburger menu)\n *        Event args:\n *            grid:     Reference to the grid.\n *            column:   Column definition.\n *            menu:     Menu options.  Note that you can change the menu items here.\n *\n *    onBeforeMenuShow:   Fired before the menu is shown.  You can customize the menu or dismiss it by returning false.\n *      * ONLY works with a JS event (as per slick.core code), so we cannot notify when it's a button event (when grid menu is attached to an external button, not the hamburger menu)\n *        Event args:\n *            grid:     Reference to the grid.\n *            column:   Column definition.\n *            menu:     Menu options.  Note that you can change the menu items here.\n *\n *    onMenuClose:      Fired when the menu is closing.\n *        Event args:\n *            grid:     Reference to the grid.\n *            column:   Column definition.\n *            menu:     Menu options.  Note that you can change the menu items here.\n *\n *    onCommand:    Fired on menu item click for buttons with 'command' specified.\n *        Event args:\n *            grid:     Reference to the grid.\n *            column:   Column definition.\n *            command:  Button command identified.\n *            button:   Button options.  Note that you can change the button options in your\n *                      event handler, and the column header will be automatically updated to\n *                      reflect them.  This is useful if you want to implement something like a\n *                      toggle button.\n */\n\nexport class SlickGridMenu {\n  // --\n  // public API\n  onAfterMenuShow = new SlickEvent<GridMenuEventWithElementCallbackArgs>();\n  onBeforeMenuShow = new SlickEvent<GridMenuEventWithElementCallbackArgs>();\n  onMenuClose = new SlickEvent<GridMenuEventWithElementCallbackArgs>();\n  onCommand = new SlickEvent<GridMenuCommandItemCallbackArgs>();\n  onColumnsChanged = new SlickEvent<onGridMenuColumnsChangedCallbackArgs>();\n\n  // --\n  // protected props\n  protected _bindingEventService: BindingEventService_;\n  protected _gridOptions: GridOption;\n  protected _gridUid: string;\n  protected _isMenuOpen = false;\n  protected _gridMenuOptions: GridMenuOption | null = null;\n  protected _columnTitleElm!: HTMLElement;\n  protected _customTitleElm!: HTMLElement;\n  protected _customMenuElm!: HTMLElement;\n  protected _headerElm: HTMLDivElement | null = null;\n  protected _listElm!: HTMLElement;\n  protected _buttonElm!: HTMLElement;\n  protected _menuElm!: HTMLElement;\n  protected _columnCheckboxes: HTMLInputElement[] = [];\n  protected _defaults = {\n    showButton: true,\n    hideForceFitButton: false,\n    hideSyncResizeButton: false,\n    forceFitTitle: 'Force fit columns',\n    marginBottom: 15,\n    menuWidth: 18,\n    contentMinWidth: 0,\n    resizeOnShowHeaderRow: false,\n    syncResizeTitle: 'Synchronous resize',\n    useClickToRepositionMenu: true,\n    headerColumnValueExtractor: (columnDef: Column) => columnDef.name,\n  };\n\n  constructor(protected columns: Column[], protected readonly grid: SlickGrid, gridOptions: GridOption) {\n    this._gridUid = grid.getUID();\n    this._gridOptions = gridOptions;\n    this._gridMenuOptions = Utils.extend({}, gridOptions.gridMenu);\n    this._bindingEventService = new BindingEventService();\n\n    // when a grid optionally changes from a regular grid to a frozen grid, we need to destroy & recreate the grid menu\n    // we do this change because the Grid Menu is on the left container for a regular grid, it is however on the right container for a frozen grid\n    grid.onSetOptions.subscribe((_e, args) => {\n      if (args && args.optionsBefore && args.optionsAfter) {\n        const switchedFromRegularToFrozen = args.optionsBefore.frozenColumn! >= 0 && args.optionsAfter.frozenColumn === -1;\n        const switchedFromFrozenToRegular = args.optionsBefore.frozenColumn === -1 && args.optionsAfter.frozenColumn! >= 0;\n        if (switchedFromRegularToFrozen || switchedFromFrozenToRegular) {\n          this.recreateGridMenu();\n        }\n      }\n    });\n    this.init(this.grid);\n  }\n\n  init(grid: SlickGrid) {\n    this._gridOptions = grid.getOptions();\n    this.createGridMenu();\n\n    // subscribe to the grid, when it's destroyed, we should also destroy the Grid Menu\n    grid.onBeforeDestroy.subscribe(this.destroy.bind(this));\n  }\n\n  setOptions(newOptions: GridMenuOption) {\n    this._gridMenuOptions = Utils.extend({}, this._gridMenuOptions, newOptions);\n  }\n\n  protected createGridMenu() {\n    const gridMenuWidth = (this._gridMenuOptions?.menuWidth) || this._defaults.menuWidth;\n    if (this._gridOptions && this._gridOptions.hasOwnProperty('frozenColumn') && this._gridOptions.frozenColumn! >= 0) {\n      this._headerElm = document.querySelector(`.${this._gridUid} .slick-header-right`);\n    } else {\n      this._headerElm = document.querySelector(`.${this._gridUid} .slick-header-left`);\n    }\n    this._headerElm!.style.width = `calc(100% - ${gridMenuWidth}px)`;\n\n    // if header row is enabled, we need to resize its width also\n    const enableResizeHeaderRow = (this._gridMenuOptions?.resizeOnShowHeaderRow != undefined) ? this._gridMenuOptions.resizeOnShowHeaderRow : this._defaults.resizeOnShowHeaderRow;\n    if (enableResizeHeaderRow && this._gridOptions.showHeaderRow) {\n      const headerRow = document.querySelector<HTMLDivElement>(`.${this._gridUid}.slick-headerrow`);\n      if (headerRow) {\n        headerRow.style.width = `calc(100% - ${gridMenuWidth}px)`;\n      }\n    }\n\n    const showButton = (this._gridMenuOptions?.showButton !== undefined) ? this._gridMenuOptions.showButton : this._defaults.showButton;\n    if (showButton) {\n      this._buttonElm = document.createElement('button');\n      this._buttonElm.className = 'slick-gridmenu-button';\n      this._buttonElm.ariaLabel = 'Grid Menu';\n\n      if (this._gridMenuOptions?.iconCssClass) {\n        this._buttonElm.classList.add(...this._gridMenuOptions.iconCssClass.split(' '));\n      } else {\n        const iconImageElm = document.createElement('img');\n        iconImageElm.src = (this._gridMenuOptions?.iconImage) ? this._gridMenuOptions.iconImage : '../images/drag-handle.png';\n        this._buttonElm.appendChild(iconImageElm);\n      }\n\n      this._headerElm!.parentElement!.insertBefore(this._buttonElm, this._headerElm!.parentElement!.firstChild);\n\n      // add on click handler for the Grid Menu itself\n      this._bindingEventService.bind(this._buttonElm, 'click', this.showGridMenu.bind(this) as EventListener);\n    }\n\n    this._menuElm = document.createElement('div');\n    this._menuElm.className = `slick-gridmenu ${this._gridUid}`;\n    this._menuElm.style.display = 'none';\n    document.body.appendChild(this._menuElm);\n\n    const buttonElm = document.createElement('button');\n    buttonElm.type = 'button';\n    buttonElm.className = 'close';\n    buttonElm.dataset.dismiss = 'slick-gridmenu';\n    buttonElm.ariaLabel = 'Close';\n\n    const spanCloseElm = document.createElement('span');\n    spanCloseElm.className = 'close';\n    spanCloseElm.ariaHidden = 'true';\n    spanCloseElm.innerHTML = '&times;';\n    buttonElm.appendChild(spanCloseElm);\n    this._menuElm.appendChild(buttonElm);\n\n    this._customMenuElm = document.createElement('div');\n    this._customMenuElm.className = 'slick-gridmenu-custom';\n    this._customMenuElm.role = 'menu';\n\n    this._menuElm.appendChild(this._customMenuElm);\n\n    this.populateCustomMenus(this._gridMenuOptions || {}, this._customMenuElm);\n    this.populateColumnPicker();\n\n    // Hide the menu on outside click.\n    this._bindingEventService.bind(document.body, 'mousedown', this.handleBodyMouseDown.bind(this) as EventListener);\n\n    // destroy the picker if user leaves the page\n    this._bindingEventService.bind(document.body, 'beforeunload', this.destroy.bind(this));\n  }\n\n  /** Destroy the plugin by unsubscribing every events & also delete the menu DOM elements */\n  destroy() {\n    this.onAfterMenuShow.unsubscribe();\n    this.onBeforeMenuShow.unsubscribe();\n    this.onMenuClose.unsubscribe();\n    this.onCommand.unsubscribe();\n    this.onColumnsChanged.unsubscribe();\n    this.grid.onColumnsReordered.unsubscribe(this.updateColumnOrder.bind(this));\n    this.grid.onBeforeDestroy.unsubscribe();\n    this.grid.onSetOptions.unsubscribe();\n    this._bindingEventService.unbindAll();\n    this._menuElm?.remove();\n    this.deleteMenu();\n  }\n\n  /** Delete the menu DOM element but without unsubscribing any events */\n  deleteMenu() {\n    this._bindingEventService.unbindAll();\n    const gridMenuElm = document.querySelector<HTMLDivElement>(`div.slick-gridmenu.${this._gridUid}`);\n    if (gridMenuElm) {\n      gridMenuElm.style.display = 'none';\n    }\n    if (this._headerElm) {\n      // put back original width (fixes width and frozen+gridMenu on left header)\n      this._headerElm.style.width = '100%';\n    }\n    this._buttonElm?.remove();\n    this._menuElm?.remove();\n  }\n\n  protected populateCustomMenus(gridMenuOptions: GridMenuOption, customMenuElm: HTMLElement) {\n    // Construct the custom menu items.\n    if (!gridMenuOptions || !gridMenuOptions.customItems) {\n      return;\n    }\n\n    // user could pass a title on top of the custom section\n    if (this._gridMenuOptions?.customTitle) {\n      this._customTitleElm = document.createElement('div');\n      this._customTitleElm.className = 'title';\n      this._customTitleElm.innerHTML = this._gridMenuOptions.customTitle;\n      customMenuElm.appendChild(this._customTitleElm);\n    }\n\n    for (let i = 0, ln = gridMenuOptions.customItems.length; i < ln; i++) {\n      let addClickListener = true;\n      const item = gridMenuOptions.customItems[i];\n      const callbackArgs = {\n        grid: this.grid,\n        menu: this._menuElm,\n        columns: this.columns,\n        visibleColumns: this.getVisibleColumns()\n      };\n\n      // run each override functions to know if the item is visible and usable\n      const isItemVisible = this.runOverrideFunctionWhenExists<typeof callbackArgs>((item as GridMenuItem).itemVisibilityOverride, callbackArgs);\n      const isItemUsable = this.runOverrideFunctionWhenExists<typeof callbackArgs>((item as GridMenuItem).itemUsabilityOverride, callbackArgs);\n\n      // if the result is not visible then there's no need to go further\n      if (!isItemVisible) {\n        continue;\n      }\n\n      // when the override is defined, we need to use its result to update the disabled property\n      // so that \"handleMenuItemCommandClick\" has the correct flag and won't trigger a command clicked event\n      if (Object.prototype.hasOwnProperty.call(item, 'itemUsabilityOverride')) {\n        (item as GridMenuItem).disabled = isItemUsable ? false : true;\n      }\n\n      const liElm = document.createElement('div');\n      liElm.className = 'slick-gridmenu-item';\n      liElm.role = 'menuitem';\n\n      if ((item as GridMenuItem).divider || item === 'divider') {\n        liElm.classList.add('slick-gridmenu-item-divider');\n        addClickListener = false;\n      }\n      if ((item as GridMenuItem).disabled) {\n        liElm.classList.add('slick-gridmenu-item-disabled');\n      }\n\n      if ((item as GridMenuItem).hidden) {\n        liElm.classList.add('slick-gridmenu-item-hidden');\n      }\n\n      if ((item as GridMenuItem).cssClass) {\n        liElm.classList.add(...(item as GridMenuItem).cssClass!.split(' '));\n      }\n\n      if ((item as GridMenuItem).tooltip) {\n        liElm.title = (item as GridMenuItem).tooltip || '';\n      }\n\n      const iconElm = document.createElement('div');\n      iconElm.className = 'slick-gridmenu-icon';\n\n      liElm.appendChild(iconElm);\n\n      if ((item as GridMenuItem).iconCssClass) {\n        iconElm.classList.add(...(item as GridMenuItem).iconCssClass!.split(' '));\n      }\n\n      if ((item as GridMenuItem).iconImage) {\n        iconElm.style.backgroundImage = `url(${(item as GridMenuItem).iconImage})`;\n      }\n\n      const textElm = document.createElement('span');\n      textElm.className = 'slick-gridmenu-content';\n      textElm.innerHTML = (item as GridMenuItem).title || '';\n\n      liElm.appendChild(textElm);\n\n      if ((item as GridMenuItem).textCssClass) {\n        textElm.classList.add(...(item as GridMenuItem).textCssClass!.split(' '));\n      }\n\n      customMenuElm.appendChild(liElm);\n\n      if (addClickListener) {\n        this._bindingEventService.bind(liElm, 'click', this.handleMenuItemClick.bind(this, item) as EventListener);\n      }\n    }\n  }\n\n  /** Build the column picker, the code comes almost untouched from the file \"slick.columnpicker.js\" */\n  protected populateColumnPicker() {\n    this.grid.onColumnsReordered.subscribe(this.updateColumnOrder.bind(this));\n\n    // user could pass a title on top of the columns list\n    if (this._gridMenuOptions?.columnTitle) {\n      this._columnTitleElm = document.createElement('div');\n      this._columnTitleElm.className = 'title';\n      this._columnTitleElm.innerHTML = this._gridMenuOptions.columnTitle;\n      this._menuElm.appendChild(this._columnTitleElm);\n    }\n\n    this._bindingEventService.bind(this._menuElm, 'click', this.updateColumn.bind(this) as EventListener);\n    this._listElm = document.createElement('span');\n    this._listElm.className = 'slick-gridmenu-list';\n    this._listElm.role = 'menu';\n  }\n\n  /** Delete and then Recreate the Grid Menu (for example when we switch from regular to a frozen grid) */\n  recreateGridMenu() {\n    this.deleteMenu();\n    this.init(this.grid);\n  }\n\n  showGridMenu(e: DOMMouseOrTouchEvent<HTMLButtonElement>) {\n    const targetEvent = e.touches ? e.touches[0] : e;\n    e.preventDefault();\n\n    // empty both the picker list & the command list\n    Utils.emptyElement(this._listElm);\n    Utils.emptyElement(this._customMenuElm);\n\n    this.populateCustomMenus(this._gridMenuOptions || {}, this._customMenuElm);\n    this.updateColumnOrder();\n    this._columnCheckboxes = [];\n\n    const callbackArgs = {\n      grid: this.grid,\n      menu: this._menuElm,\n      allColumns: this.columns,\n      visibleColumns: this.getVisibleColumns()\n    };\n\n    // run the override function (when defined), if the result is false it won't go further\n    if (this._gridMenuOptions && !this.runOverrideFunctionWhenExists<typeof callbackArgs>(this._gridMenuOptions.menuUsabilityOverride, callbackArgs)) {\n      return;\n    }\n\n    // notify of the onBeforeMenuShow only works when\n    // this mean that we cannot notify when the grid menu is attach to a button event\n    if (typeof e.stopPropagation === 'function') {\n      if (this.onBeforeMenuShow.notify(callbackArgs, e, this).getReturnValue() == false) {\n        return;\n      }\n    }\n\n    let columnId, columnLabel, excludeCssClass;\n    for (let i = 0; i < this.columns.length; i++) {\n      columnId = this.columns[i].id;\n      excludeCssClass = this.columns[i].excludeFromGridMenu ? 'hidden' : '';\n\n      const liElm = document.createElement('li');\n      liElm.className = excludeCssClass;\n      liElm.ariaLabel = this.columns[i]?.name || '';\n\n      const checkboxElm = document.createElement('input');\n      checkboxElm.type = 'checkbox';\n      checkboxElm.id = `${this._gridUid}-gridmenu-colpicker-${columnId}`;\n      checkboxElm.dataset.columnid = String(this.columns[i].id);\n      liElm.appendChild(checkboxElm);\n\n      if (this.grid.getColumnIndex(this.columns[i].id) != null && !this.columns[i].hidden) {\n        checkboxElm.checked = true;\n      }\n\n      this._columnCheckboxes.push(checkboxElm);\n\n      // get the column label from the picker value extractor (user can optionally provide a custom extractor)\n      if (this._gridMenuOptions?.headerColumnValueExtractor) {\n        columnLabel = this._gridMenuOptions.headerColumnValueExtractor(this.columns[i], this._gridOptions);\n      } else {\n        columnLabel = this._defaults.headerColumnValueExtractor(this.columns[i]);\n      }\n\n      const labelElm = document.createElement('label');\n      labelElm.htmlFor = `${this._gridUid}-gridmenu-colpicker-${columnId}`;\n      labelElm.innerHTML = columnLabel || '';\n      liElm.appendChild(labelElm);\n      this._listElm.appendChild(liElm);\n    }\n\n    if (this._gridMenuOptions && (!this._gridMenuOptions.hideForceFitButton || !this._gridMenuOptions.hideSyncResizeButton)) {\n      this._listElm.appendChild(document.createElement('hr'));\n    }\n\n    if (!(this._gridMenuOptions?.hideForceFitButton)) {\n      const forceFitTitle = (this._gridMenuOptions?.forceFitTitle) || this._defaults.forceFitTitle;\n\n      const liElm = document.createElement('li');\n      liElm.ariaLabel = forceFitTitle;\n      liElm.role = 'menuitem';\n      this._listElm.appendChild(liElm);\n\n      const forceFitCheckboxElm = document.createElement('input');\n      forceFitCheckboxElm.type = 'checkbox';\n      forceFitCheckboxElm.id = `${this._gridUid}-gridmenu-colpicker-forcefit`;\n      forceFitCheckboxElm.dataset.option = 'autoresize';\n      liElm.appendChild(forceFitCheckboxElm);\n\n      const labelElm = document.createElement('label');\n      labelElm.htmlFor = `${this._gridUid}-gridmenu-colpicker-forcefit`;\n      labelElm.textContent = forceFitTitle;\n      liElm.appendChild(labelElm);\n\n      if (this.grid.getOptions().forceFitColumns) {\n        forceFitCheckboxElm.checked = true;\n      }\n    }\n\n    if (!(this._gridMenuOptions?.hideSyncResizeButton)) {\n      const syncResizeTitle = (this._gridMenuOptions?.syncResizeTitle) || this._defaults.syncResizeTitle;\n\n      const liElm = document.createElement('li');\n      liElm.ariaLabel = syncResizeTitle;\n      this._listElm.appendChild(liElm);\n\n      const syncResizeCheckboxElm = document.createElement('input');\n      syncResizeCheckboxElm.type = 'checkbox';\n      syncResizeCheckboxElm.id = `${this._gridUid}-gridmenu-colpicker-syncresize`;\n      syncResizeCheckboxElm.dataset.option = 'syncresize';\n      liElm.appendChild(syncResizeCheckboxElm);\n\n      const labelElm = document.createElement('label');\n      labelElm.htmlFor = `${this._gridUid}-gridmenu-colpicker-syncresize`;\n      labelElm.textContent = syncResizeTitle;\n      liElm.appendChild(labelElm);\n\n      if (this.grid.getOptions().syncColumnCellResize) {\n        syncResizeCheckboxElm.checked = true;\n      }\n    }\n\n    let buttonElm = (e.target.nodeName === 'BUTTON' ? e.target : e.target.querySelector('button')) as HTMLButtonElement; // get button element\n    if (!buttonElm) {\n      buttonElm = e.target.parentElement as HTMLButtonElement; // external grid menu might fall in this last case if wrapped in a span/div\n    }\n\n    // we need to display the menu to properly calculate its width but we can however make it invisible\n    this._menuElm.style.display = 'block';\n    this._menuElm.style.opacity = '0';\n\n    const menuIconOffset = Utils.offset(buttonElm); // get button offset position\n    const menuWidth = this._menuElm.offsetWidth;\n    const useClickToRepositionMenu = (this._gridMenuOptions?.useClickToRepositionMenu !== undefined) ? this._gridMenuOptions.useClickToRepositionMenu : this._defaults.useClickToRepositionMenu;\n    const contentMinWidth = (this._gridMenuOptions?.contentMinWidth) ? this._gridMenuOptions.contentMinWidth : this._defaults.contentMinWidth;\n    const currentMenuWidth = (contentMinWidth > menuWidth) ? contentMinWidth : menuWidth + 5;\n    const nextPositionTop = (useClickToRepositionMenu && targetEvent.pageY > 0) ? targetEvent.pageY : menuIconOffset!.top + 10;\n    const nextPositionLeft = (useClickToRepositionMenu && targetEvent.pageX > 0) ? targetEvent.pageX : menuIconOffset!.left + 10;\n    const menuMarginBottom = (this._gridMenuOptions?.marginBottom !== undefined) ? this._gridMenuOptions.marginBottom : this._defaults.marginBottom;\n\n    this._menuElm.style.top = `${nextPositionTop + 10}px`;\n    this._menuElm.style.left = `${nextPositionLeft - currentMenuWidth + 10}px`;\n\n    if (contentMinWidth > 0) {\n      this._menuElm.style.minWidth = `${contentMinWidth}px`;\n    }\n\n    // set \"height\" when defined OR ELSE use the \"max-height\" with available window size and optional margin bottom\n    if (this._gridMenuOptions?.height !== undefined) {\n      this._menuElm.style.height = `${this._gridMenuOptions.height}px`;\n    } else {\n      this._menuElm.style.maxHeight = `${window.innerHeight - targetEvent.clientY - menuMarginBottom}px`;\n    }\n\n    this._menuElm.style.display = 'block';\n    this._menuElm.style.opacity = '1'; // restore menu visibility\n    this._menuElm.appendChild(this._listElm);\n    this._isMenuOpen = true;\n\n    if (typeof e.stopPropagation === 'function') {\n      if (this.onAfterMenuShow.notify(callbackArgs, e, this).getReturnValue() == false) {\n        return;\n      }\n    }\n  }\n\n  protected handleBodyMouseDown(event: DOMMouseOrTouchEvent<HTMLElement>) {\n    if ((this._menuElm !== event.target && !(this._menuElm?.contains(event.target)) && this._isMenuOpen) || event.target.className === 'close') {\n      this.hideMenu(event);\n    }\n  }\n\n  protected handleMenuItemClick(item: any, e: DOMMouseOrTouchEvent<HTMLButtonElement>) {\n    const command = item.command || '';\n\n    if (item.disabled || item.divider || item === 'divider') {\n      return;\n    }\n\n    if (command != null && command != '') {\n      const callbackArgs = {\n        grid: this.grid,\n        command: command,\n        item: item,\n        allColumns: this.columns,\n        visibleColumns: this.getVisibleColumns()\n      };\n      this.onCommand.notify(callbackArgs, e, this);\n\n      // execute action callback when defined\n      if (typeof item.action === 'function') {\n        item.action.call(this, e, callbackArgs);\n      }\n    }\n\n    // does the user want to leave open the Grid Menu after executing a command?\n    const leaveOpen = !!(this._gridMenuOptions?.leaveOpen);\n    if (!leaveOpen && !e.defaultPrevented) {\n      this.hideMenu(e);\n    }\n\n    // Stop propagation so that it doesn't register as a header click event.\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  hideMenu(e: DOMMouseOrTouchEvent<HTMLElement>) {\n    if (this._menuElm) {\n      Utils.hide(this._menuElm);\n      this._isMenuOpen = false;\n\n      const callbackArgs = {\n        grid: this.grid,\n        menu: this._menuElm,\n        allColumns: this.columns,\n        visibleColumns: this.getVisibleColumns()\n      };\n      if (this.onMenuClose.notify(callbackArgs, e, this).getReturnValue() == false) {\n        return;\n      }\n    }\n  }\n\n  /** Update the Titles of each sections (command, customTitle, ...) */\n  updateAllTitles(gridMenuOptions: GridMenuOption) {\n    if (this._customTitleElm?.innerHTML) {\n      this._customTitleElm.innerHTML = gridMenuOptions.customTitle || '';\n    }\n    if (this._columnTitleElm?.innerHTML) {\n      this._columnTitleElm.innerHTML = gridMenuOptions.columnTitle || '';\n    }\n  }\n\n  protected updateColumnOrder() {\n    // Because columns can be reordered, we have to update the `columns`\n    // to reflect the new order, however we can't just take `grid.getColumns()`,\n    // as it does not include columns currently hidden by the picker.\n    // We create a new `columns` structure by leaving currently-hidden\n    // columns in their original ordinal position and interleaving the results\n    // of the current column sort.\n    const current = this.grid.getColumns().slice(0);\n    const ordered = new Array(this.columns.length);\n    for (let i = 0; i < ordered.length; i++) {\n      if (this.grid.getColumnIndex(this.columns[i].id) === undefined) {\n        // If the column doesn't return a value from getColumnIndex,\n        // it is hidden. Leave it in this position.\n        ordered[i] = this.columns[i];\n      } else {\n        // Otherwise, grab the next visible column.\n        ordered[i] = current.shift();\n      }\n    }\n    this.columns = ordered;\n  }\n\n  protected updateColumn(e: DOMMouseOrTouchEvent<HTMLInputElement>) {\n    if (e.target.dataset.option === 'autoresize') {\n      // when calling setOptions, it will resize with ALL Columns (even the hidden ones)\n      // we can avoid this problem by keeping a reference to the visibleColumns before setOptions and then setColumns after\n      const previousVisibleColumns = this.getVisibleColumns();\n      const isChecked = e.target.checked;\n      this.grid.setOptions({ forceFitColumns: isChecked });\n      this.grid.setColumns(previousVisibleColumns);\n      return;\n    }\n\n    if (e.target.dataset.option === 'syncresize') {\n      this.grid.setOptions({ syncColumnCellResize: !!(e.target.checked) });\n      return;\n    }\n\n    if (e.target.type === 'checkbox') {\n      const isChecked = e.target.checked;\n      const columnId = e.target.dataset.columnid || '';\n      const visibleColumns: Column[] = [];\n      this._columnCheckboxes.forEach((columnCheckbox, idx) => {\n        if (columnCheckbox.checked) {\n          if (this.columns[idx].hidden) { this.columns[idx].hidden = false; }\n          visibleColumns.push(this.columns[idx]);\n        }\n      });\n\n      if (!visibleColumns.length) {\n        e.target.checked = true;\n        return;\n      }\n\n      const callbackArgs = {\n        columnId,\n        showing: isChecked,\n        grid: this.grid,\n        allColumns: this.columns,\n        columns: visibleColumns,\n        visibleColumns: this.getVisibleColumns()\n      };\n      this.grid.setColumns(visibleColumns);\n      this.onColumnsChanged.notify(callbackArgs, e, this);\n    }\n  }\n\n  getAllColumns() {\n    return this.columns;\n  }\n\n  /** visible columns, we can simply get them directly from the grid */\n  getVisibleColumns() {\n    return this.grid.getColumns();\n  }\n\n  /**\n   * Method that user can pass to override the default behavior.\n   * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\n   * @param overrideFn: override function callback\n   * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\n   */\n  protected runOverrideFunctionWhenExists<T = any>(overrideFn: ((args: any) => boolean) | undefined, args: T): boolean {\n    if (typeof overrideFn === 'function') {\n      return overrideFn.call(this, args);\n    }\n    return true;\n  }\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  window.Slick.Controls = window.Slick.Controls || {};\n  window.Slick.Controls.GridMenu = SlickGridMenu;\n}\n\n"],
  "mappings": "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",
  "names": []
}
