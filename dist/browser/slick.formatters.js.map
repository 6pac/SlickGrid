{
  "version": 3,
  "sources": ["../../src/slick.formatters.ts"],
  "sourcesContent": ["import type { Formatter } from './models/index';\nimport { Utils as Utils_ } from './slick.core';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n/***\n * Contains basic SlickGrid formatters.\n *\n * NOTE:  These are merely examples.  You will most likely need to implement something more\n *        robust/extensible/localizable/etc. for your use!\n *\n * @module Formatters\n * @namespace Slick\n */\n\nexport const PercentCompleteFormatter: Formatter = (_row, _cell, value) => {\n  if (!Utils.isDefined(value) || value === '') {\n    return '-';\n  } else if (value < 50) {\n    return `<span style=\"color:red;font-weight:bold;\">${value}%</span>`;\n  } else {\n    return `<span style=\"color:green\">${value}%</span>`;\n  }\n};\n\nexport const PercentCompleteBarFormatter: Formatter = (_row, _cell, value) => {\n  if (!Utils.isDefined(value) || value === '') {\n    return '';\n  }\n\n  let color;\n\n  if (value < 30) {\n    color = 'red';\n  } else if (value < 70) {\n    color = 'silver';\n  } else {\n    color = 'green';\n  }\n\n  return `<span class=\"percent-complete-bar\" style=\"background:${color};width:${value}%\" title=\"${value}%\"></span>`;\n};\n\nexport const YesNoFormatter: Formatter = (_row, _cell, value) => {\n  return value ? 'Yes' : 'No';\n};\n\nexport const CheckboxFormatter: Formatter = (_row, _cell, value) => {\n  return `<span class=\"sgi sgi-checkbox-${value ? 'intermediate' : 'blank-outline'}\"></span>`;\n};\n\nexport const CheckmarkFormatter: Formatter = (_row, _cell, value) => {\n  return value ? `<span class=\"sgi sgi-check\"></span>` : '';\n};\n\nexport const Formatters = {\n  PercentComplete: PercentCompleteFormatter,\n  PercentCompleteBar: PercentCompleteBarFormatter,\n  YesNo: YesNoFormatter,\n  Checkmark: CheckmarkFormatter,\n  Checkbox: CheckboxFormatter\n};\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(Slick, {\n    Formatters\n  });\n}\n\n"],
  "mappings": ";;;AAIA,MAAM,QAAoB,MAAM,OAYnB,2BAAsC,CAAC,MAAM,OAAO,UAC3D,CAAC,MAAM,UAAU,KAAK,KAAK,UAAU,KAChC,MACE,QAAQ,KACV,6CAA6C,KAAK,aAElD,6BAA6B,KAAK,YAIhC,8BAAyC,CAAC,MAAM,OAAO,UAAU;AAC5E,QAAI,CAAC,MAAM,UAAU,KAAK,KAAK,UAAU;AACvC,aAAO;AAGT,QAAI;AAEJ,WAAI,QAAQ,KACV,QAAQ,QACC,QAAQ,KACjB,QAAQ,WAER,QAAQ,SAGH,wDAAwD,KAAK,UAAU,KAAK,aAAa,KAAK;AAAA,EACvG,GAEa,iBAA4B,CAAC,MAAM,OAAO,UAC9C,QAAQ,QAAQ,MAGZ,oBAA+B,CAAC,MAAM,OAAO,UACjD,iCAAiC,QAAQ,iBAAiB,eAAe,aAGrE,qBAAgC,CAAC,MAAM,OAAO,UAClD,QAAQ,wCAAwC,IAG5C,aAAa;AAAA,IACxB,iBAAiB;AAAA,IACjB,oBAAoB;AAAA,IACpB,OAAO;AAAA,IACP,WAAW;AAAA,IACX,UAAU;AAAA,EACZ;AAGA,EAAiB,OAAO,SACtB,MAAM,OAAO,OAAO;AAAA,IAClB;AAAA,EACF,CAAC;",
  "names": []
}
