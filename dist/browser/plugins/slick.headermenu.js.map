{
  "version": 3,
  "sources": ["../../../src/plugins/slick.headermenu.ts"],
  "sourcesContent": ["import { BindingEventService as BindingEventService_, Event as SlickEvent_, SlickEventHandler as SlickEventHandler_, Utils as Utils_ } from '../slick.core';\nimport type {\n  Column,\n  DOMEvent,\n  HeaderMenuCommandItemCallbackArgs,\n  HeaderMenuItems,\n  HeaderMenuOption,\n  MenuCommandItem,\n  MenuCommandItemCallbackArgs,\n  Plugin,\n  OnHeaderCellRenderedEventArgs\n} from '../models/index';\nimport type { SlickGrid } from '../slick.grid';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst SlickEventHandler = IIFE_ONLY ? Slick.EventHandler : SlickEventHandler_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n/**\n * A plugin to add drop-down menus to column headers.\n *\n * USAGE:\n *\n * Add the plugin .js & .css files and register it with the grid.\n *\n * To specify a menu in a column header, extend the column definition like so:\n *\n *   let columns = [\n *     {\n *       id: 'myColumn',\n *       name: 'My column',\n *\n *       // This is the relevant part\n *       header: {\n *          menu: {\n *              items: [\n *                {\n *                  // menu item options\n *                },\n *                {\n *                  // menu item options\n *                }\n *              ]\n *          }\n *       }\n *     }\n *   ];\n *\n *\n * Available menu options:\n *    autoAlign:              Auto-align drop menu to the left when not enough viewport space to show on the right\n *    autoAlignOffset:        When drop menu is aligned to the left, it might not be perfectly aligned with the header menu icon, if that is the case you can add an offset (positive/negative number to move right/left)\n *    buttonCssClass:         an extra CSS class to add to the menu button (default 'caret')\n *    buttonImage:            a url to the menu button image\n *    menuUsabilityOverride:  Callback method that user can override the default behavior of enabling/disabling the menu from being usable (must be combined with a custom formatter)\n *    minWidth:               Minimum width that the drop menu will have\n *\n *\n * Available menu item options:\n *    action:                   Optionally define a callback function that gets executed when item is chosen (and/or use the onCommand event)\n *    title:                    Menu item text.\n *    divider:                  Whether the current item is a divider, not an actual command.\n *    disabled:                 Whether the item/command is disabled.\n *    hidden:                   Whether the item/command is hidden.\n *    tooltip:                  Item tooltip.\n *    command:                  A command identifier to be passed to the onCommand event handlers.\n *    cssClass:                 A CSS class to be added to the menu item container.\n *    iconCssClass:             A CSS class to be added to the menu item icon.\n *    iconImage:                A url to the icon image.\n *    textCssClass:             A CSS class to be added to the menu item text.\n *    itemVisibilityOverride:   Callback method that user can override the default behavior of showing/hiding an item from the list\n *    itemUsabilityOverride:    Callback method that user can override the default behavior of enabling/disabling an item from the list\n *\n *\n * The plugin exposes the following events:\n\n  *    onAfterMenuShow:   Fired after the menu is shown.  You can customize the menu or dismiss it by returning false.\n  *        Event args:\n  *            grid:     Reference to the grid.\n  *            column:   Column definition.\n  *            menu:     Menu options.  Note that you can change the menu items here.\n  *\n  *    onBeforeMenuShow:   Fired before the menu is shown.  You can customize the menu or dismiss it by returning false.\n  *        Event args:\n  *            grid:     Reference to the grid.\n  *            column:   Column definition.\n  *            menu:     Menu options.  Note that you can change the menu items here.\n  *\n  *    onCommand:    Fired on menu item click for buttons with 'command' specified.\n  *        Event args:\n  *            grid:     Reference to the grid.\n  *            column:   Column definition.\n  *            command:  Button command identified.\n  *            button:   Button options.  Note that you can change the button options in your\n  *                      event handler, and the column header will be automatically updated to\n  *                      reflect them.  This is useful if you want to implement something like a\n  *                      toggle button.\n  *\n  *\n  * @param options {Object} Options:\n  *    buttonCssClass:   an extra CSS class to add to the menu button (default 'caret')\n  *    buttonImage:      a url to the menu button image\n  * @class Slick.Plugins.HeaderButtons\n  */\nexport class SlickHeaderMenu implements Plugin {\n  // --\n  // public API\n  pluginName = 'HeaderMenu' as const;\n  onAfterMenuShow = new SlickEvent<HeaderMenuCommandItemCallbackArgs>();\n  onBeforeMenuShow = new SlickEvent<HeaderMenuCommandItemCallbackArgs>();\n  onCommand = new SlickEvent<MenuCommandItemCallbackArgs>();\n\n  // --\n  // protected props\n  protected _grid!: SlickGrid;\n  protected _handler = new SlickEventHandler();\n  protected _bindingEventService = new BindingEventService();\n  protected _defaults: HeaderMenuOption = {\n    buttonCssClass: undefined,\n    buttonImage: undefined,\n    minWidth: 100,\n    autoAlign: true,\n    autoAlignOffset: 0\n  };\n  protected _options: HeaderMenuOption;\n  protected _activeHeaderColumnElm?: HTMLDivElement | null;\n  protected _menuElm?: HTMLDivElement | null;\n\n  constructor(options: Partial<HeaderMenuOption>) {\n    this._options = Utils.extend(true, {}, this._defaults, options);\n  }\n\n  init(grid: SlickGrid) {\n    this._grid = grid;\n    this._handler\n      .subscribe(this._grid.onHeaderCellRendered, this.handleHeaderCellRendered.bind(this))\n      .subscribe(this._grid.onBeforeHeaderCellDestroy, this.handleBeforeHeaderCellDestroy.bind(this));\n\n    // Force the grid to re-render the header now that the events are hooked up.\n    this._grid.setColumns(this._grid.getColumns());\n\n    // Hide the menu on outside click.\n    this._bindingEventService.bind(document.body, 'mousedown', this.handleBodyMouseDown.bind(this) as EventListener);\n  }\n\n  setOptions(newOptions: Partial<HeaderMenuOption>) {\n    this._options = Utils.extend(true, {}, this._options, newOptions);\n  }\n\n  protected getGridUidSelector() {\n    const gridUid = this._grid.getUID() || '';\n    return gridUid ? `.${gridUid}` : '';\n  }\n\n  destroy() {\n    this._handler.unsubscribeAll();\n    this._bindingEventService.unbindAll();\n    this._menuElm = this._menuElm || document.body.querySelector(`.slick-header-menu${this.getGridUidSelector()}`);\n    this._menuElm?.remove();\n    this._activeHeaderColumnElm = undefined;\n  }\n\n  protected handleBodyMouseDown(e: DOMEvent<HTMLElement>) {\n    if ((this._menuElm !== e.target && !this._menuElm?.contains(e.target)) || e.target.className === 'close') {\n      this.hideMenu();\n    }\n  }\n\n  hideMenu() {\n    if (this._menuElm) {\n      this._menuElm.remove();\n      this._menuElm = undefined;\n    }\n    this._activeHeaderColumnElm?.classList.remove('slick-header-column-active');\n  }\n\n  protected handleHeaderCellRendered(_e: Event, args: OnHeaderCellRenderedEventArgs) {\n    const column = args.column;\n    const menu = column?.header?.menu as HeaderMenuItems;\n\n    if (menu) {\n      // run the override function (when defined), if the result is false it won't go further\n      if (!this.runOverrideFunctionWhenExists<typeof args>(this._options.menuUsabilityOverride, args)) {\n        return;\n      }\n\n      const elm = document.createElement('div');\n      elm.className = 'slick-header-menubutton';\n      elm.ariaLabel = 'Header Menu';\n      elm.role = 'button';\n\n      if (!this._options.buttonCssClass && !this._options.buttonImage) {\n        this._options.buttonCssClass = 'caret'; // default when nothing is provided\n      }\n\n      if (this._options.buttonCssClass) {\n        // sgi icon with mask requires inner span to work properly\n        const icon = document.createElement('span');\n        icon.classList.add(...this._options.buttonCssClass.split(' '));\n        elm.appendChild(icon);\n      }\n\n      if (this._options.buttonImage) {\n        elm.style.backgroundImage = `url(${this._options.buttonImage})`;\n      }\n\n      if (this._options.tooltip) {\n        elm.title = this._options.tooltip;\n      }\n\n      this._bindingEventService.bind(elm, 'click', ((e: MouseEvent) => this.showMenu(e, menu, args.column)) as EventListener);\n      args.node.appendChild(elm);\n    }\n  }\n\n  protected handleBeforeHeaderCellDestroy(_e: Event, args: { column: Column; node: HTMLElement; }) {\n    const column = args.column;\n\n    if (column.header?.menu) {\n      args.node.querySelectorAll('.slick-header-menubutton').forEach(elm => elm.remove());\n    }\n  }\n\n\n  protected showMenu(event: MouseEvent, menu: HeaderMenuItems, columnDef: Column) {\n    // Let the user modify the menu or cancel altogether,\n    // or provide alternative menu implementation.\n    const callbackArgs = {\n      grid: this._grid,\n      column: columnDef,\n      menu\n    } as unknown as HeaderMenuCommandItemCallbackArgs;\n    if (this.onBeforeMenuShow.notify(callbackArgs, event, this).getReturnValue() == false) {\n      return;\n    }\n\n    if (!this._menuElm) {\n      this._menuElm = document.createElement('div');\n      this._menuElm.className = 'slick-header-menu';\n      this._menuElm.role = 'menu';\n      this._menuElm.style.minWidth = `${this._options.minWidth}px`;\n      this._menuElm.setAttribute('aria-expanded', 'true');\n      const containerNode = this._grid.getContainerNode();\n      if (containerNode) {\n        containerNode.appendChild(this._menuElm);\n      }\n    }\n\n    // make sure the menu element is an empty div before adding all list of commands\n    Utils.emptyElement(this._menuElm);\n\n    // Construct the menu items.\n    for (let i = 0; i < menu.items.length; i++) {\n      const item = menu.items[i];\n\n      // run each override functions to know if the item is visible and usable\n      const isItemVisible = this.runOverrideFunctionWhenExists((item as MenuCommandItem).itemVisibilityOverride, callbackArgs);\n      const isItemUsable = this.runOverrideFunctionWhenExists((item as MenuCommandItem).itemUsabilityOverride, callbackArgs);\n\n      // if the result is not visible then there's no need to go further\n      if (!isItemVisible) {\n        continue;\n      }\n\n      // when the override is defined, we need to use its result to update the disabled property\n      // so that \"handleMenuItemCommandClick\" has the correct flag and won't trigger a command clicked event\n      if (Object.prototype.hasOwnProperty.call(item, 'itemUsabilityOverride')) {\n        (item as MenuCommandItem).disabled = isItemUsable ? false : true;\n      }\n\n      const menuItem = document.createElement('div');\n      menuItem.className = 'slick-header-menuitem';\n      menuItem.role = 'menuitem';\n\n      if ((item as MenuCommandItem).divider || item === 'divider') {\n        menuItem.classList.add('slick-header-menuitem-divider');\n        continue;\n      }\n\n      if ((item as MenuCommandItem).disabled) {\n        menuItem.classList.add('slick-header-menuitem-disabled');\n      }\n\n      if ((item as MenuCommandItem).hidden) {\n        menuItem.classList.add('slick-header-menuitem-hidden');\n      }\n\n      if ((item as MenuCommandItem).cssClass) {\n        menuItem.classList.add(...item.cssClass!.split(' '));\n      }\n\n      if ((item as MenuCommandItem).tooltip) {\n        menuItem.title = (item as MenuCommandItem).tooltip || '';\n      }\n\n      const iconElm = document.createElement('div');\n      iconElm.className = 'slick-header-menuicon';\n      menuItem.appendChild(iconElm);\n\n      if ((item as MenuCommandItem).iconCssClass) {\n        iconElm.classList.add(...(item as MenuCommandItem).iconCssClass!.split(' '));\n      }\n\n      if ((item as MenuCommandItem).iconImage) {\n        iconElm.style.backgroundImage = 'url(' + (item as MenuCommandItem).iconImage + ')';\n      }\n\n      const textElm = document.createElement('span');\n      textElm.className = 'slick-header-menucontent';\n      textElm.textContent = (item as MenuCommandItem).title || '';\n      menuItem.appendChild(textElm);\n\n      if ((item as MenuCommandItem).textCssClass) {\n        textElm.classList.add(...(item as MenuCommandItem).textCssClass!.split(' '));\n      }\n\n      this._menuElm.appendChild(menuItem);\n      this._bindingEventService.bind(menuItem, 'click', this.handleMenuItemClick.bind(this, item, columnDef) as EventListener);\n    }\n\n    const buttonElm = event.target as HTMLButtonElement;\n    const btnOffset = Utils.offset(buttonElm);\n    const menuOffset = Utils.offset(this._menuElm);\n    let leftPos = btnOffset?.left ?? 0;\n\n\n    // when auto-align is set, it will calculate whether it has enough space in the viewport to show the drop menu on the right (default)\n    // if there isn't enough space on the right, it will automatically align the drop menu to the left\n    // to simulate an align left, we actually need to know the width of the drop menu\n    if (this._options.autoAlign) {\n      const gridPos = this._grid.getGridPosition();\n      if (leftPos + this._menuElm.offsetWidth >= gridPos.width) {\n        leftPos = leftPos + buttonElm.clientWidth - this._menuElm.clientWidth + (this._options.autoAlignOffset || 0);\n      }\n    }\n\n    this._menuElm.style.top = `${(buttonElm.clientHeight ?? btnOffset?.top ?? 0 + (this._options?.menuOffsetTop ?? 0))}px`;\n    this._menuElm.style.left = `${leftPos - (menuOffset?.left ?? 0)}px`;\n\n    // Mark the header as active to keep the highlighting.\n    this._activeHeaderColumnElm = this._menuElm.closest('.slick-header-column');\n    if (this._activeHeaderColumnElm) {\n      this._activeHeaderColumnElm.classList.add('slick-header-column-active');\n    }\n\n    if (this.onAfterMenuShow.notify(callbackArgs, event, this).getReturnValue() == false) {\n      return;\n    }\n\n    // Stop propagation so that it doesn't register as a header click event.\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  protected handleMenuItemClick(item: MenuCommandItem | 'divider', columnDef: Column, e: DOMEvent<HTMLDivElement>): boolean | void {\n    const command = (item as MenuCommandItem).command || '';\n\n    if ((item as MenuCommandItem).disabled || (item as MenuCommandItem).divider || item === 'divider') {\n      return false;\n    }\n\n    if (command !== null && command !== '') {\n      const callbackArgs = {\n        grid: this._grid,\n        column: columnDef,\n        command,\n        item,\n      };\n      this.onCommand.notify(callbackArgs, e, this);\n\n      // execute action callback when defined\n      if (typeof item.action === 'function') {\n        item.action.call(this, e, callbackArgs);\n      }\n    }\n\n    if (!e.defaultPrevented) {\n      this.hideMenu();\n    }\n\n    // Stop propagation so that it doesn't register as a header click event.\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  /**\n   * Method that user can pass to override the default behavior.\n   * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\n   * @param overrideFn: override function callback\n   * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\n   */\n  protected runOverrideFunctionWhenExists<T = any>(overrideFn: ((args: any) => boolean) | undefined, args: T): boolean {\n    if (typeof overrideFn === 'function') {\n      return overrideFn.call(this, args);\n    }\n    return true;\n  }\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      Plugins: {\n        HeaderMenu: SlickHeaderMenu\n      }\n    }\n  });\n}\n\n"],
  "mappings": "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",
  "names": []
}
