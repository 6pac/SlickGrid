{
  "version": 3,
  "sources": ["../../../src/plugins/slick.headermenu.js"],
  "sourcesContent": ["import { BindingEventService as BindingEventService_, Event as SlickEvent_, EventHandler as EventHandler_, Utils as Utils_ } from '../slick.core';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : EventHandler_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n/***\n   * A plugin to add drop-down menus to column headers.\n   *\n   * USAGE:\n   *\n   * Add the plugin .js & .css files and register it with the grid.\n   *\n   * To specify a menu in a column header, extend the column definition like so:\n   *\n   *   var columns = [\n   *     {\n   *       id: 'myColumn',\n   *       name: 'My column',\n   *\n   *       // This is the relevant part\n   *       header: {\n   *          menu: {\n   *              items: [\n   *                {\n   *                  // menu item options\n   *                },\n   *                {\n   *                  // menu item options\n   *                }\n   *              ]\n   *          }\n   *       }\n   *     }\n   *   ];\n   *\n   *\n   * Available menu options:\n   *    autoAlign:              Auto-align drop menu to the left when not enough viewport space to show on the right\n   *    autoAlignOffset:        When drop menu is aligned to the left, it might not be perfectly aligned with the header menu icon, if that is the case you can add an offset (positive/negative number to move right/left)\n   *    buttonCssClass:         an extra CSS class to add to the menu button (default 'caret')\n   *    buttonImage:            a url to the menu button image\n   *    menuUsabilityOverride:  Callback method that user can override the default behavior of enabling/disabling the menu from being usable (must be combined with a custom formatter)\n   *    minWidth:               Minimum width that the drop menu will have\n   *\n   *\n   * Available menu item options:\n   *    action:                   Optionally define a callback function that gets executed when item is chosen (and/or use the onCommand event)\n   *    title:                    Menu item text.\n   *    divider:                  Whether the current item is a divider, not an actual command.\n   *    disabled:                 Whether the item/command is disabled.\n   *    hidden:                   Whether the item/command is hidden.\n   *    tooltip:                  Item tooltip.\n   *    command:                  A command identifier to be passed to the onCommand event handlers.\n   *    cssClass:                 A CSS class to be added to the menu item container.\n   *    iconCssClass:             A CSS class to be added to the menu item icon.\n   *    iconImage:                A url to the icon image.\n   *    textCssClass:             A CSS class to be added to the menu item text.\n   *    itemVisibilityOverride:   Callback method that user can override the default behavior of showing/hiding an item from the list\n   *    itemUsabilityOverride:    Callback method that user can override the default behavior of enabling/disabling an item from the list\n   *\n   *\n   * The plugin exposes the following events:\n\n   *    onAfterMenuShow:   Fired after the menu is shown.  You can customize the menu or dismiss it by returning false.\n   *        Event args:\n   *            grid:     Reference to the grid.\n   *            column:   Column definition.\n   *            menu:     Menu options.  Note that you can change the menu items here.\n   *\n   *    onBeforeMenuShow:   Fired before the menu is shown.  You can customize the menu or dismiss it by returning false.\n   *        Event args:\n   *            grid:     Reference to the grid.\n   *            column:   Column definition.\n   *            menu:     Menu options.  Note that you can change the menu items here.\n   *\n   *    onCommand:    Fired on menu item click for buttons with 'command' specified.\n   *        Event args:\n   *            grid:     Reference to the grid.\n   *            column:   Column definition.\n   *            command:  Button command identified.\n   *            button:   Button options.  Note that you can change the button options in your\n   *                      event handler, and the column header will be automatically updated to\n   *                      reflect them.  This is useful if you want to implement something like a\n   *                      toggle button.\n   *\n   *\n   * @param options {Object} Options:\n   *    buttonCssClass:   an extra CSS class to add to the menu button (default 'caret')\n   *    buttonImage:      a url to the menu button image\n   * @class Slick.Plugins.HeaderButtons\n   * @constructor\n   */\nexport function HeaderMenu(options) {\n    var _grid;\n    var _self = this;\n  var _handler = new EventHandler();\n  var _bindingEventService = new BindingEventService();\n    var _defaults = {\n      buttonCssClass: null,\n      buttonImage: null,\n      minWidth: 100,\n      autoAlign: true,\n      autoAlignOffset: 0\n    };\n    var _activeHeaderColumnElm;\n    var _menuElm;\n\n    function init(grid) {\n      options = Utils.extend(true, {}, _defaults, options);\n      _grid = grid;\n      _handler\n        .subscribe(_grid.onHeaderCellRendered, handleHeaderCellRendered)\n        .subscribe(_grid.onBeforeHeaderCellDestroy, handleBeforeHeaderCellDestroy);\n\n      // Force the grid to re-render the header now that the events are hooked up.\n      _grid.setColumns(_grid.getColumns());\n\n      // Hide the menu on outside click.\n      _bindingEventService.bind(document.body, 'mousedown', handleBodyMouseDown.bind(this));\n    }\n\n    function setOptions(newOptions) {\n      options = Utils.extend(true, {}, options, newOptions);\n    }\n\n    function getGridUidSelector() {\n      const gridUid = _grid.getUID() || '';\n      return gridUid ? `.${gridUid}` : '';\n    }\n\n    function destroy() {\n      _handler.unsubscribeAll();\n      _bindingEventService.unbindAll();\n      _menuElm = _menuElm || document.body.querySelector(`.slick-header-menu${getGridUidSelector()}`);\n      _menuElm && _menuElm.remove();\n      _activeHeaderColumnElm = undefined;\n    }\n\n    function handleBodyMouseDown(e) {\n      if ((_menuElm !== e.target && !(_menuElm && _menuElm.contains(e.target))) || e.target.className === 'close') {\n        hideMenu();\n      }\n    }\n\n    function hideMenu() {\n      if (_menuElm) {\n        _menuElm.remove();\n        _menuElm = undefined;\n      }\n      _activeHeaderColumnElm && _activeHeaderColumnElm.classList.remove('slick-header-column-active');\n    }\n\n    function handleHeaderCellRendered(e, args) {\n      var column = args.column;\n      var menu = column.header && column.header.menu;\n\n      if (menu) {\n        // run the override function (when defined), if the result is false it won't go further\n        if (!runOverrideFunctionWhenExists(options.menuUsabilityOverride, args)) {\n          return;\n        }\n\n        const elm = document.createElement('div');\n        elm.className = \"slick-header-menubutton\";\n        elm.ariaLabel = 'Header Menu';\n        elm.role = 'button';\n\n        if (!options.buttonCssClass && !options.buttonImage) {\n          options.buttonCssClass = 'caret'; // default when nothing is provided\n        }\n\n        if (options.buttonCssClass) {\n          // sgi icon with mask requires inner span to work properly\n          const icon = document.createElement('span');\n          icon.classList.add(...options.buttonCssClass.split(' '));\n          elm.appendChild(icon);\n        }\n\n        if (options.buttonImage) {\n          elm.style.backgroundImage = \"url(\" + options.buttonImage + \")\";\n        }\n\n        if (options.tooltip) {\n          elm.title = options.tooltip;\n        }\n\n        _bindingEventService.bind(elm, 'click', (e) => showMenu(e, menu, args.column));\n        args.node.appendChild(elm);\n      }\n    }\n\n    function handleBeforeHeaderCellDestroy(e, args) {\n      var column = args.column;\n\n      if (column.header && column.header.menu) {\n        args.node.querySelectorAll('.slick-header-menubutton').forEach(elm => elm.remove());\n      }\n    }\n\n\n    function showMenu(event, menu, columnDef) {\n      // Let the user modify the menu or cancel altogether,\n      // or provide alternative menu implementation.\n      var callbackArgs = {\n        \"grid\": _grid,\n        \"column\": columnDef,\n        \"menu\": menu\n      };\n      if (_self.onBeforeMenuShow.notify(callbackArgs, event, _self).getReturnValue() == false) {\n        return;\n      }\n\n      if (!_menuElm) {\n        _menuElm = document.createElement('div');\n        _menuElm.className = 'slick-header-menu';\n        _menuElm.role = 'menu';\n        _menuElm.style.minWidth = `${options.minWidth}px`;\n        _menuElm.setAttribute('aria-expanded', 'true');\n        const containerNode = _grid.getContainerNode();\n        if (containerNode) {\n          containerNode.appendChild(_menuElm);\n        }\n      }\n\n      // make sure the menu element is an empty div before adding all list of commands\n      Utils.emptyElement(_menuElm);\n\n      // Construct the menu items.\n      for (var i = 0; i < menu.items.length; i++) {\n        var item = menu.items[i];\n\n        // run each override functions to know if the item is visible and usable\n        var isItemVisible = runOverrideFunctionWhenExists(item.itemVisibilityOverride, callbackArgs);\n        var isItemUsable = runOverrideFunctionWhenExists(item.itemUsabilityOverride, callbackArgs);\n\n        // if the result is not visible then there's no need to go further\n        if (!isItemVisible) {\n          continue;\n        }\n\n        // when the override is defined, we need to use its result to update the disabled property\n        // so that \"handleMenuItemCommandClick\" has the correct flag and won't trigger a command clicked event\n        if (Object.prototype.hasOwnProperty.call(item, \"itemUsabilityOverride\")) {\n          item.disabled = isItemUsable ? false : true;\n        }\n\n        const menuItem = document.createElement('div');\n        menuItem.className = 'slick-header-menuitem';\n        menuItem.role = 'menuitem';\n\n        if (item.divider || item === \"divider\") {\n          menuItem.classList.add(\"slick-header-menuitem-divider\");\n          continue;\n        }\n\n        if (item.disabled) {\n          menuItem.classList.add(\"slick-header-menuitem-disabled\");\n        }\n\n        if (item.hidden) {\n          menuItem.classList.add(\"slick-header-menuitem-hidden\");\n        }\n\n        if (item.cssClass) {\n          menuItem.classList.add(...item.cssClass.split(' '));\n        }\n\n        if (item.tooltip) {\n          menuItem.title = item.tooltip;\n        }\n\n        const iconElm = document.createElement('div');\n        iconElm.className = 'slick-header-menuicon';\n        menuItem.appendChild(iconElm);\n\n        if (item.iconCssClass) {\n          iconElm.classList.add(...item.iconCssClass.split(' '));\n        }\n\n        if (item.iconImage) {\n          iconElm.style.backgroundImage = \"url(\" + item.iconImage + \")\";\n        }\n\n        const textElm = document.createElement('span');\n        textElm.className = 'slick-header-menucontent';\n        textElm.textContent = item.title;\n        menuItem.appendChild(textElm);\n\n        if (item.textCssClass) {\n          textElm.classList.add(...item.textCssClass.split(' '));\n        }\n\n        _menuElm.appendChild(menuItem);\n        _bindingEventService.bind(menuItem, 'click', handleMenuItemClick.bind(this, item, columnDef));\n      }\n\n      const buttonElm = event.target;\n      const btnOffset = Utils.offset(buttonElm);\n      const menuOffset = Utils.offset(_menuElm);\n      let leftPos = (btnOffset && btnOffset.left) || 0;\n\n\n      // when auto-align is set, it will calculate whether it has enough space in the viewport to show the drop menu on the right (default)\n      // if there isn't enough space on the right, it will automatically align the drop menu to the left\n      // to simulate an align left, we actually need to know the width of the drop menu\n      if (options.autoAlign) {\n        const gridPos = _grid.getGridPosition();\n        if (leftPos + _menuElm.offsetWidth >= gridPos.width) {\n          leftPos = leftPos + buttonElm.clientWidth - _menuElm.clientWidth + (options.autoAlignOffset || 0);\n        }\n      }\n\n      _menuElm.style.top = `${(buttonElm.clientHeight || (btnOffset && btnOffset.top) || 0) + (options && options.menuOffsetTop || 0)}px`;\n      _menuElm.style.left = `${leftPos - menuOffset.left}px`;\n\n      // Mark the header as active to keep the highlighting.\n      _activeHeaderColumnElm = _menuElm.closest('.slick-header-column');\n      if (_activeHeaderColumnElm) {\n        _activeHeaderColumnElm.classList.add('slick-header-column-active');\n      }\n\n      if (_self.onAfterMenuShow.notify(callbackArgs, event, _self).getReturnValue() == false) {\n        return;\n      }\n\n      // Stop propagation so that it doesn't register as a header click event.\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    function handleMenuItemClick(item, columnDef, e) {\n      const command = item.command || '';\n\n      if (item.disabled || item.divider || item === \"divider\") {\n        return false;\n      }\n\n      if (command != null && command !== '') {\n        var callbackArgs = {\n          \"grid\": _grid,\n          \"column\": columnDef,\n          \"command\": command,\n          \"item\": item\n        };\n        _self.onCommand.notify(callbackArgs, e, _self);\n\n        // execute action callback when defined\n        if (typeof item.action === \"function\") {\n          item.action.call(this, e, callbackArgs);\n        }\n      }\n\n      if (!e.defaultPrevented) {\n        hideMenu();\n      }\n\n      // Stop propagation so that it doesn't register as a header click event.\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n    /**\n     * Method that user can pass to override the default behavior.\n     * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\n     * @param overrideFn: override function callback\n     * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\n     */\n    function runOverrideFunctionWhenExists(overrideFn, args) {\n      if (typeof overrideFn === 'function') {\n        return overrideFn.call(this, args);\n      }\n      return true;\n    }\n\n  Utils.extend(this, {\n      \"init\": init,\n      \"destroy\": destroy,\n      \"pluginName\": \"HeaderMenu\",\n      \"setOptions\": setOptions,\n\n    \"onAfterMenuShow\": new SlickEvent(),\n    \"onBeforeMenuShow\": new SlickEvent(),\n    \"onCommand\": new SlickEvent()\n    });\n  }\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      Plugins: {\n        HeaderMenu\n      }\n    }\n  });\n}\n\n"],
  "mappings": "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",
  "names": ["e"]
}
