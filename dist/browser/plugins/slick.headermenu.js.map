{
  "version": 3,
  "sources": ["../../../src/plugins/slick.headermenu.ts"],
  "sourcesContent": ["import {\r\n  BindingEventService as BindingEventService_,\r\n  Event as SlickEvent_,\r\n  type SlickEventData,\r\n  SlickEventHandler as SlickEventHandler_,\r\n  Utils as Utils_\r\n} from '../slick.core.js';\r\nimport type {\r\n  Column,\r\n  DOMEvent,\r\n  DOMMouseOrTouchEvent,\r\n  HeaderMenuCommandItemCallbackArgs,\r\n  HeaderMenuItems,\r\n  HeaderMenuOption,\r\n  HeaderMenuCommandItem,\r\n  MenuCommandItemCallbackArgs,\r\n  SlickPlugin,\r\n  OnHeaderCellRenderedEventArgs,\r\n} from '../models/index.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst SlickEventHandler = IIFE_ONLY ? Slick.EventHandler : SlickEventHandler_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/**\r\n * A plugin to add drop-down menus to column headers.\r\n *\r\n * USAGE:\r\n *\r\n * Add the plugin .js & .css files and register it with the grid.\r\n *\r\n * To specify a menu in a column header, extend the column definition like so:\r\n *\r\n *   let columns = [\r\n *     {\r\n *       id: 'myColumn',\r\n *       name: 'My column',\r\n *\r\n *       // This is the relevant part\r\n *       header: {\r\n *          menu: {\r\n *              items: [\r\n *                {\r\n *                  // menu item options\r\n *                },\r\n *                {\r\n *                  // menu item options\r\n *                }\r\n *              ]\r\n *          }\r\n *       }\r\n *     }\r\n *   ];\r\n *\r\n *\r\n * Available menu options:\r\n *    autoAlign:              Auto-align drop menu to the left when not enough viewport space to show on the right\r\n *    autoAlignOffset:        When drop menu is aligned to the left, it might not be perfectly aligned with the header menu icon, if that is the case you can add an offset (positive/negative number to move right/left)\r\n *    buttonCssClass:         an extra CSS class to add to the menu button (default 'caret')\r\n *    buttonImage:            a url to the menu button image\r\n *    menuUsabilityOverride:  Callback method that user can override the default behavior of enabling/disabling the menu from being usable (must be combined with a custom formatter)\r\n *    minWidth:               Minimum width that the drop menu will have\r\n *    subItemChevronClass:        CSS class that can be added on the right side of a sub-item parent (typically a chevron-right icon)\r\n *    subMenuOpenByEvent:         defaults to \"mouseover\", what event type shoud we use to open sub-menu(s), 2 options are available: \"mouseover\" or \"click\"\r\n *\r\n *\r\n * Available menu item options:\r\n *    action:                   Optionally define a callback function that gets executed when item is chosen (and/or use the onCommand event)\r\n *    title:                    Menu item text.\r\n *    divider:                  Whether the current item is a divider, not an actual command.\r\n *    disabled:                 Whether the item/command is disabled.\r\n *    hidden:                   Whether the item/command is hidden.\r\n *    tooltip:                  Item tooltip.\r\n *    command:                  A command identifier to be passed to the onCommand event handlers.\r\n *    cssClass:                 A CSS class to be added to the menu item container.\r\n *    iconCssClass:             A CSS class to be added to the menu item icon.\r\n *    iconImage:                A url to the icon image.\r\n *    textCssClass:             A CSS class to be added to the menu item text.\r\n *    itemVisibilityOverride:   Callback method that user can override the default behavior of showing/hiding an item from the list\r\n *    itemUsabilityOverride:    Callback method that user can override the default behavior of enabling/disabling an item from the list\r\n *\r\n *\r\n * The plugin exposes the following events:\r\n\r\n  *    onAfterMenuShow:   Fired after the menu is shown.  You can customize the menu or dismiss it by returning false.\r\n  *        Event args:\r\n  *            grid:     Reference to the grid.\r\n  *            column:   Column definition.\r\n  *            menu:     Menu options.  Note that you can change the menu items here.\r\n  *\r\n  *    onBeforeMenuShow:   Fired before the menu is shown.  You can customize the menu or dismiss it by returning false.\r\n  *        Event args:\r\n  *            grid:     Reference to the grid.\r\n  *            column:   Column definition.\r\n  *            menu:     Menu options.  Note that you can change the menu items here.\r\n  *\r\n  *    onCommand:    Fired on menu item click for buttons with 'command' specified.\r\n  *        Event args:\r\n  *            grid:     Reference to the grid.\r\n  *            column:   Column definition.\r\n  *            command:  Button command identified.\r\n  *            button:   Button options.  Note that you can change the button options in your\r\n  *                      event handler, and the column header will be automatically updated to\r\n  *                      reflect them.  This is useful if you want to implement something like a\r\n  *                      toggle button.\r\n  *\r\n  *\r\n  * @param options {Object} Options:\r\n  *    buttonCssClass:   an extra CSS class to add to the menu button (default 'caret')\r\n  *    buttonImage:      a url to the menu button image\r\n  * @class Slick.Plugins.HeaderButtons\r\n  */\r\nexport class SlickHeaderMenu implements SlickPlugin {\r\n  // --\r\n  // public API\r\n  pluginName = 'HeaderMenu' as const;\r\n  onAfterMenuShow = new SlickEvent<HeaderMenuCommandItemCallbackArgs>('onAfterMenuShow');\r\n  onBeforeMenuShow = new SlickEvent<HeaderMenuCommandItemCallbackArgs>('onBeforeMenuShow');\r\n  onCommand = new SlickEvent<MenuCommandItemCallbackArgs>('onCommand');\r\n\r\n  // --\r\n  // protected props\r\n  protected _grid!: SlickGrid;\r\n  protected _gridUid = '';\r\n  protected _handler = new SlickEventHandler();\r\n  protected _bindingEventService = new BindingEventService();\r\n  protected _defaults: HeaderMenuOption = {\r\n    buttonCssClass: undefined,\r\n    buttonImage: undefined,\r\n    minWidth: 100,\r\n    autoAlign: true,\r\n    autoAlignOffset: 0,\r\n    subMenuOpenByEvent: 'mouseover',\r\n  };\r\n  protected _options: HeaderMenuOption;\r\n  protected _activeHeaderColumnElm?: HTMLDivElement | null;\r\n  protected _menuElm?: HTMLDivElement | null;\r\n  protected _subMenuParentId = '';\r\n\r\n  constructor(options: Partial<HeaderMenuOption>) {\r\n    this._options = Utils.extend(true, {}, options, this._defaults);\r\n  }\r\n\r\n  init(grid: SlickGrid) {\r\n    this._grid = grid;\r\n    this._gridUid = grid?.getUID() || '';\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n    this._handler\r\n      .subscribe(this._grid.onHeaderCellRendered, this.handleHeaderCellRendered.bind(this))\r\n      .subscribe(this._grid.onBeforeHeaderCellDestroy, this.handleBeforeHeaderCellDestroy.bind(this));\r\n\r\n    // Force the grid to re-render the header now that the events are hooked up.\r\n    this._grid.setColumns(this._grid.getColumns());\r\n\r\n    // Hide the menu on outside click.\r\n    this._bindingEventService.bind(document.body, 'click', this.handleBodyMouseDown.bind(this) as EventListener);\r\n  }\r\n\r\n  setOptions(newOptions: Partial<HeaderMenuOption>) {\r\n    this._options = Utils.extend(true, {}, this._options, newOptions);\r\n  }\r\n\r\n  protected getGridUidSelector() {\r\n    const gridUid = this._grid.getUID() || '';\r\n    return gridUid ? `.${gridUid}` : '';\r\n  }\r\n\r\n  destroy() {\r\n    this._handler.unsubscribeAll();\r\n    this._bindingEventService.unbindAll();\r\n    this._menuElm = this._menuElm || document.body.querySelector(`.slick-header-menu${this.getGridUidSelector()}`);\r\n    this._menuElm?.remove();\r\n    this._activeHeaderColumnElm = undefined;\r\n  }\r\n\r\n  destroyAllMenus() {\r\n    this.destroySubMenus();\r\n\r\n    // remove all parent menu listeners before removing them from the DOM\r\n    this._bindingEventService.unbindAll('parent-menu');\r\n    document.querySelectorAll(`.slick-header-menu${this.getGridUidSelector()}`)\r\n      .forEach(subElm => subElm.remove());\r\n  }\r\n\r\n  /** Close and destroy all previously opened sub-menus */\r\n  destroySubMenus() {\r\n    this._bindingEventService.unbindAll('sub-menu');\r\n    document.querySelectorAll(`.slick-header-menu.slick-submenu${this.getGridUidSelector()}`)\r\n      .forEach(subElm => subElm.remove());\r\n  }\r\n\r\n  protected handleBodyMouseDown(e: DOMEvent<HTMLElement>) {\r\n    // did we click inside the menu or any of its sub-menu(s)\r\n    let isMenuClicked = false;\r\n    if (this._menuElm?.contains(e.target)) {\r\n      isMenuClicked = true;\r\n    }\r\n    if (!isMenuClicked) {\r\n      document\r\n        .querySelectorAll(`.slick-header-menu.slick-submenu${this.getGridUidSelector()}`)\r\n        .forEach(subElm => {\r\n          if (subElm.contains(e.target)) {\r\n            isMenuClicked = true;\r\n          }\r\n        });\r\n    }\r\n\r\n    if (this._menuElm !== e.target && !isMenuClicked && !e.defaultPrevented || e.target.className === 'close') {\r\n      this.hideMenu();\r\n    }\r\n  }\r\n\r\n  hideMenu() {\r\n    if (this._menuElm) {\r\n      this._menuElm.remove();\r\n      this._menuElm = undefined;\r\n    }\r\n    this._activeHeaderColumnElm?.classList.remove('slick-header-column-active');\r\n    this.destroySubMenus();\r\n  }\r\n\r\n  protected handleHeaderCellRendered(_e: SlickEventData, args: OnHeaderCellRenderedEventArgs) {\r\n    const column = args.column;\r\n    const menu = column?.header?.menu as HeaderMenuItems;\r\n\r\n    if (menu?.items) {\r\n      console.warn('[SlickGrid] Header Menu \"items\" property was deprecated in favor of \"commandItems\" to align with all other Menu plugins.');\r\n    }\r\n\r\n    if (menu) {\r\n      // run the override function (when defined), if the result is false it won't go further\r\n      if (!this.runOverrideFunctionWhenExists<typeof args>(this._options.menuUsabilityOverride, args)) {\r\n        return;\r\n      }\r\n\r\n      const elm = document.createElement('div');\r\n      elm.className = 'slick-header-menubutton';\r\n      elm.ariaLabel = 'Header Menu';\r\n      elm.role = 'button';\r\n\r\n      if (!this._options.buttonCssClass && !this._options.buttonImage) {\r\n        this._options.buttonCssClass = 'caret'; // default when nothing is provided\r\n      }\r\n\r\n      if (this._options.buttonCssClass) {\r\n        // sgi icon with mask requires inner span to work properly\r\n        const icon = document.createElement('span');\r\n        icon.classList.add(...Utils.classNameToList(this._options.buttonCssClass));\r\n        elm.appendChild(icon);\r\n      }\r\n\r\n      if (this._options.buttonImage) {\r\n        elm.style.backgroundImage = `url(${this._options.buttonImage})`;\r\n      }\r\n\r\n      if (this._options.tooltip) {\r\n        elm.title = this._options.tooltip;\r\n      }\r\n\r\n      this._bindingEventService.bind(elm, 'click', ((e: DOMMouseOrTouchEvent<HTMLDivElement>) => {\r\n        this.destroyAllMenus(); // make there's only 1 parent menu opened at a time\r\n        this.createParentMenu(e, menu, args.column);\r\n      }) as EventListener);\r\n      args.node.appendChild(elm);\r\n    }\r\n  }\r\n\r\n  protected handleBeforeHeaderCellDestroy(_e: SlickEventData, args: { column: Column; node: HTMLElement; }) {\r\n    const column = args.column;\r\n\r\n    if (column.header?.menu) {\r\n      args.node.querySelectorAll('.slick-header-menubutton').forEach(elm => elm.remove());\r\n    }\r\n  }\r\n\r\n  protected addSubMenuTitleWhenExists(item: HeaderMenuCommandItem | 'divider', commandMenuElm: HTMLDivElement) {\r\n    if (item !== 'divider' && item?.subMenuTitle) {\r\n      const subMenuTitleElm = document.createElement('div');\r\n      subMenuTitleElm.className = 'slick-menu-title';\r\n      subMenuTitleElm.textContent = item.subMenuTitle as string;\r\n      const subMenuTitleClass = item.subMenuTitleCssClass as string;\r\n      if (subMenuTitleClass) {\r\n        subMenuTitleElm.classList.add(...Utils.classNameToList(subMenuTitleClass));\r\n      }\r\n\r\n      commandMenuElm.appendChild(subMenuTitleElm);\r\n    }\r\n  }\r\n\r\n  protected createParentMenu(event: DOMMouseOrTouchEvent<HTMLDivElement>, menu: HeaderMenuItems, columnDef: Column) {\r\n    // Let the user modify the menu or cancel altogether,\r\n    // or provide alternative menu implementation.\r\n    const callbackArgs = {\r\n      grid: this._grid,\r\n      column: columnDef,\r\n      menu\r\n    } as unknown as HeaderMenuCommandItemCallbackArgs;\r\n    if (this.onBeforeMenuShow.notify(callbackArgs, event, this).getReturnValue() === false) {\r\n      return;\r\n    }\r\n\r\n    // create 1st parent menu container & reposition it\r\n    this._menuElm = this.createMenu((menu.commandItems || menu.items) as Array<HeaderMenuCommandItem | 'divider'>, columnDef);\r\n    const containerNode = this._grid.getContainerNode();\r\n    if (containerNode) {\r\n      containerNode.appendChild(this._menuElm);\r\n    }\r\n    this.repositionMenu(event, this._menuElm);\r\n\r\n    if (this.onAfterMenuShow.notify(callbackArgs, event, this).getReturnValue() === false) {\r\n      return;\r\n    }\r\n\r\n    // Stop propagation so that it doesn't register as a header click event.\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n  }\r\n\r\n  protected createMenu(commandItems: Array<HeaderMenuCommandItem | 'divider'>, columnDef: Column, level = 0, item?: HeaderMenuCommandItem | 'divider') {\r\n    // to avoid having multiple sub-menu trees opened,\r\n    // we need to somehow keep trace of which parent menu the tree belongs to\r\n    // and we should keep ref of only the first sub-menu parent, we can use the command name (remove any whitespaces though)\r\n    const isSubMenu = level > 0;\r\n    const subMenuCommand = (item as HeaderMenuCommandItem)?.command;\r\n    let subMenuId = (level === 1 && subMenuCommand) ? subMenuCommand.replaceAll(' ', '') : '';\r\n    if (subMenuId) {\r\n      this._subMenuParentId = subMenuId;\r\n    }\r\n    if (isSubMenu) {\r\n      subMenuId = this._subMenuParentId;\r\n    }\r\n\r\n    // return menu/sub-menu if it's already opened unless we are on different sub-menu tree if so close them all\r\n    const menuClasses = `slick-header-menu slick-menu-level-${level} ${this._gridUid}`;\r\n    const bodyMenuElm = document.body.querySelector<HTMLDivElement>(`.slick-header-menu.slick-menu-level-${level}${this.getGridUidSelector()}`);\r\n    if (bodyMenuElm) {\r\n      if (bodyMenuElm.dataset.subMenuParent === subMenuId) {\r\n        return bodyMenuElm;\r\n      }\r\n      this.destroySubMenus();\r\n    }\r\n\r\n    const menuElm = document.createElement('div');\r\n    menuElm.className = menuClasses;\r\n    if (level > 0) {\r\n      menuElm.classList.add('slick-submenu');\r\n      if (subMenuId) {\r\n        menuElm.dataset.subMenuParent = subMenuId;\r\n      }\r\n    }\r\n    menuElm.classList.add(this._gridUid);\r\n    menuElm.role = 'menu';\r\n    menuElm.ariaLabel = level > 1 ? 'SubMenu' : 'Header Menu';\r\n    menuElm.style.minWidth = `${this._options.minWidth}px`;\r\n    menuElm.setAttribute('aria-expanded', 'true');\r\n\r\n    const callbackArgs = {\r\n      grid: this._grid,\r\n      column: columnDef,\r\n      menu: { items: commandItems }\r\n    } as unknown as HeaderMenuCommandItemCallbackArgs;\r\n\r\n    // when creating sub-menu add its sub-menu title when exists\r\n    if (item && level > 0) {\r\n      this.addSubMenuTitleWhenExists(item, menuElm); // add sub-menu title when exists\r\n    }\r\n\r\n    // Construct the menu items.\r\n    for (let i = 0; i < commandItems.length; i++) {\r\n      let addClickListener = true;\r\n      const item = commandItems[i];\r\n\r\n      // run each override functions to know if the item is visible and usable\r\n      const isItemVisible = this.runOverrideFunctionWhenExists((item as HeaderMenuCommandItem).itemVisibilityOverride, callbackArgs);\r\n      const isItemUsable = this.runOverrideFunctionWhenExists((item as HeaderMenuCommandItem).itemUsabilityOverride, callbackArgs);\r\n\r\n      // if the result is not visible then there's no need to go further\r\n      if (!isItemVisible) {\r\n        continue;\r\n      }\r\n\r\n      // when the override is defined, we need to use its result to update the disabled property\r\n      // so that \"handleMenuItemCommandClick\" has the correct flag and won't trigger a command clicked event\r\n      if (Object.prototype.hasOwnProperty.call(item, 'itemUsabilityOverride')) {\r\n        (item as HeaderMenuCommandItem).disabled = isItemUsable ? false : true;\r\n      }\r\n\r\n      const menuItemElm = document.createElement('div');\r\n      menuItemElm.className = 'slick-header-menuitem';\r\n      menuItemElm.role = 'menuitem';\r\n\r\n      if ((item as HeaderMenuCommandItem).divider || item === 'divider') {\r\n        menuItemElm.classList.add('slick-header-menuitem-divider');\r\n        addClickListener = false;\r\n      }\r\n\r\n      if ((item as HeaderMenuCommandItem).disabled) {\r\n        menuItemElm.classList.add('slick-header-menuitem-disabled');\r\n      }\r\n\r\n      if ((item as HeaderMenuCommandItem).hidden) {\r\n        menuItemElm.classList.add('slick-header-menuitem-hidden');\r\n      }\r\n\r\n      if ((item as HeaderMenuCommandItem).cssClass) {\r\n        menuItemElm.classList.add(...Utils.classNameToList((item as HeaderMenuCommandItem).cssClass));\r\n      }\r\n\r\n      if ((item as HeaderMenuCommandItem).tooltip) {\r\n        menuItemElm.title = (item as HeaderMenuCommandItem).tooltip || '';\r\n      }\r\n\r\n      const iconElm = document.createElement('div');\r\n      iconElm.className = 'slick-header-menuicon';\r\n      menuItemElm.appendChild(iconElm);\r\n\r\n      if ((item as HeaderMenuCommandItem).iconCssClass) {\r\n        iconElm.classList.add(...Utils.classNameToList((item as HeaderMenuCommandItem).iconCssClass));\r\n      }\r\n\r\n      if ((item as HeaderMenuCommandItem).iconImage) {\r\n        iconElm.style.backgroundImage = 'url(' + (item as HeaderMenuCommandItem).iconImage + ')';\r\n      }\r\n\r\n      const textElm = document.createElement('span');\r\n      textElm.className = 'slick-header-menucontent';\r\n      textElm.textContent = (item as HeaderMenuCommandItem).title || '';\r\n      menuItemElm.appendChild(textElm);\r\n\r\n      if ((item as HeaderMenuCommandItem).textCssClass) {\r\n        textElm.classList.add(...Utils.classNameToList((item as HeaderMenuCommandItem).textCssClass));\r\n      }\r\n      menuElm.appendChild(menuItemElm);\r\n\r\n      if (addClickListener) {\r\n        const eventGroup = isSubMenu ? 'sub-menu' : 'parent-menu';\r\n        this._bindingEventService.bind(menuItemElm, 'click', this.handleMenuItemClick.bind(this, item, columnDef, level) as EventListener, undefined, eventGroup);\r\n      }\r\n\r\n      // optionally open sub-menu(s) by mouseover\r\n      if (this._options.subMenuOpenByEvent === 'mouseover') {\r\n        this._bindingEventService.bind(menuItemElm, 'mouseover', ((e: DOMMouseOrTouchEvent<HTMLDivElement>) => {\r\n          if ((item as HeaderMenuCommandItem).commandItems || (item as HeaderMenuCommandItem).items) {\r\n            this.repositionSubMenu(item as HeaderMenuCommandItem, columnDef, level, e);\r\n          } else if (!isSubMenu) {\r\n            this.destroySubMenus();\r\n          }\r\n        }) as EventListener);\r\n      }\r\n\r\n      // the option/command item could be a sub-menu if it has another list of commands/options\r\n      if ((item as HeaderMenuCommandItem).commandItems || (item as HeaderMenuCommandItem).items) {\r\n        const chevronElm = document.createElement('div');\r\n        chevronElm.className = 'sub-item-chevron';\r\n        if (this._options.subItemChevronClass) {\r\n          chevronElm.classList.add(...Utils.classNameToList(this._options.subItemChevronClass));\r\n        } else {\r\n          chevronElm.textContent = '\u2B9E'; // \u2B9E or \u25B8\r\n        }\r\n\r\n        menuItemElm.classList.add('slick-submenu-item');\r\n        menuItemElm.appendChild(chevronElm);\r\n      }\r\n    }\r\n\r\n    return menuElm;\r\n  }\r\n\r\n  protected handleMenuItemClick(item: HeaderMenuCommandItem | 'divider', columnDef: Column, level = 0, e: DOMMouseOrTouchEvent<HTMLDivElement>): boolean | void {\r\n    if (item !== 'divider' && !item.disabled && !item.divider) {\r\n      const command = (item as HeaderMenuCommandItem).command || '';\r\n\r\n      if (Utils.isDefined(command) && !item.commandItems && !(item as HeaderMenuCommandItem).items) {\r\n        const callbackArgs = {\r\n          grid: this._grid,\r\n          column: columnDef,\r\n          command,\r\n          item,\r\n        };\r\n        this.onCommand.notify(callbackArgs, e, this);\r\n\r\n        // execute action callback when defined\r\n        if (typeof item.action === 'function') {\r\n          item.action.call(this, e, callbackArgs);\r\n        }\r\n\r\n        // unless prevented, close the menu\r\n        if (!e.defaultPrevented) {\r\n          this.hideMenu();\r\n        }\r\n      } else if (item.commandItems || (item as HeaderMenuCommandItem).items) {\r\n        this.repositionSubMenu(item as HeaderMenuCommandItem, columnDef, level, e);\r\n      } else {\r\n        this.destroySubMenus();\r\n      }\r\n    }\r\n  }\r\n\r\n  protected repositionSubMenu(item: HeaderMenuCommandItem, columnDef: Column, level: number, e: DOMMouseOrTouchEvent<HTMLDivElement>) {\r\n    // when we're clicking a grid cell OR our last menu type (command/option) differs then we know that we need to start fresh and close any sub-menus that might still be open\r\n    if (e.target.classList.contains('slick-header-menubutton')) {\r\n      this.destroySubMenus();\r\n    }\r\n\r\n    // creating sub-menu, we'll also pass level & the item object since we might have \"subMenuTitle\" to show\r\n    const subMenuElm = this.createMenu(item.commandItems || item.items || [], columnDef, level + 1, item);\r\n    document.body.appendChild(subMenuElm);\r\n    this.repositionMenu(e, subMenuElm);\r\n  }\r\n\r\n  protected repositionMenu(e: DOMMouseOrTouchEvent<HTMLDivElement>, menuElm: HTMLDivElement) {\r\n    const buttonElm = e.target;\r\n    const isSubMenu = menuElm.classList.contains('slick-submenu');\r\n    const parentElm = isSubMenu\r\n      ? e.target.closest('.slick-header-menuitem') as HTMLDivElement\r\n      : buttonElm as HTMLElement;\r\n\r\n    const btnOffset = Utils.offset(buttonElm);\r\n    const gridPos = this._grid.getGridPosition();\r\n    const menuWidth = menuElm.offsetWidth;\r\n    const menuOffset = Utils.offset(this._menuElm!);\r\n    const parentOffset = Utils.offset(parentElm);\r\n    const menuOffsetTop = isSubMenu\r\n      ? parentOffset?.top ?? 0\r\n      : buttonElm.clientHeight ?? btnOffset?.top ?? 0 + (this._options?.menuOffsetTop ?? 0);\r\n    let menuOffsetLeft = isSubMenu ? parentOffset?.left ?? 0 : btnOffset?.left ?? 0;\r\n\r\n    // when auto-align is set, it will calculate whether it has enough space in the viewport to show the drop menu on the right (default)\r\n    // if there isn't enough space on the right, it will automatically align the drop menu to the left\r\n    // to simulate an align left, we actually need to know the width of the drop menu\r\n    if (isSubMenu && parentElm) {\r\n      let subMenuPosCalc = menuOffsetLeft + Number(menuWidth); // calculate coordinate at caller element far right\r\n      if (isSubMenu) {\r\n        subMenuPosCalc += parentElm.clientWidth;\r\n      }\r\n      const browserWidth = document.documentElement.clientWidth;\r\n      const dropSide = (subMenuPosCalc >= gridPos.width || subMenuPosCalc >= browserWidth) ? 'left' : 'right';\r\n      if (dropSide === 'left') {\r\n        menuElm.classList.remove('dropright');\r\n        menuElm.classList.add('dropleft');\r\n        menuOffsetLeft -= menuWidth;\r\n      } else {\r\n        menuElm.classList.remove('dropleft');\r\n        menuElm.classList.add('dropright');\r\n        if (isSubMenu) {\r\n          menuOffsetLeft += parentElm.offsetWidth;\r\n        }\r\n      }\r\n    } else {\r\n      if (menuOffsetLeft + menuElm.offsetWidth >= gridPos.width) {\r\n        menuOffsetLeft = menuOffsetLeft + buttonElm.clientWidth - menuElm.clientWidth + (this._options.autoAlignOffset || 0);\r\n      }\r\n      menuOffsetLeft -= menuOffset?.left ?? 0;\r\n    }\r\n\r\n    // ready to reposition the menu\r\n    menuElm.style.top = `${menuOffsetTop}px`;\r\n    menuElm.style.left = `${menuOffsetLeft}px`;\r\n\r\n    // Mark the header as active to keep the highlighting.\r\n    this._activeHeaderColumnElm = menuElm.closest('.slick-header-column');\r\n    if (this._activeHeaderColumnElm) {\r\n      this._activeHeaderColumnElm.classList.add('slick-header-column-active');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method that user can pass to override the default behavior.\r\n   * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\r\n   * @param overrideFn: override function callback\r\n   * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\r\n   */\r\n  protected runOverrideFunctionWhenExists<T = any>(overrideFn: ((args: any) => boolean) | undefined, args: T): boolean {\r\n    if (typeof overrideFn === 'function') {\r\n      return overrideFn.call(this, args);\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      Plugins: {\r\n        HeaderMenu: SlickHeaderMenu\r\n      }\r\n    }\r\n  });\r\n}\r\n"],
  "mappings": "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",
  "names": ["item"]
}
