{
  "version": 3,
  "sources": ["import-ns:../slick.core.js", "import-ns:../slick.interactions.js", "import-ns:./slick.cellrangedecorator.js", "../../../src/plugins/slick.cellrangeselector.js"],
  "sourcesContent": ["// empty string, do nothing", "// empty string, do nothing", "// empty string, do nothing", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SlickCellRangeSelector = void 0;\nvar slick_core_1 = require(\"../slick.core\");\nvar slick_interactions_1 = require(\"../slick.interactions\");\nvar slick_cellrangedecorator_1 = require(\"./slick.cellrangedecorator\");\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nvar SlickEvent = IIFE_ONLY ? Slick.Event : slick_core_1.SlickEvent;\nvar SlickEventHandler = IIFE_ONLY ? Slick.EventHandler : slick_core_1.SlickEventHandler;\nvar SlickRange = IIFE_ONLY ? Slick.Range : slick_core_1.SlickRange;\nvar Draggable = IIFE_ONLY ? Slick.Draggable : slick_interactions_1.Draggable;\nvar SlickCellRangeDecorator = IIFE_ONLY ? Slick.CellRangeDecorator : slick_cellrangedecorator_1.SlickCellRangeDecorator;\nvar Utils = IIFE_ONLY ? Slick.Utils : slick_core_1.Utils;\nvar SlickCellRangeSelector = /** @class */ (function () {\n    function SlickCellRangeSelector(options) {\n        // --\n        // public API\n        this.pluginName = 'CellRangeSelector';\n        this.onBeforeCellRangeSelected = new SlickEvent();\n        this.onCellRangeSelected = new SlickEvent();\n        this.onCellRangeSelecting = new SlickEvent();\n        this._currentlySelectedRange = null;\n        this._canvas = null;\n        this._dragging = false;\n        this._handler = new SlickEventHandler();\n        this._defaults = {\n            autoScroll: true,\n            minIntervalToShowNextCell: 30,\n            maxIntervalToShowNextCell: 600,\n            accelerateInterval: 5,\n            selectionCss: {\n                border: '2px dashed blue'\n            }\n        };\n        // Frozen row & column variables\n        this._rowOffset = 0;\n        this._columnOffset = 0;\n        this._isRightCanvas = false;\n        this._isBottomCanvas = false;\n        this._xDelayForNextCell = 0;\n        this._yDelayForNextCell = 0;\n        this._viewportHeight = 0;\n        this._viewportWidth = 0;\n        this._isRowMoveRegistered = false;\n        // Scrollings\n        this._scrollLeft = 0;\n        this._scrollTop = 0;\n        this._options = Utils.extend(true, {}, this._defaults, options);\n    }\n    SlickCellRangeSelector.prototype.init = function (grid) {\n        if (Draggable === undefined) {\n            throw new Error('Slick.Draggable is undefined, make sure to import \"slick.interactions.js\"');\n        }\n        this._decorator = this._options.cellDecorator || new SlickCellRangeDecorator(grid, this._options);\n        this._grid = grid;\n        this._canvas = this._grid.getCanvasNode();\n        this._gridOptions = this._grid.getOptions();\n        this._handler\n            .subscribe(this._grid.onScroll, this.handleScroll.bind(this))\n            .subscribe(this._grid.onDragInit, this.handleDragInit.bind(this))\n            .subscribe(this._grid.onDragStart, this.handleDragStart.bind(this))\n            .subscribe(this._grid.onDrag, this.handleDrag.bind(this))\n            .subscribe(this._grid.onDragEnd, this.handleDragEnd.bind(this));\n    };\n    SlickCellRangeSelector.prototype.destroy = function () {\n        var _a;\n        this._handler.unsubscribeAll();\n        this._activeCanvas = null;\n        this._activeViewport = null;\n        this._canvas = null;\n        (_a = this._decorator) === null || _a === void 0 ? void 0 : _a.destroy();\n    };\n    SlickCellRangeSelector.prototype.getCellDecorator = function () {\n        return this._decorator;\n    };\n    SlickCellRangeSelector.prototype.handleScroll = function (_e, args) {\n        this._scrollTop = args.scrollTop;\n        this._scrollLeft = args.scrollLeft;\n    };\n    SlickCellRangeSelector.prototype.handleDragInit = function (e) {\n        // Set the active canvas node because the decorator needs to append its\n        // box to the correct canvas\n        this._activeCanvas = this._grid.getActiveCanvasNode(e);\n        this._activeViewport = this._grid.getActiveViewportNode(e);\n        var scrollbarDimensions = this._grid.getDisplayedScrollbarDimensions();\n        this._viewportWidth = this._activeViewport.offsetWidth - scrollbarDimensions.width;\n        this._viewportHeight = this._activeViewport.offsetHeight - scrollbarDimensions.height;\n        this._moveDistanceForOneCell = {\n            x: this._grid.getAbsoluteColumnMinWidth() / 2,\n            y: this._grid.getOptions().rowHeight / 2\n        };\n        this._isRowMoveRegistered = this.hasRowMoveManager();\n        this._rowOffset = 0;\n        this._columnOffset = 0;\n        this._isBottomCanvas = this._activeCanvas.classList.contains('grid-canvas-bottom');\n        if (this._gridOptions.frozenRow > -1 && this._isBottomCanvas) {\n            var canvasSelector = \".\".concat(this._grid.getUID(), \" .grid-canvas-\").concat(this._gridOptions.frozenBottom ? 'bottom' : 'top');\n            var canvasElm = document.querySelector(canvasSelector);\n            if (canvasElm) {\n                this._rowOffset = canvasElm.clientHeight || 0;\n            }\n        }\n        this._isRightCanvas = this._activeCanvas.classList.contains('grid-canvas-right');\n        if (this._gridOptions.frozenColumn > -1 && this._isRightCanvas) {\n            var canvasLeftElm = document.querySelector(\".\".concat(this._grid.getUID(), \" .grid-canvas-left\"));\n            if (canvasLeftElm) {\n                this._columnOffset = canvasLeftElm.clientWidth || 0;\n            }\n        }\n        // prevent the grid from cancelling drag'n'drop by default\n        e.stopImmediatePropagation();\n        e.preventDefault();\n    };\n    SlickCellRangeSelector.prototype.handleDragStart = function (e, dd) {\n        var _a, _b;\n        var cell = this._grid.getCellFromEvent(e);\n        if (cell && this.onBeforeCellRangeSelected.notify(cell).getReturnValue() !== false && this._grid.canCellBeSelected(cell.row, cell.cell)) {\n            this._dragging = true;\n            e.stopImmediatePropagation();\n        }\n        if (!this._dragging) {\n            return;\n        }\n        this._grid.focus();\n        var canvasOffset = Utils.offset(this._canvas);\n        var startX = dd.startX - ((_a = canvasOffset === null || canvasOffset === void 0 ? void 0 : canvasOffset.left) !== null && _a !== void 0 ? _a : 0);\n        if (this._gridOptions.frozenColumn >= 0 && this._isRightCanvas) {\n            startX += this._scrollLeft;\n        }\n        var startY = dd.startY - ((_b = canvasOffset === null || canvasOffset === void 0 ? void 0 : canvasOffset.top) !== null && _b !== void 0 ? _b : 0);\n        if (this._gridOptions.frozenRow >= 0 && this._isBottomCanvas) {\n            startY += this._scrollTop;\n        }\n        var start = this._grid.getCellFromPoint(startX, startY);\n        dd.range = { start: start, end: {} };\n        this._currentlySelectedRange = dd.range;\n        return this._decorator.show(new SlickRange(start.row, start.cell));\n    };\n    SlickCellRangeSelector.prototype.handleDrag = function (evt, dd) {\n        if (!this._dragging && !this._isRowMoveRegistered) {\n            return;\n        }\n        if (!this._isRowMoveRegistered) {\n            evt.stopImmediatePropagation();\n        }\n        var e = evt.getNativeEvent();\n        if (this._options.autoScroll) {\n            this._draggingMouseOffset = this.getMouseOffsetViewport(e, dd);\n            if (this._draggingMouseOffset.isOutsideViewport) {\n                return this.handleDragOutsideViewport();\n            }\n        }\n        this.stopIntervalTimer();\n        this.handleDragTo(e, dd);\n    };\n    SlickCellRangeSelector.prototype.getMouseOffsetViewport = function (e, dd) {\n        var _a, _b, _c, _d;\n        var targetEvent = (_b = (_a = e === null || e === void 0 ? void 0 : e.touches) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : e;\n        var viewportLeft = this._activeViewport.scrollLeft;\n        var viewportTop = this._activeViewport.scrollTop;\n        var viewportRight = viewportLeft + this._viewportWidth;\n        var viewportBottom = viewportTop + this._viewportHeight;\n        var viewportOffset = Utils.offset(this._activeViewport);\n        var viewportOffsetLeft = (_c = viewportOffset === null || viewportOffset === void 0 ? void 0 : viewportOffset.left) !== null && _c !== void 0 ? _c : 0;\n        var viewportOffsetTop = (_d = viewportOffset === null || viewportOffset === void 0 ? void 0 : viewportOffset.top) !== null && _d !== void 0 ? _d : 0;\n        var viewportOffsetRight = viewportOffsetLeft + this._viewportWidth;\n        var viewportOffsetBottom = viewportOffsetTop + this._viewportHeight;\n        var result = {\n            e: e,\n            dd: dd,\n            viewport: {\n                left: viewportLeft,\n                top: viewportTop,\n                right: viewportRight,\n                bottom: viewportBottom,\n                offset: {\n                    left: viewportOffsetLeft,\n                    top: viewportOffsetTop,\n                    right: viewportOffsetRight,\n                    bottom: viewportOffsetBottom\n                }\n            },\n            // Consider the viewport as the origin, the `offset` is based on the coordinate system:\n            // the cursor is on the viewport's left/bottom when it is less than 0, and on the right/top when greater than 0.\n            offset: {\n                x: 0,\n                y: 0\n            },\n            isOutsideViewport: false\n        };\n        // ... horizontal\n        if (targetEvent.pageX < viewportOffsetLeft) {\n            result.offset.x = targetEvent.pageX - viewportOffsetLeft;\n        }\n        else if (targetEvent.pageX > viewportOffsetRight) {\n            result.offset.x = targetEvent.pageX - viewportOffsetRight;\n        }\n        // ... vertical\n        if (targetEvent.pageY < viewportOffsetTop) {\n            result.offset.y = viewportOffsetTop - targetEvent.pageY;\n        }\n        else if (targetEvent.pageY > viewportOffsetBottom) {\n            result.offset.y = viewportOffsetBottom - targetEvent.pageY;\n        }\n        result.isOutsideViewport = !!result.offset.x || !!result.offset.y;\n        return result;\n    };\n    SlickCellRangeSelector.prototype.handleDragOutsideViewport = function () {\n        var _this = this;\n        this._xDelayForNextCell = this._options.maxIntervalToShowNextCell - Math.abs(this._draggingMouseOffset.offset.x) * this._options.accelerateInterval;\n        this._yDelayForNextCell = this._options.maxIntervalToShowNextCell - Math.abs(this._draggingMouseOffset.offset.y) * this._options.accelerateInterval;\n        // only one timer is created to handle the case that cursor outside the viewport\n        if (!this._autoScrollTimerId) {\n            var xTotalDelay_1 = 0;\n            var yTotalDelay_1 = 0;\n            this._autoScrollTimerId = setInterval(function () {\n                var xNeedUpdate = false;\n                var yNeedUpdate = false;\n                // ... horizontal\n                if (_this._draggingMouseOffset.offset.x) {\n                    xTotalDelay_1 += _this._options.minIntervalToShowNextCell;\n                    xNeedUpdate = xTotalDelay_1 >= _this._xDelayForNextCell;\n                }\n                else {\n                    xTotalDelay_1 = 0;\n                }\n                // ... vertical\n                if (_this._draggingMouseOffset.offset.y) {\n                    yTotalDelay_1 += _this._options.minIntervalToShowNextCell;\n                    yNeedUpdate = yTotalDelay_1 >= _this._yDelayForNextCell;\n                }\n                else {\n                    yTotalDelay_1 = 0;\n                }\n                if (xNeedUpdate || yNeedUpdate) {\n                    if (xNeedUpdate) {\n                        xTotalDelay_1 = 0;\n                    }\n                    if (yNeedUpdate) {\n                        yTotalDelay_1 = 0;\n                    }\n                    _this.handleDragToNewPosition(xNeedUpdate, yNeedUpdate);\n                }\n            }, this._options.minIntervalToShowNextCell);\n        }\n    };\n    SlickCellRangeSelector.prototype.handleDragToNewPosition = function (xNeedUpdate, yNeedUpdate) {\n        var pageX = this._draggingMouseOffset.e.pageX;\n        var pageY = this._draggingMouseOffset.e.pageY;\n        var mouseOffsetX = this._draggingMouseOffset.offset.x;\n        var mouseOffsetY = this._draggingMouseOffset.offset.y;\n        var viewportOffset = this._draggingMouseOffset.viewport.offset;\n        // ... horizontal\n        if (xNeedUpdate && mouseOffsetX) {\n            if (mouseOffsetX > 0) {\n                pageX = viewportOffset.right + this._moveDistanceForOneCell.x;\n            }\n            else {\n                pageX = viewportOffset.left - this._moveDistanceForOneCell.x;\n            }\n        }\n        // ... vertical\n        if (yNeedUpdate && mouseOffsetY) {\n            if (mouseOffsetY > 0) {\n                pageY = viewportOffset.top - this._moveDistanceForOneCell.y;\n            }\n            else {\n                pageY = viewportOffset.bottom + this._moveDistanceForOneCell.y;\n            }\n        }\n        this.handleDragTo({ pageX: pageX, pageY: pageY }, this._draggingMouseOffset.dd);\n    };\n    SlickCellRangeSelector.prototype.stopIntervalTimer = function () {\n        if (this._autoScrollTimerId) {\n            clearInterval(this._autoScrollTimerId);\n            this._autoScrollTimerId = undefined;\n        }\n    };\n    SlickCellRangeSelector.prototype.handleDragTo = function (e, dd) {\n        var _a, _b, _c, _d, _f, _g;\n        var targetEvent = (_b = (_a = e === null || e === void 0 ? void 0 : e.touches) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : e;\n        var canvasOffset = Utils.offset(this._activeCanvas);\n        var end = this._grid.getCellFromPoint(targetEvent.pageX - ((_c = canvasOffset === null || canvasOffset === void 0 ? void 0 : canvasOffset.left) !== null && _c !== void 0 ? _c : 0) + this._columnOffset, targetEvent.pageY - ((_d = canvasOffset === null || canvasOffset === void 0 ? void 0 : canvasOffset.top) !== null && _d !== void 0 ? _d : 0) + this._rowOffset);\n        // ... frozen column(s),\n        if (this._gridOptions.frozenColumn >= 0 && (!this._isRightCanvas && (end.cell > this._gridOptions.frozenColumn)) || (this._isRightCanvas && (end.cell <= this._gridOptions.frozenColumn))) {\n            return;\n        }\n        // ... or frozen row(s)\n        if (this._gridOptions.frozenRow >= 0 && (!this._isBottomCanvas && (end.row >= this._gridOptions.frozenRow)) || (this._isBottomCanvas && (end.row < this._gridOptions.frozenRow))) {\n            return;\n        }\n        // scrolling the viewport to display the target `end` cell if it is not fully displayed\n        if (this._options.autoScroll && this._draggingMouseOffset) {\n            var endCellBox = this._grid.getCellNodeBox(end.row, end.cell);\n            if (!endCellBox) {\n                return;\n            }\n            var viewport = this._draggingMouseOffset.viewport;\n            if (endCellBox.left < viewport.left || endCellBox.right > viewport.right\n                || endCellBox.top < viewport.top || endCellBox.bottom > viewport.bottom) {\n                this._grid.scrollCellIntoView(end.row, end.cell);\n            }\n        }\n        // ... or regular grid (without any frozen options)\n        if (!this._grid.canCellBeSelected(end.row, end.cell)) {\n            return;\n        }\n        if (dd === null || dd === void 0 ? void 0 : dd.range) {\n            dd.range.end = end;\n            var range = new SlickRange((_f = dd.range.start.row) !== null && _f !== void 0 ? _f : 0, (_g = dd.range.start.cell) !== null && _g !== void 0 ? _g : 0, end.row, end.cell);\n            this._decorator.show(range);\n            this.onCellRangeSelecting.notify({\n                range: range\n            });\n        }\n    };\n    SlickCellRangeSelector.prototype.hasRowMoveManager = function () {\n        return !!(this._grid.getPluginByName('RowMoveManager') || this._grid.getPluginByName('CrossGridRowMoveManager'));\n    };\n    SlickCellRangeSelector.prototype.handleDragEnd = function (e, dd) {\n        var _a, _b;\n        if (!this._dragging) {\n            return;\n        }\n        this._dragging = false;\n        e.stopImmediatePropagation();\n        this.stopIntervalTimer();\n        this._decorator.hide();\n        this.onCellRangeSelected.notify({\n            range: new SlickRange((_a = dd.range.start.row) !== null && _a !== void 0 ? _a : 0, (_b = dd.range.start.cell) !== null && _b !== void 0 ? _b : 0, dd.range.end.row, dd.range.end.cell)\n        });\n    };\n    SlickCellRangeSelector.prototype.getCurrentRange = function () {\n        return this._currentlySelectedRange;\n    };\n    return SlickCellRangeSelector;\n}());\nexports.SlickCellRangeSelector = SlickCellRangeSelector;\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n    Utils.extend(Slick, {\n        CellRangeSelector: SlickCellRangeSelector\n    });\n}\n"],
  "mappings": "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",
  "names": ["SlickCellRangeSelector"]
}
