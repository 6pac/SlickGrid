{
  "version": 3,
  "sources": ["../../../src/plugins/slick.cellmenu.ts"],
  "sourcesContent": ["import {\n  BindingEventService as BindingEventService_,\n  SlickEvent as SlickEvent_,\n  SlickEventData as SlickEventData_,\n  SlickEventHandler as SlickEventHandler_,\n  Utils as Utils_\n} from '../slick.core';\nimport type {\n  CellMenuOption,\n  Column,\n  DOMMouseOrTouchEvent,\n  GridOption,\n  MenuCommandItem,\n  MenuCommandItemCallbackArgs,\n  MenuFromCellCallbackArgs,\n  MenuOptionItem,\n  MenuOptionItemCallbackArgs,\n  MenuType,\n  SlickPlugin\n} from '../models/index';\nimport type { SlickGrid } from '../slick.grid';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst SlickEventData = IIFE_ONLY ? Slick.EventData : SlickEventData_;\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : SlickEventHandler_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n/**\n * A plugin to add Menu on a Cell click (click on the cell that has the cellMenu object defined)\n * The \"cellMenu\" is defined in a Column Definition object\n * Similar to the ContextMenu plugin (could be used in combo),\n * except that it subscribes to the cell \"onClick\" event (regular mouse click or touch).\n *\n * A general use of this plugin is for an Action Dropdown Menu to do certain things on the row that was clicked\n * You can use it to change the cell data property through a list of Options AND/OR through a list of Commands.\n *\n * USAGE:\n *\n * Add the slick.cellMenu.(js|css) files and register it with the grid.\n *\n * To specify a menu in a column header, extend the column definition like so:\n * var cellMenuPlugin = new Slick.Plugins.CellMenu(columns, grid, options);\n *\n * Available cellMenu options, by defining a cellMenu object:\n *\n *  var columns = [\n *    {\n *      id: \"action\", name: \"Action\", field: \"action\", formatter: fakeButtonFormatter,\n *      cellMenu: {\n *        optionTitle: \"Change Effort Driven\",\n *        optionItems: [\n *          { option: true, title: \"True\", iconCssClass: 'checkmark' },\n *          { option: false, title: \"False\" }\n *        ],\n *        commandTitle: \"Commands\",\n *        commandItems: [\n *          { command: \"delete-row\", title: \"Delete Row\", iconCssClass: \"sgi sgi-close\", cssClass: 'bold', textCssClass: \"red\" },\n *          { divider: true },\n *          \"divider\" // you can pass \"divider\" as a string or an object\n *          { command: \"help\", title: \"Help\", iconCssClass: \"icon-help\" },\n *          { command: \"help\", title: \"Disabled Command\", disabled: true },\n *        ],\n *      }\n *    }\n *  ];\n *\n *\n * Available cellMenu properties:\n *    commandTitle:               Title of the Command section (optional)\n *    commandItems:               Array of Command item objects (command/title pair)\n *    optionTitle:                Title of the Option section (optional)\n *    optionItems:                Array of Options item objects (option/title pair)\n *    hideCloseButton:            Hide the Close button on top right (defaults to false)\n *    hideCommandSection:         Hide the Commands section even when the commandItems array is filled (defaults to false)\n *    hideMenuOnScroll:           Do we want to hide the Cell Menu when a scrolling event occurs (defaults to true)?\n *    hideOptionSection:          Hide the Options section even when the optionItems array is filled (defaults to false)\n *    maxHeight:                  Maximum height that the drop menu will have, can be a number (250) or text (\"none\")\n *    width:                      Width that the drop menu will have, can be a number (250) or text (defaults to \"auto\")\n *    autoAdjustDrop:             Auto-align dropup or dropdown menu to the left or right depending on grid viewport available space (defaults to true)\n *    autoAdjustDropOffset:       Optionally add an offset to the auto-align of the drop menu (defaults to 0)\n *    autoAlignSide:              Auto-align drop menu to the left or right depending on grid viewport available space (defaults to true)\n *    autoAlignSideOffset:        Optionally add an offset to the left/right side auto-align (defaults to 0)\n *    menuUsabilityOverride:      Callback method that user can override the default behavior of enabling/disabling the menu from being usable (must be combined with a custom formatter)\n *    subItemChevronClass:        CSS class that can be added on the right side of a sub-item parent (typically a chevron-right icon)\n *    subMenuOpenByEvent:         defaults to \"mouseover\", what event type shoud we use to open sub-menu(s), 2 options are available: \"mouseover\" or \"click\"\n *\n *\n * Available menu Command/Option item properties:\n *    action:                     Optionally define a callback function that gets executed when item is chosen (and/or use the onCommand event)\n *    command:                    A command identifier to be passed to the onCommand event handlers (when using \"commandItems\").\n *    option:                     An option to be passed to the onOptionSelected event handlers (when using \"optionItems\").\n *    title:                      Menu item text label.\n *    divider:                    Boolean which tells if the current item is a divider, not an actual command. You could also pass \"divider\" instead of an object\n *    disabled:                   Whether the item/command is disabled.\n *    hidden:                     Whether the item/command is hidden.\n *    subMenuTitle:               Optional sub-menu title that will shows up when sub-menu commmands/options list is opened\n *    subMenuTitleCssClass:       Optional sub-menu title CSS class to use with `subMenuTitle`\n *    tooltip:                    Item tooltip.\n *    cssClass:                   A CSS class to be added to the menu item container.\n *    iconCssClass:               A CSS class to be added to the menu item icon.\n *    textCssClass:               A CSS class to be added to the menu item text.\n *    iconImage:                  A url to the icon image.\n *    itemVisibilityOverride:     Callback method that user can override the default behavior of showing/hiding an item from the list\n *    itemUsabilityOverride:      Callback method that user can override the default behavior of enabling/disabling an item from the list\n *\n *\n * The plugin exposes the following events:\n *\n *    onAfterMenuShow: Fired after the menu is shown.  You can customize the menu or dismiss it by returning false.\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *\n *    onBeforeMenuShow: Fired before the menu is shown.  You can customize the menu or dismiss it by returning false.\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *\n *    onBeforeMenuClose: Fired when the menu is closing.\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *            menu:         Menu DOM element\n *\n *    onCommand: Fired on menu option clicked from the Command items list\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *            command:      Menu command identified.\n *            item:         Menu item selected\n *            column:    Cell Column definition\n *            dataContext:  Cell Data Context (data object)\n *\n *    onOptionSelected: Fired on menu option clicked from the Option items list\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *            option:       Menu option selected.\n *            item:         Menu item selected\n *            column:    Cell Column definition\n *            dataContext:  Cell Data Context (data object)\n *\n *\n * @param options {Object} Cell Menu Options\n * @class Slick.Plugins.CellMenu\n */\nexport class SlickCellMenu implements SlickPlugin {\n  // --\n  // public API\n  pluginName = 'CellMenu' as const;\n  onAfterMenuShow = new SlickEvent<MenuFromCellCallbackArgs>();\n  onBeforeMenuShow = new SlickEvent<MenuFromCellCallbackArgs>();\n  onBeforeMenuClose = new SlickEvent<MenuFromCellCallbackArgs>();\n  onCommand = new SlickEvent<MenuCommandItemCallbackArgs>();\n  onOptionSelected = new SlickEvent<MenuOptionItemCallbackArgs>();\n\n  // --\n  // protected props\n  protected _bindingEventService = new BindingEventService();\n  protected _cellMenuProperties: CellMenuOption;\n  protected _currentCell = -1;\n  protected _currentRow = -1;\n  protected _grid!: SlickGrid;\n  protected _gridOptions!: GridOption;\n  protected _gridUid = '';\n  protected _handler = new EventHandler();\n  protected _commandTitleElm?: HTMLSpanElement;\n  protected _optionTitleElm?: HTMLSpanElement;\n  protected _lastMenuTypeClicked = '';\n  protected _menuElm?: HTMLDivElement | null;\n  protected _subMenuParentId = '';\n  protected _defaults: CellMenuOption = {\n    autoAdjustDrop: true,     // dropup/dropdown\n    autoAlignSide: true,      // left/right\n    autoAdjustDropOffset: 0,\n    autoAlignSideOffset: 0,\n    hideMenuOnScroll: true,\n    maxHeight: 'none',\n    width: 'auto',\n    subMenuOpenByEvent: 'mouseover',\n  };\n\n  constructor(optionProperties: Partial<CellMenuOption>) {\n    this._cellMenuProperties = Utils.extend({}, this._defaults, optionProperties);\n  }\n\n  init(grid: SlickGrid) {\n    this._grid = grid;\n    this._gridOptions = grid.getOptions();\n    this._gridUid = grid?.getUID() || '';\n    this._handler.subscribe(this._grid.onClick, this.handleCellClick.bind(this));\n    if (this._cellMenuProperties.hideMenuOnScroll) {\n      this._handler.subscribe(this._grid.onScroll, this.closeMenu.bind(this));\n    }\n  }\n\n  setOptions(newOptions: Partial<CellMenuOption>) {\n    this._cellMenuProperties = Utils.extend({}, this._cellMenuProperties, newOptions);\n  }\n\n  destroy() {\n    this.onAfterMenuShow.unsubscribe();\n    this.onBeforeMenuShow.unsubscribe();\n    this.onBeforeMenuClose.unsubscribe();\n    this.onCommand.unsubscribe();\n    this.onOptionSelected.unsubscribe();\n    this._handler.unsubscribeAll();\n    this._bindingEventService.unbindAll();\n    this._menuElm?.remove();\n    this._commandTitleElm = null as any;\n    this._optionTitleElm = null as any;\n    this._menuElm = null as any;\n  }\n\n  protected createParentMenu(e: DOMMouseOrTouchEvent<HTMLDivElement>) {\n    const cell = this._grid.getCellFromEvent(e);\n    this._currentCell = cell?.cell ?? 0;\n    this._currentRow = cell?.row ?? 0;\n    const columnDef = this._grid.getColumns()[this._currentCell];\n\n    const commandItems = this._cellMenuProperties.commandItems || [];\n    const optionItems = this._cellMenuProperties.optionItems || [];\n\n    // make sure there's at least something to show before creating the Cell Menu\n    if (!columnDef || !columnDef.cellMenu || (!commandItems.length && !optionItems.length)) {\n      return;\n    }\n\n    // delete any prior Cell Menu\n    this.closeMenu();\n\n    // Let the user modify the menu or cancel altogether,\n    // or provide alternative menu implementation.\n    if (this.onBeforeMenuShow.notify({\n      cell: this._currentCell,\n      row: this._currentRow,\n      grid: this._grid\n    }, e, this).getReturnValue() === false) {\n      return;\n    }\n\n    // create 1st parent menu container & reposition it\n    this._menuElm = this.createMenu(commandItems, optionItems);\n    this._menuElm.style.top = `${e.pageY + 5}px`;\n    this._menuElm.style.left = `${e.pageX}px`;\n    this._menuElm.style.display = 'block';\n    document.body.appendChild(this._menuElm);\n\n    if (this.onAfterMenuShow.notify({\n      cell: this._currentCell,\n      row: this._currentRow,\n      grid: this._grid\n    }, e, this).getReturnValue() === false) {\n      return;\n    }\n\n    return this._menuElm;\n  }\n\n  /**\n   * Create parent menu or sub-menu(s), a parent menu will start at level 0 while sub-menu(s) will be incremented\n   * @param commandItems - array of optional commands or dividers\n   * @param optionItems - array of optional options or dividers\n   * @param level - menu level\n   * @param item - command, option or divider\n   * @returns menu DOM element\n   */\n  protected createMenu(commandItems: Array<MenuCommandItem | 'divider'>, optionItems: Array<MenuOptionItem | 'divider'>, level = 0, item?: MenuCommandItem | MenuOptionItem | 'divider') {\n    const columnDef = this._grid.getColumns()[this._currentCell];\n    const dataContext = this._grid.getDataItem(this._currentRow);\n\n    // create a new cell menu\n    const maxHeight = isNaN(this._cellMenuProperties.maxHeight as number) ? this._cellMenuProperties.maxHeight : `${this._cellMenuProperties.maxHeight ?? 0}px`;\n    const width = isNaN(this._cellMenuProperties.width as number) ? this._cellMenuProperties.width : `${this._cellMenuProperties.maxWidth ?? 0}px`;\n\n    // to avoid having multiple sub-menu trees opened,\n    // we need to somehow keep trace of which parent menu the tree belongs to\n    // and we should keep ref of only the first sub-menu parent, we can use the command name (remove any whitespaces though)\n    const subMenuCommand = (item as MenuCommandItem)?.command;\n    let subMenuId = (level === 1 && subMenuCommand) ? subMenuCommand.replaceAll(' ', '') : '';\n    if (subMenuId) {\n      this._subMenuParentId = subMenuId;\n    }\n    if (level > 1) {\n      subMenuId = this._subMenuParentId;\n    }\n\n    const menuClasses = `slick-cell-menu slick-menu-level-${level} ${this._gridUid}`;\n    const bodyMenuElm = document.body.querySelector<HTMLDivElement>(`.slick-cell-menu.slick-menu-level-${level}${this.getGridUidSelector()}`);\n\n    // return menu/sub-menu if it's already opened unless we are on different sub-menu tree if so close them all\n    if (bodyMenuElm) {\n      if (bodyMenuElm.dataset.subMenuParent === subMenuId) {\n        return bodyMenuElm;\n      }\n      this.destroySubMenus();\n    }\n\n    const menuElm = document.createElement('div');\n    menuElm.className = menuClasses;\n    if (level > 0) {\n      menuElm.classList.add('slick-submenu');\n      if (subMenuId) {\n        menuElm.dataset.subMenuParent = subMenuId;\n      }\n    }\n    menuElm.ariaLabel = level > 1 ? 'SubMenu' : 'Cell Menu';\n    menuElm.role = 'menu';\n    if (width) {\n      menuElm.style.width = width as string;\n    }\n    if (maxHeight) {\n      menuElm.style.maxHeight = maxHeight as string;\n    }\n\n    menuElm.style.display = 'none';\n\n    let closeButtonElm: HTMLButtonElement | null = null;\n    if (level === 0) {\n      closeButtonElm = document.createElement('button');\n      closeButtonElm.type = 'button';\n      closeButtonElm.className = 'close';\n      closeButtonElm.dataset.dismiss = 'slick-cell-menu';\n      closeButtonElm.ariaLabel = 'Close';\n\n      const spanCloseElm = document.createElement('span');\n      spanCloseElm.className = 'close';\n      spanCloseElm.ariaHidden = 'true';\n      spanCloseElm.textContent = '\u00D7';\n      closeButtonElm.appendChild(spanCloseElm);\n    }\n\n    // -- Option List section\n    if (!this._cellMenuProperties.hideOptionSection && optionItems.length > 0) {\n      const optionMenuElm = document.createElement('div');\n      optionMenuElm.className = 'slick-cell-menu-option-list';\n      optionMenuElm.role = 'menu';\n\n      // when creating sub-menu add its sub-menu title when exists\n      if (item && level > 0) {\n        this.addSubMenuTitleWhenExists(item, optionMenuElm); // add sub-menu title when exists\n      }\n\n      if (closeButtonElm && !this._cellMenuProperties.hideCloseButton) {\n        this._bindingEventService.bind(closeButtonElm, 'click', this.handleCloseButtonClicked.bind(this) as EventListener);\n        menuElm.appendChild(closeButtonElm);\n      }\n      menuElm.appendChild(optionMenuElm);\n\n      this.populateCommandOrOptionItems(\n        'option',\n        this._cellMenuProperties,\n        optionMenuElm,\n        optionItems,\n        { cell: this._currentCell, row: this._currentRow, column: columnDef, dataContext, grid: this._grid, level }\n      );\n    }\n\n    // -- Command List section\n    if (!this._cellMenuProperties.hideCommandSection && commandItems.length > 0) {\n      const commandMenuElm = document.createElement('div');\n      commandMenuElm.className = 'slick-cell-menu-command-list';\n      commandMenuElm.role = 'menu';\n\n      // when creating sub-menu add its sub-menu title when exists\n      if (item && level > 0) {\n        this.addSubMenuTitleWhenExists(item, commandMenuElm); // add sub-menu title when exists\n      }\n\n      if (closeButtonElm && !this._cellMenuProperties.hideCloseButton && (optionItems.length === 0 || this._cellMenuProperties.hideOptionSection)) {\n        this._bindingEventService.bind(closeButtonElm, 'click', this.handleCloseButtonClicked.bind(this) as EventListener);\n        menuElm.appendChild(closeButtonElm);\n      }\n      menuElm.appendChild(commandMenuElm);\n\n      this.populateCommandOrOptionItems(\n        'command',\n        this._cellMenuProperties,\n        commandMenuElm,\n        commandItems,\n        { cell: this._currentCell, row: this._currentRow, column: columnDef, dataContext, grid: this._grid, level }\n      );\n    }\n\n    // increment level for possible next sub-menus if exists\n    level++;\n\n    return menuElm;\n  }\n\n  protected addSubMenuTitleWhenExists(item: MenuCommandItem | MenuOptionItem | 'divider', commandOrOptionMenu: HTMLDivElement) {\n    if (item !== 'divider' && item?.subMenuTitle) {\n      const subMenuTitleElm = document.createElement('div');\n      subMenuTitleElm.className = 'slick-menu-title';\n      subMenuTitleElm.textContent = item.subMenuTitle as string;\n      const subMenuTitleClass = item.subMenuTitleCssClass as string;\n      if (subMenuTitleClass) {\n        subMenuTitleElm.classList.add(...subMenuTitleClass.split(' '));\n      }\n\n      commandOrOptionMenu.appendChild(subMenuTitleElm);\n    }\n  }\n\n  protected handleCloseButtonClicked(e: DOMMouseOrTouchEvent<HTMLButtonElement>) {\n    if (!e.defaultPrevented) {\n      this.closeMenu(e);\n    }\n  }\n\n  /** Close and destroy Cell Menu */\n  closeMenu(e?: DOMMouseOrTouchEvent<HTMLButtonElement | HTMLDivElement>, args?: MenuFromCellCallbackArgs) {\n    if (this._menuElm) {\n      if (this.onBeforeMenuClose.notify({\n        cell: args?.cell ?? 0,\n        row: args?.row ?? 0,\n        grid: this._grid,\n      }, e, this).getReturnValue() === false) {\n        return;\n      }\n      this._menuElm.remove();\n      this._menuElm = null;\n    }\n    this.destroySubMenus();\n  }\n\n  /** Destroy all parent menus and any sub-menus */\n  destroyAllMenus() {\n    this.destroySubMenus();\n\n    // remove all parent menu listeners before removing them from the DOM\n    this._bindingEventService.unbindAll('parent-menu');\n    document.querySelectorAll(`.slick-cell-menu${this.getGridUidSelector()}`)\n      .forEach(subElm => subElm.remove());\n  }\n\n  /** Close and destroy all previously opened sub-menus */\n  destroySubMenus() {\n    this._bindingEventService.unbindAll('sub-menu');\n    document.querySelectorAll(`.slick-cell-menu.slick-submenu${this.getGridUidSelector()}`)\n      .forEach(subElm => subElm.remove());\n  }\n\n  protected repositionSubMenu(item: MenuCommandItem | MenuOptionItem | 'divider', type: MenuType, level: number, e: DOMMouseOrTouchEvent<HTMLDivElement>) {\n    // when we're clicking a grid cell OR our last menu type (command/option) differs then we know that we need to start fresh and close any sub-menus that might still be open\n    if (e.target.classList.contains('slick-cell') || this._lastMenuTypeClicked !== type) {\n      this.destroySubMenus();\n    }\n\n    // creating sub-menu, we'll also pass level & the item object since we might have \"subMenuTitle\" to show\n    const subMenuElm = this.createMenu((item as MenuCommandItem)?.commandItems || [], (item as MenuOptionItem)?.optionItems || [], level + 1, item);\n    subMenuElm.style.display = 'block';\n    document.body.appendChild(subMenuElm);\n    this.repositionMenu(e, subMenuElm);\n  }\n\n  /**\n   * Reposition the menu drop (up/down) and the side (left/right)\n   * @param {*} event\n   */\n  repositionMenu(e: DOMMouseOrTouchEvent<HTMLDivElement>, menuElm: HTMLElement) {\n    const isSubMenu = menuElm.classList.contains('slick-submenu');\n    const parentElm = isSubMenu\n      ? e.target.closest('.slick-cell-menu-item') as HTMLDivElement\n      : e.target.closest('.slick-cell') as HTMLDivElement;\n\n    if (menuElm && parentElm) {\n      const parentOffset = Utils.offset(parentElm);\n      let menuOffsetLeft = parentElm ? parentOffset?.left ?? 0 : e?.pageX ?? 0;\n      let menuOffsetTop = parentElm ? parentOffset?.top ?? 0 : e?.pageY ?? 0;\n      const parentCellWidth = parentElm?.offsetWidth || 0;\n      const menuHeight = menuElm?.offsetHeight ?? 0;\n      const menuWidth = Number(menuElm?.offsetWidth ?? this._cellMenuProperties.width ?? 0);\n      const rowHeight = this._gridOptions.rowHeight;\n      const dropOffset = Number(this._cellMenuProperties.autoAdjustDropOffset || 0);\n      const sideOffset = Number(this._cellMenuProperties.autoAlignSideOffset || 0);\n\n      // if autoAdjustDrop is enable, we first need to see what position the drop will be located (defaults to bottom)\n      // without necessary toggling it's position just yet, we just want to know the future position for calculation\n      if (this._cellMenuProperties.autoAdjustDrop) {\n        // since we reposition menu below slick cell, we need to take it in consideration and do our calculation from that element\n        const spaceBottom = Utils.calculateAvailableSpace(parentElm).bottom;\n        const spaceTop = Utils.calculateAvailableSpace(parentElm).top;\n        const spaceBottomRemaining = spaceBottom + dropOffset - rowHeight!;\n        const spaceTopRemaining = spaceTop - dropOffset + rowHeight!;\n        const dropPosition = (spaceBottomRemaining < menuHeight && spaceTopRemaining > spaceBottomRemaining) ? 'top' : 'bottom';\n        if (dropPosition === 'top') {\n          menuElm.classList.remove('dropdown');\n          menuElm.classList.add('dropup');\n          if (isSubMenu) {\n            menuOffsetTop -= (menuHeight - dropOffset - parentElm.clientHeight);\n          } else {\n            menuOffsetTop -= menuHeight - dropOffset;\n          }\n        } else {\n          menuElm.classList.remove('dropup');\n          menuElm.classList.add('dropdown');\n          if (isSubMenu) {\n            menuOffsetTop += dropOffset;\n          } else {\n            menuOffsetTop += rowHeight! + dropOffset;\n          }\n        }\n      }\n\n      // when auto-align is set, it will calculate whether it has enough space in the viewport to show the drop menu on the right (default)\n      // if there isn't enough space on the right, it will automatically align the drop menu to the left (defaults to the right)\n      // to simulate an align left, we actually need to know the width of the drop menu\n      if (this._cellMenuProperties.autoAlignSide) {\n        const gridPos = this._grid.getGridPosition();\n        let subMenuPosCalc = menuOffsetLeft + Number(menuWidth); // calculate coordinate at caller element far right\n        if (isSubMenu) {\n          subMenuPosCalc += parentElm.clientWidth;\n        }\n        const browserWidth = document.documentElement.clientWidth;\n        const dropSide = (subMenuPosCalc >= gridPos.width || subMenuPosCalc >= browserWidth) ? 'left' : 'right';\n        if (dropSide === 'left') {\n          menuElm.classList.remove('dropright');\n          menuElm.classList.add('dropleft');\n          if (isSubMenu) {\n            menuOffsetLeft -= menuWidth - sideOffset;\n          } else {\n            menuOffsetLeft -= menuWidth - parentCellWidth - sideOffset;\n          }\n        } else {\n          menuElm.classList.remove('dropleft');\n          menuElm.classList.add('dropright');\n          if (isSubMenu) {\n            menuOffsetLeft += sideOffset + parentElm.offsetWidth;\n          } else {\n            menuOffsetLeft += sideOffset;\n          }\n        }\n      }\n\n      // ready to reposition the menu\n      menuElm.style.top = `${menuOffsetTop}px`;\n      menuElm.style.left = `${menuOffsetLeft}px`;\n    }\n  }\n\n  protected getGridUidSelector() {\n    const gridUid = this._grid.getUID() || '';\n    return gridUid ? `.${gridUid}` : '';\n  }\n\n  protected handleCellClick(evt: SlickEventData_ | DOMMouseOrTouchEvent<HTMLDivElement>, args: MenuCommandItemCallbackArgs) {\n    this.destroyAllMenus(); // make there's only 1 parent menu opened at a time\n    const e = (evt instanceof SlickEventData) ? evt.getNativeEvent<DOMMouseOrTouchEvent<HTMLDivElement>>() : evt;\n    const cell = this._grid.getCellFromEvent(e);\n\n    if (cell) {\n      const dataContext = this._grid.getDataItem(cell.row);\n      const columnDef = this._grid.getColumns()[cell.cell];\n\n      // prevent event from bubbling but only on column that has a cell menu defined\n      if (columnDef?.cellMenu) {\n        e.preventDefault();\n      }\n\n      // merge the cellMenu of the column definition with the default properties\n      this._cellMenuProperties = Utils.extend({}, this._cellMenuProperties, columnDef.cellMenu);\n\n      // run the override function (when defined), if the result is false it won't go further\n      args = args || {};\n      args.column = columnDef;\n      args.dataContext = dataContext;\n      args.grid = this._grid;\n      if (!this.runOverrideFunctionWhenExists<typeof args>(this._cellMenuProperties.menuUsabilityOverride, args)) {\n        return;\n      }\n\n      // create the DOM element\n      this._menuElm = this.createParentMenu(e);\n\n      // reposition the menu to where the user clicked\n      if (this._menuElm) {\n        this.repositionMenu(e, this._menuElm);\n        this._menuElm.setAttribute('aria-expanded', 'true');\n        this._menuElm.style.display = 'block';\n      }\n\n      // Hide the menu on outside click.\n      this._bindingEventService.bind(document.body, 'mousedown', this.handleBodyMouseDown.bind(this) as EventListener);\n    }\n  }\n\n  /** When users click outside the Cell Menu, we will typically close the Cell Menu (and any sub-menus) */\n  protected handleBodyMouseDown(e: DOMMouseOrTouchEvent<HTMLDivElement>) {\n    // did we click inside the menu or any of its sub-menu(s)\n    let isMenuClicked = false;\n    if (this._menuElm?.contains(e.target)) {\n      isMenuClicked = true;\n    }\n    if (!isMenuClicked) {\n      document\n        .querySelectorAll(`.slick-cell-menu.slick-submenu${this.getGridUidSelector()}`)\n        .forEach(subElm => {\n          if (subElm.contains(e.target)) {\n            isMenuClicked = true;\n          }\n        });\n    }\n\n    if (this._menuElm !== e.target && !isMenuClicked && !e.defaultPrevented) {\n      this.closeMenu(e, { cell: this._currentCell, row: this._currentRow, grid: this._grid });\n    }\n  }\n\n  /** Build the Command Items section. */\n  protected populateCommandOrOptionItems(\n    itemType: MenuType,\n    cellMenu: CellMenuOption,\n    commandOrOptionMenuElm: HTMLElement,\n    commandOrOptionItems: Array<MenuCommandItem | 'divider'> | Array<MenuOptionItem | 'divider'>,\n    args: { cell: number, row: number, column: Column, dataContext: any, grid: SlickGrid, level: number }\n  ) {\n    if (!args || !commandOrOptionItems || !cellMenu) {\n      return;\n    }\n\n    // user could pass a title on top of the Commands/Options section\n    const level = args?.level || 0;\n    const isSubMenu = level > 0;\n    if (cellMenu?.[`${itemType}Title`] && !isSubMenu) {\n      this[`_${itemType}TitleElm`] = document.createElement('div');\n      this[`_${itemType}TitleElm`]!.className = 'slick-menu-title';\n      this[`_${itemType}TitleElm`]!.textContent = cellMenu[`${itemType}Title`] as string;\n      commandOrOptionMenuElm.appendChild(this[`_${itemType}TitleElm`]!);\n    }\n\n    for (let i = 0, ln = commandOrOptionItems.length; i < ln; i++) {\n      let addClickListener = true;\n      const item = commandOrOptionItems[i];\n\n      // run each override functions to know if the item is visible and usable\n      const isItemVisible = this.runOverrideFunctionWhenExists<typeof args>((item as MenuCommandItem | MenuOptionItem).itemVisibilityOverride, args);\n      const isItemUsable = this.runOverrideFunctionWhenExists<typeof args>((item as MenuCommandItem | MenuOptionItem).itemUsabilityOverride, args);\n\n      // if the result is not visible then there's no need to go further\n      if (!isItemVisible) {\n        continue;\n      }\n\n      // when the override is defined, we need to use its result to update the disabled property\n      // so that \"handleMenuItemClick\" has the correct flag and won't trigger a command/option clicked event\n      if (Object.prototype.hasOwnProperty.call(item, 'itemUsabilityOverride')) {\n        (item as MenuCommandItem | MenuOptionItem).disabled = isItemUsable ? false : true;\n      }\n\n      const liElm = document.createElement('div');\n      liElm.className = 'slick-cell-menu-item';\n      liElm.role = 'menuitem';\n\n      if ((item as MenuCommandItem | MenuOptionItem).divider || item === 'divider') {\n        liElm.classList.add('slick-cell-menu-item-divider');\n        addClickListener = false;\n      }\n\n      // if the item is disabled then add the disabled css class\n      if ((item as MenuCommandItem | MenuOptionItem).disabled || !isItemUsable) {\n        liElm.classList.add('slick-cell-menu-item-disabled');\n      }\n\n      // if the item is hidden then add the hidden css class\n      if ((item as MenuCommandItem | MenuOptionItem).hidden) {\n        liElm.classList.add('slick-cell-menu-item-hidden');\n      }\n\n      if ((item as MenuCommandItem | MenuOptionItem).cssClass) {\n        liElm.classList.add(...(item as MenuCommandItem | MenuOptionItem).cssClass!.split(' '));\n      }\n\n      if ((item as MenuCommandItem | MenuOptionItem).tooltip) {\n        liElm.title = (item as MenuCommandItem | MenuOptionItem).tooltip || '';\n      }\n\n      const iconElm = document.createElement('div');\n      iconElm.className = 'slick-cell-menu-icon';\n\n      liElm.appendChild(iconElm);\n\n      if ((item as MenuCommandItem | MenuOptionItem).iconCssClass) {\n        iconElm.classList.add(...(item as MenuCommandItem | MenuOptionItem).iconCssClass!.split(' '));\n      }\n\n      if ((item as MenuCommandItem | MenuOptionItem).iconImage) {\n        iconElm.style.backgroundImage = `url(${(item as MenuCommandItem | MenuOptionItem).iconImage})`;\n      }\n\n      const textElm = document.createElement('span');\n      textElm.className = 'slick-cell-menu-content';\n      textElm.textContent = (item as MenuCommandItem | MenuOptionItem).title || '';\n\n      liElm.appendChild(textElm);\n\n      if ((item as MenuCommandItem | MenuOptionItem).textCssClass) {\n        textElm.classList.add(...(item as MenuCommandItem | MenuOptionItem).textCssClass!.split(' '));\n      }\n\n      commandOrOptionMenuElm.appendChild(liElm);\n\n      if (addClickListener) {\n        const eventGroup = isSubMenu ? 'sub-menu' : 'parent-menu';\n        this._bindingEventService.bind(liElm, 'click', this.handleMenuItemClick.bind(this, item, itemType, level) as EventListener, undefined, eventGroup);\n      }\n\n      // optionally open sub-menu(s) by mouseover\n      if (this._cellMenuProperties.subMenuOpenByEvent === 'mouseover') {\n        this._bindingEventService.bind(liElm, 'mouseover', ((e: DOMMouseOrTouchEvent<HTMLDivElement>) => {\n          if ((item as MenuCommandItem).commandItems || (item as MenuOptionItem).optionItems) {\n            this.repositionSubMenu(item, itemType, level, e);\n            this._lastMenuTypeClicked = itemType;\n          } else if (!isSubMenu) {\n            this.destroySubMenus();\n          }\n        }) as EventListener);\n      }\n\n      // the option/command item could be a sub-menu if it has another list of commands/options\n      if ((item as MenuCommandItem).commandItems || (item as MenuOptionItem).optionItems) {\n        const chevronElm = document.createElement('span');\n        chevronElm.className = 'sub-item-chevron';\n        if (this._cellMenuProperties.subItemChevronClass) {\n          chevronElm.classList.add(...this._cellMenuProperties.subItemChevronClass.split(' '));\n        } else {\n          chevronElm.textContent = '\u2B9E'; // \u2B9E or \u25B8\n        }\n\n        liElm.classList.add('slick-submenu-item');\n        liElm.appendChild(chevronElm);\n        continue;\n      }\n    }\n  }\n\n  protected handleMenuItemClick(item: MenuCommandItem | MenuOptionItem | 'divider', type: MenuType, level = 0, e: DOMMouseOrTouchEvent<HTMLDivElement>) {\n    if ((item as never)?.[type] !== undefined && item !== 'divider' && !item.disabled && !(item as MenuCommandItem | MenuOptionItem).divider && this._currentCell !== undefined && this._currentRow !== undefined) {\n      if (type === 'option' && !this._grid.getEditorLock().commitCurrentEdit()) {\n        return;\n      }\n      const optionOrCommand = (item as any)[type] !== undefined ? (item as any)[type] : '';\n      const row = this._currentRow;\n      const cell = this._currentCell;\n      const columnDef = this._grid.getColumns()[cell];\n      const dataContext = this._grid.getDataItem(row);\n\n      if (optionOrCommand !== undefined && !(item as any)[`${type}Items`]) {\n        // user could execute a callback through 2 ways\n        // via the onCommand/onOptionSelected event and/or an action callback\n        const callbackArgs = {\n          cell,\n          row,\n          grid: this._grid,\n          [type]: optionOrCommand,\n          item,\n          column: columnDef,\n          dataContext,\n        };\n        const eventType = type === 'command' ? 'onCommand' : 'onOptionSelected';\n        this[eventType].notify(callbackArgs as any, e, this);\n\n        // execute action callback when defined\n        if (typeof item.action === 'function') {\n          (item as any).action.call(this, e, callbackArgs);\n        }\n\n        // unless prevented, close the menu\n        if (!e.defaultPrevented) {\n          this.closeMenu(e, { cell, row, grid: this._grid });\n        }\n      } else if ((item as MenuCommandItem).commandItems || (item as MenuOptionItem).optionItems) {\n        this.repositionSubMenu(item, type, level, e);\n      } else {\n        this.destroySubMenus();\n      }\n      this._lastMenuTypeClicked = type;\n    }\n  }\n\n  /**\n   * Method that user can pass to override the default behavior.\n   * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\n   * @param overrideFn: override function callback\n   * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\n   */\n  protected runOverrideFunctionWhenExists<T = any>(overrideFn: ((args: any) => boolean) | undefined, args: T): boolean {\n    if (typeof overrideFn === 'function') {\n      return overrideFn.call(this, args);\n    }\n    return true;\n  }\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      Plugins: {\n        CellMenu: SlickCellMenu\n      }\n    }\n  });\n}\n"],
  "mappings": "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",
  "names": []
}
