{
  "version": 3,
  "sources": ["import-ns:../slick.core.js", "../../../src/plugins/slick.cellmenu.js"],
  "sourcesContent": ["// empty string, do nothing", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SlickCellMenu = void 0;\nvar slick_core_1 = require(\"../slick.core\");\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nvar BindingEventService = IIFE_ONLY ? Slick.BindingEventService : slick_core_1.BindingEventService;\nvar SlickEvent = IIFE_ONLY ? Slick.Event : slick_core_1.SlickEvent;\nvar SlickEventData = IIFE_ONLY ? Slick.EventData : slick_core_1.SlickEventData;\nvar EventHandler = IIFE_ONLY ? Slick.EventHandler : slick_core_1.SlickEventHandler;\nvar Utils = IIFE_ONLY ? Slick.Utils : slick_core_1.Utils;\n/**\n * A plugin to add Menu on a Cell click (click on the cell that has the cellMenu object defined)\n * The \"cellMenu\" is defined in a Column Definition object\n * Similar to the ContextMenu plugin (could be used in combo),\n * except that it subscribes to the cell \"onClick\" event (regular mouse click or touch).\n *\n * A general use of this plugin is for an Action Dropdown Menu to do certain things on the row that was clicked\n * You can use it to change the cell data property through a list of Options AND/OR through a list of Commands.\n *\n * USAGE:\n *\n * Add the slick.cellMenu.(js|css) files and register it with the grid.\n *\n * To specify a menu in a column header, extend the column definition like so:\n * var cellMenuPlugin = new Slick.Plugins.CellMenu(columns, grid, options);\n *\n * Available cellMenu options, by defining a cellMenu object:\n *\n *  var columns = [\n *    {\n *      id: \"action\", name: \"Action\", field: \"action\", formatter: fakeButtonFormatter,\n *      cellMenu: {\n *        optionTitle: \"Change Effort Driven\",\n *        optionItems: [\n *          { option: true, title: \"True\", iconCssClass: 'checkmark' },\n *          { option: false, title: \"False\" }\n *        ],\n *        commandTitle: \"Commands\",\n *        commandItems: [\n *          { command: \"delete-row\", title: \"Delete Row\", iconCssClass: \"sgi sgi-close\", cssClass: 'bold', textCssClass: \"red\" },\n *          { divider: true },\n *          \"divider\" // you can pass \"divider\" as a string or an object\n *          { command: \"help\", title: \"Help\", iconCssClass: \"icon-help\" },\n *          { command: \"help\", title: \"Disabled Command\", disabled: true },\n *        ],\n *      }\n *    }\n *  ];\n *\n *\n * Available cellMenu properties:\n *    commandTitle:               Title of the Command section (optional)\n *    commandItems:               Array of Command item objects (command/title pair)\n *    optionTitle:                Title of the Option section (optional)\n *    optionItems:                Array of Options item objects (option/title pair)\n *    hideCloseButton:            Hide the Close button on top right (defaults to false)\n *    hideCommandSection:         Hide the Commands section even when the commandItems array is filled (defaults to false)\n *    hideMenuOnScroll:           Do we want to hide the Cell Menu when a scrolling event occurs (defaults to true)?\n *    hideOptionSection:          Hide the Options section even when the optionItems array is filled (defaults to false)\n *    maxHeight:                  Maximum height that the drop menu will have, can be a number (250) or text (\"none\")\n *    width:                      Width that the drop menu will have, can be a number (250) or text (defaults to \"auto\")\n *    autoAdjustDrop:             Auto-align dropup or dropdown menu to the left or right depending on grid viewport available space (defaults to true)\n *    autoAdjustDropOffset:       Optionally add an offset to the auto-align of the drop menu (defaults to 0)\n *    autoAlignSide:              Auto-align drop menu to the left or right depending on grid viewport available space (defaults to true)\n *    autoAlignSideOffset:        Optionally add an offset to the left/right side auto-align (defaults to 0)\n *    menuUsabilityOverride:      Callback method that user can override the default behavior of enabling/disabling the menu from being usable (must be combined with a custom formatter)\n *\n *\n * Available menu Command/Option item properties:\n *    action:                     Optionally define a callback function that gets executed when item is chosen (and/or use the onCommand event)\n *    command:                    A command identifier to be passed to the onCommand event handlers (when using \"commandItems\").\n *    option:                     An option to be passed to the onOptionSelected event handlers (when using \"optionItems\").\n *    title:                      Menu item text label.\n *    divider:                    Boolean which tells if the current item is a divider, not an actual command. You could also pass \"divider\" instead of an object\n *    disabled:                   Whether the item/command is disabled.\n *    hidden:                     Whether the item/command is hidden.\n *    tooltip:                    Item tooltip.\n *    cssClass:                   A CSS class to be added to the menu item container.\n *    iconCssClass:               A CSS class to be added to the menu item icon.\n *    textCssClass:               A CSS class to be added to the menu item text.\n *    iconImage:                  A url to the icon image.\n *    itemVisibilityOverride:     Callback method that user can override the default behavior of showing/hiding an item from the list\n *    itemUsabilityOverride:      Callback method that user can override the default behavior of enabling/disabling an item from the list\n *\n *\n * The plugin exposes the following events:\n *\n *    onAfterMenuShow: Fired after the menu is shown.  You can customize the menu or dismiss it by returning false.\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *\n *    onBeforeMenuShow: Fired before the menu is shown.  You can customize the menu or dismiss it by returning false.\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *\n *    onBeforeMenuClose: Fired when the menu is closing.\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *            menu:         Menu DOM element\n *\n *    onCommand: Fired on menu option clicked from the Command items list\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *            command:      Menu command identified.\n *            item:         Menu item selected\n *            column:    Cell Column definition\n *            dataContext:  Cell Data Context (data object)\n *\n *    onOptionSelected: Fired on menu option clicked from the Option items list\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *            option:       Menu option selected.\n *            item:         Menu item selected\n *            column:    Cell Column definition\n *            dataContext:  Cell Data Context (data object)\n *\n *\n * @param options {Object} Cell Menu Options\n * @class Slick.Plugins.CellMenu\n */\nvar SlickCellMenu = /** @class */ (function () {\n    function SlickCellMenu(optionProperties) {\n        // --\n        // public API\n        this.pluginName = 'CellMenu';\n        this.onAfterMenuShow = new SlickEvent();\n        this.onBeforeMenuShow = new SlickEvent();\n        this.onBeforeMenuClose = new SlickEvent();\n        this.onCommand = new SlickEvent();\n        this.onOptionSelected = new SlickEvent();\n        this._currentCell = -1;\n        this._currentRow = -1;\n        this._gridUid = '';\n        this._handler = new EventHandler();\n        this._bindingEventService = new BindingEventService();\n        this._defaults = {\n            autoAdjustDrop: true,\n            autoAlignSide: true,\n            autoAdjustDropOffset: 0,\n            autoAlignSideOffset: 0,\n            hideMenuOnScroll: true,\n            maxHeight: 'none',\n            width: 'auto',\n        };\n        this._cellMenuProperties = Utils.extend({}, this._defaults, optionProperties);\n    }\n    SlickCellMenu.prototype.init = function (grid) {\n        this._grid = grid;\n        this._gridOptions = grid.getOptions();\n        this._gridUid = (grid === null || grid === void 0 ? void 0 : grid.getUID()) || '';\n        this._handler.subscribe(this._grid.onClick, this.handleCellClick.bind(this));\n        if (this._cellMenuProperties.hideMenuOnScroll) {\n            this._handler.subscribe(this._grid.onScroll, this.destroyMenu.bind(this));\n        }\n    };\n    SlickCellMenu.prototype.setOptions = function (newOptions) {\n        this._cellMenuProperties = Utils.extend({}, this._cellMenuProperties, newOptions);\n    };\n    SlickCellMenu.prototype.destroy = function () {\n        var _a;\n        this.onAfterMenuShow.unsubscribe();\n        this.onBeforeMenuShow.unsubscribe();\n        this.onBeforeMenuClose.unsubscribe();\n        this.onCommand.unsubscribe();\n        this.onOptionSelected.unsubscribe();\n        this._handler.unsubscribeAll();\n        this._bindingEventService.unbindAll();\n        (_a = this._menuElm) === null || _a === void 0 ? void 0 : _a.remove();\n        this._commandTitleElm = null;\n        this._optionTitleElm = null;\n        this._menuElm = null;\n    };\n    SlickCellMenu.prototype.createMenu = function (e) {\n        var _a, _b, _c, _d;\n        var cell = this._grid.getCellFromEvent(e);\n        this._currentCell = (_a = cell === null || cell === void 0 ? void 0 : cell.cell) !== null && _a !== void 0 ? _a : 0;\n        this._currentRow = (_b = cell === null || cell === void 0 ? void 0 : cell.row) !== null && _b !== void 0 ? _b : 0;\n        var columnDef = this._grid.getColumns()[this._currentCell];\n        var dataContext = this._grid.getDataItem(this._currentRow);\n        var commandItems = this._cellMenuProperties.commandItems || [];\n        var optionItems = this._cellMenuProperties.optionItems || [];\n        // make sure there's at least something to show before creating the Cell Menu\n        if (!columnDef || !columnDef.cellMenu || (!commandItems.length && !optionItems.length)) {\n            return;\n        }\n        // delete any prior Cell Menu\n        this.destroyMenu();\n        // Let the user modify the menu or cancel altogether,\n        // or provide alternative menu implementation.\n        if (this.onBeforeMenuShow.notify({\n            cell: this._currentCell,\n            row: this._currentRow,\n            grid: this._grid\n        }, e, this).getReturnValue() == false) {\n            return;\n        }\n        // create a new cell menu\n        var maxHeight = isNaN(this._cellMenuProperties.maxHeight) ? this._cellMenuProperties.maxHeight : \"\".concat((_c = this._cellMenuProperties.maxHeight) !== null && _c !== void 0 ? _c : 0, \"px\");\n        var width = isNaN(this._cellMenuProperties.width) ? this._cellMenuProperties.width : \"\".concat((_d = this._cellMenuProperties.maxWidth) !== null && _d !== void 0 ? _d : 0, \"px\");\n        this._menuElm = document.createElement('div');\n        this._menuElm.className = \"slick-cell-menu \".concat(this._gridUid);\n        this._menuElm.role = 'menu';\n        if (width) {\n            this._menuElm.style.width = width;\n        }\n        if (maxHeight) {\n            this._menuElm.style.maxHeight = maxHeight;\n        }\n        this._menuElm.style.top = \"\".concat(e.pageY + 5, \"px\");\n        this._menuElm.style.left = \"\".concat(e.pageX, \"px\");\n        this._menuElm.style.display = 'none';\n        var closeButtonElm = document.createElement('button');\n        closeButtonElm.type = 'button';\n        closeButtonElm.className = 'close';\n        closeButtonElm.dataset.dismiss = 'slick-cell-menu';\n        closeButtonElm.ariaLabel = 'Close';\n        var spanCloseElm = document.createElement('span');\n        spanCloseElm.className = 'close';\n        spanCloseElm.ariaHidden = 'true';\n        spanCloseElm.innerHTML = '&times;';\n        closeButtonElm.appendChild(spanCloseElm);\n        // -- Option List section\n        if (!this._cellMenuProperties.hideOptionSection && optionItems.length > 0) {\n            var optionMenuElm = document.createElement('div');\n            optionMenuElm.className = 'slick-cell-menu-option-list';\n            optionMenuElm.role = 'menu';\n            if (!this._cellMenuProperties.hideCloseButton) {\n                this._bindingEventService.bind(closeButtonElm, 'click', this.handleCloseButtonClicked.bind(this));\n                this._menuElm.appendChild(closeButtonElm);\n            }\n            this._menuElm.appendChild(optionMenuElm);\n            this.populateOptionItems(this._cellMenuProperties, optionMenuElm, optionItems, { cell: this._currentCell, row: this._currentRow, column: columnDef, dataContext: dataContext, grid: this._grid });\n        }\n        // -- Command List section\n        if (!this._cellMenuProperties.hideCommandSection && commandItems.length > 0) {\n            var commandMenuElm = document.createElement('div');\n            commandMenuElm.className = 'slick-cell-menu-command-list';\n            commandMenuElm.role = 'menu';\n            if (!this._cellMenuProperties.hideCloseButton && (optionItems.length === 0 || this._cellMenuProperties.hideOptionSection)) {\n                this._bindingEventService.bind(closeButtonElm, 'click', this.handleCloseButtonClicked.bind(this));\n                this._menuElm.appendChild(closeButtonElm);\n            }\n            this._menuElm.appendChild(commandMenuElm);\n            this.populateCommandItems(this._cellMenuProperties, commandMenuElm, commandItems, { cell: this._currentCell, row: this._currentRow, column: columnDef, dataContext: dataContext, grid: this._grid });\n        }\n        this._menuElm.style.display = 'block';\n        document.body.appendChild(this._menuElm);\n        if (this.onAfterMenuShow.notify({\n            cell: this._currentCell,\n            row: this._currentRow,\n            grid: this._grid\n        }, e, this).getReturnValue() == false) {\n            return;\n        }\n        return this._menuElm;\n    };\n    SlickCellMenu.prototype.handleCloseButtonClicked = function (e) {\n        if (!e.defaultPrevented) {\n            this.destroyMenu(e);\n        }\n    };\n    SlickCellMenu.prototype.destroyMenu = function (e, args) {\n        var _a, _b, _c;\n        this._menuElm = this._menuElm || document.querySelector(\".slick-cell-menu.\".concat(this._gridUid));\n        if ((_a = this._menuElm) === null || _a === void 0 ? void 0 : _a.remove) {\n            if (this.onBeforeMenuClose.notify({\n                cell: (_b = args === null || args === void 0 ? void 0 : args.cell) !== null && _b !== void 0 ? _b : 0,\n                row: (_c = args === null || args === void 0 ? void 0 : args.row) !== null && _c !== void 0 ? _c : 0,\n                grid: this._grid,\n            }, e, this).getReturnValue() == false) {\n                return;\n            }\n            this._menuElm.remove();\n            this._menuElm = null;\n        }\n    };\n    /**\n     * Reposition the menu drop (up/down) and the side (left/right)\n     * @param {*} event\n     */\n    SlickCellMenu.prototype.repositionMenu = function (e) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        if (this._menuElm && e.target) {\n            var parentElm = e.target.closest('.slick-cell');\n            var parentOffset = (parentElm && Utils.offset(parentElm));\n            var menuOffsetLeft = parentElm ? (_a = parentOffset === null || parentOffset === void 0 ? void 0 : parentOffset.left) !== null && _a !== void 0 ? _a : 0 : e.pageX;\n            var menuOffsetTop = parentElm ? (_b = parentOffset === null || parentOffset === void 0 ? void 0 : parentOffset.top) !== null && _b !== void 0 ? _b : 0 : e.pageY;\n            var parentCellWidth = parentElm.offsetWidth || 0;\n            var menuHeight = (_d = (_c = this._menuElm) === null || _c === void 0 ? void 0 : _c.offsetHeight) !== null && _d !== void 0 ? _d : 0;\n            var menuWidth = (_g = (_f = (_e = this._menuElm) === null || _e === void 0 ? void 0 : _e.offsetWidth) !== null && _f !== void 0 ? _f : this._cellMenuProperties.width) !== null && _g !== void 0 ? _g : 0;\n            var rowHeight = this._gridOptions.rowHeight;\n            var dropOffset = +(this._cellMenuProperties.autoAdjustDropOffset || 0);\n            var sideOffset = +(this._cellMenuProperties.autoAlignSideOffset || 0);\n            // if autoAdjustDrop is enable, we first need to see what position the drop will be located (defaults to bottom)\n            // without necessary toggling it's position just yet, we just want to know the future position for calculation\n            if (this._cellMenuProperties.autoAdjustDrop) {\n                // since we reposition menu below slick cell, we need to take it in consideration and do our calculation from that element\n                var spaceBottom = Utils.calculateAvailableSpace(parentElm).bottom;\n                var spaceTop = Utils.calculateAvailableSpace(parentElm).top;\n                var spaceBottomRemaining = spaceBottom + dropOffset - rowHeight;\n                var spaceTopRemaining = spaceTop - dropOffset + rowHeight;\n                var dropPosition = (spaceBottomRemaining < menuHeight && spaceTopRemaining > spaceBottomRemaining) ? 'top' : 'bottom';\n                if (dropPosition === 'top') {\n                    this._menuElm.classList.remove('dropdown');\n                    this._menuElm.classList.add('dropup');\n                    menuOffsetTop = menuOffsetTop - menuHeight - dropOffset;\n                }\n                else {\n                    this._menuElm.classList.remove('dropup');\n                    this._menuElm.classList.add('dropdown');\n                    menuOffsetTop = menuOffsetTop + rowHeight + dropOffset;\n                }\n            }\n            // when auto-align is set, it will calculate whether it has enough space in the viewport to show the drop menu on the right (default)\n            // if there isn't enough space on the right, it will automatically align the drop menu to the left (defaults to the right)\n            // to simulate an align left, we actually need to know the width of the drop menu\n            if (this._cellMenuProperties.autoAlignSide) {\n                var gridPos = this._grid.getGridPosition();\n                var dropSide = ((menuOffsetLeft + (+menuWidth)) >= gridPos.width) ? 'left' : 'right';\n                if (dropSide === 'left') {\n                    this._menuElm.classList.remove('dropright');\n                    this._menuElm.classList.add('dropleft');\n                    menuOffsetLeft = (menuOffsetLeft - (+menuWidth - parentCellWidth) - sideOffset);\n                }\n                else {\n                    this._menuElm.classList.remove('dropleft');\n                    this._menuElm.classList.add('dropright');\n                    menuOffsetLeft = menuOffsetLeft + sideOffset;\n                }\n            }\n            // ready to reposition the menu\n            this._menuElm.style.top = \"\".concat(menuOffsetTop, \"px\");\n            this._menuElm.style.left = \"\".concat(menuOffsetLeft, \"px\");\n        }\n    };\n    SlickCellMenu.prototype.handleCellClick = function (evt, args) {\n        var e = (evt instanceof SlickEventData) ? evt.getNativeEvent() : evt;\n        var cell = this._grid.getCellFromEvent(e);\n        if (cell) {\n            var dataContext = this._grid.getDataItem(cell.row);\n            var columnDef = this._grid.getColumns()[cell.cell];\n            // prevent event from bubbling but only on column that has a cell menu defined\n            if (columnDef === null || columnDef === void 0 ? void 0 : columnDef.cellMenu) {\n                e.preventDefault();\n            }\n            // merge the cellMenu of the column definition with the default properties\n            this._cellMenuProperties = Utils.extend({}, this._cellMenuProperties, columnDef.cellMenu);\n            // run the override function (when defined), if the result is false it won't go further\n            args = args || {};\n            args.column = columnDef;\n            args.dataContext = dataContext;\n            args.grid = this._grid;\n            if (!this.runOverrideFunctionWhenExists(this._cellMenuProperties.menuUsabilityOverride, args)) {\n                return;\n            }\n            // create the DOM element\n            this._menuElm = this.createMenu(e);\n            // reposition the menu to where the user clicked\n            if (this._menuElm) {\n                this.repositionMenu(e);\n                this._menuElm.setAttribute('aria-expanded', 'true');\n                this._menuElm.style.display = 'block';\n            }\n            // Hide the menu on outside click.\n            this._bindingEventService.bind(document.body, 'mousedown', this.handleBodyMouseDown.bind(this));\n        }\n    };\n    SlickCellMenu.prototype.handleBodyMouseDown = function (e) {\n        var _a;\n        if (this._menuElm != e.target && !((_a = this._menuElm) === null || _a === void 0 ? void 0 : _a.contains(e.target))) {\n            if (!e.defaultPrevented) {\n                this.closeMenu(e, { cell: this._currentCell, row: this._currentRow, grid: this._grid });\n            }\n        }\n    };\n    SlickCellMenu.prototype.closeMenu = function (e, args) {\n        var _a;\n        if (this._menuElm) {\n            if (this.onBeforeMenuClose.notify({\n                cell: args === null || args === void 0 ? void 0 : args.cell,\n                row: args === null || args === void 0 ? void 0 : args.row,\n                grid: this._grid,\n            }, e, this).getReturnValue() == false) {\n                return;\n            }\n            (_a = this._menuElm) === null || _a === void 0 ? void 0 : _a.remove();\n            this._menuElm = null;\n        }\n    };\n    /** Construct the Option Items section. */\n    SlickCellMenu.prototype.populateOptionItems = function (cellMenu, optionMenuElm, optionItems, args) {\n        var _a, _b, _c;\n        if (!args || !optionItems || !cellMenu) {\n            return;\n        }\n        // user could pass a title on top of the Options section\n        if (cellMenu === null || cellMenu === void 0 ? void 0 : cellMenu.optionTitle) {\n            this._optionTitleElm = document.createElement('div');\n            this._optionTitleElm.className = 'title';\n            this._optionTitleElm.textContent = cellMenu.optionTitle;\n            optionMenuElm.appendChild(this._optionTitleElm);\n        }\n        for (var i = 0, ln = optionItems.length; i < ln; i++) {\n            var addClickListener = true;\n            var item = optionItems[i];\n            // run each override functions to know if the item is visible and usable\n            var isItemVisible = this.runOverrideFunctionWhenExists(item.itemVisibilityOverride, args);\n            var isItemUsable = this.runOverrideFunctionWhenExists(item.itemUsabilityOverride, args);\n            // if the result is not visible then there's no need to go further\n            if (!isItemVisible) {\n                continue;\n            }\n            // when the override is defined, we need to use its result to update the disabled property\n            // so that \"handleMenuItemOptionClick\" has the correct flag and won't trigger an option clicked event\n            if (Object.prototype.hasOwnProperty.call(item, 'itemUsabilityOverride')) {\n                item.disabled = isItemUsable ? false : true;\n            }\n            var liElm = document.createElement('div');\n            liElm.className = 'slick-cell-menu-item';\n            liElm.role = 'menuitem';\n            if (item.divider || item === 'divider') {\n                liElm.classList.add('slick-cell-menu-item-divider');\n                addClickListener = false;\n            }\n            // if the item is disabled then add the disabled css class\n            if (item.disabled || !isItemUsable) {\n                liElm.classList.add('slick-cell-menu-item-disabled');\n            }\n            // if the item is hidden then add the hidden css class\n            if (item.hidden) {\n                liElm.classList.add('slick-cell-menu-item-hidden');\n            }\n            if (item.cssClass) {\n                (_a = liElm.classList).add.apply(_a, item.cssClass.split(' '));\n            }\n            if (item.tooltip) {\n                liElm.title = item.tooltip || '';\n            }\n            var iconElm = document.createElement('div');\n            iconElm.className = 'slick-cell-menu-icon';\n            liElm.appendChild(iconElm);\n            if (item.iconCssClass) {\n                (_b = iconElm.classList).add.apply(_b, item.iconCssClass.split(' '));\n            }\n            if (item.iconImage) {\n                iconElm.style.backgroundImage = \"url(\".concat(item.iconImage, \")\");\n            }\n            var textElm = document.createElement('span');\n            textElm.className = 'slick-cell-menu-content';\n            textElm.textContent = item.title || '';\n            liElm.appendChild(textElm);\n            if (item.textCssClass) {\n                (_c = textElm.classList).add.apply(_c, item.textCssClass.split(' '));\n            }\n            optionMenuElm.appendChild(liElm);\n            if (addClickListener) {\n                this._bindingEventService.bind(liElm, 'click', this.handleMenuItemOptionClick.bind(this, item));\n            }\n        }\n    };\n    /** Construct the Command Items section. */\n    SlickCellMenu.prototype.populateCommandItems = function (cellMenu, commandMenuElm, commandItems, args) {\n        var _a, _b, _c;\n        if (!args || !commandItems || !cellMenu) {\n            return;\n        }\n        // user could pass a title on top of the Commands section\n        if (cellMenu === null || cellMenu === void 0 ? void 0 : cellMenu.commandTitle) {\n            this._commandTitleElm = document.createElement('div');\n            this._commandTitleElm.className = 'title';\n            this._commandTitleElm.textContent = cellMenu.commandTitle;\n            commandMenuElm.appendChild(this._commandTitleElm);\n        }\n        for (var i = 0, ln = commandItems.length; i < ln; i++) {\n            var addClickListener = true;\n            var item = commandItems[i];\n            // run each override functions to know if the item is visible and usable\n            var isItemVisible = this.runOverrideFunctionWhenExists(item.itemVisibilityOverride, args);\n            var isItemUsable = this.runOverrideFunctionWhenExists(item.itemUsabilityOverride, args);\n            // if the result is not visible then there's no need to go further\n            if (!isItemVisible) {\n                continue;\n            }\n            // when the override is defined, we need to use its result to update the disabled property\n            // so that \"handleMenuItemCommandClick\" has the correct flag and won't trigger a command clicked event\n            if (Object.prototype.hasOwnProperty.call(item, 'itemUsabilityOverride')) {\n                item.disabled = isItemUsable ? false : true;\n            }\n            var liElm = document.createElement('div');\n            liElm.className = 'slick-cell-menu-item';\n            liElm.role = 'menuitem';\n            if (item.divider || item === 'divider') {\n                liElm.classList.add('slick-cell-menu-item-divider');\n                addClickListener = false;\n            }\n            // if the item is disabled then add the disabled css class\n            if (item.disabled || !isItemUsable) {\n                liElm.classList.add('slick-cell-menu-item-disabled');\n            }\n            // if the item is hidden then add the hidden css class\n            if (item.hidden) {\n                liElm.classList.add('slick-cell-menu-item-hidden');\n            }\n            if (item.cssClass) {\n                (_a = liElm.classList).add.apply(_a, item.cssClass.split(' '));\n            }\n            if (item.tooltip) {\n                liElm.title = item.tooltip || '';\n            }\n            var iconElm = document.createElement('div');\n            iconElm.className = 'slick-cell-menu-icon';\n            liElm.appendChild(iconElm);\n            if (item.iconCssClass) {\n                (_b = iconElm.classList).add.apply(_b, item.iconCssClass.split(' '));\n            }\n            if (item.iconImage) {\n                iconElm.style.backgroundImage = \"url(\".concat(item.iconImage, \")\");\n            }\n            var textElm = document.createElement('span');\n            textElm.className = 'slick-cell-menu-content';\n            textElm.textContent = item.title || '';\n            liElm.appendChild(textElm);\n            if (item.textCssClass) {\n                (_c = textElm.classList).add.apply(_c, item.textCssClass.split(' '));\n            }\n            commandMenuElm.appendChild(liElm);\n            if (addClickListener) {\n                this._bindingEventService.bind(liElm, 'click', this.handleMenuItemCommandClick.bind(this, item));\n            }\n        }\n    };\n    SlickCellMenu.prototype.handleMenuItemCommandClick = function (item, e) {\n        if (!item || item.disabled || item.divider || item === 'divider') {\n            return;\n        }\n        var command = item.command || '';\n        var row = this._currentRow;\n        var cell = this._currentCell;\n        var columnDef = this._grid.getColumns()[cell];\n        var dataContext = this._grid.getDataItem(row);\n        if (command !== null && command !== '') {\n            // user could execute a callback through 2 ways\n            // via the onCommand event and/or an action callback\n            var callbackArgs = {\n                cell: cell,\n                row: row,\n                grid: this._grid,\n                command: command,\n                item: item,\n                column: columnDef,\n                dataContext: dataContext,\n            };\n            this.onCommand.notify(callbackArgs, e, this);\n            // execute action callback when defined\n            if (typeof item.action === 'function') {\n                item.action.call(this, e, callbackArgs);\n            }\n            if (!e.defaultPrevented) {\n                this.closeMenu(e, { cell: cell, row: row, grid: this._grid });\n            }\n        }\n    };\n    SlickCellMenu.prototype.handleMenuItemOptionClick = function (item, e) {\n        if (!item || item.disabled || item.divider || item === 'divider') {\n            return;\n        }\n        if (!this._grid.getEditorLock().commitCurrentEdit()) {\n            return;\n        }\n        var option = item.option !== undefined ? item.option : '';\n        var row = this._currentRow;\n        var cell = this._currentCell;\n        var columnDef = this._grid.getColumns()[cell];\n        var dataContext = this._grid.getDataItem(row);\n        if (option !== undefined) {\n            // user could execute a callback through 2 ways\n            // via the onOptionSelected event and/or an action callback\n            var callbackArgs = {\n                cell: cell,\n                row: row,\n                grid: this._grid,\n                option: option,\n                item: item,\n                column: columnDef,\n                dataContext: dataContext\n            };\n            this.onOptionSelected.notify(callbackArgs, e, this);\n            // execute action callback when defined\n            if (typeof item.action === 'function') {\n                item.action.call(this, e, callbackArgs);\n            }\n            if (!e.defaultPrevented) {\n                this.closeMenu(e, { cell: cell, row: row, grid: this._grid });\n            }\n        }\n    };\n    /**\n     * Method that user can pass to override the default behavior.\n     * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\n     * @param overrideFn: override function callback\n     * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\n     */\n    SlickCellMenu.prototype.runOverrideFunctionWhenExists = function (overrideFn, args) {\n        if (typeof overrideFn === 'function') {\n            return overrideFn.call(this, args);\n        }\n        return true;\n    };\n    return SlickCellMenu;\n}());\nexports.SlickCellMenu = SlickCellMenu;\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n    Utils.extend(true, window, {\n        Slick: {\n            Plugins: {\n                CellMenu: SlickCellMenu\n            }\n        }\n    });\n}\n"],
  "mappings": "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",
  "names": ["SlickCellMenu"]
}
