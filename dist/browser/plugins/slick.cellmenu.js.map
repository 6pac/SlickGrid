{
  "version": 3,
  "sources": ["../../../src/plugins/slick.cellmenu.ts"],
  "sourcesContent": ["import {\n  BindingEventService as BindingEventService_,\n  SlickEvent as SlickEvent_,\n  SlickEventData as SlickEventData_,\n  SlickEventHandler as SlickEventHandler_,\n  Utils as Utils_\n} from '../slick.core';\nimport type {\n  CellMenuOption,\n  DOMMouseOrTouchEvent,\n  GridOption,\n  MenuCommandItem,\n  MenuCommandItemCallbackArgs,\n  MenuFromCellCallbackArgs,\n  MenuOptionItem,\n  MenuOptionItemCallbackArgs,\n  Plugin\n} from '../models/index';\nimport type { SlickGrid } from '../slick.grid';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst SlickEventData = IIFE_ONLY ? Slick.EventData : SlickEventData_;\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : SlickEventHandler_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n/**\n * A plugin to add Menu on a Cell click (click on the cell that has the cellMenu object defined)\n * The \"cellMenu\" is defined in a Column Definition object\n * Similar to the ContextMenu plugin (could be used in combo),\n * except that it subscribes to the cell \"onClick\" event (regular mouse click or touch).\n *\n * A general use of this plugin is for an Action Dropdown Menu to do certain things on the row that was clicked\n * You can use it to change the cell data property through a list of Options AND/OR through a list of Commands.\n *\n * USAGE:\n *\n * Add the slick.cellMenu.(js|css) files and register it with the grid.\n *\n * To specify a menu in a column header, extend the column definition like so:\n * var cellMenuPlugin = new Slick.Plugins.CellMenu(columns, grid, options);\n *\n * Available cellMenu options, by defining a cellMenu object:\n *\n *  var columns = [\n *    {\n *      id: \"action\", name: \"Action\", field: \"action\", formatter: fakeButtonFormatter,\n *      cellMenu: {\n *        optionTitle: \"Change Effort Driven\",\n *        optionItems: [\n *          { option: true, title: \"True\", iconCssClass: 'checkmark' },\n *          { option: false, title: \"False\" }\n *        ],\n *        commandTitle: \"Commands\",\n *        commandItems: [\n *          { command: \"delete-row\", title: \"Delete Row\", iconCssClass: \"sgi sgi-close\", cssClass: 'bold', textCssClass: \"red\" },\n *          { divider: true },\n *          \"divider\" // you can pass \"divider\" as a string or an object\n *          { command: \"help\", title: \"Help\", iconCssClass: \"icon-help\" },\n *          { command: \"help\", title: \"Disabled Command\", disabled: true },\n *        ],\n *      }\n *    }\n *  ];\n *\n *\n * Available cellMenu properties:\n *    commandTitle:               Title of the Command section (optional)\n *    commandItems:               Array of Command item objects (command/title pair)\n *    optionTitle:                Title of the Option section (optional)\n *    optionItems:                Array of Options item objects (option/title pair)\n *    hideCloseButton:            Hide the Close button on top right (defaults to false)\n *    hideCommandSection:         Hide the Commands section even when the commandItems array is filled (defaults to false)\n *    hideMenuOnScroll:           Do we want to hide the Cell Menu when a scrolling event occurs (defaults to true)?\n *    hideOptionSection:          Hide the Options section even when the optionItems array is filled (defaults to false)\n *    maxHeight:                  Maximum height that the drop menu will have, can be a number (250) or text (\"none\")\n *    width:                      Width that the drop menu will have, can be a number (250) or text (defaults to \"auto\")\n *    autoAdjustDrop:             Auto-align dropup or dropdown menu to the left or right depending on grid viewport available space (defaults to true)\n *    autoAdjustDropOffset:       Optionally add an offset to the auto-align of the drop menu (defaults to 0)\n *    autoAlignSide:              Auto-align drop menu to the left or right depending on grid viewport available space (defaults to true)\n *    autoAlignSideOffset:        Optionally add an offset to the left/right side auto-align (defaults to 0)\n *    menuUsabilityOverride:      Callback method that user can override the default behavior of enabling/disabling the menu from being usable (must be combined with a custom formatter)\n *\n *\n * Available menu Command/Option item properties:\n *    action:                     Optionally define a callback function that gets executed when item is chosen (and/or use the onCommand event)\n *    command:                    A command identifier to be passed to the onCommand event handlers (when using \"commandItems\").\n *    option:                     An option to be passed to the onOptionSelected event handlers (when using \"optionItems\").\n *    title:                      Menu item text label.\n *    divider:                    Boolean which tells if the current item is a divider, not an actual command. You could also pass \"divider\" instead of an object\n *    disabled:                   Whether the item/command is disabled.\n *    hidden:                     Whether the item/command is hidden.\n *    tooltip:                    Item tooltip.\n *    cssClass:                   A CSS class to be added to the menu item container.\n *    iconCssClass:               A CSS class to be added to the menu item icon.\n *    textCssClass:               A CSS class to be added to the menu item text.\n *    iconImage:                  A url to the icon image.\n *    itemVisibilityOverride:     Callback method that user can override the default behavior of showing/hiding an item from the list\n *    itemUsabilityOverride:      Callback method that user can override the default behavior of enabling/disabling an item from the list\n *\n *\n * The plugin exposes the following events:\n *\n *    onAfterMenuShow: Fired after the menu is shown.  You can customize the menu or dismiss it by returning false.\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *\n *    onBeforeMenuShow: Fired before the menu is shown.  You can customize the menu or dismiss it by returning false.\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *\n *    onBeforeMenuClose: Fired when the menu is closing.\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *            menu:         Menu DOM element\n *\n *    onCommand: Fired on menu option clicked from the Command items list\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *            command:      Menu command identified.\n *            item:         Menu item selected\n *            column:    Cell Column definition\n *            dataContext:  Cell Data Context (data object)\n *\n *    onOptionSelected: Fired on menu option clicked from the Option items list\n *        Event args:\n *            cell:         Cell or column index\n *            row:          Row index\n *            grid:         Reference to the grid.\n *            option:       Menu option selected.\n *            item:         Menu item selected\n *            column:    Cell Column definition\n *            dataContext:  Cell Data Context (data object)\n *\n *\n * @param options {Object} Cell Menu Options\n * @class Slick.Plugins.CellMenu\n */\nexport class SlickCellMenu implements Plugin {\n  // --\n  // public API\n  pluginName = 'CellMenu' as const;\n  onAfterMenuShow = new SlickEvent<MenuFromCellCallbackArgs>();\n  onBeforeMenuShow = new SlickEvent<MenuFromCellCallbackArgs>();\n  onBeforeMenuClose = new SlickEvent<MenuFromCellCallbackArgs>();\n  onCommand = new SlickEvent<MenuCommandItemCallbackArgs>();\n  onOptionSelected = new SlickEvent<MenuOptionItemCallbackArgs>();\n\n  // --\n  // protected props\n  protected _cellMenuProperties: CellMenuOption;\n  protected _currentCell = -1;\n  protected _currentRow = -1;\n  protected _grid!: SlickGrid;\n  protected _gridOptions!: GridOption;\n  protected _gridUid = '';\n  protected _handler = new EventHandler();\n  protected _commandTitleElm?: HTMLSpanElement;\n  protected _optionTitleElm?: HTMLSpanElement;\n  protected _menuElm?: HTMLDivElement | null;\n  protected _bindingEventService = new BindingEventService();\n  protected _defaults: CellMenuOption = {\n    autoAdjustDrop: true,     // dropup/dropdown\n    autoAlignSide: true,      // left/right\n    autoAdjustDropOffset: 0,\n    autoAlignSideOffset: 0,\n    hideMenuOnScroll: true,\n    maxHeight: 'none',\n    width: 'auto',\n  };\n\n  constructor(optionProperties: Partial<CellMenuOption>) {\n    this._cellMenuProperties = Utils.extend({}, this._defaults, optionProperties);\n  }\n\n  init(grid: SlickGrid) {\n    this._grid = grid;\n    this._gridOptions = grid.getOptions();\n    this._gridUid = grid?.getUID() || '';\n    this._handler.subscribe(this._grid.onClick, this.handleCellClick.bind(this));\n    if (this._cellMenuProperties.hideMenuOnScroll) {\n      this._handler.subscribe(this._grid.onScroll, this.destroyMenu.bind(this));\n    }\n  }\n\n  setOptions(newOptions: Partial<CellMenuOption>) {\n    this._cellMenuProperties = Utils.extend({}, this._cellMenuProperties, newOptions);\n  }\n\n  destroy() {\n    this.onAfterMenuShow.unsubscribe();\n    this.onBeforeMenuShow.unsubscribe();\n    this.onBeforeMenuClose.unsubscribe();\n    this.onCommand.unsubscribe();\n    this.onOptionSelected.unsubscribe();\n    this._handler.unsubscribeAll();\n    this._bindingEventService.unbindAll();\n    this._menuElm?.remove();\n    this._commandTitleElm = null as any;\n    this._optionTitleElm = null as any;\n    this._menuElm = null as any;\n  }\n\n  protected createMenu(e: DOMMouseOrTouchEvent<HTMLDivElement>) {\n    const cell = this._grid.getCellFromEvent(e);\n    this._currentCell = cell?.cell ?? 0;\n    this._currentRow = cell?.row ?? 0;\n    const columnDef = this._grid.getColumns()[this._currentCell];\n    const dataContext = this._grid.getDataItem(this._currentRow);\n\n    const commandItems = this._cellMenuProperties.commandItems || [];\n    const optionItems = this._cellMenuProperties.optionItems || [];\n\n    // make sure there's at least something to show before creating the Cell Menu\n    if (!columnDef || !columnDef.cellMenu || (!commandItems.length && !optionItems.length)) {\n      return;\n    }\n\n    // delete any prior Cell Menu\n    this.destroyMenu();\n\n    // Let the user modify the menu or cancel altogether,\n    // or provide alternative menu implementation.\n    if (this.onBeforeMenuShow.notify({\n      cell: this._currentCell,\n      row: this._currentRow,\n      grid: this._grid\n    }, e, this).getReturnValue() == false) {\n      return;\n    }\n\n    // create a new cell menu\n    const maxHeight = isNaN(this._cellMenuProperties.maxHeight as number) ? this._cellMenuProperties.maxHeight : `${this._cellMenuProperties.maxHeight ?? 0}px`;\n    const width = isNaN(this._cellMenuProperties.width as number) ? this._cellMenuProperties.width : `${this._cellMenuProperties.maxWidth ?? 0}px`;\n\n    this._menuElm = document.createElement('div');\n    this._menuElm.className = `slick-cell-menu ${this._gridUid}`;\n    this._menuElm.role = 'menu';\n    if (width) {\n      this._menuElm.style.width = width as string;\n    }\n    if (maxHeight) {\n      this._menuElm.style.maxHeight = maxHeight as string;\n    }\n    this._menuElm.style.top = `${e.pageY + 5}px`;\n    this._menuElm.style.left = `${e.pageX}px`;\n    this._menuElm.style.display = 'none';\n\n    const closeButtonElm = document.createElement('button');\n    closeButtonElm.type = 'button';\n    closeButtonElm.className = 'close';\n    closeButtonElm.dataset.dismiss = 'slick-cell-menu';\n    closeButtonElm.ariaLabel = 'Close';\n\n    const spanCloseElm = document.createElement('span');\n    spanCloseElm.className = 'close';\n    spanCloseElm.ariaHidden = 'true';\n    spanCloseElm.innerHTML = '&times;';\n    closeButtonElm.appendChild(spanCloseElm);\n\n    // -- Option List section\n    if (!this._cellMenuProperties.hideOptionSection && optionItems.length > 0) {\n      const optionMenuElm = document.createElement('div');\n      optionMenuElm.className = 'slick-cell-menu-option-list';\n      optionMenuElm.role = 'menu';\n\n      if (!this._cellMenuProperties.hideCloseButton) {\n        this._bindingEventService.bind(closeButtonElm, 'click', this.handleCloseButtonClicked.bind(this) as EventListener);\n        this._menuElm.appendChild(closeButtonElm);\n      }\n      this._menuElm.appendChild(optionMenuElm)\n\n      this.populateOptionItems(\n        this._cellMenuProperties,\n        optionMenuElm,\n        optionItems,\n        { cell: this._currentCell, row: this._currentRow, column: columnDef, dataContext: dataContext, grid: this._grid }\n      );\n    }\n\n    // -- Command List section\n    if (!this._cellMenuProperties.hideCommandSection && commandItems.length > 0) {\n      const commandMenuElm = document.createElement('div');\n      commandMenuElm.className = 'slick-cell-menu-command-list';\n      commandMenuElm.role = 'menu';\n\n      if (!this._cellMenuProperties.hideCloseButton && (optionItems.length === 0 || this._cellMenuProperties.hideOptionSection)) {\n        this._bindingEventService.bind(closeButtonElm, 'click', this.handleCloseButtonClicked.bind(this) as EventListener);\n        this._menuElm.appendChild(closeButtonElm);\n      }\n\n      this._menuElm.appendChild(commandMenuElm);\n      this.populateCommandItems(\n        this._cellMenuProperties,\n        commandMenuElm,\n        commandItems,\n        { cell: this._currentCell, row: this._currentRow, column: columnDef, dataContext: dataContext, grid: this._grid }\n      );\n    }\n\n    this._menuElm.style.display = 'block';\n    document.body.appendChild(this._menuElm);\n\n    if (this.onAfterMenuShow.notify({\n      cell: this._currentCell,\n      row: this._currentRow,\n      grid: this._grid\n    }, e, this).getReturnValue() == false) {\n      return;\n    }\n\n    return this._menuElm;\n  }\n\n  protected handleCloseButtonClicked(e: DOMMouseOrTouchEvent<HTMLButtonElement>) {\n    if (!e.defaultPrevented) {\n      this.destroyMenu(e);\n    }\n  }\n\n  destroyMenu(e?: Event, args?: { cell: number; row: number; }) {\n    this._menuElm = this._menuElm || document.querySelector(`.slick-cell-menu.${this._gridUid}`);\n\n    if (this._menuElm?.remove) {\n      if (this.onBeforeMenuClose.notify({\n        cell: args?.cell ?? 0,\n        row: args?.row ?? 0,\n        grid: this._grid,\n      }, e, this).getReturnValue() == false) {\n        return;\n      }\n      this._menuElm.remove();\n      this._menuElm = null as any;\n    }\n  }\n\n  /**\n   * Reposition the menu drop (up/down) and the side (left/right)\n   * @param {*} event\n   */\n  repositionMenu(e: DOMMouseOrTouchEvent<HTMLDivElement>) {\n    if (this._menuElm && e.target) {\n      const parentElm = e.target.closest('.slick-cell') as HTMLDivElement;\n      const parentOffset = (parentElm && Utils.offset(parentElm));\n      let menuOffsetLeft = parentElm ? parentOffset?.left ?? 0 : e.pageX;\n      let menuOffsetTop = parentElm ? parentOffset?.top ?? 0 : e.pageY;\n      const parentCellWidth = parentElm.offsetWidth || 0;\n      const menuHeight = this._menuElm?.offsetHeight ?? 0;\n      const menuWidth = this._menuElm?.offsetWidth ?? this._cellMenuProperties.width ?? 0;\n      const rowHeight = this._gridOptions.rowHeight;\n      const dropOffset = +(this._cellMenuProperties.autoAdjustDropOffset || 0);\n      const sideOffset = +(this._cellMenuProperties.autoAlignSideOffset || 0);\n\n      // if autoAdjustDrop is enable, we first need to see what position the drop will be located (defaults to bottom)\n      // without necessary toggling it's position just yet, we just want to know the future position for calculation\n      if (this._cellMenuProperties.autoAdjustDrop) {\n        // since we reposition menu below slick cell, we need to take it in consideration and do our calculation from that element\n        const spaceBottom = Utils.calculateAvailableSpace(parentElm).bottom;\n        const spaceTop = Utils.calculateAvailableSpace(parentElm).top;\n        const spaceBottomRemaining = spaceBottom + dropOffset - rowHeight!;\n        const spaceTopRemaining = spaceTop - dropOffset + rowHeight!;\n        const dropPosition = (spaceBottomRemaining < menuHeight && spaceTopRemaining > spaceBottomRemaining) ? 'top' : 'bottom';\n        if (dropPosition === 'top') {\n          this._menuElm.classList.remove('dropdown');\n          this._menuElm.classList.add('dropup');\n          menuOffsetTop = menuOffsetTop - menuHeight - dropOffset;\n        } else {\n          this._menuElm.classList.remove('dropup');\n          this._menuElm.classList.add('dropdown');\n          menuOffsetTop = menuOffsetTop + rowHeight! + dropOffset;\n        }\n      }\n\n      // when auto-align is set, it will calculate whether it has enough space in the viewport to show the drop menu on the right (default)\n      // if there isn't enough space on the right, it will automatically align the drop menu to the left (defaults to the right)\n      // to simulate an align left, we actually need to know the width of the drop menu\n      if (this._cellMenuProperties.autoAlignSide) {\n        const gridPos = this._grid.getGridPosition();\n        const dropSide = ((menuOffsetLeft + (+menuWidth)) >= gridPos.width) ? 'left' : 'right';\n        if (dropSide === 'left') {\n          this._menuElm.classList.remove('dropright');\n          this._menuElm.classList.add('dropleft');\n          menuOffsetLeft = (menuOffsetLeft - (+menuWidth - parentCellWidth) - sideOffset);\n        } else {\n          this._menuElm.classList.remove('dropleft');\n          this._menuElm.classList.add('dropright');\n          menuOffsetLeft = menuOffsetLeft + sideOffset;\n        }\n      }\n\n      // ready to reposition the menu\n      this._menuElm.style.top = `${menuOffsetTop}px`;\n      this._menuElm.style.left = `${menuOffsetLeft}px`;\n    }\n  }\n\n  protected handleCellClick(evt: SlickEventData_ | DOMMouseOrTouchEvent<HTMLDivElement>, args: MenuCommandItemCallbackArgs) {\n    const e = (evt instanceof SlickEventData) ? evt.getNativeEvent<DOMMouseOrTouchEvent<HTMLDivElement>>() : evt;\n\n    const cell = this._grid.getCellFromEvent(e);\n    if (cell) {\n      const dataContext = this._grid.getDataItem(cell.row);\n      const columnDef = this._grid.getColumns()[cell.cell];\n\n      // prevent event from bubbling but only on column that has a cell menu defined\n      if (columnDef?.cellMenu) {\n        e.preventDefault();\n      }\n\n      // merge the cellMenu of the column definition with the default properties\n      this._cellMenuProperties = Utils.extend({}, this._cellMenuProperties, columnDef.cellMenu);\n\n      // run the override function (when defined), if the result is false it won't go further\n      args = args || {};\n      args.column = columnDef;\n      args.dataContext = dataContext;\n      args.grid = this._grid;\n      if (!this.runOverrideFunctionWhenExists<typeof args>(this._cellMenuProperties.menuUsabilityOverride, args)) {\n        return;\n      }\n\n      // create the DOM element\n      this._menuElm = this.createMenu(e);\n\n      // reposition the menu to where the user clicked\n      if (this._menuElm) {\n        this.repositionMenu(e);\n        this._menuElm.setAttribute('aria-expanded', 'true');\n        this._menuElm.style.display = 'block';\n      }\n\n      // Hide the menu on outside click.\n      this._bindingEventService.bind(document.body, 'mousedown', this.handleBodyMouseDown.bind(this) as EventListener);\n    }\n  }\n\n  protected handleBodyMouseDown(e: DOMMouseOrTouchEvent<HTMLDivElement>) {\n    if (this._menuElm != e.target && !(this._menuElm?.contains(e.target))) {\n      if (!e.defaultPrevented) {\n        this.closeMenu(e, { cell: this._currentCell, row: this._currentRow, grid: this._grid });\n      }\n    }\n  }\n\n  closeMenu(e: DOMMouseOrTouchEvent<HTMLDivElement>, args: MenuFromCellCallbackArgs) {\n    if (this._menuElm) {\n      if (this.onBeforeMenuClose.notify({\n        cell: args?.cell,\n        row: args?.row,\n        grid: this._grid,\n      }, e, this).getReturnValue() == false) {\n        return;\n      }\n      this._menuElm?.remove();\n      this._menuElm = null;\n    }\n  }\n\n  /** Construct the Option Items section. */\n  protected populateOptionItems(cellMenu: CellMenuOption, optionMenuElm: HTMLElement, optionItems: Array<MenuOptionItem | 'divider'>, args: any) {\n    if (!args || !optionItems || !cellMenu) {\n      return;\n    }\n\n    // user could pass a title on top of the Options section\n    if (cellMenu?.optionTitle) {\n      this._optionTitleElm = document.createElement('div');\n      this._optionTitleElm.className = 'title';\n      this._optionTitleElm.textContent = cellMenu.optionTitle;\n      optionMenuElm.appendChild(this._optionTitleElm);\n    }\n\n    for (let i = 0, ln = optionItems.length; i < ln; i++) {\n      let addClickListener = true;\n      const item = optionItems[i];\n\n      // run each override functions to know if the item is visible and usable\n      const isItemVisible = this.runOverrideFunctionWhenExists<typeof args>((item as MenuOptionItem).itemVisibilityOverride, args);\n      const isItemUsable = this.runOverrideFunctionWhenExists<typeof args>((item as MenuOptionItem).itemUsabilityOverride, args);\n\n      // if the result is not visible then there's no need to go further\n      if (!isItemVisible) {\n        continue;\n      }\n\n      // when the override is defined, we need to use its result to update the disabled property\n      // so that \"handleMenuItemOptionClick\" has the correct flag and won't trigger an option clicked event\n      if (Object.prototype.hasOwnProperty.call(item, 'itemUsabilityOverride')) {\n        (item as MenuOptionItem).disabled = isItemUsable ? false : true;\n      }\n\n      const liElm = document.createElement('div');\n      liElm.className = 'slick-cell-menu-item';\n      liElm.role = 'menuitem';\n\n      if ((item as MenuOptionItem).divider || item === 'divider') {\n        liElm.classList.add('slick-cell-menu-item-divider');\n        addClickListener = false;\n      }\n\n      // if the item is disabled then add the disabled css class\n      if ((item as MenuOptionItem).disabled || !isItemUsable) {\n        liElm.classList.add('slick-cell-menu-item-disabled');\n      }\n\n      // if the item is hidden then add the hidden css class\n      if ((item as MenuOptionItem).hidden) {\n        liElm.classList.add('slick-cell-menu-item-hidden');\n      }\n\n      if ((item as MenuOptionItem).cssClass) {\n        liElm.classList.add(...(item as MenuOptionItem).cssClass!.split(' '));\n      }\n\n      if ((item as MenuOptionItem).tooltip) {\n        liElm.title = (item as MenuOptionItem).tooltip || '';\n      }\n\n      const iconElm = document.createElement('div');\n      iconElm.className = 'slick-cell-menu-icon';\n\n      liElm.appendChild(iconElm);\n\n      if ((item as MenuOptionItem).iconCssClass) {\n        iconElm.classList.add(...(item as MenuOptionItem).iconCssClass!.split(' '));\n      }\n\n      if ((item as MenuOptionItem).iconImage) {\n        iconElm.style.backgroundImage = `url(${(item as MenuOptionItem).iconImage})`;\n      }\n\n      const textElm = document.createElement('span');\n      textElm.className = 'slick-cell-menu-content';\n      textElm.textContent = (item as MenuOptionItem).title || '';\n\n      liElm.appendChild(textElm);\n\n      if ((item as MenuOptionItem).textCssClass) {\n        textElm.classList.add(...(item as MenuOptionItem).textCssClass!.split(' '));\n      }\n\n      optionMenuElm.appendChild(liElm);\n\n      if (addClickListener) {\n        this._bindingEventService.bind(liElm, 'click', this.handleMenuItemOptionClick.bind(this, item) as EventListener);\n      }\n    }\n  }\n\n  /** Construct the Command Items section. */\n  protected populateCommandItems(cellMenu: CellMenuOption, commandMenuElm: HTMLElement, commandItems: Array<MenuCommandItem | 'divider'>, args: any) {\n    if (!args || !commandItems || !cellMenu) {\n      return;\n    }\n\n    // user could pass a title on top of the Commands section\n    if (cellMenu?.commandTitle) {\n      this._commandTitleElm = document.createElement('div');\n      this._commandTitleElm.className = 'title';\n      this._commandTitleElm.textContent = cellMenu.commandTitle;\n      commandMenuElm.appendChild(this._commandTitleElm);\n    }\n\n    for (let i = 0, ln = commandItems.length; i < ln; i++) {\n      let addClickListener = true;\n      const item = commandItems[i];\n\n      // run each override functions to know if the item is visible and usable\n      const isItemVisible = this.runOverrideFunctionWhenExists<typeof args>((item as MenuCommandItem).itemVisibilityOverride, args);\n      const isItemUsable = this.runOverrideFunctionWhenExists<typeof args>((item as MenuCommandItem).itemUsabilityOverride, args);\n\n      // if the result is not visible then there's no need to go further\n      if (!isItemVisible) {\n        continue;\n      }\n\n      // when the override is defined, we need to use its result to update the disabled property\n      // so that \"handleMenuItemCommandClick\" has the correct flag and won't trigger a command clicked event\n      if (Object.prototype.hasOwnProperty.call(item, 'itemUsabilityOverride')) {\n        (item as MenuCommandItem).disabled = isItemUsable ? false : true;\n      }\n\n      const liElm = document.createElement('div');\n      liElm.className = 'slick-cell-menu-item';\n      liElm.role = 'menuitem';\n\n      if ((item as MenuCommandItem).divider || item === 'divider') {\n        liElm.classList.add('slick-cell-menu-item-divider');\n        addClickListener = false;\n      }\n\n      // if the item is disabled then add the disabled css class\n      if ((item as MenuCommandItem).disabled || !isItemUsable) {\n        liElm.classList.add('slick-cell-menu-item-disabled');\n      }\n\n      // if the item is hidden then add the hidden css class\n      if ((item as MenuCommandItem).hidden) {\n        liElm.classList.add('slick-cell-menu-item-hidden');\n      }\n\n      if ((item as MenuCommandItem).cssClass) {\n        liElm.classList.add(...(item as MenuCommandItem).cssClass!.split(' '));\n      }\n\n      if ((item as MenuCommandItem).tooltip) {\n        liElm.title = (item as MenuCommandItem).tooltip || '';\n      }\n\n      const iconElm = document.createElement('div');\n      iconElm.className = 'slick-cell-menu-icon';\n\n      liElm.appendChild(iconElm);\n\n      if ((item as MenuCommandItem).iconCssClass) {\n        iconElm.classList.add(...(item as MenuCommandItem).iconCssClass!.split(' '));\n      }\n\n      if ((item as MenuCommandItem).iconImage) {\n        iconElm.style.backgroundImage = `url(${(item as MenuCommandItem).iconImage})`;\n      }\n\n      const textElm = document.createElement('span');\n      textElm.className = 'slick-cell-menu-content';\n      textElm.textContent = (item as MenuCommandItem).title || '';\n\n      liElm.appendChild(textElm);\n\n      if ((item as MenuCommandItem).textCssClass) {\n        textElm.classList.add(...(item as MenuCommandItem).textCssClass!.split(' '));\n      }\n\n      commandMenuElm.appendChild(liElm);\n\n      if (addClickListener) {\n        this._bindingEventService.bind(liElm, 'click', this.handleMenuItemCommandClick.bind(this, item) as EventListener);\n      }\n    }\n  }\n\n  protected handleMenuItemCommandClick(item: MenuCommandItem | 'divider', e: DOMMouseOrTouchEvent<HTMLDivElement>) {\n    if (!item || (item as MenuCommandItem).disabled || (item as MenuCommandItem).divider || item === 'divider') {\n      return;\n    }\n\n    const command = item.command || '';\n    const row = this._currentRow;\n    const cell = this._currentCell;\n    const columnDef = this._grid.getColumns()[cell];\n    const dataContext = this._grid.getDataItem(row);\n\n    if (command !== null && command !== '') {\n      // user could execute a callback through 2 ways\n      // via the onCommand event and/or an action callback\n      const callbackArgs = {\n        cell,\n        row,\n        grid: this._grid,\n        command,\n        item,\n        column: columnDef,\n        dataContext,\n      };\n      this.onCommand.notify(callbackArgs, e, this);\n\n      // execute action callback when defined\n      if (typeof item.action === 'function') {\n        item.action.call(this, e, callbackArgs);\n      }\n\n      if (!e.defaultPrevented) {\n        this.closeMenu(e, { cell, row, grid: this._grid });\n      }\n    }\n  }\n\n  protected handleMenuItemOptionClick(item: MenuOptionItem | 'divider', e: DOMMouseOrTouchEvent<HTMLDivElement>) {\n    if (!item || (item as MenuOptionItem).disabled || (item as MenuOptionItem).divider || item === 'divider') {\n      return;\n    }\n    if (!this._grid.getEditorLock().commitCurrentEdit()) {\n      return;\n    }\n\n    const option = item.option !== undefined ? item.option : '';\n    const row = this._currentRow;\n    const cell = this._currentCell;\n    const columnDef = this._grid.getColumns()[cell];\n    const dataContext = this._grid.getDataItem(row);\n\n    if (option !== undefined) {\n      // user could execute a callback through 2 ways\n      // via the onOptionSelected event and/or an action callback\n      const callbackArgs = {\n        cell,\n        row,\n        grid: this._grid,\n        option,\n        item,\n        column: columnDef,\n        dataContext\n      };\n      this.onOptionSelected.notify(callbackArgs, e, this);\n\n      // execute action callback when defined\n      if (typeof item.action === 'function') {\n        item.action.call(this, e, callbackArgs);\n      }\n\n      if (!e.defaultPrevented) {\n        this.closeMenu(e, { cell, row, grid: this._grid });\n      }\n    }\n  }\n\n  /**\n   * Method that user can pass to override the default behavior.\n   * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\n   * @param overrideFn: override function callback\n   * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\n   */\n  protected runOverrideFunctionWhenExists<T = any>(overrideFn: ((args: any) => boolean) | undefined, args: T): boolean {\n    if (typeof overrideFn === 'function') {\n      return overrideFn.call(this, args);\n    }\n    return true;\n  }\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      Plugins: {\n        CellMenu: SlickCellMenu\n      }\n    }\n  });\n}\n"],
  "mappings": "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",
  "names": []
}
