{
  "version": 3,
  "sources": ["../../../src/plugins/slick.hybridselectionmodel.ts"],
  "sourcesContent": ["import { keyCode as keyCode_, SlickEvent as SlickEvent_, SlickEventData as SlickEventData_, SlickRange as SlickRange_, Utils as Utils_ } from '../slick.core.js';\r\nimport { Draggable as Draggable_ } from '../slick.interactions.js';\r\nimport { SlickCellRangeDecorator as SlickCellRangeDecorator_ } from './slick.cellrangedecorator.js';\r\nimport { SlickCellRangeSelector as SlickCellRangeSelector_ } from './slick.cellrangeselector.js';\r\nimport type { Column, CustomDataView, OnActiveCellChangedEventArgs } from '../models/index.js';\r\nimport type { SlickDataView } from '../slick.dataview.js';\r\nimport type { SlickCrossGridRowMoveManager as SlickCrossGridRowMoveManager_ } from './slick.crossgridrowmovemanager.js';\r\nimport type { SlickRowMoveManager as SlickRowMoveManager_ } from './slick.rowmovemanager.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst Draggable = IIFE_ONLY ? Slick.Draggable : Draggable_;\r\nconst keyCode = IIFE_ONLY ? Slick.keyCode : keyCode_;\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst SlickEventData = IIFE_ONLY ? Slick.EventData : SlickEventData_;\r\nconst SlickRange = IIFE_ONLY ? Slick.Range : SlickRange_;\r\nconst SlickCellRangeDecorator = IIFE_ONLY ? Slick.CellRangeDecorator : SlickCellRangeDecorator_;\r\nconst SlickCellRangeSelector = IIFE_ONLY ? Slick.CellRangeSelector : SlickCellRangeSelector_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\nexport declare type RowSelectOverride = (data: OnActiveCellChangedEventArgs, selectionModel: SlickHybridSelectionModel, grid: SlickGrid) => boolean;\r\n\r\nexport interface HybridSelectionModelOption {\r\n  selectActiveCell: boolean;\r\n  selectActiveRow: boolean;\r\n  cellRangeSelector?: SlickCellRangeSelector_;\r\n  dragToSelect: boolean;\r\n  autoScrollWhenDrag: boolean;\r\n  handleRowMoveManagerColumn: boolean;  // Row Selection on RowMoveManage column\r\n  rowSelectColumnObjectArr: Column[];        // Row Selection on these columns\r\n  rowSelectOverride: RowSelectOverride | undefined;          // function to toggle Row Selection Models\r\n}\r\n\r\nexport class SlickHybridSelectionModel {\r\n  // hybrid selection model is CellSelectionModel except when selecting\r\n  // specific columns, which behave as RowSelectionModel\r\n\r\n  // --\r\n  // public API\r\n  pluginName = 'HybridSelectionModel' as const;\r\n  onSelectedRangesChanged = new SlickEvent<SlickRange_[]>('onSelectedRangesChanged');\r\n\r\n  // --\r\n  // protected props\r\n  protected _cachedPageRowCount = 0;\r\n  protected _dataView?: CustomDataView | SlickDataView;\r\n  protected _grid!: SlickGrid;\r\n  protected _prevSelectedRow?: number;\r\n  protected _prevKeyDown = '';\r\n  protected _ranges: SlickRange_[] = [];\r\n  protected _selector: SlickCellRangeSelector_;\r\n  protected _isRowMoveManagerHandler: any;\r\n  protected _activeSelectionIsRow = false;\r\n  protected _options?: HybridSelectionModelOption;\r\n  protected _defaults: HybridSelectionModelOption = {\r\n    selectActiveCell: true,\r\n    selectActiveRow: true,\r\n    dragToSelect: false,\r\n    autoScrollWhenDrag: true,\r\n    handleRowMoveManagerColumn: true, // Row Selection on RowMoveManage column\r\n    rowSelectColumnObjectArr: [],     // Row Selection on these columns\r\n    rowSelectOverride: undefined,     // function to toggle Row Selection Models\r\n    cellRangeSelector: undefined\r\n\r\n  };\r\n\r\n  constructor(options?: { selectActiveCell: boolean; cellRangeSelector: SlickCellRangeSelector_; }) {\r\n    if (options === undefined || options.cellRangeSelector === undefined) {\r\n      this._selector = new SlickCellRangeSelector({ selectionCss: { border: '2px solid black' } as CSSStyleDeclaration });\r\n    } else {\r\n      this._selector = options.cellRangeSelector;\r\n    }\r\n  }\r\n\r\n  // Region: Setup\r\n  // -----------------------------------------------------------------------------\r\n\r\n  init(grid: SlickGrid) {\r\n    if (Draggable === undefined) {\r\n      throw new Error('Slick.Draggable is undefined, make sure to import \"slick.interactions.js\"');\r\n    }\r\n\r\n    this._options = Utils.extend(true, {}, this._defaults, this._options);\r\n    this._grid = grid;\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n\r\n    if (!this._selector && this._options.dragToSelect) {\r\n      if (!SlickCellRangeDecorator) {\r\n        throw new Error('Slick.CellRangeDecorator is required when option dragToSelect set to true');\r\n      }\r\n      this._selector = new SlickCellRangeSelector({\r\n        selectionCss: { border: 'none' } as CSSStyleDeclaration,\r\n        autoScroll: this._options.autoScrollWhenDrag\r\n      });\r\n    }\r\n\r\n    if (grid.hasDataView()) {\r\n      this._dataView = grid.getData<CustomDataView | SlickDataView>();\r\n    }\r\n    this._grid.onActiveCellChanged.subscribe(this.handleActiveCellChange.bind(this));\r\n    this._grid.onKeyDown.subscribe(this.handleKeyDown.bind(this));\r\n    this._grid.onClick.subscribe(this.handleClick.bind(this));\r\n    if (this._selector) {\r\n      grid.registerPlugin(this._selector);\r\n      this._selector.onCellRangeSelecting.subscribe(this.handleCellRangeSelected.bind(this));\r\n      this._selector.onCellRangeSelected.subscribe(this.handleCellRangeSelected.bind(this));\r\n      this._selector.onBeforeCellRangeSelected.subscribe(this.handleBeforeCellRangeSelected.bind(this));\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    this._grid.onActiveCellChanged.unsubscribe(this.handleActiveCellChange.bind(this));\r\n    this._grid.onKeyDown.unsubscribe(this.handleKeyDown.bind(this));\r\n    this._grid.onClick.unsubscribe(this.handleClick.bind(this));\r\n    this._selector.onCellRangeSelecting.unsubscribe(this.handleCellRangeSelected.bind(this));\r\n    this._selector.onCellRangeSelected.unsubscribe(this.handleCellRangeSelected.bind(this));\r\n    this._selector.onBeforeCellRangeSelected.unsubscribe(this.handleBeforeCellRangeSelected.bind(this));\r\n    this._grid.unregisterPlugin(this._selector);\r\n    this._selector?.destroy();\r\n  }\r\n\r\n  // Region: CellSelectionModel Members\r\n  // -----------------------------------------------------------------------------\r\n\r\n  protected removeInvalidRanges(ranges: SlickRange_[]) {\r\n    const result: SlickRange_[] = [];\r\n\r\n    for (let i = 0; i < ranges.length; i++) {\r\n      const r = ranges[i];\r\n      if (this._grid.canCellBeSelected(r.fromRow, r.fromCell) && this._grid.canCellBeSelected(r.toRow, r.toCell)) {\r\n        result.push(r);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  protected rangesAreEqual(range1: SlickRange_[], range2: SlickRange_[]) {\r\n    let areDifferent = (range1.length !== range2.length);\r\n    if (!areDifferent) {\r\n      for (let i = 0; i < range1.length; i++) {\r\n        if (\r\n          range1[i].fromCell !== range2[i].fromCell\r\n          || range1[i].fromRow !== range2[i].fromRow\r\n          || range1[i].toCell !== range2[i].toCell\r\n          || range1[i].toRow !== range2[i].toRow\r\n        ) {\r\n          areDifferent = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return !areDifferent;\r\n  }\r\n\r\n  // Region: RowSelectionModel Members\r\n  // -----------------------------------------------------------------------------\r\n\r\n  protected rangesToRows(ranges: SlickRange_[]): number[] {\r\n    const rows: number[] = [];\r\n    for (let i = 0; i < ranges.length; i++) {\r\n      for (let j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {\r\n        rows.push(j);\r\n      }\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  protected rowsToRanges(rows: number[]) {\r\n    const ranges: SlickRange_[] = [];\r\n    const lastCell = this._grid.getColumns().length - 1;\r\n    rows.forEach(row => ranges.push(new SlickRange(row, 0, row, lastCell)));\r\n    return ranges;\r\n  }\r\n\r\n  protected getRowsRange(from: number, to: number) {\r\n    let i;\r\n    const rows: number[] = [];\r\n    for (i = from; i <= to; i++) {\r\n      rows.push(i);\r\n    }\r\n    for (i = to; i < from; i++) {\r\n      rows.push(i);\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  getSelectedRows() {\r\n    return this.rangesToRows(this._ranges);\r\n  }\r\n\r\n  setSelectedRows(rows: number[]) {\r\n    this.setSelectedRanges(this.rowsToRanges(rows), 'SlickRowSelectionModel.setSelectedRows', '');\r\n  }\r\n\r\n  // Region: Shared Members\r\n  // -----------------------------------------------------------------------------\r\n\r\n  /** Provide a way to force a recalculation of page row count (for example on grid resize) */\r\n  resetPageRowCount() {\r\n    this._cachedPageRowCount = 0;\r\n  }\r\n\r\n  setSelectedRanges(ranges: SlickRange_[], caller = 'SlickHybridSelectionModel.setSelectedRanges', selectionMode: string) {\r\n    // simple check for: empty selection didn't change, prevent firing onSelectedRangesChanged\r\n    if ((!this._ranges || this._ranges.length === 0) && (!ranges || ranges.length === 0)) { return; }\r\n\r\n    // if range has not changed, don't fire onSelectedRangesChanged\r\n    const rangeHasChanged = !this.rangesAreEqual(this._ranges, ranges);\r\n\r\n    if (this._activeSelectionIsRow) {\r\n      this._ranges = ranges;\r\n\r\n      // provide extra \"caller\" argument through SlickEventData event to avoid breaking the previous pubsub event structure\r\n      // that only accepts an array of selected range `SlickRange[]`, the SlickEventData args will be merged and used later by `onSelectedRowsChanged`\r\n      const eventData = new SlickEventData(new CustomEvent('click', { detail: { caller, selectionMode } }), this._ranges);\r\n      this.onSelectedRangesChanged.notify(this._ranges, eventData);\r\n    } else {\r\n      this._ranges = this.removeInvalidRanges(ranges);\r\n      if (rangeHasChanged) {\r\n        // provide extra \"caller\" argument through SlickEventData event to avoid breaking the previous pubsub event structure\r\n        // that only accepts an array of selected range `SlickRange[]`, the SlickEventData args will be merged and used later by `onSelectedRowsChanged`\r\n        const eventData = new SlickEventData(new CustomEvent('click', { detail: { caller, selectionMode } }), this._ranges);\r\n        this.onSelectedRangesChanged.notify(this._ranges, eventData);\r\n      }\r\n    }\r\n  }\r\n\r\n  currentSelectionModeIsRow() {\r\n    return this._activeSelectionIsRow;\r\n  }\r\n\r\n  getSelectedRanges() {\r\n    return this._ranges;\r\n  }\r\n\r\n  refreshSelections() {\r\n    if (this._activeSelectionIsRow) {\r\n      this.setSelectedRows(this.getSelectedRows());\r\n    } else {\r\n      this.setSelectedRanges(this.getSelectedRanges(), undefined, '');\r\n    }\r\n  }\r\n\r\n  getRowMoveManagerPlugin(): SlickRowMoveManager_ | SlickCrossGridRowMoveManager_ | undefined {\r\n    return this._grid.getPluginByName('RowMoveManager') || this._grid.getPluginByName('CrossGridRowMoveManager');\r\n  }\r\n\r\n  rowSelectionModelIsActive(data: OnActiveCellChangedEventArgs): boolean {\r\n    // work out required selection mode\r\n    if (this._options?.rowSelectOverride) {\r\n      return this._options?.rowSelectOverride(data, this, this._grid);\r\n    }\r\n\r\n    if (this._options?.handleRowMoveManagerColumn) {\r\n      const rowMoveManager = this.getRowMoveManagerPlugin();\r\n      if (rowMoveManager?.isHandlerColumn(data.cell)) { return true; }\r\n    }\r\n\r\n    const targetColumn = this._grid.getVisibleColumns()[data.cell];\r\n    return this._options?.rowSelectColumnObjectArr.includes(targetColumn) || false;\r\n  }\r\n\r\n  protected handleActiveCellChange(_e: SlickEventData_, args: OnActiveCellChangedEventArgs) {\r\n    this._prevSelectedRow = undefined;\r\n    const isCellDefined = Utils.isDefined(args.cell);\r\n    const isRowDefined = Utils.isDefined(args.row);\r\n    this._activeSelectionIsRow = this.rowSelectionModelIsActive(args);\r\n\r\n    if (this._activeSelectionIsRow) {\r\n      if (this._options?.selectActiveRow && args.row !== null) {\r\n        this.setSelectedRanges([new Slick.Range(args.row, 0, args.row, this._grid.getColumns().length - 1)], undefined, '');\r\n      }\r\n    } else {\r\n      if (this._options?.selectActiveCell && isRowDefined && isCellDefined) {\r\n        this.setSelectedRanges([new SlickRange(args.row, args.cell)], undefined, '');\r\n      } else if (!this._options?.selectActiveCell || (!isRowDefined && !isCellDefined)) {\r\n        // clear the previous selection once the cell changes\r\n        this.setSelectedRanges([], undefined, '');\r\n      }\r\n    }\r\n  }\r\n\r\n  protected isKeyAllowed(key: string) {\r\n    return ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'PageDown', 'PageUp', 'Home', 'End'].some(k => k === key);\r\n  }\r\n\r\n  protected handleKeyDown(e: SlickEventData_) {\r\n    if (!this._activeSelectionIsRow) {\r\n      let ranges: SlickRange_[], last: SlickRange_;\r\n      const colLn = this._grid.getColumns().length;\r\n      const active = this._grid.getActiveCell();\r\n      let dataLn = 0;\r\n      if (this._dataView && 'getPagingInfo' in this._dataView) {\r\n        dataLn = this._dataView?.getPagingInfo().pageSize || this._dataView.getLength();\r\n      } else {\r\n        dataLn = this._grid.getDataLength();\r\n      }\r\n\r\n      if (active && (e.shiftKey || e.ctrlKey) && !e.altKey && this.isKeyAllowed(e.key as string)) {\r\n        ranges = this.getSelectedRanges().slice();\r\n        if (!ranges.length) {\r\n          ranges.push(new SlickRange(active.row, active.cell));\r\n        }\r\n        // keyboard can work with last range only\r\n        last = ranges.pop() as SlickRange_;\r\n\r\n        // can't handle selection out of active cell\r\n        if (!last.contains(active.row, active.cell)) {\r\n          last = new SlickRange(active.row, active.cell);\r\n        }\r\n\r\n        let dRow = last.toRow - last.fromRow;\r\n        let dCell = last.toCell - last.fromCell;\r\n\r\n        // walking direction\r\n        const dirRow = active.row === last.fromRow ? 1 : -1;\r\n        const dirCell = active.cell === last.fromCell ? 1 : -1;\r\n        const isSingleKeyMove = e.key!.startsWith('Arrow');\r\n        let toCell: undefined | number = undefined;\r\n        let toRow = 0;\r\n\r\n        if (isSingleKeyMove && !e.ctrlKey) {\r\n          // single cell move: (Arrow{Up/ArrowDown/ArrowLeft/ArrowRight})\r\n          if (e.key === 'ArrowLeft') {\r\n            dCell -= dirCell;\r\n          } else if (e.key === 'ArrowRight') {\r\n            dCell += dirCell;\r\n          } else if (e.key === 'ArrowUp') {\r\n            dRow -= dirRow;\r\n          } else if (e.key === 'ArrowDown') {\r\n            dRow += dirRow;\r\n          }\r\n          toRow = active.row + dirRow * dRow;\r\n        } else {\r\n          // multiple cell moves: (Home, End, Page{Up/Down})\r\n          if (this._cachedPageRowCount < 1) {\r\n            this._cachedPageRowCount = this._grid.getViewportRowCount();\r\n          }\r\n          if (this._prevSelectedRow === undefined) {\r\n            this._prevSelectedRow = active.row;\r\n          }\r\n\r\n          if (e.shiftKey && !e.ctrlKey && e.key === 'Home') {\r\n            toCell = 0;\r\n            toRow = active.row;\r\n          } else if (e.shiftKey && !e.ctrlKey && e.key === 'End') {\r\n            toCell = colLn - 1;\r\n            toRow = active.row;\r\n          } else if (e.ctrlKey && e.shiftKey && e.key === 'Home') {\r\n            toCell = 0;\r\n            toRow = 0;\r\n          } else if (e.ctrlKey && e.shiftKey && e.key === 'End') {\r\n            toCell = colLn - 1;\r\n            toRow = dataLn - 1;\r\n          } else if (e.key === 'PageUp') {\r\n            if (this._prevSelectedRow >= 0) {\r\n              toRow = this._prevSelectedRow - this._cachedPageRowCount;\r\n            }\r\n            if (toRow < 0) {\r\n              toRow = 0;\r\n            }\r\n          } else if (e.key === 'PageDown') {\r\n            if (this._prevSelectedRow <= dataLn - 1) {\r\n              toRow = this._prevSelectedRow + this._cachedPageRowCount;\r\n            }\r\n            if (toRow > dataLn - 1) {\r\n              toRow = dataLn - 1;\r\n            }\r\n          }\r\n          this._prevSelectedRow = toRow;\r\n        }\r\n\r\n        // define new selection range\r\n        toCell ??= active.cell + dirCell * dCell;\r\n        const new_last = new SlickRange(active.row, active.cell, toRow, toCell);\r\n        if (this.removeInvalidRanges([new_last]).length) {\r\n          ranges.push(new_last);\r\n          const viewRow = dirRow > 0 ? new_last.toRow : new_last.fromRow;\r\n          const viewCell = dirCell > 0 ? new_last.toCell : new_last.fromCell;\r\n\r\n          if (isSingleKeyMove) {\r\n            this._grid.scrollRowIntoView(viewRow);\r\n            this._grid.scrollCellIntoView(viewRow, viewCell);\r\n          } else {\r\n            this._grid.scrollRowIntoView(toRow);\r\n            this._grid.scrollCellIntoView(toRow, viewCell);\r\n          }\r\n        } else {\r\n          ranges.push(last);\r\n        }\r\n\r\n        this.setSelectedRanges(ranges, undefined, '');\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this._prevKeyDown = e.key as string;\r\n      }\r\n    } else {\r\n      const activeRow = this._grid.getActiveCell();\r\n      if (this._grid.getOptions().multiSelect && activeRow\r\n        && e.shiftKey && !e.ctrlKey && !e.altKey && !e.metaKey\r\n        && (e.which === keyCode.UP || e.which === keyCode.DOWN)) {\r\n        let selectedRows = this.getSelectedRows();\r\n        selectedRows.sort(function (x, y) {\r\n          return x - y;\r\n        });\r\n\r\n        if (!selectedRows.length) {\r\n          selectedRows = [activeRow.row];\r\n        }\r\n\r\n        let top = selectedRows[0];\r\n        let bottom = selectedRows[selectedRows.length - 1];\r\n        let active: number;\r\n\r\n        if (e.which === keyCode.DOWN) {\r\n          active = activeRow.row < bottom || top === bottom ? ++bottom : ++top;\r\n        } else {\r\n          active = activeRow.row < bottom ? --bottom : --top;\r\n        }\r\n\r\n        if (active >= 0 && active < this._grid.getDataLength()) {\r\n          this._grid.scrollRowIntoView(active);\r\n          const tempRanges = this.rowsToRanges(this.getRowsRange(top, bottom));\r\n          this.setSelectedRanges(tempRanges, undefined, '');\r\n        }\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n      }\r\n    }\r\n  }\r\n\r\n  protected handleClick(e: SlickEventData_): boolean | void {\r\n    if (!this._activeSelectionIsRow) { return; }\r\n\r\n    const cell = this._grid.getCellFromEvent(e);\r\n    if (!cell || !this._grid.canCellBeActive(cell.row, cell.cell)) {\r\n      return false;\r\n    }\r\n\r\n    if (!this._grid.getOptions().multiSelect || (\r\n      !e.ctrlKey && !e.shiftKey && !e.metaKey)) {\r\n      return false;\r\n    }\r\n\r\n    let selection = this.rangesToRows(this._ranges);\r\n    const idx = selection.indexOf(cell.row);\r\n\r\n    if (idx === -1 && (e.ctrlKey || e.metaKey)) {\r\n      selection.push(cell.row);\r\n      this._grid.setActiveCell(cell.row, cell.cell);\r\n    } else if (idx !== -1 && (e.ctrlKey || e.metaKey)) {\r\n      selection = selection.filter((o) => o !== cell.row);\r\n      this._grid.setActiveCell(cell.row, cell.cell);\r\n    } else if (selection.length && e.shiftKey) {\r\n      const last = selection.pop() as number;\r\n      const from = Math.min(cell.row, last);\r\n      const to = Math.max(cell.row, last);\r\n      selection = [];\r\n      for (let i = from; i <= to; i++) {\r\n        if (i !== last) {\r\n          selection.push(i);\r\n        }\r\n      }\r\n      selection.push(last);\r\n      this._grid.setActiveCell(cell.row, cell.cell);\r\n    }\r\n\r\n    const tempRanges = this.rowsToRanges(selection);\r\n    this.setSelectedRanges(tempRanges, undefined, '');\r\n    e.stopImmediatePropagation();\r\n\r\n    return true;\r\n  }\r\n\r\n  protected handleBeforeCellRangeSelected(e: SlickEventData_, cell: { row: number; cell: number; }): boolean | void {\r\n    if (this._activeSelectionIsRow) {\r\n      if (!this._isRowMoveManagerHandler) {\r\n        const rowMoveManager = this._grid.getPluginByName<SlickRowMoveManager_>('RowMoveManager') || this._grid.getPluginByName<SlickCrossGridRowMoveManager_>('CrossGridRowMoveManager');\r\n        this._isRowMoveManagerHandler = rowMoveManager ? rowMoveManager.isHandlerColumn : Utils.noop;\r\n      }\r\n      if (this._grid.getEditorLock().isActive() || this._isRowMoveManagerHandler(cell.cell)) {\r\n        e.stopPropagation();\r\n        return false;\r\n      }\r\n      this._grid.setActiveCell(cell.row, cell.cell);\r\n    } else {\r\n      if (this._grid.getEditorLock().isActive()) {\r\n        e.stopPropagation();\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  protected handleCellRangeSelected(_e: SlickEventData_, args: { range: SlickRange_; selectionMode: string; }) {\r\n    if (this._activeSelectionIsRow) {\r\n      if (!this._grid.getOptions().multiSelect || !this._options?.selectActiveRow) {\r\n        return false;\r\n      }\r\n      this.setSelectedRanges([new SlickRange(args.range.fromRow, 0, args.range.toRow, this._grid.getColumns().length - 1)], undefined, args.selectionMode);\r\n    } else {\r\n      this._grid.setActiveCell(args.range.fromRow, args.range.fromCell, false, false, true);\r\n      this.setSelectedRanges([args.range], undefined, args.selectionMode);\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      HybridSelectionModel: SlickHybridSelectionModel\r\n    }\r\n  });\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
