{
  "version": 3,
  "sources": ["import-ns:../slick.core.js", "../../../src/plugins/slick.customtooltip.js"],
  "sourcesContent": ["// empty string, do nothing", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CustomTooltip = void 0;\nvar slick_core_1 = require(\"../slick.core\");\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nvar SlickEventHandler = IIFE_ONLY ? Slick.EventHandler : slick_core_1.SlickEventHandler;\nvar Utils = IIFE_ONLY ? Slick.Utils : slick_core_1.Utils;\n/**\n * CustomTooltip plugin to show/hide tooltips when columns are too narrow to fit content.\n * @constructor\n * @param {boolean} [options.className=\"slick-custom-tooltip\"]  - custom tooltip class name\n * @param {boolean} [options.offsetTop=5]                       - tooltip offset from the top\n */\nvar CustomTooltip = /** @class */ (function () {\n    function CustomTooltip(tooltipOptions) {\n        this.tooltipOptions = tooltipOptions;\n        // --\n        // public API\n        this.pluginName = 'CustomTooltip';\n        this._defaults = {\n            className: 'slick-custom-tooltip',\n            offsetLeft: 0,\n            offsetRight: 0,\n            offsetTopBottom: 4,\n            hideArrow: false,\n            tooltipTextMaxLength: 700,\n            regularTooltipWhiteSpace: 'pre-line',\n            whiteSpace: 'normal',\n        };\n        this._eventHandler = new SlickEventHandler();\n    }\n    /**\n     * Initialize plugin.\n     */\n    CustomTooltip.prototype.init = function (grid) {\n        var _this = this;\n        this._grid = grid;\n        var _data = (grid === null || grid === void 0 ? void 0 : grid.getData()) || [];\n        this._dataView = Array.isArray(_data) ? null : _data;\n        this._gridOptions = (grid.getOptions() || {});\n        this._options = Utils.extend(true, {}, this._defaults, this._gridOptions.customTooltip, this.tooltipOptions);\n        this._eventHandler\n            .subscribe(grid.onMouseEnter, this.handleOnMouseEnter.bind(this))\n            .subscribe(grid.onHeaderMouseEnter, function (e, args) { return _this.handleOnHeaderMouseEnterByType(e, args, 'slick-header-column'); })\n            .subscribe(grid.onHeaderRowMouseEnter, function (e, args) { return _this.handleOnHeaderMouseEnterByType(e, args, 'slick-headerrow-column'); })\n            .subscribe(grid.onMouseLeave, function () { return _this.hideTooltip(); })\n            .subscribe(grid.onHeaderMouseLeave, function () { return _this.hideTooltip(); })\n            .subscribe(grid.onHeaderRowMouseLeave, function () { return _this.hideTooltip(); });\n    };\n    /**\n     * Destroy plugin.\n     */\n    CustomTooltip.prototype.destroy = function () {\n        this.hideTooltip();\n        this._eventHandler.unsubscribeAll();\n    };\n    /** depending on the selector type, execute the necessary handler code */\n    CustomTooltip.prototype.handleOnHeaderMouseEnterByType = function (e, args, selector) {\n        // before doing anything, let's remove any previous tooltip before\n        // and cancel any opened Promise/Observable when using async\n        this.hideTooltip();\n        var cell = {\n            row: -1,\n            cell: this._grid.getColumns().findIndex(function (col) { var _a; return ((_a = args === null || args === void 0 ? void 0 : args.column) === null || _a === void 0 ? void 0 : _a.id) === col.id; })\n        };\n        var columnDef = args.column;\n        var item = {};\n        var isHeaderRowType = selector === 'slick-headerrow-column';\n        // run the override function (when defined), if the result is false it won't go further\n        args = args || {};\n        args.cell = cell.cell;\n        args.row = cell.row;\n        args.columnDef = columnDef;\n        args.dataContext = item;\n        args.grid = this._grid;\n        args.type = isHeaderRowType ? 'header-row' : 'header';\n        this._cellTooltipOptions = Utils.extend(true, {}, this._options, columnDef.customTooltip);\n        if ((columnDef === null || columnDef === void 0 ? void 0 : columnDef.disableTooltip) || !this.runOverrideFunctionWhenExists(this._cellTooltipOptions.usabilityOverride, args)) {\n            return;\n        }\n        if (columnDef && e.target) {\n            this._cellNodeElm = e.target.closest(\".\".concat(selector));\n            var formatter = isHeaderRowType ? this._cellTooltipOptions.headerRowFormatter : this._cellTooltipOptions.headerFormatter;\n            if (this._cellTooltipOptions.useRegularTooltip || !formatter) {\n                var formatterOrText = !isHeaderRowType ? columnDef.name : this._cellTooltipOptions.useRegularTooltip ? null : formatter;\n                this.renderRegularTooltip(formatterOrText, cell, null, columnDef, item);\n            }\n            else if (this._cellNodeElm && typeof formatter === 'function') {\n                this.renderTooltipFormatter(formatter, cell, null, columnDef, item);\n            }\n        }\n    };\n    /**\n     * Handle mouse entering grid cell to show tooltip.\n     * @param {jQuery.Event} e - The event\n     */\n    CustomTooltip.prototype.handleOnMouseEnter = function (e, args) {\n        var _this = this;\n        var _a, _b;\n        // before doing anything, let's remove any previous tooltip before\n        // and cancel any opened Promise/Observable when using async\n        this.hideTooltip();\n        if (this._grid && e) {\n            // get cell only when it's possible (ie, Composite Editor will not be able to get cell and so it will never show any tooltip)\n            var targetClassName = (_b = (_a = event === null || event === void 0 ? void 0 : event.target) === null || _a === void 0 ? void 0 : _a.closest('.slick-cell')) === null || _b === void 0 ? void 0 : _b.className;\n            var cell_1 = (targetClassName && /l\\d+/.exec(targetClassName || '')) ? this._grid.getCellFromEvent(e) : null;\n            if (cell_1) {\n                var item_1 = this._dataView ? this._dataView.getItem(cell_1.row) : this._grid.getDataItem(cell_1.row);\n                var columnDef_1 = this._grid.getColumns()[cell_1.cell];\n                this._cellNodeElm = this._grid.getCellNode(cell_1.row, cell_1.cell);\n                this._cellTooltipOptions = Utils.extend(true, {}, this._options, columnDef_1.customTooltip);\n                if (item_1 && columnDef_1) {\n                    // run the override function (when defined), if the result is false it won't go further\n                    args = args || {};\n                    args.cell = cell_1.cell;\n                    args.row = cell_1.row;\n                    args.columnDef = columnDef_1;\n                    args.dataContext = item_1;\n                    args.grid = this._grid;\n                    args.type = 'cell';\n                    if ((columnDef_1 === null || columnDef_1 === void 0 ? void 0 : columnDef_1.disableTooltip) || !this.runOverrideFunctionWhenExists(this._cellTooltipOptions.usabilityOverride, args)) {\n                        return;\n                    }\n                    var value_1 = item_1.hasOwnProperty(columnDef_1.field) ? item_1[columnDef_1.field] : null;\n                    if (this._cellTooltipOptions.useRegularTooltip || !this._cellTooltipOptions.formatter) {\n                        this.renderRegularTooltip(columnDef_1.formatter, cell_1, value_1, columnDef_1, item_1);\n                    }\n                    else {\n                        if (typeof this._cellTooltipOptions.formatter === 'function') {\n                            this.renderTooltipFormatter(this._cellTooltipOptions.formatter, cell_1, value_1, columnDef_1, item_1);\n                        }\n                        if (typeof this._cellTooltipOptions.asyncProcess === 'function') {\n                            var asyncProcess = this._cellTooltipOptions.asyncProcess(cell_1.row, cell_1.cell, value_1, columnDef_1, item_1, this._grid);\n                            if (!this._cellTooltipOptions.asyncPostFormatter) {\n                                throw new Error('[SlickGrid] when using \"asyncProcess\", you must also provide an \"asyncPostFormatter\" formatter');\n                            }\n                            if (asyncProcess instanceof Promise) {\n                                // create a new cancellable promise which will resolve, unless it's cancelled, with the udpated `dataContext` object that includes the `this._this._params`\n                                this._cancellablePromise = this.cancellablePromise(asyncProcess);\n                                this._cancellablePromise.promise\n                                    .then(function (asyncResult) {\n                                    _this.asyncProcessCallback(asyncResult, cell_1, value_1, columnDef_1, item_1);\n                                })\n                                    .catch(function (error) {\n                                    // we will throw back any errors, unless it's a cancelled promise which in that case will be disregarded (thrown by the promise wrapper cancel() call)\n                                    if (!(error.isPromiseCancelled)) {\n                                        throw error;\n                                    }\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n    CustomTooltip.prototype.findFirstElementAttribute = function (inputElm, attributes) {\n        if (inputElm) {\n            var outputAttrData_1 = null;\n            attributes.forEach(function (attribute) {\n                var attrData = inputElm.getAttribute(attribute);\n                if (attrData) {\n                    outputAttrData_1 = attrData;\n                }\n            });\n            return outputAttrData_1;\n        }\n        return null;\n    };\n    /**\n     * Parse the cell formatter and assume it might be html\n     * then create a temporary html element to easily retrieve the first [title=\"\"] attribute text content\n     * also clear the \"title\" attribute from the grid div text content so that it won't show also as a 2nd browser tooltip\n     */\n    CustomTooltip.prototype.renderRegularTooltip = function (formatterOrText, cell, value, columnDef, item) {\n        var tmpDiv = document.createElement('div');\n        tmpDiv.innerHTML = this.parseFormatterAndSanitize(formatterOrText, cell, value, columnDef, item);\n        var tooltipText = columnDef.toolTip || '';\n        var tmpTitleElm;\n        if (!tooltipText) {\n            if ((this._cellNodeElm && (this._cellNodeElm.clientWidth < this._cellNodeElm.scrollWidth)) && !this._cellTooltipOptions.useRegularTooltipFromFormatterOnly) {\n                tooltipText = (this._cellNodeElm.textContent || '').trim() || '';\n                if (this._cellTooltipOptions.tooltipTextMaxLength && (tooltipText.length > this._cellTooltipOptions.tooltipTextMaxLength)) {\n                    tooltipText = tooltipText.substring(0, this._cellTooltipOptions.tooltipTextMaxLength - 3) + '...';\n                }\n                tmpTitleElm = this._cellNodeElm;\n            }\n            else {\n                if (this._cellTooltipOptions.useRegularTooltipFromFormatterOnly) {\n                    tmpTitleElm = tmpDiv.querySelector('[title], [data-slick-tooltip]');\n                }\n                else {\n                    tmpTitleElm = this.findFirstElementAttribute(this._cellNodeElm, ['title', 'data-slick-tooltip']) ? this._cellNodeElm : tmpDiv.querySelector('[title], [data-slick-tooltip]');\n                    if ((!tmpTitleElm || !this.findFirstElementAttribute(tmpTitleElm, ['title', 'data-slick-tooltip'])) && this._cellNodeElm) {\n                        tmpTitleElm = this._cellNodeElm.querySelector('[title], [data-slick-tooltip]');\n                    }\n                }\n                if (!tooltipText || (typeof formatterOrText === 'function' && this._cellTooltipOptions.useRegularTooltipFromFormatterOnly)) {\n                    tooltipText = this.findFirstElementAttribute(tmpTitleElm, ['title', 'data-slick-tooltip']) || '';\n                }\n            }\n        }\n        if (tooltipText !== '') {\n            this.renderTooltipFormatter(formatterOrText, cell, value, columnDef, item, tooltipText);\n        }\n        // also clear any \"title\" attribute to avoid showing a 2nd browser tooltip\n        this.swapAndClearTitleAttribute(tmpTitleElm, tooltipText);\n    };\n    /**\n   * swap and copy the \"title\" attribute into a new custom attribute then clear the \"title\" attribute\n   * from the grid div text content so that it won't show also as a 2nd browser tooltip\n   */\n    CustomTooltip.prototype.swapAndClearTitleAttribute = function (inputTitleElm, tooltipText) {\n        // the title attribute might be directly on the slick-cell container element (when formatter returns a result object)\n        // OR in a child element (most commonly as a custom formatter)\n        var titleElm = inputTitleElm || (this._cellNodeElm && ((this._cellNodeElm.hasAttribute('title') && this._cellNodeElm.getAttribute('title')) ? this._cellNodeElm : this._cellNodeElm.querySelector('[title]')));\n        // flip tooltip text from `title` to `data-slick-tooltip`\n        if (titleElm) {\n            titleElm.setAttribute('data-slick-tooltip', tooltipText || '');\n            if (titleElm.hasAttribute('title')) {\n                titleElm.setAttribute('title', '');\n            }\n        }\n    };\n    CustomTooltip.prototype.asyncProcessCallback = function (asyncResult, cell, value, columnDef, dataContext) {\n        var _a;\n        this.hideTooltip();\n        var itemWithAsyncData = Utils.extend(true, {}, dataContext, (_a = {}, _a[this._cellTooltipOptions.asyncParamsPropName || '__params'] = asyncResult, _a));\n        this.renderTooltipFormatter(this._cellTooltipOptions.asyncPostFormatter, cell, value, columnDef, itemWithAsyncData);\n    };\n    CustomTooltip.prototype.cancellablePromise = function (inputPromise) {\n        var hasCancelled = false;\n        if (inputPromise instanceof Promise) {\n            return {\n                promise: inputPromise.then(function (result) {\n                    if (hasCancelled) {\n                        throw { isPromiseCancelled: true };\n                    }\n                    return result;\n                }),\n                cancel: function () { return hasCancelled = true; }\n            };\n        }\n        return inputPromise;\n    };\n    CustomTooltip.prototype.getHtmlElementOffset = function (element) {\n        if (!element) {\n            return undefined;\n        }\n        var rect = element.getBoundingClientRect();\n        var left = 0;\n        var top = 0;\n        var bottom = 0;\n        var right = 0;\n        if (rect.top !== undefined && rect.left !== undefined) {\n            top = rect.top + window.pageYOffset;\n            left = rect.left + window.pageXOffset;\n            right = rect.right;\n            bottom = rect.bottom;\n        }\n        return { top: top, left: left, bottom: bottom, right: right };\n    };\n    /**\n     * hide (remove) tooltip from the DOM,\n     * when using async process, it will also cancel any opened Promise/Observable that might still be opened/pending.\n     */\n    CustomTooltip.prototype.hideTooltip = function () {\n        var _a, _b, _c;\n        (_a = this._cancellablePromise) === null || _a === void 0 ? void 0 : _a.cancel();\n        var prevTooltip = document.body.querySelector(\".\".concat((_c = (_b = this._cellTooltipOptions) === null || _b === void 0 ? void 0 : _b.className) !== null && _c !== void 0 ? _c : this._defaults.className, \".\").concat(this._grid.getUID()));\n        prevTooltip === null || prevTooltip === void 0 ? void 0 : prevTooltip.remove();\n    };\n    /**\n     * Reposition the Tooltip to be top-left position over the cell.\n     * By default we use an \"auto\" mode which will allow to position the Tooltip to the best logical position in the window, also when we mention position, we are talking about the relative position against the grid cell.\n     * We can assume that in 80% of the time the default position is top-right, the default is \"auto\" but we can also override it and use a specific position.\n     * Most of the time positioning of the tooltip will be to the \"top-right\" of the cell is ok but if our column is completely on the right side then we'll want to change the position to \"left\" align.\n     * Same goes for the top/bottom position, Most of the time positioning the tooltip to the \"top\" but if we are hovering a cell at the top of the grid and there's no room to display it then we might need to reposition to \"bottom\" instead.\n     */\n    CustomTooltip.prototype.reposition = function (cell) {\n        var _a, _b;\n        if (this._tooltipElm) {\n            this._cellNodeElm = (this._cellNodeElm || this._grid.getCellNode(cell.row, cell.cell));\n            var cellPosition = this.getHtmlElementOffset(this._cellNodeElm);\n            var cellContainerWidth = this._cellNodeElm.offsetWidth;\n            var calculatedTooltipHeight = this._tooltipElm.getBoundingClientRect().height;\n            var calculatedTooltipWidth = this._tooltipElm.getBoundingClientRect().width;\n            var calculatedBodyWidth = document.body.offsetWidth || window.innerWidth;\n            // first calculate the default (top/left) position\n            var newPositionTop = ((cellPosition === null || cellPosition === void 0 ? void 0 : cellPosition.top) || 0) - this._tooltipElm.offsetHeight - ((_a = this._cellTooltipOptions.offsetTopBottom) !== null && _a !== void 0 ? _a : 0);\n            var newPositionLeft = ((cellPosition === null || cellPosition === void 0 ? void 0 : cellPosition.left) || 0) - ((_b = this._cellTooltipOptions.offsetRight) !== null && _b !== void 0 ? _b : 0);\n            // user could explicitely use a \"left-align\" arrow position, (when user knows his column is completely on the right in the grid)\n            // or when using \"auto\" and we detect not enough available space then we'll position to the \"left\" of the cell\n            var position = this._cellTooltipOptions.position || 'auto';\n            if (position === 'center') {\n                newPositionLeft += (cellContainerWidth / 2) - (calculatedTooltipWidth / 2) + (this._cellTooltipOptions.offsetRight || 0);\n                this._tooltipElm.classList.remove('arrow-left-align');\n                this._tooltipElm.classList.remove('arrow-right-align');\n                this._tooltipElm.classList.add('arrow-center-align');\n            }\n            else if (position === 'right-align' || ((position === 'auto' || position !== 'left-align') && (newPositionLeft + calculatedTooltipWidth) > calculatedBodyWidth)) {\n                newPositionLeft -= (calculatedTooltipWidth - cellContainerWidth - (this._cellTooltipOptions.offsetLeft || 0));\n                this._tooltipElm.classList.remove('arrow-center-align');\n                this._tooltipElm.classList.remove('arrow-left-align');\n                this._tooltipElm.classList.add('arrow-right-align');\n            }\n            else {\n                this._tooltipElm.classList.remove('arrow-center-align');\n                this._tooltipElm.classList.remove('arrow-right-align');\n                this._tooltipElm.classList.add('arrow-left-align');\n            }\n            // do the same calculation/reposition with top/bottom (default is top of the cell or in other word starting from the cell going down)\n            if (position === 'bottom' || (position === 'auto' && calculatedTooltipHeight > Utils.calculateAvailableSpace(this._cellNodeElm).top)) {\n                newPositionTop = ((cellPosition === null || cellPosition === void 0 ? void 0 : cellPosition.top) || 0) + (this._gridOptions.rowHeight || 0) + (this._cellTooltipOptions.offsetTopBottom || 0);\n                this._tooltipElm.classList.remove('arrow-down');\n                this._tooltipElm.classList.add('arrow-up');\n            }\n            else {\n                this._tooltipElm.classList.add('arrow-down');\n                this._tooltipElm.classList.remove('arrow-up');\n            }\n            // reposition the tooltip over the cell (90% of the time this will end up using a position on the \"right\" of the cell)\n            this._tooltipElm.style.top = newPositionTop + 'px';\n            this._tooltipElm.style.left = newPositionLeft + 'px';\n        }\n    };\n    /**\n     * Parse the Custom Formatter (when provided) or return directly the text when it is already a string.\n     * We will also sanitize the text in both cases before returning it so that it can be used safely.\n     */\n    CustomTooltip.prototype.parseFormatterAndSanitize = function (formatterOrText, cell, value, columnDef, item) {\n        if (typeof formatterOrText === 'function') {\n            var tooltipText = formatterOrText(cell.row, cell.cell, value, columnDef, item, this._grid);\n            var formatterText = (typeof tooltipText === 'object' && (tooltipText === null || tooltipText === void 0 ? void 0 : tooltipText.text)) ? tooltipText.text : (typeof tooltipText === 'string' ? tooltipText : '');\n            return this._grid.sanitizeHtmlString(formatterText);\n        }\n        else if (typeof formatterOrText === 'string') {\n            return this._grid.sanitizeHtmlString(formatterOrText);\n        }\n        return '';\n    };\n    CustomTooltip.prototype.renderTooltipFormatter = function (formatter, cell, value, columnDef, item, tooltipText, inputTitleElm) {\n        var _a, _b, _c, _d, _e;\n        // create the tooltip DOM element with the text returned by the Formatter\n        this._tooltipElm = document.createElement('div');\n        this._tooltipElm.className = (this._cellTooltipOptions.className || this._defaults.className);\n        this._tooltipElm.classList.add(this._grid.getUID());\n        this._tooltipElm.classList.add('l' + cell.cell);\n        this._tooltipElm.classList.add('r' + cell.cell);\n        var outputText = tooltipText || this.parseFormatterAndSanitize(formatter, cell, value, columnDef, item) || '';\n        outputText = (this._cellTooltipOptions.tooltipTextMaxLength && outputText.length > this._cellTooltipOptions.tooltipTextMaxLength) ? outputText.substring(0, this._cellTooltipOptions.tooltipTextMaxLength - 3) + '...' : outputText;\n        var finalOutputText = '';\n        if (!tooltipText || ((_a = this._cellTooltipOptions) === null || _a === void 0 ? void 0 : _a.renderRegularTooltipAsHtml)) {\n            finalOutputText = this._grid.sanitizeHtmlString(outputText);\n            this._tooltipElm.innerHTML = finalOutputText;\n            this._tooltipElm.style.whiteSpace = (_c = (_b = this._cellTooltipOptions) === null || _b === void 0 ? void 0 : _b.whiteSpace) !== null && _c !== void 0 ? _c : this._defaults.whiteSpace;\n        }\n        else {\n            finalOutputText = outputText || '';\n            this._tooltipElm.textContent = finalOutputText;\n            this._tooltipElm.style.whiteSpace = (_e = (_d = this._cellTooltipOptions) === null || _d === void 0 ? void 0 : _d.regularTooltipWhiteSpace) !== null && _e !== void 0 ? _e : this._defaults.regularTooltipWhiteSpace; // use `pre` so that sequences of white space are collapsed. Lines are broken at newline characters\n        }\n        // optional max height/width of the tooltip container\n        if (this._cellTooltipOptions.maxHeight) {\n            this._tooltipElm.style.maxHeight = this._cellTooltipOptions.maxHeight + 'px';\n        }\n        if (this._cellTooltipOptions.maxWidth) {\n            this._tooltipElm.style.maxWidth = this._cellTooltipOptions.maxWidth + 'px';\n        }\n        // when do have text to show, then append the new tooltip to the html body & reposition the tooltip\n        if (finalOutputText) {\n            document.body.appendChild(this._tooltipElm);\n            // reposition the tooltip on top of the cell that triggered the mouse over event\n            this.reposition(cell);\n            // user could optionally hide the tooltip arrow (we can simply update the CSS variables, that's the only way we have to update CSS pseudo)\n            if (!this._cellTooltipOptions.hideArrow) {\n                this._tooltipElm.classList.add('tooltip-arrow');\n            }\n            // also clear any \"title\" attribute to avoid showing a 2nd browser tooltip\n            this.swapAndClearTitleAttribute(inputTitleElm, outputText);\n        }\n    };\n    /**\n     * Method that user can pass to override the default behavior.\n     * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\n     * @param overrideFn: override function callback\n     * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\n     */\n    CustomTooltip.prototype.runOverrideFunctionWhenExists = function (overrideFn, args) {\n        if (typeof overrideFn === 'function') {\n            return overrideFn.call(this, args);\n        }\n        return true;\n    };\n    CustomTooltip.prototype.setOptions = function (newOptions) {\n        this._options = Utils.extend({}, this._options, newOptions);\n    };\n    return CustomTooltip;\n}());\nexports.CustomTooltip = CustomTooltip;\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n    Utils.extend(true, window, {\n        Slick: {\n            Plugins: {\n                CustomTooltip: CustomTooltip\n            }\n        }\n    });\n}\n"],
  "mappings": "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",
  "names": ["CustomTooltip"]
}
