{
  "version": 3,
  "sources": ["../../../src/plugins/slick.contextmenu.js"],
  "sourcesContent": ["import {\n  BindingEventService as BindingEventService_,\n  Event as SlickEvent_,\n  EventData as EventData_,\n  EventHandler as EventHandler_,\n  Utils as Utils_\n} from '../slick.core';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst EventData = IIFE_ONLY ? Slick.EventData : EventData_;\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : EventHandler_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n  /***\n   * A plugin to add Context Menu (mouse right+click), it subscribes to the cell \"onContextMenu\" event.\n   * The \"contextMenu\" is defined in the Grid Options object\n   * You can use it to change a data property (only 1) through a list of Options AND/OR through a list of Commands.\n   * A good example of a Command would be an Export to CSV, that can be run from anywhere in the grid by doing a mouse right+click\n   *\n   * Note:\n   *   There is only 1 list of Options, so typically that would be use for 1 column\n   *   if you plan to use different Options for different columns, then the CellMenu plugin might be better suited.\n   *\n   * USAGE:\n   *\n   * Add the slick.contextmenu.(js|css) files and register it with the grid.\n   *\n   * To specify a menu in a column header, extend the column definition like so:\n   * var contextMenuPlugin = new Slick.Plugins.ContextMenu(columns, grid, options);\n   *\n   * Available grid options, by defining a contextMenu object:\n   *\n   *  var options = {\n   *    enableCellNavigation: true,\n   *    contextMenu: {\n   *      optionTitle: 'Change Priority',\n   *      optionShownOverColumnIds: [\"priority\"],\n   *      optionItems: [\n   *        { option: 0, title: 'none', cssClass: 'italic' },\n   *        { divider: true },\n   *        \"divider\" // just the string is also accepted\n   *        { option: 1, iconCssClass: 'fa fa-fire grey', title: 'Low' },\n   *        { option: 3, iconCssClass: 'fa fa-fire red', title: 'High' },\n   *        { option: 2, iconCssClass: 'fa fa-fire orange', title: 'Medium' },\n   *        { option: 4, iconCssClass: 'fa fa-fire', title: 'Extreme', disabled: true },\n   *      ],\n   *      commandTitle: 'Commands',\n   *      commandShownOverColumnIds: [\"title\", \"complete\", \"start\", \"finish\", \"effortDriven\"],\n   *      commandItems: [\n   *        { command: 'export-excel', title: 'Export to CSV', iconCssClass: 'fa fa-file-excel-o', cssClass: '' },\n   *        { command: 'delete-row', title: 'Delete Row', cssClass: 'bold', textCssClass: 'red' },\n   *        { command: 'help', title: 'Help', iconCssClass: 'fa fa-question-circle',},\n   *        { divider: true },\n   *      ],\n   *    }\n   *  };\n   *\n   *\n   * Available contextMenu properties:\n   *    commandTitle:               Title of the Command section (optional)\n   *    commandItems:               Array of Command item objects (command/title pair)\n   *    commandShownOverColumnIds:  Define which column to show the Commands list. If not defined (defaults), the menu will be shown over all columns\n   *    optionTitle:                Title of the Option section (optional)\n   *    optionItems:                Array of Options item objects (option/title pair)\n   *    optionShownOverColumnIds:   Define which column to show the Options list. If not defined (defaults), the menu will be shown over all columns\n   *    hideCloseButton:            Hide the Close button on top right (defaults to false)\n   *    hideCommandSection:         Hide the Commands section even when the commandItems array is filled (defaults to false)\n   *    hideMenuOnScroll:           Do we want to hide the Cell Menu when a scrolling event occurs (defaults to false)?\n   *    hideOptionSection:          Hide the Options section even when the optionItems array is filled (defaults to false)\n   *    maxHeight:                  Maximum height that the drop menu will have, can be a number (250) or text (\"none\")\n   *    width:                      Width that the drop menu will have, can be a number (250) or text (defaults to \"auto\")\n   *    autoAdjustDrop:             Auto-align dropup or dropdown menu to the left or right depending on grid viewport available space (defaults to true)\n   *    autoAdjustDropOffset:       Optionally add an offset to the auto-align of the drop menu (defaults to -4)\n   *    autoAlignSide:              Auto-align drop menu to the left or right depending on grid viewport available space (defaults to true)\n   *    autoAlignSideOffset:        Optionally add an offset to the left/right side auto-align (defaults to 0)\n   *    menuUsabilityOverride:      Callback method that user can override the default behavior of enabling/disabling the menu from being usable (must be combined with a custom formatter)\n   *\n   *\n   * Available menu Command/Option item properties:\n   *    action:                     Optionally define a callback function that gets executed when item is chosen (and/or use the onCommand event)\n   *    command:                    A command identifier to be passed to the onCommand event handlers (when using \"commandItems\").\n   *    option:                     An option to be passed to the onOptionSelected event handlers (when using \"optionItems\").\n   *    title:                      Menu item text.\n   *    divider:                    Boolean which tell if the current item is a divider, not an actual command. You could also pass \"divider\" instead of an object\n   *    disabled:                   Whether the item/command is disabled.\n   *    hidden:                     Whether the item/command is hidden.\n   *    tooltip:                    Item tooltip.\n   *    cssClass:                   A CSS class to be added to the menu item container.\n   *    iconCssClass:               A CSS class to be added to the menu item icon.\n   *    textCssClass:               A CSS class to be added to the menu item text.\n   *    iconImage:                  A url to the icon image.\n   *    itemVisibilityOverride:     Callback method that user can override the default behavior of showing/hiding an item from the list\n   *    itemUsabilityOverride:      Callback method that user can override the default behavior of enabling/disabling an item from the list\n   *\n   * The plugin exposes the following events:\n   *\n   *    onAfterMenuShow: Fired after the menu is shown.  You can customize the menu or dismiss it by returning false.\n   *        Event args:\n   *            cell:         Cell or column index\n   *            row:          Row index\n   *            grid:         Reference to the grid.\n   *\n   *    onBeforeMenuShow: Fired before the menu is shown.  You can customize the menu or dismiss it by returning false.\n   *        Event args:\n   *            cell:         Cell or column index\n   *            row:          Row index\n   *            grid:         Reference to the grid.\n   *\n   *    onBeforeMenuClose: Fired when the menu is closing.\n   *        Event args:\n   *            cell:         Cell or column index\n   *            row:          Row index\n   *            grid:         Reference to the grid.\n   *            menu:         Menu DOM element\n   *\n   *    onCommand: Fired on menu option clicked from the Command items list\n   *        Event args:\n   *            cell:         Cell or column index\n   *            row:          Row index\n   *            grid:         Reference to the grid.\n   *            command:      Menu command identified.\n   *            item:         Menu item selected\n   *            column:    Cell Column definition\n   *            dataContext:  Cell Data Context (data object)\n   *            value:        Value of the cell we triggered the context menu from\n   *\n   *    onOptionSelected: Fired on menu option clicked from the Option items list\n   *        Event args:\n   *            cell:         Cell or column index\n   *            row:          Row index\n   *            grid:         Reference to the grid.\n   *            option:       Menu option selected.\n   *            item:         Menu item selected\n   *            column:    Cell Column definition\n   *            dataContext:  Cell Data Context (data object)\n   *\n   *\n   * @param options {Object} Context Menu Options\n   * @class Slick.Plugins.ContextMenu\n   * @constructor\n   */\nexport function ContextMenu(optionProperties) {\n    let _contextMenuProperties;\n    let _currentCell = -1;\n    let _currentRow = -1;\n    let _grid;\n    let _gridOptions;\n    let _gridUid = \"\";\n  let _handler = new EventHandler();\n    let _self = this;\n    let _optionTitleElm;\n    let _commandTitleElm;\n    let _menuElm;\n  let _bindingEventService = new BindingEventService();\n\n    let _defaults = {\n      autoAdjustDrop: true,     // dropup/dropdown\n      autoAlignSide: true,      // left/right\n      autoAdjustDropOffset: -4,\n      autoAlignSideOffset: 0,\n      hideMenuOnScroll: false,\n      maxHeight: \"none\",\n      width: \"auto\",\n      optionShownOverColumnIds: [],\n      commandShownOverColumnIds: [],\n    };\n\n    function init(grid) {\n      _grid = grid;\n      _gridOptions = grid.getOptions();\n      _contextMenuProperties = Utils.extend({}, _defaults, optionProperties);\n      _gridUid = (grid && grid.getUID) ? grid.getUID() : \"\";\n      _handler.subscribe(_grid.onContextMenu, handleOnContextMenu);\n      if (_contextMenuProperties.hideMenuOnScroll) {\n        _handler.subscribe(_grid.onScroll, destroyMenu);\n      }\n    }\n\n    function setOptions(newOptions) {\n      _contextMenuProperties = Utils.extend({}, _contextMenuProperties, newOptions);\n\n      // on the array properties, we want to make sure to overwrite them and not just extending them\n      if (newOptions.commandShownOverColumnIds) {\n        _contextMenuProperties.commandShownOverColumnIds = newOptions.commandShownOverColumnIds;\n      }\n      if (newOptions.optionShownOverColumnIds) {\n        _contextMenuProperties.optionShownOverColumnIds = newOptions.optionShownOverColumnIds;\n      }\n    }\n\n    function destroy() {\n      _self.onAfterMenuShow.unsubscribe();\n      _self.onBeforeMenuShow.unsubscribe();\n      _self.onBeforeMenuClose.unsubscribe();\n      _self.onCommand.unsubscribe();\n      _self.onOptionSelected.unsubscribe();\n      _handler.unsubscribeAll();\n      _bindingEventService.unbindAll();\n\n      if (_menuElm && _menuElm.remove) {\n        _menuElm.remove();\n      }\n      _commandTitleElm = null;\n      _optionTitleElm = null;\n      _menuElm = null;\n    }\n\n    function createMenu(e) {\n      if (e instanceof EventData) {\n        e = e.getNativeEvent();\n      }\n\n      let targetEvent = e.touches ? e.touches[0] : e;\n      let cell = _grid.getCellFromEvent(e);\n      _currentCell = cell && cell.cell;\n      _currentRow = cell && cell.row;\n      let columnDef = _grid.getColumns()[_currentCell];\n      let dataContext = _grid.getDataItem(_currentRow);\n\n      let isColumnOptionAllowed = checkIsColumnAllowed(_contextMenuProperties.optionShownOverColumnIds, columnDef.id);\n      let isColumnCommandAllowed = checkIsColumnAllowed(_contextMenuProperties.commandShownOverColumnIds, columnDef.id);\n      let commandItems = _contextMenuProperties.commandItems || [];\n      let optionItems = _contextMenuProperties.optionItems || [];\n\n      // make sure there's at least something to show before creating the Context Menu\n      if (!columnDef || (!isColumnCommandAllowed && !isColumnOptionAllowed) || (!commandItems.length && !optionItems.length)) {\n        return;\n      }\n\n      // delete any prior context menu\n      destroyMenu(e);\n\n      // Let the user modify the menu or cancel altogether,\n      // or provide alternative menu implementation.\n      if (_self.onBeforeMenuShow.notify({\n        \"cell\": _currentCell,\n        \"row\": _currentRow,\n        \"grid\": _grid\n      }, e, _self).getReturnValue() == false) {\n        return;\n      }\n\n      // create a new context menu\n      let maxHeight = isNaN(_contextMenuProperties.maxHeight) ? _contextMenuProperties.maxHeight : _contextMenuProperties.maxHeight + \"px\";\n      let width = isNaN(_contextMenuProperties.width) ? _contextMenuProperties.width : _contextMenuProperties.width + \"px\";\n\n      _menuElm = document.createElement('div');\n      _menuElm.className = `slick-context-menu ${_gridUid}`;\n      _menuElm.role = 'menu';\n      _menuElm.style.width = width;\n      _menuElm.style.maxHeight = maxHeight;\n      _menuElm.style.top = `${targetEvent.pageY}px`;\n      _menuElm.style.left = `${targetEvent.pageX}px`;\n      _menuElm.style.display = 'none';\n\n      const closeButtonElm = document.createElement('button');\n      closeButtonElm.type = 'button';\n      closeButtonElm.className = 'close';\n      closeButtonElm.dataset.dismiss = 'slick-context-menu';\n      closeButtonElm.ariaLabel = 'Close';\n\n      const spanCloseElm = document.createElement('span');\n      spanCloseElm.className = 'close';\n      spanCloseElm.ariaHidden = 'true';\n      spanCloseElm.innerHTML = '&times;';\n      closeButtonElm.appendChild(spanCloseElm);\n\n      // -- Option List section\n      if (!_contextMenuProperties.hideOptionSection && isColumnOptionAllowed && optionItems.length > 0) {\n        const optionMenuElm = document.createElement('div');\n        optionMenuElm.className = 'slick-context-menu-option-list';\n        optionMenuElm.role = 'menu';\n\n        if (!_contextMenuProperties.hideCloseButton) {\n          _bindingEventService.bind(closeButtonElm, 'click', handleCloseButtonClicked);\n          _menuElm.appendChild(closeButtonElm);\n        }\n        _menuElm.appendChild(optionMenuElm)\n\n        populateOptionItems(\n          _contextMenuProperties,\n          optionMenuElm,\n          optionItems,\n          { cell: _currentCell, row: _currentRow, column: columnDef, dataContext: dataContext, grid: _grid }\n        );\n      }\n\n      // -- Command List section\n      if (!_contextMenuProperties.hideCommandSection && isColumnCommandAllowed && commandItems.length > 0) {\n        const commandMenuElm = document.createElement('div');\n        commandMenuElm.className = 'slick-context-menu-command-list';\n        commandMenuElm.role = 'menu';\n\n        if (!_contextMenuProperties.hideCloseButton && (!isColumnOptionAllowed || optionItems.length === 0 || _contextMenuProperties.hideOptionSection)) {\n          _bindingEventService.bind(closeButtonElm, 'click', handleCloseButtonClicked);\n          _menuElm.appendChild(closeButtonElm);\n        }\n\n        _menuElm.appendChild(commandMenuElm);\n        populateCommandItems(\n          _contextMenuProperties,\n          commandMenuElm,\n          commandItems,\n          { cell: _currentCell, row: _currentRow, column: columnDef, dataContext: dataContext, grid: _grid }\n        );\n      }\n\n      _menuElm.style.display = 'block';\n      document.body.appendChild(_menuElm);\n\n      if (_self.onAfterMenuShow.notify({\n        \"cell\": _currentCell,\n        \"row\": _currentRow,\n        \"grid\": _grid\n      }, e, _self).getReturnValue() == false) {\n        return;\n      }\n\n      return _menuElm;\n    }\n\n    function handleCloseButtonClicked(e) {\n      if (!e.defaultPrevented) {\n        destroyMenu(e);\n      }\n    }\n\n    function destroyMenu(e, args) {\n      _menuElm = _menuElm || document.querySelector(\".slick-context-menu.\" + _gridUid);\n\n      if (_menuElm && _menuElm.remove) {\n        if (_self.onBeforeMenuClose.notify({\n          \"cell\": args && args.cell,\n          \"row\": args && args.row,\n          \"grid\": _grid,\n          \"menu\": _menuElm\n        }, e, _self).getReturnValue() == false) {\n          return;\n        }\n        _menuElm.remove();\n        _menuElm = null;\n      }\n    }\n\n    function checkIsColumnAllowed(columnIds, columnId) {\n      let isAllowedColumn = false;\n\n      if (columnIds && columnIds.length > 0) {\n        for (let o = 0, ln = columnIds.length; o < ln; o++) {\n          if (columnIds[o] === columnId) {\n            isAllowedColumn = true;\n          }\n        }\n      } else {\n        isAllowedColumn = true;\n      }\n      return isAllowedColumn;\n    }\n\n    function handleOnContextMenu(e, args) {\n      if (e instanceof EventData)\n        e = e.getNativeEvent();\n\n      e.preventDefault();\n\n      let cell = _grid.getCellFromEvent(e);\n      let columnDef = _grid.getColumns()[cell.cell];\n      let dataContext = _grid.getDataItem(cell.row);\n\n      // run the override function (when defined), if the result is false it won't go further\n      if (!args) {\n        args = {};\n      }\n      args.cell = cell.cell;\n      args.row = cell.row;\n      args.columnDef = columnDef;\n      args.dataContext = dataContext;\n      args.grid = _grid;\n\n      if (!runOverrideFunctionWhenExists(_contextMenuProperties.menuUsabilityOverride, args)) {\n        return;\n      }\n\n      // create the DOM element\n      _menuElm = createMenu(e, args);\n\n      // reposition the menu to where the user clicked\n      if (_menuElm) {\n        repositionMenu(e);\n        _menuElm.style.display = 'block';\n      }\n\n      _bindingEventService.bind(document.body, 'click', (e) => {\n        if (!e.defaultPrevented) {\n          destroyMenu(e, { cell: _currentCell, row: _currentRow });\n        }\n      });\n    }\n\n    /** Construct the Option Items section. */\n    function populateOptionItems(contextMenu, optionMenuElm, optionItems, args) {\n      if (!args || !optionItems || !contextMenu) {\n        return;\n      }\n\n      // user could pass a title on top of the Options section\n      if (contextMenu && contextMenu.optionTitle) {\n        _optionTitleElm = document.createElement('div');\n        _optionTitleElm.className = 'title';\n        _optionTitleElm.textContent = contextMenu.optionTitle;\n        optionMenuElm.appendChild(_optionTitleElm);\n      }\n\n      for (let i = 0, ln = optionItems.length; i < ln; i++) {\n        let addClickListener = true;\n        let item = optionItems[i];\n\n        // run each override functions to know if the item is visible and usable\n        let isItemVisible = runOverrideFunctionWhenExists(item.itemVisibilityOverride, args);\n        let isItemUsable = runOverrideFunctionWhenExists(item.itemUsabilityOverride, args);\n\n        // if the result is not visible then there's no need to go further\n        if (!isItemVisible) {\n          continue;\n        }\n\n        // when the override is defined, we need to use its result to update the disabled property\n        // so that \"handleMenuItemOptionClick\" has the correct flag and won't trigger an option clicked event\n        if (Object.prototype.hasOwnProperty.call(item, \"itemUsabilityOverride\")) {\n          item.disabled = isItemUsable ? false : true;\n        }\n\n        const liElm = document.createElement('div');\n        liElm.className = 'slick-context-menu-item';\n        liElm.role = 'menuitem';\n\n        if (item.divider || item === \"divider\") {\n          liElm.classList.add(\"slick-context-menu-item-divider\");\n          addClickListener = false;\n        }\n\n        // if the item is disabled then add the disabled css class\n        if (item.disabled || !isItemUsable) {\n          liElm.classList.add(\"slick-context-menu-item-disabled\");\n        }\n\n        // if the item is hidden then add the hidden css class\n        if (item.hidden) {\n          liElm.classList.add(\"slick-context-menu-item-hidden\");\n        }\n\n        if (item.cssClass) {\n          liElm.classList.add(...item.cssClass.split(' '));\n        }\n\n        if (item.tooltip) {\n          liElm.title = item.tooltip;\n        }\n\n        const iconElm = document.createElement('div');\n        iconElm.role = 'button';\n        iconElm.className = 'slick-context-menu-icon';\n\n        liElm.appendChild(iconElm);\n\n        if (item.iconCssClass) {\n          iconElm.classList.add(...item.iconCssClass.split(' '));\n        }\n\n        if (item.iconImage) {\n          iconElm.style.backgroundImage = \"url(\" + item.iconImage + \")\";\n        }\n\n        const textElm = document.createElement('span');\n        textElm.className = 'slick-context-menu-content';\n        textElm.textContent = item.title;\n\n        liElm.appendChild(textElm);\n\n        if (item.textCssClass) {\n          textElm.classList.add(...item.textCssClass.split(' '));\n        }\n\n        optionMenuElm.appendChild(liElm);\n\n        if (addClickListener) {\n          _bindingEventService.bind(liElm, 'click', handleMenuItemOptionClick.bind(this, item));\n        }\n      }\n    }\n\n    /** Construct the Command Items section. */\n    function populateCommandItems(contextMenu, commandMenuElm, commandItems, args) {\n      if (!args || !commandItems || !contextMenu) {\n        return;\n      }\n\n      // user could pass a title on top of the Commands section\n      if (contextMenu && contextMenu.commandTitle) {\n        _commandTitleElm = document.createElement('div');\n        _commandTitleElm.className = 'title';\n        _commandTitleElm.textContent = contextMenu.commandTitle;\n        commandMenuElm.appendChild(_commandTitleElm);\n      }\n\n      for (let i = 0, ln = commandItems.length; i < ln; i++) {\n        let addClickListener = true;\n        let item = commandItems[i];\n\n        // run each override functions to know if the item is visible and usable\n        let isItemVisible = runOverrideFunctionWhenExists(item.itemVisibilityOverride, args);\n        let isItemUsable = runOverrideFunctionWhenExists(item.itemUsabilityOverride, args);\n\n        // if the result is not visible then there's no need to go further\n        if (!isItemVisible) {\n          continue;\n        }\n\n        // when the override is defined, we need to use its result to update the disabled property\n        // so that \"handleMenuItemCommandClick\" has the correct flag and won't trigger a command clicked event\n        if (Object.prototype.hasOwnProperty.call(item, \"itemUsabilityOverride\")) {\n          item.disabled = isItemUsable ? false : true;\n        }\n\n        const liElm = document.createElement('div');\n        liElm.className = 'slick-context-menu-item';\n        liElm.role = 'menuitem';\n\n        if (item.divider || item === \"divider\") {\n          liElm.classList.add(\"slick-context-menu-item-divider\");\n          addClickListener = false;\n        }\n\n        // if the item is disabled then add the disabled css class\n        if (item.disabled || !isItemUsable) {\n          liElm.classList.add(\"slick-context-menu-item-disabled\");\n        }\n\n        // if the item is hidden then add the hidden css class\n        if (item.hidden) {\n          liElm.classList.add(\"slick-context-menu-item-hidden\");\n        }\n\n        if (item.cssClass) {\n          liElm.classList.add(...item.cssClass.split(' '));\n        }\n\n        if (item.tooltip) {\n          liElm.title = item.tooltip;\n        }\n\n        const iconElm = document.createElement('div');\n        iconElm.className = 'slick-context-menu-icon';\n\n        liElm.appendChild(iconElm);\n\n        if (item.iconCssClass) {\n          iconElm.classList.add(...item.iconCssClass.split(' '));\n        }\n\n        if (item.iconImage) {\n          iconElm.style.backgroundImage = \"url(\" + item.iconImage + \")\";\n        }\n\n        const textElm = document.createElement('span');\n        textElm.className = 'slick-context-menu-content';\n        textElm.textContent = item.title;\n\n        liElm.appendChild(textElm);\n\n        if (item.textCssClass) {\n          textElm.classList.add(...item.textCssClass.split(' '));\n        }\n\n        commandMenuElm.appendChild(liElm);\n\n        if (addClickListener) {\n          _bindingEventService.bind(liElm, 'click', handleMenuItemCommandClick.bind(this, item));\n        }\n      }\n    }\n\n    function handleMenuItemCommandClick(item, e) {\n      if (!item || item.disabled || item.divider) {\n        return;\n      }\n\n      const command = item.command || '';\n      const row = _currentRow;\n      const cell = _currentCell;\n      let columnDef = _grid.getColumns()[cell];\n      let dataContext = _grid.getDataItem(row);\n      let cellValue;\n\n      if (Object.prototype.hasOwnProperty.call(dataContext, columnDef && columnDef.field)) {\n        cellValue = dataContext[columnDef.field];\n      }\n\n      if (command != null && command !== \"\") {\n        // user could execute a callback through 2 ways\n        // via the onCommand event and/or an action callback\n        let callbackArgs = {\n          \"cell\": cell,\n          \"row\": row,\n          \"grid\": _grid,\n          \"command\": command,\n          \"item\": item,\n          \"column\": columnDef,\n          \"dataContext\": dataContext,\n          \"value\": cellValue\n        };\n        _self.onCommand.notify(callbackArgs, e, _self);\n\n        // execute action callback when defined\n        if (typeof item.action === \"function\") {\n          item.action.call(this, e, callbackArgs);\n        }\n      }\n    }\n\n    function handleMenuItemOptionClick(item, e) {\n      if (item.disabled || item.divider) {\n        return;\n      }\n      if (!_grid.getEditorLock().commitCurrentEdit()) {\n        return;\n      }\n\n      const option = item.option !== undefined ? item.option : '';\n      const row = _currentRow;\n      const cell = _currentCell;\n      const columnDef = _grid.getColumns()[cell];\n      const dataContext = _grid.getDataItem(row);\n\n      if (option !== undefined) {\n        // user could execute a callback through 2 ways\n        // via the onOptionSelected event and/or an action callback\n        let callbackArgs = {\n          \"cell\": cell,\n          \"row\": row,\n          \"grid\": _grid,\n          \"option\": option,\n          \"item\": item,\n          \"column\": columnDef,\n          \"dataContext\": dataContext\n        };\n        _self.onOptionSelected.notify(callbackArgs, e, _self);\n\n        // execute action callback when defined\n        if (typeof item.action === \"function\") {\n          item.action.call(this, e, callbackArgs);\n        }\n      }\n    }\n\n    /**\n     * Reposition the menu drop (up/down) and the side (left/right)\n     * @param {*} event\n     */\n    function repositionMenu(e) {\n      const targetEvent = e.touches ? e.touches[0] : e;\n      const parentElm = e.target.closest(\".slick-cell\");\n      let menuOffsetLeft = targetEvent.pageX;\n      let menuOffsetTop = parentElm ? Utils.offset(parentElm).top : targetEvent.pageY;\n      const menuHeight = _menuElm && _menuElm.offsetHeight || 0;\n      const menuWidth = _menuElm && _menuElm.offsetWidth || _contextMenuProperties.width || 0;\n      let rowHeight = _gridOptions.rowHeight;\n      let dropOffset = _contextMenuProperties.autoAdjustDropOffset;\n      let sideOffset = _contextMenuProperties.autoAlignSideOffset;\n\n      // if autoAdjustDrop is enable, we first need to see what position the drop will be located\n      // without necessary toggling it's position just yet, we just want to know the future position for calculation\n      if (_contextMenuProperties.autoAdjustDrop) {\n        // since we reposition menu below slick cell, we need to take it in consideration and do our calculation from that element\n        let spaceBottom = Utils.calculateAvailableSpace(parentElm).bottom;\n        let spaceTop = Utils.calculateAvailableSpace(parentElm).top;\n        let spaceBottomRemaining = spaceBottom + dropOffset - rowHeight;\n        let spaceTopRemaining = spaceTop - dropOffset + rowHeight;\n        let dropPosition = (spaceBottomRemaining < menuHeight && spaceTopRemaining > spaceBottomRemaining) ? 'top' : 'bottom';\n        if (dropPosition === 'top') {\n          _menuElm.classList.remove('dropdown');\n          _menuElm.classList.add('dropup');\n          menuOffsetTop = menuOffsetTop - menuHeight - dropOffset;\n        } else {\n          _menuElm.classList.remove('dropup');\n          _menuElm.classList.add('dropdown');\n          menuOffsetTop = menuOffsetTop + rowHeight + dropOffset;\n        }\n      }\n\n      // when auto-align is set, it will calculate whether it has enough space in the viewport to show the drop menu on the right (default)\n      // if there isn't enough space on the right, it will automatically align the drop menu to the left\n      // to simulate an align left, we actually need to know the width of the drop menu\n      if (_contextMenuProperties.autoAlignSide) {\n        let gridPos = _grid.getGridPosition();\n        let dropSide = ((menuOffsetLeft + menuWidth) >= gridPos.width) ? 'left' : 'right';\n        if (dropSide === 'left') {\n          _menuElm.classList.remove('dropright');\n          _menuElm.classList.add('dropleft');\n          menuOffsetLeft = (menuOffsetLeft - menuWidth - sideOffset);\n        } else {\n          _menuElm.classList.remove('dropleft');\n          _menuElm.classList.add('dropright');\n          menuOffsetLeft = menuOffsetLeft + sideOffset;\n        }\n      }\n\n      // ready to reposition the menu\n      _menuElm.style.top = `${menuOffsetTop}px`;\n      _menuElm.style.left = `${menuOffsetLeft}px`;\n    }\n\n    /**\n     * Method that user can pass to override the default behavior.\n     * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\n     * @param overrideFn: override function callback\n     * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\n     */\n    function runOverrideFunctionWhenExists(overrideFn, args) {\n      if (typeof overrideFn === 'function') {\n        return overrideFn.call(this, args);\n      }\n      return true;\n    }\n\n  Utils.extend(this, {\n      \"init\": init,\n      \"closeMenu\": destroyMenu,\n      \"destroy\": destroy,\n      \"pluginName\": \"ContextMenu\",\n      \"setOptions\": setOptions,\n\n    \"onAfterMenuShow\": new SlickEvent(),\n    \"onBeforeMenuShow\": new SlickEvent(),\n    \"onBeforeMenuClose\": new SlickEvent(),\n    \"onCommand\": new SlickEvent(),\n    \"onOptionSelected\": new SlickEvent()\n    });\n  }\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      Plugins: {\n        ContextMenu\n      }\n    }\n  });\n}\n\n"],
  "mappings": "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",
  "names": ["e"]
}
