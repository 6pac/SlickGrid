{
  "version": 3,
  "sources": ["../../../src/plugins/slick.contextmenu.ts"],
  "sourcesContent": ["import {\r\n  BindingEventService as BindingEventService_,\r\n  SlickEvent as SlickEvent_,\r\n  SlickEventData as SlickEventData_,\r\n  SlickEventHandler as SlickEventHandler_,\r\n  Utils as Utils_\r\n} from '../slick.core.js';\r\nimport type {\r\n  Column,\r\n  ContextMenuOption,\r\n  DOMMouseOrTouchEvent,\r\n  GridOption,\r\n  MenuCommandItem,\r\n  MenuCommandItemCallbackArgs,\r\n  MenuFromCellCallbackArgs,\r\n  MenuOptionItem,\r\n  MenuOptionItemCallbackArgs,\r\n  MenuType,\r\n  SlickPlugin\r\n} from '../models/index.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst SlickEventData = IIFE_ONLY ? Slick.EventData : SlickEventData_;\r\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : SlickEventHandler_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/**\r\n * A plugin to add Context Menu (mouse right+click), it subscribes to the cell \"onContextMenu\" event.\r\n * The \"contextMenu\" is defined in the Grid Options object\r\n * You can use it to change a data property (only 1) through a list of Options AND/OR through a list of Commands.\r\n * A good example of a Command would be an Export to CSV, that can be run from anywhere in the grid by doing a mouse right+click\r\n *\r\n * Note:\r\n *   There is only 1 list of Options, so typically that would be use for 1 column\r\n *   if you plan to use different Options for different columns, then the CellMenu plugin might be better suited.\r\n *\r\n * USAGE:\r\n *\r\n * Add the slick.contextmenu.(js|css) files and register it with the grid.\r\n *\r\n * To specify a menu in a column header, extend the column definition like so:\r\n * var contextMenuPlugin = new Slick.Plugins.ContextMenu(columns, grid, options);\r\n *\r\n * Available grid options, by defining a contextMenu object:\r\n *\r\n *  var options = {\r\n *    enableCellNavigation: true,\r\n *    contextMenu: {\r\n *      optionTitle: 'Change Priority',\r\n *      optionShownOverColumnIds: [\"priority\"],\r\n *      optionItems: [\r\n *        { option: 0, title: 'none', cssClass: 'italic' },\r\n *        { divider: true },\r\n *        \"divider\" // just the string is also accepted\r\n *        { option: 1, iconCssClass: 'fa fa-fire grey', title: 'Low' },\r\n *        { option: 3, iconCssClass: 'fa fa-fire red', title: 'High' },\r\n *        { option: 2, iconCssClass: 'fa fa-fire orange', title: 'Medium' },\r\n *        { option: 4, iconCssClass: 'fa fa-fire', title: 'Extreme', disabled: true },\r\n *      ],\r\n *      commandTitle: 'Commands',\r\n *      commandShownOverColumnIds: [\"title\", \"complete\", \"start\", \"finish\", \"effortDriven\"],\r\n *      commandItems: [\r\n *        { command: 'export-excel', title: 'Export to CSV', iconCssClass: 'fa fa-file-excel-o', cssClass: '' },\r\n *        { command: 'delete-row', title: 'Delete Row', cssClass: 'bold', textCssClass: 'red' },\r\n *        { command: 'help', title: 'Help', iconCssClass: 'fa fa-question-circle',},\r\n *        { divider: true },\r\n *      ],\r\n *    }\r\n *  };\r\n *\r\n *\r\n * Available contextMenu properties:\r\n *    commandTitle:               Title of the Command section (optional)\r\n *    commandItems:               Array of Command item objects (command/title pair)\r\n *    commandShownOverColumnIds:  Define which column to show the Commands list. If not defined (defaults), the menu will be shown over all columns\r\n *    optionTitle:                Title of the Option section (optional)\r\n *    optionItems:                Array of Options item objects (option/title pair)\r\n *    optionShownOverColumnIds:   Define which column to show the Options list. If not defined (defaults), the menu will be shown over all columns\r\n *    hideCloseButton:            Hide the Close button on top right (defaults to false)\r\n *    hideCommandSection:         Hide the Commands section even when the commandItems array is filled (defaults to false)\r\n *    hideMenuOnScroll:           Do we want to hide the Cell Menu when a scrolling event occurs (defaults to false)?\r\n *    hideOptionSection:          Hide the Options section even when the optionItems array is filled (defaults to false)\r\n *    maxHeight:                  Maximum height that the drop menu will have, can be a number (250) or text (\"none\")\r\n *    width:                      Width that the drop menu will have, can be a number (250) or text (defaults to \"auto\")\r\n *    autoAdjustDrop:             Auto-align dropup or dropdown menu to the left or right depending on grid viewport available space (defaults to true)\r\n *    autoAdjustDropOffset:       Optionally add an offset to the auto-align of the drop menu (defaults to -4)\r\n *    autoAlignSide:              Auto-align drop menu to the left or right depending on grid viewport available space (defaults to true)\r\n *    autoAlignSideOffset:        Optionally add an offset to the left/right side auto-align (defaults to 0)\r\n *    menuUsabilityOverride:      Callback method that user can override the default behavior of enabling/disabling the menu from being usable (must be combined with a custom formatter)\r\n *    subItemChevronClass:        CSS class that can be added on the right side of a sub-item parent (typically a chevron-right icon)\r\n *    subMenuOpenByEvent:         defaults to \"mouseover\", what event type shoud we use to open sub-menu(s), 2 options are available: \"mouseover\" or \"click\"\r\n *\r\n *\r\n * Available menu Command/Option item properties:\r\n *    action:                     Optionally define a callback function that gets executed when item is chosen (and/or use the onCommand event)\r\n *    command:                    A command identifier to be passed to the onCommand event handlers (when using \"commandItems\").\r\n *    option:                     An option to be passed to the onOptionSelected event handlers (when using \"optionItems\").\r\n *    title:                      Menu item text.\r\n *    divider:                    Boolean which tell if the current item is a divider, not an actual command. You could also pass \"divider\" instead of an object\r\n *    disabled:                   Whether the item/command is disabled.\r\n *    hidden:                     Whether the item/command is hidden.\r\n *    subMenuTitle:               Optional sub-menu title that will shows up when sub-menu commmands/options list is opened\r\n *    subMenuTitleCssClass:       Optional sub-menu title CSS class to use with `subMenuTitle`\r\n *    tooltip:                    Item tooltip.\r\n *    cssClass:                   A CSS class to be added to the menu item container.\r\n *    iconCssClass:               A CSS class to be added to the menu item icon.\r\n *    textCssClass:               A CSS class to be added to the menu item text.\r\n *    iconImage:                  A url to the icon image.\r\n *    itemVisibilityOverride:     Callback method that user can override the default behavior of showing/hiding an item from the list\r\n *    itemUsabilityOverride:      Callback method that user can override the default behavior of enabling/disabling an item from the list\r\n *\r\n * The plugin exposes the following events:\r\n *\r\n *    onAfterMenuShow: Fired after the menu is shown.  You can customize the menu or dismiss it by returning false.\r\n *        Event args:\r\n *            cell:         Cell or column index\r\n *            row:          Row index\r\n *            grid:         Reference to the grid.\r\n *\r\n *    onBeforeMenuShow: Fired before the menu is shown.  You can customize the menu or dismiss it by returning false.\r\n *        Event args:\r\n *            cell:         Cell or column index\r\n *            row:          Row index\r\n *            grid:         Reference to the grid.\r\n *\r\n *    onBeforeMenuClose: Fired when the menu is closing.\r\n *        Event args:\r\n *            cell:         Cell or column index\r\n *            row:          Row index\r\n *            grid:         Reference to the grid.\r\n *            menu:         Menu DOM element\r\n *\r\n *    onCommand: Fired on menu option clicked from the Command items list\r\n *        Event args:\r\n *            cell:         Cell or column index\r\n *            row:          Row index\r\n *            grid:         Reference to the grid.\r\n *            command:      Menu command identified.\r\n *            item:         Menu item selected\r\n *            column:    Cell Column definition\r\n *            dataContext:  Cell Data Context (data object)\r\n *            value:        Value of the cell we triggered the context menu from\r\n *\r\n *    onOptionSelected: Fired on menu option clicked from the Option items list\r\n *        Event args:\r\n *            cell:         Cell or column index\r\n *            row:          Row index\r\n *            grid:         Reference to the grid.\r\n *            option:       Menu option selected.\r\n *            item:         Menu item selected\r\n *            column:    Cell Column definition\r\n *            dataContext:  Cell Data Context (data object)\r\n *\r\n *\r\n * @param options {Object} Context Menu Options\r\n * @class Slick.Plugins.ContextMenu\r\n */\r\nexport class SlickContextMenu implements SlickPlugin {\r\n  // --\r\n  // public API\r\n  pluginName = 'ContextMenu' as const;\r\n  onAfterMenuShow = new SlickEvent<MenuFromCellCallbackArgs>('onAfterMenuShow');\r\n  onBeforeMenuShow = new SlickEvent<MenuFromCellCallbackArgs>('onBeforeMenuShow');\r\n  onBeforeMenuClose = new SlickEvent<MenuFromCellCallbackArgs>('onBeforeMenuClose');\r\n  onCommand = new SlickEvent<MenuCommandItemCallbackArgs>('onCommand');\r\n  onOptionSelected = new SlickEvent<MenuOptionItemCallbackArgs>('onOptionSelected');\r\n\r\n  // --\r\n  // protected props\r\n  protected _bindingEventService = new BindingEventService();\r\n  protected _contextMenuProperties: ContextMenuOption;\r\n  protected _currentCell = -1;\r\n  protected _currentRow = -1;\r\n  protected _grid!: SlickGrid;\r\n  protected _gridOptions!: GridOption;\r\n  protected _gridUid = '';\r\n  protected _handler = new EventHandler();\r\n  protected _commandTitleElm?: HTMLSpanElement;\r\n  protected _optionTitleElm?: HTMLSpanElement;\r\n  protected _lastMenuTypeClicked = '';\r\n  protected _menuElm?: HTMLDivElement | null;\r\n  protected _subMenuParentId = '';\r\n  protected _defaults: ContextMenuOption = {\r\n    autoAdjustDrop: true,     // dropup/dropdown\r\n    autoAlignSide: true,      // left/right\r\n    autoAdjustDropOffset: -4,\r\n    autoAlignSideOffset: 0,\r\n    hideMenuOnScroll: false,\r\n    maxHeight: 'none',\r\n    width: 'auto',\r\n    optionShownOverColumnIds: [],\r\n    commandShownOverColumnIds: [],\r\n    subMenuOpenByEvent: 'mouseover',\r\n  };\r\n\r\n  constructor(optionProperties: Partial<ContextMenuOption>) {\r\n    this._contextMenuProperties = Utils.extend({}, this._defaults, optionProperties);\r\n  }\r\n\r\n  init(grid: SlickGrid) {\r\n    this._grid = grid;\r\n    this._gridOptions = grid.getOptions();\r\n    this._gridUid = grid.getUID() || '';\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n    this._handler.subscribe(this._grid.onContextMenu, this.handleOnContextMenu.bind(this));\r\n    if (this._contextMenuProperties.hideMenuOnScroll) {\r\n      this._handler.subscribe(this._grid.onScroll, this.destroyMenu.bind(this));\r\n    }\r\n  }\r\n\r\n  setOptions(newOptions: Partial<ContextMenuOption>) {\r\n    this._contextMenuProperties = Utils.extend({}, this._contextMenuProperties, newOptions);\r\n\r\n    // on the array properties, we want to make sure to overwrite them and not just extending them\r\n    if (newOptions.commandShownOverColumnIds) {\r\n      this._contextMenuProperties.commandShownOverColumnIds = newOptions.commandShownOverColumnIds;\r\n    }\r\n    if (newOptions.optionShownOverColumnIds) {\r\n      this._contextMenuProperties.optionShownOverColumnIds = newOptions.optionShownOverColumnIds;\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    this.onAfterMenuShow.unsubscribe();\r\n    this.onBeforeMenuShow.unsubscribe();\r\n    this.onBeforeMenuClose.unsubscribe();\r\n    this.onCommand.unsubscribe();\r\n    this.onOptionSelected.unsubscribe();\r\n    this._handler.unsubscribeAll();\r\n    this._bindingEventService.unbindAll();\r\n    this._menuElm?.remove();\r\n    this._commandTitleElm = null as any;\r\n    this._optionTitleElm = null as any;\r\n    this._menuElm = null as any;\r\n  }\r\n\r\n  protected createParentMenu(evt: SlickEventData_ | MouseEvent) {\r\n    const e = evt instanceof SlickEventData ? evt.getNativeEvent<MouseEvent | TouchEvent>() : evt;\r\n    const targetEvent = (e as TouchEvent).touches?.[0] ?? e;\r\n    const cell = this._grid.getCellFromEvent(e);\r\n    this._currentCell = cell?.cell ?? 0;\r\n    this._currentRow = cell?.row ?? 0;\r\n    const columnDef = this._grid.getColumns()[this._currentCell];\r\n\r\n    const isColumnOptionAllowed = this.checkIsColumnAllowed(this._contextMenuProperties.optionShownOverColumnIds ?? [], columnDef.id);\r\n    const isColumnCommandAllowed = this.checkIsColumnAllowed(this._contextMenuProperties.commandShownOverColumnIds ?? [], columnDef.id);\r\n    const commandItems = this._contextMenuProperties.commandItems || [];\r\n    const optionItems = this._contextMenuProperties.optionItems || [];\r\n\r\n    // make sure there's at least something to show before creating the Context Menu\r\n    if (!columnDef || (!isColumnCommandAllowed && !isColumnOptionAllowed) || (!commandItems.length && !optionItems.length)) {\r\n      return;\r\n    }\r\n\r\n    // delete any prior context menu\r\n    this.destroyMenu(e);\r\n\r\n    // Let the user modify the menu or cancel altogether,\r\n    // or provide alternative menu implementation.\r\n    if (this.onBeforeMenuShow.notify({\r\n      cell: this._currentCell,\r\n      row: this._currentRow,\r\n      grid: this._grid\r\n    }, e, this).getReturnValue() === false) {\r\n      return;\r\n    }\r\n\r\n    // create 1st parent menu container & reposition it\r\n    this._menuElm = this.createMenu(commandItems, optionItems);\r\n    this._menuElm.style.top = `${targetEvent.pageY}px`;\r\n    this._menuElm.style.left = `${targetEvent.pageX}px`;\r\n    this._menuElm.style.display = 'block';\r\n    document.body.appendChild(this._menuElm);\r\n\r\n    if (this.onAfterMenuShow.notify({\r\n      cell: this._currentCell,\r\n      row: this._currentRow,\r\n      grid: this._grid\r\n    }, e, this).getReturnValue() === false) {\r\n      return;\r\n    }\r\n\r\n    return this._menuElm;\r\n  }\r\n\r\n  protected createMenu(commandItems: Array<MenuCommandItem | 'divider'>, optionItems: Array<MenuOptionItem | 'divider'>, level = 0, item?: MenuCommandItem | MenuOptionItem | 'divider') {\r\n    const columnDef = this._grid.getColumns()[this._currentCell];\r\n    const dataContext = this._grid.getDataItem(this._currentRow);\r\n    const isColumnOptionAllowed = this.checkIsColumnAllowed(this._contextMenuProperties.optionShownOverColumnIds ?? [], columnDef.id);\r\n    const isColumnCommandAllowed = this.checkIsColumnAllowed(this._contextMenuProperties.commandShownOverColumnIds ?? [], columnDef.id);\r\n\r\n    // create a new context menu\r\n    const maxHeight = isNaN(this._contextMenuProperties.maxHeight as number) ? this._contextMenuProperties.maxHeight : `${this._contextMenuProperties.maxHeight ?? 0}px`;\r\n    const width = isNaN(this._contextMenuProperties.width as number) ? this._contextMenuProperties.width : `${this._contextMenuProperties.maxWidth ?? 0}px`;\r\n\r\n    // to avoid having multiple sub-menu trees opened,\r\n    // we need to somehow keep trace of which parent menu the tree belongs to\r\n    // and we should keep ref of only the first sub-menu parent, we can use the command name (remove any whitespaces though)\r\n    const subMenuCommand = (item as MenuCommandItem)?.command;\r\n    let subMenuId = (level === 1 && subMenuCommand) ? subMenuCommand.replaceAll(' ', '') : '';\r\n    if (subMenuId) {\r\n      this._subMenuParentId = subMenuId;\r\n    }\r\n    if (level > 1) {\r\n      subMenuId = this._subMenuParentId;\r\n    }\r\n\r\n    const menuClasses = `slick-context-menu slick-menu-level-${level} ${this._gridUid}`;\r\n    const bodyMenuElm = document.body.querySelector<HTMLDivElement>(`.slick-context-menu.slick-menu-level-${level}${this.getGridUidSelector()}`);\r\n\r\n    // return menu/sub-menu if it's already opened unless we are on different sub-menu tree if so close them all\r\n    if (bodyMenuElm) {\r\n      if (bodyMenuElm.dataset.subMenuParent === subMenuId) {\r\n        return bodyMenuElm;\r\n      }\r\n      this.destroySubMenus();\r\n    }\r\n\r\n    const menuElm = document.createElement('div');\r\n    menuElm.className = menuClasses;\r\n    if (level > 0) {\r\n      menuElm.classList.add('slick-submenu');\r\n      if (subMenuId) {\r\n        menuElm.dataset.subMenuParent = subMenuId;\r\n      }\r\n    }\r\n    menuElm.ariaLabel = level > 1 ? 'SubMenu' : 'Context Menu';\r\n    menuElm.role = 'menu';\r\n    if (width) {\r\n      menuElm.style.width = width as string;\r\n    }\r\n    if (maxHeight) {\r\n      menuElm.style.maxHeight = maxHeight as string;\r\n    }\r\n\r\n    menuElm.style.display = 'none';\r\n\r\n    let closeButtonElm: HTMLButtonElement | null = null;\r\n    if (level === 0) {\r\n      closeButtonElm = document.createElement('button');\r\n      closeButtonElm.type = 'button';\r\n      closeButtonElm.className = 'close';\r\n      closeButtonElm.dataset.dismiss = 'slick-context-menu';\r\n      closeButtonElm.ariaLabel = 'Close';\r\n\r\n      const spanCloseElm = document.createElement('span');\r\n      spanCloseElm.className = 'close';\r\n      spanCloseElm.ariaHidden = 'true';\r\n      spanCloseElm.textContent = '\u00D7';\r\n      closeButtonElm.appendChild(spanCloseElm);\r\n    }\r\n\r\n    // -- Option List section\r\n    if (!this._contextMenuProperties.hideOptionSection && isColumnOptionAllowed && optionItems.length > 0) {\r\n      const optionMenuElm = document.createElement('div');\r\n      optionMenuElm.className = 'slick-context-menu-option-list';\r\n      optionMenuElm.role = 'menu';\r\n\r\n      // when creating sub-menu add its sub-menu title when exists\r\n      if (item && level > 0) {\r\n        this.addSubMenuTitleWhenExists(item, optionMenuElm); // add sub-menu title when exists\r\n      }\r\n\r\n      if (closeButtonElm && !this._contextMenuProperties.hideCloseButton) {\r\n        this._bindingEventService.bind(closeButtonElm, 'click', this.handleCloseButtonClicked.bind(this) as EventListener);\r\n        menuElm.appendChild(closeButtonElm);\r\n      }\r\n      menuElm.appendChild(optionMenuElm);\r\n\r\n      this.populateCommandOrOptionItems(\r\n        'option',\r\n        this._contextMenuProperties,\r\n        optionMenuElm,\r\n        optionItems,\r\n        { cell: this._currentCell, row: this._currentRow, column: columnDef, dataContext, grid: this._grid, level }\r\n      );\r\n    }\r\n\r\n    // -- Command List section\r\n    if (!this._contextMenuProperties.hideCommandSection && isColumnCommandAllowed && commandItems.length > 0) {\r\n      const commandMenuElm = document.createElement('div');\r\n      commandMenuElm.className = 'slick-context-menu-command-list';\r\n      commandMenuElm.role = 'menu';\r\n\r\n      // when creating sub-menu add its sub-menu title when exists\r\n      if (item && level > 0) {\r\n        this.addSubMenuTitleWhenExists(item, commandMenuElm); // add sub-menu title when exists\r\n      }\r\n\r\n      if (closeButtonElm && !this._contextMenuProperties.hideCloseButton && (!isColumnOptionAllowed || optionItems.length === 0 || this._contextMenuProperties.hideOptionSection)) {\r\n        this._bindingEventService.bind(closeButtonElm, 'click', this.handleCloseButtonClicked.bind(this) as EventListener);\r\n        menuElm.appendChild(closeButtonElm);\r\n      }\r\n\r\n      menuElm.appendChild(commandMenuElm);\r\n      this.populateCommandOrOptionItems(\r\n        'command',\r\n        this._contextMenuProperties,\r\n        commandMenuElm,\r\n        commandItems,\r\n        { cell: this._currentCell, row: this._currentRow, column: columnDef, dataContext, grid: this._grid, level }\r\n      );\r\n    }\r\n\r\n    // increment level for possible next sub-menus if exists\r\n    level++;\r\n\r\n    return menuElm;\r\n  }\r\n\r\n  protected addSubMenuTitleWhenExists(item: MenuCommandItem | MenuOptionItem | 'divider', commandOrOptionMenu: HTMLDivElement) {\r\n    if (item !== 'divider' && item?.subMenuTitle) {\r\n      const subMenuTitleElm = document.createElement('div');\r\n      subMenuTitleElm.className = 'slick-menu-title';\r\n      subMenuTitleElm.textContent = item.subMenuTitle as string;\r\n      const subMenuTitleClass = item.subMenuTitleCssClass as string;\r\n      if (subMenuTitleClass) {\r\n        subMenuTitleElm.classList.add(...Utils.classNameToList(subMenuTitleClass));\r\n      }\r\n\r\n      commandOrOptionMenu.appendChild(subMenuTitleElm);\r\n    }\r\n  }\r\n\r\n  protected handleCloseButtonClicked(e: MouseEvent | TouchEvent) {\r\n    if (!e.defaultPrevented) {\r\n      this.destroyMenu(e);\r\n    }\r\n  }\r\n\r\n  destroyMenu(e?: Event | SlickEventData_, args?: { cell: number; row: number; }) {\r\n    this._menuElm = this._menuElm || document.querySelector(`.slick-context-menu${this.getGridUidSelector()}`);\r\n\r\n    if (this._menuElm?.remove) {\r\n      if (this.onBeforeMenuClose.notify({\r\n        cell: args?.cell ?? 0,\r\n        row: args?.row ?? 0,\r\n        grid: this._grid,\r\n      }, e, this).getReturnValue() === false) {\r\n        return;\r\n      }\r\n      this._menuElm.remove();\r\n      this._menuElm = null;\r\n    }\r\n    this.destroySubMenus();\r\n  }\r\n\r\n  /** Destroy all parent menus and any sub-menus */\r\n  destroyAllMenus() {\r\n    this.destroySubMenus();\r\n\r\n    // remove all parent menu listeners before removing them from the DOM\r\n    this._bindingEventService.unbindAll('parent-menu');\r\n    document.querySelectorAll(`.slick-context-menu${this.getGridUidSelector()}`)\r\n      .forEach(subElm => subElm.remove());\r\n  }\r\n\r\n  /** Close and destroy all previously opened sub-menus */\r\n  destroySubMenus() {\r\n    this._bindingEventService.unbindAll('sub-menu');\r\n    document.querySelectorAll(`.slick-context-menu.slick-submenu${this.getGridUidSelector()}`)\r\n      .forEach(subElm => subElm.remove());\r\n  }\r\n\r\n  protected checkIsColumnAllowed(columnIds: Array<number | string>, columnId: number | string) {\r\n    let isAllowedColumn = false;\r\n\r\n    if (columnIds?.length > 0) {\r\n      for (let o = 0, ln = columnIds.length; o < ln; o++) {\r\n        if (columnIds[o] === columnId) {\r\n          isAllowedColumn = true;\r\n        }\r\n      }\r\n    } else {\r\n      isAllowedColumn = true;\r\n    }\r\n    return isAllowedColumn;\r\n  }\r\n\r\n  protected getGridUidSelector() {\r\n    const gridUid = this._grid.getUID() || '';\r\n    return gridUid ? `.${gridUid}` : '';\r\n  }\r\n\r\n  protected handleOnContextMenu(evt: SlickEventData_ | DOMMouseOrTouchEvent<HTMLDivElement>, args: MenuCommandItemCallbackArgs) {\r\n    this.destroyAllMenus(); // make there's only 1 parent menu opened at a time\r\n    const e = evt instanceof SlickEventData ? evt.getNativeEvent<DOMMouseOrTouchEvent<HTMLDivElement>>() : evt;\r\n    e.preventDefault();\r\n    const cell = this._grid.getCellFromEvent(e);\r\n\r\n    if (cell) {\r\n      const columnDef = this._grid.getColumns()[cell.cell];\r\n      const dataContext = this._grid.getDataItem(cell.row);\r\n\r\n      // run the override function (when defined), if the result is false it won't go further\r\n      args = args || {};\r\n      args.cell = cell.cell;\r\n      args.row = cell.row;\r\n      args.column = columnDef;\r\n      args.dataContext = dataContext;\r\n      args.grid = this._grid;\r\n\r\n      if (!this.runOverrideFunctionWhenExists(this._contextMenuProperties.menuUsabilityOverride, args)) {\r\n        return;\r\n      }\r\n\r\n      // create the DOM element\r\n      this._menuElm = this.createParentMenu(e as MouseEvent);\r\n\r\n      // reposition the menu to where the user clicked\r\n      if (this._menuElm) {\r\n        this.repositionMenu(e, this._menuElm);\r\n        this._menuElm.style.display = 'block';\r\n      }\r\n\r\n      // Hide the menu on outside click.\r\n      this._bindingEventService.bind(document.body, 'mousedown', this.handleBodyMouseDown.bind(this) as EventListener);\r\n    }\r\n  }\r\n\r\n  /** When users click outside the Cell Menu, we will typically close the Cell Menu (and any sub-menus) */\r\n  protected handleBodyMouseDown(e: DOMMouseOrTouchEvent<HTMLDivElement>) {\r\n    // did we click inside the menu or any of its sub-menu(s)\r\n    let isMenuClicked = false;\r\n    if (this._menuElm?.contains(e.target)) {\r\n      isMenuClicked = true;\r\n    }\r\n    if (!isMenuClicked) {\r\n      document\r\n        .querySelectorAll(`.slick-context-menu.slick-submenu${this.getGridUidSelector()}`)\r\n        .forEach(subElm => {\r\n          if (subElm.contains(e.target)) {\r\n            isMenuClicked = true;\r\n          }\r\n        });\r\n    }\r\n\r\n    if (this._menuElm !== e.target && !isMenuClicked && !e.defaultPrevented) {\r\n      this.destroyMenu(e, { cell: this._currentCell, row: this._currentRow });\r\n    }\r\n  }\r\n\r\n  /** Construct the Command Items section. */\r\n  protected populateCommandOrOptionItems(\r\n    itemType: MenuType,\r\n    contextMenu: ContextMenuOption,\r\n    commandOrOptionMenuElm: HTMLElement,\r\n    commandOrOptionItems: Array<MenuCommandItem | 'divider'> | Array<MenuOptionItem | 'divider'>,\r\n    args: { cell: number, row: number, column: Column, dataContext: any, grid: SlickGrid, level: number }\r\n  ) {\r\n    if (!args || !commandOrOptionItems || !contextMenu) {\r\n      return;\r\n    }\r\n\r\n    // user could pass a title on top of the Commands/Options section\r\n    const level = args?.level || 0;\r\n    const isSubMenu = level > 0;\r\n    if (contextMenu?.[`${itemType}Title`] && !isSubMenu) {\r\n      this[`_${itemType}TitleElm`] = document.createElement('div');\r\n      this[`_${itemType}TitleElm`]!.className = 'slick-menu-title';\r\n      this[`_${itemType}TitleElm`]!.textContent = contextMenu[`${itemType}Title`] as string;\r\n      commandOrOptionMenuElm.appendChild(this[`_${itemType}TitleElm`]!);\r\n    }\r\n\r\n    for (let i = 0, ln = commandOrOptionItems.length; i < ln; i++) {\r\n      let addClickListener = true;\r\n      const item = commandOrOptionItems[i];\r\n\r\n      // run each override functions to know if the item is visible and usable\r\n      const isItemVisible = this.runOverrideFunctionWhenExists<typeof args>((item as MenuCommandItem | MenuOptionItem).itemVisibilityOverride, args);\r\n      const isItemUsable = this.runOverrideFunctionWhenExists<typeof args>((item as MenuCommandItem | MenuOptionItem).itemUsabilityOverride, args);\r\n\r\n      // if the result is not visible then there's no need to go further\r\n      if (!isItemVisible) {\r\n        continue;\r\n      }\r\n\r\n      // when the override is defined, we need to use its result to update the disabled property\r\n      // so that \"handleMenuItemClick\" has the correct flag and won't trigger a command clicked event\r\n      if (Object.prototype.hasOwnProperty.call(item, 'itemUsabilityOverride')) {\r\n        (item as MenuCommandItem | MenuOptionItem).disabled = isItemUsable ? false : true;\r\n      }\r\n\r\n      const liElm = document.createElement('div');\r\n      liElm.className = 'slick-context-menu-item';\r\n      liElm.role = 'menuitem';\r\n\r\n      if ((item as MenuCommandItem | MenuOptionItem).divider || item === 'divider') {\r\n        liElm.classList.add('slick-context-menu-item-divider');\r\n        addClickListener = false;\r\n      }\r\n\r\n      // if the item is disabled then add the disabled css class\r\n      if ((item as MenuCommandItem | MenuOptionItem).disabled || !isItemUsable) {\r\n        liElm.classList.add('slick-context-menu-item-disabled');\r\n      }\r\n\r\n      // if the item is hidden then add the hidden css class\r\n      if ((item as MenuCommandItem | MenuOptionItem).hidden) {\r\n        liElm.classList.add('slick-context-menu-item-hidden');\r\n      }\r\n\r\n      if ((item as MenuCommandItem | MenuOptionItem).cssClass) {\r\n        liElm.classList.add(...Utils.classNameToList((item as MenuCommandItem | MenuOptionItem).cssClass));\r\n      }\r\n\r\n      if ((item as MenuCommandItem | MenuOptionItem).tooltip) {\r\n        liElm.title = (item as MenuCommandItem | MenuOptionItem).tooltip || '';\r\n      }\r\n\r\n      const iconElm = document.createElement('div');\r\n      iconElm.className = 'slick-context-menu-icon';\r\n\r\n      liElm.appendChild(iconElm);\r\n\r\n      if ((item as MenuCommandItem | MenuOptionItem).iconCssClass) {\r\n        iconElm.classList.add(...Utils.classNameToList((item as MenuCommandItem | MenuOptionItem).iconCssClass));\r\n      }\r\n\r\n      if ((item as MenuCommandItem | MenuOptionItem).iconImage) {\r\n        iconElm.style.backgroundImage = `url(${(item as MenuCommandItem | MenuOptionItem).iconImage})`;\r\n      }\r\n\r\n      const textElm = document.createElement('span');\r\n      textElm.className = 'slick-context-menu-content';\r\n      textElm.textContent = (item as MenuCommandItem | MenuOptionItem).title || '';\r\n\r\n      liElm.appendChild(textElm);\r\n\r\n      if ((item as MenuCommandItem | MenuOptionItem).textCssClass) {\r\n        textElm.classList.add(...Utils.classNameToList((item as MenuCommandItem | MenuOptionItem).textCssClass));\r\n      }\r\n\r\n      commandOrOptionMenuElm.appendChild(liElm);\r\n\r\n      if (addClickListener) {\r\n        const eventGroup = isSubMenu ? 'sub-menu' : 'parent-menu';\r\n        this._bindingEventService.bind(liElm, 'click', this.handleMenuItemClick.bind(this, item, itemType, level) as EventListener, undefined, eventGroup);\r\n      }\r\n\r\n      // optionally open sub-menu(s) by mouseover\r\n      if (this._contextMenuProperties.subMenuOpenByEvent === 'mouseover') {\r\n        this._bindingEventService.bind(liElm, 'mouseover', ((e: DOMMouseOrTouchEvent<HTMLDivElement>) => {\r\n          if ((item as MenuCommandItem).commandItems || (item as MenuOptionItem).optionItems) {\r\n            this.repositionSubMenu(item, itemType, level, e);\r\n            this._lastMenuTypeClicked = itemType;\r\n          } else if (!isSubMenu) {\r\n            this.destroySubMenus();\r\n          }\r\n        }) as EventListener);\r\n      }\r\n\r\n      // the option/command item could be a sub-menu if it has another list of commands/options\r\n      if ((item as MenuCommandItem).commandItems || (item as MenuOptionItem).optionItems) {\r\n        const chevronElm = document.createElement('span');\r\n        chevronElm.className = 'sub-item-chevron';\r\n        if (this._contextMenuProperties.subItemChevronClass) {\r\n          chevronElm.classList.add(...Utils.classNameToList(this._contextMenuProperties.subItemChevronClass));\r\n        } else {\r\n          chevronElm.textContent = '\u2B9E'; // \u2B9E or \u25B8\r\n        }\r\n\r\n        liElm.classList.add('slick-submenu-item');\r\n        liElm.appendChild(chevronElm);\r\n        continue;\r\n      }\r\n    }\r\n  }\r\n\r\n  protected handleMenuItemClick(item: MenuCommandItem | MenuOptionItem | 'divider', type: MenuType, level = 0, e: DOMMouseOrTouchEvent<HTMLDivElement>) {\r\n    if ((item as never)?.[type] !== undefined && item !== 'divider' && !item.disabled && !(item as MenuCommandItem | MenuOptionItem).divider && this._currentCell !== undefined && this._currentRow !== undefined) {\r\n      if (type === 'option' && !this._grid.getEditorLock().commitCurrentEdit()) {\r\n        return;\r\n      }\r\n      const optionOrCommand = (item as any)[type] !== undefined ? (item as any)[type] : '';\r\n      const row = this._currentRow;\r\n      const cell = this._currentCell;\r\n      const columnDef = this._grid.getColumns()[cell];\r\n      const dataContext = this._grid.getDataItem(row);\r\n      let cellValue;\r\n\r\n      if (Object.prototype.hasOwnProperty.call(dataContext, columnDef?.field)) {\r\n        cellValue = dataContext[columnDef.field];\r\n      }\r\n\r\n      if (optionOrCommand !== undefined && !(item as any)[`${type}Items`]) {\r\n        // user could execute a callback through 2 ways\r\n        // via the onCommand event and/or an action callback\r\n        const callbackArgs = {\r\n          cell,\r\n          row,\r\n          grid: this._grid,\r\n          [type]: optionOrCommand,\r\n          item,\r\n          column: columnDef,\r\n          dataContext,\r\n          value: cellValue\r\n        };\r\n        const eventType = type === 'command' ? 'onCommand' : 'onOptionSelected';\r\n        this[eventType].notify(callbackArgs as any, e, this);\r\n\r\n        // execute action callback when defined\r\n        if (typeof (item as MenuCommandItem).action === 'function') {\r\n          (item as any).action.call(this, e, callbackArgs);\r\n        }\r\n\r\n        if (!e.defaultPrevented) {\r\n          this.destroyMenu(e, { cell, row });\r\n        }\r\n      } else if ((item as MenuCommandItem).commandItems || (item as MenuOptionItem).optionItems) {\r\n        this.repositionSubMenu(item, type, level, e);\r\n      } else {\r\n        this.destroySubMenus();\r\n      }\r\n      this._lastMenuTypeClicked = type;\r\n    }\r\n  }\r\n\r\n  protected repositionSubMenu(item: MenuCommandItem | MenuOptionItem | 'divider', type: MenuType, level: number, e: DOMMouseOrTouchEvent<HTMLDivElement>) {\r\n    // when we're clicking a grid cell OR our last menu type (command/option) differs then we know that we need to start fresh and close any sub-menus that might still be open\r\n    if (e.target.classList.contains('slick-cell') || this._lastMenuTypeClicked !== type) {\r\n      this.destroySubMenus();\r\n    }\r\n\r\n    // creating sub-menu, we'll also pass level & the item object since we might have \"subMenuTitle\" to show\r\n    const subMenuElm = this.createMenu((item as MenuCommandItem)?.commandItems || [], (item as MenuOptionItem)?.optionItems || [], level + 1, item);\r\n    subMenuElm.style.display = 'block';\r\n    document.body.appendChild(subMenuElm);\r\n    this.repositionMenu(e, subMenuElm);\r\n  }\r\n\r\n  /**\r\n   * Reposition the menu drop (up/down) and the side (left/right)\r\n   * @param {*} event\r\n   */\r\n  protected repositionMenu(e: DOMMouseOrTouchEvent<HTMLDivElement>, menuElm: HTMLElement) {\r\n    const isSubMenu = menuElm.classList.contains('slick-submenu');\r\n    const targetEvent = (e as TouchEvent).touches?.[0] ?? e;\r\n    const parentElm = isSubMenu\r\n      ? e.target.closest('.slick-context-menu-item') as HTMLDivElement\r\n      : e.target.closest('.slick-cell') as HTMLDivElement;\r\n\r\n    if (menuElm && parentElm) {\r\n      const parentOffset = Utils.offset(parentElm);\r\n      let menuOffsetLeft = (isSubMenu && parentElm) ? parentOffset?.left ?? 0 : targetEvent.pageX;\r\n      let menuOffsetTop = parentElm ? parentOffset?.top ?? 0 : targetEvent.pageY;\r\n      const menuHeight = menuElm?.offsetHeight || 0;\r\n      const menuWidth = Number(menuElm?.offsetWidth || this._contextMenuProperties.width || 0);\r\n      const rowHeight = this._gridOptions.rowHeight;\r\n      const dropOffset = Number(this._contextMenuProperties.autoAdjustDropOffset || 0);\r\n      const sideOffset = Number(this._contextMenuProperties.autoAlignSideOffset || 0);\r\n\r\n      // if autoAdjustDrop is enable, we first need to see what position the drop will be located\r\n      // without necessary toggling it's position just yet, we just want to know the future position for calculation\r\n      if (this._contextMenuProperties.autoAdjustDrop) {\r\n        // since we reposition menu below slick cell, we need to take it in consideration and do our calculation from that element\r\n        const spaceBottom = Utils.calculateAvailableSpace(parentElm).bottom;\r\n        const spaceTop = Utils.calculateAvailableSpace(parentElm).top;\r\n        const spaceBottomRemaining = spaceBottom + dropOffset - rowHeight!;\r\n        const spaceTopRemaining = spaceTop - dropOffset + rowHeight!;\r\n        const dropPosition = (spaceBottomRemaining < menuHeight && spaceTopRemaining > spaceBottomRemaining) ? 'top' : 'bottom';\r\n        if (dropPosition === 'top') {\r\n          menuElm.classList.remove('dropdown');\r\n          menuElm.classList.add('dropup');\r\n          if (isSubMenu) {\r\n            menuOffsetTop -= (menuHeight - dropOffset - parentElm.clientHeight);\r\n          } else {\r\n            menuOffsetTop -= menuHeight - dropOffset;\r\n          }\r\n        } else {\r\n          menuElm.classList.remove('dropup');\r\n          menuElm.classList.add('dropdown');\r\n          if (isSubMenu) {\r\n            menuOffsetTop += dropOffset;\r\n          } else {\r\n            menuOffsetTop += rowHeight! + dropOffset;\r\n          }\r\n        }\r\n      }\r\n\r\n      // when auto-align is set, it will calculate whether it has enough space in the viewport to show the drop menu on the right (default)\r\n      // if there isn't enough space on the right, it will automatically align the drop menu to the left\r\n      // to simulate an align left, we actually need to know the width of the drop menu\r\n      if (this._contextMenuProperties.autoAlignSide) {\r\n        const gridPos = this._grid.getGridPosition();\r\n        let subMenuPosCalc = menuOffsetLeft + Number(menuWidth); // calculate coordinate at caller element far right\r\n        if (isSubMenu) {\r\n          subMenuPosCalc += parentElm.clientWidth;\r\n        }\r\n        const browserWidth = document.documentElement.clientWidth;\r\n        const dropSide = (subMenuPosCalc >= gridPos.width || subMenuPosCalc >= browserWidth) ? 'left' : 'right';\r\n        if (dropSide === 'left') {\r\n          menuElm.classList.remove('dropright');\r\n          menuElm.classList.add('dropleft');\r\n          menuOffsetLeft -= menuWidth - sideOffset;\r\n        } else {\r\n          menuElm.classList.remove('dropleft');\r\n          menuElm.classList.add('dropright');\r\n          if (isSubMenu) {\r\n            menuOffsetLeft += sideOffset + parentElm.offsetWidth;\r\n          } else {\r\n            menuOffsetLeft += sideOffset;\r\n          }\r\n        }\r\n      }\r\n\r\n      // ready to reposition the menu\r\n      menuElm.style.top = `${menuOffsetTop}px`;\r\n      menuElm.style.left = `${menuOffsetLeft}px`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method that user can pass to override the default behavior.\r\n   * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\r\n   * @param overrideFn: override function callback\r\n   * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\r\n   */\r\n  protected runOverrideFunctionWhenExists<T = any>(overrideFn: ((args: any) => boolean) | undefined, args: T): boolean {\r\n    if (typeof overrideFn === 'function') {\r\n      return overrideFn.call(this, args);\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      Plugins: {\r\n        ContextMenu: SlickContextMenu\r\n      }\r\n    }\r\n  });\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
