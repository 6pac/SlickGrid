{
  "version": 3,
  "sources": ["../../../src/plugins/slick.autotooltips.ts"],
  "sourcesContent": ["import type { AutoTooltipOption, Column, SlickPlugin } from '../models/index';\nimport { Utils as Utils_ } from '../slick.core';\nimport type { SlickGrid } from '../slick.grid';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n/**\n * AutoTooltips plugin to show/hide tooltips when columns are too narrow to fit content.\n */\nexport class SlickAutoTooltips implements SlickPlugin {\n  // --\n  // public API\n  pluginName = 'AutoTooltips' as const;\n\n  // --\n  // protected props\n  protected _grid!: SlickGrid;\n  protected _options?: AutoTooltipOption;\n  protected _defaults: AutoTooltipOption = {\n    enableForCells: true,\n    enableForHeaderCells: false,\n    maxToolTipLength: undefined,\n    replaceExisting: true\n  };\n\n  /**\n   * Constructor of the SlickGrid 3rd party plugin, it can optionally receive options\n   * @param {boolean} [options.enableForCells=true]        - Enable tooltip for grid cells\n   * @param {boolean} [options.enableForHeaderCells=false] - Enable tooltip for header cells\n   * @param {number}  [options.maxToolTipLength=null]      - The maximum length for a tooltip\n   * @param {boolean} [options.replaceExisting=null]       - Allow preventing custom tooltips from being overwritten by auto tooltips\n   */\n  constructor(options?: AutoTooltipOption) {\n    this._options = Utils.extend(true, {}, this._defaults, options);\n  }\n\n  /**\n   * Initialize plugin.\n   */\n  init(grid: SlickGrid) {\n    this._grid = grid;\n    if (this._options?.enableForCells) {\n      this._grid.onMouseEnter.subscribe(this.handleMouseEnter.bind(this));\n    }\n    if (this._options?.enableForHeaderCells) {\n      this._grid.onHeaderMouseEnter.subscribe(this.handleHeaderMouseEnter.bind(this));\n    }\n  }\n\n  /**\n   * Destroy plugin.\n   */\n  destroy() {\n    if (this._options?.enableForCells) {\n      this._grid.onMouseEnter.unsubscribe(this.handleMouseEnter.bind(this));\n    }\n    if (this._options?.enableForHeaderCells) {\n      this._grid.onHeaderMouseEnter.unsubscribe(this.handleHeaderMouseEnter.bind(this));\n    }\n  }\n\n  /**\n   * Handle mouse entering grid cell to add/remove tooltip.\n   * @param {MouseEvent} event - The event\n   */\n  protected handleMouseEnter(event: MouseEvent) {\n    const cell = this._grid.getCellFromEvent(event);\n    if (cell) {\n      let node: HTMLElement | null = this._grid.getCellNode(cell.row, cell.cell);\n      let text;\n      if (this._options && node && (!node.title || this._options?.replaceExisting)) {\n        if (node.clientWidth < node.scrollWidth) {\n          text = node.textContent?.trim() ?? '';\n          if (this._options?.maxToolTipLength && text.length > this._options?.maxToolTipLength) {\n            text = text.substring(0, this._options.maxToolTipLength - 3) + '...';\n          }\n        } else {\n          text = '';\n        }\n        node.title = text;\n      }\n      node = null;\n    }\n  }\n\n  /**\n   * Handle mouse entering header cell to add/remove tooltip.\n   * @param {MouseEvent} event   - The event\n   * @param {object} args.column - The column definition\n   */\n  protected handleHeaderMouseEnter(event: MouseEvent, args: { column: Column; }) {\n    const column = args.column;\n    let node: HTMLDivElement | null;\n    const targetElm = (event.target as HTMLDivElement);\n\n    if (targetElm) {\n      node = targetElm.closest<HTMLDivElement>('.slick-header-column');\n      if (node && !(column?.toolTip)) {\n        const titleVal = (targetElm.clientWidth < node.clientWidth) ? column?.name ?? '' : '';\n        node.title = titleVal instanceof HTMLElement ? titleVal.innerHTML : titleVal;\n      }\n    }\n    node = null;\n  }\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      AutoTooltips: SlickAutoTooltips\n    }\n  });\n}\n"],
  "mappings": ";;;;;;;AAKA,MAAM,QAAoB,MAAM,OAKnB,oBAAN,MAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAuBpD,YAAY,SAA6B;AApBzC;AAAA;AAAA,wCAAa;AAIb;AAAA;AAAA,0BAAU;AACV,0BAAU;AACV,0BAAU,aAA+B;AAAA,QACvC,gBAAgB;AAAA,QAChB,sBAAsB;AAAA,QACtB,kBAAkB;AAAA,QAClB,iBAAiB;AAAA,MACnB;AAUE,WAAK,WAAW,MAAM,OAAO,IAAM,CAAC,GAAG,KAAK,WAAW,OAAO;AAAA,IAChE;AAAA;AAAA;AAAA;AAAA,IAKA,KAAK,MAAiB;AAxCxB;AAyCI,WAAK,QAAQ,OACT,UAAK,aAAL,WAAe,kBACjB,KAAK,MAAM,aAAa,UAAU,KAAK,iBAAiB,KAAK,IAAI,CAAC,IAEhE,UAAK,aAAL,WAAe,wBACjB,KAAK,MAAM,mBAAmB,UAAU,KAAK,uBAAuB,KAAK,IAAI,CAAC;AAAA,IAElF;AAAA;AAAA;AAAA;AAAA,IAKA,UAAU;AArDZ;AAsDI,OAAI,UAAK,aAAL,WAAe,kBACjB,KAAK,MAAM,aAAa,YAAY,KAAK,iBAAiB,KAAK,IAAI,CAAC,IAElE,UAAK,aAAL,WAAe,wBACjB,KAAK,MAAM,mBAAmB,YAAY,KAAK,uBAAuB,KAAK,IAAI,CAAC;AAAA,IAEpF;AAAA;AAAA;AAAA;AAAA;AAAA,IAMU,iBAAiB,OAAmB;AAlEhD;AAmEI,UAAM,OAAO,KAAK,MAAM,iBAAiB,KAAK;AAC9C,UAAI,MAAM;AACR,YAAI,OAA2B,KAAK,MAAM,YAAY,KAAK,KAAK,KAAK,IAAI,GACrE;AACJ,QAAI,KAAK,YAAY,SAAS,CAAC,KAAK,UAAS,UAAK,aAAL,WAAe,qBACtD,KAAK,cAAc,KAAK,eAC1B,QAAO,gBAAK,gBAAL,mBAAkB,WAAlB,YAA4B,KAC/B,UAAK,aAAL,WAAe,oBAAoB,KAAK,WAAS,UAAK,aAAL,mBAAe,sBAClE,OAAO,KAAK,UAAU,GAAG,KAAK,SAAS,mBAAmB,CAAC,IAAI,UAGjE,OAAO,IAET,KAAK,QAAQ,OAEf,OAAO;AAAA,MACT;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOU,uBAAuB,OAAmB,MAA2B;AA3FjF;AA4FI,UAAM,SAAS,KAAK,QAChB,MACE,YAAa,MAAM;AAEzB,UAAI,cACF,OAAO,UAAU,QAAwB,sBAAsB,GAC3D,QAAQ,EAAE,yBAAQ,WAAU;AAC9B,YAAM,WAAY,UAAU,cAAc,KAAK,gBAAe,sCAAQ,SAAR,YAAqB;AACnF,aAAK,QAAQ,oBAAoB,cAAc,SAAS,YAAY;AAAA,MACtE;AAEF,aAAO;AAAA,IACT;AAAA,EACF;AAGA,EAAiB,OAAO,SACtB,MAAM,OAAO,IAAM,QAAQ;AAAA,IACzB,OAAO;AAAA,MACL,cAAc;AAAA,IAChB;AAAA,EACF,CAAC;",
  "names": []
}
