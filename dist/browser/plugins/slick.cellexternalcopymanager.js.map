{
  "version": 3,
  "sources": ["../../../src/plugins/slick.cellexternalcopymanager.ts"],
  "sourcesContent": ["import type { CellRange, Column, CssStyleHash, ExcelCopyBufferOption, ExternalCopyClipCommand, SlickPlugin } from '../models/index';\nimport type { SlickGrid } from '../slick.grid';\nimport { SlickEvent as SlickEvent_, SlickRange as SlickRange_, Utils as Utils_ } from '../slick.core';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst SlickRange = IIFE_ONLY ? Slick.Range : SlickRange_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\nconst CLEAR_COPY_SELECTION_DELAY = 2000;\nconst CLIPBOARD_PASTE_DELAY = 100;\n\n/***\n  This manager enables users to copy/paste data from/to an external Spreadsheet application\n  such as MS-Excel\u00AE or OpenOffice-Spreadsheet.\n\n  Since it is not possible to access directly the clipboard in javascript, the plugin uses\n  a trick to do it's job. After detecting the keystroke, we dynamically create a textarea\n  where the browser copies/pastes the serialized data.\n\n  options:\n    copiedCellStyle : sets the css className used for copied cells. default : \"copied\"\n    copiedCellStyleLayerKey : sets the layer key for setting css values of copied cells. default : \"copy-manager\"\n    dataItemColumnValueExtractor : option to specify a custom column value extractor function\n    dataItemColumnValueSetter : option to specify a custom column value setter function\n    clipboardCommandHandler : option to specify a custom handler for paste actions\n    includeHeaderWhenCopying : set to true and the plugin will take the name property from each column (which is usually what appears in your header) and put that as the first row of the text that's copied to the clipboard\n    bodyElement: option to specify a custom DOM element which to will be added the hidden textbox. It's useful if the grid is inside a modal dialog.\n    onCopyInit: optional handler to run when copy action initializes\n    onCopySuccess: optional handler to run when copy action is complete\n    newRowCreator: function to add rows to table if paste overflows bottom of table, if this function is not provided new rows will be ignored.\n    readOnlyMode: suppresses paste\n    headerColumnValueExtractor : option to specify a custom column header value extractor function\n*/\nexport class SlickCellExternalCopyManager implements SlickPlugin {\n  // --\n  // public API\n  pluginName = 'CellExternalCopyManager' as const;\n  onCopyCells = new SlickEvent<{ ranges: CellRange[]; }>();\n  onCopyCancelled = new SlickEvent<{ ranges: CellRange[]; }>();\n  onPasteCells = new SlickEvent<{ ranges: CellRange[]; }>();\n\n  // --\n  // protected props\n  protected _grid!: SlickGrid;\n  protected _bodyElement: HTMLElement;\n  protected _copiedRanges: CellRange[] | null = null;\n  protected _clearCopyTI?: NodeJS.Timeout;\n  protected _copiedCellStyle: string;\n  protected _copiedCellStyleLayerKey: string;\n  protected _onCopyInit?: () => void;\n  protected _onCopySuccess?: (rowCount: number) => void;\n  protected _options: ExcelCopyBufferOption;\n\n  protected keyCodes = {\n    'C': 67,\n    'V': 86,\n    'ESC': 27,\n    'INSERT': 45\n  };\n\n  constructor(options: ExcelCopyBufferOption) {\n    this._options = options || {};\n    this._copiedCellStyleLayerKey = this._options.copiedCellStyleLayerKey || 'copy-manager';\n    this._copiedCellStyle = this._options.copiedCellStyle || 'copied';\n    this._bodyElement = this._options.bodyElement || document.body;\n    this._onCopyInit = this._options.onCopyInit || undefined;\n    this._onCopySuccess = this._options.onCopySuccess || undefined;\n  }\n\n  init(grid: SlickGrid) {\n    this._grid = grid;\n    this._grid.onKeyDown.subscribe(this.handleKeyDown.bind(this));\n\n    // we need a cell selection model\n    const cellSelectionModel = grid.getSelectionModel();\n    if (!cellSelectionModel) {\n      throw new Error('Selection model is mandatory for this plugin. Please set a selection model on the grid before adding this plugin: grid.setSelectionModel(new Slick.CellSelectionModel())');\n    }\n    // we give focus on the grid when a selection is done on it.\n    // without this, if the user selects a range of cell without giving focus on a particular cell, the grid doesn't get the focus and key stroke handles (ctrl+c) don't work\n    cellSelectionModel.onSelectedRangesChanged.subscribe(() => {\n      if (!this._grid.getEditorLock().isActive()) {\n        this._grid.focus();\n      }\n    });\n  }\n\n  destroy() {\n    this._grid.onKeyDown.unsubscribe(this.handleKeyDown.bind(this));\n  }\n\n  protected getHeaderValueForColumn(columnDef: Column) {\n    if (this._options.headerColumnValueExtractor) {\n      const val = this._options.headerColumnValueExtractor(columnDef);\n      if (val) {\n        return val;\n      }\n    }\n\n    return columnDef.name;\n  }\n\n  protected getDataItemValueForColumn(item: any, columnDef: Column, event: Event): string {\n    if (typeof this._options.dataItemColumnValueExtractor === 'function') {\n      const val = this._options.dataItemColumnValueExtractor(item, columnDef) as string | null;\n      if (val) {\n        return val;\n      }\n    }\n\n    let retVal = '';\n\n    // if a custom getter is not defined, we call serializeValue of the editor to serialize\n    if (columnDef?.editor) {\n      const tmpP = document.createElement('p');\n      const editor = new (columnDef.editor as any)({\n        container: tmpP,  // a dummy container\n        column: columnDef,\n        event,\n        position: { top: 0, left: 0 },  // a dummy position required by some editors\n        grid: this._grid,\n      });\n      editor.loadValue(item);\n      retVal = editor.serializeValue();\n      editor.destroy();\n      tmpP.remove();\n    } else {\n      retVal = item[columnDef.field || ''];\n    }\n\n    return retVal;\n  }\n\n  protected setDataItemValueForColumn(item: any, columnDef: Column, value: string): null | string | void {\n    if (columnDef.denyPaste) {\n      return null;\n    }\n\n    if (this._options.dataItemColumnValueSetter) {\n      return this._options.dataItemColumnValueSetter(item, columnDef, value) as string;\n    }\n\n    // if a custom setter is not defined, we call applyValue of the editor to unserialize\n    if (columnDef.editor) {\n      const tmpDiv = document.createElement('div');\n      const editor = new (columnDef.editor as any)({\n        container: tmpDiv, // a dummy container\n        column: columnDef,\n        position: { top: 0, left: 0 },  // a dummy position required by some editors\n        grid: this._grid\n      });\n      editor.loadValue(item);\n      editor.applyValue(item, value);\n      editor.destroy();\n      tmpDiv.remove();\n    } else {\n      item[columnDef.field] = value;\n    }\n  }\n\n\n  protected _createTextBox(innerText: string) {\n    const ta = document.createElement('textarea');\n    ta.style.position = 'absolute';\n    ta.style.left = '-1000px';\n    ta.style.top = document.body.scrollTop + 'px';\n    ta.value = innerText;\n    this._bodyElement.appendChild(ta);\n    ta.select();\n\n    return ta;\n  }\n\n  protected _decodeTabularData(grid: SlickGrid, ta: HTMLTextAreaElement) {\n    const columns = grid.getColumns();\n    const clipText = ta.value;\n    const clipRows = clipText.split(/[\\n\\f\\r]/);\n    // trim trailing CR if present\n    if (clipRows[clipRows.length - 1] === '') {\n      clipRows.pop();\n    }\n\n    let j = 0;\n    const clippedRange: any[] = [];\n\n    this._bodyElement.removeChild(ta);\n    for (let i = 0; i < clipRows.length; i++) {\n      if (clipRows[i] !== '') {\n        clippedRange[j++] = clipRows[i].split('\\t');\n      } else {\n        clippedRange[j++] = [''];\n      }\n    }\n    const selectedCell = grid.getActiveCell();\n    const ranges = grid.getSelectionModel()?.getSelectedRanges();\n    const selectedRange = ranges && ranges.length ? ranges[0] : null;   // pick only one selection\n    let activeRow: number;\n    let activeCell: number;\n\n    if (selectedRange) {\n      activeRow = selectedRange.fromRow;\n      activeCell = selectedRange.fromCell;\n    } else if (selectedCell) {\n      activeRow = selectedCell.row;\n      activeCell = selectedCell.cell;\n    } else {\n      // we don't know where to paste\n      return;\n    }\n\n    let oneCellToMultiple = false;\n    let destH = clippedRange.length;\n    let destW = clippedRange.length ? clippedRange[0].length : 0;\n    if (clippedRange.length === 1 && clippedRange[0].length === 1 && selectedRange) {\n      oneCellToMultiple = true;\n      destH = selectedRange.toRow - selectedRange.fromRow + 1;\n      destW = selectedRange.toCell - selectedRange.fromCell + 1;\n    }\n    const availableRows = (grid.getData() as any[]).length - (activeRow || 0);\n    let addRows = 0;\n\n    // ignore new rows if we don't have a \"newRowCreator\"\n    if (availableRows < destH && typeof this._options.newRowCreator === 'function') {\n      const d = grid.getData<any[]>();\n      for (addRows = 1; addRows <= destH - availableRows; addRows++) {\n        d.push({});\n      }\n      grid.setData(d);\n      grid.render();\n    }\n\n    const overflowsBottomOfGrid = (activeRow || 0) + destH > grid.getDataLength();\n    if (this._options.newRowCreator && overflowsBottomOfGrid) {\n      const newRowsNeeded = (activeRow || 0) + destH - grid.getDataLength();\n      this._options.newRowCreator(newRowsNeeded);\n    }\n\n    const clipCommand: ExternalCopyClipCommand = {\n      isClipboardCommand: true,\n      clippedRange,\n      oldValues: [],\n      cellExternalCopyManager: this,\n      _options: this._options,\n      setDataItemValueForColumn: this.setDataItemValueForColumn.bind(this),\n      markCopySelection: this.markCopySelection.bind(this),\n      oneCellToMultiple,\n      activeRow,\n      activeCell,\n      destH,\n      destW,\n      maxDestY: grid.getDataLength(),\n      maxDestX: grid.getColumns().length,\n      h: 0,\n      w: 0,\n\n      execute: () => {\n        clipCommand.h = 0;\n        for (let y = 0; y < clipCommand.destH; y++) {\n          clipCommand.oldValues[y] = [];\n          clipCommand.w = 0;\n          clipCommand.h++;\n          for (let x = 0; x < clipCommand.destW; x++) {\n            clipCommand.w++;\n            const desty = activeRow + y;\n            const destx = activeCell + x;\n\n            if (desty < clipCommand.maxDestY && destx < clipCommand.maxDestX) {\n              const dt = grid.getDataItem(desty);\n              clipCommand.oldValues[y][x] = dt[columns[destx]['field']];\n              if (oneCellToMultiple) {\n                clipCommand.setDataItemValueForColumn(dt, columns[destx], clippedRange[0][0]);\n              } else {\n                clipCommand.setDataItemValueForColumn(dt, columns[destx], clippedRange[y] ? clippedRange[y][x] : '');\n              }\n              grid.updateCell(desty, destx);\n              grid.onCellChange.notify({\n                row: desty,\n                cell: destx,\n                item: dt,\n                grid,\n                column: {} as Column\n              });\n            }\n          }\n        }\n\n        const bRange = new SlickRange(\n          activeRow,\n          activeCell,\n          activeRow + clipCommand.h - 1,\n          activeCell + clipCommand.w - 1\n        );\n\n        this.markCopySelection([bRange]);\n        grid.getSelectionModel()?.setSelectedRanges([bRange]);\n        this.onPasteCells.notify({ ranges: [bRange] });\n      },\n\n      undo: () => {\n        for (let y = 0; y < clipCommand.destH; y++) {\n          for (let x = 0; x < clipCommand.destW; x++) {\n            const desty = activeRow + y;\n            const destx = activeCell + x;\n\n            if (desty < clipCommand.maxDestY && destx < clipCommand.maxDestX) {\n              const dt = grid.getDataItem(desty);\n              if (oneCellToMultiple) {\n                clipCommand.setDataItemValueForColumn(dt, columns[destx], clipCommand.oldValues[0][0]);\n              } else {\n                clipCommand.setDataItemValueForColumn(dt, columns[destx], clipCommand.oldValues[y][x]);\n              }\n              grid.updateCell(desty, destx);\n              grid.onCellChange.notify({\n                row: desty,\n                cell: destx,\n                item: dt,\n                grid,\n                column: {} as Column\n              });\n            }\n          }\n        }\n\n        const bRange = new SlickRange(\n          activeRow,\n          activeCell,\n          activeRow + clipCommand.h - 1,\n          activeCell + clipCommand.w - 1\n        );\n\n        this.markCopySelection([bRange]);\n        grid.getSelectionModel()?.setSelectedRanges([bRange]);\n        if (typeof this._options.onPasteCells === 'function') {\n          this.onPasteCells.notify({ ranges: [bRange] });\n        }\n\n        if (addRows > 1) {\n          const d = grid.getData<any[]>();\n          for (; addRows > 1; addRows--) {\n            d.splice(d.length - 1, 1);\n          }\n          grid.setData(d);\n          grid.render();\n        }\n      }\n    };\n\n    if (typeof this._options.clipboardCommandHandler === 'function') {\n      this._options.clipboardCommandHandler(clipCommand);\n    } else {\n      clipCommand.execute();\n    }\n  }\n\n  protected handleKeyDown(e: KeyboardEvent): boolean | void {\n    let ranges: CellRange[];\n    if (!this._grid.getEditorLock().isActive() || this._grid.getOptions().autoEdit) {\n      if (e.which === this.keyCodes.ESC) {\n        if (this._copiedRanges) {\n          e.preventDefault();\n          this.clearCopySelection();\n          this.onCopyCancelled.notify({ ranges: this._copiedRanges });\n          this._copiedRanges = null;\n        }\n      }\n\n      if ((e.which === this.keyCodes.C || e.which === this.keyCodes.INSERT) && (e.ctrlKey || e.metaKey) && !e.shiftKey) {    // CTRL+C or CTRL+INS\n        if (typeof this._onCopyInit === 'function') {\n          this._onCopyInit.call(this);\n        }\n        ranges = this._grid.getSelectionModel()?.getSelectedRanges() ?? [];\n        if (ranges.length !== 0) {\n          this._copiedRanges = ranges;\n          this.markCopySelection(ranges);\n          this.onCopyCells.notify({ ranges });\n\n          const columns = this._grid.getColumns();\n          let clipText = '';\n\n          for (let rg = 0; rg < ranges.length; rg++) {\n            const range = ranges[rg];\n            const clipTextRows: string[] = [];\n            for (let i = range.fromRow; i < range.toRow + 1; i++) {\n              const clipTextCells: string[] = [];\n              const dt = this._grid.getDataItem(i);\n\n              if (clipTextRows.length === 0 && this._options.includeHeaderWhenCopying) {\n                const clipTextHeaders: string[] = [];\n                for (let j = range.fromCell; j < range.toCell + 1; j++) {\n                  const colName: string = columns[j].name instanceof HTMLElement\n                    ? (columns[j].name as HTMLElement).innerHTML\n                    : columns[j].name as string;\n                  if (colName.length > 0 && !columns[j].hidden) {\n                    clipTextHeaders.push(this.getHeaderValueForColumn(columns[j]));\n                  }\n                }\n                clipTextRows.push(clipTextHeaders.join('\\t'));\n              }\n\n              for (let j = range.fromCell; j < range.toCell + 1; j++) {\n                const colName: string = columns[j].name instanceof HTMLElement\n                  ? (columns[j].name as HTMLElement).innerHTML\n                  : columns[j].name as string;\n                if (colName.length > 0 && !columns[j].hidden) {\n                  clipTextCells.push(this.getDataItemValueForColumn(dt, columns[j], e));\n                }\n              }\n              clipTextRows.push(clipTextCells.join('\\t'));\n            }\n            clipText += clipTextRows.join('\\r\\n') + '\\r\\n';\n          }\n\n          if ((window as any).clipboardData) {\n            (window as any).clipboardData.setData('Text', clipText);\n            return true;\n          }\n          else {\n            const focusEl = document.activeElement as HTMLElement;\n            const ta = this._createTextBox(clipText);\n            ta.focus();\n\n            setTimeout(() => {\n              this._bodyElement.removeChild(ta);\n              // restore focus when possible\n              focusEl\n                ? focusEl.focus()\n                : console.log('No element to restore focus to after copy?');\n            }, this._options?.clipboardPasteDelay ?? CLIPBOARD_PASTE_DELAY);\n\n            if (typeof this._onCopySuccess === 'function') {\n              let rowCount = 0;\n              // If it's cell selection, use the toRow/fromRow fields\n              if (ranges.length === 1) {\n                rowCount = (ranges[0].toRow + 1) - ranges[0].fromRow;\n              } else {\n                rowCount = ranges.length;\n              }\n              this._onCopySuccess(rowCount);\n            }\n\n            return false;\n          }\n        }\n      }\n\n      if (!this._options.readOnlyMode && (\n        (e.which === this.keyCodes.V && (e.ctrlKey || e.metaKey) && !e.shiftKey)\n        || (e.which === this.keyCodes.INSERT && e.shiftKey && !e.ctrlKey)\n      )) {    // CTRL+V or Shift+INS\n        const ta = this._createTextBox('');\n        setTimeout(() => this._decodeTabularData(this._grid, ta), 100);\n        return false;\n      }\n    }\n  }\n\n  protected markCopySelection(ranges: CellRange[]) {\n    this.clearCopySelection();\n\n    const columns = this._grid.getColumns();\n    const hash: CssStyleHash = {};\n    for (let i = 0; i < ranges.length; i++) {\n      for (let j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {\n        hash[j] = {};\n        for (let k = ranges[i].fromCell; k <= ranges[i].toCell && k < columns.length; k++) {\n          hash[j][columns[k].id] = this._copiedCellStyle;\n        }\n      }\n    }\n    this._grid.setCellCssStyles(this._copiedCellStyleLayerKey, hash);\n    clearTimeout(this._clearCopyTI as NodeJS.Timeout);\n    this._clearCopyTI = setTimeout(() => {\n      this.clearCopySelection();\n    }, this._options?.clearCopySelectionDelay || CLEAR_COPY_SELECTION_DELAY);\n  }\n\n  clearCopySelection() {\n    this._grid.removeCellCssStyles(this._copiedCellStyleLayerKey);\n  }\n\n  setIncludeHeaderWhenCopying(includeHeaderWhenCopying: boolean) {\n    this._options.includeHeaderWhenCopying = includeHeaderWhenCopying;\n  }\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      CellExternalCopyManager: SlickCellExternalCopyManager\n    }\n  });\n}\n"],
  "mappings": "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",
  "names": ["_a"]
}
