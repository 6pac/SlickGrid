{
  "version": 3,
  "sources": ["import-ns:../slick.core.js", "../../../src/plugins/slick.resizer.js"],
  "sourcesContent": ["// empty string, do nothing", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SlickResizer = void 0;\nvar slick_core_1 = require(\"../slick.core\");\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nvar BindingEventService = IIFE_ONLY ? Slick.BindingEventService : slick_core_1.BindingEventService;\nvar SlickEvent = IIFE_ONLY ? Slick.Event : slick_core_1.Event;\nvar Utils = IIFE_ONLY ? Slick.Utils : slick_core_1.Utils;\n// define some constants, height/width are in pixels\nvar DATAGRID_MIN_HEIGHT = 180;\nvar DATAGRID_MIN_WIDTH = 300;\nvar DATAGRID_BOTTOM_PADDING = 20;\n/***\n * A Resizer plugin that can be used to auto-resize a grid and/or resize with fixed dimensions.\n * When fixed height is defined, it will auto-resize only the width and vice versa with the width defined.\n * You can also choose to use the flag \"enableAutoSizeColumns\" if you want to the plugin to\n * automatically call the grid \"autosizeColumns()\" method after each resize.\n *\n * USAGE:\n *\n * Add the \"slick.resizer.js\" file and register it with the grid.\n *\n * You can specify certain options as arguments when instantiating the plugin like so:\n * var resizer = new Slick.Plugins.Resizer({\n *   container: '#gridContainer',\n *   rightPadding: 15,\n *   bottomPadding: 20,\n *   minHeight: 180,\n *   minWidth: 300,\n * });\n * grid.registerPlugin(resizer);\n *\n *\n * The plugin exposes the following events:\n *\n *    onGridAfterResize:  Fired after the grid got resized.  You can customize the menu or dismiss it by returning false.\n *        Event args:\n *            grid:       Reference to the grid.\n *            dimensions: Resized grid dimensions used\n *\n *    onGridBeforeResize:   Fired before the grid gets resized.  You can customize the menu or dismiss it by returning false.\n *        Event args:\n *            grid:     Reference to the grid.\n *\n *\n * @param {Object} options available plugin options that can be passed in the constructor:\n *   container:      (REQUIRED) DOM element selector of the page container, basically what element in the page will be used to calculate the available space\n *   gridContainer:             DOM element selector of the grid container, optional but when provided it will be resized with same size as the grid (typically a container holding the grid and extra custom footer/pagination)\n *   applyResizeToContainer:    Defaults to false, do we want to apply the resized dimentions to the grid container as well?\n *   rightPadding:              Defaults to 0, right side padding to remove from the total dimension\n *   bottomPadding:             Defaults to 20, bottom padding to remove from the total dimension\n *   minHeight:                 Defaults to 180, minimum height of the grid\n *   minWidth:                  Defaults to 300, minimum width of the grid\n *   maxHeight:                 Maximum height of the grid\n *   maxWidth:                  Maximum width of the grid\n *   calculateAvailableSizeBy:  Defaults to \"window\", which DOM element (\"container\" or \"window\") are we using to calculate the available size for the grid?\n *\n * @class Slick.Plugins.Resizer\n */\nvar SlickResizer = /** @class */ (function () {\n    function SlickResizer(options, fixedDimensions) {\n        // --\n        // public API\n        this.pluginName = 'Resizer';\n        this.onGridAfterResize = new SlickEvent();\n        this.onGridBeforeResize = new SlickEvent();\n        this._gridUid = '';\n        this._resizePaused = false;\n        this._defaults = {\n            bottomPadding: 20,\n            applyResizeToContainer: false,\n            minHeight: 180,\n            minWidth: 300,\n            rightPadding: 0\n        };\n        this._bindingEventService = new BindingEventService();\n        this._options = Utils.extend(true, {}, this._defaults, options);\n        if (fixedDimensions) {\n            this._fixedHeight = fixedDimensions.height;\n            this._fixedWidth = fixedDimensions.width;\n        }\n    }\n    SlickResizer.prototype.setOptions = function (newOptions) {\n        this._options = Utils.extend(true, {}, this._defaults, this._options, newOptions);\n    };\n    SlickResizer.prototype.init = function (grid) {\n        this.setOptions(this._options);\n        this._grid = grid;\n        this._gridOptions = this._grid.getOptions();\n        this._gridUid = this._grid.getUID();\n        this._gridDomElm = this._grid.getContainerNode();\n        this._pageContainerElm = typeof this._options.container === 'string'\n            ? document.querySelector(this._options.container)\n            : this._options.container;\n        if (this._options.gridContainer) {\n            this._gridContainerElm = this._options.gridContainer;\n        }\n        if (this._gridOptions) {\n            this.bindAutoResizeDataGrid();\n        }\n    };\n    /** Bind an auto resize trigger on the datagrid, if that is enable then it will resize itself to the available space\n    * Options: we could also provide a % factor to resize on each height/width independently\n    */\n    SlickResizer.prototype.bindAutoResizeDataGrid = function (newSizes) {\n        var _this = this;\n        var gridElmOffset = Utils.offset(this._gridDomElm);\n        // if we can't find the grid to resize, return without binding anything\n        if (this._gridDomElm !== undefined || gridElmOffset !== undefined) {\n            // -- 1st resize the datagrid size at first load (we need this because the .on event is not triggered on first load)\n            // -- also we add a slight delay (in ms) so that we resize after the grid render is done\n            this.resizeGrid(0, newSizes, null);\n            // -- 2nd bind a trigger on the Window DOM element, so that it happens also when resizing after first load\n            // -- bind auto-resize to Window object only if it exist\n            this._bindingEventService.bind(window, 'resize', function (event) {\n                _this.onGridBeforeResize.notify({ grid: _this._grid }, event, _this);\n                // unless the resizer is paused, let's go and resize the grid\n                if (!_this._resizePaused) {\n                    // for some yet unknown reason, calling the resize twice removes any stuttering/flickering\n                    // when changing the height and makes it much smoother experience\n                    _this.resizeGrid(0, newSizes, event);\n                    _this.resizeGrid(0, newSizes, event);\n                }\n            });\n        }\n    };\n    /**\n     * Calculate the datagrid new height/width from the available space, also consider that a % factor might be applied to calculation\n     */\n    SlickResizer.prototype.calculateGridNewDimensions = function () {\n        var _a, _b, _c, _d, _e, _f;\n        var gridElmOffset = Utils.offset(this._gridDomElm);\n        if (!window || this._pageContainerElm === undefined || this._gridDomElm === undefined || gridElmOffset === undefined) {\n            return null;\n        }\n        // calculate bottom padding\n        var bottomPadding = (((_a = this._options) === null || _a === void 0 ? void 0 : _a.bottomPadding) !== undefined) ? this._options.bottomPadding : DATAGRID_BOTTOM_PADDING;\n        var gridHeight = 0;\n        var gridOffsetTop = 0;\n        // which DOM element are we using to calculate the available size for the grid?\n        // defaults to \"window\"\n        if (this._options.calculateAvailableSizeBy === 'container') {\n            // uses the container's height to calculate grid height without any top offset\n            gridHeight = Utils.innerSize(this._pageContainerElm, 'height') || 0;\n        }\n        else {\n            // uses the browser's window height with its top offset to calculate grid height\n            gridHeight = window.innerHeight || 0;\n            gridOffsetTop = (gridElmOffset !== undefined) ? gridElmOffset.top : 0;\n        }\n        var availableHeight = gridHeight - gridOffsetTop - bottomPadding;\n        var availableWidth = Utils.innerSize(this._pageContainerElm, 'width') || window.innerWidth || 0;\n        var maxHeight = ((_b = this._options) === null || _b === void 0 ? void 0 : _b.maxHeight) || undefined;\n        var minHeight = (((_c = this._options) === null || _c === void 0 ? void 0 : _c.minHeight) !== undefined) ? this._options.minHeight : DATAGRID_MIN_HEIGHT;\n        var maxWidth = ((_d = this._options) === null || _d === void 0 ? void 0 : _d.maxWidth) || undefined;\n        var minWidth = (((_e = this._options) === null || _e === void 0 ? void 0 : _e.minWidth) !== undefined) ? this._options.minWidth : DATAGRID_MIN_WIDTH;\n        var newHeight = availableHeight;\n        var newWidth = ((_f = this._options) === null || _f === void 0 ? void 0 : _f.rightPadding) ? availableWidth - this._options.rightPadding : availableWidth;\n        // optionally (when defined), make sure that grid height & width are within their thresholds\n        if (newHeight < minHeight) {\n            newHeight = minHeight;\n        }\n        if (maxHeight && newHeight > maxHeight) {\n            newHeight = maxHeight;\n        }\n        if (newWidth < minWidth) {\n            newWidth = minWidth;\n        }\n        if (maxWidth && newWidth > maxWidth) {\n            newWidth = maxWidth;\n        }\n        // return the new dimensions unless a fixed height/width was defined\n        return {\n            height: this._fixedHeight || newHeight,\n            width: this._fixedWidth || newWidth\n        };\n    };\n    /** Destroy function when element is destroyed */\n    SlickResizer.prototype.destroy = function () {\n        this.onGridBeforeResize.unsubscribe();\n        this.onGridAfterResize.unsubscribe();\n        this._bindingEventService.unbindAll();\n    };\n    /**\n    * Return the last resize dimensions used by the service\n    * @return {object} last dimensions (height: number, width: number)\n    */\n    SlickResizer.prototype.getLastResizeDimensions = function () {\n        return this._lastDimensions;\n    };\n    /**\n     * Provide the possibility to pause the resizer for some time, until user decides to re-enabled it later if he wish to.\n     * @param {boolean} isResizePaused are we pausing the resizer?\n     */\n    SlickResizer.prototype.pauseResizer = function (isResizePaused) {\n        this._resizePaused = isResizePaused;\n    };\n    /**\n     * Resize the datagrid to fit the browser height & width.\n     * @param {number} [delay] to wait before resizing, defaults to 0 (in milliseconds)\n     * @param {object} [newSizes] can optionally be passed (height: number, width: number)\n     * @param {object} [event] that triggered the resize, defaults to null\n     * @return If the browser supports it, we can return a Promise that would resolve with the new dimensions\n     */\n    SlickResizer.prototype.resizeGrid = function (delay, newSizes, event) {\n        var _this = this;\n        // because of the javascript async nature, we might want to delay the resize a little bit\n        var resizeDelay = delay || 0;\n        // return a Promise when supported by the browser\n        if (typeof Promise === 'function') {\n            return new Promise(function (resolve) {\n                if (resizeDelay > 0) {\n                    clearTimeout(_this._timer);\n                    _this._timer = setTimeout(function () {\n                        resolve(_this.resizeGridCallback(newSizes, event));\n                    }, resizeDelay);\n                }\n                else {\n                    resolve(_this.resizeGridCallback(newSizes, event));\n                }\n            });\n        }\n        else {\n            // OR no return when Promise isn't supported\n            if (resizeDelay > 0) {\n                clearTimeout(this._timer);\n                this._timer = setTimeout(function () {\n                    _this.resizeGridCallback(newSizes, event);\n                }, resizeDelay);\n            }\n            else {\n                this.resizeGridCallback(newSizes, event);\n            }\n        }\n    };\n    SlickResizer.prototype.resizeGridCallback = function (newSizes, event) {\n        var lastDimensions = this.resizeGridWithDimensions(newSizes);\n        this.onGridAfterResize.notify({ grid: this._grid, dimensions: lastDimensions }, event, this);\n        return lastDimensions;\n    };\n    SlickResizer.prototype.resizeGridWithDimensions = function (newSizes) {\n        var _a, _b;\n        // calculate the available sizes with minimum height defined as a varant\n        var availableDimensions = this.calculateGridNewDimensions();\n        if ((newSizes || availableDimensions) && this._gridDomElm) {\n            try {\n                // get the new sizes, if new sizes are passed (not 0), we will use them else use available space\n                // basically if user passes 1 of the dimension, let say he passes just the height,\n                // we will use the height as a fixed height but the width will be resized by it's available space\n                var newHeight = (newSizes === null || newSizes === void 0 ? void 0 : newSizes.height) ? newSizes.height : availableDimensions === null || availableDimensions === void 0 ? void 0 : availableDimensions.height;\n                var newWidth = (newSizes === null || newSizes === void 0 ? void 0 : newSizes.width) ? newSizes.width : availableDimensions === null || availableDimensions === void 0 ? void 0 : availableDimensions.width;\n                // apply these new height/width to the datagrid\n                if (!this._gridOptions.autoHeight) {\n                    this._gridDomElm.style.height = \"\".concat(newHeight, \"px\");\n                }\n                this._gridDomElm.style.width = \"\".concat(newWidth, \"px\");\n                if (this._gridContainerElm) {\n                    this._gridContainerElm.style.width = \"\".concat(newWidth, \"px\");\n                }\n                // resize the slickgrid canvas on all browser\n                if ((_a = this._grid) === null || _a === void 0 ? void 0 : _a.resizeCanvas) {\n                    this._grid.resizeCanvas();\n                }\n                // also call the grid auto-size columns so that it takes available when going bigger\n                if (((_b = this._gridOptions) === null || _b === void 0 ? void 0 : _b.enableAutoSizeColumns) && this._grid.autosizeColumns) {\n                    // make sure that the grid still exist (by looking if the Grid UID is found in the DOM tree) to avoid SlickGrid error \"missing stylesheet\"\n                    if (this._gridUid && document.querySelector(\".\".concat(this._gridUid))) {\n                        this._grid.autosizeColumns();\n                    }\n                }\n                // keep last resized dimensions & resolve them to the Promise\n                this._lastDimensions = {\n                    height: newHeight,\n                    width: newWidth\n                };\n            }\n            catch (e) {\n                this.destroy();\n            }\n        }\n        return this._lastDimensions;\n    };\n    return SlickResizer;\n}());\nexports.SlickResizer = SlickResizer;\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n    Utils.extend(true, window, {\n        Slick: {\n            Plugins: {\n                Resizer: SlickResizer\n            }\n        }\n    });\n}\n"],
  "mappings": "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",
  "names": ["SlickResizer"]
}
