{
  "version": 3,
  "sources": ["../../../src/plugins/slick.rowmovemanager.ts"],
  "sourcesContent": ["import { SlickEvent as SlickEvent_, type SlickEventData as SlickEventData_, SlickEventHandler as SlickEventHandler_, Utils as Utils_ } from '../slick.core.js';\r\nimport type { Column, DragRowMove, FormatterResultWithHtml, RowMoveManagerOption, UsabilityOverrideFn } from '../models/index.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst SlickEventHandler = IIFE_ONLY ? Slick.EventHandler : SlickEventHandler_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/**\r\n * Row Move Manager options:\r\n *    containerCssClass:        A CSS class to be added to the cell container.\r\n *    cssClass:                 A CSS class to be added to the div of the cell formatter.\r\n *    columnId:                 Column definition id (defaults to \"_move\")\r\n *    cancelEditOnDrag:         Do we want to cancel any Editing while dragging a row (defaults to false)\r\n *    disableRowSelection:      Do we want to disable the row selection? (defaults to false)\r\n *    hideRowMoveShadow:        Do we want to hide the row move shadow clone? (defaults to true)\r\n *    rowMoveShadowMarginTop:   When row move shadow is shown, optional margin-top (defaults to 0)\r\n *    rowMoveShadowMarginLeft:  When row move shadow is shown, optional margin-left (defaults to 0)\r\n *    rowMoveShadowOpacity:     When row move shadow is shown, what is its opacity? (defaults to 0.95)\r\n *    rowMoveShadowScale:       When row move shadow is shown, what is its size scale? (default to 0.75)\r\n *    singleRowMove:            Do we want a single row move? Setting this to false means that it's a multple row move (defaults to false)\r\n *    width:                    Width of the column\r\n *    usabilityOverride:        Callback method that user can override the default behavior of the row being moveable or not\r\n *\r\n */\r\n\r\nexport class SlickRowMoveManager {\r\n  // --\r\n  // public API\r\n  pluginName = 'RowMoveManager' as const;\r\n  onBeforeMoveRows = new SlickEvent<{ grid: SlickGrid; rows: number[]; insertBefore: number; }>('onBeforeMoveRows');\r\n  onMoveRows = new SlickEvent<{ grid: SlickGrid; rows: number[]; insertBefore: number; }>('onMoveRows');\r\n\r\n  // --\r\n  // protected props\r\n  protected _grid!: SlickGrid;\r\n  protected _canvas!: HTMLElement;\r\n  protected _dragging = false;\r\n  protected _eventHandler: SlickEventHandler_;\r\n  protected _usabilityOverride?: UsabilityOverrideFn;\r\n  protected _options: RowMoveManagerOption;\r\n  protected _defaults: RowMoveManagerOption = {\r\n    columnId: '_move',\r\n    cssClass: undefined,\r\n    cancelEditOnDrag: false,\r\n    disableRowSelection: false,\r\n    hideRowMoveShadow: true,\r\n    reorderable: false,\r\n    rowMoveShadowMarginTop: 0,\r\n    rowMoveShadowMarginLeft: 0,\r\n    rowMoveShadowOpacity: 0.95,\r\n    rowMoveShadowScale: 0.75,\r\n    singleRowMove: false,\r\n    width: 40,\r\n  };\r\n\r\n  constructor(options: Partial<RowMoveManagerOption>) {\r\n    this._options = Utils.extend(true, {}, this._defaults, options);\r\n    this._eventHandler = new SlickEventHandler();\r\n  }\r\n\r\n\r\n  init(grid: SlickGrid) {\r\n    this._grid = grid;\r\n    this._canvas = this._grid.getCanvasNode();\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n\r\n    // user could override the expandable icon logic from within the options or after instantiating the plugin\r\n    if (typeof this._options?.usabilityOverride === 'function') {\r\n      this.usabilityOverride(this._options.usabilityOverride);\r\n    }\r\n\r\n    this._eventHandler\r\n      .subscribe(this._grid.onDragInit, this.handleDragInit.bind(this))\r\n      .subscribe(this._grid.onDragStart, this.handleDragStart.bind(this))\r\n      .subscribe(this._grid.onDrag, this.handleDrag.bind(this))\r\n      .subscribe(this._grid.onDragEnd, this.handleDragEnd.bind(this));\r\n  }\r\n\r\n  destroy() {\r\n    this._eventHandler.unsubscribeAll();\r\n  }\r\n\r\n  setOptions(newOptions: Partial<RowMoveManagerOption>) {\r\n    this._options = Utils.extend({}, this._options, newOptions);\r\n  }\r\n\r\n  protected handleDragInit(e: SlickEventData_) {\r\n    // prevent the grid from cancelling drag'n'drop by default\r\n    e.stopImmediatePropagation();\r\n  }\r\n\r\n  protected handleDragStart(e: SlickEventData_, dd: DragRowMove): boolean | void {\r\n    const cell = this._grid.getCellFromEvent(e) || { cell: -1, row: -1 };\r\n    const currentRow = cell?.row;\r\n    const dataContext = this._grid.getDataItem(currentRow);\r\n\r\n    if (!this.checkUsabilityOverride(currentRow, dataContext, this._grid)) {\r\n      return;\r\n    }\r\n\r\n    if (this._options.cancelEditOnDrag && this._grid.getEditorLock().isActive()) {\r\n      this._grid.getEditorLock().cancelCurrentEdit();\r\n    }\r\n\r\n    if (this._grid.getEditorLock().isActive() || !this.isHandlerColumn(cell.cell)) {\r\n      return false;\r\n    }\r\n\r\n    this._dragging = true;\r\n    e.stopImmediatePropagation();\r\n\r\n    // optionally create a shadow element of the row so that we can see all the time which row exactly we're dragging\r\n    if (!this._options.hideRowMoveShadow) {\r\n      const slickRowElm = this._grid.getCellNode(cell.row, cell.cell)?.closest<HTMLDivElement>('.slick-row');\r\n      if (slickRowElm) {\r\n        dd.clonedSlickRow = slickRowElm.cloneNode(true) as HTMLDivElement;\r\n        dd.clonedSlickRow.classList.add('slick-reorder-shadow-row');\r\n        dd.clonedSlickRow.style.display = 'none';\r\n        dd.clonedSlickRow.style.marginLeft = Number(this._options.rowMoveShadowMarginLeft || 0) + 'px';\r\n        dd.clonedSlickRow.style.marginTop = Number(this._options.rowMoveShadowMarginTop || 0) + 'px';\r\n        dd.clonedSlickRow.style.opacity = `${this._options.rowMoveShadowOpacity || 0.95}`;\r\n        dd.clonedSlickRow.style.transform = `scale(${this._options.rowMoveShadowScale || 0.75})`;\r\n        this._canvas.appendChild(dd.clonedSlickRow);\r\n      }\r\n    }\r\n\r\n    let selectedRows = this._options.singleRowMove ? [cell.row] : this._grid.getSelectedRows();\r\n    if (selectedRows.length === 0 || !selectedRows.some(selectedRow => selectedRow === cell.row)) {\r\n      selectedRows = [cell.row];\r\n      if (!this._options.disableRowSelection) {\r\n        this._grid.setSelectedRows(selectedRows);\r\n      }\r\n    }\r\n\r\n    const rowHeight = this._grid.getOptions().rowHeight;\r\n\r\n    dd.selectedRows = selectedRows;\r\n\r\n    dd.selectionProxy = document.createElement('div');\r\n    dd.selectionProxy.className = 'slick-reorder-proxy';\r\n    dd.selectionProxy.style.display = 'none';\r\n    dd.selectionProxy.style.position = 'absolute';\r\n    dd.selectionProxy.style.zIndex = '99999';\r\n    dd.selectionProxy.style.width = `${this._canvas.clientWidth}px`;\r\n    dd.selectionProxy.style.height = `${rowHeight! * selectedRows.length}px`;\r\n    this._canvas.appendChild(dd.selectionProxy);\r\n\r\n    dd.guide = document.createElement('div');\r\n    dd.guide.className = 'slick-reorder-guide';\r\n    dd.guide.style.position = 'absolute';\r\n    dd.guide.style.zIndex = '99999';\r\n    dd.guide.style.width = `${this._canvas.clientWidth}px`;\r\n    dd.guide.style.top = `-1000px`;\r\n    this._canvas.appendChild(dd.guide);\r\n\r\n    dd.insertBefore = -1;\r\n  }\r\n\r\n  protected handleDrag(evt: SlickEventData_, dd: DragRowMove): boolean | void {\r\n    if (!this._dragging) {\r\n      return;\r\n    }\r\n\r\n    evt.stopImmediatePropagation();\r\n    const e = evt.getNativeEvent<MouseEvent | TouchEvent>();\r\n\r\n    const targetEvent = (e as TouchEvent)?.touches?.[0] ?? e;\r\n    const top = targetEvent.pageY - (Utils.offset(this._canvas)?.top ?? 0);\r\n    dd.selectionProxy.style.top = `${top - 5}px`;\r\n    dd.selectionProxy.style.display = 'block';\r\n\r\n    // if the row move shadow is enabled, we'll also make it follow the mouse cursor\r\n    if (dd.clonedSlickRow) {\r\n      dd.clonedSlickRow.style.top = `${top - 6}px`;\r\n      dd.clonedSlickRow.style.display = 'block';\r\n    }\r\n\r\n    const insertBefore = Math.max(0, Math.min(Math.round(top / this._grid.getOptions().rowHeight!), this._grid.getDataLength()));\r\n    if (insertBefore !== dd.insertBefore) {\r\n      const eventData = {\r\n        grid: this._grid,\r\n        rows: dd.selectedRows,\r\n        insertBefore\r\n      };\r\n\r\n      if (this.onBeforeMoveRows.notify(eventData).getReturnValue() === false) {\r\n        dd.canMove = false;\r\n      } else {\r\n        dd.canMove = true;\r\n      }\r\n\r\n      // if there's a UsabilityOverride defined, we also need to verify that the condition is valid\r\n      if (this._usabilityOverride && dd.canMove) {\r\n        const insertBeforeDataContext = this._grid.getDataItem(insertBefore);\r\n        dd.canMove = this.checkUsabilityOverride(insertBefore, insertBeforeDataContext, this._grid);\r\n      }\r\n\r\n      // if the new target is possible we'll display the dark blue bar (representin the acceptability) at the target position\r\n      // else it won't show up (it will be off the screen)\r\n      if (!dd.canMove) {\r\n        dd.guide.style.top = '-1000px';\r\n      } else {\r\n        dd.guide.style.top = `${insertBefore * (this._grid.getOptions().rowHeight || 0)}px`;\r\n      }\r\n\r\n      dd.insertBefore = insertBefore;\r\n    }\r\n  }\r\n\r\n  protected handleDragEnd(e: SlickEventData_, dd: DragRowMove) {\r\n    if (!this._dragging) {\r\n      return;\r\n    }\r\n    this._dragging = false;\r\n    e.stopImmediatePropagation();\r\n\r\n    dd.guide?.remove();\r\n    dd.selectionProxy?.remove();\r\n    dd.clonedSlickRow?.remove();\r\n\r\n    if (dd.canMove) {\r\n      const eventData = {\r\n        grid: this._grid,\r\n        rows: dd.selectedRows,\r\n        insertBefore: dd.insertBefore\r\n      };\r\n      // TODO:  this._grid.remapCellCssClasses ?\r\n      this.onMoveRows.notify(eventData);\r\n    }\r\n  }\r\n\r\n  getColumnDefinition(): Column {\r\n    const columnId = String(this._options?.columnId ?? this._defaults.columnId);\r\n\r\n    return {\r\n      id: columnId,\r\n      name: '',\r\n      field: 'move',\r\n      behavior: 'selectAndMove',\r\n      reorderable: this._options.reorderable,\r\n      excludeFromColumnPicker: true,\r\n      excludeFromGridMenu: true,\r\n      excludeFromHeaderMenu: true,\r\n      resizable: false,\r\n      selectable: false,\r\n      width: this._options.width || 40,\r\n      formatter: this.moveIconFormatter.bind(this)\r\n    };\r\n  }\r\n\r\n  protected moveIconFormatter(row: number, _cell: number, _val: any, _column: Column, dataContext: any, grid: SlickGrid): FormatterResultWithHtml | string {\r\n    if (!this.checkUsabilityOverride(row, dataContext, grid)) {\r\n      return '';\r\n    } else {\r\n      const iconElm = document.createElement('div');\r\n      iconElm.className = this._options.cssClass || '';\r\n      return {\r\n        addClasses: `cell-reorder dnd ${this._options.containerCssClass || ''}`,\r\n        html: iconElm\r\n      };\r\n    }\r\n  }\r\n\r\n  protected checkUsabilityOverride(row: number, dataContext: any, grid: SlickGrid) {\r\n    if (typeof this._usabilityOverride === 'function') {\r\n      return this._usabilityOverride(row, dataContext, grid);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Method that user can pass to override the default behavior or making every row moveable.\r\n   * In order word, user can choose which rows to be an available as moveable (or not) by providing his own logic show/hide icon and usability.\r\n   * @param overrideFn: override function callback\r\n   */\r\n  usabilityOverride(overrideFn: UsabilityOverrideFn) {\r\n    this._usabilityOverride = overrideFn;\r\n  }\r\n\r\n  isHandlerColumn(columnIndex: number | string) {\r\n    return /move|selectAndMove/.test(this._grid.getColumns()[+columnIndex].behavior || '');\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      RowMoveManager: SlickRowMoveManager\r\n    }\r\n  });\r\n}\r\n\r\n"],
  "mappings": "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",
  "names": []
}
