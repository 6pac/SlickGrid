{
  "version": 3,
  "sources": ["../../../src/plugins/slick.rowmovemanager.js"],
  "sourcesContent": ["import { Event as SlickEvent_, EventHandler as EventHandler_, Utils as Utils_ } from '../slick.core';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : EventHandler_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n/**\n * Row Move Manager options:\n *    cssClass:                 A CSS class to be added to the menu item container.\n *    columnId:                 Column definition id (defaults to \"_move\")\n *    cancelEditOnDrag:         Do we want to cancel any Editing while dragging a row (defaults to false)\n *    disableRowSelection:      Do we want to disable the row selection? (defaults to false)\n *    hideRowMoveShadow:        Do we want to hide the row move shadow clone? (defaults to true)\n *    rowMoveShadowMarginTop:   When row move shadow is shown, optional margin-top (defaults to 0)\n *    rowMoveShadowMarginLeft:  When row move shadow is shown, optional margin-left (defaults to 0)\n *    rowMoveShadowOpacity:     When row move shadow is shown, what is its opacity? (defaults to 0.95)\n *    rowMoveShadowScale:       When row move shadow is shown, what is its size scale? (default to 0.75)\n *    singleRowMove:            Do we want a single row move? Setting this to false means that it's a multple row move (defaults to false)\n *    width:                    Width of the column\n *    usabilityOverride:        Callback method that user can override the default behavior of the row being moveable or not\n *\n */\n\nexport function RowMoveManager(options) {\n    var _grid;\n    var _canvas;\n    var _dragging;\n    var _self = this;\n    var _usabilityOverride = null;\n  var _handler = new EventHandler();\n    var _defaults = {\n      columnId: \"_move\",\n      cssClass: null,\n      cancelEditOnDrag: false,\n      disableRowSelection: false,\n      hideRowMoveShadow: true,\n      rowMoveShadowMarginTop: 0,\n      rowMoveShadowMarginLeft: 0,\n      rowMoveShadowOpacity: 0.95,\n      rowMoveShadowScale: 0.75,\n      singleRowMove: false,\n      width: 40,\n    };\n\n    // user could override the expandable icon logic from within the options or after instantiating the plugin\n    if (options && typeof options.usabilityOverride === 'function') {\n      usabilityOverride(options.usabilityOverride);\n    }\n\n    function init(grid) {\n      options = Utils.extend(true, {}, _defaults, options);\n      _grid = grid;\n      _canvas = _grid.getCanvasNode();\n      _handler\n        .subscribe(_grid.onDragInit, handleDragInit)\n        .subscribe(_grid.onDragStart, handleDragStart)\n        .subscribe(_grid.onDrag, handleDrag)\n        .subscribe(_grid.onDragEnd, handleDragEnd);\n  }\n\n  function destroy() {\n      _handler.unsubscribeAll();\n    }\n\n    function setOptions(newOptions) {\n      options = Utils.extend({}, options, newOptions);\n    }\n\n    function handleDragInit(e) {\n      // prevent the grid from cancelling drag'n'drop by default\n      e.stopImmediatePropagation();\n    }\n\n    function handleDragStart(e, dd) {\n      var cell = _grid.getCellFromEvent(e);\n      var currentRow = cell && cell.row;\n      var dataContext = _grid.getDataItem(currentRow);\n\n      if (!checkUsabilityOverride(currentRow, dataContext, _grid)) {\n        return;\n      }\n\n      if (options.cancelEditOnDrag && _grid.getEditorLock().isActive()) {\n        _grid.getEditorLock().cancelCurrentEdit();\n      }\n\n      if (_grid.getEditorLock().isActive() || !isHandlerColumn(cell.cell)) {\n        return false;\n      }\n\n      _dragging = true;\n      e.stopImmediatePropagation();\n\n      // optionally create a shadow element of the row so that we can see all the time which row exactly we're dragging\n      if (!options.hideRowMoveShadow) {\n        const cellNodeElm = _grid.getCellNode(cell.row, cell.cell);\n        const slickRowElm = cellNodeElm && cellNodeElm.closest('.slick-row');\n        if (slickRowElm) {\n          dd.clonedSlickRow = slickRowElm.cloneNode(true);\n          dd.clonedSlickRow.classList.add('slick-reorder-shadow-row');\n          dd.clonedSlickRow.style.display = 'none';\n          dd.clonedSlickRow.style.marginLeft = Number(options.rowMoveShadowMarginLeft || 0) + 'px';\n          dd.clonedSlickRow.style.marginTop = Number(options.rowMoveShadowMarginTop || 0) + 'px';\n          dd.clonedSlickRow.style.opacity = `${options.rowMoveShadowOpacity || 0.95}`;\n          dd.clonedSlickRow.style.transform = `scale(${options.rowMoveShadowScale || 0.75})`;\n          _canvas.appendChild(dd.clonedSlickRow);\n        }\n      }\n\n      var selectedRows = options.singleRowMove ? [cell.row] : _grid.getSelectedRows();\n\n      if (selectedRows.length === 0 || !selectedRows.some(selectedRow => selectedRow === cell.row)) {\n        selectedRows = [cell.row];\n        if (!options.disableRowSelection) {\n          _grid.setSelectedRows(selectedRows);\n        }\n      }\n\n      var rowHeight = _grid.getOptions().rowHeight;\n\n      dd.selectedRows = selectedRows;\n\n      dd.selectionProxy = document.createElement('div');\n      dd.selectionProxy.className = 'slick-reorder-proxy';\n      dd.selectionProxy.style.display = 'none';\n      dd.selectionProxy.style.position = 'absolute';\n      dd.selectionProxy.style.zIndex = '99999';\n      dd.selectionProxy.style.width = `${_canvas.clientWidth}px`;\n      dd.selectionProxy.style.height = `${rowHeight * selectedRows.length}px`;\n      _canvas.appendChild(dd.selectionProxy);\n\n      dd.guide = document.createElement('div');\n      dd.guide.className = 'slick-reorder-guide';\n      dd.guide.style.position = 'absolute';\n      dd.guide.style.zIndex = '99999';\n      dd.guide.style.width = `${_canvas.clientWidth}px`;\n      dd.guide.style.top = `-1000px`;\n      _canvas.appendChild(dd.guide);\n\n      dd.insertBefore = -1;\n    }\n\n    function handleDrag(evt, dd) {\n      if (!_dragging) {\n        return;\n      }\n\n      evt.stopImmediatePropagation();\n      const e = evt.getNativeEvent();\n\n      var targetEvent = e.touches ? e.touches[0] : e;\n      const top = targetEvent.pageY - (Utils.offset(_canvas).top || 0);\n      dd.selectionProxy.style.top = `${top - 5}px`;\n      dd.selectionProxy.style.display = 'block';\n\n      // if the row move shadow is enabled, we'll also make it follow the mouse cursor\n      if (dd.clonedSlickRow) {\n        dd.clonedSlickRow.style.top = `${top - 6}px`;\n        dd.clonedSlickRow.style.display = 'block';\n      }\n\n      var insertBefore = Math.max(0, Math.min(Math.round(top / _grid.getOptions().rowHeight), _grid.getDataLength()));\n      if (insertBefore !== dd.insertBefore) {\n        var eventData = {\n          \"grid\": _grid,\n          \"rows\": dd.selectedRows,\n          \"insertBefore\": insertBefore\n        };\n\n        if (_self.onBeforeMoveRows.notify(eventData).getReturnValue() === false) {\n          dd.canMove = false;\n        } else {\n          dd.canMove = true;\n        }\n\n        // if there's a UsabilityOverride defined, we also need to verify that the condition is valid\n        if (_usabilityOverride && dd.canMove) {\n          var insertBeforeDataContext = _grid.getDataItem(insertBefore);\n          dd.canMove = checkUsabilityOverride(insertBefore, insertBeforeDataContext, _grid);\n        }\n\n        // if the new target is possible we'll display the dark blue bar (representin the acceptability) at the target position\n        // else it won't show up (it will be off the screen)\n        if (!dd.canMove) {\n          dd.guide.style.top = '-1000px';\n        } else {\n          dd.guide.style.top = `${insertBefore * (_grid.getOptions().rowHeight || 0)}px`;\n        }\n\n        dd.insertBefore = insertBefore;\n      }\n    }\n\n    function handleDragEnd(e, dd) {\n      if (!_dragging) {\n        return;\n      }\n      _dragging = false;\n      e.stopImmediatePropagation();\n\n      dd.guide.remove();\n      dd.selectionProxy.remove();\n      if (dd.clonedSlickRow) {\n        dd.clonedSlickRow.remove();\n        dd.clonedSlickRow = null;\n      }\n\n      if (dd.canMove) {\n        var eventData = {\n          \"grid\": _grid,\n          \"rows\": dd.selectedRows,\n          \"insertBefore\": dd.insertBefore\n        };\n        // TODO:  _grid.remapCellCssClasses ?\n        _self.onMoveRows.notify(eventData);\n      }\n    }\n\n    function getColumnDefinition() {\n      return {\n        id: options.columnId || \"_move\",\n        name: \"\",\n        field: \"move\",\n        width: options.width || 40,\n        behavior: \"selectAndMove\",\n        selectable: false,\n        resizable: false,\n        // cssClass: options.cssClass,\n        formatter: moveIconFormatter\n      };\n    }\n\n    function moveIconFormatter(row, cell, value, columnDef, dataContext, grid) {\n      if (!checkUsabilityOverride(row, dataContext, grid)) {\n        return null;\n      } else {\n        return { addClasses: \"cell-reorder dnd \" + options.cssClass || '', text: \"\" };\n      }\n    }\n\n    function checkUsabilityOverride(row, dataContext, grid) {\n      if (typeof _usabilityOverride === 'function') {\n        return _usabilityOverride(row, dataContext, grid);\n      }\n      return true;\n    }\n\n    /**\n     * Method that user can pass to override the default behavior or making every row moveable.\n     * In order word, user can choose which rows to be an available as moveable (or not) by providing his own logic show/hide icon and usability.\n     * @param overrideFn: override function callback\n     */\n    function usabilityOverride(overrideFn) {\n      _usabilityOverride = overrideFn;\n    }\n\n    function isHandlerColumn(columnIndex) {\n      return /move|selectAndMove/.test(_grid.getColumns()[columnIndex].behavior);\n    }\n\n  Utils.extend(this, {\n    \"onBeforeMoveRows\": new SlickEvent(),\n    \"onMoveRows\": new SlickEvent(),\n\n      \"init\": init,\n      \"destroy\": destroy,\n      \"getColumnDefinition\": getColumnDefinition,\n      \"setOptions\": setOptions,\n      \"usabilityOverride\": usabilityOverride,\n      \"isHandlerColumn\": isHandlerColumn,\n      \"pluginName\": \"RowMoveManager\"\n    });\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      RowMoveManager\n    }\n  });\n}\n\n"],
  "mappings": ";;;AAGA,MAAM,aAAyB,MAAM,OAC/B,eAA2B,MAAM,cACjC,QAAoB,MAAM;AAmBzB,WAAS,eAAe,SAAS;AACpC,QAAI,OACA,SACA,WACA,QAAQ,MACR,qBAAqB,MACvB,WAAW,IAAI,aAAa,GAC1B,YAAY;AAAA,MACd,UAAU;AAAA,MACV,UAAU;AAAA,MACV,kBAAkB;AAAA,MAClB,qBAAqB;AAAA,MACrB,mBAAmB;AAAA,MACnB,wBAAwB;AAAA,MACxB,yBAAyB;AAAA,MACzB,sBAAsB;AAAA,MACtB,oBAAoB;AAAA,MACpB,eAAe;AAAA,MACf,OAAO;AAAA,IACT;AAGA,IAAI,WAAW,OAAO,QAAQ,qBAAsB,cAClD,kBAAkB,QAAQ,iBAAiB;AAG7C,aAAS,KAAK,MAAM;AAClB,gBAAU,MAAM,OAAO,IAAM,CAAC,GAAG,WAAW,OAAO,GACnD,QAAQ,MACR,UAAU,MAAM,cAAc,GAC9B,SACG,UAAU,MAAM,YAAY,cAAc,EAC1C,UAAU,MAAM,aAAa,eAAe,EAC5C,UAAU,MAAM,QAAQ,UAAU,EAClC,UAAU,MAAM,WAAW,aAAa;AAAA,IAC/C;AAEA,aAAS,UAAU;AACf,eAAS,eAAe;AAAA,IAC1B;AAEA,aAAS,WAAW,YAAY;AAC9B,gBAAU,MAAM,OAAO,CAAC,GAAG,SAAS,UAAU;AAAA,IAChD;AAEA,aAAS,eAAe,GAAG;AAEzB,QAAE,yBAAyB;AAAA,IAC7B;AAEA,aAAS,gBAAgB,GAAG,IAAI;AAC9B,UAAI,OAAO,MAAM,iBAAiB,CAAC,GAC/B,aAAa,QAAQ,KAAK,KAC1B,cAAc,MAAM,YAAY,UAAU;AAE9C,UAAK,uBAAuB,YAAY,aAAa,KAAK,GAQ1D;AAAA,YAJI,QAAQ,oBAAoB,MAAM,cAAc,EAAE,SAAS,KAC7D,MAAM,cAAc,EAAE,kBAAkB,GAGtC,MAAM,cAAc,EAAE,SAAS,KAAK,CAAC,gBAAgB,KAAK,IAAI;AAChE,iBAAO;AAOT,YAJA,YAAY,IACZ,EAAE,yBAAyB,GAGvB,CAAC,QAAQ,mBAAmB;AAC9B,cAAM,cAAc,MAAM,YAAY,KAAK,KAAK,KAAK,IAAI,GACnD,cAAc,eAAe,YAAY,QAAQ,YAAY;AACnE,UAAI,gBACF,GAAG,iBAAiB,YAAY,UAAU,EAAI,GAC9C,GAAG,eAAe,UAAU,IAAI,0BAA0B,GAC1D,GAAG,eAAe,MAAM,UAAU,QAClC,GAAG,eAAe,MAAM,aAAa,OAAO,QAAQ,2BAA2B,CAAC,IAAI,MACpF,GAAG,eAAe,MAAM,YAAY,OAAO,QAAQ,0BAA0B,CAAC,IAAI,MAClF,GAAG,eAAe,MAAM,UAAU,GAAG,QAAQ,wBAAwB,IAAI,IACzE,GAAG,eAAe,MAAM,YAAY,SAAS,QAAQ,sBAAsB,IAAI,KAC/E,QAAQ,YAAY,GAAG,cAAc;AAAA,QAEzC;AAEA,YAAI,eAAe,QAAQ,gBAAgB,CAAC,KAAK,GAAG,IAAI,MAAM,gBAAgB;AAE9E,SAAI,aAAa,WAAW,KAAK,CAAC,aAAa,KAAK,iBAAe,gBAAgB,KAAK,GAAG,OACzF,eAAe,CAAC,KAAK,GAAG,GACnB,QAAQ,uBACX,MAAM,gBAAgB,YAAY;AAItC,YAAI,YAAY,MAAM,WAAW,EAAE;AAEnC,WAAG,eAAe,cAElB,GAAG,iBAAiB,SAAS,cAAc,KAAK,GAChD,GAAG,eAAe,YAAY,uBAC9B,GAAG,eAAe,MAAM,UAAU,QAClC,GAAG,eAAe,MAAM,WAAW,YACnC,GAAG,eAAe,MAAM,SAAS,SACjC,GAAG,eAAe,MAAM,QAAQ,GAAG,QAAQ,WAAW,MACtD,GAAG,eAAe,MAAM,SAAS,GAAG,YAAY,aAAa,MAAM,MACnE,QAAQ,YAAY,GAAG,cAAc,GAErC,GAAG,QAAQ,SAAS,cAAc,KAAK,GACvC,GAAG,MAAM,YAAY,uBACrB,GAAG,MAAM,MAAM,WAAW,YAC1B,GAAG,MAAM,MAAM,SAAS,SACxB,GAAG,MAAM,MAAM,QAAQ,GAAG,QAAQ,WAAW,MAC7C,GAAG,MAAM,MAAM,MAAM,WACrB,QAAQ,YAAY,GAAG,KAAK,GAE5B,GAAG,eAAe;AAAA;AAAA,IACpB;AAEA,aAAS,WAAW,KAAK,IAAI;AAC3B,UAAI,CAAC;AACH;AAGF,UAAI,yBAAyB;AAC7B,UAAM,IAAI,IAAI,eAAe;AAE7B,UAAI,cAAc,EAAE,UAAU,EAAE,QAAQ,CAAC,IAAI;AAC7C,UAAM,MAAM,YAAY,SAAS,MAAM,OAAO,OAAO,EAAE,OAAO;AAC9D,SAAG,eAAe,MAAM,MAAM,GAAG,MAAM,CAAC,MACxC,GAAG,eAAe,MAAM,UAAU,SAG9B,GAAG,mBACL,GAAG,eAAe,MAAM,MAAM,GAAG,MAAM,CAAC,MACxC,GAAG,eAAe,MAAM,UAAU;AAGpC,UAAI,eAAe,KAAK,IAAI,GAAG,KAAK,IAAI,KAAK,MAAM,MAAM,MAAM,WAAW,EAAE,SAAS,GAAG,MAAM,cAAc,CAAC,CAAC;AAC9G,UAAI,iBAAiB,GAAG,cAAc;AACpC,YAAI,YAAY;AAAA,UACd,MAAQ;AAAA,UACR,MAAQ,GAAG;AAAA,UACX;AAAA,QACF;AASA,YAPI,MAAM,iBAAiB,OAAO,SAAS,EAAE,eAAe,MAAM,KAChE,GAAG,UAAU,KAEb,GAAG,UAAU,IAIX,sBAAsB,GAAG,SAAS;AACpC,cAAI,0BAA0B,MAAM,YAAY,YAAY;AAC5D,aAAG,UAAU,uBAAuB,cAAc,yBAAyB,KAAK;AAAA,QAClF;AAIA,QAAK,GAAG,UAGN,GAAG,MAAM,MAAM,MAAM,GAAG,gBAAgB,MAAM,WAAW,EAAE,aAAa,EAAE,OAF1E,GAAG,MAAM,MAAM,MAAM,WAKvB,GAAG,eAAe;AAAA,MACpB;AAAA,IACF;AAEA,aAAS,cAAc,GAAG,IAAI;AAC5B,UAAK,cAGL,YAAY,IACZ,EAAE,yBAAyB,GAE3B,GAAG,MAAM,OAAO,GAChB,GAAG,eAAe,OAAO,GACrB,GAAG,mBACL,GAAG,eAAe,OAAO,GACzB,GAAG,iBAAiB,OAGlB,GAAG,UAAS;AACd,YAAI,YAAY;AAAA,UACd,MAAQ;AAAA,UACR,MAAQ,GAAG;AAAA,UACX,cAAgB,GAAG;AAAA,QACrB;AAEA,cAAM,WAAW,OAAO,SAAS;AAAA,MACnC;AAAA,IACF;AAEA,aAAS,sBAAsB;AAC7B,aAAO;AAAA,QACL,IAAI,QAAQ,YAAY;AAAA,QACxB,MAAM;AAAA,QACN,OAAO;AAAA,QACP,OAAO,QAAQ,SAAS;AAAA,QACxB,UAAU;AAAA,QACV,YAAY;AAAA,QACZ,WAAW;AAAA;AAAA,QAEX,WAAW;AAAA,MACb;AAAA,IACF;AAEA,aAAS,kBAAkB,KAAK,MAAM,OAAO,WAAW,aAAa,MAAM;AACzE,aAAK,uBAAuB,KAAK,aAAa,IAAI,IAGzC,EAAE,YAAY,sBAAsB,QAAQ,YAAY,IAAI,MAAM,GAAG,IAFrE;AAAA,IAIX;AAEA,aAAS,uBAAuB,KAAK,aAAa,MAAM;AACtD,aAAI,OAAO,sBAAuB,aACzB,mBAAmB,KAAK,aAAa,IAAI,IAE3C;AAAA,IACT;AAOA,aAAS,kBAAkB,YAAY;AACrC,2BAAqB;AAAA,IACvB;AAEA,aAAS,gBAAgB,aAAa;AACpC,aAAO,qBAAqB,KAAK,MAAM,WAAW,EAAE,WAAW,EAAE,QAAQ;AAAA,IAC3E;AAEF,UAAM,OAAO,MAAM;AAAA,MACjB,kBAAoB,IAAI,WAAW;AAAA,MACnC,YAAc,IAAI,WAAW;AAAA,MAE3B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,YAAc;AAAA,IAChB,CAAC;AAAA,EACL;AAGA,EAAiB,OAAO,SACtB,MAAM,OAAO,IAAM,QAAQ;AAAA,IACzB,OAAO;AAAA,MACL;AAAA,IACF;AAAA,EACF,CAAC;",
  "names": []
}
