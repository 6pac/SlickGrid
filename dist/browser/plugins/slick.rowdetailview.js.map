{
  "version": 3,
  "sources": ["../../../src/plugins/slick.rowdetailview.ts"],
  "sourcesContent": ["import {\r\n  SlickEvent as SlickEvent_,\r\n  type SlickEventData,\r\n  SlickEventHandler as SlickEventHandler_,\r\n  Utils as Utils_\r\n} from '../slick.core.js';\r\nimport type {\r\n  Column,\r\n  FormatterResultWithHtml,\r\n  GridOption,\r\n  OnAfterRowDetailToggleArgs,\r\n  OnBeforeRowDetailToggleArgs,\r\n  OnRowBackToViewportRangeArgs,\r\n  OnRowDetailAsyncEndUpdateArgs,\r\n  OnRowDetailAsyncResponseArgs,\r\n  OnRowOutOfViewportRangeArgs,\r\n  RowDetailViewOption,\r\n  UsabilityOverrideFn\r\n} from '../models/index.js';\r\nimport type { SlickDataView } from '../slick.dataview.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst SlickEventHandler = IIFE_ONLY ? Slick.EventHandler : SlickEventHandler_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/**\r\n * A plugin to add row detail panel\r\n * Original StackOverflow question & article making this possible (thanks to violet313)\r\n * https://stackoverflow.com/questions/10535164/can-slickgrids-row-height-be-dynamically-altered#29399927\r\n * http://violet313.org/slickgrids/#intro\r\n *\r\n * USAGE:\r\n * Add the slick.rowDetailView.(js|css) files and register the plugin with the grid.\r\n *\r\n * AVAILABLE ROW DETAIL OPTIONS:\r\n *    cssClass:               A CSS class to be added to the row detail\r\n *    expandedClass:          Extra classes to be added to the expanded Toggle\r\n *    expandableOverride:     callback method that user can override the default behavior of making every row an expandable row (the logic to show or not the expandable icon).\r\n *    collapsedClass:         Extra classes to be added to the collapse Toggle\r\n *    loadOnce:               Defaults to false, when set to True it will load the data once and then reuse it.\r\n *    preTemplate:            Template that will be used before the async process (typically used to show a spinner/loading)\r\n *    postTemplate:           Template that will be loaded once the async function finishes\r\n *    process:                Async server function call\r\n *    panelRows:              Row count to use for the template panel\r\n *    singleRowExpand:        Defaults to false, limit expanded row to 1 at a time.\r\n *    useRowClick:            Boolean flag, when True will open the row detail on a row click (from any column), default to False\r\n *    keyPrefix:              Defaults to '_', prefix used for all the plugin metadata added to the item object (meta e.g.: padding, collapsed, parent)\r\n *    collapseAllOnSort:      Defaults to true, which will collapse all row detail views when user calls a sort. Unless user implements a sort to deal with padding\r\n *    saveDetailViewOnScroll: Defaults to true, which will save the row detail view in a cache when it detects that it will become out of the viewport buffer\r\n *    useSimpleViewportCalc:  Defaults to false, which will use simplified calculation of out or back of viewport visibility\r\n *\r\n * AVAILABLE PUBLIC METHODS:\r\n *    init:                 initiliaze the plugin\r\n *    expandableOverride:   callback method that user can override the default behavior of making every row an expandable row (the logic to show or not the expandable icon).\r\n *    destroy:              destroy the plugin and it's events\r\n *    collapseAll:          collapse all opened row detail panel\r\n *    collapseDetailView:   collapse a row by passing the item object (row detail)\r\n *    expandDetailView:     expand a row by passing the item object (row detail)\r\n *    getColumnDefinition:  get the column definitions\r\n *    getExpandedRows:      get all the expanded rows\r\n *    getFilterItem:        takes in the item we are filtering and if it is an expanded row returns it's parents row to filter on\r\n *    getOptions:           get current plugin options\r\n *    resizeDetailView:     resize a row detail view, it will auto-calculate the number of rows it needs\r\n *    saveDetailView:       save a row detail view content by passing the row object\r\n *    setOptions:           set or change some of the plugin options\r\n *\r\n * THE PLUGIN EXPOSES THE FOLLOWING SLICK EVENTS:\r\n *    onAsyncResponse:  This event must be used with the \"notify\" by the end user once the Asynchronous Server call returns the item detail\r\n *      Event args:\r\n *        item:         Item detail returned from the async server call\r\n *        detailView:   An explicit view to use instead of template (Optional)\r\n *\r\n *    onAsyncEndUpdate: Fired when the async response finished\r\n *      Event args:\r\n *        grid:         Reference to the grid.\r\n *        item:         Item data context\r\n *\r\n *    onBeforeRowDetailToggle: Fired before the row detail gets toggled\r\n *      Event args:\r\n *        grid:         Reference to the grid.\r\n *        item:         Item data context\r\n *\r\n *    onAfterRowDetailToggle: Fired after the row detail gets toggled\r\n *      Event args:\r\n *        grid:         Reference to the grid.\r\n *        item:         Item data context\r\n *        expandedRows: Array of the Expanded Rows\r\n *\r\n *    onRowOutOfViewportRange: Fired after a row becomes out of viewport range (user can't see the row anymore)\r\n *      Event args:\r\n *        grid:         Reference to the grid.\r\n *        item:         Item data context\r\n *        rowId:        Id of the Row object (datacontext) in the Grid\r\n *        rowIndex:     Index of the Row in the Grid\r\n *        expandedRows: Array of the Expanded Rows\r\n *        rowIdsOutOfViewport: Array of the Out of viewport Range Rows\r\n *\r\n *    onRowBackToViewportRange: Fired after a row is back to viewport range (user can visually see the row detail)\r\n *      Event args:\r\n *        grid:         Reference to the grid.\r\n *        item:         Item data context\r\n *        rowId:        Id of the Row object (datacontext) in the Grid\r\n *        rowIndex:     Index of the Row in the Grid\r\n *        expandedRows: Array of the Expanded Rows\r\n *        rowIdsOutOfViewport: Array of the Out of viewport Range Rows\r\n */\r\nexport class SlickRowDetailView {\r\n  // --\r\n  // public API\r\n  pluginName = 'RowDetailView' as const;\r\n  onAsyncResponse = new SlickEvent<OnRowDetailAsyncResponseArgs>('onAsyncResponse');\r\n  onAsyncEndUpdate = new SlickEvent<OnRowDetailAsyncEndUpdateArgs>('onAsyncEndUpdate');\r\n  onAfterRowDetailToggle = new SlickEvent<OnAfterRowDetailToggleArgs>('onAfterRowDetailToggle');\r\n  onBeforeRowDetailToggle = new SlickEvent<OnBeforeRowDetailToggleArgs>('onBeforeRowDetailToggle');\r\n  onRowBackToViewportRange = new SlickEvent<OnRowBackToViewportRangeArgs>('onRowBackToViewportRange');\r\n  onRowOutOfViewportRange = new SlickEvent<OnRowOutOfViewportRangeArgs>('onRowOutOfViewportRange');\r\n\r\n  // --\r\n  // protected props\r\n  protected _grid!: SlickGrid;\r\n  protected _gridOptions!: GridOption;\r\n  protected _gridUid = '';\r\n  protected _dataView!: SlickDataView;\r\n  protected _dataViewIdProperty = 'id';\r\n  protected _expandableOverride: UsabilityOverrideFn | null = null;\r\n  protected _lastRange: { bottom: number; top: number; } | null = null;\r\n  protected _expandedRows: any[] = [];\r\n  protected _eventHandler: SlickEventHandler_;\r\n  protected _outsideRange = 5;\r\n  protected _visibleRenderedCellCount = 0;\r\n  protected _options: RowDetailViewOption;\r\n  protected _defaults = {\r\n    columnId: '_detail_selector',\r\n    cssClass: 'detailView-toggle',\r\n    expandedClass: undefined,\r\n    collapsedClass: undefined,\r\n    keyPrefix: '_',\r\n    loadOnce: false,\r\n    collapseAllOnSort: true,\r\n    reorderable: false,\r\n    saveDetailViewOnScroll: true,\r\n    singleRowExpand: false,\r\n    useSimpleViewportCalc: false,\r\n    alwaysRenderColumn: true,\r\n    toolTip: '',\r\n    width: 30,\r\n    maxRows: undefined\r\n  } as RowDetailViewOption;\r\n  protected _keyPrefix = this._defaults.keyPrefix;\r\n  protected _gridRowBuffer = 0;\r\n  protected _rowIdsOutOfViewport: Array<number | string> = [];\r\n\r\n  /** Constructor of the Row Detail View Plugin which accepts optional options */\r\n  constructor(options: RowDetailViewOption) {\r\n    this._options = Utils.extend(true, {}, this._defaults, options);\r\n    this._eventHandler = new SlickEventHandler();\r\n\r\n    // user could override the expandable icon logic from within the options or after instantiating the plugin\r\n    if (typeof this._options.expandableOverride === 'function') {\r\n      this.expandableOverride(this._options.expandableOverride);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize the plugin, which requires user to pass the SlickGrid Grid object\r\n   * @param grid: SlickGrid Grid object\r\n   */\r\n  init(grid: SlickGrid) {\r\n    if (!grid) {\r\n      throw new Error('RowDetailView Plugin requires the Grid instance to be passed as argument to the \"init()\" method');\r\n    }\r\n    this._grid = grid;\r\n    this._gridUid = grid.getUID();\r\n    this._gridOptions = grid.getOptions() || {};\r\n    this._dataView = this._grid.getData<SlickDataView>();\r\n    this._keyPrefix = this._options?.keyPrefix ?? '_';\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n\r\n    // Update the minRowBuffer so that the view doesn't disappear when it's at top of screen + the original default 3\r\n    this._gridRowBuffer = this._gridOptions.minRowBuffer || 0;\r\n    this._gridOptions.minRowBuffer = this._options.panelRows + 3;\r\n\r\n    this._eventHandler\r\n      .subscribe(this._grid.onClick, this.handleClick.bind(this))\r\n      .subscribe(this._grid.onScroll, this.handleScroll.bind(this));\r\n\r\n    // Sort will, by default, Collapse all of the open items (unless user implements his own onSort which deals with open row and padding)\r\n    if (this._options.collapseAllOnSort) {\r\n      this._eventHandler.subscribe(this._grid.onSort, this.collapseAll.bind(this));\r\n      this._expandedRows = [];\r\n      this._rowIdsOutOfViewport = [];\r\n    }\r\n\r\n    this._eventHandler.subscribe(this._dataView.onRowCountChanged, () => {\r\n      this._grid.updateRowCount();\r\n      this._grid.render();\r\n    });\r\n\r\n    this._eventHandler.subscribe(this._dataView.onRowsChanged, (_e, a) => {\r\n      this._grid.invalidateRows(a.rows);\r\n      this._grid.render();\r\n    });\r\n\r\n    // subscribe to the onAsyncResponse so that the plugin knows when the user server side calls finished\r\n    this.subscribeToOnAsyncResponse();\r\n\r\n    // after data is set, let's get the DataView Id Property name used (defaults to \"id\")\r\n    this._eventHandler.subscribe(this._dataView.onSetItemsCalled, () => {\r\n      this._dataViewIdProperty = this._dataView?.getIdPropertyName() ?? 'id';\r\n    });\r\n\r\n    // if we use the alternative & simpler calculation of the out of viewport range\r\n    // we will need to know how many rows are rendered on the screen and we need to wait for grid to be rendered\r\n    // unfortunately there is no triggered event for knowing when grid is finished, so we use 250ms delay and it's typically more than enough\r\n    if (this._options.useSimpleViewportCalc) {\r\n      this._eventHandler.subscribe(this._grid.onRendered, (_e, args) => {\r\n        if (args?.endRow) {\r\n          this._visibleRenderedCellCount = args.endRow - args.startRow;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /** destroy the plugin and it's events */\r\n  destroy() {\r\n    this._eventHandler.unsubscribeAll();\r\n    this.onAsyncResponse.unsubscribe();\r\n    this.onAsyncEndUpdate.unsubscribe();\r\n    this.onAfterRowDetailToggle.unsubscribe();\r\n    this.onBeforeRowDetailToggle.unsubscribe();\r\n    this.onRowOutOfViewportRange.unsubscribe();\r\n    this.onRowBackToViewportRange.unsubscribe();\r\n  }\r\n\r\n  /** Get current plugin options */\r\n  getOptions() {\r\n    return this._options;\r\n  }\r\n\r\n  /** set or change some of the plugin options */\r\n  setOptions(options: Partial<RowDetailViewOption>) {\r\n    this._options = Utils.extend(true, {}, this._options, options);\r\n    if (this._options?.singleRowExpand) {\r\n      this.collapseAll();\r\n    }\r\n  }\r\n\r\n  /** Find a value in an array and return the index when (or -1 when not found) */\r\n  protected arrayFindIndex(sourceArray: any[], value: any) {\r\n    if (Array.isArray(sourceArray)) {\r\n      for (let i = 0; i < sourceArray.length; i++) {\r\n        if (sourceArray[i] === value) {\r\n          return i;\r\n        }\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /** Handle mouse click event */\r\n  protected handleClick(e: SlickEventData, args: { row: number; cell: number; }) {\r\n    const dataContext = this._grid.getDataItem(args.row);\r\n    if (!this.checkExpandableOverride(args.row, dataContext, this._grid)) {\r\n      return;\r\n    }\r\n\r\n    // clicking on a row select checkbox\r\n    if (this._options.useRowClick || this._grid.getColumns()[args.cell]['id'] === this._options.columnId && (e.target as HTMLDivElement).classList.contains(this._options.cssClass || '')) {\r\n      // if editing, try to commit\r\n      if (this._grid.getEditorLock().isActive() && !this._grid.getEditorLock().commitCurrentEdit()) {\r\n        e.preventDefault();\r\n        e.stopImmediatePropagation();\r\n        return;\r\n      }\r\n\r\n      // trigger an event before toggling\r\n      // user could cancel the Row Detail opening when event is returning false\r\n      if (this.onBeforeRowDetailToggle.notify({ grid: this._grid, item: dataContext }, e, this).getReturnValue() === false) {\r\n        return;\r\n      }\r\n\r\n      this.toggleRowSelection(args.row, dataContext);\r\n\r\n      // trigger an event after toggling\r\n      this.onAfterRowDetailToggle.notify({\r\n        grid: this._grid,\r\n        item: dataContext,\r\n        expandedRows: this._expandedRows,\r\n      }, e, this);\r\n\r\n      e.stopPropagation();\r\n      e.stopImmediatePropagation();\r\n    }\r\n  }\r\n\r\n  /** If we scroll save detail views that go out of cache range */\r\n  protected handleScroll() {\r\n    if (this._options.useSimpleViewportCalc) {\r\n      this.calculateOutOfRangeViewsSimplerVersion();\r\n    } else {\r\n      this.calculateOutOfRangeViews();\r\n    }\r\n  }\r\n\r\n  /** Calculate when expanded rows become out of view range */\r\n  protected calculateOutOfRangeViews() {\r\n    let scrollDir = '';\r\n    if (this._grid) {\r\n      const renderedRange = this._grid.getRenderedRange();\r\n      // Only check if we have expanded rows\r\n      if (this._expandedRows.length > 0) {\r\n        // Assume scroll direction is down by default.\r\n        scrollDir = 'DOWN';\r\n        if (this._lastRange) {\r\n          // Some scrolling isn't anything as the range is the same\r\n          if (this._lastRange.top === renderedRange.top && this._lastRange.bottom === renderedRange.bottom) {\r\n            return;\r\n          }\r\n\r\n          // If our new top is smaller we are scrolling up\r\n          if (this._lastRange.top > renderedRange.top ||\r\n            // Or we are at very top but our bottom is increasing\r\n            (this._lastRange.top === 0 && renderedRange.top === 0) && this._lastRange.bottom > renderedRange.bottom) {\r\n            scrollDir = 'UP';\r\n          }\r\n        }\r\n      }\r\n\r\n      this._expandedRows.forEach((row) => {\r\n        const rowIndex = this._dataView?.getRowById(row[this._dataViewIdProperty]) ?? 0;\r\n        const rowPadding = row[`${this._keyPrefix}sizePadding`];\r\n        const rowOutOfRange = this.arrayFindIndex(this._rowIdsOutOfViewport, row[this._dataViewIdProperty]) >= 0;\r\n\r\n        if (scrollDir === 'UP') {\r\n          // save the view when asked\r\n          if (this._options.saveDetailViewOnScroll) {\r\n            // If the bottom item within buffer range is an expanded row save it.\r\n            if (rowIndex >= renderedRange.bottom - this._gridRowBuffer) {\r\n              this.saveDetailView(row);\r\n            }\r\n          }\r\n\r\n          // If the row expanded area is within the buffer notify that it is back in range\r\n          if (rowOutOfRange && rowIndex - this._outsideRange < renderedRange.top && rowIndex >= renderedRange.top) {\r\n            this.notifyBackToViewportWhenDomExist(row, row[this._dataViewIdProperty]);\r\n          }\r\n\r\n          // if our first expanded row is about to go off the bottom\r\n          else if (!rowOutOfRange && (rowIndex + rowPadding) > renderedRange.bottom) {\r\n            this.notifyOutOfViewport(row, row[this._dataViewIdProperty]);\r\n          }\r\n        }\r\n        else if (scrollDir === 'DOWN') {\r\n          // save the view when asked\r\n          if (this._options.saveDetailViewOnScroll) {\r\n            // If the top item within buffer range is an expanded row save it.\r\n            if (rowIndex <= renderedRange.top + this._gridRowBuffer) {\r\n              this.saveDetailView(row);\r\n            }\r\n          }\r\n\r\n          // If row index is i higher than bottom with some added value (To ignore top rows off view) and is with view and was our of range\r\n          if (rowOutOfRange && (rowIndex + rowPadding + this._outsideRange) > renderedRange.bottom && rowIndex < rowIndex + rowPadding) {\r\n            this.notifyBackToViewportWhenDomExist(row, row[this._dataViewIdProperty]);\r\n          }\r\n          // if our row is outside top of and the buffering zone but not in the array of outOfVisable range notify it\r\n          else if (!rowOutOfRange && rowIndex < renderedRange.top) {\r\n            this.notifyOutOfViewport(row, row[this._dataViewIdProperty]);\r\n          }\r\n        }\r\n      });\r\n      this._lastRange = renderedRange;\r\n    }\r\n  }\r\n\r\n  /** This is an alternative & more simpler version of the Calculate when expanded rows become out of view range */\r\n  protected calculateOutOfRangeViewsSimplerVersion() {\r\n    if (this._grid) {\r\n      const renderedRange = this._grid.getRenderedRange();\r\n\r\n      this._expandedRows.forEach((row) => {\r\n        const rowIndex = this._dataView.getRowById(row[this._dataViewIdProperty]) ?? -1;\r\n        const isOutOfVisibility = this.checkIsRowOutOfViewportRange(rowIndex, renderedRange);\r\n        if (!isOutOfVisibility && this.arrayFindIndex(this._rowIdsOutOfViewport, row[this._dataViewIdProperty]) >= 0) {\r\n          this.notifyBackToViewportWhenDomExist(row, row[this._dataViewIdProperty]);\r\n        } else if (isOutOfVisibility) {\r\n          this.notifyOutOfViewport(row, row[this._dataViewIdProperty]);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if the row became out of visible range (when user can't see it anymore)\r\n   * @param rowIndex\r\n   * @param renderedRange from SlickGrid\r\n   */\r\n  protected checkIsRowOutOfViewportRange(rowIndex: number, renderedRange: any) {\r\n    if (Math.abs(renderedRange.bottom - this._gridRowBuffer - rowIndex) > this._visibleRenderedCellCount * 2) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Send a notification, through \"onRowOutOfViewportRange\", that is out of the viewport range */\r\n  protected notifyOutOfViewport(item: any, rowId: number | string) {\r\n    const rowIndex = (item.rowIndex || this._dataView.getRowById(item[this._dataViewIdProperty])) as number;\r\n\r\n    this.onRowOutOfViewportRange.notify({\r\n      grid: this._grid,\r\n      item,\r\n      rowId,\r\n      rowIndex,\r\n      expandedRows: this._expandedRows,\r\n      rowIdsOutOfViewport: this.syncOutOfViewportArray(rowId, true)\r\n    }, null, this);\r\n  }\r\n\r\n  /** Send a notification, through \"onRowBackToViewportRange\", that a row came back into the viewport visible range */\r\n  protected notifyBackToViewportWhenDomExist(item: any, rowId: number | string) {\r\n    const rowIndex = (item.rowIndex || this._dataView.getRowById(item[this._dataViewIdProperty])) as number;\r\n\r\n    window.setTimeout(() => {\r\n      // make sure View Row DOM Element really exist before notifying that it's a row that is visible again\r\n      if (document.querySelector(`.${this._gridUid} .cellDetailView_${item[this._dataViewIdProperty]}`)) {\r\n        this.onRowBackToViewportRange.notify({\r\n          grid: this._grid,\r\n          item,\r\n          rowId,\r\n          rowIndex,\r\n          expandedRows: this._expandedRows,\r\n          rowIdsOutOfViewport: this.syncOutOfViewportArray(rowId, false)\r\n        }, null, this);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * This function will sync the \"out of viewport\" array whenever necessary.\r\n   * The sync can add a detail row (when necessary, no need to add again if it already exist) or delete a row from the array.\r\n   * @param rowId: number\r\n   * @param isAdding: are we adding or removing a row?\r\n   */\r\n  protected syncOutOfViewportArray(rowId: number | string, isAdding: boolean) {\r\n    const arrayRowIndex = this.arrayFindIndex(this._rowIdsOutOfViewport, rowId);\r\n\r\n    if (isAdding && arrayRowIndex < 0) {\r\n      this._rowIdsOutOfViewport.push(rowId);\r\n    } else if (!isAdding && arrayRowIndex >= 0) {\r\n      this._rowIdsOutOfViewport.splice(arrayRowIndex, 1);\r\n    }\r\n    return this._rowIdsOutOfViewport;\r\n  }\r\n\r\n  // Toggle between showing or hiding a row\r\n  protected toggleRowSelection(rowNumber: number, dataContext: any) {\r\n    if (!this.checkExpandableOverride(rowNumber, dataContext, this._grid)) {\r\n      return;\r\n    }\r\n\r\n    this._dataView.beginUpdate();\r\n    this.handleAccordionShowHide(dataContext);\r\n    this._dataView.endUpdate();\r\n  }\r\n\r\n  /** Collapse all of the open detail rows */\r\n  collapseAll() {\r\n    this._dataView.beginUpdate();\r\n    for (let i = this._expandedRows.length - 1; i >= 0; i--) {\r\n      this.collapseDetailView(this._expandedRows[i], true);\r\n    }\r\n    this._dataView.endUpdate();\r\n  }\r\n\r\n  /** Collapse a detail row so that it is not longer open */\r\n  collapseDetailView(item: any, isMultipleCollapsing = false) {\r\n    if (!isMultipleCollapsing) {\r\n      this._dataView.beginUpdate();\r\n    }\r\n    // Save the details on the collapse assuming onetime loading\r\n    if (this._options.loadOnce) {\r\n      this.saveDetailView(item);\r\n    }\r\n\r\n    item[`${this._keyPrefix}collapsed`] = true;\r\n    for (let idx = 1; idx <= item[`${this._keyPrefix}sizePadding`]; idx++) {\r\n      this._dataView.deleteItem(item[this._dataViewIdProperty] + '.' + idx);\r\n    }\r\n    item[`${this._keyPrefix}sizePadding`] = 0;\r\n    this._dataView.updateItem(item[this._dataViewIdProperty], item);\r\n\r\n    // Remove the item from the expandedRows\r\n    this._expandedRows = this._expandedRows.filter((r) => {\r\n      return r[this._dataViewIdProperty] !== item[this._dataViewIdProperty];\r\n    });\r\n\r\n    if (!isMultipleCollapsing) {\r\n      this._dataView.endUpdate();\r\n    }\r\n  }\r\n\r\n  /** Expand a detail row by providing the dataview item that is to be expanded */\r\n  expandDetailView(item: any) {\r\n    if (this._options?.singleRowExpand) {\r\n      this.collapseAll();\r\n    }\r\n\r\n    item[`${this._keyPrefix}collapsed`] = false;\r\n    this._expandedRows.push(item);\r\n\r\n    // In the case something went wrong loading it the first time such a scroll of screen before loaded\r\n    if (!item[`${this._keyPrefix}detailContent`]) {\r\n      item[`${this._keyPrefix}detailViewLoaded`] = false;\r\n    }\r\n    // display pre-loading template\r\n    if (!item[`${this._keyPrefix}detailViewLoaded`] || this._options.loadOnce !== true) {\r\n      item[`${this._keyPrefix}detailContent`] = this._options?.preTemplate?.(item);\r\n    } else {\r\n      this.onAsyncResponse.notify({\r\n        item,\r\n        itemDetail: item,\r\n        detailView: item[`${this._keyPrefix}detailContent`],\r\n        grid: this._grid\r\n      }, undefined, this);\r\n      this.applyTemplateNewLineHeight(item);\r\n      this._dataView.updateItem(item[this._dataViewIdProperty], item);\r\n\r\n      return;\r\n    }\r\n\r\n    this.applyTemplateNewLineHeight(item);\r\n    this._dataView.updateItem(item[this._dataViewIdProperty], item);\r\n\r\n    // async server call\r\n    this._options.process(item);\r\n  }\r\n\r\n  /** Saves the current state of the detail view */\r\n  saveDetailView(item: any) {\r\n    const view = document.querySelector(`.${this._gridUid} .innerDetailView_${item[this._dataViewIdProperty]}`);\r\n    if (view) {\r\n      const html = view.innerHTML;\r\n      if (html !== undefined) {\r\n        item[`${this._keyPrefix}detailContent`] = html;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * subscribe to the onAsyncResponse so that the plugin knows when the user server side calls finished\r\n   * the response has to be as \"args.item\" (or \"args.itemDetail\") with it's data back\r\n   */\r\n  protected subscribeToOnAsyncResponse() {\r\n    this.onAsyncResponse.subscribe((e, args) => {\r\n      if (!args || (!args.item && !args.itemDetail)) {\r\n        throw 'Slick.RowDetailView plugin requires the onAsyncResponse() to supply \"args.item\" property.';\r\n      }\r\n\r\n      // we accept item/itemDetail, just get the one which has data\r\n      const itemDetail = args.item || args.itemDetail;\r\n\r\n      // If we just want to load in a view directly we can use detailView property to do so\r\n      if (args.detailView) {\r\n        itemDetail[`${this._keyPrefix}detailContent`] = args.detailView;\r\n      } else {\r\n        itemDetail[`${this._keyPrefix}detailContent`] = this._options?.postTemplate?.(itemDetail);\r\n      }\r\n\r\n      itemDetail[`${this._keyPrefix}detailViewLoaded`] = true;\r\n      this._dataView.updateItem(itemDetail[this._dataViewIdProperty], itemDetail);\r\n\r\n      // trigger an event once the post template is finished loading\r\n      this.onAsyncEndUpdate.notify({\r\n        grid: this._grid,\r\n        item: itemDetail,\r\n        itemDetail\r\n      }, e, this);\r\n    });\r\n  }\r\n\r\n  /** When row is getting toggled, we will handle the action of collapsing/expanding */\r\n  protected handleAccordionShowHide(item: any) {\r\n    if (item) {\r\n      if (!item[`${this._keyPrefix}collapsed`]) {\r\n        this.collapseDetailView(item);\r\n      } else {\r\n        this.expandDetailView(item);\r\n      }\r\n    }\r\n  }\r\n\r\n  //////////////////////////////////////////////////////////////\r\n  //////////////////////////////////////////////////////////////\r\n\r\n  /** Get the Row Detail padding (which are the rows dedicated to the detail panel) */\r\n  protected getPaddingItem(parent: any, offset: any) {\r\n    const item: any = {};\r\n\r\n    Object.keys(this._dataView).forEach(prop => {\r\n      item[prop] = null;\r\n    });\r\n    item[this._dataViewIdProperty] = parent[this._dataViewIdProperty] + '.' + offset;\r\n\r\n    // additional hidden padding metadata fields\r\n    item[`${this._keyPrefix}collapsed`] = true;\r\n    item[`${this._keyPrefix}isPadding`] = true;\r\n    item[`${this._keyPrefix}parent`] = parent;\r\n    item[`${this._keyPrefix}offset`] = offset;\r\n\r\n    return item;\r\n  };\r\n\r\n  /** Create the detail ctr node. this belongs to the dev & can be custom-styled as per */\r\n  protected applyTemplateNewLineHeight(item: any) {\r\n    // the height is calculated by the template row count (how many line of items does the template view have)\r\n    const rowCount = this._options.panelRows;\r\n\r\n    // calculate padding requirements based on detail-content..\r\n    // ie. worst-case: create an invisible dom node now & find it's height.\r\n    const lineHeight = 13; // we know cuz we wrote the custom css init ;)\r\n    item[`${this._keyPrefix}sizePadding`] = Math.ceil(((rowCount * 2) * lineHeight) / this._gridOptions.rowHeight!);\r\n    item[`${this._keyPrefix}height`] = (item[`${this._keyPrefix}sizePadding`] * this._gridOptions.rowHeight!);\r\n    const idxParent = this._dataView.getIdxById(item[this._dataViewIdProperty]) ?? 0;\r\n    for (let idx = 1; idx <= item[`${this._keyPrefix}sizePadding`]; idx++) {\r\n      this._dataView.insertItem(idxParent + idx, this.getPaddingItem(item, idx));\r\n    }\r\n  }\r\n\r\n  /** Get the Column Definition of the first column dedicated to toggling the Row Detail View */\r\n  getColumnDefinition() {\r\n    return {\r\n      id: this._options.columnId,\r\n      name: '',\r\n      reorderable: this._options.reorderable,\r\n      toolTip: this._options.toolTip,\r\n      field: 'sel',\r\n      width: this._options.width,\r\n      resizable: false,\r\n      sortable: false,\r\n      alwaysRenderColumn: this._options.alwaysRenderColumn,\r\n      cssClass: this._options.cssClass,\r\n      formatter: this.detailSelectionFormatter.bind(this)\r\n    };\r\n  }\r\n\r\n  /** Return the currently expanded rows */\r\n  getExpandedRows() {\r\n    return this._expandedRows;\r\n  }\r\n\r\n  /** The cell Formatter that shows the icon that will be used to toggle the Row Detail */\r\n  protected detailSelectionFormatter(row: number, _cell: number, _val: any, _column: Column, dataContext: any, grid: SlickGrid): FormatterResultWithHtml | HTMLElement | '' {\r\n    if (!this.checkExpandableOverride(row, dataContext, grid)) {\r\n      return '';\r\n    } else {\r\n      if (dataContext[`${this._keyPrefix}collapsed`] === undefined) {\r\n        dataContext[`${this._keyPrefix}collapsed`] = true;\r\n        dataContext[`${this._keyPrefix}sizePadding`] = 0;     //the required number of pading rows\r\n        dataContext[`${this._keyPrefix}height`] = 0;     //the actual height in pixels of the detail field\r\n        dataContext[`${this._keyPrefix}isPadding`] = false;\r\n        dataContext[`${this._keyPrefix}parent`] = undefined;\r\n        dataContext[`${this._keyPrefix}offset`] = 0;\r\n      }\r\n\r\n      if (dataContext[`${this._keyPrefix}isPadding`]) {\r\n        // render nothing\r\n      }\r\n      else if (dataContext[`${this._keyPrefix}collapsed`]) {\r\n        let collapsedClasses = this._options.cssClass + ' expand ';\r\n        if (this._options.collapsedClass) {\r\n          collapsedClasses += this._options.collapsedClass;\r\n        }\r\n        return Utils.createDomElement('div', { className: collapsedClasses });\r\n      }\r\n      else {\r\n        const rowHeight = this._gridOptions.rowHeight;\r\n        let outterHeight = dataContext[`${this._keyPrefix}sizePadding`] * this._gridOptions.rowHeight!;\r\n\r\n        if (this._options.maxRows !== undefined && dataContext[`${this._keyPrefix}sizePadding`] > this._options.maxRows) {\r\n          outterHeight = this._options.maxRows * rowHeight!;\r\n          dataContext[`${this._keyPrefix}sizePadding`] = this._options.maxRows;\r\n        }\r\n\r\n        // sneaky extra </div> inserted here-----------------v\r\n        let expandedClasses = this._options.cssClass + ' collapse ';\r\n        if (this._options.expandedClass) {\r\n          expandedClasses += this._options.expandedClass;\r\n        }\r\n\r\n        // create the Row Detail div container that will be inserted AFTER the `.slick-cell`\r\n        const cellDetailContainerElm = Utils.createDomElement('div', {\r\n          className: `dynamic-cell-detail cellDetailView_${dataContext[this._dataViewIdProperty]}`,\r\n          style: { height: `${outterHeight}px`, top: `${rowHeight}px` }\r\n        });\r\n        const innerContainerElm = Utils.createDomElement('div', { className: `detail-container detailViewContainer_${dataContext[this._dataViewIdProperty]}` });\r\n        const innerDetailViewElm = Utils.createDomElement('div', { className: `innerDetailView_${dataContext[this._dataViewIdProperty]}` });\r\n        innerDetailViewElm.innerHTML = this._grid.sanitizeHtmlString(dataContext[`${this._keyPrefix}detailContent`]);\r\n\r\n        innerContainerElm.appendChild(innerDetailViewElm);\r\n        cellDetailContainerElm.appendChild(innerContainerElm);\r\n\r\n        const result: FormatterResultWithHtml = {\r\n          html: Utils.createDomElement('div', { className: expandedClasses }),\r\n          insertElementAfterTarget: cellDetailContainerElm,\r\n        };\r\n\r\n        return result;\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n  /** Resize the Row Detail View */\r\n  resizeDetailView(item: any) {\r\n    if (!item) {\r\n      return;\r\n    }\r\n\r\n    // Grad each of the DOM elements\r\n    const mainContainer = document.querySelector<HTMLDivElement>(`.${this._gridUid} .detailViewContainer_${item[this._dataViewIdProperty]}`);\r\n    const cellItem = document.querySelector<HTMLDivElement>(`.${this._gridUid} .cellDetailView_${item[this._dataViewIdProperty]}`);\r\n    const inner = document.querySelector<HTMLDivElement>(`.${this._gridUid} .innerDetailView_${item[this._dataViewIdProperty]}`);\r\n\r\n    if (!mainContainer || !cellItem || !inner) {\r\n      return;\r\n    }\r\n\r\n    for (let idx = 1; idx <= item[`${this._keyPrefix}sizePadding`]; idx++) {\r\n      this._dataView.deleteItem(`${item[this._dataViewIdProperty]}.${idx}`);\r\n    }\r\n\r\n    const rowHeight = this._gridOptions.rowHeight; // height of a row\r\n    const lineHeight = 13; // we know cuz we wrote the custom css innit ;)\r\n\r\n    // remove the height so we can calculate the height\r\n    mainContainer.style.minHeight = '';\r\n\r\n    // Get the scroll height for the main container so we know the actual size of the view\r\n    const itemHeight = mainContainer.scrollHeight;\r\n\r\n    // Now work out how many rows\r\n    const rowCount = Math.ceil(itemHeight / rowHeight!);\r\n\r\n    item[`${this._keyPrefix}sizePadding`] = Math.ceil(((rowCount * 2) * lineHeight) / rowHeight!);\r\n    item[`${this._keyPrefix}height`] = itemHeight;\r\n\r\n    let outterHeight = (item[`${this._keyPrefix}sizePadding`] * rowHeight!);\r\n    if (this._options.maxRows !== undefined && item[`${this._keyPrefix}sizePadding`] > this._options.maxRows) {\r\n      outterHeight = this._options.maxRows * rowHeight!;\r\n      item[`${this._keyPrefix}sizePadding`] = this._options.maxRows;\r\n    }\r\n\r\n    // If the padding is now more than the original minRowBuff we need to increase it\r\n    if (this._grid.getOptions().minRowBuffer! < item[`${this._keyPrefix}sizePadding`]) {\r\n      // Update the minRowBuffer so that the view doesn't disappear when it's at top of screen + the original default 3\r\n      this._grid.getOptions().minRowBuffer = item[`${this._keyPrefix}sizePadding`] + 3;\r\n    }\r\n\r\n    mainContainer.setAttribute('style', 'min-height: ' + item[`${this._keyPrefix}height`] + 'px');\r\n    if (cellItem) {\r\n      cellItem.setAttribute('style', 'height: ' + outterHeight + 'px; top:' + rowHeight + 'px');\r\n    }\r\n\r\n    const idxParent = this._dataView.getIdxById(item[this._dataViewIdProperty]) ?? 0;\r\n    for (let idx = 1; idx <= item[`${this._keyPrefix}sizePadding`]; idx++) {\r\n      this._dataView.insertItem(idxParent + idx, this.getPaddingItem(item, idx));\r\n    }\r\n\r\n    // Lastly save the updated state\r\n    this.saveDetailView(item);\r\n  }\r\n\r\n  /** Takes in the item we are filtering and if it is an expanded row returns it's parents row to filter on */\r\n  getFilterItem(item: any) {\r\n    if (item[`${this._keyPrefix}isPadding`] && item[`${this._keyPrefix}parent`]) {\r\n      item = item[`${this._keyPrefix}parent`];\r\n    }\r\n    return item;\r\n  }\r\n\r\n  protected checkExpandableOverride(row: number, dataContext: any, grid: SlickGrid) {\r\n    if (typeof this._expandableOverride === 'function') {\r\n      return this._expandableOverride(row, dataContext, grid);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Method that user can pass to override the default behavior or making every row an expandable row.\r\n   * In order word, user can choose which rows to be an available row detail (or not) by providing his own logic.\r\n   * @param overrideFn: override function callback\r\n   */\r\n  expandableOverride(overrideFn: UsabilityOverrideFn) {\r\n    this._expandableOverride = overrideFn;\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      Plugins: {\r\n        RowDetailView: SlickRowDetailView\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n"],
  "mappings": "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",
  "names": ["_a", "_b"]
}
