{
  "version": 3,
  "sources": ["../../../src/plugins/slick.rowdetailview.js"],
  "sourcesContent": ["import { Event as SlickEvent_, EventHandler as EventHandler_, Utils as Utils_ } from '../slick.core';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : EventHandler_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n\n/***\n * A plugin to add row detail panel\n * Original StackOverflow question & article making this possible (thanks to violet313)\n * https://stackoverflow.com/questions/10535164/can-slickgrids-row-height-be-dynamically-altered#29399927\n * http://violet313.org/slickgrids/#intro\n *\n * USAGE:\n * Add the slick.rowDetailView.(js|css) files and register the plugin with the grid.\n *\n * AVAILABLE ROW DETAIL OPTIONS:\n *    cssClass:               A CSS class to be added to the row detail\n *    expandedClass:          Extra classes to be added to the expanded Toggle\n *    expandableOverride:     callback method that user can override the default behavior of making every row an expandable row (the logic to show or not the expandable icon).\n *    collapsedClass:         Extra classes to be added to the collapse Toggle\n *    loadOnce:               Defaults to false, when set to True it will load the data once and then reuse it.\n *    preTemplate:            Template that will be used before the async process (typically used to show a spinner/loading)\n *    postTemplate:           Template that will be loaded once the async function finishes\n *    process:                Async server function call\n *    panelRows:              Row count to use for the template panel\n *    singleRowExpand:        Defaults to false, limit expanded row to 1 at a time.\n *    useRowClick:            Boolean flag, when True will open the row detail on a row click (from any column), default to False\n *    keyPrefix:              Defaults to '_', prefix used for all the plugin metadata added to the item object (meta e.g.: padding, collapsed, parent)\n *    collapseAllOnSort:      Defaults to true, which will collapse all row detail views when user calls a sort. Unless user implements a sort to deal with padding\n *    saveDetailViewOnScroll: Defaults to true, which will save the row detail view in a cache when it detects that it will become out of the viewport buffer\n *    useSimpleViewportCalc:  Defaults to false, which will use simplified calculation of out or back of viewport visibility\n *\n * AVAILABLE PUBLIC METHODS:\n *    init:                 initiliaze the plugin\n *    expandableOverride:   callback method that user can override the default behavior of making every row an expandable row (the logic to show or not the expandable icon).\n *    destroy:              destroy the plugin and it's events\n *    collapseAll:          collapse all opened row detail panel\n *    collapseDetailView:   collapse a row by passing the item object (row detail)\n *    expandDetailView:     expand a row by passing the item object (row detail)\n *    getColumnDefinition:  get the column definitions\n *    getExpandedRows:      get all the expanded rows\n *    getFilterItem:        takes in the item we are filtering and if it is an expanded row returns it's parents row to filter on\n *    getOptions:           get current plugin options\n *    resizeDetailView:     resize a row detail view, it will auto-calculate the number of rows it needs\n *    saveDetailView:       save a row detail view content by passing the row object\n *    setOptions:           set or change some of the plugin options\n *\n * THE PLUGIN EXPOSES THE FOLLOWING SLICK EVENTS:\n *    onAsyncResponse:  This event must be used with the \"notify\" by the end user once the Asynchronous Server call returns the item detail\n *      Event args:\n *        item:         Item detail returned from the async server call\n *        detailView:   An explicit view to use instead of template (Optional)\n *\n *    onAsyncEndUpdate: Fired when the async response finished\n *      Event args:\n *        grid:         Reference to the grid.\n *        item:         Item data context\n *\n *    onBeforeRowDetailToggle: Fired before the row detail gets toggled\n *      Event args:\n *        grid:         Reference to the grid.\n *        item:         Item data context\n *\n *    onAfterRowDetailToggle: Fired after the row detail gets toggled\n *      Event args:\n *        grid:         Reference to the grid.\n *        item:         Item data context\n *        expandedRows: Array of the Expanded Rows\n *\n *    onRowOutOfViewportRange: Fired after a row becomes out of viewport range (user can't see the row anymore)\n *      Event args:\n *        grid:         Reference to the grid.\n *        item:         Item data context\n *        rowId:        Id of the Row object (datacontext) in the Grid\n *        rowIndex:     Index of the Row in the Grid\n *        expandedRows: Array of the Expanded Rows\n *        rowIdsOutOfViewport: Array of the Out of viewport Range Rows\n *\n *    onRowBackToViewportRange: Fired after the row detail gets toggled\n *      Event args:\n *        grid:         Reference to the grid.\n *        item:         Item data context\n *        rowId:        Id of the Row object (datacontext) in the Grid\n *        rowIndex:     Index of the Row in the Grid\n *        expandedRows: Array of the Expanded Rows\n *        rowIdsOutOfViewport: Array of the Out of viewport Range Rows\n */\n\n/** Constructor of the Row Detail View Plugin */\nexport function RowDetailView(options) {\n    var _grid;\n    var _gridOptions;\n    var _gridUid;\n    var _dataView;\n    var _dataViewIdProperty = 'id';\n    var _expandableOverride = null;\n    var _self = this;\n    var _lastRange = null;\n    var _expandedRows = [];\n  var _handler = new EventHandler();\n    var _outsideRange = 5;\n    var _visibleRenderedCellCount = 0;\n    var _defaults = {\n      columnId: '_detail_selector',\n      cssClass: 'detailView-toggle',\n      expandedClass: null,\n      collapsedClass: null,\n      keyPrefix: '_',\n      loadOnce: false,\n      collapseAllOnSort: true,\n      saveDetailViewOnScroll: true,\n      singleRowExpand: false,\n      useSimpleViewportCalc: false,\n      alwaysRenderColumn: true,\n      toolTip: '',\n      width: 30,\n      maxRows: null\n    };\n    var _keyPrefix = _defaults.keyPrefix;\n    var _gridRowBuffer = 0;\n    var _rowIdsOutOfViewport = [];\n  var _options = Utils.extend(true, {}, _defaults, options);\n\n    // user could override the expandable icon logic from within the options or after instantiating the plugin\n    if (typeof _options.expandableOverride === 'function') {\n      expandableOverride(_options.expandableOverride);\n    }\n\n    /**\n     * Initialize the plugin, which requires user to pass the SlickGrid Grid object\n     * @param grid: SlickGrid Grid object\n     */\n    function init(grid) {\n      if (!grid) {\n        throw new Error('RowDetailView Plugin requires the Grid instance to be passed as argument to the \"init()\" method');\n      }\n      _grid = grid;\n      _gridUid = grid.getUID();\n      _gridOptions = grid.getOptions() || {};\n      _dataView = _grid.getData();\n      _keyPrefix = _options && _options.keyPrefix || '_';\n\n      // Update the minRowBuffer so that the view doesn't disappear when it's at top of screen + the original default 3\n      _gridRowBuffer = _grid.getOptions().minRowBuffer;\n      _grid.getOptions().minRowBuffer = _options.panelRows + 3;\n\n      _handler\n        .subscribe(_grid.onClick, handleClick)\n        .subscribe(_grid.onScroll, handleScroll);\n\n      // Sort will, by default, Collapse all of the open items (unless user implements his own onSort which deals with open row and padding)\n      if (_options.collapseAllOnSort) {\n        _handler.subscribe(_grid.onSort, collapseAll);\n        _expandedRows = [];\n        _rowIdsOutOfViewport = [];\n      }\n\n      _handler.subscribe(_grid.getData().onRowCountChanged, function () {\n        _grid.updateRowCount();\n        _grid.render();\n      });\n\n      _handler.subscribe(_grid.getData().onRowsChanged, function (e, a) {\n        _grid.invalidateRows(a.rows);\n        _grid.render();\n      });\n\n      // subscribe to the onAsyncResponse so that the plugin knows when the user server side calls finished\n      subscribeToOnAsyncResponse();\n\n      // after data is set, let's get the DataView Id Property name used (defaults to \"id\")\n      _handler.subscribe(_dataView.onSetItemsCalled, function () {\n        _dataViewIdProperty = _dataView && _dataView.getIdPropertyName() || 'id';\n      });\n\n      // if we use the alternative & simpler calculation of the out of viewport range\n      // we will need to know how many rows are rendered on the screen and we need to wait for grid to be rendered\n      // unfortunately there is no triggered event for knowing when grid is finished, so we use 250ms delay and it's typically more than enough\n      if (_options.useSimpleViewportCalc) {\n        _handler.subscribe(_grid.onRendered, function (e, args) {\n          if (args && args.endRow) {\n            _visibleRenderedCellCount = args.endRow - args.startRow;\n          }\n        });\n      }\n    }\n\n    /** destroy the plugin and it's events */\n    function destroy() {\n      _handler.unsubscribeAll();\n      _self.onAsyncResponse.unsubscribe();\n      _self.onAsyncEndUpdate.unsubscribe();\n      _self.onAfterRowDetailToggle.unsubscribe();\n      _self.onBeforeRowDetailToggle.unsubscribe();\n      _self.onRowOutOfViewportRange.unsubscribe();\n      _self.onRowBackToViewportRange.unsubscribe();\n    }\n\n    /** Get current plugin options */\n    function getOptions() {\n      return _options;\n    }\n\n    /** set or change some of the plugin options */\n    function setOptions(options) {\n      _options = Utils.extend(true, {}, _options, options);\n      if (_options && _options.singleRowExpand) {\n        collapseAll();\n      }\n    }\n\n    /** Find a value in an array and return the index when (or -1 when not found) */\n    function arrayFindIndex(sourceArray, value) {\n      if (sourceArray) {\n        for (var i = 0; i < sourceArray.length; i++) {\n          if (sourceArray[i] === value) {\n            return i;\n          }\n        }\n      }\n      return -1;\n    }\n\n    /** Handle mouse click event */\n    function handleClick(e, args) {\n      var dataContext = _grid.getDataItem(args.row);\n      if (!checkExpandableOverride(args.row, dataContext, _grid)) {\n        return;\n      }\n\n      // clicking on a row select checkbox\n      if (_options.useRowClick || _grid.getColumns()[args.cell]['id'] === _options.columnId && e.target.classList.contains(_options.cssClass || '')) {\n        // if editing, try to commit\n        if (_grid.getEditorLock().isActive() && !_grid.getEditorLock().commitCurrentEdit()) {\n          e.preventDefault();\n          e.stopImmediatePropagation();\n          return;\n        }\n\n        // trigger an event before toggling\n        _self.onBeforeRowDetailToggle.notify({\n          'grid': _grid,\n          'item': dataContext\n        }, e, _self);\n\n        toggleRowSelection(args.row, dataContext);\n\n        // trigger an event after toggling\n        _self.onAfterRowDetailToggle.notify({\n          'grid': _grid,\n          'item': dataContext,\n          'expandedRows': _expandedRows,\n        }, e, _self);\n\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n      }\n    }\n\n    /** If we scroll save detail views that go out of cache range */\n    function handleScroll() {\n      if (_options.useSimpleViewportCalc) {\n        calculateOutOfRangeViewsSimplerVersion();\n      } else {\n        calculateOutOfRangeViews();\n      }\n    }\n\n    /** Calculate when expanded rows become out of view range */\n    function calculateOutOfRangeViews() {\n      if (_grid) {\n        var renderedRange = _grid.getRenderedRange();\n        // Only check if we have expanded rows\n        if (_expandedRows.length > 0) {\n          // Assume scroll direction is down by default.\n          var scrollDir = 'DOWN';\n          if (_lastRange) {\n            // Some scrolling isn't anything as the range is the same\n            if (_lastRange.top === renderedRange.top && _lastRange.bottom === renderedRange.bottom) {\n              return;\n            }\n\n            // If our new top is smaller we are scrolling up\n            if (_lastRange.top > renderedRange.top ||\n              // Or we are at very top but our bottom is increasing\n              (_lastRange.top === 0 && renderedRange.top === 0) && _lastRange.bottom > renderedRange.bottom) {\n              scrollDir = 'UP';\n            }\n          }\n        }\n\n        _expandedRows.forEach(function (row) {\n          var rowIndex = _dataView.getRowById(row[_dataViewIdProperty]);\n\n          var rowPadding = row[_keyPrefix + 'sizePadding'];\n          var rowOutOfRange = arrayFindIndex(_rowIdsOutOfViewport, row[_dataViewIdProperty]) >= 0;\n\n          if (scrollDir === 'UP') {\n            // save the view when asked\n            if (_options.saveDetailViewOnScroll) {\n              // If the bottom item within buffer range is an expanded row save it.\n              if (rowIndex >= renderedRange.bottom - _gridRowBuffer) {\n                saveDetailView(row);\n              }\n            }\n\n            // If the row expanded area is within the buffer notify that it is back in range\n            if (rowOutOfRange && rowIndex - _outsideRange < renderedRange.top && rowIndex >= renderedRange.top) {\n              notifyBackToViewportWhenDomExist(row, row[_dataViewIdProperty]);\n            }\n\n            // if our first expanded row is about to go off the bottom\n            else if (!rowOutOfRange && (rowIndex + rowPadding) > renderedRange.bottom) {\n              notifyOutOfViewport(row, row[_dataViewIdProperty]);\n            }\n          }\n          else if (scrollDir === 'DOWN') {\n            // save the view when asked\n            if (_options.saveDetailViewOnScroll) {\n              // If the top item within buffer range is an expanded row save it.\n              if (rowIndex <= renderedRange.top + _gridRowBuffer) {\n                saveDetailView(row);\n              }\n            }\n\n            // If row index is i higher than bottom with some added value (To ignore top rows off view) and is with view and was our of range\n            if (rowOutOfRange && (rowIndex + rowPadding + _outsideRange) > renderedRange.bottom && rowIndex < rowIndex + rowPadding) {\n              notifyBackToViewportWhenDomExist(row, row[_dataViewIdProperty]);\n            }\n\n            // if our row is outside top of and the buffering zone but not in the array of outOfVisable range notify it\n            else if (!rowOutOfRange && rowIndex < renderedRange.top) {\n              notifyOutOfViewport(row, row[_dataViewIdProperty]);\n            }\n          }\n        });\n        _lastRange = renderedRange;\n      }\n    }\n\n    /** This is an alternative & more simpler version of the Calculate when expanded rows become out of view range */\n    function calculateOutOfRangeViewsSimplerVersion() {\n      if (_grid) {\n        var renderedRange = _grid.getRenderedRange();\n\n        _expandedRows.forEach(function (row) {\n          var rowIndex = _dataView.getRowById(row[_dataViewIdProperty]);\n          var isOutOfVisibility = checkIsRowOutOfViewportRange(rowIndex, renderedRange);\n          if (!isOutOfVisibility && arrayFindIndex(_rowIdsOutOfViewport, row[_dataViewIdProperty]) >= 0) {\n            notifyBackToViewportWhenDomExist(row, row[_dataViewIdProperty]);\n          } else if (isOutOfVisibility) {\n            notifyOutOfViewport(row, row[_dataViewIdProperty]);\n          }\n        });\n      }\n    }\n\n    /**\n     * Check if the row became out of visible range (when user can't see it anymore)\n     * @param rowIndex\n     * @param renderedRange from SlickGrid\n     */\n    function checkIsRowOutOfViewportRange(rowIndex, renderedRange) {\n      if (Math.abs(renderedRange.bottom - _gridRowBuffer - rowIndex) > _visibleRenderedCellCount * 2) {\n        return true;\n      }\n      return false;\n    }\n\n    /** Send a notification, through \"onRowOutOfViewportRange\", that is out of the viewport range */\n    function notifyOutOfViewport(item, rowId) {\n      var rowIndex = item.rowIndex || _dataView.getRowById(item[_dataViewIdProperty]);\n\n      _self.onRowOutOfViewportRange.notify({\n        'grid': _grid,\n        'item': item,\n        'rowId': rowId,\n        'rowIndex': rowIndex,\n        'expandedRows': _expandedRows,\n        'rowIdsOutOfViewport': syncOutOfViewportArray(rowId, true)\n      }, null, _self);\n    }\n\n    /** Send a notification, through \"onRowBackToViewportRange\", that a row came back to the viewport */\n    function notifyBackToViewportWhenDomExist(item, rowId) {\n      var rowIndex = item.rowIndex || _dataView.getRowById(item[_dataViewIdProperty]);\n\n      setTimeout(function () {\n        // make sure View Row DOM Element really exist before notifying that it's a row that is visible again\n        if (document.querySelector(`.${_gridUid} .cellDetailView_${item[_dataViewIdProperty]}`)) {\n          _self.onRowBackToViewportRange.notify({\n            'grid': _grid,\n            'item': item,\n            'rowId': rowId,\n            'rowIndex': rowIndex,\n            'expandedRows': _expandedRows,\n            'rowIdsOutOfViewport': syncOutOfViewportArray(rowId, false)\n          }, null, _self);\n        }\n      }, 100);\n    }\n\n    /**\n     * This function will sync the out of viewport array whenever necessary.\n     * The sync can add a row (when necessary, no need to add again if it already exist) or delete a row from the array.\n     * @param rowId: number\n     * @param isAdding: are we adding or removing a row?\n     */\n    function syncOutOfViewportArray(rowId, isAdding) {\n      var arrayRowIndex = arrayFindIndex(_rowIdsOutOfViewport, rowId);\n\n      if (isAdding && arrayRowIndex < 0) {\n        _rowIdsOutOfViewport.push(rowId);\n      } else if (!isAdding && arrayRowIndex >= 0) {\n        _rowIdsOutOfViewport.splice(arrayRowIndex, 1);\n      }\n      return _rowIdsOutOfViewport;\n    }\n\n    // Toggle between showing and hiding a row\n    function toggleRowSelection(rowNumber, dataContext) {\n      if (!checkExpandableOverride(rowNumber, dataContext, _grid)) {\n        return;\n      }\n\n      _dataView.beginUpdate();\n      handleAccordionShowHide(dataContext);\n      _dataView.endUpdate();\n    }\n\n    /** Collapse all of the open items */\n    function collapseAll() {\n      _dataView.beginUpdate();\n      for (var i = _expandedRows.length - 1; i >= 0; i--) {\n        collapseDetailView(_expandedRows[i], true);\n      }\n      _dataView.endUpdate();\n    }\n\n    /** Colapse an Item so it is not longer seen */\n    function collapseDetailView(item, isMultipleCollapsing) {\n      if (!isMultipleCollapsing) {\n        _dataView.beginUpdate();\n      }\n      // Save the details on the collapse assuming onetime loading\n      if (_options.loadOnce) {\n        saveDetailView(item);\n      }\n\n      item[_keyPrefix + 'collapsed'] = true;\n      for (var idx = 1; idx <= item[_keyPrefix + 'sizePadding']; idx++) {\n        _dataView.deleteItem(item[_dataViewIdProperty] + '.' + idx);\n      }\n      item[_keyPrefix + 'sizePadding'] = 0;\n      _dataView.updateItem(item[_dataViewIdProperty], item);\n\n      // Remove the item from the expandedRows\n      _expandedRows = _expandedRows.filter(function (r) {\n        return r[_dataViewIdProperty] !== item[_dataViewIdProperty];\n      });\n\n      if (!isMultipleCollapsing) {\n        _dataView.endUpdate();\n      }\n    }\n\n    /** Expand a row given the dataview item that is to be expanded */\n    function expandDetailView(item) {\n      if (_options && _options.singleRowExpand) {\n        collapseAll();\n      }\n\n      item[_keyPrefix + 'collapsed'] = false;\n      _expandedRows.push(item);\n\n      // In the case something went wrong loading it the first time such a scroll of screen before loaded\n      if (!item[_keyPrefix + 'detailContent']) item[_keyPrefix + 'detailViewLoaded'] = false;\n\n      // display pre-loading template\n      if (!item[_keyPrefix + 'detailViewLoaded'] || _options.loadOnce !== true) {\n        item[_keyPrefix + 'detailContent'] = _options.preTemplate(item);\n      } else {\n        _self.onAsyncResponse.notify({\n          'item': item,\n          'itemDetail': item,\n          'detailView': item[_keyPrefix + 'detailContent']\n        }, undefined, this);\n        applyTemplateNewLineHeight(item);\n        _dataView.updateItem(item[_dataViewIdProperty], item);\n\n        return;\n      }\n\n      applyTemplateNewLineHeight(item);\n      _dataView.updateItem(item[_dataViewIdProperty], item);\n\n      // async server call\n      _options.process(item);\n    }\n\n    /** Saves the current state of the detail view */\n    function saveDetailView(item) {\n      const view = document.querySelector(`.${_gridUid} .innerDetailView_${item[_dataViewIdProperty]}`);\n      if (view) {\n        const html = view.innerHTML;\n        if (html !== undefined) {\n          item[`${_keyPrefix}detailContent`] = html;\n        }\n      }\n    }\n\n    /**\n     * subscribe to the onAsyncResponse so that the plugin knows when the user server side calls finished\n     * the response has to be as \"args.item\" (or \"args.itemDetail\") with it's data back\n     */\n    function subscribeToOnAsyncResponse() {\n      _self.onAsyncResponse.subscribe(function (e, args) {\n        if (!args || (!args.item && !args.itemDetail)) {\n          throw 'Slick.RowDetailView plugin requires the onAsyncResponse() to supply \"args.item\" property.';\n        }\n\n        // we accept item/itemDetail, just get the one which has data\n        var itemDetail = args.item || args.itemDetail;\n\n        // If we just want to load in a view directly we can use detailView property to do so\n        if (args.detailView) {\n          itemDetail[_keyPrefix + 'detailContent'] = args.detailView;\n        } else {\n          itemDetail[_keyPrefix + 'detailContent'] = _options.postTemplate(itemDetail);\n        }\n\n        itemDetail[_keyPrefix + 'detailViewLoaded'] = true;\n        _dataView.updateItem(itemDetail[_dataViewIdProperty], itemDetail);\n\n        // trigger an event once the post template is finished loading\n        _self.onAsyncEndUpdate.notify({\n          'grid': _grid,\n          'item': itemDetail,\n          'itemDetail': itemDetail\n        }, e, _self);\n      });\n    }\n\n    /** When row is getting toggled, we will handle the action of collapsing/expanding */\n    function handleAccordionShowHide(item) {\n      if (item) {\n        if (!item[_keyPrefix + 'collapsed']) {\n          collapseDetailView(item);\n        } else {\n          expandDetailView(item);\n        }\n      }\n    }\n\n    //////////////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////////////\n\n    /** Get the Row Detail padding (which are the rows dedicated to the detail panel) */\n    var getPaddingItem = function (parent, offset) {\n      var item = {};\n\n      for (var prop in _grid.getData()) {\n        item[prop] = null;\n      }\n      item[_dataViewIdProperty] = parent[_dataViewIdProperty] + '.' + offset;\n\n      // additional hidden padding metadata fields\n      item[_keyPrefix + 'collapsed'] = true;\n      item[_keyPrefix + 'isPadding'] = true;\n      item[_keyPrefix + 'parent'] = parent;\n      item[_keyPrefix + 'offset'] = offset;\n\n      return item;\n    };\n\n    //////////////////////////////////////////////////////////////\n    // create the detail ctr node. this belongs to the dev & can be custom-styled as per\n    //////////////////////////////////////////////////////////////\n    function applyTemplateNewLineHeight(item) {\n      // the height is calculated by the template row count (how many line of items does the template view have)\n      var rowCount = _options.panelRows;\n\n      // calculate padding requirements based on detail-content..\n      // ie. worst-case: create an invisible dom node now & find it's height.\n      var lineHeight = 13; // we know cuz we wrote the custom css init ;)\n      item[_keyPrefix + 'sizePadding'] = Math.ceil(((rowCount * 2) * lineHeight) / _gridOptions.rowHeight);\n      item[_keyPrefix + 'height'] = (item[_keyPrefix + 'sizePadding'] * _gridOptions.rowHeight);\n      var idxParent = _dataView.getIdxById(item[_dataViewIdProperty]);\n      for (var idx = 1; idx <= item[_keyPrefix + 'sizePadding']; idx++) {\n        _dataView.insertItem(idxParent + idx, getPaddingItem(item, idx));\n      }\n    }\n\n    /** Get the Column Definition of the first column dedicated to toggling the Row Detail View */\n    function getColumnDefinition() {\n      return {\n        id: _options.columnId,\n        name: '',\n        toolTip: _options.toolTip,\n        field: 'sel',\n        width: _options.width,\n        resizable: false,\n        sortable: false,\n        alwaysRenderColumn: _options.alwaysRenderColumn,\n        cssClass: _options.cssClass,\n        formatter: detailSelectionFormatter\n      };\n    }\n\n    /** return the currently expanded rows */\n    function getExpandedRows() {\n      return _expandedRows;\n    }\n\n    /** The Formatter of the toggling icon of the Row Detail */\n    function detailSelectionFormatter(row, cell, value, columnDef, dataContext, grid) {\n      if (!checkExpandableOverride(row, dataContext, grid)) {\n        return null;\n      } else {\n        if (dataContext[_keyPrefix + 'collapsed'] == undefined) {\n          dataContext[_keyPrefix + 'collapsed'] = true;\n          dataContext[_keyPrefix + 'sizePadding'] = 0;     //the required number of pading rows\n          dataContext[_keyPrefix + 'height'] = 0;     //the actual height in pixels of the detail field\n          dataContext[_keyPrefix + 'isPadding'] = false;\n          dataContext[_keyPrefix + 'parent'] = undefined;\n          dataContext[_keyPrefix + 'offset'] = 0;\n        }\n\n        if (dataContext[_keyPrefix + 'isPadding']) {\n          // render nothing\n        }\n        else if (dataContext[_keyPrefix + 'collapsed']) {\n          var collapsedClasses = _options.cssClass + ' expand ';\n          if (_options.collapsedClass) {\n            collapsedClasses += _options.collapsedClass;\n          }\n          return '<div class=\"' + collapsedClasses + '\"></div>';\n        }\n        else {\n          var html = [];\n          var rowHeight = _gridOptions.rowHeight;\n\n          var outterHeight = dataContext[_keyPrefix + 'sizePadding'] * _gridOptions.rowHeight;\n          if (_options.maxRows !== null && dataContext[_keyPrefix + 'sizePadding'] > _options.maxRows) {\n            outterHeight = _options.maxRows * rowHeight;\n            dataContext[_keyPrefix + 'sizePadding'] = _options.maxRows;\n          }\n\n          //V313HAX:\n          //putting in an extra closing div after the closing toggle div and ommiting a\n          //final closing div for the detail ctr div causes the slickgrid renderer to\n          //insert our detail div as a new column ;) ~since it wraps whatever we provide\n          //in a generic div column container. so our detail becomes a child directly of\n          //the row not the cell. nice =)  ~no need to apply a css change to the parent\n          //slick-cell to escape the cell overflow clipping.\n\n          //sneaky extra </div> inserted here-----------------v\n          var expandedClasses = _options.cssClass + ' collapse ';\n          if (_options.expandedClass) expandedClasses += _options.expandedClass;\n          html.push('<div class=\"' + expandedClasses + '\"></div></div>');\n\n          html.push('<div class=\"dynamic-cell-detail cellDetailView_', dataContext[_dataViewIdProperty], '\" ');   //apply custom css to detail\n          html.push('style=\"height:', outterHeight, 'px;'); //set total height of padding\n          html.push('top:', rowHeight, 'px\">');             //shift detail below 1st row\n          html.push('<div class=\"detail-container detailViewContainer_', dataContext[_dataViewIdProperty], '\">'); //sub ctr for custom styling\n          html.push('<div class=\"innerDetailView_', dataContext[_dataViewIdProperty], '\">', dataContext[_keyPrefix + 'detailContent'], '</div></div>');\n          // &omit a final closing detail container </div> that would come next\n\n          return html.join('');\n        }\n      }\n      return null;\n    }\n\n    /** Resize the Row Detail View */\n    function resizeDetailView(item) {\n      if (!item) {\n        return;\n      }\n\n      // Grad each of the DOM elements\n      var mainContainer = document.querySelector('.' + _gridUid + ' .detailViewContainer_' + item[_dataViewIdProperty]);\n      var cellItem = document.querySelector('.' + _gridUid + ' .cellDetailView_' + item[_dataViewIdProperty]);\n      var inner = document.querySelector('.' + _gridUid + ' .innerDetailView_' + item[_dataViewIdProperty]);\n\n      if (!mainContainer || !cellItem || !inner) {\n        return;\n      }\n\n      for (var idx = 1; idx <= item[_keyPrefix + 'sizePadding']; idx++) {\n        _dataView.deleteItem(item[_dataViewIdProperty] + '.' + idx);\n      }\n\n      var rowHeight = _gridOptions.rowHeight; // height of a row\n      var lineHeight = 13; // we know cuz we wrote the custom css innit ;)\n\n      // remove the height so we can calculate the height\n      mainContainer.style.minHeight = null;\n\n      // Get the scroll height for the main container so we know the actual size of the view\n      var itemHeight = mainContainer.scrollHeight;\n\n      // Now work out how many rows\n      var rowCount = Math.ceil(itemHeight / rowHeight);\n\n      item[_keyPrefix + 'sizePadding'] = Math.ceil(((rowCount * 2) * lineHeight) / rowHeight);\n      item[_keyPrefix + 'height'] = itemHeight;\n\n      var outterHeight = (item[_keyPrefix + 'sizePadding'] * rowHeight);\n      if (_options.maxRows !== null && item[_keyPrefix + 'sizePadding'] > _options.maxRows) {\n        outterHeight = _options.maxRows * rowHeight;\n        item[_keyPrefix + 'sizePadding'] = _options.maxRows;\n      }\n\n      // If the padding is now more than the original minRowBuff we need to increase it\n      if (_grid.getOptions().minRowBuffer < item[_keyPrefix + 'sizePadding']) {\n        // Update the minRowBuffer so that the view doesn't disappear when it's at top of screen + the original default 3\n        _grid.getOptions().minRowBuffer = item[_keyPrefix + 'sizePadding'] + 3;\n      }\n\n      mainContainer.setAttribute('style', 'min-height: ' + item[_keyPrefix + 'height'] + 'px');\n      if (cellItem) cellItem.setAttribute('style', 'height: ' + outterHeight + 'px; top:' + rowHeight + 'px');\n\n      var idxParent = _dataView.getIdxById(item[_dataViewIdProperty]);\n      for (var idx = 1; idx <= item[_keyPrefix + 'sizePadding']; idx++) {\n        _dataView.insertItem(idxParent + idx, getPaddingItem(item, idx));\n      }\n\n      // Lastly save the updated state\n      saveDetailView(item);\n    }\n\n    /** Takes in the item we are filtering and if it is an expanded row returns it's parents row to filter on */\n    function getFilterItem(item) {\n      if (item[_keyPrefix + 'isPadding'] && item[_keyPrefix + 'parent']) {\n        item = item[_keyPrefix + 'parent'];\n      }\n      return item;\n    }\n\n    function checkExpandableOverride(row, dataContext, grid) {\n      if (typeof _expandableOverride === 'function') {\n        return _expandableOverride(row, dataContext, grid);\n      }\n      return true;\n    }\n\n    /**\n     * Method that user can pass to override the default behavior or making every row an expandable row.\n     * In order word, user can choose which rows to be an available row detail (or not) by providing his own logic.\n     * @param overrideFn: override function callback\n     */\n    function expandableOverride(overrideFn) {\n      _expandableOverride = overrideFn;\n    }\n\n  Utils.extend(this, {\n      \"init\": init,\n      \"destroy\": destroy,\n      \"pluginName\": \"RowDetailView\",\n\n      \"collapseAll\": collapseAll,\n      \"collapseDetailView\": collapseDetailView,\n      \"expandDetailView\": expandDetailView,\n      \"expandableOverride\": expandableOverride,\n      \"getColumnDefinition\": getColumnDefinition,\n      \"getExpandedRows\": getExpandedRows,\n      \"getFilterItem\": getFilterItem,\n      \"getOptions\": getOptions,\n      \"resizeDetailView\": resizeDetailView,\n      \"saveDetailView\": saveDetailView,\n      \"setOptions\": setOptions,\n\n      // events\n    \"onAsyncResponse\": new SlickEvent(),\n    \"onAsyncEndUpdate\": new SlickEvent(),\n    \"onAfterRowDetailToggle\": new SlickEvent(),\n    \"onBeforeRowDetailToggle\": new SlickEvent(),\n    \"onRowOutOfViewportRange\": new SlickEvent(),\n    \"onRowBackToViewportRange\": new SlickEvent()\n    });\n  }\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      Plugins: {\n        RowDetailView\n      }\n    }\n  });\n}\n\n"],
  "mappings": "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",
  "names": ["options"]
}
