{
  "version": 3,
  "sources": ["import-ns:../slick.core.js", "../../../src/plugins/slick.rowdetailview.js"],
  "sourcesContent": ["// empty string, do nothing", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SlickRowDetailView = void 0;\nvar slick_core_1 = require(\"../slick.core\");\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nvar SlickEvent = IIFE_ONLY ? Slick.Event : slick_core_1.SlickEvent;\nvar SlickEventHandler = IIFE_ONLY ? Slick.EventHandler : slick_core_1.SlickEventHandler;\nvar Utils = IIFE_ONLY ? Slick.Utils : slick_core_1.Utils;\n/**\n * A plugin to add row detail panel\n * Original StackOverflow question & article making this possible (thanks to violet313)\n * https://stackoverflow.com/questions/10535164/can-slickgrids-row-height-be-dynamically-altered#29399927\n * http://violet313.org/slickgrids/#intro\n *\n * USAGE:\n * Add the slick.rowDetailView.(js|css) files and register the plugin with the grid.\n *\n * AVAILABLE ROW DETAIL OPTIONS:\n *    cssClass:               A CSS class to be added to the row detail\n *    expandedClass:          Extra classes to be added to the expanded Toggle\n *    expandableOverride:     callback method that user can override the default behavior of making every row an expandable row (the logic to show or not the expandable icon).\n *    collapsedClass:         Extra classes to be added to the collapse Toggle\n *    loadOnce:               Defaults to false, when set to True it will load the data once and then reuse it.\n *    preTemplate:            Template that will be used before the async process (typically used to show a spinner/loading)\n *    postTemplate:           Template that will be loaded once the async function finishes\n *    process:                Async server function call\n *    panelRows:              Row count to use for the template panel\n *    singleRowExpand:        Defaults to false, limit expanded row to 1 at a time.\n *    useRowClick:            Boolean flag, when True will open the row detail on a row click (from any column), default to False\n *    keyPrefix:              Defaults to '_', prefix used for all the plugin metadata added to the item object (meta e.g.: padding, collapsed, parent)\n *    collapseAllOnSort:      Defaults to true, which will collapse all row detail views when user calls a sort. Unless user implements a sort to deal with padding\n *    saveDetailViewOnScroll: Defaults to true, which will save the row detail view in a cache when it detects that it will become out of the viewport buffer\n *    useSimpleViewportCalc:  Defaults to false, which will use simplified calculation of out or back of viewport visibility\n *\n * AVAILABLE PUBLIC METHODS:\n *    init:                 initiliaze the plugin\n *    expandableOverride:   callback method that user can override the default behavior of making every row an expandable row (the logic to show or not the expandable icon).\n *    destroy:              destroy the plugin and it's events\n *    collapseAll:          collapse all opened row detail panel\n *    collapseDetailView:   collapse a row by passing the item object (row detail)\n *    expandDetailView:     expand a row by passing the item object (row detail)\n *    getColumnDefinition:  get the column definitions\n *    getExpandedRows:      get all the expanded rows\n *    getFilterItem:        takes in the item we are filtering and if it is an expanded row returns it's parents row to filter on\n *    getOptions:           get current plugin options\n *    resizeDetailView:     resize a row detail view, it will auto-calculate the number of rows it needs\n *    saveDetailView:       save a row detail view content by passing the row object\n *    setOptions:           set or change some of the plugin options\n *\n * THE PLUGIN EXPOSES THE FOLLOWING SLICK EVENTS:\n *    onAsyncResponse:  This event must be used with the \"notify\" by the end user once the Asynchronous Server call returns the item detail\n *      Event args:\n *        item:         Item detail returned from the async server call\n *        detailView:   An explicit view to use instead of template (Optional)\n *\n *    onAsyncEndUpdate: Fired when the async response finished\n *      Event args:\n *        grid:         Reference to the grid.\n *        item:         Item data context\n *\n *    onBeforeRowDetailToggle: Fired before the row detail gets toggled\n *      Event args:\n *        grid:         Reference to the grid.\n *        item:         Item data context\n *\n *    onAfterRowDetailToggle: Fired after the row detail gets toggled\n *      Event args:\n *        grid:         Reference to the grid.\n *        item:         Item data context\n *        expandedRows: Array of the Expanded Rows\n *\n *    onRowOutOfViewportRange: Fired after a row becomes out of viewport range (user can't see the row anymore)\n *      Event args:\n *        grid:         Reference to the grid.\n *        item:         Item data context\n *        rowId:        Id of the Row object (datacontext) in the Grid\n *        rowIndex:     Index of the Row in the Grid\n *        expandedRows: Array of the Expanded Rows\n *        rowIdsOutOfViewport: Array of the Out of viewport Range Rows\n *\n *    onRowBackToViewportRange: Fired after the row detail gets toggled\n *      Event args:\n *        grid:         Reference to the grid.\n *        item:         Item data context\n *        rowId:        Id of the Row object (datacontext) in the Grid\n *        rowIndex:     Index of the Row in the Grid\n *        expandedRows: Array of the Expanded Rows\n *        rowIdsOutOfViewport: Array of the Out of viewport Range Rows\n */\nvar SlickRowDetailView = /** @class */ (function () {\n    /** Constructor of the Row Detail View Plugin which accepts optional options */\n    function SlickRowDetailView(options) {\n        // --\n        // public API\n        this.pluginName = 'RowDetailView';\n        this.onAsyncResponse = new SlickEvent();\n        this.onAsyncEndUpdate = new SlickEvent();\n        this.onAfterRowDetailToggle = new SlickEvent();\n        this.onBeforeRowDetailToggle = new SlickEvent();\n        this.onRowBackToViewportRange = new SlickEvent();\n        this.onRowOutOfViewportRange = new SlickEvent();\n        this._gridUid = '';\n        this._dataViewIdProperty = 'id';\n        this._expandableOverride = null;\n        this._lastRange = null;\n        this._expandedRows = [];\n        this._outsideRange = 5;\n        this._visibleRenderedCellCount = 0;\n        this._defaults = {\n            columnId: '_detail_selector',\n            cssClass: 'detailView-toggle',\n            expandedClass: undefined,\n            collapsedClass: undefined,\n            keyPrefix: '_',\n            loadOnce: false,\n            collapseAllOnSort: true,\n            saveDetailViewOnScroll: true,\n            singleRowExpand: false,\n            useSimpleViewportCalc: false,\n            alwaysRenderColumn: true,\n            toolTip: '',\n            width: 30,\n            maxRows: undefined\n        };\n        this._keyPrefix = this._defaults.keyPrefix;\n        this._gridRowBuffer = 0;\n        this._rowIdsOutOfViewport = [];\n        this._options = Utils.extend(true, {}, this._defaults, options);\n        this._eventHandler = new SlickEventHandler();\n        // user could override the expandable icon logic from within the options or after instantiating the plugin\n        if (typeof this._options.expandableOverride === 'function') {\n            this.expandableOverride(this._options.expandableOverride);\n        }\n    }\n    /**\n     * Initialize the plugin, which requires user to pass the SlickGrid Grid object\n     * @param grid: SlickGrid Grid object\n     */\n    SlickRowDetailView.prototype.init = function (grid) {\n        var _this = this;\n        var _a, _b;\n        if (!grid) {\n            throw new Error('RowDetailView Plugin requires the Grid instance to be passed as argument to the \"init()\" method');\n        }\n        this._grid = grid;\n        this._gridUid = grid.getUID();\n        this._gridOptions = grid.getOptions() || {};\n        this._dataView = this._grid.getData();\n        this._keyPrefix = (_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.keyPrefix) !== null && _b !== void 0 ? _b : '_';\n        // Update the minRowBuffer so that the view doesn't disappear when it's at top of screen + the original default 3\n        this._gridRowBuffer = this._gridOptions.minRowBuffer;\n        this._gridOptions.minRowBuffer = this._options.panelRows + 3;\n        this._eventHandler\n            .subscribe(this._grid.onClick, this.handleClick.bind(this))\n            .subscribe(this._grid.onScroll, this.handleScroll.bind(this));\n        // Sort will, by default, Collapse all of the open items (unless user implements his own onSort which deals with open row and padding)\n        if (this._options.collapseAllOnSort) {\n            this._eventHandler.subscribe(this._grid.onSort, this.collapseAll.bind(this));\n            this._expandedRows = [];\n            this._rowIdsOutOfViewport = [];\n        }\n        this._eventHandler.subscribe(this._dataView.onRowCountChanged, function () {\n            _this._grid.updateRowCount();\n            _this._grid.render();\n        });\n        this._eventHandler.subscribe(this._dataView.onRowsChanged, function (_e, a) {\n            _this._grid.invalidateRows(a.rows);\n            _this._grid.render();\n        });\n        // subscribe to the onAsyncResponse so that the plugin knows when the user server side calls finished\n        this.subscribeToOnAsyncResponse();\n        // after data is set, let's get the DataView Id Property name used (defaults to \"id\")\n        this._eventHandler.subscribe(this._dataView.onSetItemsCalled, function () {\n            var _a, _b;\n            _this._dataViewIdProperty = (_b = (_a = _this._dataView) === null || _a === void 0 ? void 0 : _a.getIdPropertyName()) !== null && _b !== void 0 ? _b : 'id';\n        });\n        // if we use the alternative & simpler calculation of the out of viewport range\n        // we will need to know how many rows are rendered on the screen and we need to wait for grid to be rendered\n        // unfortunately there is no triggered event for knowing when grid is finished, so we use 250ms delay and it's typically more than enough\n        if (this._options.useSimpleViewportCalc) {\n            this._eventHandler.subscribe(this._grid.onRendered, function (_e, args) {\n                if (args === null || args === void 0 ? void 0 : args.endRow) {\n                    _this._visibleRenderedCellCount = args.endRow - args.startRow;\n                }\n            });\n        }\n    };\n    /** destroy the plugin and it's events */\n    SlickRowDetailView.prototype.destroy = function () {\n        this._eventHandler.unsubscribeAll();\n        this.onAsyncResponse.unsubscribe();\n        this.onAsyncEndUpdate.unsubscribe();\n        this.onAfterRowDetailToggle.unsubscribe();\n        this.onBeforeRowDetailToggle.unsubscribe();\n        this.onRowOutOfViewportRange.unsubscribe();\n        this.onRowBackToViewportRange.unsubscribe();\n    };\n    /** Get current plugin options */\n    SlickRowDetailView.prototype.getOptions = function () {\n        return this._options;\n    };\n    /** set or change some of the plugin options */\n    SlickRowDetailView.prototype.setOptions = function (options) {\n        var _a;\n        this._options = Utils.extend(true, {}, this._options, options);\n        if ((_a = this._options) === null || _a === void 0 ? void 0 : _a.singleRowExpand) {\n            this.collapseAll();\n        }\n    };\n    /** Find a value in an array and return the index when (or -1 when not found) */\n    SlickRowDetailView.prototype.arrayFindIndex = function (sourceArray, value) {\n        if (Array.isArray(sourceArray)) {\n            for (var i = 0; i < sourceArray.length; i++) {\n                if (sourceArray[i] === value) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    };\n    /** Handle mouse click event */\n    SlickRowDetailView.prototype.handleClick = function (e, args) {\n        var dataContext = this._grid.getDataItem(args.row);\n        if (!this.checkExpandableOverride(args.row, dataContext, this._grid)) {\n            return;\n        }\n        // clicking on a row select checkbox\n        if (this._options.useRowClick || this._grid.getColumns()[args.cell]['id'] === this._options.columnId && e.target.classList.contains(this._options.cssClass || '')) {\n            // if editing, try to commit\n            if (this._grid.getEditorLock().isActive() && !this._grid.getEditorLock().commitCurrentEdit()) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                return;\n            }\n            // trigger an event before toggling\n            this.onBeforeRowDetailToggle.notify({\n                grid: this._grid,\n                item: dataContext\n            }, e, this);\n            this.toggleRowSelection(args.row, dataContext);\n            // trigger an event after toggling\n            this.onAfterRowDetailToggle.notify({\n                grid: this._grid,\n                item: dataContext,\n                expandedRows: this._expandedRows,\n            }, e, this);\n            e.stopPropagation();\n            e.stopImmediatePropagation();\n        }\n    };\n    /** If we scroll save detail views that go out of cache range */\n    SlickRowDetailView.prototype.handleScroll = function () {\n        if (this._options.useSimpleViewportCalc) {\n            this.calculateOutOfRangeViewsSimplerVersion();\n        }\n        else {\n            this.calculateOutOfRangeViews();\n        }\n    };\n    /** Calculate when expanded rows become out of view range */\n    SlickRowDetailView.prototype.calculateOutOfRangeViews = function () {\n        var _this = this;\n        var scrollDir = '';\n        if (this._grid) {\n            var renderedRange_1 = this._grid.getRenderedRange();\n            // Only check if we have expanded rows\n            if (this._expandedRows.length > 0) {\n                // Assume scroll direction is down by default.\n                scrollDir = 'DOWN';\n                if (this._lastRange) {\n                    // Some scrolling isn't anything as the range is the same\n                    if (this._lastRange.top === renderedRange_1.top && this._lastRange.bottom === renderedRange_1.bottom) {\n                        return;\n                    }\n                    // If our new top is smaller we are scrolling up\n                    if (this._lastRange.top > renderedRange_1.top ||\n                        // Or we are at very top but our bottom is increasing\n                        (this._lastRange.top === 0 && renderedRange_1.top === 0) && this._lastRange.bottom > renderedRange_1.bottom) {\n                        scrollDir = 'UP';\n                    }\n                }\n            }\n            this._expandedRows.forEach(function (row) {\n                var _a, _b;\n                var rowIndex = (_b = (_a = _this._dataView) === null || _a === void 0 ? void 0 : _a.getRowById(row[_this._dataViewIdProperty])) !== null && _b !== void 0 ? _b : 0;\n                var rowPadding = row[\"\".concat(_this._keyPrefix, \"sizePadding\")];\n                var rowOutOfRange = _this.arrayFindIndex(_this._rowIdsOutOfViewport, row[_this._dataViewIdProperty]) >= 0;\n                if (scrollDir === 'UP') {\n                    // save the view when asked\n                    if (_this._options.saveDetailViewOnScroll) {\n                        // If the bottom item within buffer range is an expanded row save it.\n                        if (rowIndex >= renderedRange_1.bottom - _this._gridRowBuffer) {\n                            _this.saveDetailView(row);\n                        }\n                    }\n                    // If the row expanded area is within the buffer notify that it is back in range\n                    if (rowOutOfRange && rowIndex - _this._outsideRange < renderedRange_1.top && rowIndex >= renderedRange_1.top) {\n                        _this.notifyBackToViewportWhenDomExist(row, row[_this._dataViewIdProperty]);\n                    }\n                    // if our first expanded row is about to go off the bottom\n                    else if (!rowOutOfRange && (rowIndex + rowPadding) > renderedRange_1.bottom) {\n                        _this.notifyOutOfViewport(row, row[_this._dataViewIdProperty]);\n                    }\n                }\n                else if (scrollDir === 'DOWN') {\n                    // save the view when asked\n                    if (_this._options.saveDetailViewOnScroll) {\n                        // If the top item within buffer range is an expanded row save it.\n                        if (rowIndex <= renderedRange_1.top + _this._gridRowBuffer) {\n                            _this.saveDetailView(row);\n                        }\n                    }\n                    // If row index is i higher than bottom with some added value (To ignore top rows off view) and is with view and was our of range\n                    if (rowOutOfRange && (rowIndex + rowPadding + _this._outsideRange) > renderedRange_1.bottom && rowIndex < rowIndex + rowPadding) {\n                        _this.notifyBackToViewportWhenDomExist(row, row[_this._dataViewIdProperty]);\n                    }\n                    // if our row is outside top of and the buffering zone but not in the array of outOfVisable range notify it\n                    else if (!rowOutOfRange && rowIndex < renderedRange_1.top) {\n                        _this.notifyOutOfViewport(row, row[_this._dataViewIdProperty]);\n                    }\n                }\n            });\n            this._lastRange = renderedRange_1;\n        }\n    };\n    /** This is an alternative & more simpler version of the Calculate when expanded rows become out of view range */\n    SlickRowDetailView.prototype.calculateOutOfRangeViewsSimplerVersion = function () {\n        var _this = this;\n        if (this._grid) {\n            var renderedRange_2 = this._grid.getRenderedRange();\n            this._expandedRows.forEach(function (row) {\n                var _a;\n                var rowIndex = (_a = _this._dataView.getRowById(row[_this._dataViewIdProperty])) !== null && _a !== void 0 ? _a : -1;\n                var isOutOfVisibility = _this.checkIsRowOutOfViewportRange(rowIndex, renderedRange_2);\n                if (!isOutOfVisibility && _this.arrayFindIndex(_this._rowIdsOutOfViewport, row[_this._dataViewIdProperty]) >= 0) {\n                    _this.notifyBackToViewportWhenDomExist(row, row[_this._dataViewIdProperty]);\n                }\n                else if (isOutOfVisibility) {\n                    _this.notifyOutOfViewport(row, row[_this._dataViewIdProperty]);\n                }\n            });\n        }\n    };\n    /**\n     * Check if the row became out of visible range (when user can't see it anymore)\n     * @param rowIndex\n     * @param renderedRange from SlickGrid\n     */\n    SlickRowDetailView.prototype.checkIsRowOutOfViewportRange = function (rowIndex, renderedRange) {\n        if (Math.abs(renderedRange.bottom - this._gridRowBuffer - rowIndex) > this._visibleRenderedCellCount * 2) {\n            return true;\n        }\n        return false;\n    };\n    /** Send a notification, through \"onRowOutOfViewportRange\", that is out of the viewport range */\n    SlickRowDetailView.prototype.notifyOutOfViewport = function (item, rowId) {\n        var rowIndex = (item.rowIndex || this._dataView.getRowById(item[this._dataViewIdProperty]));\n        this.onRowOutOfViewportRange.notify({\n            grid: this._grid,\n            item: item,\n            rowId: rowId,\n            rowIndex: rowIndex,\n            expandedRows: this._expandedRows,\n            rowIdsOutOfViewport: this.syncOutOfViewportArray(rowId, true)\n        }, null, this);\n    };\n    /** Send a notification, through \"onRowBackToViewportRange\", that a row came back to the viewport */\n    SlickRowDetailView.prototype.notifyBackToViewportWhenDomExist = function (item, rowId) {\n        var _this = this;\n        var rowIndex = (item.rowIndex || this._dataView.getRowById(item[this._dataViewIdProperty]));\n        setTimeout(function () {\n            // make sure View Row DOM Element really exist before notifying that it's a row that is visible again\n            if (document.querySelector(\".\".concat(_this._gridUid, \" .cellDetailView_\").concat(item[_this._dataViewIdProperty]))) {\n                _this.onRowBackToViewportRange.notify({\n                    grid: _this._grid,\n                    item: item,\n                    rowId: rowId,\n                    rowIndex: rowIndex,\n                    expandedRows: _this._expandedRows,\n                    rowIdsOutOfViewport: _this.syncOutOfViewportArray(rowId, false)\n                }, null, _this);\n            }\n        }, 100);\n    };\n    /**\n     * This function will sync the out of viewport array whenever necessary.\n     * The sync can add a row (when necessary, no need to add again if it already exist) or delete a row from the array.\n     * @param rowId: number\n     * @param isAdding: are we adding or removing a row?\n     */\n    SlickRowDetailView.prototype.syncOutOfViewportArray = function (rowId, isAdding) {\n        var arrayRowIndex = this.arrayFindIndex(this._rowIdsOutOfViewport, rowId);\n        if (isAdding && arrayRowIndex < 0) {\n            this._rowIdsOutOfViewport.push(rowId);\n        }\n        else if (!isAdding && arrayRowIndex >= 0) {\n            this._rowIdsOutOfViewport.splice(arrayRowIndex, 1);\n        }\n        return this._rowIdsOutOfViewport;\n    };\n    // Toggle between showing and hiding a row\n    SlickRowDetailView.prototype.toggleRowSelection = function (rowNumber, dataContext) {\n        if (!this.checkExpandableOverride(rowNumber, dataContext, this._grid)) {\n            return;\n        }\n        this._dataView.beginUpdate();\n        this.handleAccordionShowHide(dataContext);\n        this._dataView.endUpdate();\n    };\n    /** Collapse all of the open items */\n    SlickRowDetailView.prototype.collapseAll = function () {\n        this._dataView.beginUpdate();\n        for (var i = this._expandedRows.length - 1; i >= 0; i--) {\n            this.collapseDetailView(this._expandedRows[i], true);\n        }\n        this._dataView.endUpdate();\n    };\n    /** Colapse an Item so it is not longer seen */\n    SlickRowDetailView.prototype.collapseDetailView = function (item, isMultipleCollapsing) {\n        var _this = this;\n        if (isMultipleCollapsing === void 0) { isMultipleCollapsing = false; }\n        if (!isMultipleCollapsing) {\n            this._dataView.beginUpdate();\n        }\n        // Save the details on the collapse assuming onetime loading\n        if (this._options.loadOnce) {\n            this.saveDetailView(item);\n        }\n        item[\"\".concat(this._keyPrefix, \"collapsed\")] = true;\n        for (var idx = 1; idx <= item[\"\".concat(this._keyPrefix, \"sizePadding\")]; idx++) {\n            this._dataView.deleteItem(item[this._dataViewIdProperty] + '.' + idx);\n        }\n        item[\"\".concat(this._keyPrefix, \"sizePadding\")] = 0;\n        this._dataView.updateItem(item[this._dataViewIdProperty], item);\n        // Remove the item from the expandedRows\n        this._expandedRows = this._expandedRows.filter(function (r) {\n            return r[_this._dataViewIdProperty] !== item[_this._dataViewIdProperty];\n        });\n        if (!isMultipleCollapsing) {\n            this._dataView.endUpdate();\n        }\n    };\n    /** Expand a row given the dataview item that is to be expanded */\n    SlickRowDetailView.prototype.expandDetailView = function (item) {\n        var _a, _b, _c;\n        if ((_a = this._options) === null || _a === void 0 ? void 0 : _a.singleRowExpand) {\n            this.collapseAll();\n        }\n        item[\"\".concat(this._keyPrefix, \"collapsed\")] = false;\n        this._expandedRows.push(item);\n        // In the case something went wrong loading it the first time such a scroll of screen before loaded\n        if (!item[\"\".concat(this._keyPrefix, \"detailContent\")])\n            item[\"\".concat(this._keyPrefix, \"detailViewLoaded\")] = false;\n        // display pre-loading template\n        if (!item[\"\".concat(this._keyPrefix, \"detailViewLoaded\")] || this._options.loadOnce !== true) {\n            item[\"\".concat(this._keyPrefix, \"detailContent\")] = (_c = (_b = this._options) === null || _b === void 0 ? void 0 : _b.preTemplate) === null || _c === void 0 ? void 0 : _c.call(_b, item);\n        }\n        else {\n            this.onAsyncResponse.notify({\n                item: item,\n                itemDetail: item,\n                detailView: item[\"\".concat(this._keyPrefix, \"detailContent\")]\n            }, undefined, this);\n            this.applyTemplateNewLineHeight(item);\n            this._dataView.updateItem(item[this._dataViewIdProperty], item);\n            return;\n        }\n        this.applyTemplateNewLineHeight(item);\n        this._dataView.updateItem(item[this._dataViewIdProperty], item);\n        // async server call\n        this._options.process(item);\n    };\n    /** Saves the current state of the detail view */\n    SlickRowDetailView.prototype.saveDetailView = function (item) {\n        var view = document.querySelector(\".\".concat(this._gridUid, \" .innerDetailView_\").concat(item[this._dataViewIdProperty]));\n        if (view) {\n            var html = view.innerHTML;\n            if (html !== undefined) {\n                item[\"\".concat(this._keyPrefix, \"detailContent\")] = html;\n            }\n        }\n    };\n    /**\n     * subscribe to the onAsyncResponse so that the plugin knows when the user server side calls finished\n     * the response has to be as \"args.item\" (or \"args.itemDetail\") with it's data back\n     */\n    SlickRowDetailView.prototype.subscribeToOnAsyncResponse = function () {\n        var _this = this;\n        this.onAsyncResponse.subscribe(function (e, args) {\n            var _a, _b;\n            if (!args || (!args.item && !args.itemDetail)) {\n                throw 'Slick.RowDetailView plugin requires the onAsyncResponse() to supply \"args.item\" property.';\n            }\n            // we accept item/itemDetail, just get the one which has data\n            var itemDetail = args.item || args.itemDetail;\n            // If we just want to load in a view directly we can use detailView property to do so\n            if (args.detailView) {\n                itemDetail[\"\".concat(_this._keyPrefix, \"detailContent\")] = args.detailView;\n            }\n            else {\n                itemDetail[\"\".concat(_this._keyPrefix, \"detailContent\")] = (_b = (_a = _this._options) === null || _a === void 0 ? void 0 : _a.postTemplate) === null || _b === void 0 ? void 0 : _b.call(_a, itemDetail);\n            }\n            itemDetail[\"\".concat(_this._keyPrefix, \"detailViewLoaded\")] = true;\n            _this._dataView.updateItem(itemDetail[_this._dataViewIdProperty], itemDetail);\n            // trigger an event once the post template is finished loading\n            _this.onAsyncEndUpdate.notify({\n                'grid': _this._grid,\n                'item': itemDetail,\n                'itemDetail': itemDetail\n            }, e, _this);\n        });\n    };\n    /** When row is getting toggled, we will handle the action of collapsing/expanding */\n    SlickRowDetailView.prototype.handleAccordionShowHide = function (item) {\n        if (item) {\n            if (!item[\"\".concat(this._keyPrefix, \"collapsed\")]) {\n                this.collapseDetailView(item);\n            }\n            else {\n                this.expandDetailView(item);\n            }\n        }\n    };\n    //////////////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////////////\n    /** Get the Row Detail padding (which are the rows dedicated to the detail panel) */\n    SlickRowDetailView.prototype.getPaddingItem = function (parent, offset) {\n        var item = {};\n        for (var prop in this._dataView) {\n            item[prop] = null;\n        }\n        item[this._dataViewIdProperty] = parent[this._dataViewIdProperty] + '.' + offset;\n        // additional hidden padding metadata fields\n        item[\"\".concat(this._keyPrefix, \"collapsed\")] = true;\n        item[\"\".concat(this._keyPrefix, \"isPadding\")] = true;\n        item[\"\".concat(this._keyPrefix, \"parent\")] = parent;\n        item[\"\".concat(this._keyPrefix, \"offset\")] = offset;\n        return item;\n    };\n    ;\n    //////////////////////////////////////////////////////////////\n    // create the detail ctr node. this belongs to the dev & can be custom-styled as per\n    //////////////////////////////////////////////////////////////\n    SlickRowDetailView.prototype.applyTemplateNewLineHeight = function (item) {\n        var _a;\n        // the height is calculated by the template row count (how many line of items does the template view have)\n        var rowCount = this._options.panelRows;\n        // calculate padding requirements based on detail-content..\n        // ie. worst-case: create an invisible dom node now & find it's height.\n        var lineHeight = 13; // we know cuz we wrote the custom css init ;)\n        item[\"\".concat(this._keyPrefix, \"sizePadding\")] = Math.ceil(((rowCount * 2) * lineHeight) / this._gridOptions.rowHeight);\n        item[\"\".concat(this._keyPrefix, \"height\")] = (item[\"\".concat(this._keyPrefix, \"sizePadding\")] * this._gridOptions.rowHeight);\n        var idxParent = (_a = this._dataView.getIdxById(item[this._dataViewIdProperty])) !== null && _a !== void 0 ? _a : 0;\n        for (var idx = 1; idx <= item[\"\".concat(this._keyPrefix, \"sizePadding\")]; idx++) {\n            this._dataView.insertItem(idxParent + idx, this.getPaddingItem(item, idx));\n        }\n    };\n    /** Get the Column Definition of the first column dedicated to toggling the Row Detail View */\n    SlickRowDetailView.prototype.getColumnDefinition = function () {\n        return {\n            id: this._options.columnId,\n            name: '',\n            toolTip: this._options.toolTip,\n            field: 'sel',\n            width: this._options.width,\n            resizable: false,\n            sortable: false,\n            alwaysRenderColumn: this._options.alwaysRenderColumn,\n            cssClass: this._options.cssClass,\n            formatter: this.detailSelectionFormatter.bind(this)\n        };\n    };\n    /** return the currently expanded rows */\n    SlickRowDetailView.prototype.getExpandedRows = function () {\n        return this._expandedRows;\n    };\n    /** The Formatter of the toggling icon of the Row Detail */\n    SlickRowDetailView.prototype.detailSelectionFormatter = function (row, _cell, _val, _column, dataContext, grid) {\n        if (!this.checkExpandableOverride(row, dataContext, grid)) {\n            return '';\n        }\n        else {\n            if (dataContext[\"\".concat(this._keyPrefix, \"collapsed\")] == undefined) {\n                dataContext[\"\".concat(this._keyPrefix, \"collapsed\")] = true;\n                dataContext[\"\".concat(this._keyPrefix, \"sizePadding\")] = 0; //the required number of pading rows\n                dataContext[\"\".concat(this._keyPrefix, \"height\")] = 0; //the actual height in pixels of the detail field\n                dataContext[\"\".concat(this._keyPrefix, \"isPadding\")] = false;\n                dataContext[\"\".concat(this._keyPrefix, \"parent\")] = undefined;\n                dataContext[\"\".concat(this._keyPrefix, \"offset\")] = 0;\n            }\n            if (dataContext[\"\".concat(this._keyPrefix, \"isPadding\")]) {\n                // render nothing\n            }\n            else if (dataContext[\"\".concat(this._keyPrefix, \"collapsed\")]) {\n                var collapsedClasses = this._options.cssClass + ' expand ';\n                if (this._options.collapsedClass) {\n                    collapsedClasses += this._options.collapsedClass;\n                }\n                return '<div class=\"' + collapsedClasses + '\"></div>';\n            }\n            else {\n                var html = [];\n                var rowHeight = this._gridOptions.rowHeight;\n                var outterHeight = dataContext[\"\".concat(this._keyPrefix, \"sizePadding\")] * this._gridOptions.rowHeight;\n                if (this._options.maxRows !== undefined && dataContext[\"\".concat(this._keyPrefix, \"sizePadding\")] > this._options.maxRows) {\n                    outterHeight = this._options.maxRows * rowHeight;\n                    dataContext[\"\".concat(this._keyPrefix, \"sizePadding\")] = this._options.maxRows;\n                }\n                // V313HAX:\n                // putting in an extra closing div after the closing toggle div and ommiting a\n                // final closing div for the detail ctr div causes the slickgrid renderer to\n                // insert our detail div as a new column ;) ~since it wraps whatever we provide\n                // in a generic div column container. so our detail becomes a child directly of\n                // the row not the cell. nice =)  ~no need to apply a css change to the parent\n                // slick-cell to escape the cell overflow clipping.\n                // sneaky extra </div> inserted here-----------------v\n                var expandedClasses = this._options.cssClass + ' collapse ';\n                if (this._options.expandedClass) {\n                    expandedClasses += this._options.expandedClass;\n                }\n                html.push('<div class=\"' + expandedClasses + '\"></div></div>');\n                html.push(\"<div class=\\\"dynamic-cell-detail cellDetailView_\".concat(dataContext[this._dataViewIdProperty], \"\\\" \")); //apply custom css to detail\n                html.push(\"style=\\\"height: \".concat(outterHeight, \"px;\")); //set total height of padding\n                html.push(\"top: \".concat(rowHeight, \"px\\\">\")); //shift detail below 1st row\n                html.push(\"<div class=\\\"detail-container detailViewContainer_\".concat(dataContext[this._dataViewIdProperty], \"\\\">\")); //sub ctr for custom styling\n                html.push(\"<div class=\\\"innerDetailView_\".concat(dataContext[this._dataViewIdProperty], \"\\\">\").concat(dataContext[\"\".concat(this._keyPrefix, \"detailContent\")], \"</div></div>\"));\n                // omit a final closing detail container </div> that would come next\n                return html.join('');\n            }\n        }\n        return '';\n    };\n    /** Resize the Row Detail View */\n    SlickRowDetailView.prototype.resizeDetailView = function (item) {\n        var _a;\n        if (!item) {\n            return;\n        }\n        // Grad each of the DOM elements\n        var mainContainer = document.querySelector(\".\".concat(this._gridUid, \" .detailViewContainer_\").concat(item[this._dataViewIdProperty]));\n        var cellItem = document.querySelector(\".\".concat(this._gridUid, \" .cellDetailView_\").concat(item[this._dataViewIdProperty]));\n        var inner = document.querySelector(\".\".concat(this._gridUid, \" .innerDetailView_\").concat(item[this._dataViewIdProperty]));\n        if (!mainContainer || !cellItem || !inner) {\n            return;\n        }\n        for (var idx = 1; idx <= item[\"\".concat(this._keyPrefix, \"sizePadding\")]; idx++) {\n            this._dataView.deleteItem(\"\".concat(item[this._dataViewIdProperty], \".\").concat(idx));\n        }\n        var rowHeight = this._gridOptions.rowHeight; // height of a row\n        var lineHeight = 13; // we know cuz we wrote the custom css innit ;)\n        // remove the height so we can calculate the height\n        mainContainer.style.minHeight = '';\n        // Get the scroll height for the main container so we know the actual size of the view\n        var itemHeight = mainContainer.scrollHeight;\n        // Now work out how many rows\n        var rowCount = Math.ceil(itemHeight / rowHeight);\n        item[\"\".concat(this._keyPrefix, \"sizePadding\")] = Math.ceil(((rowCount * 2) * lineHeight) / rowHeight);\n        item[\"\".concat(this._keyPrefix, \"height\")] = itemHeight;\n        var outterHeight = (item[\"\".concat(this._keyPrefix, \"sizePadding\")] * rowHeight);\n        if (this._options.maxRows !== undefined && item[\"\".concat(this._keyPrefix, \"sizePadding\")] > this._options.maxRows) {\n            outterHeight = this._options.maxRows * rowHeight;\n            item[\"\".concat(this._keyPrefix, \"sizePadding\")] = this._options.maxRows;\n        }\n        // If the padding is now more than the original minRowBuff we need to increase it\n        if (this._grid.getOptions().minRowBuffer < item[\"\".concat(this._keyPrefix, \"sizePadding\")]) {\n            // Update the minRowBuffer so that the view doesn't disappear when it's at top of screen + the original default 3\n            this._grid.getOptions().minRowBuffer = item[\"\".concat(this._keyPrefix, \"sizePadding\")] + 3;\n        }\n        mainContainer.setAttribute('style', 'min-height: ' + item[\"\".concat(this._keyPrefix, \"height\")] + 'px');\n        if (cellItem)\n            cellItem.setAttribute('style', 'height: ' + outterHeight + 'px; top:' + rowHeight + 'px');\n        var idxParent = (_a = this._dataView.getIdxById(item[this._dataViewIdProperty])) !== null && _a !== void 0 ? _a : 0;\n        for (var idx = 1; idx <= item[\"\".concat(this._keyPrefix, \"sizePadding\")]; idx++) {\n            this._dataView.insertItem(idxParent + idx, this.getPaddingItem(item, idx));\n        }\n        // Lastly save the updated state\n        this.saveDetailView(item);\n    };\n    /** Takes in the item we are filtering and if it is an expanded row returns it's parents row to filter on */\n    SlickRowDetailView.prototype.getFilterItem = function (item) {\n        if (item[\"\".concat(this._keyPrefix, \"isPadding\")] && item[\"\".concat(this._keyPrefix, \"parent\")]) {\n            item = item[\"\".concat(this._keyPrefix, \"parent\")];\n        }\n        return item;\n    };\n    SlickRowDetailView.prototype.checkExpandableOverride = function (row, dataContext, grid) {\n        if (typeof this._expandableOverride === 'function') {\n            return this._expandableOverride(row, dataContext, grid);\n        }\n        return true;\n    };\n    /**\n     * Method that user can pass to override the default behavior or making every row an expandable row.\n     * In order word, user can choose which rows to be an available row detail (or not) by providing his own logic.\n     * @param overrideFn: override function callback\n     */\n    SlickRowDetailView.prototype.expandableOverride = function (overrideFn) {\n        this._expandableOverride = overrideFn;\n    };\n    return SlickRowDetailView;\n}());\nexports.SlickRowDetailView = SlickRowDetailView;\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n    Utils.extend(true, window, {\n        Slick: {\n            Plugins: {\n                RowDetailView: SlickRowDetailView\n            }\n        }\n    });\n}\n"],
  "mappings": "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",
  "names": ["SlickRowDetailView", "_a", "_b"]
}
