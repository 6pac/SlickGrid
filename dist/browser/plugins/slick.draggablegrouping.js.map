{
  "version": 3,
  "sources": ["../../../src/plugins/slick.draggablegrouping.js"],
  "sourcesContent": ["import { BindingEventService as BindingEventService_, Event as SlickEvent_, EventHandler as EventHandler_, Utils as Utils_ } from '../slick.core';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : EventHandler_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n/**\n *\n * Draggable Grouping contributed by:  Muthukumar Selvarasu\n *  muthukumar{dot}se{at}gmail{dot}com\n *  github.com/muthukumarse/Slickgrid\n *\n * NOTES:\n *     This plugin provides the Draggable Grouping feature\n * A plugin to add Draggable Grouping feature.\n *\n * USAGE:\n *\n * Add the plugin .js & .css files and register it with the grid.\n *\n *\n * The plugin expose the following methods:\n *    destroy: used to destroy the plugin\n *    setDroppedGroups: provide option to set default grouping on loading\n *    clearDroppedGroups: provide option to clear grouping\n *    getSetupColumnReorder: its function to setup draggable feature agains Header Column, should be passed on grid option. Also possible to pass custom function\n *\n *\n * The plugin expose the following event(s):\n *    onGroupChanged: pass the grouped columns to who subscribed.\n *\n * @param options {Object} Options:\n *    deleteIconCssClass:  an extra CSS class to add to the delete button (default undefined), if deleteIconCssClass && deleteIconImage undefined then slick-groupby-remove-image class will be added\n *    deleteIconImage:     a url to the delete button image (default undefined)\n *    groupIconCssClass:   an extra CSS class to add to the grouping field hint  (default undefined)\n *    groupIconImage:      a url to the grouping field hint image (default undefined)\n *    dropPlaceHolderText:      option to specify set own placeholder note text\n *\n */\n\nexport function DraggableGrouping(options) {\n    var _grid;\n    var _gridUid;\n    var _gridColumns;\n    var _dataView;\n    var _dropzoneElm;\n    var _droppableInstance;\n    var dropzonePlaceholder;\n    var groupToggler;\n    var _defaults = {\n    };\n  var onGroupChanged = new SlickEvent();\n  var _bindingEventService = new BindingEventService();\n  var _handler = new EventHandler();\n    var _sortableLeftInstance;\n    var _sortableRightInstance;\n\n    /**\n     * Initialize plugin.\n     */\n    function init(grid) {\n      options = Utils.extend(true, {}, _defaults, options);\n      _grid = grid;\n      _gridUid = _grid.getUID();\n      _gridColumns = _grid.getColumns();\n      _dataView = _grid.getData();\n      _dropzoneElm = grid.getPreHeaderPanel();\n      _dropzoneElm.classList.add('slick-dropzone');\n\n      var dropPlaceHolderText = options.dropPlaceHolderText || 'Drop a column header here to group by the column';\n\n      dropzonePlaceholder = document.createElement('div')\n      dropzonePlaceholder.className = 'slick-placeholder';\n      dropzonePlaceholder.textContent = dropPlaceHolderText;\n\n      groupToggler = document.createElement('div');\n      groupToggler.className = 'slick-group-toggle-all expanded';\n      groupToggler.style.display = 'none';\n\n      _dropzoneElm.appendChild(dropzonePlaceholder);\n      _dropzoneElm.appendChild(groupToggler);\n\n      setupColumnDropbox();\n\n\n      _handler.subscribe(_grid.onHeaderCellRendered, function (e, args) {\n        var column = args.column;\n        var node = args.node;\n        if (!Utils.isEmptyObject(column.grouping) && node) {\n          node.style.cursor = 'pointer'; // add the pointer cursor on each column title\n\n          // also optionally add an icon beside each column title that can be dragged\n          if (options.groupIconCssClass || options.groupIconImage) {\n            const groupableIconElm = document.createElement('span');\n            groupableIconElm.className = 'slick-column-groupable';\n            if (options.groupIconCssClass) {\n              groupableIconElm.classList.add(...options.groupIconCssClass.split(' '));\n            }\n            if (options.groupIconImage) {\n              groupableIconElm.style.background = \"url(\" + options.groupIconImage + \") no-repeat center center\";\n            }\n            node.appendChild(groupableIconElm);\n          }\n        }\n      });\n\n      for (var i = 0; i < _gridColumns.length; i++) {\n        var columnId = _gridColumns[i].field;\n        _grid.updateColumnHeader(columnId);\n      }\n\n    }\n\n    function setupColumnReorder(grid, headers, _headerColumnWidthDiff, setColumns, setupColumnResize, _columns, getColumnIndex, _uid, trigger) {\n      const dropzoneElm = grid.getPreHeaderPanel();\n\n      var sortableOptions = {\n        animation: 50,\n        // chosenClass: 'slick-header-column-active',\n        ghostClass: \"slick-sortable-placeholder\",\n        draggable: '.slick-header-column',\n        dataIdAttr: 'data-id',\n        group: {\n          name: 'shared',\n          pull: 'clone',\n          put: false,\n        },\n        revertClone: true,\n        // filter: function (_e, target) {\n        //   // block column from being able to be dragged if it's already a grouped column\n        //   // NOTE: need to disable for now since it also blocks the column reordering\n        //   return columnsGroupBy.some(c => c.id === target.getAttribute('data-id'));\n        // },\n        onStart: function () {\n          dropzoneElm.classList.add('slick-dropzone-hover');\n          dropzoneElm.classList.add('slick-dropzone-placeholder-hover');\n          const draggablePlaceholderElm = dropzoneElm.querySelector('.slick-placeholder');\n\n          draggablePlaceholderElm.style.display = 'inline-block';\n          groupToggler.style.display = 'none';\n\n          const droppedGroupingElms = dropzoneElm.querySelectorAll('.slick-dropped-grouping');\n          droppedGroupingElms.forEach(droppedGroupingElm => droppedGroupingElm.style.display = 'none');\n        },\n        onEnd: function (e) {\n          const draggablePlaceholderElm = dropzoneElm.querySelector('.slick-placeholder');\n          dropzoneElm.classList.remove('slick-dropzone-hover');\n          draggablePlaceholderElm.classList.remove('slick-dropzone-placeholder-hover');\n\n\n          if (dropzonePlaceholder) {\n            dropzonePlaceholder.style.display = 'none';\n          }\n          if (draggablePlaceholderElm) {\n            draggablePlaceholderElm.parentElement && draggablePlaceholderElm.parentElement.classList.remove('slick-dropzone-placeholder-hover');\n          }\n\n          const droppedGroupingElms = dropzoneElm.querySelectorAll('.slick-dropped-grouping');\n          droppedGroupingElms.forEach(droppedGroupingElm => droppedGroupingElm.style.display = 'inline-flex');\n\n          if (droppedGroupingElms.length) {\n            if (draggablePlaceholderElm) {\n              draggablePlaceholderElm.style.display = 'none';\n            }\n            groupToggler.style.display = 'inline-block';\n          }\n\n          if (!grid.getEditorLock().commitCurrentEdit()) {\n            return;\n          }\n\n          const reorderedIds = _sortableLeftInstance && _sortableLeftInstance.toArray() || [];\n\n        // when frozen columns are used, headers has more than one entry and we need the ids from all of them.\n        // though there is only really a left and right header, this will work even if that should change.\n          if (headers.length > 1) {\n            const ids = _sortableRightInstance && _sortableRightInstance.toArray() || [];\n\n          // Note: the loop below could be simplified with:\n          // reorderedIds.push.apply(reorderedIds,ids);\n          // However, the loop is more in keeping with way-backward compatibility\n            for (const id of ids) {\n              reorderedIds.push(id);\n            }\n          }\n\n          const finalReorderedColumns = [];\n          const reorderedColumns = grid.getColumns();\n          for (const reorderedId of reorderedIds) {\n            finalReorderedColumns.push(reorderedColumns[getColumnIndex(reorderedId)]);\n          }\n          setColumns(finalReorderedColumns);\n          trigger(grid.onColumnsReordered, { grid });\n          e.stopPropagation();\n          setupColumnResize();\n        }\n      }\n\n      _sortableLeftInstance = Sortable.create(document.querySelector(`.${grid.getUID()} .slick-header-columns.slick-header-columns-left`), sortableOptions);\n      _sortableRightInstance = Sortable.create(document.querySelector(`.${grid.getUID()} .slick-header-columns.slick-header-columns-right`), sortableOptions);\n\n      return {\n        sortableLeftInstance: _sortableLeftInstance,\n        sortableRightInstance: _sortableRightInstance\n      };\n    }\n\n    /**\n     * Destroy plugin.\n     */\n    function destroy() {\n      if (_sortableLeftInstance && _sortableLeftInstance.el) {\n        _sortableLeftInstance.destroy();\n      }\n      if (_sortableRightInstance && _sortableRightInstance.el) {\n        _sortableRightInstance.destroy();\n      }\n      onGroupChanged.unsubscribe();\n      _handler.unsubscribeAll();\n      _bindingEventService.unbindAll();\n      Utils.emptyElement(document.querySelector(`.${_gridUid} .slick-preheader-panel`));\n    }\n\n    function addDragOverDropzoneListeners() {\n      const draggablePlaceholderElm = _dropzoneElm.querySelector('.slick-placeholder');\n\n      if (draggablePlaceholderElm) {\n        _bindingEventService.bind(draggablePlaceholderElm, 'dragover', (e) => e.preventDefault);\n        _bindingEventService.bind(draggablePlaceholderElm, 'dragenter', () => _dropzoneElm.classList.add('slick-dropzone-hover'));\n        _bindingEventService.bind(draggablePlaceholderElm, 'dragleave', () => _dropzoneElm.classList.remove('slick-dropzone-hover'));\n      }\n    }\n\n    function setupColumnDropbox() {\n      const dropzoneElm = _dropzoneElm;\n\n      _droppableInstance = Sortable.create(dropzoneElm, {\n        group: 'shared',\n        // chosenClass: 'slick-header-column-active',\n        ghostClass: 'slick-droppable-sortitem-hover',\n        draggable: '.slick-dropped-grouping',\n        dragoverBubble: true,\n        onAdd: (evt) => {\n          const el = evt.item;\n          const elId = el.getAttribute('id');\n          if (elId && elId.replace(_gridUid, '')) {\n            handleGroupByDrop(dropzoneElm, (Sortable.utils).clone(evt.item));\n          }\n          evt.clone.style.opacity = '.5';\n          el.parentNode && el.parentNode.removeChild(el);\n        },\n        onUpdate: () => {\n          const sortArray = _droppableInstance && _droppableInstance.toArray() || [];\n          let newGroupingOrder = [];\n          for (var i = 0, l = sortArray.length; i < l; i++) {\n            for (var a = 0, b = columnsGroupBy.length; a < b; a++) {\n              if (columnsGroupBy[a].id == sortArray[i]) {\n                newGroupingOrder.push(columnsGroupBy[a]);\n                break;\n              }\n            }\n          }\n          columnsGroupBy = newGroupingOrder;\n          updateGroupBy(\"sort-group\");\n        },\n      });\n\n      // Sortable doesn't have onOver, we need to implement it ourselves\n      addDragOverDropzoneListeners();\n\n      if (groupToggler) {\n        _bindingEventService.bind(groupToggler, 'click', ((event) => {\n          const target = event.target;\n          toggleGroupToggler(target, target && target.classList.contains('expanded'));\n        }));\n      }\n    }\n\n\n    var columnsGroupBy = [];\n\n    function handleGroupByDrop(containerElm, headerColumnElm) {\n      const headerColDataId = headerColumnElm.getAttribute('data-id');\n      const columnId = headerColDataId && headerColDataId.replace(_gridUid, '');\n      let columnAllowed = true;\n      for (const colGroupBy of columnsGroupBy) {\n        if (colGroupBy.id === columnId) {\n          columnAllowed = false;\n        }\n      }\n\n      if (columnAllowed) {\n        for (const col of _gridColumns) {\n          if (col.id === columnId) {\n            if (col.grouping && !Utils.isEmptyObject(col.grouping)) {\n              const columnNameElm = headerColumnElm.querySelector('.slick-column-name');\n              const entryElm = document.createElement('div');\n              entryElm.id = `${_gridUid}_${col.id}_entry`;\n              entryElm.className = 'slick-dropped-grouping';\n              entryElm.dataset.id = `${col.id}`;\n\n              const groupTextElm = document.createElement('div');\n              groupTextElm.className = 'slick-dropped-grouping-title';\n              groupTextElm.style.display = 'inline-flex';\n              groupTextElm.textContent = columnNameElm ? columnNameElm.textContent : headerColumnElm.textContent;\n              entryElm.appendChild(groupTextElm);\n\n              // delete icon\n              const groupRemoveIconElm = document.createElement('div');\n              groupRemoveIconElm.className = 'slick-groupby-remove';\n              if (options.deleteIconCssClass) {\n                groupRemoveIconElm.classList.add(...options.deleteIconCssClass.split(' '));\n              }\n              if (options.deleteIconImage) {\n                groupRemoveIconElm.classList.add(...options.deleteIconImage.split(' '));\n              }\n              if (!options.deleteIconCssClass) {\n                groupRemoveIconElm.classList.add('slick-groupby-remove-icon');\n              }\n              if (!options.deleteIconCssClass && !options.deleteIconImage) {\n                groupRemoveIconElm.classList.add('slick-groupby-remove-image');\n              }\n\n              // sorting icons when enabled\n              if (options && options.hideGroupSortIcons !== true && col.sortable) {\n                if (col.grouping && col.grouping.sortAsc === undefined) {\n                  col.grouping.sortAsc = true;\n                }\n              }\n\n              entryElm.appendChild(groupRemoveIconElm);\n              entryElm.appendChild(document.createElement('div'));\n              containerElm.appendChild(entryElm);\n\n              addColumnGroupBy(col);\n              addGroupByRemoveClickHandler(col.id, groupRemoveIconElm, headerColumnElm, entryElm);\n            }\n          }\n        }\n        groupToggler.style.display = 'inline-block';\n      }\n    }\n\n    function addColumnGroupBy(column) {\n      columnsGroupBy.push(column);\n      updateGroupBy(\"add-group\");\n    }\n\n    function addGroupByRemoveClickHandler(id, groupRemoveIconElm, headerColumnElm, entry) {\n      _bindingEventService.bind(groupRemoveIconElm, 'click', () => {\n        const boundedElms = _bindingEventService.boundedEvents.filter(boundedEvent => boundedEvent.element === groupRemoveIconElm);\n        for (const boundedEvent of boundedElms) {\n          _bindingEventService.unbind(boundedEvent.element, 'click', boundedEvent.listener);\n        }\n        removeGroupBy(id, headerColumnElm, entry);\n      });\n    }\n\n    function setDroppedGroups(groupingInfo) {\n      const groupingInfos = Array.isArray(groupingInfo) ? groupingInfo : [groupingInfo];\n      dropzonePlaceholder.style.display = 'none';\n      for (const groupInfo of groupingInfos) {\n        const columnElm = _grid.getHeaderColumn(groupInfo);\n        handleGroupByDrop(_dropzoneElm, columnElm);\n      }\n    }\n\n    function clearDroppedGroups() {\n      columnsGroupBy = [];\n      updateGroupBy('clear-all');\n      const allDroppedGroupingElms = _dropzoneElm.querySelectorAll('.slick-dropped-grouping');\n      groupToggler.style.display = 'none';\n\n      for (const groupElm of Array.from(allDroppedGroupingElms)) {\n        const groupRemoveBtnElm = _dropzoneElm.querySelector('.slick-groupby-remove');\n        groupRemoveBtnElm && groupRemoveBtnElm.remove();\n        groupElm && groupElm.remove();\n      }\n\n      // show placeholder text & hide the \"Toggle All\" when that later feature is enabled\n      dropzonePlaceholder.style.display = 'inline-block';\n    }\n\n    function removeFromArray(arr) {\n      var what, a = arguments,\n        L = a.length,\n        ax;\n      while (L > 1 && arr.length) {\n        what = a[--L];\n        while ((ax = arr.indexOf(what)) != -1) {\n          arr.splice(ax, 1);\n        }\n      }\n      return arr;\n    }\n\n    function removeGroupBy(id, _column, entry) {\n      entry.remove();\n      var groupby = [];\n      _gridColumns.forEach(function (e) {\n        groupby[e.id] = e;\n      });\n      removeFromArray(columnsGroupBy, groupby[id]);\n      if (columnsGroupBy.length === 0) {\n        dropzonePlaceholder.style = 'block';\n        groupToggler.style.display = 'none';\n      }\n      updateGroupBy(\"remove-group\");\n    }\n\n    function toggleGroupToggler(targetElm, collapsing = true, shouldExecuteDataViewCommand = true) {\n      if (targetElm) {\n        if (collapsing === true) {\n          targetElm.classList.add('collapsed');\n          targetElm.classList.remove('expanded');\n          if (shouldExecuteDataViewCommand) {\n            _dataView.collapseAllGroups();\n          }\n        } else {\n          targetElm.classList.remove('collapsed');\n          targetElm.classList.add('expanded');\n          if (shouldExecuteDataViewCommand) {\n            _dataView.expandAllGroups();\n          }\n        }\n      }\n    }\n\n    function updateGroupBy(originator) {\n      if (columnsGroupBy.length === 0) {\n        _dataView.setGrouping([]);\n        onGroupChanged.notify({ caller: originator, groupColumns: [] });\n        return;\n      }\n      var groupingArray = [];\n      columnsGroupBy.forEach(function (element) {\n        groupingArray.push(element.grouping);\n      });\n      _dataView.setGrouping(groupingArray);\n      /*\n      collapseAllGroups();\n      */\n      onGroupChanged.notify({ caller: originator, groupColumns: groupingArray });\n    }\n\n  // Public API\n  Utils.extend(this, {\n    \"init\": init,\n    \"destroy\": destroy,\n    \"pluginName\": \"DraggableGrouping\",\n\n    \"onGroupChanged\": onGroupChanged,\n    \"setDroppedGroups\": setDroppedGroups,\n    \"clearDroppedGroups\": clearDroppedGroups,\n    \"getSetupColumnReorder\": setupColumnReorder,\n  });\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      DraggableGrouping\n    }\n  });\n}\n\n"],
  "mappings": ";;;AAGA,MAAM,sBAAkC,MAAM,qBACxC,aAAyB,MAAM,OAC/B,eAA2B,MAAM,cACjC,QAAoB,MAAM;AAoCzB,WAAS,kBAAkB,SAAS;AACvC,QAAI,OACA,UACA,cACA,WACA,cACA,oBACA,qBACA,cACA,YAAY,CAChB,GACE,iBAAiB,IAAI,WAAW,GAChC,uBAAuB,IAAI,oBAAoB,GAC/C,WAAW,IAAI,aAAa,GAC1B,uBACA;AAKJ,aAAS,KAAK,MAAM;AAClB,gBAAU,MAAM,OAAO,IAAM,CAAC,GAAG,WAAW,OAAO,GACnD,QAAQ,MACR,WAAW,MAAM,OAAO,GACxB,eAAe,MAAM,WAAW,GAChC,YAAY,MAAM,QAAQ,GAC1B,eAAe,KAAK,kBAAkB,GACtC,aAAa,UAAU,IAAI,gBAAgB;AAE3C,UAAI,sBAAsB,QAAQ,uBAAuB;AAEzD,4BAAsB,SAAS,cAAc,KAAK,GAClD,oBAAoB,YAAY,qBAChC,oBAAoB,cAAc,qBAElC,eAAe,SAAS,cAAc,KAAK,GAC3C,aAAa,YAAY,mCACzB,aAAa,MAAM,UAAU,QAE7B,aAAa,YAAY,mBAAmB,GAC5C,aAAa,YAAY,YAAY,GAErC,mBAAmB,GAGnB,SAAS,UAAU,MAAM,sBAAsB,SAAU,GAAG,MAAM;AAChE,YAAI,SAAS,KAAK,QACd,OAAO,KAAK;AAChB,YAAI,CAAC,MAAM,cAAc,OAAO,QAAQ,KAAK,SAC3C,KAAK,MAAM,SAAS,WAGhB,QAAQ,qBAAqB,QAAQ,iBAAgB;AACvD,cAAM,mBAAmB,SAAS,cAAc,MAAM;AACtD,2BAAiB,YAAY,0BACzB,QAAQ,qBACV,iBAAiB,UAAU,IAAI,GAAG,QAAQ,kBAAkB,MAAM,GAAG,CAAC,GAEpE,QAAQ,mBACV,iBAAiB,MAAM,aAAa,SAAS,QAAQ,iBAAiB,8BAExE,KAAK,YAAY,gBAAgB;AAAA,QACnC;AAAA,MAEJ,CAAC;AAED,eAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC5C,YAAI,WAAW,aAAa,CAAC,EAAE;AAC/B,cAAM,mBAAmB,QAAQ;AAAA,MACnC;AAAA,IAEF;AAEA,aAAS,mBAAmB,MAAM,SAAS,wBAAwB,YAAY,mBAAmB,UAAU,gBAAgB,MAAM,SAAS;AACzI,UAAM,cAAc,KAAK,kBAAkB;AAE3C,UAAI,kBAAkB;AAAA,QACpB,WAAW;AAAA;AAAA,QAEX,YAAY;AAAA,QACZ,WAAW;AAAA,QACX,YAAY;AAAA,QACZ,OAAO;AAAA,UACL,MAAM;AAAA,UACN,MAAM;AAAA,UACN,KAAK;AAAA,QACP;AAAA,QACA,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAMb,SAAS,WAAY;AACnB,sBAAY,UAAU,IAAI,sBAAsB,GAChD,YAAY,UAAU,IAAI,kCAAkC;AAC5D,cAAM,0BAA0B,YAAY,cAAc,oBAAoB;AAE9E,kCAAwB,MAAM,UAAU,gBACxC,aAAa,MAAM,UAAU,QAED,YAAY,iBAAiB,yBAAyB,EAC9D,QAAQ,wBAAsB,mBAAmB,MAAM,UAAU,MAAM;AAAA,QAC7F;AAAA,QACA,OAAO,SAAU,GAAG;AAClB,cAAM,0BAA0B,YAAY,cAAc,oBAAoB;AAC9E,sBAAY,UAAU,OAAO,sBAAsB,GACnD,wBAAwB,UAAU,OAAO,kCAAkC,GAGvE,wBACF,oBAAoB,MAAM,UAAU,SAElC,2BACF,wBAAwB,iBAAiB,wBAAwB,cAAc,UAAU,OAAO,kCAAkC;AAGpI,cAAM,sBAAsB,YAAY,iBAAiB,yBAAyB;AAUlF,cATA,oBAAoB,QAAQ,wBAAsB,mBAAmB,MAAM,UAAU,aAAa,GAE9F,oBAAoB,WAClB,4BACF,wBAAwB,MAAM,UAAU,SAE1C,aAAa,MAAM,UAAU,iBAG3B,CAAC,KAAK,cAAc,EAAE,kBAAkB;AAC1C;AAGF,cAAM,eAAe,yBAAyB,sBAAsB,QAAQ,KAAK,CAAC;AAIlF,cAAI,QAAQ,SAAS,GAAG;AACtB,gBAAM,MAAM,0BAA0B,uBAAuB,QAAQ,KAAK,CAAC;AAK3E,qBAAW,MAAM;AACf,2BAAa,KAAK,EAAE;AAAA,UAExB;AAEA,cAAM,wBAAwB,CAAC,GACzB,mBAAmB,KAAK,WAAW;AACzC,mBAAW,eAAe;AACxB,kCAAsB,KAAK,iBAAiB,eAAe,WAAW,CAAC,CAAC;AAE1E,qBAAW,qBAAqB,GAChC,QAAQ,KAAK,oBAAoB,EAAE,KAAK,CAAC,GACzC,EAAE,gBAAgB,GAClB,kBAAkB;AAAA,QACpB;AAAA,MACF;AAEA,qCAAwB,SAAS,OAAO,SAAS,cAAc,IAAI,KAAK,OAAO,CAAC,kDAAkD,GAAG,eAAe,GACpJ,yBAAyB,SAAS,OAAO,SAAS,cAAc,IAAI,KAAK,OAAO,CAAC,mDAAmD,GAAG,eAAe,GAE/I;AAAA,QACL,sBAAsB;AAAA,QACtB,uBAAuB;AAAA,MACzB;AAAA,IACF;AAKA,aAAS,UAAU;AACjB,MAAI,yBAAyB,sBAAsB,MACjD,sBAAsB,QAAQ,GAE5B,0BAA0B,uBAAuB,MACnD,uBAAuB,QAAQ,GAEjC,eAAe,YAAY,GAC3B,SAAS,eAAe,GACxB,qBAAqB,UAAU,GAC/B,MAAM,aAAa,SAAS,cAAc,IAAI,QAAQ,yBAAyB,CAAC;AAAA,IAClF;AAEA,aAAS,+BAA+B;AACtC,UAAM,0BAA0B,aAAa,cAAc,oBAAoB;AAE/E,MAAI,4BACF,qBAAqB,KAAK,yBAAyB,YAAY,CAAC,MAAM,EAAE,cAAc,GACtF,qBAAqB,KAAK,yBAAyB,aAAa,MAAM,aAAa,UAAU,IAAI,sBAAsB,CAAC,GACxH,qBAAqB,KAAK,yBAAyB,aAAa,MAAM,aAAa,UAAU,OAAO,sBAAsB,CAAC;AAAA,IAE/H;AAEA,aAAS,qBAAqB;AAC5B,UAAM,cAAc;AAEpB,2BAAqB,SAAS,OAAO,aAAa;AAAA,QAChD,OAAO;AAAA;AAAA,QAEP,YAAY;AAAA,QACZ,WAAW;AAAA,QACX,gBAAgB;AAAA,QAChB,OAAO,CAAC,QAAQ;AACd,cAAM,KAAK,IAAI,MACT,OAAO,GAAG,aAAa,IAAI;AACjC,UAAI,QAAQ,KAAK,QAAQ,UAAU,EAAE,KACnC,kBAAkB,aAAc,SAAS,MAAO,MAAM,IAAI,IAAI,CAAC,GAEjE,IAAI,MAAM,MAAM,UAAU,MAC1B,GAAG,cAAc,GAAG,WAAW,YAAY,EAAE;AAAA,QAC/C;AAAA,QACA,UAAU,MAAM;AACd,cAAM,YAAY,sBAAsB,mBAAmB,QAAQ,KAAK,CAAC,GACrE,mBAAmB,CAAC;AACxB,mBAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,IAAI,GAAG;AAC3C,qBAAS,IAAI,GAAG,IAAI,eAAe,QAAQ,IAAI,GAAG;AAChD,kBAAI,eAAe,CAAC,EAAE,MAAM,UAAU,CAAC,GAAG;AACxC,iCAAiB,KAAK,eAAe,CAAC,CAAC;AACvC;AAAA,cACF;AAGJ,2BAAiB,kBACjB,cAAc,YAAY;AAAA,QAC5B;AAAA,MACF,CAAC,GAGD,6BAA6B,GAEzB,gBACF,qBAAqB,KAAK,cAAc,SAAU,CAAC,UAAU;AAC3D,YAAM,SAAS,MAAM;AACrB,2BAAmB,QAAQ,UAAU,OAAO,UAAU,SAAS,UAAU,CAAC;AAAA,MAC5E,CAAE;AAAA,IAEN;AAGA,QAAI,iBAAiB,CAAC;AAEtB,aAAS,kBAAkB,cAAc,iBAAiB;AACxD,UAAM,kBAAkB,gBAAgB,aAAa,SAAS,GACxD,WAAW,mBAAmB,gBAAgB,QAAQ,UAAU,EAAE,GACpE,gBAAgB;AACpB,eAAW,cAAc;AACvB,QAAI,WAAW,OAAO,aACpB,gBAAgB;AAIpB,UAAI,eAAe;AACjB,iBAAW,OAAO;AAChB,cAAI,IAAI,OAAO,YACT,IAAI,YAAY,CAAC,MAAM,cAAc,IAAI,QAAQ,GAAG;AACtD,gBAAM,gBAAgB,gBAAgB,cAAc,oBAAoB,GAClE,WAAW,SAAS,cAAc,KAAK;AAC7C,qBAAS,KAAK,GAAG,QAAQ,IAAI,IAAI,EAAE,UACnC,SAAS,YAAY,0BACrB,SAAS,QAAQ,KAAK,GAAG,IAAI,EAAE;AAE/B,gBAAM,eAAe,SAAS,cAAc,KAAK;AACjD,yBAAa,YAAY,gCACzB,aAAa,MAAM,UAAU,eAC7B,aAAa,cAAc,gBAAgB,cAAc,cAAc,gBAAgB,aACvF,SAAS,YAAY,YAAY;AAGjC,gBAAM,qBAAqB,SAAS,cAAc,KAAK;AACvD,+BAAmB,YAAY,wBAC3B,QAAQ,sBACV,mBAAmB,UAAU,IAAI,GAAG,QAAQ,mBAAmB,MAAM,GAAG,CAAC,GAEvE,QAAQ,mBACV,mBAAmB,UAAU,IAAI,GAAG,QAAQ,gBAAgB,MAAM,GAAG,CAAC,GAEnE,QAAQ,sBACX,mBAAmB,UAAU,IAAI,2BAA2B,GAE1D,CAAC,QAAQ,sBAAsB,CAAC,QAAQ,mBAC1C,mBAAmB,UAAU,IAAI,4BAA4B,GAI3D,WAAW,QAAQ,uBAAuB,MAAQ,IAAI,YACpD,IAAI,YAAY,IAAI,SAAS,YAAY,WAC3C,IAAI,SAAS,UAAU,KAI3B,SAAS,YAAY,kBAAkB,GACvC,SAAS,YAAY,SAAS,cAAc,KAAK,CAAC,GAClD,aAAa,YAAY,QAAQ,GAEjC,iBAAiB,GAAG,GACpB,6BAA6B,IAAI,IAAI,oBAAoB,iBAAiB,QAAQ;AAAA,UACpF;AAGJ,qBAAa,MAAM,UAAU;AAAA,MAC/B;AAAA,IACF;AAEA,aAAS,iBAAiB,QAAQ;AAChC,qBAAe,KAAK,MAAM,GAC1B,cAAc,WAAW;AAAA,IAC3B;AAEA,aAAS,6BAA6B,IAAI,oBAAoB,iBAAiB,OAAO;AACpF,2BAAqB,KAAK,oBAAoB,SAAS,MAAM;AAC3D,YAAM,cAAc,qBAAqB,cAAc,OAAO,kBAAgB,aAAa,YAAY,kBAAkB;AACzH,iBAAW,gBAAgB;AACzB,+BAAqB,OAAO,aAAa,SAAS,SAAS,aAAa,QAAQ;AAElF,sBAAc,IAAI,iBAAiB,KAAK;AAAA,MAC1C,CAAC;AAAA,IACH;AAEA,aAAS,iBAAiB,cAAc;AACtC,UAAM,gBAAgB,MAAM,QAAQ,YAAY,IAAI,eAAe,CAAC,YAAY;AAChF,0BAAoB,MAAM,UAAU;AACpC,eAAW,aAAa,eAAe;AACrC,YAAM,YAAY,MAAM,gBAAgB,SAAS;AACjD,0BAAkB,cAAc,SAAS;AAAA,MAC3C;AAAA,IACF;AAEA,aAAS,qBAAqB;AAC5B,uBAAiB,CAAC,GAClB,cAAc,WAAW;AACzB,UAAM,yBAAyB,aAAa,iBAAiB,yBAAyB;AACtF,mBAAa,MAAM,UAAU;AAE7B,eAAW,YAAY,MAAM,KAAK,sBAAsB,GAAG;AACzD,YAAM,oBAAoB,aAAa,cAAc,uBAAuB;AAC5E,6BAAqB,kBAAkB,OAAO,GAC9C,YAAY,SAAS,OAAO;AAAA,MAC9B;AAGA,0BAAoB,MAAM,UAAU;AAAA,IACtC;AAEA,aAAS,gBAAgB,KAAK;AAI5B,eAHI,MAAM,IAAI,WACZ,IAAI,EAAE,QACN,IACK,IAAI,KAAK,IAAI;AAElB,aADA,OAAO,EAAE,EAAE,CAAC,IACJ,KAAK,IAAI,QAAQ,IAAI,MAAM;AACjC,cAAI,OAAO,IAAI,CAAC;AAGpB,aAAO;AAAA,IACT;AAEA,aAAS,cAAc,IAAI,SAAS,OAAO;AACzC,YAAM,OAAO;AACb,UAAI,UAAU,CAAC;AACf,mBAAa,QAAQ,SAAU,GAAG;AAChC,gBAAQ,EAAE,EAAE,IAAI;AAAA,MAClB,CAAC,GACD,gBAAgB,gBAAgB,QAAQ,EAAE,CAAC,GACvC,eAAe,WAAW,MAC5B,oBAAoB,QAAQ,SAC5B,aAAa,MAAM,UAAU,SAE/B,cAAc,cAAc;AAAA,IAC9B;AAEA,aAAS,mBAAmB,WAAW,aAAa,IAAM,+BAA+B,IAAM;AAC7F,MAAI,cACE,eAAe,MACjB,UAAU,UAAU,IAAI,WAAW,GACnC,UAAU,UAAU,OAAO,UAAU,GACjC,gCACF,UAAU,kBAAkB,MAG9B,UAAU,UAAU,OAAO,WAAW,GACtC,UAAU,UAAU,IAAI,UAAU,GAC9B,gCACF,UAAU,gBAAgB;AAAA,IAIlC;AAEA,aAAS,cAAc,YAAY;AACjC,UAAI,eAAe,WAAW,GAAG;AAC/B,kBAAU,YAAY,CAAC,CAAC,GACxB,eAAe,OAAO,EAAE,QAAQ,YAAY,cAAc,CAAC,EAAE,CAAC;AAC9D;AAAA,MACF;AACA,UAAI,gBAAgB,CAAC;AACrB,qBAAe,QAAQ,SAAU,SAAS;AACxC,sBAAc,KAAK,QAAQ,QAAQ;AAAA,MACrC,CAAC,GACD,UAAU,YAAY,aAAa,GAInC,eAAe,OAAO,EAAE,QAAQ,YAAY,cAAc,cAAc,CAAC;AAAA,IAC3E;AAGF,UAAM,OAAO,MAAM;AAAA,MACjB;AAAA,MACA;AAAA,MACA,YAAc;AAAA,MAEd;AAAA,MACA;AAAA,MACA;AAAA,MACA,uBAAyB;AAAA,IAC3B,CAAC;AAAA,EACH;AAGA,EAAiB,OAAO,SACtB,MAAM,OAAO,IAAM,QAAQ;AAAA,IACzB,OAAO;AAAA,MACL;AAAA,IACF;AAAA,EACF,CAAC;",
  "names": []
}
