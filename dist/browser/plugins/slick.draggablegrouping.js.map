{
  "version": 3,
  "sources": ["../../../src/plugins/slick.draggablegrouping.ts"],
  "sourcesContent": ["// @ts-ignore\r\nimport type SortableInstance from 'sortablejs';\r\n\r\nimport type { Column, DOMMouseOrTouchEvent, DraggableGroupingOption, Grouping, GroupingGetterFunction } from '../models/index.js';\r\nimport { BindingEventService as BindingEventService_, SlickEvent as SlickEvent_, SlickEventHandler as SlickEventHandler_, Utils as Utils_ } from '../slick.core.js';\r\nimport type { SlickDataView } from '../slick.dataview.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst SlickEventHandler = IIFE_ONLY ? Slick.EventHandler : SlickEventHandler_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/**\r\n *\r\n * Draggable Grouping contributed by:  Muthukumar Selvarasu\r\n *  muthukumar{dot}se{at}gmail{dot}com\r\n *  github.com/muthukumarse/Slickgrid\r\n *\r\n * NOTES:\r\n *     This plugin provides the Draggable Grouping feature which could be located in either the Top-Header or the Pre-Header\r\n * A plugin to add Draggable Grouping feature.\r\n *\r\n * USAGE:\r\n *\r\n * Add the plugin .js & .css files and register it with the grid.\r\n *\r\n *\r\n * The plugin expose the following methods:\r\n *    destroy: used to destroy the plugin\r\n *    setDroppedGroups: provide option to set default grouping on loading\r\n *    clearDroppedGroups: provide option to clear grouping\r\n *    getSetupColumnReorder: its function to setup draggable feature agains Header Column, should be passed on grid option. Also possible to pass custom function\r\n *\r\n *\r\n * The plugin expose the following event(s):\r\n *    onGroupChanged: pass the grouped columns to who subscribed.\r\n *\r\n */\r\nexport class SlickDraggableGrouping {\r\n  // --\r\n  // public API\r\n  pluginName = 'DraggableGrouping' as const;\r\n  onGroupChanged = new SlickEvent<{ caller?: string; groupColumns: Grouping[]; }>('onGroupChanged');\r\n\r\n  // --\r\n  // protected props\r\n  protected _grid!: SlickGrid;\r\n  protected _gridUid = '';\r\n  protected _gridColumns: Column[] = [];\r\n  protected _dataView!: SlickDataView;\r\n  protected _dropzoneElm!: HTMLDivElement;\r\n  protected _droppableInstance?: SortableInstance;\r\n  protected _dropzonePlaceholder!: HTMLDivElement;\r\n  protected _groupToggler?: HTMLDivElement;\r\n  protected _options: DraggableGroupingOption;\r\n  protected _defaults: DraggableGroupingOption = {\r\n    dropPlaceHolderText: 'Drop a column header here to group by the column',\r\n    hideGroupSortIcons: false,\r\n    hideToggleAllButton: false,\r\n    toggleAllButtonText: '',\r\n    toggleAllPlaceholderText: 'Toggle all Groups',\r\n  };\r\n  protected _bindingEventService = new BindingEventService();\r\n  protected _handler = new SlickEventHandler();\r\n  protected _sortableLeftInstance?: SortableInstance;\r\n  protected _sortableRightInstance?: SortableInstance;\r\n  protected _columnsGroupBy: Column[] = [];\r\n\r\n  /**\r\n   * @param options {Object} Options:\r\n   *    deleteIconCssClass:  an extra CSS class to add to the delete button (default undefined), if deleteIconCssClass && deleteIconImage undefined then slick-groupby-remove-image class will be added\r\n   *    deleteIconImage:     a url to the delete button image (default undefined)\r\n   *    groupIconCssClass:   an extra CSS class to add to the grouping field hint  (default undefined)\r\n   *    groupIconImage:      a url to the grouping field hint image (default undefined)\r\n   *    dropPlaceHolderText:      option to specify set own placeholder note text\r\n   */\r\n  constructor(options: Partial<DraggableGroupingOption>) {\r\n    this._options = Utils.extend(true, {}, this._defaults, options);\r\n  }\r\n\r\n  /**\r\n   * Initialize plugin.\r\n   */\r\n  init(grid: SlickGrid) {\r\n    this._grid = grid;\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n\r\n    this._gridUid = this._grid.getUID();\r\n    this._gridColumns = this._grid.getColumns();\r\n    this._dataView = this._grid.getData();\r\n    this._dropzoneElm = this._grid.getTopHeaderPanel() || this._grid.getPreHeaderPanel();\r\n    this._dropzoneElm.classList.add('slick-dropzone');\r\n\r\n    const dropPlaceHolderText = this._options.dropPlaceHolderText || 'Drop a column header here to group by the column';\r\n\r\n    this._dropzonePlaceholder = document.createElement('div');\r\n    this._dropzonePlaceholder.className = 'slick-placeholder';\r\n    this._dropzonePlaceholder.textContent = dropPlaceHolderText;\r\n\r\n    this._groupToggler = document.createElement('div');\r\n    this._groupToggler.className = 'slick-group-toggle-all expanded';\r\n    this._groupToggler.style.display = 'none';\r\n\r\n    this._dropzoneElm.appendChild(this._dropzonePlaceholder);\r\n    this._dropzoneElm.appendChild(this._groupToggler);\r\n\r\n    this.setupColumnDropbox();\r\n\r\n\r\n    this._handler.subscribe(this._grid.onHeaderCellRendered, (_e, args) => {\r\n      const column = args.column;\r\n      const node = args.node;\r\n      if (!Utils.isEmptyObject(column.grouping) && node) {\r\n        node.style.cursor = 'pointer'; // add the pointer cursor on each column title\r\n\r\n        // also optionally add an icon beside each column title that can be dragged\r\n        if (this._options.groupIconCssClass || this._options.groupIconImage) {\r\n          const groupableIconElm = document.createElement('span');\r\n          groupableIconElm.className = 'slick-column-groupable';\r\n          if (this._options.groupIconCssClass) {\r\n            groupableIconElm.classList.add(...Utils.classNameToList(this._options.groupIconCssClass));\r\n          }\r\n          if (this._options.groupIconImage) {\r\n            groupableIconElm.style.background = `url(${this._options.groupIconImage}) no-repeat center center`;\r\n          }\r\n          node.appendChild(groupableIconElm);\r\n        }\r\n      }\r\n    });\r\n\r\n    for (let i = 0; i < this._gridColumns.length; i++) {\r\n      const columnId = this._gridColumns[i].field;\r\n      this._grid.updateColumnHeader(columnId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup the column reordering\r\n   * NOTE: this function is a standalone function and is called externally and does not have access to `this` instance\r\n   * @param grid - slick grid object\r\n   * @param headers - slick grid column header elements\r\n   * @param _headerColumnWidthDiff - header column width difference\r\n   * @param setColumns - callback to reassign columns\r\n   * @param setupColumnResize - callback to setup the column resize\r\n   * @param columns - columns array\r\n   * @param getColumnIndex - callback to find index of a column\r\n   * @param uid - grid UID\r\n   * @param trigger - callback to execute when triggering a column grouping\r\n   */\r\n  getSetupColumnReorder(grid: SlickGrid, headers: any, _headerColumnWidthDiff: any, setColumns: (columns: Column[]) => void, setupColumnResize: () => void, _columns: Column[], getColumnIndex: (columnId: string) => number, _uid: string, trigger: (slickEvent: SlickEvent_, data?: any) => void) {\r\n    this.destroySortableInstances();\r\n    const dropzoneElm = grid.getTopHeaderPanel() || grid.getPreHeaderPanel();\r\n    const groupTogglerElm = dropzoneElm.querySelector<HTMLDivElement>('.slick-group-toggle-all');\r\n\r\n    const sortableOptions = {\r\n      animation: 50,\r\n      // chosenClass: 'slick-header-column-active',\r\n      ghostClass: 'slick-sortable-placeholder',\r\n      draggable: '.slick-header-column',\r\n      dataIdAttr: 'data-id',\r\n      group: {\r\n        name: 'shared',\r\n        pull: 'clone',\r\n        put: false,\r\n      },\r\n      revertClone: true,\r\n      // filter: function (_e, target) {\r\n      //   // block column from being able to be dragged if it's already a grouped column\r\n      //   // NOTE: need to disable for now since it also blocks the column reordering\r\n      //   return this.columnsGroupBy.some(c => c.id === target.getAttribute('data-id'));\r\n      // },\r\n      onStart: () => {\r\n        dropzoneElm.classList.add('slick-dropzone-hover');\r\n        dropzoneElm.classList.add('slick-dropzone-placeholder-hover');\r\n        const draggablePlaceholderElm = dropzoneElm.querySelector<HTMLDivElement>('.slick-placeholder');\r\n        if (draggablePlaceholderElm) {\r\n          draggablePlaceholderElm.style.display = 'inline-block';\r\n        }\r\n\r\n        const droppedGroupingElms = dropzoneElm.querySelectorAll<HTMLDivElement>('.slick-dropped-grouping');\r\n        droppedGroupingElms.forEach(droppedGroupingElm => droppedGroupingElm.style.display = 'none');\r\n        if (groupTogglerElm) {\r\n          groupTogglerElm.style.display = 'none';\r\n        }\r\n      },\r\n      onEnd: (e: Event & { item: any; clone: HTMLElement; }) => {\r\n        const draggablePlaceholderElm = dropzoneElm.querySelector<HTMLDivElement>('.slick-placeholder');\r\n        dropzoneElm.classList.remove('slick-dropzone-hover');\r\n        draggablePlaceholderElm?.classList.remove('slick-dropzone-placeholder-hover');\r\n\r\n\r\n        if (this._dropzonePlaceholder) {\r\n          this._dropzonePlaceholder.style.display = 'none';\r\n        }\r\n        if (draggablePlaceholderElm) {\r\n          draggablePlaceholderElm.parentElement?.classList.remove('slick-dropzone-placeholder-hover');\r\n        }\r\n\r\n        const droppedGroupingElms = dropzoneElm.querySelectorAll<HTMLDivElement>('.slick-dropped-grouping');\r\n        if (droppedGroupingElms.length) {\r\n          droppedGroupingElms.forEach(droppedGroupingElm => droppedGroupingElm.style.display = 'inline-flex');\r\n          if (draggablePlaceholderElm) {\r\n            draggablePlaceholderElm.style.display = 'none';\r\n          }\r\n          if (groupTogglerElm) {\r\n            groupTogglerElm.style.display = 'inline-block';\r\n          }\r\n        }\r\n\r\n        if (!grid.getEditorLock().commitCurrentEdit()) {\r\n          return;\r\n        }\r\n\r\n        const reorderedIds = this._sortableLeftInstance?.toArray() ?? [];\r\n\r\n        // when frozen columns are used, headers has more than one entry and we need the ids from all of them.\r\n        // though there is only really a left and right header, this will work even if that should change.\r\n        if (headers.length > 1) {\r\n          const ids = this._sortableRightInstance?.toArray() ?? [];\r\n\r\n          // Note: the loop below could be simplified with:\r\n          // reorderedIds.push.apply(reorderedIds,ids);\r\n          // However, the loop is more in keeping with way-backward compatibility\r\n          for (const id of ids) {\r\n            reorderedIds.push(id);\r\n          }\r\n        }\r\n\r\n        const finalReorderedColumns: Column[] = [];\r\n        const reorderedColumns = grid.getColumns();\r\n        for (const reorderedId of reorderedIds) {\r\n          finalReorderedColumns.push(reorderedColumns[getColumnIndex.call(grid, reorderedId)]);\r\n        }\r\n        setColumns.call(grid, finalReorderedColumns);\r\n        trigger.call(grid, grid.onColumnsReordered, { grid, impactedColumns: finalReorderedColumns });\r\n        e.stopPropagation();\r\n        setupColumnResize.call(grid);\r\n      }\r\n    };\r\n\r\n    this._sortableLeftInstance = Sortable.create(document.querySelector(`.${grid.getUID()} .slick-header-columns.slick-header-columns-left`) as HTMLDivElement, sortableOptions);\r\n    this._sortableRightInstance = Sortable.create(document.querySelector(`.${grid.getUID()} .slick-header-columns.slick-header-columns-right`) as HTMLDivElement, sortableOptions);\r\n\r\n    return {\r\n      sortableLeftInstance: this._sortableLeftInstance,\r\n      sortableRightInstance: this._sortableRightInstance\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Destroy plugin.\r\n   */\r\n  destroy() {\r\n    this.destroySortableInstances();\r\n    if (this._droppableInstance?.el) {\r\n      this._droppableInstance?.destroy();\r\n    }\r\n    this.onGroupChanged.unsubscribe();\r\n    this._handler.unsubscribeAll();\r\n    this._bindingEventService.unbindAll();\r\n    Utils.emptyElement(document.querySelector(`.${this._gridUid} .slick-preheader-panel,.${this._gridUid} .slick-topheader-panel`));\r\n  }\r\n\r\n  protected destroySortableInstances() {\r\n    if (this._sortableLeftInstance?.el) {\r\n      this._sortableLeftInstance?.destroy();\r\n    }\r\n    if (this._sortableRightInstance?.el) {\r\n      this._sortableRightInstance?.destroy();\r\n    }\r\n  }\r\n\r\n  protected addDragOverDropzoneListeners() {\r\n    const draggablePlaceholderElm = this._dropzoneElm.querySelector('.slick-placeholder');\r\n\r\n    if (draggablePlaceholderElm && this._dropzoneElm) {\r\n      this._bindingEventService.bind(draggablePlaceholderElm, 'dragover', (e) => e.preventDefault());\r\n      this._bindingEventService.bind(draggablePlaceholderElm, 'dragenter', () => this._dropzoneElm.classList.add('slick-dropzone-hover'));\r\n      this._bindingEventService.bind(draggablePlaceholderElm, 'dragleave', () => this._dropzoneElm.classList.remove('slick-dropzone-hover'));\r\n    }\r\n  }\r\n\r\n  protected setupColumnDropbox() {\r\n    const dropzoneElm = this._dropzoneElm;\r\n\r\n    this._droppableInstance = Sortable.create(dropzoneElm, {\r\n      group: 'shared',\r\n      // chosenClass: 'slick-header-column-active',\r\n      ghostClass: 'slick-droppable-sortitem-hover',\r\n      draggable: '.slick-dropped-grouping',\r\n      dragoverBubble: true,\r\n      onAdd: (evt: MouseEvent & { item: any; clone: HTMLElement; originalEvent: MouseEvent; }) => {\r\n        const el = evt.item;\r\n        const elId = el.getAttribute('id');\r\n        if (elId?.replace(this._gridUid, '')) {\r\n          this.handleGroupByDrop(dropzoneElm, (Sortable.utils).clone(evt.item));\r\n        }\r\n        evt.clone.style.opacity = '.5';\r\n        el.parentNode?.removeChild(el);\r\n      },\r\n      onUpdate: () => {\r\n        const sortArray = this._droppableInstance?.toArray() ?? [];\r\n        const newGroupingOrder: Column[] = [];\r\n        for (let i = 0, l = sortArray.length; i < l; i++) {\r\n          for (let a = 0, b = this._columnsGroupBy.length; a < b; a++) {\r\n            if (this._columnsGroupBy[a].id === sortArray[i]) {\r\n              newGroupingOrder.push(this._columnsGroupBy[a]);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        this._columnsGroupBy = newGroupingOrder;\r\n        this.updateGroupBy('sort-group');\r\n      },\r\n    });\r\n\r\n    // Sortable doesn't have onOver, we need to implement it ourselves\r\n    this.addDragOverDropzoneListeners();\r\n\r\n    if (this._groupToggler) {\r\n      this._bindingEventService.bind(this._groupToggler, 'click', ((event: DOMMouseOrTouchEvent<HTMLDivElement>) => {\r\n        const target = event.target;\r\n        this.toggleGroupToggler(target, target?.classList.contains('expanded'));\r\n      }) as EventListener);\r\n    }\r\n  }\r\n\r\n  protected handleGroupByDrop(containerElm: HTMLDivElement, headerColumnElm: HTMLDivElement) {\r\n    const headerColDataId = headerColumnElm.getAttribute('data-id');\r\n    const columnId = headerColDataId?.replace(this._gridUid, '');\r\n    let columnAllowed = true;\r\n    for (const colGroupBy of this._columnsGroupBy) {\r\n      if (colGroupBy.id === columnId) {\r\n        columnAllowed = false;\r\n      }\r\n    }\r\n\r\n    if (columnAllowed) {\r\n      for (const col of this._gridColumns) {\r\n        if (col.id === columnId && col.grouping && !Utils.isEmptyObject(col.grouping)) {\r\n          const columnNameElm = headerColumnElm.querySelector('.slick-column-name');\r\n          const entryElm = document.createElement('div');\r\n          entryElm.id = `${this._gridUid}_${col.id}_entry`;\r\n          entryElm.className = 'slick-dropped-grouping';\r\n          entryElm.dataset.id = `${col.id}`;\r\n\r\n          const groupTextElm = document.createElement('div');\r\n          groupTextElm.className = 'slick-dropped-grouping-title';\r\n          groupTextElm.style.display = 'inline-flex';\r\n          groupTextElm.textContent = columnNameElm ? columnNameElm.textContent : headerColumnElm.textContent;\r\n          entryElm.appendChild(groupTextElm);\r\n\r\n          // delete icon\r\n          const groupRemoveIconElm = document.createElement('div');\r\n          groupRemoveIconElm.className = 'slick-groupby-remove';\r\n          if (this._options.deleteIconCssClass) {\r\n            groupRemoveIconElm.classList.add(...Utils.classNameToList(this._options.deleteIconCssClass));\r\n          }\r\n          if (this._options.deleteIconImage) {\r\n            groupRemoveIconElm.classList.add(...Utils.classNameToList(this._options.deleteIconImage));\r\n          }\r\n          if (!this._options.deleteIconCssClass) {\r\n            groupRemoveIconElm.classList.add('slick-groupby-remove-icon');\r\n          }\r\n          if (!this._options.deleteIconCssClass && !this._options.deleteIconImage) {\r\n            groupRemoveIconElm.classList.add('slick-groupby-remove-image');\r\n          }\r\n\r\n          // sorting icons when enabled\r\n          if (this._options?.hideGroupSortIcons !== true && col.sortable) {\r\n            if (col.grouping?.sortAsc === undefined) {\r\n              col.grouping.sortAsc = true;\r\n            }\r\n          }\r\n\r\n          entryElm.appendChild(groupRemoveIconElm);\r\n          entryElm.appendChild(document.createElement('div'));\r\n          containerElm.appendChild(entryElm);\r\n\r\n          this.addColumnGroupBy(col);\r\n          this.addGroupByRemoveClickHandler(col.id, groupRemoveIconElm, headerColumnElm, entryElm);\r\n        }\r\n      }\r\n\r\n      // show the \"Toggle All\" when feature is enabled\r\n      if (this._groupToggler && this._columnsGroupBy.length > 0) {\r\n        this._groupToggler.style.display = 'inline-block';\r\n      }\r\n    }\r\n  }\r\n\r\n  protected addColumnGroupBy(column: Column) {\r\n    this._columnsGroupBy.push(column);\r\n    this.updateGroupBy('add-group');\r\n  }\r\n\r\n  protected addGroupByRemoveClickHandler(id: string | number, groupRemoveIconElm: HTMLDivElement, headerColumnElm: HTMLDivElement, entry: any) {\r\n    this._bindingEventService.bind(groupRemoveIconElm, 'click', () => {\r\n      const boundedElms = this._bindingEventService.getBoundedEvents().filter(boundedEvent => boundedEvent.element === groupRemoveIconElm);\r\n      for (const boundedEvent of boundedElms) {\r\n        this._bindingEventService.unbind(boundedEvent.element, 'click', boundedEvent.listener);\r\n      }\r\n      this.removeGroupBy(id, headerColumnElm, entry);\r\n    });\r\n  }\r\n\r\n  setDroppedGroups(groupingInfo: Array<string | GroupingGetterFunction> | string) {\r\n    const groupingInfos = Array.isArray(groupingInfo) ? groupingInfo : [groupingInfo];\r\n    this._dropzonePlaceholder.style.display = 'none';\r\n    for (const groupInfo of groupingInfos) {\r\n      const columnElm = this._grid.getHeaderColumn(groupInfo as string);\r\n      this.handleGroupByDrop(this._dropzoneElm, columnElm);\r\n    }\r\n  }\r\n\r\n  clearDroppedGroups() {\r\n    this._columnsGroupBy = [];\r\n    this.updateGroupBy('clear-all');\r\n    const allDroppedGroupingElms = this._dropzoneElm.querySelectorAll('.slick-dropped-grouping');\r\n\r\n    for (const groupElm of Array.from(allDroppedGroupingElms)) {\r\n      const groupRemoveBtnElm = this._dropzoneElm.querySelector('.slick-groupby-remove');\r\n      groupRemoveBtnElm?.remove();\r\n      groupElm?.remove();\r\n    }\r\n\r\n    // show placeholder text & hide the \"Toggle All\" when that later feature is enabled\r\n    this._dropzonePlaceholder.style.display = 'inline-block';\r\n    if (this._groupToggler) {\r\n      this._groupToggler.style.display = 'none';\r\n    }\r\n  }\r\n\r\n  protected removeFromArray(arrayToModify: any[], itemToRemove: any) {\r\n    if (Array.isArray(arrayToModify)) {\r\n      const itemIdx = arrayToModify.findIndex(a => a.id === itemToRemove.id);\r\n      if (itemIdx >= 0) {\r\n        arrayToModify.splice(itemIdx, 1);\r\n      }\r\n    }\r\n    return arrayToModify;\r\n  }\r\n\r\n  protected removeGroupBy(id: string | number, _hdrColumnElm: HTMLDivElement, entry: any) {\r\n    entry.remove();\r\n    const groupby: Column[] = [];\r\n    this._gridColumns.forEach((col) => groupby[col.id as any] = col);\r\n    this.removeFromArray(this._columnsGroupBy, groupby[id as any]);\r\n    if (this._columnsGroupBy.length === 0) {\r\n      this._dropzonePlaceholder.style.display = 'block';\r\n      if (this._groupToggler) {\r\n        this._groupToggler.style.display = 'none';\r\n      }\r\n    }\r\n    this.updateGroupBy('remove-group');\r\n  }\r\n\r\n  protected toggleGroupToggler(targetElm: Element | null, collapsing = true, shouldExecuteDataViewCommand = true) {\r\n    if (targetElm) {\r\n      if (collapsing === true) {\r\n        targetElm.classList.add('collapsed');\r\n        targetElm.classList.remove('expanded');\r\n        if (shouldExecuteDataViewCommand) {\r\n          this._dataView.collapseAllGroups();\r\n        }\r\n      } else {\r\n        targetElm.classList.remove('collapsed');\r\n        targetElm.classList.add('expanded');\r\n        if (shouldExecuteDataViewCommand) {\r\n          this._dataView.expandAllGroups();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  protected updateGroupBy(originator: string) {\r\n    if (this._columnsGroupBy.length === 0) {\r\n      this._dataView.setGrouping([]);\r\n      this.onGroupChanged.notify({ caller: originator, groupColumns: [] });\r\n      return;\r\n    }\r\n    const groupingArray: Grouping<any>[] = [];\r\n    this._columnsGroupBy.forEach((element) => groupingArray.push(element.grouping!));\r\n    this._dataView.setGrouping(groupingArray);\r\n    this.onGroupChanged.notify({ caller: originator, groupColumns: groupingArray });\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      DraggableGrouping: SlickDraggableGrouping\r\n    }\r\n  });\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
