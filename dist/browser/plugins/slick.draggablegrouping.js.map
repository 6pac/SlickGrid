{
  "version": 3,
  "sources": ["import-ns:../slick.core.js", "../../../src/plugins/slick.draggablegrouping.js"],
  "sourcesContent": ["// empty string, do nothing", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SlickDraggableGrouping = void 0;\nvar slick_core_1 = require(\"../slick.core\");\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nvar BindingEventService = IIFE_ONLY ? Slick.BindingEventService : slick_core_1.BindingEventService;\nvar SlickEvent = IIFE_ONLY ? Slick.Event : slick_core_1.SlickEvent;\nvar SlickEventHandler = IIFE_ONLY ? Slick.EventHandler : slick_core_1.SlickEventHandler;\nvar Utils = IIFE_ONLY ? Slick.Utils : slick_core_1.Utils;\n/**\n *\n * Draggable Grouping contributed by:  Muthukumar Selvarasu\n *  muthukumar{dot}se{at}gmail{dot}com\n *  github.com/muthukumarse/Slickgrid\n *\n * NOTES:\n *     This plugin provides the Draggable Grouping feature\n * A plugin to add Draggable Grouping feature.\n *\n * USAGE:\n *\n * Add the plugin .js & .css files and register it with the grid.\n *\n *\n * The plugin expose the following methods:\n *    destroy: used to destroy the plugin\n *    setDroppedGroups: provide option to set default grouping on loading\n *    clearDroppedGroups: provide option to clear grouping\n *    getSetupColumnReorder: its function to setup draggable feature agains Header Column, should be passed on grid option. Also possible to pass custom function\n *\n *\n * The plugin expose the following event(s):\n *    onGroupChanged: pass the grouped columns to who subscribed.\n *\n */\nvar SlickDraggableGrouping = /** @class */ (function () {\n    /**\n     * @param options {Object} Options:\n     *    deleteIconCssClass:  an extra CSS class to add to the delete button (default undefined), if deleteIconCssClass && deleteIconImage undefined then slick-groupby-remove-image class will be added\n     *    deleteIconImage:     a url to the delete button image (default undefined)\n     *    groupIconCssClass:   an extra CSS class to add to the grouping field hint  (default undefined)\n     *    groupIconImage:      a url to the grouping field hint image (default undefined)\n     *    dropPlaceHolderText:      option to specify set own placeholder note text\n     */\n    function SlickDraggableGrouping(options) {\n        // --\n        // public API\n        this.pluginName = 'DraggableGrouping';\n        this.onGroupChanged = new SlickEvent();\n        this._gridUid = '';\n        this._gridColumns = [];\n        this._defaults = {\n            dropPlaceHolderText: 'Drop a column header here to group by the column',\n            hideGroupSortIcons: false,\n            hideToggleAllButton: false,\n            toggleAllButtonText: '',\n            toggleAllPlaceholderText: 'Toggle all Groups',\n        };\n        this._bindingEventService = new BindingEventService();\n        this._handler = new SlickEventHandler();\n        this._columnsGroupBy = [];\n        this._options = Utils.extend(true, {}, this._defaults, options);\n    }\n    /**\n     * Initialize plugin.\n     */\n    SlickDraggableGrouping.prototype.init = function (grid) {\n        var _this = this;\n        this._grid = grid;\n        this._gridUid = this._grid.getUID();\n        this._gridColumns = this._grid.getColumns();\n        this._dataView = this._grid.getData();\n        this._dropzoneElm = this._grid.getPreHeaderPanel();\n        this._dropzoneElm.classList.add('slick-dropzone');\n        var dropPlaceHolderText = this._options.dropPlaceHolderText || 'Drop a column header here to group by the column';\n        this._dropzonePlaceholder = document.createElement('div');\n        this._dropzonePlaceholder.className = 'slick-placeholder';\n        this._dropzonePlaceholder.textContent = dropPlaceHolderText;\n        this._groupToggler = document.createElement('div');\n        this._groupToggler.className = 'slick-group-toggle-all expanded';\n        this._groupToggler.style.display = 'none';\n        this._dropzoneElm.appendChild(this._dropzonePlaceholder);\n        this._dropzoneElm.appendChild(this._groupToggler);\n        this.setupColumnDropbox();\n        this._handler.subscribe(this._grid.onHeaderCellRendered, function (_e, args) {\n            var _a;\n            var column = args.column;\n            var node = args.node;\n            if (!Utils.isEmptyObject(column.grouping) && node) {\n                node.style.cursor = 'pointer'; // add the pointer cursor on each column title\n                // also optionally add an icon beside each column title that can be dragged\n                if (_this._options.groupIconCssClass || _this._options.groupIconImage) {\n                    var groupableIconElm = document.createElement('span');\n                    groupableIconElm.className = 'slick-column-groupable';\n                    if (_this._options.groupIconCssClass) {\n                        (_a = groupableIconElm.classList).add.apply(_a, _this._options.groupIconCssClass.split(' '));\n                    }\n                    if (_this._options.groupIconImage) {\n                        groupableIconElm.style.background = \"url(\".concat(_this._options.groupIconImage, \") no-repeat center center\");\n                    }\n                    node.appendChild(groupableIconElm);\n                }\n            }\n        });\n        for (var i = 0; i < this._gridColumns.length; i++) {\n            var columnId = this._gridColumns[i].field;\n            this._grid.updateColumnHeader(columnId);\n        }\n    };\n    /**\n     * Setup the column reordering\n     * NOTE: this function is a standalone function and is called externally and does not have access to `this` instance\n     * @param grid - slick grid object\n     * @param headers - slick grid column header elements\n     * @param _headerColumnWidthDiff - header column width difference\n     * @param setColumns - callback to reassign columns\n     * @param setupColumnResize - callback to setup the column resize\n     * @param columns - columns array\n     * @param getColumnIndex - callback to find index of a column\n     * @param uid - grid UID\n     * @param trigger - callback to execute when triggering a column grouping\n     */\n    SlickDraggableGrouping.prototype.getSetupColumnReorder = function (grid, headers, _headerColumnWidthDiff, setColumns, setupColumnResize, _columns, getColumnIndex, _uid, trigger) {\n        var _this = this;\n        this.destroySortableInstances();\n        var dropzoneElm = grid.getPreHeaderPanel();\n        var groupTogglerElm = dropzoneElm.querySelector('.slick-group-toggle-all');\n        var sortableOptions = {\n            animation: 50,\n            // chosenClass: 'slick-header-column-active',\n            ghostClass: 'slick-sortable-placeholder',\n            draggable: '.slick-header-column',\n            dataIdAttr: 'data-id',\n            group: {\n                name: 'shared',\n                pull: 'clone',\n                put: false,\n            },\n            revertClone: true,\n            // filter: function (_e, target) {\n            //   // block column from being able to be dragged if it's already a grouped column\n            //   // NOTE: need to disable for now since it also blocks the column reordering\n            //   return this.columnsGroupBy.some(c => c.id === target.getAttribute('data-id'));\n            // },\n            onStart: function () {\n                dropzoneElm.classList.add('slick-dropzone-hover');\n                dropzoneElm.classList.add('slick-dropzone-placeholder-hover');\n                var draggablePlaceholderElm = dropzoneElm.querySelector('.slick-placeholder');\n                if (draggablePlaceholderElm) {\n                    draggablePlaceholderElm.style.display = 'inline-block';\n                }\n                var droppedGroupingElms = dropzoneElm.querySelectorAll('.slick-dropped-grouping');\n                droppedGroupingElms.forEach(function (droppedGroupingElm) { return droppedGroupingElm.style.display = 'none'; });\n                if (groupTogglerElm) {\n                    groupTogglerElm.style.display = 'none';\n                }\n            },\n            onEnd: function (e) {\n                var _a, _b, _c, _d, _f;\n                var draggablePlaceholderElm = dropzoneElm.querySelector('.slick-placeholder');\n                dropzoneElm.classList.remove('slick-dropzone-hover');\n                draggablePlaceholderElm === null || draggablePlaceholderElm === void 0 ? void 0 : draggablePlaceholderElm.classList.remove('slick-dropzone-placeholder-hover');\n                if (_this._dropzonePlaceholder) {\n                    _this._dropzonePlaceholder.style.display = 'none';\n                }\n                if (draggablePlaceholderElm) {\n                    (_a = draggablePlaceholderElm.parentElement) === null || _a === void 0 ? void 0 : _a.classList.remove('slick-dropzone-placeholder-hover');\n                }\n                var droppedGroupingElms = dropzoneElm.querySelectorAll('.slick-dropped-grouping');\n                if (droppedGroupingElms.length) {\n                    droppedGroupingElms.forEach(function (droppedGroupingElm) { return droppedGroupingElm.style.display = 'inline-flex'; });\n                    if (draggablePlaceholderElm) {\n                        draggablePlaceholderElm.style.display = 'none';\n                    }\n                    if (groupTogglerElm) {\n                        groupTogglerElm.style.display = 'inline-block';\n                    }\n                }\n                if (!grid.getEditorLock().commitCurrentEdit()) {\n                    return;\n                }\n                var reorderedIds = (_c = (_b = _this._sortableLeftInstance) === null || _b === void 0 ? void 0 : _b.toArray()) !== null && _c !== void 0 ? _c : [];\n                // when frozen columns are used, headers has more than one entry and we need the ids from all of them.\n                // though there is only really a left and right header, this will work even if that should change.\n                if (headers.length > 1) {\n                    var ids = (_f = (_d = _this._sortableRightInstance) === null || _d === void 0 ? void 0 : _d.toArray()) !== null && _f !== void 0 ? _f : [];\n                    // Note: the loop below could be simplified with:\n                    // reorderedIds.push.apply(reorderedIds,ids);\n                    // However, the loop is more in keeping with way-backward compatibility\n                    for (var _i = 0, ids_1 = ids; _i < ids_1.length; _i++) {\n                        var id = ids_1[_i];\n                        reorderedIds.push(id);\n                    }\n                }\n                var finalReorderedColumns = [];\n                var reorderedColumns = grid.getColumns();\n                for (var _g = 0, reorderedIds_1 = reorderedIds; _g < reorderedIds_1.length; _g++) {\n                    var reorderedId = reorderedIds_1[_g];\n                    finalReorderedColumns.push(reorderedColumns[getColumnIndex.call(grid, reorderedId)]);\n                }\n                setColumns.call(grid, finalReorderedColumns);\n                trigger.call(grid, grid.onColumnsReordered, { grid: grid });\n                e.stopPropagation();\n                setupColumnResize.call(grid);\n            }\n        };\n        this._sortableLeftInstance = Sortable.create(document.querySelector(\".\".concat(grid.getUID(), \" .slick-header-columns.slick-header-columns-left\")), sortableOptions);\n        this._sortableRightInstance = Sortable.create(document.querySelector(\".\".concat(grid.getUID(), \" .slick-header-columns.slick-header-columns-right\")), sortableOptions);\n        return {\n            sortableLeftInstance: this._sortableLeftInstance,\n            sortableRightInstance: this._sortableRightInstance\n        };\n    };\n    /**\n     * Destroy plugin.\n     */\n    SlickDraggableGrouping.prototype.destroy = function () {\n        this.destroySortableInstances();\n        this.onGroupChanged.unsubscribe();\n        this._handler.unsubscribeAll();\n        this._bindingEventService.unbindAll();\n        Utils.emptyElement(document.querySelector(\".\".concat(this._gridUid, \" .slick-preheader-panel\")));\n    };\n    SlickDraggableGrouping.prototype.destroySortableInstances = function () {\n        var _a, _b, _c, _d;\n        if ((_a = this._sortableLeftInstance) === null || _a === void 0 ? void 0 : _a.el) {\n            (_b = this._sortableLeftInstance) === null || _b === void 0 ? void 0 : _b.destroy();\n        }\n        if ((_c = this._sortableRightInstance) === null || _c === void 0 ? void 0 : _c.el) {\n            (_d = this._sortableRightInstance) === null || _d === void 0 ? void 0 : _d.destroy();\n        }\n    };\n    SlickDraggableGrouping.prototype.addDragOverDropzoneListeners = function () {\n        var _this = this;\n        var draggablePlaceholderElm = this._dropzoneElm.querySelector('.slick-placeholder');\n        if (draggablePlaceholderElm && this._dropzoneElm) {\n            this._bindingEventService.bind(draggablePlaceholderElm, 'dragover', function (e) { return e.preventDefault(); });\n            this._bindingEventService.bind(draggablePlaceholderElm, 'dragenter', function () { return _this._dropzoneElm.classList.add('slick-dropzone-hover'); });\n            this._bindingEventService.bind(draggablePlaceholderElm, 'dragleave', function () { return _this._dropzoneElm.classList.remove('slick-dropzone-hover'); });\n        }\n    };\n    SlickDraggableGrouping.prototype.setupColumnDropbox = function () {\n        var _this = this;\n        var dropzoneElm = this._dropzoneElm;\n        this._droppableInstance = Sortable.create(dropzoneElm, {\n            group: 'shared',\n            // chosenClass: 'slick-header-column-active',\n            ghostClass: 'slick-droppable-sortitem-hover',\n            draggable: '.slick-dropped-grouping',\n            dragoverBubble: true,\n            onAdd: function (evt) {\n                var _a;\n                var el = evt.item;\n                var elId = el.getAttribute('id');\n                if (elId === null || elId === void 0 ? void 0 : elId.replace(_this._gridUid, '')) {\n                    _this.handleGroupByDrop(dropzoneElm, (Sortable.utils).clone(evt.item));\n                }\n                evt.clone.style.opacity = '.5';\n                (_a = el.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(el);\n            },\n            onUpdate: function () {\n                var _a, _b;\n                var sortArray = (_b = (_a = _this._droppableInstance) === null || _a === void 0 ? void 0 : _a.toArray()) !== null && _b !== void 0 ? _b : [];\n                var newGroupingOrder = [];\n                for (var i = 0, l = sortArray.length; i < l; i++) {\n                    for (var a = 0, b = _this._columnsGroupBy.length; a < b; a++) {\n                        if (_this._columnsGroupBy[a].id == sortArray[i]) {\n                            newGroupingOrder.push(_this._columnsGroupBy[a]);\n                            break;\n                        }\n                    }\n                }\n                _this._columnsGroupBy = newGroupingOrder;\n                _this.updateGroupBy(\"sort-group\");\n            },\n        });\n        // Sortable doesn't have onOver, we need to implement it ourselves\n        this.addDragOverDropzoneListeners();\n        if (this._groupToggler) {\n            this._bindingEventService.bind(this._groupToggler, 'click', (function (event) {\n                var target = event.target;\n                _this.toggleGroupToggler(target, target === null || target === void 0 ? void 0 : target.classList.contains('expanded'));\n            }));\n        }\n    };\n    SlickDraggableGrouping.prototype.handleGroupByDrop = function (containerElm, headerColumnElm) {\n        var _a, _b;\n        var _c, _d;\n        var headerColDataId = headerColumnElm.getAttribute('data-id');\n        var columnId = headerColDataId === null || headerColDataId === void 0 ? void 0 : headerColDataId.replace(this._gridUid, '');\n        var columnAllowed = true;\n        for (var _i = 0, _f = this._columnsGroupBy; _i < _f.length; _i++) {\n            var colGroupBy = _f[_i];\n            if (colGroupBy.id === columnId) {\n                columnAllowed = false;\n            }\n        }\n        if (columnAllowed) {\n            for (var _g = 0, _h = this._gridColumns; _g < _h.length; _g++) {\n                var col = _h[_g];\n                if (col.id === columnId && col.grouping && !Utils.isEmptyObject(col.grouping)) {\n                    var columnNameElm = headerColumnElm.querySelector('.slick-column-name');\n                    var entryElm = document.createElement('div');\n                    entryElm.id = \"\".concat(this._gridUid, \"_\").concat(col.id, \"_entry\");\n                    entryElm.className = 'slick-dropped-grouping';\n                    entryElm.dataset.id = \"\".concat(col.id);\n                    var groupTextElm = document.createElement('div');\n                    groupTextElm.className = 'slick-dropped-grouping-title';\n                    groupTextElm.style.display = 'inline-flex';\n                    groupTextElm.textContent = columnNameElm ? columnNameElm.textContent : headerColumnElm.textContent;\n                    entryElm.appendChild(groupTextElm);\n                    // delete icon\n                    var groupRemoveIconElm = document.createElement('div');\n                    groupRemoveIconElm.className = 'slick-groupby-remove';\n                    if (this._options.deleteIconCssClass) {\n                        (_a = groupRemoveIconElm.classList).add.apply(_a, this._options.deleteIconCssClass.split(' '));\n                    }\n                    if (this._options.deleteIconImage) {\n                        (_b = groupRemoveIconElm.classList).add.apply(_b, this._options.deleteIconImage.split(' '));\n                    }\n                    if (!this._options.deleteIconCssClass) {\n                        groupRemoveIconElm.classList.add('slick-groupby-remove-icon');\n                    }\n                    if (!this._options.deleteIconCssClass && !this._options.deleteIconImage) {\n                        groupRemoveIconElm.classList.add('slick-groupby-remove-image');\n                    }\n                    // sorting icons when enabled\n                    if (((_c = this._options) === null || _c === void 0 ? void 0 : _c.hideGroupSortIcons) !== true && col.sortable) {\n                        if (((_d = col.grouping) === null || _d === void 0 ? void 0 : _d.sortAsc) === undefined) {\n                            col.grouping.sortAsc = true;\n                        }\n                    }\n                    entryElm.appendChild(groupRemoveIconElm);\n                    entryElm.appendChild(document.createElement('div'));\n                    containerElm.appendChild(entryElm);\n                    this.addColumnGroupBy(col);\n                    this.addGroupByRemoveClickHandler(col.id, groupRemoveIconElm, headerColumnElm, entryElm);\n                }\n            }\n            // show the \"Toggle All\" when feature is enabled\n            if (this._groupToggler && this._columnsGroupBy.length > 0) {\n                this._groupToggler.style.display = 'inline-block';\n            }\n        }\n    };\n    SlickDraggableGrouping.prototype.addColumnGroupBy = function (column) {\n        this._columnsGroupBy.push(column);\n        this.updateGroupBy(\"add-group\");\n    };\n    SlickDraggableGrouping.prototype.addGroupByRemoveClickHandler = function (id, groupRemoveIconElm, headerColumnElm, entry) {\n        var _this = this;\n        this._bindingEventService.bind(groupRemoveIconElm, 'click', function () {\n            var boundedElms = _this._bindingEventService.getBoundedEvents().filter(function (boundedEvent) { return boundedEvent.element === groupRemoveIconElm; });\n            for (var _i = 0, boundedElms_1 = boundedElms; _i < boundedElms_1.length; _i++) {\n                var boundedEvent = boundedElms_1[_i];\n                _this._bindingEventService.unbind(boundedEvent.element, 'click', boundedEvent.listener);\n            }\n            _this.removeGroupBy(id, headerColumnElm, entry);\n        });\n    };\n    SlickDraggableGrouping.prototype.setDroppedGroups = function (groupingInfo) {\n        var groupingInfos = Array.isArray(groupingInfo) ? groupingInfo : [groupingInfo];\n        this._dropzonePlaceholder.style.display = 'none';\n        for (var _i = 0, groupingInfos_1 = groupingInfos; _i < groupingInfos_1.length; _i++) {\n            var groupInfo = groupingInfos_1[_i];\n            var columnElm = this._grid.getHeaderColumn(groupInfo);\n            this.handleGroupByDrop(this._dropzoneElm, columnElm);\n        }\n    };\n    SlickDraggableGrouping.prototype.clearDroppedGroups = function () {\n        this._columnsGroupBy = [];\n        this.updateGroupBy('clear-all');\n        var allDroppedGroupingElms = this._dropzoneElm.querySelectorAll('.slick-dropped-grouping');\n        for (var _i = 0, _a = Array.from(allDroppedGroupingElms); _i < _a.length; _i++) {\n            var groupElm = _a[_i];\n            var groupRemoveBtnElm = this._dropzoneElm.querySelector('.slick-groupby-remove');\n            groupRemoveBtnElm === null || groupRemoveBtnElm === void 0 ? void 0 : groupRemoveBtnElm.remove();\n            groupElm === null || groupElm === void 0 ? void 0 : groupElm.remove();\n        }\n        // show placeholder text & hide the \"Toggle All\" when that later feature is enabled\n        this._dropzonePlaceholder.style.display = 'inline-block';\n        if (this._groupToggler) {\n            this._groupToggler.style.display = 'none';\n        }\n    };\n    SlickDraggableGrouping.prototype.removeFromArray = function (arrayToModify, itemToRemove) {\n        if (Array.isArray(arrayToModify)) {\n            var itemIdx = arrayToModify.findIndex(function (a) { return a.id === itemToRemove.id; });\n            if (itemIdx >= 0) {\n                arrayToModify.splice(itemIdx, 1);\n            }\n        }\n        return arrayToModify;\n    };\n    SlickDraggableGrouping.prototype.removeGroupBy = function (id, _hdrColumnElm, entry) {\n        entry.remove();\n        var groupby = [];\n        this._gridColumns.forEach(function (col) { return groupby[col.id] = col; });\n        this.removeFromArray(this._columnsGroupBy, groupby[id]);\n        if (this._columnsGroupBy.length === 0) {\n            this._dropzonePlaceholder.style.display = 'block';\n            if (this._groupToggler) {\n                this._groupToggler.style.display = 'none';\n            }\n        }\n        this.updateGroupBy(\"remove-group\");\n    };\n    SlickDraggableGrouping.prototype.toggleGroupToggler = function (targetElm, collapsing, shouldExecuteDataViewCommand) {\n        if (collapsing === void 0) { collapsing = true; }\n        if (shouldExecuteDataViewCommand === void 0) { shouldExecuteDataViewCommand = true; }\n        if (targetElm) {\n            if (collapsing === true) {\n                targetElm.classList.add('collapsed');\n                targetElm.classList.remove('expanded');\n                if (shouldExecuteDataViewCommand) {\n                    this._dataView.collapseAllGroups();\n                }\n            }\n            else {\n                targetElm.classList.remove('collapsed');\n                targetElm.classList.add('expanded');\n                if (shouldExecuteDataViewCommand) {\n                    this._dataView.expandAllGroups();\n                }\n            }\n        }\n    };\n    SlickDraggableGrouping.prototype.updateGroupBy = function (originator) {\n        if (this._columnsGroupBy.length === 0) {\n            this._dataView.setGrouping([]);\n            this.onGroupChanged.notify({ caller: originator, groupColumns: [] });\n            return;\n        }\n        var groupingArray = [];\n        this._columnsGroupBy.forEach(function (element) { return groupingArray.push(element.grouping); });\n        this._dataView.setGrouping(groupingArray);\n        this.onGroupChanged.notify({ caller: originator, groupColumns: groupingArray });\n    };\n    return SlickDraggableGrouping;\n}());\nexports.SlickDraggableGrouping = SlickDraggableGrouping;\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n    Utils.extend(true, window, {\n        Slick: {\n            DraggableGrouping: SlickDraggableGrouping\n        }\n    });\n}\n"],
  "mappings": "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",
  "names": ["SlickDraggableGrouping", "boundedEvent"]
}
