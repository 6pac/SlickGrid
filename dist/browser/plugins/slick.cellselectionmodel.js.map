{
  "version": 3,
  "sources": ["import-ns:../slick.core.js", "import-ns:./slick.cellrangeselector.js", "../../../src/plugins/slick.cellselectionmodel.js"],
  "sourcesContent": ["// empty string, do nothing", "// empty string, do nothing", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SlickCellSelectionModel = void 0;\nvar slick_core_1 = require(\"../slick.core\");\nvar slick_cellrangeselector_1 = require(\"./slick.cellrangeselector\");\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nvar SlickEvent = IIFE_ONLY ? Slick.Event : slick_core_1.SlickEvent;\nvar SlickEventData = IIFE_ONLY ? Slick.EventData : slick_core_1.SlickEventData;\nvar SlickRange = IIFE_ONLY ? Slick.Range : slick_core_1.SlickRange;\nvar SlickCellRangeSelector = IIFE_ONLY ? Slick.CellRangeSelector : slick_cellrangeselector_1.SlickCellRangeSelector;\nvar Utils = IIFE_ONLY ? Slick.Utils : slick_core_1.Utils;\nvar SlickCellSelectionModel = /** @class */ (function () {\n    function SlickCellSelectionModel(options) {\n        // --\n        // public API\n        this.pluginName = 'CellSelectionModel';\n        this.onSelectedRangesChanged = new SlickEvent();\n        this._ranges = [];\n        this._defaults = {\n            selectActiveCell: true\n        };\n        if (options === undefined || options.cellRangeSelector === undefined) {\n            this._selector = new SlickCellRangeSelector({ selectionCss: { border: '2px solid black' } });\n        }\n        else {\n            this._selector = options.cellRangeSelector;\n        }\n    }\n    SlickCellSelectionModel.prototype.init = function (grid) {\n        this._options = Utils.extend(true, {}, this._defaults, this._options);\n        this._grid = grid;\n        this._grid.onActiveCellChanged.subscribe(this.handleActiveCellChange.bind(this));\n        this._grid.onKeyDown.subscribe(this.handleKeyDown.bind(this));\n        grid.registerPlugin(this._selector);\n        this._selector.onCellRangeSelected.subscribe(this.handleCellRangeSelected.bind(this));\n        this._selector.onBeforeCellRangeSelected.subscribe(this.handleBeforeCellRangeSelected.bind(this));\n    };\n    SlickCellSelectionModel.prototype.destroy = function () {\n        var _a;\n        this._grid.onActiveCellChanged.unsubscribe(this.handleActiveCellChange.bind(this));\n        this._grid.onKeyDown.unsubscribe(this.handleKeyDown.bind(this));\n        this._selector.onCellRangeSelected.unsubscribe(this.handleCellRangeSelected.bind(this));\n        this._selector.onBeforeCellRangeSelected.unsubscribe(this.handleBeforeCellRangeSelected.bind(this));\n        this._grid.unregisterPlugin(this._selector);\n        (_a = this._selector) === null || _a === void 0 ? void 0 : _a.destroy();\n    };\n    SlickCellSelectionModel.prototype.removeInvalidRanges = function (ranges) {\n        var result = [];\n        for (var i = 0; i < ranges.length; i++) {\n            var r = ranges[i];\n            if (this._grid.canCellBeSelected(r.fromRow, r.fromCell) && this._grid.canCellBeSelected(r.toRow, r.toCell)) {\n                result.push(r);\n            }\n        }\n        return result;\n    };\n    SlickCellSelectionModel.prototype.rangesAreEqual = function (range1, range2) {\n        var areDifferent = (range1.length !== range2.length);\n        if (!areDifferent) {\n            for (var i = 0; i < range1.length; i++) {\n                if (range1[i].fromCell !== range2[i].fromCell\n                    || range1[i].fromRow !== range2[i].fromRow\n                    || range1[i].toCell !== range2[i].toCell\n                    || range1[i].toRow !== range2[i].toRow) {\n                    areDifferent = true;\n                    break;\n                }\n            }\n        }\n        return !areDifferent;\n    };\n    SlickCellSelectionModel.prototype.setSelectedRanges = function (ranges, caller) {\n        if (caller === void 0) { caller = 'SlickCellSelectionModel.setSelectedRanges'; }\n        // simple check for: empty selection didn't change, prevent firing onSelectedRangesChanged\n        if ((!this._ranges || this._ranges.length === 0) && (!ranges || ranges.length === 0)) {\n            return;\n        }\n        // if range has not changed, don't fire onSelectedRangesChanged\n        var rangeHasChanged = !this.rangesAreEqual(this._ranges, ranges);\n        this._ranges = this.removeInvalidRanges(ranges);\n        if (rangeHasChanged) {\n            // provide extra \"caller\" argument through SlickEventData to avoid breaking pubsub event that only accepts an array of selected range\n            var eventData = new SlickEventData(null, this._ranges);\n            Object.defineProperty(eventData, 'detail', { writable: true, configurable: true, value: { caller: caller || \"SlickCellSelectionModel.setSelectedRanges\" } });\n            this.onSelectedRangesChanged.notify(this._ranges, eventData);\n        }\n    };\n    SlickCellSelectionModel.prototype.getSelectedRanges = function () {\n        return this._ranges;\n    };\n    SlickCellSelectionModel.prototype.refreshSelections = function () {\n        this.setSelectedRanges(this.getSelectedRanges());\n    };\n    SlickCellSelectionModel.prototype.handleBeforeCellRangeSelected = function (e) {\n        if (this._grid.getEditorLock().isActive()) {\n            e.stopPropagation();\n            return false;\n        }\n    };\n    SlickCellSelectionModel.prototype.handleCellRangeSelected = function (_e, args) {\n        this._grid.setActiveCell(args.range.fromRow, args.range.fromCell, false, false, true);\n        this.setSelectedRanges([args.range]);\n    };\n    SlickCellSelectionModel.prototype.handleActiveCellChange = function (_e, args) {\n        var _a, _b;\n        if (((_a = this._options) === null || _a === void 0 ? void 0 : _a.selectActiveCell) && args.row != null && args.cell != null) {\n            this.setSelectedRanges([new SlickRange(args.row, args.cell)]);\n        }\n        else if (!((_b = this._options) === null || _b === void 0 ? void 0 : _b.selectActiveCell)) {\n            // clear the previous selection once the cell changes\n            this.setSelectedRanges([]);\n        }\n    };\n    SlickCellSelectionModel.prototype.handleKeyDown = function (e) {\n        /***\n         * \u041Aey codes\n         * 37 left\n         * 38 up\n         * 39 right\n         * 40 down\n         */\n        var ranges, last;\n        var active = this._grid.getActiveCell();\n        var metaKey = e.ctrlKey || e.metaKey;\n        if (active && e.shiftKey && !metaKey && !e.altKey &&\n            (e.which == 37 || e.which == 39 || e.which == 38 || e.which == 40)) {\n            ranges = this.getSelectedRanges().slice();\n            if (!ranges.length)\n                ranges.push(new SlickRange(active.row, active.cell));\n            // keyboard can work with last range only\n            last = ranges.pop();\n            // can't handle selection out of active cell\n            if (!last.contains(active.row, active.cell))\n                last = new SlickRange(active.row, active.cell);\n            var dRow = last.toRow - last.fromRow, dCell = last.toCell - last.fromCell;\n            // walking direction\n            var dirRow = active.row == last.fromRow ? 1 : -1;\n            var dirCell = active.cell == last.fromCell ? 1 : -1;\n            if (e.which == 37) {\n                dCell -= dirCell;\n            }\n            else if (e.which == 39) {\n                dCell += dirCell;\n            }\n            else if (e.which == 38) {\n                dRow -= dirRow;\n            }\n            else if (e.which == 40) {\n                dRow += dirRow;\n            }\n            // define new selection range\n            var new_last = new SlickRange(active.row, active.cell, active.row + dirRow * dRow, active.cell + dirCell * dCell);\n            if (this.removeInvalidRanges([new_last]).length) {\n                ranges.push(new_last);\n                var viewRow = dirRow > 0 ? new_last.toRow : new_last.fromRow;\n                var viewCell = dirCell > 0 ? new_last.toCell : new_last.fromCell;\n                this._grid.scrollRowIntoView(viewRow);\n                this._grid.scrollCellIntoView(viewRow, viewCell);\n            }\n            else\n                ranges.push(last);\n            this.setSelectedRanges(ranges);\n            e.preventDefault();\n            e.stopPropagation();\n        }\n    };\n    return SlickCellSelectionModel;\n}());\nexports.SlickCellSelectionModel = SlickCellSelectionModel;\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n    Utils.extend(true, window, {\n        Slick: {\n            CellSelectionModel: SlickCellSelectionModel\n        }\n    });\n}\n"],
  "mappings": "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",
  "names": ["SlickCellSelectionModel"]
}
