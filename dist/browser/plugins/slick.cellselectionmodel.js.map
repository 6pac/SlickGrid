{
  "version": 3,
  "sources": ["../../../src/plugins/slick.cellselectionmodel.ts"],
  "sourcesContent": ["import { SlickEvent as SlickEvent_, SlickEventData as SlickEventData_, SlickRange as SlickRange_, Utils as Utils_ } from '../slick.core.js';\r\nimport { SlickCellRangeSelector as SlickCellRangeSelector_ } from './slick.cellrangeselector.js';\r\nimport type { CustomDataView, OnActiveCellChangedEventArgs } from '../models/index.js';\r\nimport type { SlickDataView } from '../slick.dataview.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst SlickEventData = IIFE_ONLY ? Slick.EventData : SlickEventData_;\r\nconst SlickRange = IIFE_ONLY ? Slick.Range : SlickRange_;\r\nconst SlickCellRangeSelector = IIFE_ONLY ? Slick.CellRangeSelector : SlickCellRangeSelector_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\nexport interface CellSelectionModelOption {\r\n  selectActiveCell: boolean;\r\n  cellRangeSelector?: SlickCellRangeSelector_;\r\n}\r\n\r\nexport class SlickCellSelectionModel {\r\n  // --\r\n  // public API\r\n  pluginName = 'CellSelectionModel' as const;\r\n  onSelectedRangesChanged = new SlickEvent<SlickRange_[]>('onSelectedRangesChanged');\r\n\r\n  // --\r\n  // protected props\r\n  protected _cachedPageRowCount = 0;\r\n  protected _dataView?: CustomDataView | SlickDataView;\r\n  protected _grid!: SlickGrid;\r\n  protected _prevSelectedRow?: number;\r\n  protected _prevKeyDown = '';\r\n  protected _ranges: SlickRange_[] = [];\r\n  protected _selector: SlickCellRangeSelector_;\r\n  protected _options?: CellSelectionModelOption;\r\n  protected _defaults: CellSelectionModelOption = {\r\n    selectActiveCell: true\r\n  };\r\n\r\n  constructor(options?: { selectActiveCell: boolean; cellRangeSelector: SlickCellRangeSelector_; }) {\r\n    if (options === undefined || options.cellRangeSelector === undefined) {\r\n      this._selector = new SlickCellRangeSelector({ selectionCss: { border: '2px solid black' } as CSSStyleDeclaration });\r\n    } else {\r\n      this._selector = options.cellRangeSelector;\r\n    }\r\n  }\r\n\r\n  init(grid: SlickGrid) {\r\n    this._options = Utils.extend(true, {}, this._defaults, this._options);\r\n    this._grid = grid;\r\n    if (grid.hasDataView()) {\r\n      this._dataView = grid.getData<CustomDataView | SlickDataView>();\r\n    }\r\n    this._grid.onActiveCellChanged.subscribe(this.handleActiveCellChange.bind(this));\r\n    this._grid.onKeyDown.subscribe(this.handleKeyDown.bind(this));\r\n    grid.registerPlugin(this._selector);\r\n    this._selector.onCellRangeSelected.subscribe(this.handleCellRangeSelected.bind(this));\r\n    this._selector.onBeforeCellRangeSelected.subscribe(this.handleBeforeCellRangeSelected.bind(this));\r\n  }\r\n\r\n  destroy() {\r\n    this._grid.onActiveCellChanged.unsubscribe(this.handleActiveCellChange.bind(this));\r\n    this._grid.onKeyDown.unsubscribe(this.handleKeyDown.bind(this));\r\n    this._selector.onCellRangeSelected.unsubscribe(this.handleCellRangeSelected.bind(this));\r\n    this._selector.onBeforeCellRangeSelected.unsubscribe(this.handleBeforeCellRangeSelected.bind(this));\r\n    this._grid.unregisterPlugin(this._selector);\r\n    this._selector?.destroy();\r\n  }\r\n\r\n  protected removeInvalidRanges(ranges: SlickRange_[]) {\r\n    const result: SlickRange_[] = [];\r\n\r\n    for (let i = 0; i < ranges.length; i++) {\r\n      const r = ranges[i];\r\n      if (this._grid.canCellBeSelected(r.fromRow, r.fromCell) && this._grid.canCellBeSelected(r.toRow, r.toCell)) {\r\n        result.push(r);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  protected rangesAreEqual(range1: SlickRange_[], range2: SlickRange_[]) {\r\n    let areDifferent = (range1.length !== range2.length);\r\n    if (!areDifferent) {\r\n      for (let i = 0; i < range1.length; i++) {\r\n        if (\r\n          range1[i].fromCell !== range2[i].fromCell\r\n          || range1[i].fromRow !== range2[i].fromRow\r\n          || range1[i].toCell !== range2[i].toCell\r\n          || range1[i].toRow !== range2[i].toRow\r\n        ) {\r\n          areDifferent = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return !areDifferent;\r\n  }\r\n\r\n  /** Provide a way to force a recalculation of page row count (for example on grid resize) */\r\n  resetPageRowCount() {\r\n    this._cachedPageRowCount = 0;\r\n  }\r\n\r\n  setSelectedRanges(ranges: SlickRange_[], caller = 'SlickCellSelectionModel.setSelectedRanges') {\r\n    // simple check for: empty selection didn't change, prevent firing onSelectedRangesChanged\r\n    if ((!this._ranges || this._ranges.length === 0) && (!ranges || ranges.length === 0)) { return; }\r\n\r\n    // if range has not changed, don't fire onSelectedRangesChanged\r\n    const rangeHasChanged = !this.rangesAreEqual(this._ranges, ranges);\r\n\r\n    this._ranges = this.removeInvalidRanges(ranges);\r\n    if (rangeHasChanged) {\r\n      // provide extra \"caller\" argument through SlickEventData event to avoid breaking the previous pubsub event structure\r\n      // that only accepts an array of selected range `SlickRange[]`, the SlickEventData args will be merged and used later by `onSelectedRowsChanged`\r\n      const eventData = new SlickEventData(new CustomEvent('click', { detail: { caller } }), this._ranges);\r\n      this.onSelectedRangesChanged.notify(this._ranges, eventData);\r\n    }\r\n  }\r\n\r\n  getSelectedRanges() {\r\n    return this._ranges;\r\n  }\r\n\r\n  refreshSelections() {\r\n    this.setSelectedRanges(this.getSelectedRanges());\r\n  }\r\n\r\n  protected handleBeforeCellRangeSelected(e: SlickEventData_): boolean | void {\r\n    if (this._grid.getEditorLock().isActive()) {\r\n      e.stopPropagation();\r\n      return false;\r\n    }\r\n  }\r\n\r\n  protected handleCellRangeSelected(_e: SlickEventData_, args: { range: SlickRange_; }) {\r\n    this._grid.setActiveCell(args.range.fromRow, args.range.fromCell, false, false, true);\r\n    this.setSelectedRanges([args.range]);\r\n  }\r\n\r\n  protected handleActiveCellChange(_e: SlickEventData_, args: OnActiveCellChangedEventArgs) {\r\n    this._prevSelectedRow = undefined;\r\n    const isCellDefined = Utils.isDefined(args.cell);\r\n    const isRowDefined = Utils.isDefined(args.row);\r\n\r\n    if (this._options?.selectActiveCell && isRowDefined && isCellDefined) {\r\n      this.setSelectedRanges([new SlickRange(args.row, args.cell)]);\r\n    } else if (!this._options?.selectActiveCell || (!isRowDefined && !isCellDefined)) {\r\n      // clear the previous selection once the cell changes\r\n      this.setSelectedRanges([]);\r\n    }\r\n  }\r\n\r\n  protected isKeyAllowed(key: string) {\r\n    return ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'PageDown', 'PageUp', 'Home', 'End', 'a', 'A'].some(k => k === key);\r\n  }\r\n\r\n  protected handleKeyDown(e: SlickEventData_) {\r\n    let ranges: SlickRange_[], last: SlickRange_;\r\n    const colLn = this._grid.getColumns().length;\r\n    const active = this._grid.getActiveCell();\r\n    let dataLn = 0;\r\n    if (this._dataView && 'getPagingInfo' in this._dataView) {\r\n      dataLn = this._dataView?.getPagingInfo().pageSize || this._dataView.getLength();\r\n    } else {\r\n      dataLn = this._grid.getDataLength();\r\n    }\r\n\r\n    if (active && (e.shiftKey || e.ctrlKey) && !e.altKey && this.isKeyAllowed(e.key as string)) {\r\n      ranges = this.getSelectedRanges().slice();\r\n      if (!ranges.length) {\r\n        ranges.push(new SlickRange(active.row, active.cell));\r\n      }\r\n      // keyboard can work with last range only\r\n      last = ranges.pop() as SlickRange_;\r\n\r\n      // can't handle selection out of active cell\r\n      if (!last.contains(active.row, active.cell)) {\r\n        last = new SlickRange(active.row, active.cell);\r\n      }\r\n\r\n      let dRow = last.toRow - last.fromRow;\r\n      let dCell = last.toCell - last.fromCell;\r\n      let toCell: undefined | number;\r\n      let toRow = 0;\r\n\r\n      // when using Ctrl+{a, A} we will change our position to cell 0,0 and select all grid cells\r\n      if (e.ctrlKey && e.key?.toLowerCase() === 'a') {\r\n        this._grid.setActiveCell(0, 0, false, false, true);\r\n        active.row = 0;\r\n        active.cell = 0;\r\n        toCell = colLn - 1;\r\n        toRow = dataLn - 1;\r\n      }\r\n\r\n      // walking direction\r\n      const dirRow = active.row === last.fromRow ? 1 : -1;\r\n      const dirCell = active.cell === last.fromCell ? 1 : -1;\r\n      const isSingleKeyMove = e.key!.startsWith('Arrow');\r\n\r\n      if (isSingleKeyMove && !e.ctrlKey) {\r\n        // single cell move: (Arrow{Up/ArrowDown/ArrowLeft/ArrowRight})\r\n        if (e.key === 'ArrowLeft') {\r\n          dCell -= dirCell;\r\n        } else if (e.key === 'ArrowRight') {\r\n          dCell += dirCell;\r\n        } else if (e.key === 'ArrowUp') {\r\n          dRow -= dirRow;\r\n        } else if (e.key === 'ArrowDown') {\r\n          dRow += dirRow;\r\n        }\r\n        toRow = active.row + dirRow * dRow;\r\n      } else {\r\n        // multiple cell moves: (Home, End, Page{Up/Down})\r\n        if (this._cachedPageRowCount < 1) {\r\n          this._cachedPageRowCount = this._grid.getViewportRowCount();\r\n        }\r\n        if (this._prevSelectedRow === undefined) {\r\n          this._prevSelectedRow = active.row;\r\n        }\r\n\r\n        if ((!e.ctrlKey && e.shiftKey && e.key === 'Home') || (e.ctrlKey && e.shiftKey && e.key === 'ArrowLeft')) {\r\n          toCell = 0;\r\n          toRow = active.row;\r\n        } else if ((!e.ctrlKey && e.shiftKey && e.key === 'End') || (e.ctrlKey && e.shiftKey && e.key === 'ArrowRight')) {\r\n          toCell = colLn - 1;\r\n          toRow = active.row;\r\n        } else if (e.ctrlKey && e.shiftKey && e.key === 'ArrowUp') {\r\n          toRow = 0;\r\n        } else if (e.ctrlKey && e.shiftKey && e.key === 'ArrowDown') {\r\n          toRow = dataLn - 1;\r\n        } else if (e.ctrlKey && e.shiftKey && e.key === 'Home') {\r\n          toCell = 0;\r\n          toRow = 0;\r\n        } else if (e.ctrlKey && e.shiftKey && e.key === 'End') {\r\n          toCell = colLn - 1;\r\n          toRow = dataLn - 1;\r\n        } else if (e.key === 'PageUp') {\r\n          if (this._prevSelectedRow >= 0) {\r\n            toRow = this._prevSelectedRow - this._cachedPageRowCount;\r\n          }\r\n          if (toRow < 0) {\r\n            toRow = 0;\r\n          }\r\n        } else if (e.key === 'PageDown') {\r\n          if (this._prevSelectedRow <= dataLn - 1) {\r\n            toRow = this._prevSelectedRow + this._cachedPageRowCount;\r\n          }\r\n          if (toRow > dataLn - 1) {\r\n            toRow = dataLn - 1;\r\n          }\r\n        }\r\n        this._prevSelectedRow = toRow;\r\n      }\r\n\r\n      // define new selection range\r\n      toCell ??= active.cell + dirCell * dCell;\r\n      const new_last = new SlickRange(active.row, active.cell, toRow, toCell);\r\n      if (this.removeInvalidRanges([new_last]).length) {\r\n        ranges.push(new_last);\r\n        const viewRow = dirRow > 0 ? new_last.toRow : new_last.fromRow;\r\n        const viewCell = dirCell > 0 ? new_last.toCell : new_last.fromCell;\r\n\r\n        if (isSingleKeyMove) {\r\n          this._grid.scrollRowIntoView(viewRow);\r\n          this._grid.scrollCellIntoView(viewRow, viewCell);\r\n        } else {\r\n          this._grid.scrollRowIntoView(toRow);\r\n          this._grid.scrollCellIntoView(toRow, viewCell);\r\n        }\r\n      } else {\r\n        ranges.push(last);\r\n      }\r\n\r\n      this.setSelectedRanges(ranges);\r\n\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      this._prevKeyDown = e.key as string;\r\n    }\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      CellSelectionModel: SlickCellSelectionModel\r\n    }\r\n  });\r\n}"],
  "mappings": "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",
  "names": []
}
