{
  "version": 3,
  "sources": ["../../../src/plugins/slick.cellrangedecorator.js"],
  "sourcesContent": ["import { Utils as Utils_ } from '../slick.core';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n/***\n   * Displays an overlay on top of a given cell range.\n   *\n   * TODO:\n   * Currently, it blocks mouse events to DOM nodes behind it.\n   * Use FF and WebKit-specific \"pointer-events\" CSS style, or some kind of event forwarding.\n   * Could also construct the borders separately using 4 individual DIVs.\n   *\n   * @param {Grid} grid\n   * @param {Object} options\n   */\nexport function CellRangeDecorator(grid, options) {\n    var _elem;\n    var _defaults = {\n      selectionCssClass: 'slick-range-decorator',\n      selectionCss: {\n        \"zIndex\": \"9999\",\n        \"border\": \"2px dashed red\"\n      },\n      offset: { top: -1, left: -1, height: -2, width: -2 }\n    };\n\n  options = Utils.extend(true, {}, _defaults, options);\n\n    function show(range) {\n      if (!_elem) {\n        _elem = document.createElement('div')\n        _elem.className = options.selectionCssClass;\n        Object.keys(options.selectionCss).forEach((cssStyleKey) => {\n          _elem.style[cssStyleKey] = options.selectionCss[cssStyleKey];\n        });\n        _elem.style.position = 'absolute';\n        const canvasNode = grid.getActiveCanvasNode();\n        if (canvasNode) {\n          canvasNode.appendChild(_elem);\n        }\n      }\n\n      var from = grid.getCellNodeBox(range.fromRow, range.fromCell);\n      var to = grid.getCellNodeBox(range.toRow, range.toCell);\n\n      if (from && to && options && options.offset) {\n        _elem.style.top = `${from.top + options.offset.top}px`;\n        _elem.style.left = `${from.left + options.offset.left}px`;\n        _elem.style.height = `${to.bottom - from.top + options.offset.height}px`;\n        _elem.style.width = `${to.right - from.left + options.offset.width}px`;\n      }\n\n      return _elem;\n    }\n\n    function destroy() {\n      hide();\n    }\n\n    function hide() {\n      if (_elem) {\n        _elem.remove();\n        _elem = null;\n      }\n    }\n\n  Utils.extend(this, {\n      \"pluginName\": \"CellRangeDecorator\",\n      \"show\": show,\n      \"hide\": hide,\n      \"destroy\": destroy\n    });\n  }\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      CellRangeDecorator\n    }\n  });\n}\n"],
  "mappings": ";;;AAGA,MAAM,QAAoB,MAAM;AAazB,WAAS,mBAAmB,MAAM,SAAS;AAC9C,QAAI,OACA,YAAY;AAAA,MACd,mBAAmB;AAAA,MACnB,cAAc;AAAA,QACZ,QAAU;AAAA,QACV,QAAU;AAAA,MACZ;AAAA,MACA,QAAQ,EAAE,KAAK,IAAI,MAAM,IAAI,QAAQ,IAAI,OAAO,GAAG;AAAA,IACrD;AAEF,cAAU,MAAM,OAAO,IAAM,CAAC,GAAG,WAAW,OAAO;AAEjD,aAAS,KAAK,OAAO;AACnB,UAAI,CAAC,OAAO;AACV,gBAAQ,SAAS,cAAc,KAAK,GACpC,MAAM,YAAY,QAAQ,mBAC1B,OAAO,KAAK,QAAQ,YAAY,EAAE,QAAQ,CAAC,gBAAgB;AACzD,gBAAM,MAAM,WAAW,IAAI,QAAQ,aAAa,WAAW;AAAA,QAC7D,CAAC,GACD,MAAM,MAAM,WAAW;AACvB,YAAM,aAAa,KAAK,oBAAoB;AAC5C,QAAI,cACF,WAAW,YAAY,KAAK;AAAA,MAEhC;AAEA,UAAI,OAAO,KAAK,eAAe,MAAM,SAAS,MAAM,QAAQ,GACxD,KAAK,KAAK,eAAe,MAAM,OAAO,MAAM,MAAM;AAEtD,aAAI,QAAQ,MAAM,WAAW,QAAQ,WACnC,MAAM,MAAM,MAAM,GAAG,KAAK,MAAM,QAAQ,OAAO,GAAG,MAClD,MAAM,MAAM,OAAO,GAAG,KAAK,OAAO,QAAQ,OAAO,IAAI,MACrD,MAAM,MAAM,SAAS,GAAG,GAAG,SAAS,KAAK,MAAM,QAAQ,OAAO,MAAM,MACpE,MAAM,MAAM,QAAQ,GAAG,GAAG,QAAQ,KAAK,OAAO,QAAQ,OAAO,KAAK,OAG7D;AAAA,IACT;AAEA,aAAS,UAAU;AACjB,WAAK;AAAA,IACP;AAEA,aAAS,OAAO;AACd,MAAI,UACF,MAAM,OAAO,GACb,QAAQ;AAAA,IAEZ;AAEF,UAAM,OAAO,MAAM;AAAA,MACf,YAAc;AAAA,MACd;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAGF,EAAiB,OAAO,SACtB,MAAM,OAAO,IAAM,QAAQ;AAAA,IACzB,OAAO;AAAA,MACL;AAAA,IACF;AAAA,EACF,CAAC;",
  "names": []
}
