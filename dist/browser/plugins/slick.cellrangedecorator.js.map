{
  "version": 3,
  "sources": ["import-ns:../slick.core.js", "../../../src/plugins/slick.cellrangedecorator.js"],
  "sourcesContent": ["// empty string, do nothing", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SlickCellRangeDecorator = void 0;\nvar slick_core_1 = require(\"../slick.core\");\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nvar Utils = IIFE_ONLY ? Slick.Utils : slick_core_1.Utils;\n/***\n   * Displays an overlay on top of a given cell range.\n   *\n   * TODO:\n   * Currently, it blocks mouse events to DOM nodes behind it.\n   * Use FF and WebKit-specific \"pointer-events\" CSS style, or some kind of event forwarding.\n   * Could also construct the borders separately using 4 individual DIVs.\n   *\n   * @param {Grid} grid\n   * @param {Object} options\n   */\nvar SlickCellRangeDecorator = /** @class */ (function () {\n    function SlickCellRangeDecorator(grid, options) {\n        this.grid = grid;\n        // --\n        // public API\n        this.pluginName = 'CellRangeDecorator';\n        this._defaults = {\n            selectionCssClass: 'slick-range-decorator',\n            selectionCss: {\n                zIndex: '9999',\n                border: '2px dashed red'\n            },\n            offset: { top: -1, left: -1, height: -2, width: -2 }\n        };\n        this._options = Utils.extend(true, {}, this._defaults, options);\n    }\n    SlickCellRangeDecorator.prototype.destroy = function () {\n        this.hide();\n    };\n    SlickCellRangeDecorator.prototype.init = function () { };\n    SlickCellRangeDecorator.prototype.hide = function () {\n        var _a;\n        (_a = this._elem) === null || _a === void 0 ? void 0 : _a.remove();\n        this._elem = null;\n    };\n    SlickCellRangeDecorator.prototype.show = function (range) {\n        var _this = this;\n        var _a;\n        if (!this._elem) {\n            this._elem = document.createElement('div');\n            this._elem.className = this._options.selectionCssClass;\n            Object.keys(this._options.selectionCss).forEach(function (cssStyleKey) {\n                _this._elem.style[cssStyleKey] = _this._options.selectionCss[cssStyleKey];\n            });\n            this._elem.style.position = 'absolute';\n            var canvasNode = this.grid.getActiveCanvasNode();\n            if (canvasNode) {\n                canvasNode.appendChild(this._elem);\n            }\n        }\n        var from = this.grid.getCellNodeBox(range.fromRow, range.fromCell);\n        var to = this.grid.getCellNodeBox(range.toRow, range.toCell);\n        if (from && to && ((_a = this._options) === null || _a === void 0 ? void 0 : _a.offset)) {\n            this._elem.style.top = \"\".concat(from.top + this._options.offset.top, \"px\");\n            this._elem.style.left = \"\".concat(from.left + this._options.offset.left, \"px\");\n            this._elem.style.height = \"\".concat(to.bottom - from.top + this._options.offset.height, \"px\");\n            this._elem.style.width = \"\".concat(to.right - from.left + this._options.offset.width, \"px\");\n        }\n        return this._elem;\n    };\n    return SlickCellRangeDecorator;\n}());\nexports.SlickCellRangeDecorator = SlickCellRangeDecorator;\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n    Utils.extend(true, window, {\n        Slick: {\n            CellRangeDecorator: SlickCellRangeDecorator\n        }\n    });\n}\n"],
  "mappings": ";;;;;;;;AAAA;AAAA;AAAA;AAAA;;;ACAA;AAAA;AACA,aAAO,eAAe,SAAS,cAAc,EAAE,OAAO,GAAK,CAAC;AAC5D,cAAQ,0BAA0B;AAClC,UAAI,eAAe,sBAEf,QAAoB,MAAM,OAY1B;AAAA;AAAA,QAAyC,WAAY;AACrD,mBAASA,yBAAwB,MAAM,SAAS;AAC5C,iBAAK,OAAO,MAGZ,KAAK,aAAa,sBAClB,KAAK,YAAY;AAAA,cACb,mBAAmB;AAAA,cACnB,cAAc;AAAA,gBACV,QAAQ;AAAA,gBACR,QAAQ;AAAA,cACZ;AAAA,cACA,QAAQ,EAAE,KAAK,IAAI,MAAM,IAAI,QAAQ,IAAI,OAAO,GAAG;AAAA,YACvD,GACA,KAAK,WAAW,MAAM,OAAO,IAAM,CAAC,GAAG,KAAK,WAAW,OAAO;AAAA,UAClE;AACA,iBAAAA,yBAAwB,UAAU,UAAU,WAAY;AACpD,iBAAK,KAAK;AAAA,UACd,GACAA,yBAAwB,UAAU,OAAO,WAAY;AAAA,UAAE,GACvDA,yBAAwB,UAAU,OAAO,WAAY;AACjD,gBAAI;AACJ,aAAC,KAAK,KAAK,WAAW,QAAQ,OAAO,UAAkB,GAAG,OAAO,GACjE,KAAK,QAAQ;AAAA,UACjB,GACAA,yBAAwB,UAAU,OAAO,SAAU,OAAO;AACtD,gBAAI,QAAQ,MACR;AACJ,gBAAI,CAAC,KAAK,OAAO;AACb,mBAAK,QAAQ,SAAS,cAAc,KAAK,GACzC,KAAK,MAAM,YAAY,KAAK,SAAS,mBACrC,OAAO,KAAK,KAAK,SAAS,YAAY,EAAE,QAAQ,SAAU,aAAa;AACnE,sBAAM,MAAM,MAAM,WAAW,IAAI,MAAM,SAAS,aAAa,WAAW;AAAA,cAC5E,CAAC,GACD,KAAK,MAAM,MAAM,WAAW;AAC5B,kBAAI,aAAa,KAAK,KAAK,oBAAoB;AAC/C,cAAI,cACA,WAAW,YAAY,KAAK,KAAK;AAAA,YAEzC;AACA,gBAAI,OAAO,KAAK,KAAK,eAAe,MAAM,SAAS,MAAM,QAAQ,GAC7D,KAAK,KAAK,KAAK,eAAe,MAAM,OAAO,MAAM,MAAM;AAC3D,mBAAI,QAAQ,OAAQ,QAAK,KAAK,cAAc,QAAQ,OAAO,WAAkB,GAAG,YAC5E,KAAK,MAAM,MAAM,MAAM,GAAG,OAAO,KAAK,MAAM,KAAK,SAAS,OAAO,KAAK,IAAI,GAC1E,KAAK,MAAM,MAAM,OAAO,GAAG,OAAO,KAAK,OAAO,KAAK,SAAS,OAAO,MAAM,IAAI,GAC7E,KAAK,MAAM,MAAM,SAAS,GAAG,OAAO,GAAG,SAAS,KAAK,MAAM,KAAK,SAAS,OAAO,QAAQ,IAAI,GAC5F,KAAK,MAAM,MAAM,QAAQ,GAAG,OAAO,GAAG,QAAQ,KAAK,OAAO,KAAK,SAAS,OAAO,OAAO,IAAI,IAEvF,KAAK;AAAA,UAChB,GACOA;AAAA,QACX,EAAE;AAAA;AACF,cAAQ,0BAA0B;AAElC,MAAiB,OAAO,SACpB,MAAM,OAAO,IAAM,QAAQ;AAAA,QACvB,OAAO;AAAA,UACH,oBAAoB;AAAA,QACxB;AAAA,MACJ,CAAC;AAAA;AAAA;",
  "names": ["SlickCellRangeDecorator"]
}
