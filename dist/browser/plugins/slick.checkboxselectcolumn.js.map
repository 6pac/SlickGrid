{
  "version": 3,
  "sources": ["../../../src/plugins/slick.checkboxselectcolumn.js"],
  "sourcesContent": ["import { BindingEventService as BindingEventService_, EventHandler as EventHandler_, Utils as Utils_ } from '../slick.core';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : EventHandler_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\nexport function CheckboxSelectColumn(options) {\n    let _dataView;\n    let _grid;\n    let _isUsingDataView = false;\n    let _selectableOverride = null;\n    let _headerRowNode;\n    let _selectAll_UID = createUID();\n  let _handler = new EventHandler();\n    let _selectedRowsLookup = {};\n    let _defaults = {\n      columnId: \"_checkbox_selector\",\n      cssClass: null,\n      hideSelectAllCheckbox: false,\n      toolTip: \"Select/Deselect All\",\n      width: 30,\n      applySelectOnAllPages: false, // defaults to false, when that is enabled the \"Select All\" will be applied to all pages (when using Pagination)\n      hideInColumnTitleRow: false,\n      hideInFilterHeaderRow: true\n    };\n    let _isSelectAllChecked = false;\n\n  let _bindingEventService = new BindingEventService();\n  let _options = Utils.extend(true, {}, _defaults, options);\n\n    // user could override the checkbox icon logic from within the options or after instantiating the plugin\n    if (typeof _options.selectableOverride === 'function') {\n      selectableOverride(_options.selectableOverride);\n    }\n\n    function init(grid) {\n      _grid = grid;\n      _isUsingDataView = !Array.isArray(grid.getData());\n      if (_isUsingDataView) {\n        _dataView = grid.getData();\n      }\n      _handler\n        .subscribe(_grid.onSelectedRowsChanged, handleSelectedRowsChanged)\n        .subscribe(_grid.onClick, handleClick)\n        .subscribe(_grid.onKeyDown, handleKeyDown);\n\n      if (_isUsingDataView && _dataView && _options.applySelectOnAllPages) {\n        _handler\n          .subscribe(_dataView.onSelectedRowIdsChanged, handleDataViewSelectedIdsChanged)\n          .subscribe(_dataView.onPagingInfoChanged, handleDataViewSelectedIdsChanged)\n      }\n\n      if (!_options.hideInFilterHeaderRow) {\n        addCheckboxToFilterHeaderRow(grid);\n      }\n      if (!_options.hideInColumnTitleRow) {\n        _handler.subscribe(_grid.onHeaderClick, handleHeaderClick);\n      }\n    }\n\n    function destroy() {\n      _handler.unsubscribeAll();\n      _bindingEventService.unbindAll();\n    }\n\n    function getOptions() {\n      return _options;\n    }\n\n    function setOptions(options) {\n      _options = Utils.extend(true, {}, _options, options);\n\n      if (_options.hideSelectAllCheckbox) {\n        hideSelectAllFromColumnHeaderTitleRow();\n        hideSelectAllFromColumnHeaderFilterRow();\n      } else {\n        if (!_options.hideInColumnTitleRow) {\n          renderSelectAllCheckbox(_isSelectAllChecked);\n          _handler.subscribe(_grid.onHeaderClick, handleHeaderClick);\n        } else {\n          hideSelectAllFromColumnHeaderTitleRow();\n        }\n\n        if (!_options.hideInFilterHeaderRow) {\n          let selectAllContainerElm = _headerRowNode.querySelector(\"#filter-checkbox-selectall-container\");\n          if (selectAllContainerElm) {\n            selectAllContainerElm.style.display = 'flex';\n            const selectAllInputElm = selectAllContainerElm.querySelector('input[type=\"checkbox\"]');\n            if (selectAllInputElm) {\n              selectAllInputElm.checked = _isSelectAllChecked;\n            }\n          }\n        } else {\n          hideSelectAllFromColumnHeaderFilterRow();\n        }\n      }\n    }\n\n    function hideSelectAllFromColumnHeaderTitleRow() {\n      _grid.updateColumnHeader(_options.columnId, \"\", \"\");\n    }\n\n    function hideSelectAllFromColumnHeaderFilterRow() {\n      const selectAllContainerElm = _headerRowNode && _headerRowNode.querySelector('#filter-checkbox-selectall-container');\n      if (selectAllContainerElm) {\n        selectAllContainerElm.style.display = 'none';\n      }\n    }\n\n    function handleSelectedRowsChanged() {\n      let selectedRows = _grid.getSelectedRows();\n      let lookup = {}, row, i, k;\n      let disabledCount = 0;\n      if (typeof _selectableOverride === 'function') {\n        for (k = 0; k < _grid.getDataLength(); k++) {\n          // If we are allowed to select the row\n          let dataItem = _grid.getDataItem(k);\n          if (!checkSelectableOverride(i, dataItem, _grid)) {\n            disabledCount++;\n          }\n        }\n      }\n\n      let removeList = [];\n      for (i = 0; i < selectedRows.length; i++) {\n        row = selectedRows[i];\n\n        // If we are allowed to select the row\n        let rowItem = _grid.getDataItem(row);\n        if (checkSelectableOverride(i, rowItem, _grid)) {\n          lookup[row] = true;\n          if (lookup[row] !== _selectedRowsLookup[row]) {\n            _grid.invalidateRow(row);\n            delete _selectedRowsLookup[row];\n          }\n        }\n        else {\n          removeList.push(row);\n        }\n      }\n      for (i in _selectedRowsLookup) {\n        _grid.invalidateRow(i);\n      }\n      _selectedRowsLookup = lookup;\n      _grid.render();\n      _isSelectAllChecked = selectedRows && selectedRows.length + disabledCount >= _grid.getDataLength();\n\n      if (!_isUsingDataView || !_options.applySelectOnAllPages) {\n        if (!_options.hideInColumnTitleRow && !_options.hideSelectAllCheckbox) {\n          renderSelectAllCheckbox(_isSelectAllChecked);\n        }\n        if (!_options.hideInFilterHeaderRow) {\n          const selectAllElm = _headerRowNode && _headerRowNode.querySelector(`#header-filter-selector${_selectAll_UID}`);\n          if (selectAllElm) {\n            selectAllElm.checked = _isSelectAllChecked;\n          }\n        }\n      }\n\n      // Remove items that shouln't of been selected in the first place (Got here Ctrl + click)\n      if (removeList.length > 0) {\n        for (i = 0; i < removeList.length; i++) {\n          let remIdx = selectedRows.indexOf(removeList[i]);\n          selectedRows.splice(remIdx, 1);\n        }\n        _grid.setSelectedRows(selectedRows, \"click.cleanup\");\n      }\n    }\n\n    function handleDataViewSelectedIdsChanged() {\n      let selectedIds = _dataView.getAllSelectedFilteredIds();\n      let filteredItems = _dataView.getFilteredItems();\n      let disabledCount = 0;\n\n      if (typeof _selectableOverride === 'function' && selectedIds.length > 0) {\n        for (let k = 0; k < _dataView.getItemCount(); k++) {\n          // If we are allowed to select the row\n          let dataItem = _dataView.getItemByIdx(k);\n          let idProperty = _dataView.getIdPropertyName();\n          let dataItemId = dataItem[idProperty];\n          let foundItemIdx = filteredItems.findIndex(function (item) {\n            return item[idProperty] === dataItemId;\n          });\n          if (foundItemIdx >= 0 && !checkSelectableOverride(k, dataItem, _grid)) {\n            disabledCount++;\n          }\n        }\n      }\n      _isSelectAllChecked = (selectedIds && selectedIds.length) + disabledCount >= filteredItems.length;\n\n      if (!_options.hideInColumnTitleRow && !_options.hideSelectAllCheckbox) {\n        renderSelectAllCheckbox(_isSelectAllChecked);\n      }\n      if (!_options.hideInFilterHeaderRow) {\n        const selectAllElm = _headerRowNode && _headerRowNode.querySelector(`#header-filter-selector${_selectAll_UID}`);\n        if (selectAllElm) {\n          selectAllElm.checked = _isSelectAllChecked;\n        }\n      }\n    }\n\n    function handleKeyDown(e, args) {\n      if (e.which == 32) {\n        if (_grid.getColumns()[args.cell].id === _options.columnId) {\n          // if editing, try to commit\n          if (!_grid.getEditorLock().isActive() || _grid.getEditorLock().commitCurrentEdit()) {\n            toggleRowSelection(args.row);\n          }\n          e.preventDefault();\n          e.stopImmediatePropagation();\n        }\n      }\n    }\n\n    function handleClick(e, args) {\n      // clicking on a row select checkbox\n      if (_grid.getColumns()[args.cell].id === _options.columnId && e.target.type === 'checkbox') {\n        // if editing, try to commit\n        if (_grid.getEditorLock().isActive() && !_grid.getEditorLock().commitCurrentEdit()) {\n          e.preventDefault();\n          e.stopImmediatePropagation();\n          return;\n        }\n\n        toggleRowSelection(args.row);\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n      }\n    }\n\n    function toggleRowSelection(row) {\n      let dataContext = _grid.getDataItem(row);\n      if (!checkSelectableOverride(row, dataContext, _grid)) {\n        return;\n      }\n\n      if (_selectedRowsLookup[row]) {\n        const newSelectedRows = _grid.getSelectedRows().filter((n) => n !== row);\n        _grid.setSelectedRows(newSelectedRows, 'click.toggle');\n      } else {\n        _grid.setSelectedRows(_grid.getSelectedRows().concat(row), \"click.toggle\");\n      }\n      _grid.setActiveCell(row, getCheckboxColumnCellIndex());\n    }\n\n    function selectRows(rowArray) {\n      let i, l = rowArray.length, addRows = [];\n      for (i = 0; i < l; i++) {\n        if (!_selectedRowsLookup[rowArray[i]]) {\n          addRows[addRows.length] = rowArray[i];\n        }\n      }\n      _grid.setSelectedRows(_grid.getSelectedRows().concat(addRows), \"SlickCheckboxSelectColumn.selectRows\");\n    }\n\n    function deSelectRows(rowArray) {\n      let i, l = rowArray.length, removeRows = [];\n      for (i = 0; i < l; i++) {\n        if (_selectedRowsLookup[rowArray[i]]) {\n          removeRows[removeRows.length] = rowArray[i];\n        }\n      }\n\n      _grid.setSelectedRows(_grid.getSelectedRows().filter((n) => removeRows.indexOf(n) < 0), 'SlickCheckboxSelectColumn.deSelectRows');\n    }\n\n    function handleHeaderClick(e, args) {\n      if (args.column.id == _options.columnId && e.target.type === 'checkbox') {\n        // if editing, try to commit\n        if (_grid.getEditorLock().isActive() && !_grid.getEditorLock().commitCurrentEdit()) {\n          e.preventDefault();\n          e.stopImmediatePropagation();\n          return;\n        }\n\n        let isAllSelected = e.target.checked;\n        let caller = isAllSelected ? 'click.selectAll' : 'click.unselectAll';\n        let rows = [];\n\n        if (isAllSelected) {\n          for (let i = 0; i < _grid.getDataLength(); i++) {\n            // Get the row and check it's a selectable row before pushing it onto the stack\n            let rowItem = _grid.getDataItem(i);\n            if (!rowItem.__group && !rowItem.__groupTotals && checkSelectableOverride(i, rowItem, _grid)) {\n              rows.push(i);\n            }\n          }\n          isAllSelected = true;\n        }\n        if (_isUsingDataView && _dataView && _options.applySelectOnAllPages) {\n          let ids = [];\n          let filteredItems = _dataView.getFilteredItems();\n          for (let j = 0; j < filteredItems.length; j++) {\n            // Get the row and check it's a selectable ID (it could be in a different page) before pushing it onto the stack\n            let dataviewRowItem = filteredItems[j];\n            if (checkSelectableOverride(j, dataviewRowItem, _grid)) {\n              ids.push(dataviewRowItem[_dataView.getIdPropertyName()]);\n            }\n          }\n          _dataView.setSelectedIds(ids, { isRowBeingAdded: isAllSelected });\n        }\n        _grid.setSelectedRows(rows, caller);\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n      }\n    }\n\n    let _checkboxColumnCellIndex = null;\n\n    function getCheckboxColumnCellIndex() {\n      if (_checkboxColumnCellIndex === null) {\n        _checkboxColumnCellIndex = 0;\n        let colArr = _grid.getColumns();\n        for (let i = 0; i < colArr.length; i++) {\n          if (colArr[i].id == _options.columnId) {\n            _checkboxColumnCellIndex = i;\n          }\n        }\n      }\n      return _checkboxColumnCellIndex;\n    }\n\n    function getColumnDefinition() {\n      return {\n        id: _options.columnId,\n        name: (_options.hideSelectAllCheckbox || _options.hideInColumnTitleRow) ? \"\" : \"<input id='header-selector\" + _selectAll_UID + \"' type='checkbox'><label for='header-selector\" + _selectAll_UID + \"'></label>\",\n        toolTip: (_options.hideSelectAllCheckbox || _options.hideInColumnTitleRow) ? \"\" : _options.toolTip,\n        field: \"sel\",\n        width: _options.width,\n        resizable: false,\n        sortable: false,\n        cssClass: _options.cssClass,\n        hideSelectAllCheckbox: _options.hideSelectAllCheckbox,\n        formatter: checkboxSelectionFormatter,\n        // exclude from all menus, defaults to true unless the option is provided differently by the user\n        excludeFromColumnPicker: typeof _options.excludeFromColumnPicker !== 'undefined' ? _options.excludeFromColumnPicker : true,\n        excludeFromGridMenu: typeof _options.excludeFromGridMenu !== 'undefined' ? _options.excludeFromGridMenu : true,\n        excludeFromHeaderMenu: typeof _options.excludeFromHeaderMenu !== 'undefined' ? _options.excludeFromHeaderMenu : true,\n      };\n    }\n\n    function addCheckboxToFilterHeaderRow(grid) {\n      _handler.subscribe(grid.onHeaderRowCellRendered, function (e, args) {\n        if (args.column.field === \"sel\") {\n          Utils.emptyElement(args.node);\n          const spanElm = document.createElement('span');\n          spanElm.id = 'filter-checkbox-selectall-container';\n\n          const inputElm = document.createElement('input');\n          inputElm.type = 'checkbox';\n          inputElm.id = `header-filter-selector${_selectAll_UID}`;\n\n          const labelElm = document.createElement('label');\n          labelElm.htmlFor = `header-filter-selector${_selectAll_UID}`;\n\n          spanElm.appendChild(inputElm);\n          spanElm.appendChild(labelElm);\n          args.node.appendChild(spanElm);\n          _headerRowNode = args.node;\n\n          _bindingEventService.bind(spanElm, 'click', ((e) => handleHeaderClick(e, args)));\n        }\n      });\n    }\n\n    function createUID() {\n      return Math.round(10000000 * Math.random());\n    }\n\n    function checkboxSelectionFormatter(row, cell, value, columnDef, dataContext, grid) {\n      let UID = createUID() + row;\n\n      if (dataContext) {\n        if (!checkSelectableOverride(row, dataContext, grid)) {\n          return null;\n        } else {\n          return _selectedRowsLookup[row]\n            ? \"<input id='selector\" + UID + \"' type='checkbox' checked='checked'><label for='selector\" + UID + \"'></label>\"\n            : \"<input id='selector\" + UID + \"' type='checkbox'><label for='selector\" + UID + \"'></label>\";\n        }\n      }\n      return null;\n    }\n\n    function checkSelectableOverride(row, dataContext, grid) {\n      if (typeof _selectableOverride === 'function') {\n        return _selectableOverride(row, dataContext, grid);\n      }\n      return true;\n    }\n\n    function renderSelectAllCheckbox(isSelectAllChecked) {\n      if (isSelectAllChecked) {\n        _grid.updateColumnHeader(_options.columnId, \"<input id='header-selector\" + _selectAll_UID + \"' type='checkbox' checked='checked'><label for='header-selector\" + _selectAll_UID + \"'></label>\", _options.toolTip);\n      } else {\n        _grid.updateColumnHeader(_options.columnId, \"<input id='header-selector\" + _selectAll_UID + \"' type='checkbox'><label for='header-selector\" + _selectAll_UID + \"'></label>\", _options.toolTip);\n      }\n    }\n\n    /**\n     * Method that user can pass to override the default behavior or making every row a selectable row.\n     * In order word, user can choose which rows to be selectable or not by providing his own logic.\n     * @param overrideFn: override function callback\n     */\n    function selectableOverride(overrideFn) {\n      _selectableOverride = overrideFn;\n    }\n\n\n  Utils.extend(this, {\n      \"init\": init,\n      \"destroy\": destroy,\n      \"pluginName\": \"CheckboxSelectColumn\",\n\n      \"deSelectRows\": deSelectRows,\n      \"selectRows\": selectRows,\n      \"getColumnDefinition\": getColumnDefinition,\n      \"getOptions\": getOptions,\n      \"selectableOverride\": selectableOverride,\n      \"setOptions\": setOptions,\n    });\n  }\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      CheckboxSelectColumn\n    }\n  });\n}\n\n"],
  "mappings": "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",
  "names": ["options", "e"]
}
