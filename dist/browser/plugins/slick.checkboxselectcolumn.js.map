{
  "version": 3,
  "sources": ["../../../src/plugins/slick.checkboxselectcolumn.ts"],
  "sourcesContent": ["import type { CheckboxSelectorOption, Column, DOMEvent, SlickPlugin, SelectableOverrideCallback } from '../models/index';\nimport { BindingEventService as BindingEventService_, SlickEventHandler as SlickEventHandler_, Utils as Utils_ } from '../slick.core';\nimport type { SlickDataView } from '../slick.dataview';\nimport type { SlickGrid } from '../slick.grid';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\nconst SlickEventHandler = IIFE_ONLY ? Slick.EventHandler : SlickEventHandler_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\nexport class SlickCheckboxSelectColumn<T = any> implements SlickPlugin {\n  // --\n  // public API\n  pluginName = 'CheckboxSelectColumn' as const;\n\n  // --\n  // protected props\n  protected _dataView!: SlickDataView<T>;\n  protected _grid!: SlickGrid;\n  protected _isUsingDataView = false;\n  protected _selectableOverride: SelectableOverrideCallback<T> | null = null;\n  protected _headerRowNode?: HTMLElement;\n  protected _selectAll_UID: number;\n  protected _handler = new SlickEventHandler();\n  protected _selectedRowsLookup: any = {};\n  protected _checkboxColumnCellIndex: number | null = null;\n  protected _options: CheckboxSelectorOption;\n  protected _defaults: CheckboxSelectorOption = {\n    columnId: '_checkbox_selector',\n    cssClass: undefined,\n    hideSelectAllCheckbox: false,\n    toolTip: 'Select/Deselect All',\n    width: 30,\n    applySelectOnAllPages: false, // defaults to false, when that is enabled the \"Select All\" will be applied to all pages (when using Pagination)\n    hideInColumnTitleRow: false,\n    hideInFilterHeaderRow: true\n  };\n  protected _isSelectAllChecked = false;\n  protected _bindingEventService: BindingEventService_;\n\n  constructor(options?: Partial<CheckboxSelectorOption>) {\n    this._bindingEventService = new BindingEventService();\n    this._options = Utils.extend(true, {}, this._defaults, options);\n    this._selectAll_UID = this.createUID();\n\n    // user could override the checkbox icon logic from within the options or after instantiating the plugin\n    if (typeof this._options.selectableOverride === 'function') {\n      this.selectableOverride(this._options.selectableOverride);\n    }\n  }\n\n  init(grid: SlickGrid) {\n    this._grid = grid;\n    this._isUsingDataView = !Array.isArray(grid.getData());\n    if (this._isUsingDataView) {\n      this._dataView = grid.getData();\n    }\n    this._handler\n      .subscribe(this._grid.onSelectedRowsChanged, this.handleSelectedRowsChanged.bind(this))\n      .subscribe(this._grid.onClick, this.handleClick.bind(this))\n      .subscribe(this._grid.onKeyDown, this.handleKeyDown.bind(this));\n\n    if (this._isUsingDataView && this._dataView && this._options.applySelectOnAllPages) {\n      this._handler\n        .subscribe(this._dataView.onSelectedRowIdsChanged, this.handleDataViewSelectedIdsChanged.bind(this))\n        .subscribe(this._dataView.onPagingInfoChanged, this.handleDataViewSelectedIdsChanged.bind(this));\n    }\n\n    if (!this._options.hideInFilterHeaderRow) {\n      this.addCheckboxToFilterHeaderRow(grid);\n    }\n    if (!this._options.hideInColumnTitleRow) {\n      this._handler.subscribe(this._grid.onHeaderClick, this.handleHeaderClick.bind(this));\n    }\n  }\n\n  destroy() {\n    this._handler.unsubscribeAll();\n    this._bindingEventService.unbindAll();\n  }\n\n  getOptions() {\n    return this._options;\n  }\n\n  setOptions(options: Partial<CheckboxSelectorOption>) {\n    this._options = Utils.extend(true, {}, this._options, options);\n\n    if (this._options.hideSelectAllCheckbox) {\n      this.hideSelectAllFromColumnHeaderTitleRow();\n      this.hideSelectAllFromColumnHeaderFilterRow();\n    } else {\n      if (!this._options.hideInColumnTitleRow) {\n        this.renderSelectAllCheckbox(this._isSelectAllChecked);\n        this._handler.subscribe(this._grid.onHeaderClick, this.handleHeaderClick.bind(this));\n      } else {\n        this.hideSelectAllFromColumnHeaderTitleRow();\n      }\n\n      if (!this._options.hideInFilterHeaderRow) {\n        const selectAllContainerElm = this._headerRowNode?.querySelector<HTMLSpanElement>('#filter-checkbox-selectall-container');\n        if (selectAllContainerElm) {\n          selectAllContainerElm.style.display = 'flex';\n          const selectAllInputElm = selectAllContainerElm.querySelector<HTMLInputElement>('input[type=\"checkbox\"]');\n          if (selectAllInputElm) {\n            selectAllInputElm.checked = this._isSelectAllChecked;\n          }\n        }\n      } else {\n        this.hideSelectAllFromColumnHeaderFilterRow();\n      }\n    }\n  }\n\n  protected hideSelectAllFromColumnHeaderTitleRow() {\n    this._grid.updateColumnHeader(this._options.columnId || '', '', '');\n  }\n\n  protected hideSelectAllFromColumnHeaderFilterRow() {\n    const selectAllContainerElm = this._headerRowNode?.querySelector<HTMLSpanElement>('#filter-checkbox-selectall-container');\n    if (selectAllContainerElm) {\n      selectAllContainerElm.style.display = 'none';\n    }\n  }\n\n  protected handleSelectedRowsChanged() {\n    const selectedRows = this._grid.getSelectedRows();\n    const lookup: any = {};\n    let row = 0, i = 0, k = 0;\n    let disabledCount = 0;\n    if (typeof this._selectableOverride === 'function') {\n      for (k = 0; k < this._grid.getDataLength(); k++) {\n        // If we are allowed to select the row\n        const dataItem = this._grid.getDataItem(k);\n        if (!this.checkSelectableOverride(i, dataItem, this._grid)) {\n          disabledCount++;\n        }\n      }\n    }\n\n    const removeList: number[] = [];\n    for (i = 0; i < selectedRows.length; i++) {\n      row = selectedRows[i];\n\n      // If we are allowed to select the row\n      const rowItem = this._grid.getDataItem(row);\n      if (this.checkSelectableOverride(i, rowItem, this._grid)) {\n        lookup[row] = true;\n        if (lookup[row] !== this._selectedRowsLookup[row]) {\n          this._grid.invalidateRow(row);\n          delete this._selectedRowsLookup[row];\n        }\n      }\n      else {\n        removeList.push(row);\n      }\n    }\n    for (const selectedRow in this._selectedRowsLookup) {\n      this._grid.invalidateRow(+selectedRow);\n    }\n    this._selectedRowsLookup = lookup;\n    this._grid.render();\n    this._isSelectAllChecked = (selectedRows?.length ?? 0) + disabledCount >= this._grid.getDataLength();\n\n    if (!this._isUsingDataView || !this._options.applySelectOnAllPages) {\n      if (!this._options.hideInColumnTitleRow && !this._options.hideSelectAllCheckbox) {\n        this.renderSelectAllCheckbox(this._isSelectAllChecked);\n      }\n      if (!this._options.hideInFilterHeaderRow) {\n        const selectAllElm = this._headerRowNode?.querySelector<HTMLInputElement>(`#header-filter-selector${this._selectAll_UID}`);\n        if (selectAllElm) {\n          selectAllElm.checked = this._isSelectAllChecked;\n        }\n      }\n    }\n\n    // Remove items that shouln't of been selected in the first place (Got here Ctrl + click)\n    if (removeList.length > 0) {\n      for (i = 0; i < removeList.length; i++) {\n        const remIdx = selectedRows.indexOf(removeList[i]);\n        selectedRows.splice(remIdx, 1);\n      }\n      this._grid.setSelectedRows(selectedRows, 'click.cleanup');\n    }\n  }\n\n  protected handleDataViewSelectedIdsChanged() {\n    const selectedIds = this._dataView.getAllSelectedFilteredIds();\n    const filteredItems = this._dataView.getFilteredItems();\n    let disabledCount = 0;\n\n    if (typeof this._selectableOverride === 'function' && selectedIds.length > 0) {\n      for (let k = 0; k < this._dataView.getItemCount(); k++) {\n        // If we are allowed to select the row\n        const dataItem: T = this._dataView.getItemByIdx(k);\n        const idProperty = this._dataView.getIdPropertyName();\n        const dataItemId = dataItem[idProperty as keyof T];\n        const foundItemIdx = filteredItems.findIndex(function (item) {\n          return item[idProperty as keyof T] === dataItemId;\n        });\n        if (foundItemIdx >= 0 && !this.checkSelectableOverride(k, dataItem, this._grid)) {\n          disabledCount++;\n        }\n      }\n    }\n    this._isSelectAllChecked = (selectedIds && selectedIds.length) + disabledCount >= filteredItems.length;\n\n    if (!this._options.hideInColumnTitleRow && !this._options.hideSelectAllCheckbox) {\n      this.renderSelectAllCheckbox(this._isSelectAllChecked);\n    }\n    if (!this._options.hideInFilterHeaderRow) {\n      const selectAllElm = this._headerRowNode?.querySelector<HTMLInputElement>(`#header-filter-selector${this._selectAll_UID}`);\n      if (selectAllElm) {\n        selectAllElm.checked = this._isSelectAllChecked;\n      }\n    }\n  }\n\n  protected handleKeyDown(e: KeyboardEvent, args: any) {\n    if (e.which === 32) {\n      if (this._grid.getColumns()[args.cell].id === this._options.columnId) {\n        // if editing, try to commit\n        if (!this._grid.getEditorLock().isActive() || this._grid.getEditorLock().commitCurrentEdit()) {\n          this.toggleRowSelection(args.row);\n        }\n        e.preventDefault();\n        e.stopImmediatePropagation();\n      }\n    }\n  }\n\n  protected handleClick(e: DOMEvent<HTMLInputElement>, args: { row: number; cell: number; }) {\n    // clicking on a row select checkbox\n    if (this._grid.getColumns()[args.cell].id === this._options.columnId && e.target.type === 'checkbox') {\n      // if editing, try to commit\n      if (this._grid.getEditorLock().isActive() && !this._grid.getEditorLock().commitCurrentEdit()) {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        return;\n      }\n\n      this.toggleRowSelection(args.row);\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n    }\n  }\n\n  protected toggleRowSelection(row: number) {\n    const dataContext = this._grid.getDataItem(row);\n    if (!this.checkSelectableOverride(row, dataContext, this._grid)) {\n      return;\n    }\n\n    if (this._selectedRowsLookup[row]) {\n      const newSelectedRows = this._grid.getSelectedRows().filter((n) => n !== row);\n      this._grid.setSelectedRows(newSelectedRows, 'click.toggle');\n    } else {\n      this._grid.setSelectedRows(this._grid.getSelectedRows().concat(row), 'click.toggle');\n    }\n    this._grid.setActiveCell(row, this.getCheckboxColumnCellIndex());\n  }\n\n  selectRows(rowArray: number[]) {\n    const addRows: number[] = [];\n    for (let i = 0, l = rowArray.length; i < l; i++) {\n      if (!this._selectedRowsLookup[rowArray[i]]) {\n        addRows[addRows.length] = rowArray[i];\n      }\n    }\n    this._grid.setSelectedRows(this._grid.getSelectedRows().concat(addRows), 'SlickCheckboxSelectColumn.selectRows');\n  }\n\n  deSelectRows(rowArray: number[]) {\n    const removeRows: number[] = [];\n    for (let i = 0, l = rowArray.length; i < l; i++) {\n      if (this._selectedRowsLookup[rowArray[i]]) {\n        removeRows[removeRows.length] = rowArray[i];\n      }\n    }\n\n    this._grid.setSelectedRows(this._grid.getSelectedRows().filter((n) => removeRows.indexOf(n) < 0), 'SlickCheckboxSelectColumn.deSelectRows');\n  }\n\n  protected handleHeaderClick(e: DOMEvent<HTMLInputElement>, args: any) {\n    if (args.column.id === this._options.columnId && e.target.type === 'checkbox') {\n      // if editing, try to commit\n      if (this._grid.getEditorLock().isActive() && !this._grid.getEditorLock().commitCurrentEdit()) {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        return;\n      }\n\n      let isAllSelected = e.target.checked;\n      const caller = isAllSelected ? 'click.selectAll' : 'click.unselectAll';\n      const rows: number[] = [];\n\n      if (isAllSelected) {\n        for (let i = 0; i < this._grid.getDataLength(); i++) {\n          // Get the row and check it's a selectable row before pushing it onto the stack\n          const rowItem = this._grid.getDataItem(i);\n          if (!rowItem.__group && !rowItem.__groupTotals && this.checkSelectableOverride(i, rowItem, this._grid)) {\n            rows.push(i);\n          }\n        }\n        isAllSelected = true;\n      }\n      if (this._isUsingDataView && this._dataView && this._options.applySelectOnAllPages) {\n        const ids: Array<number | string> = [];\n        const filteredItems = this._dataView.getFilteredItems();\n        for (let j = 0; j < filteredItems.length; j++) {\n          // Get the row and check it's a selectable ID (it could be in a different page) before pushing it onto the stack\n          const dataviewRowItem: T = filteredItems[j];\n          if (this.checkSelectableOverride(j, dataviewRowItem, this._grid)) {\n            ids.push(dataviewRowItem[this._dataView.getIdPropertyName() as keyof T] as number | string);\n          }\n        }\n        this._dataView.setSelectedIds(ids, { isRowBeingAdded: isAllSelected });\n      }\n      this._grid.setSelectedRows(rows, caller);\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n    }\n  }\n\n  protected getCheckboxColumnCellIndex() {\n    if (this._checkboxColumnCellIndex === null) {\n      this._checkboxColumnCellIndex = 0;\n      const colArr = this._grid.getColumns();\n      for (let i = 0; i < colArr.length; i++) {\n        if (colArr[i].id === this._options.columnId) {\n          this._checkboxColumnCellIndex = i;\n        }\n      }\n    }\n    return this._checkboxColumnCellIndex;\n  }\n\n  getColumnDefinition() {\n    return {\n      id: this._options.columnId,\n      name: (this._options.hideSelectAllCheckbox || this._options.hideInColumnTitleRow) ? '' : `<input id=\"header-selector${this._selectAll_UID}\" type=\"checkbox\"><label for=\"header-selector${this._selectAll_UID}\"></label>`,\n      toolTip: (this._options.hideSelectAllCheckbox || this._options.hideInColumnTitleRow) ? '' : this._options.toolTip,\n      field: \"sel\",\n      width: this._options.width,\n      resizable: false,\n      sortable: false,\n      cssClass: this._options.cssClass,\n      hideSelectAllCheckbox: this._options.hideSelectAllCheckbox,\n      formatter: this.checkboxSelectionFormatter.bind(this),\n      // exclude from all menus, defaults to true unless the option is provided differently by the user\n      excludeFromColumnPicker: this._options.excludeFromColumnPicker ?? true,\n      excludeFromGridMenu: this._options.excludeFromGridMenu ?? true,\n      excludeFromHeaderMenu: this._options.excludeFromHeaderMenu ?? true,\n    };\n  }\n\n  protected addCheckboxToFilterHeaderRow(grid: SlickGrid) {\n    this._handler.subscribe(grid.onHeaderRowCellRendered, (_e: any, args: any) => {\n      if (args.column.field === \"sel\") {\n        Utils.emptyElement(args.node);\n        const spanElm = document.createElement('span');\n        spanElm.id = 'filter-checkbox-selectall-container';\n\n        const inputElm = document.createElement('input');\n        inputElm.type = 'checkbox';\n        inputElm.id = `header-filter-selector${this._selectAll_UID}`;\n\n        const labelElm = document.createElement('label');\n        labelElm.htmlFor = `header-filter-selector${this._selectAll_UID}`;\n\n        spanElm.appendChild(inputElm);\n        spanElm.appendChild(labelElm);\n        args.node.appendChild(spanElm);\n        this._headerRowNode = args.node;\n\n        this._bindingEventService.bind(spanElm, 'click', ((e: DOMEvent<HTMLInputElement>) => this.handleHeaderClick(e, args)) as EventListener);\n      }\n    });\n  }\n\n  protected createUID() {\n    return Math.round(10000000 * Math.random());\n  }\n\n  protected checkboxSelectionFormatter(row: number, _cell: number, _val: any, _columnDef: Column, dataContext: any, grid: SlickGrid) {\n    const UID = this.createUID() + row;\n\n    if (dataContext) {\n      if (!this.checkSelectableOverride(row, dataContext, grid)) {\n        return null;\n      } else {\n        return this._selectedRowsLookup[row]\n          ? `<input id=\"selector${UID}\" type=\"checkbox\" checked=\"checked\"><label for=\"selector${UID}\"></label>`\n          : `<input id=\"selector${UID}\" type=\"checkbox\"><label for=\"selector${UID}\"></label>`;\n      }\n    }\n    return null;\n  }\n\n  protected checkSelectableOverride(row: number, dataContext: any, grid: SlickGrid) {\n    if (typeof this._selectableOverride === 'function') {\n      return this._selectableOverride(row, dataContext, grid);\n    }\n    return true;\n  }\n\n  protected renderSelectAllCheckbox(isSelectAllChecked?: boolean) {\n    if (isSelectAllChecked) {\n      this._grid.updateColumnHeader(this._options.columnId || '', `<input id=\"header-selector${this._selectAll_UID}\" type=\"checkbox\" checked=\"checked\"><label for=\"header-selector${this._selectAll_UID}\"></label>`, this._options.toolTip);\n    } else {\n      this._grid.updateColumnHeader(this._options.columnId || '', `<input id=\"header-selector${this._selectAll_UID}\" type=\"checkbox\"><label for=\"header-selector${this._selectAll_UID}\"></label>`, this._options.toolTip);\n    }\n  }\n\n  /**\n   * Method that user can pass to override the default behavior or making every row a selectable row.\n   * In order word, user can choose which rows to be selectable or not by providing his own logic.\n   * @param overrideFn: override function callback\n   */\n  selectableOverride(overrideFn: SelectableOverrideCallback<T>) {\n    this._selectableOverride = overrideFn;\n  }\n\n\n  // Utils.extend(this, {\n  //     \"init\": init,\n  //     \"destroy\": destroy,\n  //     \"deSelectRows\": deSelectRows,\n  //     \"selectRows\": selectRows,\n  //     \"getColumnDefinition\": getColumnDefinition,\n  //     \"getOptions\": getOptions,\n  //     \"selectableOverride\": selectableOverride,\n  //     \"setOptions\": setOptions,\n  //   });\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      CheckboxSelectColumn: SlickCheckboxSelectColumn\n    }\n  });\n}\n\n"],
  "mappings": "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",
  "names": []
}
