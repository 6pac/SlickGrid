{
  "version": 3,
  "sources": ["../../../src/plugins/slick.checkboxselectcolumn.ts"],
  "sourcesContent": ["import type { CheckboxSelectorOption, Column, DOMEvent, SlickPlugin, SelectableOverrideCallback, OnHeaderClickEventArgs } from '../models/index.js';\r\nimport { BindingEventService as BindingEventService_, type SlickEventData, SlickEventHandler as SlickEventHandler_, Utils as Utils_ } from '../slick.core.js';\r\nimport type { SlickDataView } from '../slick.dataview.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\r\nconst SlickEventHandler = IIFE_ONLY ? Slick.EventHandler : SlickEventHandler_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\nexport class SlickCheckboxSelectColumn<T = any> implements SlickPlugin {\r\n  // --\r\n  // public API\r\n  pluginName = 'CheckboxSelectColumn' as const;\r\n\r\n  // --\r\n  // protected props\r\n  protected _dataView!: SlickDataView<T>;\r\n  protected _grid!: SlickGrid;\r\n  protected _isUsingDataView = false;\r\n  protected _selectableOverride: SelectableOverrideCallback<T> | null = null;\r\n  protected _headerRowNode?: HTMLElement;\r\n  protected _selectAll_UID: number;\r\n  protected _handler = new SlickEventHandler();\r\n  protected _selectedRowsLookup: any = {};\r\n  protected _checkboxColumnCellIndex: number | null = null;\r\n  protected _options: CheckboxSelectorOption;\r\n  protected _defaults: CheckboxSelectorOption = {\r\n    columnId: '_checkbox_selector',\r\n    cssClass: undefined,\r\n    hideSelectAllCheckbox: false,\r\n    name: '',\r\n    toolTip: 'Select/Deselect All',\r\n    width: 30,\r\n    reorderable: false,\r\n    applySelectOnAllPages: false, // defaults to false, when that is enabled the \"Select All\" will be applied to all pages (when using Pagination)\r\n    hideInColumnTitleRow: false,\r\n    hideInFilterHeaderRow: true\r\n  };\r\n  protected _isSelectAllChecked = false;\r\n  protected _bindingEventService: BindingEventService_;\r\n\r\n  constructor(options?: Partial<CheckboxSelectorOption>) {\r\n    this._bindingEventService = new BindingEventService();\r\n    this._options = Utils.extend(true, {}, this._defaults, options);\r\n    this._selectAll_UID = this.createUID();\r\n\r\n    // user could override the checkbox icon logic from within the options or after instantiating the plugin\r\n    if (typeof this._options.selectableOverride === 'function') {\r\n      this.selectableOverride(this._options.selectableOverride);\r\n    }\r\n  }\r\n\r\n  init(grid: SlickGrid) {\r\n    this._grid = grid;\r\n    this._isUsingDataView = !Array.isArray(grid.getData());\r\n    if (this._isUsingDataView) {\r\n      this._dataView = grid.getData();\r\n    }\r\n    this._handler\r\n      .subscribe(this._grid.onSelectedRowsChanged, this.handleSelectedRowsChanged.bind(this))\r\n      .subscribe(this._grid.onClick, this.handleClick.bind(this))\r\n      .subscribe(this._grid.onKeyDown, this.handleKeyDown.bind(this));\r\n\r\n    if (this._isUsingDataView && this._dataView && this._options.applySelectOnAllPages) {\r\n      this._handler\r\n        .subscribe(this._dataView.onSelectedRowIdsChanged, this.handleDataViewSelectedIdsChanged.bind(this))\r\n        .subscribe(this._dataView.onPagingInfoChanged, this.handleDataViewSelectedIdsChanged.bind(this));\r\n    }\r\n\r\n    if (!this._options.hideInFilterHeaderRow) {\r\n      this.addCheckboxToFilterHeaderRow(grid);\r\n    }\r\n    if (!this._options.hideInColumnTitleRow) {\r\n      this._handler.subscribe(this._grid.onHeaderClick, this.handleHeaderClick.bind(this));\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    this._handler.unsubscribeAll();\r\n    this._bindingEventService.unbindAll();\r\n  }\r\n\r\n  getOptions() {\r\n    return this._options;\r\n  }\r\n\r\n  setOptions(options: Partial<CheckboxSelectorOption>) {\r\n    this._options = Utils.extend(true, {}, this._options, options);\r\n\r\n    if (this._options.hideSelectAllCheckbox) {\r\n      this.hideSelectAllFromColumnHeaderTitleRow();\r\n      this.hideSelectAllFromColumnHeaderFilterRow();\r\n    } else {\r\n      if (!this._options.hideInColumnTitleRow) {\r\n        this.renderSelectAllCheckbox(this._isSelectAllChecked);\r\n        this._handler.subscribe(this._grid.onHeaderClick, this.handleHeaderClick.bind(this));\r\n      } else {\r\n        this.hideSelectAllFromColumnHeaderTitleRow();\r\n        if (this._options.name) {\r\n          this._grid.updateColumnHeader(this._options.columnId || '', this._options.name, '');\r\n        }\r\n      }\r\n\r\n      if (!this._options.hideInFilterHeaderRow) {\r\n        const selectAllContainerElm = this._headerRowNode?.querySelector<HTMLSpanElement>('#filter-checkbox-selectall-container');\r\n        if (selectAllContainerElm) {\r\n          selectAllContainerElm.style.display = 'flex';\r\n          const selectAllInputElm = selectAllContainerElm.querySelector<HTMLInputElement>('input[type=\"checkbox\"]');\r\n          if (selectAllInputElm) {\r\n            selectAllInputElm.checked = this._isSelectAllChecked;\r\n          }\r\n        }\r\n      } else {\r\n        this.hideSelectAllFromColumnHeaderFilterRow();\r\n      }\r\n    }\r\n  }\r\n\r\n  protected hideSelectAllFromColumnHeaderTitleRow() {\r\n    this._grid.updateColumnHeader(this._options.columnId || '', this._options.name || '', '');\r\n  }\r\n\r\n  protected hideSelectAllFromColumnHeaderFilterRow() {\r\n    const selectAllContainerElm = this._headerRowNode?.querySelector<HTMLSpanElement>('#filter-checkbox-selectall-container');\r\n    if (selectAllContainerElm) {\r\n      selectAllContainerElm.style.display = 'none';\r\n    }\r\n  }\r\n\r\n  protected handleSelectedRowsChanged() {\r\n    const selectedRows = this._grid.getSelectedRows();\r\n    const lookup: any = {};\r\n    let row = 0, i = 0, k = 0;\r\n    let disabledCount = 0;\r\n    if (typeof this._selectableOverride === 'function') {\r\n      for (k = 0; k < this._grid.getDataLength(); k++) {\r\n        // If we are allowed to select the row\r\n        const dataItem = this._grid.getDataItem(k);\r\n        if (!this.checkSelectableOverride(i, dataItem, this._grid)) {\r\n          disabledCount++;\r\n        }\r\n      }\r\n    }\r\n\r\n    const removeList: number[] = [];\r\n    for (i = 0; i < selectedRows.length; i++) {\r\n      row = selectedRows[i];\r\n\r\n      // If we are allowed to select the row\r\n      const rowItem = this._grid.getDataItem(row);\r\n      if (this.checkSelectableOverride(i, rowItem, this._grid)) {\r\n        lookup[row] = true;\r\n        if (lookup[row] !== this._selectedRowsLookup[row]) {\r\n          this._grid.invalidateRow(row);\r\n          delete this._selectedRowsLookup[row];\r\n        }\r\n      }\r\n      else {\r\n        removeList.push(row);\r\n      }\r\n    }\r\n    if (typeof this._selectedRowsLookup === 'object') {\r\n      Object.keys(this._selectedRowsLookup).forEach(selectedRow => {\r\n        if (selectedRow !== undefined) {\r\n          this._grid.invalidateRow(+selectedRow);\r\n        }\r\n      });\r\n    }\r\n    this._selectedRowsLookup = lookup;\r\n    this._grid.render();\r\n    this._isSelectAllChecked = (selectedRows?.length ?? 0) + disabledCount >= this._grid.getDataLength();\r\n\r\n    if (!this._isUsingDataView || !this._options.applySelectOnAllPages) {\r\n      if (!this._options.hideInColumnTitleRow && !this._options.hideSelectAllCheckbox) {\r\n        this.renderSelectAllCheckbox(this._isSelectAllChecked);\r\n      }\r\n      if (!this._options.hideInFilterHeaderRow) {\r\n        const selectAllElm = this._headerRowNode?.querySelector<HTMLInputElement>(`#header-filter-selector${this._selectAll_UID}`);\r\n        if (selectAllElm) {\r\n          selectAllElm.checked = this._isSelectAllChecked;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove items that shouln't of been selected in the first place (Got here Ctrl + click)\r\n    if (removeList.length > 0) {\r\n      for (i = 0; i < removeList.length; i++) {\r\n        const remIdx = selectedRows.indexOf(removeList[i]);\r\n        selectedRows.splice(remIdx, 1);\r\n      }\r\n      this._grid.setSelectedRows(selectedRows, 'click.cleanup');\r\n    }\r\n  }\r\n\r\n  protected handleDataViewSelectedIdsChanged() {\r\n    const selectedIds = this._dataView.getAllSelectedFilteredIds();\r\n    const filteredItems = this._dataView.getFilteredItems();\r\n    let disabledCount = 0;\r\n\r\n    if (typeof this._selectableOverride === 'function' && selectedIds.length > 0) {\r\n      for (let k = 0; k < this._dataView.getItemCount(); k++) {\r\n        // If we are allowed to select the row\r\n        const dataItem: T = this._dataView.getItemByIdx(k);\r\n        const idProperty = this._dataView.getIdPropertyName();\r\n        const dataItemId = dataItem[idProperty as keyof T];\r\n        const foundItemIdx = filteredItems.findIndex(function (item) {\r\n          return item[idProperty as keyof T] === dataItemId;\r\n        });\r\n        if (foundItemIdx >= 0 && !this.checkSelectableOverride(k, dataItem, this._grid)) {\r\n          disabledCount++;\r\n        }\r\n      }\r\n    }\r\n    this._isSelectAllChecked = (selectedIds && selectedIds.length) + disabledCount >= filteredItems.length;\r\n\r\n    if (!this._options.hideInColumnTitleRow && !this._options.hideSelectAllCheckbox) {\r\n      this.renderSelectAllCheckbox(this._isSelectAllChecked);\r\n    }\r\n    if (!this._options.hideInFilterHeaderRow) {\r\n      const selectAllElm = this._headerRowNode?.querySelector<HTMLInputElement>(`#header-filter-selector${this._selectAll_UID}`);\r\n      if (selectAllElm) {\r\n        selectAllElm.checked = this._isSelectAllChecked;\r\n      }\r\n    }\r\n  }\r\n\r\n  protected handleKeyDown(e: SlickEventData, args: any) {\r\n    if (e.which === 32) {\r\n      if (this._grid.getColumns()[args.cell].id === this._options.columnId) {\r\n        // if editing, try to commit\r\n        if (!this._grid.getEditorLock().isActive() || this._grid.getEditorLock().commitCurrentEdit()) {\r\n          this.toggleRowSelection(args.row);\r\n        }\r\n        e.preventDefault();\r\n        e.stopImmediatePropagation();\r\n      }\r\n    }\r\n  }\r\n\r\n  protected handleClick(e: SlickEventData, args: { row: number; cell: number; }) {\r\n    // clicking on a row select checkbox\r\n    if (this._grid.getColumns()[args.cell].id === this._options.columnId && (e.target as HTMLInputElement).type === 'checkbox') {\r\n      // if editing, try to commit\r\n      if (this._grid.getEditorLock().isActive() && !this._grid.getEditorLock().commitCurrentEdit()) {\r\n        e.preventDefault();\r\n        e.stopImmediatePropagation();\r\n        return;\r\n      }\r\n\r\n      this.toggleRowSelection(args.row);\r\n      e.stopPropagation();\r\n      e.stopImmediatePropagation();\r\n    }\r\n  }\r\n\r\n  protected toggleRowSelection(row: number) {\r\n    const dataContext = this._grid.getDataItem(row);\r\n    if (!this.checkSelectableOverride(row, dataContext, this._grid)) {\r\n      return;\r\n    }\r\n\r\n    if (this._selectedRowsLookup[row]) {\r\n      const newSelectedRows = this._grid.getSelectedRows().filter((n) => n !== row);\r\n      this._grid.setSelectedRows(newSelectedRows, 'click.toggle');\r\n    } else {\r\n      this._grid.setSelectedRows(this._grid.getSelectedRows().concat(row), 'click.toggle');\r\n    }\r\n    this._grid.setActiveCell(row, this.getCheckboxColumnCellIndex());\r\n  }\r\n\r\n  selectRows(rowArray: number[]) {\r\n    const addRows: number[] = [];\r\n    for (let i = 0, l = rowArray.length; i < l; i++) {\r\n      if (!this._selectedRowsLookup[rowArray[i]]) {\r\n        addRows[addRows.length] = rowArray[i];\r\n      }\r\n    }\r\n    this._grid.setSelectedRows(this._grid.getSelectedRows().concat(addRows), 'SlickCheckboxSelectColumn.selectRows');\r\n  }\r\n\r\n  deSelectRows(rowArray: number[]) {\r\n    const removeRows: number[] = [];\r\n    for (let i = 0, l = rowArray.length; i < l; i++) {\r\n      if (this._selectedRowsLookup[rowArray[i]]) {\r\n        removeRows[removeRows.length] = rowArray[i];\r\n      }\r\n    }\r\n\r\n    this._grid.setSelectedRows(this._grid.getSelectedRows().filter((n) => removeRows.indexOf(n) < 0), 'SlickCheckboxSelectColumn.deSelectRows');\r\n  }\r\n\r\n  protected handleHeaderClick(e: DOMEvent<HTMLInputElement> | SlickEventData, args: OnHeaderClickEventArgs) {\r\n    if (args.column.id === this._options.columnId && (e.target as HTMLInputElement).type === 'checkbox') {\r\n      // if editing, try to commit\r\n      if (this._grid.getEditorLock().isActive() && !this._grid.getEditorLock().commitCurrentEdit()) {\r\n        e.preventDefault();\r\n        e.stopImmediatePropagation();\r\n        return;\r\n      }\r\n\r\n      let isAllSelected = (e.target as HTMLInputElement).checked;\r\n      const caller = isAllSelected ? 'click.selectAll' : 'click.unselectAll';\r\n      const rows: number[] = [];\r\n\r\n      if (isAllSelected) {\r\n        for (let i = 0; i < this._grid.getDataLength(); i++) {\r\n          // Get the row and check it's a selectable row before pushing it onto the stack\r\n          const rowItem = this._grid.getDataItem(i);\r\n          if (!rowItem.__group && !rowItem.__groupTotals && this.checkSelectableOverride(i, rowItem, this._grid)) {\r\n            rows.push(i);\r\n          }\r\n        }\r\n        isAllSelected = true;\r\n      }\r\n      if (this._isUsingDataView && this._dataView && this._options.applySelectOnAllPages) {\r\n        const ids: Array<number | string> = [];\r\n        const filteredItems = this._dataView.getFilteredItems();\r\n        for (let j = 0; j < filteredItems.length; j++) {\r\n          // Get the row and check it's a selectable ID (it could be in a different page) before pushing it onto the stack\r\n          const dataviewRowItem: T = filteredItems[j];\r\n          if (this.checkSelectableOverride(j, dataviewRowItem, this._grid)) {\r\n            ids.push(dataviewRowItem[this._dataView.getIdPropertyName() as keyof T] as number | string);\r\n          }\r\n        }\r\n        this._dataView.setSelectedIds(ids, { isRowBeingAdded: isAllSelected });\r\n      }\r\n      this._grid.setSelectedRows(rows, caller);\r\n      e.stopPropagation();\r\n      e.stopImmediatePropagation();\r\n    }\r\n  }\r\n\r\n  protected getCheckboxColumnCellIndex() {\r\n    if (this._checkboxColumnCellIndex === null) {\r\n      this._checkboxColumnCellIndex = 0;\r\n      const colArr = this._grid.getColumns();\r\n      for (let i = 0; i < colArr.length; i++) {\r\n        if (colArr[i].id === this._options.columnId) {\r\n          this._checkboxColumnCellIndex = i;\r\n        }\r\n      }\r\n    }\r\n    return this._checkboxColumnCellIndex;\r\n  }\r\n\r\n  /**\r\n   * use a DocumentFragment to return a fragment including an <input> then a <label> as siblings,\r\n   * the label is using `for` to link it to the input `id`\r\n   * @param {String} inputId - id to link the label\r\n   * @param {Boolean} [checked] - is the input checkbox checked? (defaults to false)\r\n   * @returns\r\n   */\r\n  createCheckboxElement(inputId: string, checked = false) {\r\n    const fragmentElm = new DocumentFragment();\r\n    fragmentElm.appendChild(\r\n      Utils.createDomElement('input', { id: inputId, type: 'checkbox', checked, ariaChecked: String(checked) })\r\n    );\r\n    fragmentElm.appendChild(\r\n      Utils.createDomElement('label', { htmlFor: inputId })\r\n    );\r\n\r\n    return fragmentElm;\r\n  }\r\n\r\n  getColumnDefinition() {\r\n    return {\r\n      id: this._options.columnId,\r\n      reorderable: this._options.reorderable,\r\n      name: (this._options.hideSelectAllCheckbox || this._options.hideInColumnTitleRow)\r\n        ? this._options.name || ''\r\n        : this.createCheckboxElement(`header-selector${this._selectAll_UID}`),\r\n      toolTip: (this._options.hideSelectAllCheckbox || this._options.hideInColumnTitleRow) ? '' : this._options.toolTip,\r\n      field: 'sel',\r\n      width: this._options.width,\r\n      resizable: false,\r\n      sortable: false,\r\n      cssClass: this._options.cssClass,\r\n      hideSelectAllCheckbox: this._options.hideSelectAllCheckbox,\r\n      formatter: this.checkboxSelectionFormatter.bind(this),\r\n      // exclude from all menus, defaults to true unless the option is provided differently by the user\r\n      excludeFromColumnPicker: this._options.excludeFromColumnPicker ?? true,\r\n      excludeFromGridMenu: this._options.excludeFromGridMenu ?? true,\r\n      excludeFromHeaderMenu: this._options.excludeFromHeaderMenu ?? true,\r\n    };\r\n  }\r\n\r\n  protected addCheckboxToFilterHeaderRow(grid: SlickGrid) {\r\n    this._handler.subscribe(grid.onHeaderRowCellRendered, (_e: any, args: any) => {\r\n      if (args.column.field === 'sel') {\r\n        Utils.emptyElement(args.node);\r\n        const spanElm = Utils.createDomElement('span', { id: 'filter-checkbox-selectall-container', ariaChecked: 'false' });\r\n        spanElm.appendChild(\r\n          Utils.createDomElement('input', { type: 'checkbox', id: `header-filter-selector${this._selectAll_UID}` })\r\n        );\r\n        spanElm.appendChild(\r\n          Utils.createDomElement('label', { htmlFor: `header-filter-selector${this._selectAll_UID}` })\r\n        );\r\n\r\n        args.node.appendChild(spanElm);\r\n        this._headerRowNode = args.node;\r\n\r\n        this._bindingEventService.bind(spanElm, 'click', ((e: DOMEvent<HTMLInputElement>) => this.handleHeaderClick(e, args)) as EventListener);\r\n      }\r\n    });\r\n  }\r\n\r\n  protected createUID() {\r\n    return Math.round(10000000 * Math.random());\r\n  }\r\n\r\n  protected checkboxSelectionFormatter(row: number, _cell: number, _val: any, _columnDef: Column, dataContext: any, grid: SlickGrid) {\r\n    if (dataContext && this.checkSelectableOverride(row, dataContext, grid)) {\r\n      const UID = this.createUID() + row;\r\n      return this.createCheckboxElement(`selector${UID}`, !!this._selectedRowsLookup[row]);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  protected checkSelectableOverride(row: number, dataContext: any, grid: SlickGrid) {\r\n    if (typeof this._selectableOverride === 'function') {\r\n      return this._selectableOverride(row, dataContext, grid);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected renderSelectAllCheckbox(isSelectAllChecked?: boolean) {\r\n    this._grid.updateColumnHeader(\r\n      this._options.columnId || '',\r\n      this.createCheckboxElement(`header-selector${this._selectAll_UID}`, !!isSelectAllChecked),\r\n      this._options.toolTip\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Method that user can pass to override the default behavior or making every row a selectable row.\r\n   * In order word, user can choose which rows to be selectable or not by providing his own logic.\r\n   * @param overrideFn: override function callback\r\n   */\r\n  selectableOverride(overrideFn: SelectableOverrideCallback<T>) {\r\n    this._selectableOverride = overrideFn;\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      CheckboxSelectColumn: SlickCheckboxSelectColumn\r\n    }\r\n  });\r\n}\r\n\r\n"],
  "mappings": "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",
  "names": []
}
