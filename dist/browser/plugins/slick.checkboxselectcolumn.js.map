{
  "version": 3,
  "sources": ["import-ns:../slick.core.js", "../../../src/plugins/slick.checkboxselectcolumn.js"],
  "sourcesContent": ["// empty string, do nothing", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SlickCheckboxSelectColumn = void 0;\nvar slick_core_1 = require(\"../slick.core\");\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nvar BindingEventService = IIFE_ONLY ? Slick.BindingEventService : slick_core_1.BindingEventService;\nvar SlickEventHandler = IIFE_ONLY ? Slick.EventHandler : slick_core_1.SlickEventHandler;\nvar Utils = IIFE_ONLY ? Slick.Utils : slick_core_1.Utils;\nvar SlickCheckboxSelectColumn = /** @class */ (function () {\n    function SlickCheckboxSelectColumn(options) {\n        // --\n        // public API\n        this.pluginName = 'CheckboxSelectColumn';\n        this._isUsingDataView = false;\n        this._selectableOverride = null;\n        this._handler = new SlickEventHandler();\n        this._selectedRowsLookup = {};\n        this._checkboxColumnCellIndex = null;\n        this._defaults = {\n            columnId: '_checkbox_selector',\n            cssClass: undefined,\n            hideSelectAllCheckbox: false,\n            toolTip: 'Select/Deselect All',\n            width: 30,\n            applySelectOnAllPages: false,\n            hideInColumnTitleRow: false,\n            hideInFilterHeaderRow: true\n        };\n        this._isSelectAllChecked = false;\n        this._bindingEventService = new BindingEventService();\n        this._options = Utils.extend(true, {}, this._defaults, options);\n        this._selectAll_UID = this.createUID();\n        // user could override the checkbox icon logic from within the options or after instantiating the plugin\n        if (typeof this._options.selectableOverride === 'function') {\n            this.selectableOverride(this._options.selectableOverride);\n        }\n    }\n    SlickCheckboxSelectColumn.prototype.init = function (grid) {\n        this._grid = grid;\n        this._isUsingDataView = !Array.isArray(grid.getData());\n        if (this._isUsingDataView) {\n            this._dataView = grid.getData();\n        }\n        this._handler\n            .subscribe(this._grid.onSelectedRowsChanged, this.handleSelectedRowsChanged.bind(this))\n            .subscribe(this._grid.onClick, this.handleClick.bind(this))\n            .subscribe(this._grid.onKeyDown, this.handleKeyDown.bind(this));\n        if (this._isUsingDataView && this._dataView && this._options.applySelectOnAllPages) {\n            this._handler\n                .subscribe(this._dataView.onSelectedRowIdsChanged, this.handleDataViewSelectedIdsChanged.bind(this))\n                .subscribe(this._dataView.onPagingInfoChanged, this.handleDataViewSelectedIdsChanged.bind(this));\n        }\n        if (!this._options.hideInFilterHeaderRow) {\n            this.addCheckboxToFilterHeaderRow(grid);\n        }\n        if (!this._options.hideInColumnTitleRow) {\n            this._handler.subscribe(this._grid.onHeaderClick, this.handleHeaderClick.bind(this));\n        }\n    };\n    SlickCheckboxSelectColumn.prototype.destroy = function () {\n        this._handler.unsubscribeAll();\n        this._bindingEventService.unbindAll();\n    };\n    SlickCheckboxSelectColumn.prototype.getOptions = function () {\n        return this._options;\n    };\n    SlickCheckboxSelectColumn.prototype.setOptions = function (options) {\n        var _a;\n        this._options = Utils.extend(true, {}, this._options, options);\n        if (this._options.hideSelectAllCheckbox) {\n            this.hideSelectAllFromColumnHeaderTitleRow();\n            this.hideSelectAllFromColumnHeaderFilterRow();\n        }\n        else {\n            if (!this._options.hideInColumnTitleRow) {\n                this.renderSelectAllCheckbox(this._isSelectAllChecked);\n                this._handler.subscribe(this._grid.onHeaderClick, this.handleHeaderClick.bind(this));\n            }\n            else {\n                this.hideSelectAllFromColumnHeaderTitleRow();\n            }\n            if (!this._options.hideInFilterHeaderRow) {\n                var selectAllContainerElm = (_a = this._headerRowNode) === null || _a === void 0 ? void 0 : _a.querySelector('#filter-checkbox-selectall-container');\n                if (selectAllContainerElm) {\n                    selectAllContainerElm.style.display = 'flex';\n                    var selectAllInputElm = selectAllContainerElm.querySelector('input[type=\"checkbox\"]');\n                    if (selectAllInputElm) {\n                        selectAllInputElm.checked = this._isSelectAllChecked;\n                    }\n                }\n            }\n            else {\n                this.hideSelectAllFromColumnHeaderFilterRow();\n            }\n        }\n    };\n    SlickCheckboxSelectColumn.prototype.hideSelectAllFromColumnHeaderTitleRow = function () {\n        this._grid.updateColumnHeader(this._options.columnId || '', '', '');\n    };\n    SlickCheckboxSelectColumn.prototype.hideSelectAllFromColumnHeaderFilterRow = function () {\n        var _a;\n        var selectAllContainerElm = (_a = this._headerRowNode) === null || _a === void 0 ? void 0 : _a.querySelector('#filter-checkbox-selectall-container');\n        if (selectAllContainerElm) {\n            selectAllContainerElm.style.display = 'none';\n        }\n    };\n    SlickCheckboxSelectColumn.prototype.handleSelectedRowsChanged = function () {\n        var _a, _b;\n        var selectedRows = this._grid.getSelectedRows();\n        var lookup = {};\n        var row = 0, i = 0, k = 0;\n        var disabledCount = 0;\n        if (typeof this._selectableOverride === 'function') {\n            for (k = 0; k < this._grid.getDataLength(); k++) {\n                // If we are allowed to select the row\n                var dataItem = this._grid.getDataItem(k);\n                if (!this.checkSelectableOverride(i, dataItem, this._grid)) {\n                    disabledCount++;\n                }\n            }\n        }\n        var removeList = [];\n        for (i = 0; i < selectedRows.length; i++) {\n            row = selectedRows[i];\n            // If we are allowed to select the row\n            var rowItem = this._grid.getDataItem(row);\n            if (this.checkSelectableOverride(i, rowItem, this._grid)) {\n                lookup[row] = true;\n                if (lookup[row] !== this._selectedRowsLookup[row]) {\n                    this._grid.invalidateRow(row);\n                    delete this._selectedRowsLookup[row];\n                }\n            }\n            else {\n                removeList.push(row);\n            }\n        }\n        for (var selectedRow in this._selectedRowsLookup) {\n            this._grid.invalidateRow(+selectedRow);\n        }\n        this._selectedRowsLookup = lookup;\n        this._grid.render();\n        this._isSelectAllChecked = ((_a = selectedRows === null || selectedRows === void 0 ? void 0 : selectedRows.length) !== null && _a !== void 0 ? _a : 0) + disabledCount >= this._grid.getDataLength();\n        if (!this._isUsingDataView || !this._options.applySelectOnAllPages) {\n            if (!this._options.hideInColumnTitleRow && !this._options.hideSelectAllCheckbox) {\n                this.renderSelectAllCheckbox(this._isSelectAllChecked);\n            }\n            if (!this._options.hideInFilterHeaderRow) {\n                var selectAllElm = (_b = this._headerRowNode) === null || _b === void 0 ? void 0 : _b.querySelector(\"#header-filter-selector\".concat(this._selectAll_UID));\n                if (selectAllElm) {\n                    selectAllElm.checked = this._isSelectAllChecked;\n                }\n            }\n        }\n        // Remove items that shouln't of been selected in the first place (Got here Ctrl + click)\n        if (removeList.length > 0) {\n            for (i = 0; i < removeList.length; i++) {\n                var remIdx = selectedRows.indexOf(removeList[i]);\n                selectedRows.splice(remIdx, 1);\n            }\n            this._grid.setSelectedRows(selectedRows, 'click.cleanup');\n        }\n    };\n    SlickCheckboxSelectColumn.prototype.handleDataViewSelectedIdsChanged = function () {\n        var _a;\n        var selectedIds = this._dataView.getAllSelectedFilteredIds();\n        var filteredItems = this._dataView.getFilteredItems();\n        var disabledCount = 0;\n        if (typeof this._selectableOverride === 'function' && selectedIds.length > 0) {\n            var _loop_1 = function (k) {\n                // If we are allowed to select the row\n                var dataItem = this_1._dataView.getItemByIdx(k);\n                var idProperty = this_1._dataView.getIdPropertyName();\n                var dataItemId = dataItem[idProperty];\n                var foundItemIdx = filteredItems.findIndex(function (item) {\n                    return item[idProperty] === dataItemId;\n                });\n                if (foundItemIdx >= 0 && !this_1.checkSelectableOverride(k, dataItem, this_1._grid)) {\n                    disabledCount++;\n                }\n            };\n            var this_1 = this;\n            for (var k = 0; k < this._dataView.getItemCount(); k++) {\n                _loop_1(k);\n            }\n        }\n        this._isSelectAllChecked = (selectedIds && selectedIds.length) + disabledCount >= filteredItems.length;\n        if (!this._options.hideInColumnTitleRow && !this._options.hideSelectAllCheckbox) {\n            this.renderSelectAllCheckbox(this._isSelectAllChecked);\n        }\n        if (!this._options.hideInFilterHeaderRow) {\n            var selectAllElm = (_a = this._headerRowNode) === null || _a === void 0 ? void 0 : _a.querySelector(\"#header-filter-selector\".concat(this._selectAll_UID));\n            if (selectAllElm) {\n                selectAllElm.checked = this._isSelectAllChecked;\n            }\n        }\n    };\n    SlickCheckboxSelectColumn.prototype.handleKeyDown = function (e, args) {\n        if (e.which == 32) {\n            if (this._grid.getColumns()[args.cell].id === this._options.columnId) {\n                // if editing, try to commit\n                if (!this._grid.getEditorLock().isActive() || this._grid.getEditorLock().commitCurrentEdit()) {\n                    this.toggleRowSelection(args.row);\n                }\n                e.preventDefault();\n                e.stopImmediatePropagation();\n            }\n        }\n    };\n    SlickCheckboxSelectColumn.prototype.handleClick = function (e, args) {\n        // clicking on a row select checkbox\n        if (this._grid.getColumns()[args.cell].id === this._options.columnId && e.target.type === 'checkbox') {\n            // if editing, try to commit\n            if (this._grid.getEditorLock().isActive() && !this._grid.getEditorLock().commitCurrentEdit()) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                return;\n            }\n            this.toggleRowSelection(args.row);\n            e.stopPropagation();\n            e.stopImmediatePropagation();\n        }\n    };\n    SlickCheckboxSelectColumn.prototype.toggleRowSelection = function (row) {\n        var dataContext = this._grid.getDataItem(row);\n        if (!this.checkSelectableOverride(row, dataContext, this._grid)) {\n            return;\n        }\n        if (this._selectedRowsLookup[row]) {\n            var newSelectedRows = this._grid.getSelectedRows().filter(function (n) { return n !== row; });\n            this._grid.setSelectedRows(newSelectedRows, 'click.toggle');\n        }\n        else {\n            this._grid.setSelectedRows(this._grid.getSelectedRows().concat(row), 'click.toggle');\n        }\n        this._grid.setActiveCell(row, this.getCheckboxColumnCellIndex());\n    };\n    SlickCheckboxSelectColumn.prototype.selectRows = function (rowArray) {\n        var addRows = [];\n        for (var i = 0, l = rowArray.length; i < l; i++) {\n            if (!this._selectedRowsLookup[rowArray[i]]) {\n                addRows[addRows.length] = rowArray[i];\n            }\n        }\n        this._grid.setSelectedRows(this._grid.getSelectedRows().concat(addRows), 'SlickCheckboxSelectColumn.selectRows');\n    };\n    SlickCheckboxSelectColumn.prototype.deSelectRows = function (rowArray) {\n        var removeRows = [];\n        for (var i = 0, l = rowArray.length; i < l; i++) {\n            if (this._selectedRowsLookup[rowArray[i]]) {\n                removeRows[removeRows.length] = rowArray[i];\n            }\n        }\n        this._grid.setSelectedRows(this._grid.getSelectedRows().filter(function (n) { return removeRows.indexOf(n) < 0; }), 'SlickCheckboxSelectColumn.deSelectRows');\n    };\n    SlickCheckboxSelectColumn.prototype.handleHeaderClick = function (e, args) {\n        if (args.column.id == this._options.columnId && e.target.type === 'checkbox') {\n            // if editing, try to commit\n            if (this._grid.getEditorLock().isActive() && !this._grid.getEditorLock().commitCurrentEdit()) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                return;\n            }\n            var isAllSelected = e.target.checked;\n            var caller = isAllSelected ? 'click.selectAll' : 'click.unselectAll';\n            var rows = [];\n            if (isAllSelected) {\n                for (var i = 0; i < this._grid.getDataLength(); i++) {\n                    // Get the row and check it's a selectable row before pushing it onto the stack\n                    var rowItem = this._grid.getDataItem(i);\n                    if (!rowItem.__group && !rowItem.__groupTotals && this.checkSelectableOverride(i, rowItem, this._grid)) {\n                        rows.push(i);\n                    }\n                }\n                isAllSelected = true;\n            }\n            if (this._isUsingDataView && this._dataView && this._options.applySelectOnAllPages) {\n                var ids = [];\n                var filteredItems = this._dataView.getFilteredItems();\n                for (var j = 0; j < filteredItems.length; j++) {\n                    // Get the row and check it's a selectable ID (it could be in a different page) before pushing it onto the stack\n                    var dataviewRowItem = filteredItems[j];\n                    if (this.checkSelectableOverride(j, dataviewRowItem, this._grid)) {\n                        ids.push(dataviewRowItem[this._dataView.getIdPropertyName()]);\n                    }\n                }\n                this._dataView.setSelectedIds(ids, { isRowBeingAdded: isAllSelected });\n            }\n            this._grid.setSelectedRows(rows, caller);\n            e.stopPropagation();\n            e.stopImmediatePropagation();\n        }\n    };\n    SlickCheckboxSelectColumn.prototype.getCheckboxColumnCellIndex = function () {\n        if (this._checkboxColumnCellIndex === null) {\n            this._checkboxColumnCellIndex = 0;\n            var colArr = this._grid.getColumns();\n            for (var i = 0; i < colArr.length; i++) {\n                if (colArr[i].id == this._options.columnId) {\n                    this._checkboxColumnCellIndex = i;\n                }\n            }\n        }\n        return this._checkboxColumnCellIndex;\n    };\n    SlickCheckboxSelectColumn.prototype.getColumnDefinition = function () {\n        var _a, _b, _c;\n        return {\n            id: this._options.columnId,\n            name: (this._options.hideSelectAllCheckbox || this._options.hideInColumnTitleRow) ? '' : \"<input id=\\\"header-selector\".concat(this._selectAll_UID, \"\\\" type=\\\"checkbox\\\"><label for=\\\"header-selector\").concat(this._selectAll_UID, \"\\\"></label>\"),\n            toolTip: (this._options.hideSelectAllCheckbox || this._options.hideInColumnTitleRow) ? '' : this._options.toolTip,\n            field: \"sel\",\n            width: this._options.width,\n            resizable: false,\n            sortable: false,\n            cssClass: this._options.cssClass,\n            hideSelectAllCheckbox: this._options.hideSelectAllCheckbox,\n            formatter: this.checkboxSelectionFormatter.bind(this),\n            // exclude from all menus, defaults to true unless the option is provided differently by the user\n            excludeFromColumnPicker: (_a = this._options.excludeFromColumnPicker) !== null && _a !== void 0 ? _a : true,\n            excludeFromGridMenu: (_b = this._options.excludeFromGridMenu) !== null && _b !== void 0 ? _b : true,\n            excludeFromHeaderMenu: (_c = this._options.excludeFromHeaderMenu) !== null && _c !== void 0 ? _c : true,\n        };\n    };\n    SlickCheckboxSelectColumn.prototype.addCheckboxToFilterHeaderRow = function (grid) {\n        var _this = this;\n        this._handler.subscribe(grid.onHeaderRowCellRendered, function (_e, args) {\n            if (args.column.field === \"sel\") {\n                Utils.emptyElement(args.node);\n                var spanElm = document.createElement('span');\n                spanElm.id = 'filter-checkbox-selectall-container';\n                var inputElm = document.createElement('input');\n                inputElm.type = 'checkbox';\n                inputElm.id = \"header-filter-selector\".concat(_this._selectAll_UID);\n                var labelElm = document.createElement('label');\n                labelElm.htmlFor = \"header-filter-selector\".concat(_this._selectAll_UID);\n                spanElm.appendChild(inputElm);\n                spanElm.appendChild(labelElm);\n                args.node.appendChild(spanElm);\n                _this._headerRowNode = args.node;\n                _this._bindingEventService.bind(spanElm, 'click', (function (e) { return _this.handleHeaderClick(e, args); }));\n            }\n        });\n    };\n    SlickCheckboxSelectColumn.prototype.createUID = function () {\n        return Math.round(10000000 * Math.random());\n    };\n    SlickCheckboxSelectColumn.prototype.checkboxSelectionFormatter = function (row, _cell, _val, _columnDef, dataContext, grid) {\n        var UID = this.createUID() + row;\n        if (dataContext) {\n            if (!this.checkSelectableOverride(row, dataContext, grid)) {\n                return null;\n            }\n            else {\n                return this._selectedRowsLookup[row]\n                    ? \"<input id=\\\"selector\".concat(UID, \"\\\" type=\\\"checkbox\\\" checked=\\\"checked\\\"><label for=\\\"selector\").concat(UID, \"\\\"></label>\")\n                    : \"<input id=\\\"selector\".concat(UID, \"\\\" type=\\\"checkbox\\\"><label for=\\\"selector\").concat(UID, \"\\\"></label>\");\n            }\n        }\n        return null;\n    };\n    SlickCheckboxSelectColumn.prototype.checkSelectableOverride = function (row, dataContext, grid) {\n        if (typeof this._selectableOverride === 'function') {\n            return this._selectableOverride(row, dataContext, grid);\n        }\n        return true;\n    };\n    SlickCheckboxSelectColumn.prototype.renderSelectAllCheckbox = function (isSelectAllChecked) {\n        if (isSelectAllChecked) {\n            this._grid.updateColumnHeader(this._options.columnId || '', \"<input id=\\\"header-selector\".concat(this._selectAll_UID, \"\\\" type=\\\"checkbox\\\" checked=\\\"checked\\\"><label for=\\\"header-selector\").concat(this._selectAll_UID, \"\\\"></label>\"), this._options.toolTip);\n        }\n        else {\n            this._grid.updateColumnHeader(this._options.columnId || '', \"<input id=\\\"header-selector\".concat(this._selectAll_UID, \"\\\" type=\\\"checkbox\\\"><label for=\\\"header-selector\").concat(this._selectAll_UID, \"\\\"></label>\"), this._options.toolTip);\n        }\n    };\n    /**\n     * Method that user can pass to override the default behavior or making every row a selectable row.\n     * In order word, user can choose which rows to be selectable or not by providing his own logic.\n     * @param overrideFn: override function callback\n     */\n    SlickCheckboxSelectColumn.prototype.selectableOverride = function (overrideFn) {\n        this._selectableOverride = overrideFn;\n    };\n    return SlickCheckboxSelectColumn;\n}());\nexports.SlickCheckboxSelectColumn = SlickCheckboxSelectColumn;\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n    Utils.extend(true, window, {\n        Slick: {\n            CheckboxSelectColumn: SlickCheckboxSelectColumn\n        }\n    });\n}\n"],
  "mappings": "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",
  "names": ["SlickCheckboxSelectColumn", "k"]
}
