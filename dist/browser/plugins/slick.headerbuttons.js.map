{
  "version": 3,
  "sources": ["../../../src/plugins/slick.headerbuttons.js"],
  "sourcesContent": ["import { BindingEventService as BindingEventService_, Event as SlickEvent_, EventHandler as EventHandler_, Utils as Utils_ } from '../slick.core';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (cjs/esm)\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : EventHandler_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n/***\n   * A plugin to add custom buttons to column headers.\n   *\n   * USAGE:\n   *\n   * Add the plugin .js & .css files and register it with the grid.\n   *\n   * To specify a custom button in a column header, extend the column definition like so:\n   *\n   *   var columns = [\n   *     {\n   *       id: 'myColumn',\n   *       name: 'My column',\n   *\n   *       // This is the relevant part\n   *       header: {\n   *          buttons: [\n   *              {\n   *                // button options\n   *              },\n   *              {\n   *                // button options\n   *              }\n   *          ]\n   *       }\n   *     }\n   *   ];\n   *\n   * Available button options:\n   *    cssClass:     CSS class to add to the button.\n   *    image:        Relative button image path.\n   *    disabled:     Whether the item is disabled.\n   *    tooltip:      Button tooltip.\n   *    showOnHover:  Only show the button on hover.\n   *    handler:      Button click handler.\n   *    command:      A command identifier to be passed to the onCommand event handlers.\n   *\n   * Available menu item options:\n   *    action:                   Optionally define a callback function that gets executed when item is chosen (and/or use the onCommand event)\n   *    command:                  A command identifier to be passed to the onCommand event handlers.\n   *    cssClass:                 CSS class to add to the button.\n   *    handler:                  Button click handler.\n   *    image:                    Relative button image path.\n   *    showOnHover:              Only show the button on hover.\n   *    tooltip:                  Button tooltip.\n   *    itemVisibilityOverride:   Callback method that user can override the default behavior of showing/hiding an item from the list\n   *    itemUsabilityOverride:    Callback method that user can override the default behavior of enabling/disabling an item from the list\n   *\n   * The plugin exposes the following events:\n   *    onCommand:    Fired on button click for buttons with 'command' specified.\n   *        Event args:\n   *            grid:     Reference to the grid.\n   *            column:   Column definition.\n   *            command:  Button command identified.\n   *            button:   Button options.  Note that you can change the button options in your\n   *                      event handler, and the column header will be automatically updated to\n   *                      reflect them.  This is useful if you want to implement something like a\n   *                      toggle button.\n   *\n   *\n   * @param options {Object} Options:\n   *    buttonCssClass:   a CSS class to use for buttons (default 'slick-header-button')\n   * @class Slick.Plugins.HeaderButtons\n   * @constructor\n   */\nexport function HeaderButtons(options) {\n    var _grid;\n    var _self = this;\n  var _handler = new EventHandler();\n  var _bindingEventService = new BindingEventService();\n    var _defaults = {\n      buttonCssClass: \"slick-header-button\"\n    };\n\n\n    function init(grid) {\n      options = Utils.extend(true, {}, _defaults, options);\n      _grid = grid;\n      _handler\n        .subscribe(_grid.onHeaderCellRendered, handleHeaderCellRendered)\n        .subscribe(_grid.onBeforeHeaderCellDestroy, handleBeforeHeaderCellDestroy);\n\n      // Force the grid to re-render the header now that the events are hooked up.\n      _grid.setColumns(_grid.getColumns());\n    }\n\n\n    function destroy() {\n      _handler.unsubscribeAll();\n      _bindingEventService.unbindAll();\n    }\n\n\n    function handleHeaderCellRendered(e, args) {\n      var column = args.column;\n\n      if (column.header && column.header.buttons) {\n        // Append buttons in reverse order since they are floated to the right.\n        var i = column.header.buttons.length;\n        while (i--) {\n          var button = column.header.buttons[i];\n\n          // run each override functions to know if the item is visible and usable\n          var isItemVisible = runOverrideFunctionWhenExists(button.itemVisibilityOverride, args);\n          var isItemUsable = runOverrideFunctionWhenExists(button.itemUsabilityOverride, args);\n\n          // if the result is not visible then there's no need to go further\n          if (!isItemVisible) {\n            continue;\n          }\n\n          // when the override is defined, we need to use its result to update the disabled property\n          // so that \"handleMenuItemCommandClick\" has the correct flag and won't trigger a command clicked event\n          if (Object.prototype.hasOwnProperty.call(button, \"itemUsabilityOverride\")) {\n            button.disabled = isItemUsable ? false : true;\n          }\n\n          const btn = document.createElement('div');\n          btn.className = options.buttonCssClass;\n          btn.ariaLabel = 'Header Button';\n          btn.role = 'button';\n\n          if (button.disabled) {\n            btn.classList.add(\"slick-header-button-disabled\");\n          }\n\n          if (button.showOnHover) {\n            btn.classList.add(\"slick-header-button-hidden\");\n          }\n\n          if (button.image) {\n            btn.style.backgroundImage = \"url(\" + button.image + \")\";\n          }\n\n          if (button.cssClass) {\n            btn.classList.add(...button.cssClass.split(' '));\n          }\n\n          if (button.tooltip) {\n            btn.title = button.tooltip;\n          }\n\n          if (button.handler) {\n            _bindingEventService.bind(btn, 'click', button.handler);\n          }\n\n          _bindingEventService.bind(btn, 'click', handleButtonClick.bind(this, button, args.column));\n          args.node.appendChild(btn);\n        }\n      }\n    }\n\n\n    function handleBeforeHeaderCellDestroy(e, args) {\n      var column = args.column;\n\n      if (column.header && column.header.buttons) {\n        // Removing buttons via jQuery will also clean up any event handlers and data.\n        // NOTE: If you attach event handlers directly or using a different framework,\n        //       you must also clean them up here to avoid memory leaks.\n        const buttonCssClass = (options.buttonCssClass || '').replace(/(\\s+)/g, '.');\n        if (buttonCssClass) {\n          args.node.querySelectorAll(`.${buttonCssClass}`).forEach(elm => elm.remove());\n        }\n      }\n    }\n\n\n    function handleButtonClick(button, columnDef, e) {\n      const command = button.command || '';\n      const callbackArgs = {\n        \"grid\": _grid,\n        \"column\": columnDef,\n        \"button\": button\n      };\n\n      if (command != null) {\n        callbackArgs.command = command;\n      }\n\n      // execute action callback when defined\n      if (typeof button.action === \"function\") {\n        button.action.call(this, e, callbackArgs);\n      }\n\n      if (command != null && !button.disabled) {\n        _self.onCommand.notify(callbackArgs, e, _self);\n\n        // Update the header in case the user updated the button definition in the handler.\n        _grid.updateColumnHeader(columnDef.id);\n      }\n\n      // Stop propagation so that it doesn't register as a header click event.\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n    /**\n     * Method that user can pass to override the default behavior.\n     * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\n     * @param overrideFn: override function callback\n     * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\n     */\n    function runOverrideFunctionWhenExists(overrideFn, args) {\n      if (typeof overrideFn === 'function') {\n        return overrideFn.call(this, args);\n      }\n      return true;\n    }\n\n  Utils.extend(this, {\n      \"init\": init,\n      \"destroy\": destroy,\n      \"pluginName\": \"HeaderButtons\",\n\n    \"onCommand\": new SlickEvent()\n    });\n  }\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      Plugins: {\n        HeaderButtons\n      }\n    }\n  });\n}\n\n"],
  "mappings": "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",
  "names": []
}
