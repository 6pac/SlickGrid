{
  "version": 3,
  "sources": ["../../../src/plugins/slick.headerbuttons.ts"],
  "sourcesContent": ["import type {\n  Column,\n  DOMEvent,\n  HeaderButtonItem,\n  HeaderButtonOnCommandArgs,\n  HeaderButtonOption,\n  OnHeaderCellRenderedEventArgs,\n  SlickPlugin\n} from '../models/index';\nimport { BindingEventService as BindingEventService_, Event as SlickEvent_, EventHandler as EventHandler_, Utils as Utils_ } from '../slick.core';\nimport type { SlickGrid } from '../slick.grid';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nconst BindingEventService = IIFE_ONLY ? Slick.BindingEventService : BindingEventService_;\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst EventHandler = IIFE_ONLY ? Slick.EventHandler : EventHandler_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\n/***\n   * A plugin to add custom buttons to column headers.\n   *\n   * USAGE:\n   *\n   * Add the plugin .js & .css files and register it with the grid.\n   *\n   * To specify a custom button in a column header, extend the column definition like so:\n   *\n   *   let columns = [\n   *     {\n   *       id: 'myColumn',\n   *       name: 'My column',\n   *\n   *       // This is the relevant part\n   *       header: {\n   *          buttons: [\n   *              {\n   *                // button options\n   *              },\n   *              {\n   *                // button options\n   *              }\n   *          ]\n   *       }\n   *     }\n   *   ];\n   *\n   * Available button options:\n   *    cssClass:     CSS class to add to the button.\n   *    image:        Relative button image path.\n   *    disabled:     Whether the item is disabled.\n   *    tooltip:      Button tooltip.\n   *    showOnHover:  Only show the button on hover.\n   *    handler:      Button click handler.\n   *    command:      A command identifier to be passed to the onCommand event handlers.\n   *\n   * Available menu item options:\n   *    action:                   Optionally define a callback function that gets executed when item is chosen (and/or use the onCommand event)\n   *    command:                  A command identifier to be passed to the onCommand event handlers.\n   *    cssClass:                 CSS class to add to the button.\n   *    handler:                  Button click handler.\n   *    image:                    Relative button image path.\n   *    showOnHover:              Only show the button on hover.\n   *    tooltip:                  Button tooltip.\n   *    itemVisibilityOverride:   Callback method that user can override the default behavior of showing/hiding an item from the list\n   *    itemUsabilityOverride:    Callback method that user can override the default behavior of enabling/disabling an item from the list\n   *\n   * The plugin exposes the following events:\n   *    onCommand:    Fired on button click for buttons with 'command' specified.\n   *        Event args:\n   *            grid:     Reference to the grid.\n   *            column:   Column definition.\n   *            command:  Button command identified.\n   *            button:   Button options.  Note that you can change the button options in your\n   *                      event handler, and the column header will be automatically updated to\n   *                      reflect them.  This is useful if you want to implement something like a\n   *                      toggle button.\n   *\n   *\n   * @param options {Object} Options:\n   *    buttonCssClass:   a CSS class to use for buttons (default 'slick-header-button')\n   * @class Slick.Plugins.HeaderButtons\n   * @constructor\n   */\nexport class SlickHeaderButtons implements SlickPlugin {\n  // --\n  // public API\n  pluginName = 'HeaderButtons' as const;\n  onCommand = new SlickEvent<HeaderButtonOnCommandArgs>();\n\n  // --\n  // protected props\n  protected _grid!: SlickGrid;\n  protected _handler = new EventHandler();\n  protected _bindingEventService = new BindingEventService();\n  protected _defaults: HeaderButtonOption = {\n    buttonCssClass: 'slick-header-button'\n  };\n  protected _options: HeaderButtonOption;\n\n  constructor(options: Partial<HeaderButtonOption>) {\n    this._options = Utils.extend(true, {}, this._defaults, options);\n  }\n\n  init(grid: SlickGrid) {\n    this._grid = grid;\n    this._handler\n      .subscribe(this._grid.onHeaderCellRendered, this.handleHeaderCellRendered.bind(this))\n      .subscribe(this._grid.onBeforeHeaderCellDestroy, this.handleBeforeHeaderCellDestroy.bind(this));\n\n    // Force the grid to re-render the header now that the events are hooked up.\n    this._grid.setColumns(this._grid.getColumns());\n  }\n\n  destroy() {\n    this._handler.unsubscribeAll();\n    this._bindingEventService.unbindAll();\n  }\n\n  protected handleHeaderCellRendered(_e: Event, args: OnHeaderCellRenderedEventArgs) {\n    const column = args.column;\n\n    if (column.header?.buttons) {\n      // Append buttons in reverse order since they are floated to the right.\n      let i = column.header.buttons.length;\n      while (i--) {\n        const button = column.header.buttons[i];\n\n        // run each override functions to know if the item is visible and usable\n        const isItemVisible = this.runOverrideFunctionWhenExists<typeof args>(button.itemVisibilityOverride, args);\n        const isItemUsable = this.runOverrideFunctionWhenExists<typeof args>(button.itemUsabilityOverride, args);\n\n        // if the result is not visible then there's no need to go further\n        if (!isItemVisible) {\n          continue;\n        }\n\n        // when the override is defined, we need to use its result to update the disabled property\n        // so that \"handleMenuItemCommandClick\" has the correct flag and won't trigger a command clicked event\n        if (Object.prototype.hasOwnProperty.call(button, 'itemUsabilityOverride')) {\n          button.disabled = isItemUsable ? false : true;\n        }\n\n        const btn = document.createElement('div');\n        btn.className = this._options.buttonCssClass || '';\n        btn.ariaLabel = 'Header Button';\n        btn.role = 'button';\n\n        if (button.disabled) {\n          btn.classList.add('slick-header-button-disabled');\n        }\n\n        if (button.showOnHover) {\n          btn.classList.add('slick-header-button-hidden');\n        }\n\n        if (button.image) {\n          btn.style.backgroundImage = `url(${button.image})`;\n        }\n\n        if (button.cssClass) {\n          btn.classList.add(...button.cssClass.split(' '));\n        }\n\n        if (button.tooltip) {\n          btn.title = button.tooltip;\n        }\n\n        if (button.handler && !button.disabled) {\n          this._bindingEventService.bind(btn, 'click', button.handler);\n        }\n\n        this._bindingEventService.bind(btn, 'click', this.handleButtonClick.bind(this, button, args.column) as EventListener);\n        args.node.appendChild(btn);\n      }\n    }\n  }\n\n\n  protected handleBeforeHeaderCellDestroy(_e: Event, args: { column: Column; node: HTMLElement; }) {\n    const column = args.column;\n\n    if (column.header?.buttons) {\n      // Removing buttons via jQuery will also clean up any event handlers and data.\n      // NOTE: If you attach event handlers directly or using a different framework,\n      //       you must also clean them up here to avoid memory leaks.\n      const buttonCssClass = (this._options.buttonCssClass || '').replace(/(\\s+)/g, '.');\n      if (buttonCssClass) {\n        args.node.querySelectorAll(`.${buttonCssClass}`).forEach(elm => elm.remove());\n      }\n    }\n  }\n\n  protected handleButtonClick(button: HeaderButtonItem, columnDef: Column, e: DOMEvent<HTMLDivElement>) {\n    const command = button.command || '';\n    const callbackArgs = {\n      grid: this._grid,\n      column: columnDef,\n      button\n    } as HeaderButtonOnCommandArgs;\n\n    if (command) {\n      callbackArgs.command = command;\n    }\n\n    // execute action callback when defined\n    if (typeof button.action === 'function') {\n      button.action.call(this, e, callbackArgs);\n    }\n\n    if (command && !button.disabled) {\n      this.onCommand.notify(callbackArgs, e, this);\n\n      // Update the header in case the user updated the button definition in the handler.\n      this._grid.updateColumnHeader(columnDef.id);\n    }\n\n    // Stop propagation so that it doesn't register as a header click event.\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  /**\n   * Method that user can pass to override the default behavior.\n   * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\n   * @param overrideFn: override function callback\n   * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\n   */\n  protected runOverrideFunctionWhenExists<T = any>(overrideFn: ((args: any) => boolean) | undefined, args: T): boolean {\n    if (typeof overrideFn === 'function') {\n      return overrideFn.call(this, args);\n    }\n    return true;\n  }\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      Plugins: {\n        HeaderButtons: SlickHeaderButtons\n      }\n    }\n  });\n}\n\n"],
  "mappings": "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",
  "names": []
}
