{
  "version": 3,
  "sources": ["import-ns:../slick.core.js", "../../../src/plugins/slick.headerbuttons.js"],
  "sourcesContent": ["// empty string, do nothing", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SlickHeaderButtons = void 0;\nvar slick_core_1 = require(\"../slick.core\");\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nvar BindingEventService = IIFE_ONLY ? Slick.BindingEventService : slick_core_1.BindingEventService;\nvar SlickEvent = IIFE_ONLY ? Slick.Event : slick_core_1.Event;\nvar EventHandler = IIFE_ONLY ? Slick.EventHandler : slick_core_1.EventHandler;\nvar Utils = IIFE_ONLY ? Slick.Utils : slick_core_1.Utils;\n/***\n   * A plugin to add custom buttons to column headers.\n   *\n   * USAGE:\n   *\n   * Add the plugin .js & .css files and register it with the grid.\n   *\n   * To specify a custom button in a column header, extend the column definition like so:\n   *\n   *   let columns = [\n   *     {\n   *       id: 'myColumn',\n   *       name: 'My column',\n   *\n   *       // This is the relevant part\n   *       header: {\n   *          buttons: [\n   *              {\n   *                // button options\n   *              },\n   *              {\n   *                // button options\n   *              }\n   *          ]\n   *       }\n   *     }\n   *   ];\n   *\n   * Available button options:\n   *    cssClass:     CSS class to add to the button.\n   *    image:        Relative button image path.\n   *    disabled:     Whether the item is disabled.\n   *    tooltip:      Button tooltip.\n   *    showOnHover:  Only show the button on hover.\n   *    handler:      Button click handler.\n   *    command:      A command identifier to be passed to the onCommand event handlers.\n   *\n   * Available menu item options:\n   *    action:                   Optionally define a callback function that gets executed when item is chosen (and/or use the onCommand event)\n   *    command:                  A command identifier to be passed to the onCommand event handlers.\n   *    cssClass:                 CSS class to add to the button.\n   *    handler:                  Button click handler.\n   *    image:                    Relative button image path.\n   *    showOnHover:              Only show the button on hover.\n   *    tooltip:                  Button tooltip.\n   *    itemVisibilityOverride:   Callback method that user can override the default behavior of showing/hiding an item from the list\n   *    itemUsabilityOverride:    Callback method that user can override the default behavior of enabling/disabling an item from the list\n   *\n   * The plugin exposes the following events:\n   *    onCommand:    Fired on button click for buttons with 'command' specified.\n   *        Event args:\n   *            grid:     Reference to the grid.\n   *            column:   Column definition.\n   *            command:  Button command identified.\n   *            button:   Button options.  Note that you can change the button options in your\n   *                      event handler, and the column header will be automatically updated to\n   *                      reflect them.  This is useful if you want to implement something like a\n   *                      toggle button.\n   *\n   *\n   * @param options {Object} Options:\n   *    buttonCssClass:   a CSS class to use for buttons (default 'slick-header-button')\n   * @class Slick.Plugins.HeaderButtons\n   * @constructor\n   */\nvar SlickHeaderButtons = /** @class */ (function () {\n    function SlickHeaderButtons(options) {\n        // --\n        // public API\n        this.pluginName = 'HeaderButtons';\n        this.onCommand = new SlickEvent();\n        this._handler = new EventHandler();\n        this._bindingEventService = new BindingEventService();\n        this._defaults = {\n            buttonCssClass: 'slick-header-button'\n        };\n        this._options = Utils.extend(true, {}, this._defaults, options);\n    }\n    SlickHeaderButtons.prototype.init = function (grid) {\n        this._grid = grid;\n        this._handler\n            .subscribe(this._grid.onHeaderCellRendered, this.handleHeaderCellRendered.bind(this))\n            .subscribe(this._grid.onBeforeHeaderCellDestroy, this.handleBeforeHeaderCellDestroy.bind(this));\n        // Force the grid to re-render the header now that the events are hooked up.\n        this._grid.setColumns(this._grid.getColumns());\n    };\n    SlickHeaderButtons.prototype.destroy = function () {\n        this._handler.unsubscribeAll();\n        this._bindingEventService.unbindAll();\n    };\n    SlickHeaderButtons.prototype.handleHeaderCellRendered = function (_e, args) {\n        var _a;\n        var _b;\n        var column = args.column;\n        if ((_b = column.header) === null || _b === void 0 ? void 0 : _b.buttons) {\n            // Append buttons in reverse order since they are floated to the right.\n            var i = column.header.buttons.length;\n            while (i--) {\n                var button = column.header.buttons[i];\n                // run each override functions to know if the item is visible and usable\n                var isItemVisible = this.runOverrideFunctionWhenExists(button.itemVisibilityOverride, args);\n                var isItemUsable = this.runOverrideFunctionWhenExists(button.itemUsabilityOverride, args);\n                // if the result is not visible then there's no need to go further\n                if (!isItemVisible) {\n                    continue;\n                }\n                // when the override is defined, we need to use its result to update the disabled property\n                // so that \"handleMenuItemCommandClick\" has the correct flag and won't trigger a command clicked event\n                if (Object.prototype.hasOwnProperty.call(button, 'itemUsabilityOverride')) {\n                    button.disabled = isItemUsable ? false : true;\n                }\n                var btn = document.createElement('div');\n                btn.className = this._options.buttonCssClass || '';\n                btn.ariaLabel = 'Header Button';\n                btn.role = 'button';\n                if (button.disabled) {\n                    btn.classList.add('slick-header-button-disabled');\n                }\n                if (button.showOnHover) {\n                    btn.classList.add('slick-header-button-hidden');\n                }\n                if (button.image) {\n                    btn.style.backgroundImage = \"url(\".concat(button.image, \")\");\n                }\n                if (button.cssClass) {\n                    (_a = btn.classList).add.apply(_a, button.cssClass.split(' '));\n                }\n                if (button.tooltip) {\n                    btn.title = button.tooltip;\n                }\n                if (button.handler && !button.disabled) {\n                    this._bindingEventService.bind(btn, 'click', button.handler);\n                }\n                this._bindingEventService.bind(btn, 'click', this.handleButtonClick.bind(this, button, args.column));\n                args.node.appendChild(btn);\n            }\n        }\n    };\n    SlickHeaderButtons.prototype.handleBeforeHeaderCellDestroy = function (_e, args) {\n        var _a;\n        var column = args.column;\n        if ((_a = column.header) === null || _a === void 0 ? void 0 : _a.buttons) {\n            // Removing buttons via jQuery will also clean up any event handlers and data.\n            // NOTE: If you attach event handlers directly or using a different framework,\n            //       you must also clean them up here to avoid memory leaks.\n            var buttonCssClass = (this._options.buttonCssClass || '').replace(/(\\s+)/g, '.');\n            if (buttonCssClass) {\n                args.node.querySelectorAll(\".\".concat(buttonCssClass)).forEach(function (elm) { return elm.remove(); });\n            }\n        }\n    };\n    SlickHeaderButtons.prototype.handleButtonClick = function (button, columnDef, e) {\n        var command = button.command || '';\n        var callbackArgs = {\n            grid: this._grid,\n            column: columnDef,\n            button: button\n        };\n        if (command) {\n            callbackArgs.command = command;\n        }\n        // execute action callback when defined\n        if (typeof button.action === 'function') {\n            button.action.call(this, e, callbackArgs);\n        }\n        if (command && !button.disabled) {\n            this.onCommand.notify(callbackArgs, e, this);\n            // Update the header in case the user updated the button definition in the handler.\n            this._grid.updateColumnHeader(columnDef.id);\n        }\n        // Stop propagation so that it doesn't register as a header click event.\n        e.preventDefault();\n        e.stopPropagation();\n    };\n    /**\n     * Method that user can pass to override the default behavior.\n     * In order word, user can choose or an item is (usable/visible/enable) by providing his own logic.\n     * @param overrideFn: override function callback\n     * @param args: multiple arguments provided to the override (cell, row, columnDef, dataContext, grid)\n     */\n    SlickHeaderButtons.prototype.runOverrideFunctionWhenExists = function (overrideFn, args) {\n        if (typeof overrideFn === 'function') {\n            return overrideFn.call(this, args);\n        }\n        return true;\n    };\n    return SlickHeaderButtons;\n}());\nexports.SlickHeaderButtons = SlickHeaderButtons;\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n    Utils.extend(true, window, {\n        Slick: {\n            Plugins: {\n                HeaderButtons: SlickHeaderButtons\n            }\n        }\n    });\n}\n"],
  "mappings": ";;;;;;;;AAAA;AAAA;AAAA;AAAA;;;ACAA;AAAA;AACA,aAAO,eAAe,SAAS,cAAc,EAAE,OAAO,GAAK,CAAC;AAC5D,cAAQ,qBAAqB;AAC7B,UAAI,eAAe,sBAEf,sBAAkC,MAAM,qBACxC,aAAyB,MAAM,OAC/B,eAA2B,MAAM,cACjC,QAAoB,MAAM,OAkE1B;AAAA;AAAA,QAAoC,WAAY;AAChD,mBAASA,oBAAmB,SAAS;AAGjC,iBAAK,aAAa,iBAClB,KAAK,YAAY,IAAI,WAAW,GAChC,KAAK,WAAW,IAAI,aAAa,GACjC,KAAK,uBAAuB,IAAI,oBAAoB,GACpD,KAAK,YAAY;AAAA,cACb,gBAAgB;AAAA,YACpB,GACA,KAAK,WAAW,MAAM,OAAO,IAAM,CAAC,GAAG,KAAK,WAAW,OAAO;AAAA,UAClE;AACA,iBAAAA,oBAAmB,UAAU,OAAO,SAAU,MAAM;AAChD,iBAAK,QAAQ,MACb,KAAK,SACA,UAAU,KAAK,MAAM,sBAAsB,KAAK,yBAAyB,KAAK,IAAI,CAAC,EACnF,UAAU,KAAK,MAAM,2BAA2B,KAAK,8BAA8B,KAAK,IAAI,CAAC,GAElG,KAAK,MAAM,WAAW,KAAK,MAAM,WAAW,CAAC;AAAA,UACjD,GACAA,oBAAmB,UAAU,UAAU,WAAY;AAC/C,iBAAK,SAAS,eAAe,GAC7B,KAAK,qBAAqB,UAAU;AAAA,UACxC,GACAA,oBAAmB,UAAU,2BAA2B,SAAU,IAAI,MAAM;AACxE,gBAAI,IACA,IACA,SAAS,KAAK;AAClB,gBAAK,QAAK,OAAO,YAAY,QAAQ,OAAO,WAAkB,GAAG;AAG7D,uBADI,IAAI,OAAO,OAAO,QAAQ,QACvB,OAAK;AACR,oBAAI,SAAS,OAAO,OAAO,QAAQ,CAAC,GAEhC,gBAAgB,KAAK,8BAA8B,OAAO,wBAAwB,IAAI,GACtF,eAAe,KAAK,8BAA8B,OAAO,uBAAuB,IAAI;AAExF,oBAAK,eAKL;AAAA,kBAAI,OAAO,UAAU,eAAe,KAAK,QAAQ,uBAAuB,MACpE,OAAO,WAAW;AAEtB,sBAAI,MAAM,SAAS,cAAc,KAAK;AACtC,sBAAI,YAAY,KAAK,SAAS,kBAAkB,IAChD,IAAI,YAAY,iBAChB,IAAI,OAAO,UACP,OAAO,YACP,IAAI,UAAU,IAAI,8BAA8B,GAEhD,OAAO,eACP,IAAI,UAAU,IAAI,4BAA4B,GAE9C,OAAO,UACP,IAAI,MAAM,kBAAkB,OAAO,OAAO,OAAO,OAAO,GAAG,IAE3D,OAAO,aACN,KAAK,IAAI,WAAW,IAAI,MAAM,IAAI,OAAO,SAAS,MAAM,GAAG,CAAC,GAE7D,OAAO,YACP,IAAI,QAAQ,OAAO,UAEnB,OAAO,WAAW,CAAC,OAAO,YAC1B,KAAK,qBAAqB,KAAK,KAAK,SAAS,OAAO,OAAO,GAE/D,KAAK,qBAAqB,KAAK,KAAK,SAAS,KAAK,kBAAkB,KAAK,MAAM,QAAQ,KAAK,MAAM,CAAC,GACnG,KAAK,KAAK,YAAY,GAAG;AAAA;AAAA,cAC7B;AAAA,UAER,GACAA,oBAAmB,UAAU,gCAAgC,SAAU,IAAI,MAAM;AAC7E,gBAAI,IACA,SAAS,KAAK;AAClB,gBAAK,QAAK,OAAO,YAAY,QAAQ,OAAO,WAAkB,GAAG,SAAS;AAItE,kBAAI,kBAAkB,KAAK,SAAS,kBAAkB,IAAI,QAAQ,UAAU,GAAG;AAC/E,cAAI,kBACA,KAAK,KAAK,iBAAiB,IAAI,OAAO,cAAc,CAAC,EAAE,QAAQ,SAAU,KAAK;AAAE,uBAAO,IAAI,OAAO;AAAA,cAAG,CAAC;AAAA,YAE9G;AAAA,UACJ,GACAA,oBAAmB,UAAU,oBAAoB,SAAU,QAAQ,WAAW,GAAG;AAC7E,gBAAI,UAAU,OAAO,WAAW,IAC5B,eAAe;AAAA,cACf,MAAM,KAAK;AAAA,cACX,QAAQ;AAAA,cACR;AAAA,YACJ;AACA,YAAI,YACA,aAAa,UAAU,UAGvB,OAAO,OAAO,UAAW,cACzB,OAAO,OAAO,KAAK,MAAM,GAAG,YAAY,GAExC,WAAW,CAAC,OAAO,aACnB,KAAK,UAAU,OAAO,cAAc,GAAG,IAAI,GAE3C,KAAK,MAAM,mBAAmB,UAAU,EAAE,IAG9C,EAAE,eAAe,GACjB,EAAE,gBAAgB;AAAA,UACtB,GAOAA,oBAAmB,UAAU,gCAAgC,SAAU,YAAY,MAAM;AACrF,mBAAI,OAAO,cAAe,aACf,WAAW,KAAK,MAAM,IAAI,IAE9B;AAAA,UACX,GACOA;AAAA,QACX,EAAE;AAAA;AACF,cAAQ,qBAAqB;AAE7B,MAAiB,OAAO,SACpB,MAAM,OAAO,IAAM,QAAQ;AAAA,QACvB,OAAO;AAAA,UACH,SAAS;AAAA,YACL,eAAe;AAAA,UACnB;AAAA,QACJ;AAAA,MACJ,CAAC;AAAA;AAAA;",
  "names": ["SlickHeaderButtons"]
}
