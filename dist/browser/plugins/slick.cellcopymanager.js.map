{
  "version": 3,
  "sources": ["../../../src/plugins/slick.cellcopymanager.ts"],
  "sourcesContent": ["import type { CssStyleHash, SlickPlugin } from '../models/index.js';\r\nimport { keyCode as keyCode_, SlickEvent as SlickEvent_, type SlickEventData, Utils as Utils_, type SlickRange } from '../slick.core.js';\r\nimport type { SlickGrid } from '../slick.grid.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst keyCode = IIFE_ONLY ? Slick.keyCode : keyCode_;\r\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/**\r\n * This manager enables users to copy/paste cell data\r\n */\r\nexport class SlickCellCopyManager implements SlickPlugin {\r\n  // --\r\n  // public API\r\n  pluginName = 'CellCopyManager' as const;\r\n  onCopyCells = new SlickEvent<{ ranges: SlickRange[] | null; }>('onCopyCells');\r\n  onCopyCancelled = new SlickEvent<{ ranges: SlickRange[] | null; }>('onCopyCancelled');\r\n  onPasteCells = new SlickEvent<{ from: SlickRange[] | undefined; to: SlickRange[] | undefined; }>('onPasteCells');\r\n\r\n  // --\r\n  // protected props\r\n  protected _grid!: SlickGrid;\r\n  protected _copiedRanges?: SlickRange[] | null = null;\r\n\r\n  init(grid: SlickGrid) {\r\n    this._grid = grid;\r\n    Utils.addSlickEventPubSubWhenDefined(grid.getPubSubService(), this);\r\n    this._grid.onKeyDown.subscribe(this.handleKeyDown.bind(this));\r\n  }\r\n\r\n  destroy() {\r\n    this._grid.onKeyDown.unsubscribe(this.handleKeyDown.bind(this));\r\n  }\r\n\r\n  protected handleKeyDown(e: SlickEventData) {\r\n    let ranges: SlickRange[] | undefined;\r\n    if (!this._grid.getEditorLock().isActive()) {\r\n      if (e.which === keyCode.ESCAPE) {\r\n        if (this._copiedRanges) {\r\n          e.preventDefault();\r\n          this.clearCopySelection();\r\n          this.onCopyCancelled.notify({ ranges: this._copiedRanges });\r\n          this._copiedRanges = null;\r\n        }\r\n      }\r\n\r\n      if (e.which === 67 && (e.ctrlKey || e.metaKey)) {\r\n        ranges = this._grid.getSelectionModel()?.getSelectedRanges() ?? [];\r\n        if (ranges.length !== 0) {\r\n          e.preventDefault();\r\n          this._copiedRanges = ranges;\r\n          this.markCopySelection(ranges);\r\n          this.onCopyCells.notify({ ranges });\r\n        }\r\n      }\r\n\r\n      if (e.which === 86 && (e.ctrlKey || e.metaKey)) {\r\n        if (this._copiedRanges) {\r\n          e.preventDefault();\r\n          ranges = this._grid.getSelectionModel()?.getSelectedRanges();\r\n          this.onPasteCells.notify({ from: this._copiedRanges, to: ranges });\r\n          if (!this._grid.getOptions().preserveCopiedSelectionOnPaste) {\r\n            this.clearCopySelection();\r\n            this._copiedRanges = null;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  protected markCopySelection(ranges: SlickRange[]) {\r\n    const columns = this._grid.getColumns();\r\n    const hash: CssStyleHash = {};\r\n    for (let i = 0; i < ranges.length; i++) {\r\n      for (let j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {\r\n        hash[j] = {};\r\n        for (let k = ranges[i].fromCell; k <= ranges[i].toCell; k++) {\r\n          hash[j][columns[k].id] = 'copied';\r\n        }\r\n      }\r\n    }\r\n    this._grid.setCellCssStyles('copy-manager', hash);\r\n  }\r\n\r\n  protected clearCopySelection() {\r\n    this._grid.removeCellCssStyles('copy-manager');\r\n  }\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(true, window, {\r\n    Slick: {\r\n      CellCopyManager: SlickCellCopyManager\r\n    }\r\n  });\r\n}\r\n"],
  "mappings": ";;;;;;;AAKA,MAAM,UAAsB,MAAM,SAC5B,aAAyB,MAAM,OAC/B,QAAoB,MAAM,OAKnB,uBAAN,MAAkD;AAAA,IAAlD;AAGL;AAAA;AAAA,wCAAa;AACb,yCAAc,IAAI,WAA6C,aAAa;AAC5E,6CAAkB,IAAI,WAA6C,iBAAiB;AACpF,0CAAe,IAAI,WAA8E,cAAc;AAI/G;AAAA;AAAA,0BAAU;AACV,0BAAU,iBAAsC;AAAA;AAAA,IAEhD,KAAK,MAAiB;AACpB,WAAK,QAAQ,MACb,MAAM,+BAA+B,KAAK,iBAAiB,GAAG,IAAI,GAClE,KAAK,MAAM,UAAU,UAAU,KAAK,cAAc,KAAK,IAAI,CAAC;AAAA,IAC9D;AAAA,IAEA,UAAU;AACR,WAAK,MAAM,UAAU,YAAY,KAAK,cAAc,KAAK,IAAI,CAAC;AAAA,IAChE;AAAA,IAEU,cAAc,GAAmB;AAnC7C;AAoCI,UAAI;AACJ,MAAK,KAAK,MAAM,cAAc,EAAE,SAAS,MACnC,EAAE,UAAU,QAAQ,UAClB,KAAK,kBACP,EAAE,eAAe,GACjB,KAAK,mBAAmB,GACxB,KAAK,gBAAgB,OAAO,EAAE,QAAQ,KAAK,cAAc,CAAC,GAC1D,KAAK,gBAAgB,OAIrB,EAAE,UAAU,OAAO,EAAE,WAAW,EAAE,aACpC,UAAS,gBAAK,MAAM,kBAAkB,MAA7B,mBAAgC,wBAAhC,YAAuD,CAAC,GAC7D,OAAO,WAAW,MACpB,EAAE,eAAe,GACjB,KAAK,gBAAgB,QACrB,KAAK,kBAAkB,MAAM,GAC7B,KAAK,YAAY,OAAO,EAAE,OAAO,CAAC,KAIlC,EAAE,UAAU,OAAO,EAAE,WAAW,EAAE,YAChC,KAAK,kBACP,EAAE,eAAe,GACjB,UAAS,UAAK,MAAM,kBAAkB,MAA7B,mBAAgC,qBACzC,KAAK,aAAa,OAAO,EAAE,MAAM,KAAK,eAAe,IAAI,OAAO,CAAC,GAC5D,KAAK,MAAM,WAAW,EAAE,mCAC3B,KAAK,mBAAmB,GACxB,KAAK,gBAAgB;AAAA,IAK/B;AAAA,IAEU,kBAAkB,QAAsB;AAChD,UAAM,UAAU,KAAK,MAAM,WAAW,GAChC,OAAqB,CAAC;AAC5B,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ;AACjC,iBAAS,IAAI,OAAO,CAAC,EAAE,SAAS,KAAK,OAAO,CAAC,EAAE,OAAO,KAAK;AACzD,eAAK,CAAC,IAAI,CAAC;AACX,mBAAS,IAAI,OAAO,CAAC,EAAE,UAAU,KAAK,OAAO,CAAC,EAAE,QAAQ;AACtD,iBAAK,CAAC,EAAE,QAAQ,CAAC,EAAE,EAAE,IAAI;AAAA,QAE7B;AAEF,WAAK,MAAM,iBAAiB,gBAAgB,IAAI;AAAA,IAClD;AAAA,IAEU,qBAAqB;AAC7B,WAAK,MAAM,oBAAoB,cAAc;AAAA,IAC/C;AAAA,EACF;AAGA,EAAiB,OAAO,SACtB,MAAM,OAAO,IAAM,QAAQ;AAAA,IACzB,OAAO;AAAA,MACL,iBAAiB;AAAA,IACnB;AAAA,EACF,CAAC;",
  "names": []
}
