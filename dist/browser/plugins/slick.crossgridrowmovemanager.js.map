{
  "version": 3,
  "sources": ["import-ns:../slick.core.js", "../../../src/plugins/slick.crossgridrowmovemanager.js"],
  "sourcesContent": ["// empty string, do nothing", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SlickCrossGridRowMoveManager = void 0;\nvar slick_core_1 = require(\"../slick.core\");\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nvar SlickEvent = IIFE_ONLY ? Slick.Event : slick_core_1.SlickEvent;\nvar SlickEventHandler = IIFE_ONLY ? Slick.EventHandler : slick_core_1.SlickEventHandler;\nvar Utils = IIFE_ONLY ? Slick.Utils : slick_core_1.Utils;\n/**\n * Row Move Manager options:\n *    cssClass:                 A CSS class to be added to the menu item container.\n *    columnId:                 Column definition id (defaults to \"_move\")\n *    cancelEditOnDrag:         Do we want to cancel any Editing while dragging a row (defaults to false)\n *    disableRowSelection:      Do we want to disable the row selection? (defaults to false)\n *    hideRowMoveShadow:        Do we want to hide the row move shadow clone? (defaults to true)\n *    rowMoveShadowMarginTop:   When row move shadow is shown, optional margin-top (defaults to 0)\n *    rowMoveShadowMarginLeft:  When row move shadow is shown, optional margin-left (defaults to 0)\n *    rowMoveShadowOpacity:     When row move shadow is shown, what is its opacity? (defaults to 0.95)\n *    rowMoveShadowScale:       When row move shadow is shown, what is its size scale? (default to 0.75)\n *    singleRowMove:            Do we want a single row move? Setting this to false means that it's a multple row move (defaults to false)\n *    width:                    Width of the column\n *    usabilityOverride:        Callback method that user can override the default behavior of the row being moveable or not\n *\n */\nvar SlickCrossGridRowMoveManager = /** @class */ (function () {\n    function SlickCrossGridRowMoveManager(options) {\n        // --\n        // public API\n        this.pluginName = 'CrossGridRowMoveManager';\n        this.onBeforeMoveRows = new SlickEvent();\n        this.onMoveRows = new SlickEvent();\n        this._dragging = false;\n        this._defaults = {\n            columnId: '_move',\n            cssClass: undefined,\n            cancelEditOnDrag: false,\n            disableRowSelection: false,\n            hideRowMoveShadow: true,\n            rowMoveShadowMarginTop: 0,\n            rowMoveShadowMarginLeft: 0,\n            rowMoveShadowOpacity: 0.95,\n            rowMoveShadowScale: 0.75,\n            singleRowMove: false,\n            toGrid: undefined,\n            width: 40,\n        };\n        this._options = Utils.extend(true, {}, this._defaults, options);\n        this._eventHandler = new SlickEventHandler();\n    }\n    SlickCrossGridRowMoveManager.prototype.init = function (grid) {\n        var _a;\n        this._grid = grid;\n        this._canvas = this._grid.getCanvasNode();\n        this._toGrid = this._options.toGrid;\n        this._toCanvas = this._toGrid.getCanvasNode();\n        // user could override the expandable icon logic from within the options or after instantiating the plugin\n        if (typeof ((_a = this._options) === null || _a === void 0 ? void 0 : _a.usabilityOverride) === 'function') {\n            this.usabilityOverride(this._options.usabilityOverride);\n        }\n        this._eventHandler\n            .subscribe(this._grid.onDragInit, this.handleDragInit.bind(this))\n            .subscribe(this._grid.onDragStart, this.handleDragStart.bind(this))\n            .subscribe(this._grid.onDrag, this.handleDrag.bind(this))\n            .subscribe(this._grid.onDragEnd, this.handleDragEnd.bind(this));\n    };\n    SlickCrossGridRowMoveManager.prototype.destroy = function () {\n        this._eventHandler.unsubscribeAll();\n    };\n    SlickCrossGridRowMoveManager.prototype.setOptions = function (newOptions) {\n        this._options = Utils.extend({}, this._options, newOptions);\n    };\n    SlickCrossGridRowMoveManager.prototype.handleDragInit = function (e) {\n        // prevent the grid from cancelling drag'n'drop by default\n        e.stopImmediatePropagation();\n    };\n    SlickCrossGridRowMoveManager.prototype.handleDragStart = function (e, dd) {\n        var _a;\n        var cell = this._grid.getCellFromEvent(e) || { cell: -1, row: -1 };\n        var currentRow = (_a = cell === null || cell === void 0 ? void 0 : cell.row) !== null && _a !== void 0 ? _a : 0;\n        var dataContext = this._grid.getDataItem(currentRow);\n        if (!this.checkUsabilityOverride(currentRow, dataContext, this._grid)) {\n            return;\n        }\n        if (this._options.cancelEditOnDrag && this._grid.getEditorLock().isActive()) {\n            this._grid.getEditorLock().cancelCurrentEdit();\n        }\n        if (this._grid.getEditorLock().isActive() || !this.isHandlerColumn(cell.cell)) {\n            return false;\n        }\n        this._dragging = true;\n        e.stopImmediatePropagation();\n        // optionally create a shadow element of the row so that we can see all the time which row exactly we're dragging\n        if (!this._options.hideRowMoveShadow) {\n            var cellNodeElm = this._grid.getCellNode(cell.row, cell.cell);\n            var slickRowElm = cellNodeElm === null || cellNodeElm === void 0 ? void 0 : cellNodeElm.closest('.slick-row');\n            if (slickRowElm) {\n                dd.clonedSlickRow = slickRowElm.cloneNode(true);\n                dd.clonedSlickRow.classList.add('slick-reorder-shadow-row');\n                dd.clonedSlickRow.style.display = 'none';\n                dd.clonedSlickRow.style.marginLeft = Number(this._options.rowMoveShadowMarginLeft || 0) + 'px';\n                dd.clonedSlickRow.style.marginTop = Number(this._options.rowMoveShadowMarginTop || 0) + 'px';\n                dd.clonedSlickRow.style.opacity = \"\".concat(this._options.rowMoveShadowOpacity || 0.95);\n                dd.clonedSlickRow.style.transform = \"scale(\".concat(this._options.rowMoveShadowScale || 0.75, \")\");\n                this._canvas.appendChild(dd.clonedSlickRow);\n            }\n        }\n        var selectedRows = this._options.singleRowMove ? [cell.row] : this._grid.getSelectedRows();\n        if (selectedRows.length === 0 || !selectedRows.some(function (selectedRow) { return selectedRow === cell.row; })) {\n            selectedRows = [cell.row];\n            if (!this._options.disableRowSelection) {\n                this._grid.setSelectedRows(selectedRows);\n            }\n        }\n        selectedRows.sort(function (a, b) { return a - b; });\n        var rowHeight = this._grid.getOptions().rowHeight;\n        dd.fromGrid = this._grid;\n        dd.toGrid = this._toGrid;\n        dd.selectedRows = selectedRows;\n        dd.selectionProxy = document.createElement('div');\n        dd.selectionProxy.className = 'slick-reorder-proxy';\n        dd.selectionProxy.style.display = 'none';\n        dd.selectionProxy.style.position = 'absolute';\n        dd.selectionProxy.style.zIndex = '99999';\n        dd.selectionProxy.style.width = \"\".concat(this._toCanvas.clientWidth, \"px\");\n        dd.selectionProxy.style.height = \"\".concat(rowHeight * selectedRows.length, \"px\");\n        this._toCanvas.appendChild(dd.selectionProxy);\n        dd.guide = document.createElement('div');\n        dd.guide.className = 'slick-reorder-guide';\n        dd.guide.style.position = 'absolute';\n        dd.guide.style.zIndex = '99999';\n        dd.guide.style.width = \"\".concat(this._toCanvas.clientWidth, \"px\");\n        dd.guide.style.top = \"-1000px\";\n        this._toCanvas.appendChild(dd.guide);\n        dd.insertBefore = -1;\n    };\n    SlickCrossGridRowMoveManager.prototype.handleDrag = function (evt, dd) {\n        var _a, _b, _c, _d;\n        if (!this._dragging) {\n            return;\n        }\n        evt.stopImmediatePropagation();\n        var e = evt.getNativeEvent();\n        var targetEvent = (_b = (_a = e.touches) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : e;\n        var top = targetEvent.pageY - ((_d = (_c = Utils.offset(this._toCanvas)) === null || _c === void 0 ? void 0 : _c.top) !== null && _d !== void 0 ? _d : 0);\n        dd.selectionProxy.style.top = \"\".concat(top - 5, \"px\");\n        dd.selectionProxy.style.display = 'block';\n        // if the row move shadow is enabled, we'll also make it follow the mouse cursor\n        if (dd.clonedSlickRow) {\n            dd.clonedSlickRow.style.top = \"\".concat(top - 6, \"px\");\n            dd.clonedSlickRow.style.display = 'block';\n        }\n        var insertBefore = Math.max(0, Math.min(Math.round(top / this._toGrid.getOptions().rowHeight), this._toGrid.getDataLength()));\n        if (insertBefore !== dd.insertBefore) {\n            var eventData = {\n                fromGrid: this._grid,\n                toGrid: this._toGrid,\n                rows: dd.selectedRows,\n                insertBefore: insertBefore\n            };\n            if (this.onBeforeMoveRows.notify(eventData).getReturnValue() === false) {\n                dd.canMove = false;\n            }\n            else {\n                dd.canMove = true;\n            }\n            // if there's a UsabilityOverride defined, we also need to verify that the condition is valid\n            if (this._usabilityOverride && dd.canMove) {\n                var insertBeforeDataContext = this._toGrid.getDataItem(insertBefore);\n                dd.canMove = this.checkUsabilityOverride(insertBefore, insertBeforeDataContext, this._toGrid);\n            }\n            // if the new target is possible we'll display the dark blue bar (representin the acceptability) at the target position\n            // else it won't show up (it will be off the screen)\n            if (!dd.canMove) {\n                dd.guide.style.top = '-1000px';\n            }\n            else {\n                dd.guide.style.top = \"\".concat(insertBefore * (this._toGrid.getOptions().rowHeight || 0), \"px\");\n            }\n            dd.insertBefore = insertBefore;\n        }\n    };\n    SlickCrossGridRowMoveManager.prototype.handleDragEnd = function (e, dd) {\n        var _a, _b, _c;\n        if (!this._dragging) {\n            return;\n        }\n        this._dragging = false;\n        e.stopImmediatePropagation();\n        (_a = dd.guide) === null || _a === void 0 ? void 0 : _a.remove();\n        (_b = dd.selectionProxy) === null || _b === void 0 ? void 0 : _b.remove();\n        (_c = dd.clonedSlickRow) === null || _c === void 0 ? void 0 : _c.remove();\n        if (dd.canMove) {\n            var eventData = {\n                fromGrid: this._grid,\n                toGrid: this._toGrid,\n                rows: dd.selectedRows,\n                insertBefore: dd.insertBefore\n            };\n            // TODO:  this._grid.remapCellCssClasses ?\n            this.onMoveRows.notify(eventData);\n        }\n    };\n    SlickCrossGridRowMoveManager.prototype.getColumnDefinition = function () {\n        var _a, _b;\n        var columnId = String((_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.columnId) !== null && _b !== void 0 ? _b : this._defaults.columnId);\n        return {\n            id: columnId,\n            name: '',\n            field: 'move',\n            behavior: 'selectAndMove',\n            excludeFromColumnPicker: true,\n            excludeFromGridMenu: true,\n            excludeFromHeaderMenu: true,\n            selectable: false,\n            resizable: false,\n            width: this._options.width || 40,\n            formatter: this.moveIconFormatter.bind(this)\n        };\n    };\n    SlickCrossGridRowMoveManager.prototype.moveIconFormatter = function (row, _cell, _val, _column, dataContext, grid) {\n        if (!this.checkUsabilityOverride(row, dataContext, grid)) {\n            return '';\n        }\n        else {\n            return { addClasses: \"cell-reorder dnd \".concat(this._options.cssClass || ''), text: '' };\n        }\n    };\n    SlickCrossGridRowMoveManager.prototype.checkUsabilityOverride = function (row, dataContext, grid) {\n        if (typeof this._usabilityOverride === 'function') {\n            return this._usabilityOverride(row, dataContext, grid);\n        }\n        return true;\n    };\n    /**\n     * Method that user can pass to override the default behavior or making every row moveable.\n     * In order word, user can choose which rows to be an available as moveable (or not) by providing his own logic show/hide icon and usability.\n     * @param overrideFn: override function callback\n     */\n    SlickCrossGridRowMoveManager.prototype.usabilityOverride = function (overrideFn) {\n        this._usabilityOverride = overrideFn;\n    };\n    SlickCrossGridRowMoveManager.prototype.isHandlerColumn = function (columnIndex) {\n        return /move|selectAndMove/.test(this._grid.getColumns()[+columnIndex].behavior || '');\n    };\n    return SlickCrossGridRowMoveManager;\n}());\nexports.SlickCrossGridRowMoveManager = SlickCrossGridRowMoveManager;\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n    Utils.extend(true, window, {\n        Slick: {\n            CrossGridRowMoveManager: SlickCrossGridRowMoveManager\n        }\n    });\n}\n"],
  "mappings": "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",
  "names": ["SlickCrossGridRowMoveManager"]
}
