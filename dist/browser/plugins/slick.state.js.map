{
  "version": 3,
  "sources": ["../../../src/plugins/slick.state.ts"],
  "sourcesContent": ["import { SlickEvent as SlickEvent_, Utils as Utils_ } from '../slick.core';\nimport type { Column, ColumnSort, SlickPlugin } from '../models/index';\nimport type { SlickGrid } from '../slick.grid';\n\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\nconst SlickEvent = IIFE_ONLY ? Slick.Event : SlickEvent_;\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\n\nexport interface SlickStateOption {\n  /** optional grid state clientId */\n  cid: string;\n\n  /** default columns when loadnig the grid */\n  defaultColumns: Column[];\n\n  /** local storage key prefix */\n  key_prefix: string;\n\n  /** should we scroll the grid into view? */\n  scrollRowIntoView: boolean;\n\n  /** local storage wrapper */\n  storage: LocalStorageWrapper;\n}\n\nexport interface CurrentState {\n  columns: Array<{ id: string | number; width: number | undefined; }>;\n  sortcols: ColumnSort[];\n  userData: any;\n  viewport: { top: number; bottom: number; leftPx: number; rightPx: number; };\n}\n\nclass LocalStorageWrapper {\n  protected localStorage = window.localStorage;\n\n  constructor() {\n    if (typeof localStorage === 'undefined') {\n      console.error('localStorage is not available. slickgrid statepersistor disabled.');\n    }\n  }\n\n  get<T = any>(key: string) {\n    return new Promise<T>((resolve, reject) => {\n      if (!localStorage) {\n        reject('missing localStorage');\n        return;\n      }\n      try {\n        const d = localStorage.getItem(key);\n        if (d) {\n          return resolve(JSON.parse(d) as T);\n        }\n        resolve({} as T);\n      } catch (exc) {\n        reject(exc);\n      }\n    });\n  }\n\n  set(key: string, obj: any) {\n    if (!localStorage) { return; }\n    if (typeof obj !== 'undefined') {\n      obj = JSON.stringify(obj);\n    }\n    localStorage.setItem(key, obj);\n  }\n};\n\nexport class SlickState implements SlickPlugin {\n  // --\n  // public API\n  pluginName = 'State' as const;\n  onStateChanged = new SlickEvent<CurrentState>();\n\n  // --\n  // protected props\n  protected _grid!: SlickGrid;\n  protected _cid = '';\n  protected _store: LocalStorageWrapper;\n  protected _options: SlickStateOption;\n  protected _state?: CurrentState;\n  protected _userData = {\n    state: null,\n    current: null\n  };\n\n  constructor(options: Partial<SlickStateOption>) {\n    const defaults = {\n      key_prefix: 'slickgrid:',\n      storage: new LocalStorageWrapper(),\n      scrollRowIntoView: true\n    };\n    this._options = Utils.extend(true, {}, defaults, options);\n    this._store = this._options.storage;\n  }\n\n  init(grid: SlickGrid) {\n    this._grid = grid;\n    this._cid = grid.cid || this._options.cid;\n    if (this._cid) {\n      this._grid.onColumnsResized.subscribe(this.save.bind(this));\n      this._grid.onColumnsReordered.subscribe(this.save.bind(this));\n      this._grid.onSort.subscribe(this.save.bind(this));\n    } else {\n      console.warn('grid has no client id. state persisting is disabled.');\n    }\n  }\n\n  destroy() {\n    this._grid.onSort.unsubscribe(this.save.bind(this));\n    this._grid.onColumnsReordered.unsubscribe(this.save.bind(this));\n    this._grid.onColumnsResized.unsubscribe(this.save.bind(this));\n    this.save();\n  }\n\n  save() {\n    if (this._cid && this._store) {\n      this._state = {\n        sortcols: this.getSortColumns(),\n        viewport: this._grid.getViewport(),\n        columns: this.getColumns(),\n        userData: null\n      };\n      this._state.userData = this._userData.current;\n      this.setUserDataFromState(this._state.userData);\n      this.onStateChanged.notify(this._state);\n\n      return this._store.set(this._options.key_prefix + this._cid, this._state);\n    }\n  }\n\n  restore() {\n    return new Promise((resolve, reject) => {\n      if (!this._cid) {\n        reject('missing client id');\n        return;\n      }\n      if (!this._store) {\n        reject('missing store');\n        return;\n      }\n\n      this._store.get<CurrentState>(this._options.key_prefix + this._cid)\n        .then((state) => {\n          if (state) {\n            if (state.sortcols) {\n              this._grid.setSortColumns(state.sortcols || []);\n            }\n            if (state.viewport && this._options.scrollRowIntoView) {\n              this._grid.scrollRowIntoView(state.viewport.top, true);\n            }\n            if (state.columns) {\n              const defaultColumns = this._options.defaultColumns;\n              if (defaultColumns) {\n                const defaultColumnsLookup: Record<number | string, Column> = {};\n                defaultColumns.forEach((colDef) => defaultColumnsLookup[colDef.id] = colDef);\n\n                const cols: Array<{ id: string | number; width: number | undefined; }> = [];\n                (state.columns || []).forEach((columnDef) => {\n                  if (defaultColumnsLookup[columnDef.id]) {\n                    cols.push(Utils.extend(true, {}, defaultColumnsLookup[columnDef.id], {\n                      width: columnDef.width,\n                      headerCssClass: (columnDef as Column).headerCssClass\n                    }));\n                  }\n                });\n\n                state.columns = cols;\n              }\n\n              this._grid.setColumns(state.columns as Column[]);\n            }\n            this.setUserDataFromState(state.userData);\n          }\n          resolve(state);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n\n  /**\n   * allows users to add their own data to the grid state\n   * this function does not trigger the save() function, so the actual act of writing the state happens in save()\n   * therefore, it's necessary to call save() function after setting user-data\n   *\n   * @param data\n   * @return {State}\n   */\n  setUserData(data: any) {\n    this._userData.current = data;\n    return this;\n  }\n\n  /**\n   *\n   * @internal\n   * @param data\n   * @return {State}\n   */\n  setUserDataFromState(data: any) {\n    this._userData.state = data;\n    return this.setUserData(data);\n  }\n\n  /**\n   * returns current value of user-data\n   * @return {Object}\n   */\n  getUserData() {\n    return this._userData.current;\n  }\n\n  /**\n   * returns user-data found in saved state\n   *\n   * @return {Object}\n   */\n  getStateUserData() {\n    return this._userData.state;\n  }\n\n  /**\n   * Sets user-data to the value read from state\n   * @return {State}\n   */\n  resetUserData() {\n    this._userData.current = this._userData.state;\n    return this;\n  }\n\n  getColumns() {\n    return this._grid.getColumns().map((col) => ({\n      id: col.id,\n      width: col.width\n    }));\n  }\n\n  getSortColumns() {\n    return this._grid.getSortColumns();\n  }\n\n  reset() {\n    this._store.set(this._options.key_prefix + this._cid, {});\n    this.setUserDataFromState(null);\n  }\n}\n\n// extend Slick namespace on window object when building as iife\nif (IIFE_ONLY && window.Slick) {\n  Utils.extend(true, window, {\n    Slick: {\n      State: SlickState\n    }\n  });\n}\n\n"],
  "mappings": ";;;;;;;AAKA,MAAM,aAAyB,MAAM,OAC/B,QAAoB,MAAM,OA0B1B,sBAAN,MAA0B;AAAA,IAGxB,cAAc;AAFd,0BAAU,gBAAe,OAAO;AAG9B,MAAI,OAAO,gBAAiB,eAC1B,QAAQ,MAAM,mEAAmE;AAAA,IAErF;AAAA,IAEA,IAAa,KAAa;AACxB,aAAO,IAAI,QAAW,CAAC,SAAS,WAAW;AACzC,YAAI,CAAC,cAAc;AACjB,iBAAO,sBAAsB;AAC7B;AAAA,QACF;AACA,YAAI;AACF,cAAM,IAAI,aAAa,QAAQ,GAAG;AAClC,cAAI;AACF,mBAAO,QAAQ,KAAK,MAAM,CAAC,CAAM;AAEnC,kBAAQ,CAAC,CAAM;AAAA,QACjB,SAAS,KAAK;AACZ,iBAAO,GAAG;AAAA,QACZ;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IAEA,IAAI,KAAa,KAAU;AACzB,MAAK,iBACD,OAAO,OAAQ,gBACjB,MAAM,KAAK,UAAU,GAAG,IAE1B,aAAa,QAAQ,KAAK,GAAG;AAAA,IAC/B;AAAA,EACF,GAEa,aAAN,MAAwC;AAAA,IAkB7C,YAAY,SAAoC;AAfhD;AAAA;AAAA,wCAAa;AACb,4CAAiB,IAAI,WAAyB;AAI9C;AAAA;AAAA,0BAAU;AACV,0BAAU,QAAO;AACjB,0BAAU;AACV,0BAAU;AACV,0BAAU;AACV,0BAAU,aAAY;AAAA,QACpB,OAAO;AAAA,QACP,SAAS;AAAA,MACX;AAGE,UAAM,WAAW;AAAA,QACf,YAAY;AAAA,QACZ,SAAS,IAAI,oBAAoB;AAAA,QACjC,mBAAmB;AAAA,MACrB;AACA,WAAK,WAAW,MAAM,OAAO,IAAM,CAAC,GAAG,UAAU,OAAO,GACxD,KAAK,SAAS,KAAK,SAAS;AAAA,IAC9B;AAAA,IAEA,KAAK,MAAiB;AACpB,WAAK,QAAQ,MACb,KAAK,OAAO,KAAK,OAAO,KAAK,SAAS,KAClC,KAAK,QACP,KAAK,MAAM,iBAAiB,UAAU,KAAK,KAAK,KAAK,IAAI,CAAC,GAC1D,KAAK,MAAM,mBAAmB,UAAU,KAAK,KAAK,KAAK,IAAI,CAAC,GAC5D,KAAK,MAAM,OAAO,UAAU,KAAK,KAAK,KAAK,IAAI,CAAC,KAEhD,QAAQ,KAAK,sDAAsD;AAAA,IAEvE;AAAA,IAEA,UAAU;AACR,WAAK,MAAM,OAAO,YAAY,KAAK,KAAK,KAAK,IAAI,CAAC,GAClD,KAAK,MAAM,mBAAmB,YAAY,KAAK,KAAK,KAAK,IAAI,CAAC,GAC9D,KAAK,MAAM,iBAAiB,YAAY,KAAK,KAAK,KAAK,IAAI,CAAC,GAC5D,KAAK,KAAK;AAAA,IACZ;AAAA,IAEA,OAAO;AACL,UAAI,KAAK,QAAQ,KAAK;AACpB,oBAAK,SAAS;AAAA,UACZ,UAAU,KAAK,eAAe;AAAA,UAC9B,UAAU,KAAK,MAAM,YAAY;AAAA,UACjC,SAAS,KAAK,WAAW;AAAA,UACzB,UAAU;AAAA,QACZ,GACA,KAAK,OAAO,WAAW,KAAK,UAAU,SACtC,KAAK,qBAAqB,KAAK,OAAO,QAAQ,GAC9C,KAAK,eAAe,OAAO,KAAK,MAAM,GAE/B,KAAK,OAAO,IAAI,KAAK,SAAS,aAAa,KAAK,MAAM,KAAK,MAAM;AAAA,IAE5E;AAAA,IAEA,UAAU;AACR,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAI,CAAC,KAAK,MAAM;AACd,iBAAO,mBAAmB;AAC1B;AAAA,QACF;AACA,YAAI,CAAC,KAAK,QAAQ;AAChB,iBAAO,eAAe;AACtB;AAAA,QACF;AAEA,aAAK,OAAO,IAAkB,KAAK,SAAS,aAAa,KAAK,IAAI,EAC/D,KAAK,CAAC,UAAU;AACf,cAAI,OAAO;AAOT,gBANI,MAAM,YACR,KAAK,MAAM,eAAe,MAAM,YAAY,CAAC,CAAC,GAE5C,MAAM,YAAY,KAAK,SAAS,qBAClC,KAAK,MAAM,kBAAkB,MAAM,SAAS,KAAK,EAAI,GAEnD,MAAM,SAAS;AACjB,kBAAM,iBAAiB,KAAK,SAAS;AACrC,kBAAI,gBAAgB;AAClB,oBAAM,uBAAwD,CAAC;AAC/D,+BAAe,QAAQ,CAAC,WAAW,qBAAqB,OAAO,EAAE,IAAI,MAAM;AAE3E,oBAAM,OAAmE,CAAC;AAC1E,iBAAC,MAAM,WAAW,CAAC,GAAG,QAAQ,CAAC,cAAc;AAC3C,kBAAI,qBAAqB,UAAU,EAAE,KACnC,KAAK,KAAK,MAAM,OAAO,IAAM,CAAC,GAAG,qBAAqB,UAAU,EAAE,GAAG;AAAA,oBACnE,OAAO,UAAU;AAAA,oBACjB,gBAAiB,UAAqB;AAAA,kBACxC,CAAC,CAAC;AAAA,gBAEN,CAAC,GAED,MAAM,UAAU;AAAA,cAClB;AAEA,mBAAK,MAAM,WAAW,MAAM,OAAmB;AAAA,YACjD;AACA,iBAAK,qBAAqB,MAAM,QAAQ;AAAA,UAC1C;AACA,kBAAQ,KAAK;AAAA,QACf,CAAC,EACA,MAAM,CAAC,MAAM;AACZ,iBAAO,CAAC;AAAA,QACV,CAAC;AAAA,MACL,CAAC;AAAA,IACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,YAAY,MAAW;AACrB,kBAAK,UAAU,UAAU,MAClB;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,qBAAqB,MAAW;AAC9B,kBAAK,UAAU,QAAQ,MAChB,KAAK,YAAY,IAAI;AAAA,IAC9B;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,cAAc;AACZ,aAAO,KAAK,UAAU;AAAA,IACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,mBAAmB;AACjB,aAAO,KAAK,UAAU;AAAA,IACxB;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,gBAAgB;AACd,kBAAK,UAAU,UAAU,KAAK,UAAU,OACjC;AAAA,IACT;AAAA,IAEA,aAAa;AACX,aAAO,KAAK,MAAM,WAAW,EAAE,IAAI,CAAC,SAAS;AAAA,QAC3C,IAAI,IAAI;AAAA,QACR,OAAO,IAAI;AAAA,MACb,EAAE;AAAA,IACJ;AAAA,IAEA,iBAAiB;AACf,aAAO,KAAK,MAAM,eAAe;AAAA,IACnC;AAAA,IAEA,QAAQ;AACN,WAAK,OAAO,IAAI,KAAK,SAAS,aAAa,KAAK,MAAM,CAAC,CAAC,GACxD,KAAK,qBAAqB,IAAI;AAAA,IAChC;AAAA,EACF;AAGA,EAAiB,OAAO,SACtB,MAAM,OAAO,IAAM,QAAQ;AAAA,IACzB,OAAO;AAAA,MACL,OAAO;AAAA,IACT;AAAA,EACF,CAAC;",
  "names": []
}
