{
  "version": 3,
  "sources": ["../../src/slick.compositeeditor.ts"],
  "sourcesContent": ["import type { Column, CompositeEditorOption, Editor, EditorArguments, HtmlElementPosition } from './models/index.js';\r\nimport { Utils as Utils_ } from './slick.core.js';\r\n\r\n// for (iife) load Slick methods from global Slick object, or use imports for (esm)\r\nconst Utils = IIFE_ONLY ? Slick.Utils : Utils_;\r\n\r\n/**\r\n * A composite SlickGrid editor factory.\r\n * Generates an editor that is composed of multiple editors for given columns.\r\n * Individual editors are provided given containers instead of the original cell.\r\n * Validation will be performed on all editors individually and the results will be aggregated into one\r\n * validation result.\r\n *\r\n *\r\n * The returned editor will have its prototype set to CompositeEditor, so you can use the \"instanceof\" check.\r\n *\r\n * NOTE:  This doesn't work for detached editors since they will be created and positioned relative to the\r\n *        active cell and not the provided container.\r\n *\r\n * @namespace Slick\r\n * @class CompositeEditor\r\n * @constructor\r\n * @param columns {Array} Column definitions from which editors will be pulled.\r\n * @param containers {Array} Container HTMLElements in which editors will be placed.\r\n * @param options {Object} Options hash:\r\n *  validationFailedMsg     -   A generic failed validation message set on the aggregated validation resuls.\r\n *  validationMsgPrefix     -   Add an optional prefix to each validation message (only the ones shown in the modal form, not the ones in the \"errors\")\r\n *  modalType               -   Defaults to \"edit\", modal type can 1 of these 3: (create, edit, mass, mass-selection)\r\n *  hide                    -   A function to be called when the grid asks the editor to hide itself.\r\n *  show                    -   A function to be called when the grid asks the editor to show itself.\r\n *  position                -   A function to be called when the grid asks the editor to reposition itself.\r\n *  destroy                 -   A function to be called when the editor is destroyed.\r\n */\r\nexport function SlickCompositeEditor(columns: Column[], containers: Array<HTMLDivElement>, options: CompositeEditorOption) {\r\n  const defaultOptions = {\r\n    modalType: 'edit', // available type (create, edit, mass)\r\n    validationFailedMsg: 'Some of the fields have failed validation',\r\n    validationMsgPrefix: null,\r\n    show: null,\r\n    hide: null,\r\n    position: null,\r\n    destroy: null,\r\n    formValues: {},\r\n    editors: {}\r\n  };\r\n\r\n  const noop = function () { };\r\n\r\n  let firstInvalidEditor: Editor | null = null;\r\n\r\n  options = Slick.Utils.extend({}, defaultOptions, options);\r\n\r\n  function getContainerBox(i: number) {\r\n    const c = containers[i];\r\n    const offset = Slick.Utils.offset(c);\r\n    const w = Slick.Utils.width(c);\r\n    const h = Slick.Utils.height(c);\r\n\r\n    return {\r\n      top: (offset?.top ?? 0),\r\n      left: (offset?.left ?? 0),\r\n      bottom: (offset?.top ?? 0) + (h || 0),\r\n      right: (offset?.left ?? 0) + (w || 0),\r\n      width: w,\r\n      height: h,\r\n      visible: true\r\n    };\r\n  }\r\n\r\n  function editor(args: any[]) {\r\n    // @ts-ignore\r\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n    const context: any = this;\r\n    let editors: Array<Editor & { args: EditorArguments }> = [];\r\n\r\n    function init() {\r\n      let newArgs: any = {};\r\n      let idx = 0;\r\n      while (idx < columns.length) {\r\n        if (columns[idx].editor) {\r\n          const column = columns[idx];\r\n          newArgs = Slick.Utils.extend(false, {}, args);\r\n          newArgs.container = containers[idx];\r\n          newArgs.column = column;\r\n          newArgs.position = getContainerBox(idx);\r\n          newArgs.commitChanges = noop;\r\n          newArgs.cancelChanges = noop;\r\n          newArgs.compositeEditorOptions = options;\r\n          newArgs.formValues = {};\r\n\r\n          const currentEditor = new (column.editor as any)(newArgs) as Editor & { args: EditorArguments };\r\n          options.editors[column.id] = currentEditor; // add every Editor instance refs\r\n          editors.push(currentEditor);\r\n        }\r\n        idx++;\r\n      }\r\n\r\n      // focus on first input\r\n      window.setTimeout(() => {\r\n        if (Array.isArray(editors) && editors.length > 0 && typeof editors[0].focus === 'function') {\r\n          editors[0].focus();\r\n        }\r\n      }, 0);\r\n    }\r\n\r\n    context.destroy = () => {\r\n      let idx = 0;\r\n      while (idx < editors.length) {\r\n        editors[idx].destroy();\r\n        idx++;\r\n      }\r\n\r\n      options.destroy?.();\r\n      editors = [];\r\n    };\r\n\r\n\r\n    context.focus = () => {\r\n      // if validation has failed, set the focus to the first invalid editor\r\n      (firstInvalidEditor || editors[0]).focus();\r\n    };\r\n\r\n    context.isValueChanged = () => {\r\n      let idx = 0;\r\n      while (idx < editors.length) {\r\n        if (editors[idx].isValueChanged()) {\r\n          return true;\r\n        }\r\n        idx++;\r\n      }\r\n      return false;\r\n    };\r\n\r\n    context.serializeValue = () => {\r\n      const serializedValue: any[] = [];\r\n      let idx = 0;\r\n      while (idx < editors.length) {\r\n        serializedValue[idx] = editors[idx].serializeValue();\r\n        idx++;\r\n      }\r\n      return serializedValue;\r\n    };\r\n\r\n    context.applyValue = (item: any, state: any) => {\r\n      let idx = 0;\r\n      while (idx < editors.length) {\r\n        editors[idx].applyValue(item, state[idx]);\r\n        idx++;\r\n      }\r\n    };\r\n\r\n    context.loadValue = (item: any) => {\r\n      let idx = 0;\r\n\r\n      while (idx < editors.length) {\r\n        editors[idx].loadValue(item);\r\n        idx++;\r\n      }\r\n    };\r\n\r\n    context.validate = (target: HTMLElement | null) => {\r\n      let validationResults;\r\n      const errors: any[] = [];\r\n      let targetElm = target ? target : null;\r\n\r\n      firstInvalidEditor = null;\r\n\r\n      let idx = 0;\r\n      while (idx < editors.length) {\r\n        const columnDef = editors[idx].args?.column ?? {};\r\n        if (columnDef) {\r\n          let validationElm = document.querySelector(`.item-details-validation.editor-${columnDef.id}`);\r\n          let labelElm = document.querySelector(`.item-details-label.editor-${columnDef.id}`);\r\n          let editorElm = document.querySelector(`[data-editorid=${columnDef.id}]`);\r\n          const validationMsgPrefix = options?.validationMsgPrefix || '';\r\n\r\n          if (!targetElm || Slick.Utils.contains(editorElm as HTMLElement, targetElm)) {\r\n            validationResults = editors[idx].validate();\r\n\r\n            if (!validationResults.valid) {\r\n              firstInvalidEditor = editors[idx];\r\n              errors.push({\r\n                index: idx,\r\n                editor: editors[idx],\r\n                container: containers[idx],\r\n                msg: validationResults.msg\r\n              });\r\n\r\n              if (validationElm) {\r\n                validationElm.textContent = validationMsgPrefix + validationResults.msg;\r\n                labelElm?.classList.add('invalid');\r\n                editorElm?.classList.add('invalid');\r\n              }\r\n            } else if (validationElm) {\r\n              validationElm.textContent = '';\r\n              editorElm?.classList.remove('invalid');\r\n              labelElm?.classList.remove('invalid');\r\n            }\r\n          }\r\n          validationElm = null;\r\n          labelElm = null;\r\n          editorElm = null;\r\n        }\r\n        idx++;\r\n      }\r\n      targetElm = null;\r\n\r\n      if (errors.length) {\r\n        return {\r\n          valid: false,\r\n          msg: options.validationFailedMsg,\r\n          errors\r\n        };\r\n      }\r\n\r\n      return {\r\n        valid: true,\r\n        msg: ''\r\n      };\r\n    };\r\n\r\n    context.hide = () => {\r\n      let idx = 0;\r\n      while (idx < editors.length) {\r\n        editors[idx]?.hide?.();\r\n        idx++;\r\n      }\r\n      options?.hide?.();\r\n    };\r\n\r\n    context.show = () => {\r\n      let idx = 0;\r\n      while (idx < editors.length) {\r\n        editors[idx]?.show?.();\r\n        idx++;\r\n      }\r\n      options?.show?.();\r\n    };\r\n\r\n    context.position = (box: HtmlElementPosition) => {\r\n      options?.position?.(box);\r\n    };\r\n\r\n    init();\r\n  }\r\n\r\n  // so we can do \"editor instanceof Slick.CompositeEditor\r\n  // @ts-ignore\r\n  editor.prototype = this;\r\n  return editor;\r\n}\r\n\r\n// extend Slick namespace on window object when building as iife\r\nif (IIFE_ONLY && window.Slick) {\r\n  Utils.extend(Slick, {\r\n    CompositeEditor: SlickCompositeEditor\r\n  });\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
